(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _classPrivateFieldBase;

function _classPrivateFieldBase(receiver, privateKey) {
  if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
    throw new TypeError("attempted to use private field on non-instance");
  }

  return receiver;
}

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _classPrivateFieldKey;
var id = 0;

function _classPrivateFieldKey(name) {
  return "__private_" + id++ + "_" + name;
}

},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BLAKE2 = exports.SIGMA = void 0;
const utils_js_1 = require("./utils.js");
// prettier-ignore
exports.SIGMA = new Uint8Array([
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
    11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
    7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
    9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
    2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
    12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
    13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
    6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
    10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
    // For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
]);
class BLAKE2 extends utils_js_1.Hash {
    constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.length = 0;
        this.pos = 0;
        this.finished = false;
        this.destroyed = false;
        (0, utils_js_1.assertNumber)(blockLen);
        (0, utils_js_1.assertNumber)(outputLen);
        (0, utils_js_1.assertNumber)(keyLen);
        if (outputLen < 0 || outputLen > keyLen)
            throw new Error('Blake2: outputLen bigger than keyLen');
        if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen))
            throw new Error(`Key should be up 1..${keyLen} byte long or undefined`);
        if (opts.salt !== undefined && opts.salt.length !== saltLen)
            throw new Error(`Salt should be ${saltLen} byte long or undefined`);
        if (opts.personalization !== undefined && opts.personalization.length !== persLen)
            throw new Error(`Personalization should be ${persLen} byte long or undefined`);
        this.buffer32 = (0, utils_js_1.u32)((this.buffer = new Uint8Array(blockLen)));
    }
    update(data) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        // Main difference with other hashes: there is flag for last block,
        // so we cannot process current block before we know that there
        // is the next one. This significantly complicates logic and reduces ability
        // to do zero-copy processing
        const { finished, blockLen, buffer, buffer32 } = this;
        if (finished)
            throw new Error('digest() was already called');
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            // If buffer is full and we still have input (don't process last block, same as blake2s)
            if (this.pos === blockLen) {
                this.compress(buffer32, 0, false);
                this.pos = 0;
            }
            const take = Math.min(blockLen - this.pos, len - pos);
            const dataOffset = data.byteOffset + pos;
            // full block && aligned to 4 bytes && not last in input
            if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                const data32 = new Uint32Array(data.buffer, dataOffset, Math.floor((len - pos) / 4));
                for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
                    this.length += blockLen;
                    this.compress(data32, pos32, false);
                }
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            this.length += take;
            pos += take;
        }
        return this;
    }
    digestInto(out) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (!(out instanceof Uint8Array) || out.length < this.outputLen)
            throw new Error('_Blake2: Invalid output buffer');
        const { finished, pos, buffer32 } = this;
        if (finished)
            throw new Error('digest() was already called');
        this.finished = true;
        // Padding
        this.buffer.subarray(pos).fill(0);
        this.compress(buffer32, 0, true);
        const out32 = (0, utils_js_1.u32)(out);
        this.get().forEach((v, i) => (out32[i] = v));
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        const { buffer, length, finished, destroyed, outputLen, pos } = this;
        to || (to = new this.constructor({ dkLen: outputLen }));
        to.set(...this.get());
        to.length = length;
        to.finished = finished;
        to.destroyed = destroyed;
        to.outputLen = outputLen;
        to.buffer.set(buffer);
        to.pos = pos;
        return to;
    }
}
exports.BLAKE2 = BLAKE2;

},{"./utils.js":14}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SHA2 = void 0;
const utils_js_1 = require("./utils.js");
// Polyfill for Safari 14
function setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === 'function')
        return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number((value >> _32n) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class SHA2 extends utils_js_1.Hash {
    constructor(blockLen, outputLen, padOffset, isLE) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
    }
    update(data) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        const { view, buffer, blockLen, finished } = this;
        if (finished)
            throw new Error('digest() was already called');
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, utils_js_1.createView)(data);
                for (; blockLen <= len - pos; pos += blockLen)
                    this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (!(out instanceof Uint8Array) || out.length < this.outputLen)
            throw new Error('_Sha2: Invalid output buffer');
        if (this.finished)
            throw new Error('digest() was already called');
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer, view, blockLen, isLE } = this;
        let { pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 0b10000000;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
        // NOTE: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64bit of that value.
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
            to.buffer.set(buffer);
        return to;
    }
}
exports.SHA2 = SHA2;

},{"./utils.js":14}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.add5H = exports.add5L = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
const U32_MASK64 = BigInt(2 ** 32 - 1);
const _32n = BigInt(32);
function fromBig(n, le = false) {
    if (le)
        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
exports.fromBig = fromBig;
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
exports.split = split;
const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
exports.toBig = toBig;
// for Shift in [0, 32)
const shrSH = (h, l, s) => h >>> s;
exports.shrSH = shrSH;
const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
exports.shrSL = shrSL;
// Right rotate for Shift in [1, 32)
const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
exports.rotrSH = rotrSH;
const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
exports.rotrSL = rotrSL;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
exports.rotrBH = rotrBH;
const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
exports.rotrBL = rotrBL;
// Right rotate for shift===32 (just swaps l&h)
const rotr32H = (h, l) => l;
exports.rotr32H = rotr32H;
const rotr32L = (h, l) => h;
exports.rotr32L = rotr32L;
// Left rotate for Shift in [1, 32)
const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
exports.rotlSH = rotlSH;
const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
exports.rotlSL = rotlSL;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
exports.rotlBH = rotlBH;
const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
exports.rotlBL = rotlBL;
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
exports.add = add;
// Addition with more than 2 elements
const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
exports.add3L = add3L;
const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
exports.add3H = add3H;
const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
exports.add4L = add4L;
const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
exports.add4H = add4H;
const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
exports.add5L = add5L;
const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
exports.add5H = add5H;

},{}],6:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.blake2b = void 0;
const blake2 = __importStar(require("./_blake2.js"));
const u64 = __importStar(require("./_u64.js"));
const utils_js_1 = require("./utils.js");
// Same as SHA-512 but LE
// prettier-ignore
const IV = new Uint32Array([
    0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,
    0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19
]);
// Temporary buffer
const BUF = new Uint32Array(32);
// Mixing function G splitted in two halfs
function G1(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = u64.add3L(Al, Bl, Xl);
    Ah = u64.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 32)
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: u64.rotr32H(Dh, Dl), Dl: u64.rotr32L(Dh, Dl) });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 24)
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: u64.rotrSH(Bh, Bl, 24), Bl: u64.rotrSL(Bh, Bl, 24) });
    (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
    (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
    (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
    (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
}
function G2(a, b, c, d, msg, x) {
    // NOTE: V is LE here
    const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
    let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
    let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
    let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
    let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
    // v[a] = (v[a] + v[b] + x) | 0;
    let ll = u64.add3L(Al, Bl, Xl);
    Ah = u64.add3H(ll, Ah, Bh, Xh);
    Al = ll | 0;
    // v[d] = rotr(v[d] ^ v[a], 16)
    ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
    ({ Dh, Dl } = { Dh: u64.rotrSH(Dh, Dl, 16), Dl: u64.rotrSL(Dh, Dl, 16) });
    // v[c] = (v[c] + v[d]) | 0;
    ({ h: Ch, l: Cl } = u64.add(Ch, Cl, Dh, Dl));
    // v[b] = rotr(v[b] ^ v[c], 63)
    ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
    ({ Bh, Bl } = { Bh: u64.rotrBH(Bh, Bl, 63), Bl: u64.rotrBL(Bh, Bl, 63) });
    (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
    (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
    (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
    (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
}
class BLAKE2b extends blake2.BLAKE2 {
    constructor(opts = {}) {
        super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);
        // Same as SHA-512, but LE
        this.v0l = IV[0] | 0;
        this.v0h = IV[1] | 0;
        this.v1l = IV[2] | 0;
        this.v1h = IV[3] | 0;
        this.v2l = IV[4] | 0;
        this.v2h = IV[5] | 0;
        this.v3l = IV[6] | 0;
        this.v3h = IV[7] | 0;
        this.v4l = IV[8] | 0;
        this.v4h = IV[9] | 0;
        this.v5l = IV[10] | 0;
        this.v5h = IV[11] | 0;
        this.v6l = IV[12] | 0;
        this.v6h = IV[13] | 0;
        this.v7l = IV[14] | 0;
        this.v7h = IV[15] | 0;
        const keyLength = opts.key ? opts.key.length : 0;
        this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);
        if (opts.salt) {
            const salt = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.salt));
            this.v4l ^= salt[0];
            this.v4h ^= salt[1];
            this.v5l ^= salt[2];
            this.v5h ^= salt[3];
        }
        if (opts.personalization) {
            const pers = (0, utils_js_1.u32)((0, utils_js_1.toBytes)(opts.personalization));
            this.v6l ^= pers[0];
            this.v6h ^= pers[1];
            this.v7l ^= pers[2];
            this.v7h ^= pers[3];
        }
        if (opts.key) {
            // Pad to blockLen and update
            const tmp = new Uint8Array(this.blockLen);
            tmp.set((0, utils_js_1.toBytes)(opts.key));
            this.update(tmp);
        }
    }
    // prettier-ignore
    get() {
        let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
        return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
    }
    // prettier-ignore
    set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
        this.v0l = v0l | 0;
        this.v0h = v0h | 0;
        this.v1l = v1l | 0;
        this.v1h = v1h | 0;
        this.v2l = v2l | 0;
        this.v2h = v2h | 0;
        this.v3l = v3l | 0;
        this.v3h = v3h | 0;
        this.v4l = v4l | 0;
        this.v4h = v4h | 0;
        this.v5l = v5l | 0;
        this.v5h = v5h | 0;
        this.v6l = v6l | 0;
        this.v6h = v6h | 0;
        this.v7l = v7l | 0;
        this.v7h = v7h | 0;
    }
    compress(msg, offset, isLast) {
        this.get().forEach((v, i) => (BUF[i] = v)); // First half from state.
        BUF.set(IV, 16); // Second half from IV.
        let { h, l } = u64.fromBig(BigInt(this.length));
        BUF[24] = IV[8] ^ l; // Low word of the offset.
        BUF[25] = IV[9] ^ h; // High word.
        // Invert all bits for last block
        if (isLast) {
            BUF[28] = ~BUF[28];
            BUF[29] = ~BUF[29];
        }
        let j = 0;
        const s = blake2.SIGMA;
        for (let i = 0; i < 12; i++) {
            G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
            G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
            G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
            G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
            G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
            G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
            G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
            G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
            G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
        }
        this.v0l ^= BUF[0] ^ BUF[16];
        this.v0h ^= BUF[1] ^ BUF[17];
        this.v1l ^= BUF[2] ^ BUF[18];
        this.v1h ^= BUF[3] ^ BUF[19];
        this.v2l ^= BUF[4] ^ BUF[20];
        this.v2h ^= BUF[5] ^ BUF[21];
        this.v3l ^= BUF[6] ^ BUF[22];
        this.v3h ^= BUF[7] ^ BUF[23];
        this.v4l ^= BUF[8] ^ BUF[24];
        this.v4h ^= BUF[9] ^ BUF[25];
        this.v5l ^= BUF[10] ^ BUF[26];
        this.v5h ^= BUF[11] ^ BUF[27];
        this.v6l ^= BUF[12] ^ BUF[28];
        this.v6h ^= BUF[13] ^ BUF[29];
        this.v7l ^= BUF[14] ^ BUF[30];
        this.v7h ^= BUF[15] ^ BUF[31];
        BUF.fill(0);
    }
    destroy() {
        this.destroyed = true;
        this.buffer32.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
exports.blake2b = (0, utils_js_1.wrapConstructorWithOpts)((opts) => new BLAKE2b(opts));

},{"./_blake2.js":3,"./_u64.js":5,"./utils.js":14}],7:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.crypto = void 0;
const crypto_1 = __importDefault(require("crypto"));
exports.crypto = {
    node: crypto_1.default,
    web: undefined,
};

},{"crypto":741}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hmac = void 0;
const utils_js_1 = require("./utils.js");
// HMAC (RFC 2104)
class HMAC extends utils_js_1.Hash {
    constructor(hash, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, utils_js_1.assertHash)(hash);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash.create();
        if (!(this.iHash instanceof utils_js_1.Hash))
            throw new TypeError('Expected instance of class which extends utils.Hash');
        const blockLen = (this.blockLen = this.iHash.blockLen);
        this.outputLen = this.iHash.outputLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for (let i = 0; i < pad.length; i++)
            pad[i] ^= 0x36 ^ 0x5c;
        this.oHash.update(pad);
        pad.fill(0);
    }
    update(buf) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (!(out instanceof Uint8Array) || out.length !== this.outputLen)
            throw new Error('HMAC: Invalid output buffer');
        if (this.finished)
            throw new Error('digest() was already called');
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
exports.hmac = hmac;
exports.hmac.create = (hash, key) => new HMAC(hash, key);
exports.hmac.init = exports.hmac.create;

},{"./utils.js":14}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pbkdf2Async = exports.pbkdf2 = void 0;
const hmac_js_1 = require("./hmac.js");
// prettier-ignore
const utils_js_1 = require("./utils.js");
// Common prologue and epilogue for sync/async functions
function pbkdf2Init(hash, _password, _salt, _opts) {
    (0, utils_js_1.assertHash)(hash);
    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c, dkLen, asyncTick } = opts;
    (0, utils_js_1.assertNumber)(c);
    (0, utils_js_1.assertNumber)(dkLen);
    (0, utils_js_1.assertNumber)(asyncTick);
    if (c < 1)
        throw new Error('PBKDF2: iterations (c) should be >= 1');
    const password = (0, utils_js_1.toBytes)(_password);
    const salt = (0, utils_js_1.toBytes)(_salt);
    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
    const DK = new Uint8Array(dkLen);
    // U1 = PRF(Password, Salt + INT_32_BE(i))
    const PRF = hmac_js_1.hmac.init(hash, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW)
        prfW.destroy();
    u.fill(0);
    return DK;
}
function pbkdf2(hash, password, salt, _opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, _opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, utils_js_1.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
                Ti[i] ^= u[i];
        }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
exports.pbkdf2 = pbkdf2;
async function pbkdf2Async(hash, password, salt, _opts) {
    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, _opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, utils_js_1.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, (i) => {
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
                Ti[i] ^= u[i];
        });
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
exports.pbkdf2Async = pbkdf2Async;

},{"./hmac.js":8,"./utils.js":14}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scryptAsync = exports.scrypt = void 0;
const sha256_js_1 = require("./sha256.js");
const pbkdf2_js_1 = require("./pbkdf2.js");
const utils_js_1 = require("./utils.js");
// Left rotate for uint32
const rotl = (a, b) => (a << b) | (a >>> (32 - b));
// prettier-ignore
function XorAndSalsa(prev, pi, input, ii, out, oi) {
    // Based on https://cr.yp.to/salsa20.html
    // Xor blocks
    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
    // Save state to temporary variables (salsa)
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    // Main loop (salsa)
    for (let i = 0; i < 8; i += 2) {
        x04 ^= rotl(x00 + x12 | 0, 7);
        x08 ^= rotl(x04 + x00 | 0, 9);
        x12 ^= rotl(x08 + x04 | 0, 13);
        x00 ^= rotl(x12 + x08 | 0, 18);
        x09 ^= rotl(x05 + x01 | 0, 7);
        x13 ^= rotl(x09 + x05 | 0, 9);
        x01 ^= rotl(x13 + x09 | 0, 13);
        x05 ^= rotl(x01 + x13 | 0, 18);
        x14 ^= rotl(x10 + x06 | 0, 7);
        x02 ^= rotl(x14 + x10 | 0, 9);
        x06 ^= rotl(x02 + x14 | 0, 13);
        x10 ^= rotl(x06 + x02 | 0, 18);
        x03 ^= rotl(x15 + x11 | 0, 7);
        x07 ^= rotl(x03 + x15 | 0, 9);
        x11 ^= rotl(x07 + x03 | 0, 13);
        x15 ^= rotl(x11 + x07 | 0, 18);
        x01 ^= rotl(x00 + x03 | 0, 7);
        x02 ^= rotl(x01 + x00 | 0, 9);
        x03 ^= rotl(x02 + x01 | 0, 13);
        x00 ^= rotl(x03 + x02 | 0, 18);
        x06 ^= rotl(x05 + x04 | 0, 7);
        x07 ^= rotl(x06 + x05 | 0, 9);
        x04 ^= rotl(x07 + x06 | 0, 13);
        x05 ^= rotl(x04 + x07 | 0, 18);
        x11 ^= rotl(x10 + x09 | 0, 7);
        x08 ^= rotl(x11 + x10 | 0, 9);
        x09 ^= rotl(x08 + x11 | 0, 13);
        x10 ^= rotl(x09 + x08 | 0, 18);
        x12 ^= rotl(x15 + x14 | 0, 7);
        x13 ^= rotl(x12 + x15 | 0, 9);
        x14 ^= rotl(x13 + x12 | 0, 13);
        x15 ^= rotl(x14 + x13 | 0, 18);
    }
    // Write output (salsa)
    out[oi++] = (y00 + x00) | 0;
    out[oi++] = (y01 + x01) | 0;
    out[oi++] = (y02 + x02) | 0;
    out[oi++] = (y03 + x03) | 0;
    out[oi++] = (y04 + x04) | 0;
    out[oi++] = (y05 + x05) | 0;
    out[oi++] = (y06 + x06) | 0;
    out[oi++] = (y07 + x07) | 0;
    out[oi++] = (y08 + x08) | 0;
    out[oi++] = (y09 + x09) | 0;
    out[oi++] = (y10 + x10) | 0;
    out[oi++] = (y11 + x11) | 0;
    out[oi++] = (y12 + x12) | 0;
    out[oi++] = (y13 + x13) | 0;
    out[oi++] = (y14 + x14) | 0;
    out[oi++] = (y15 + x15) | 0;
}
function BlockMix(input, ii, out, oi, r) {
    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
    let head = oi + 0;
    let tail = oi + 16 * r;
    for (let i = 0; i < 16; i++)
        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]
    for (let i = 0; i < r; i++, head += 16, ii += 16) {
        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])
        if (i > 0)
            tail += 16; // First iteration overwrites tmp value in tail
        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])
    }
}
// Common prologue and epilogue for sync/async functions
function scryptInit(password, salt, _opts) {
    // Maxmem - 1GB+1KB by default
    const opts = (0, utils_js_1.checkOpts)({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024,
    }, _opts);
    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
    (0, utils_js_1.assertNumber)(N);
    (0, utils_js_1.assertNumber)(r);
    (0, utils_js_1.assertNumber)(p);
    (0, utils_js_1.assertNumber)(dkLen);
    (0, utils_js_1.assertNumber)(asyncTick);
    (0, utils_js_1.assertNumber)(maxmem);
    if (onProgress !== undefined && typeof onProgress !== 'function')
        throw new Error('progressCb should be function');
    const blockSize = 128 * r;
    const blockSize32 = blockSize / 4;
    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function
        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');
    }
    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {
        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');
    }
    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');
    }
    const memUsed = blockSize * (N + p);
    if (memUsed > maxmem) {
        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
    }
    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
    // Since it has only one iteration there is no reason to use async variant
    const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });
    const B32 = (0, utils_js_1.u32)(B);
    // Re-used between parallel iterations. Array(iterations) of B
    const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));
    const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));
    let blockMixCb = () => { };
    if (onProgress) {
        const totalBlockMix = 2 * N * p;
        // Invoke callback if progress changes from 10.01 to 10.02
        // Allows to draw smooth progress bar on up to 8K screen
        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);
        let blockMixCnt = 0;
        blockMixCb = () => {
            blockMixCnt++;
            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
                onProgress(blockMixCnt / totalBlockMix);
        };
    }
    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V, tmp) {
    const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });
    B.fill(0);
    V.fill(0);
    tmp.fill(0);
    return res;
}
function scrypt(password, salt, _opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, _opts);
    for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
            V[i] = B32[Pi + i]; // V[0] = B[i]
        for (let i = 0, pos = 0; i < N - 1; i++) {
            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
            blockMixCb();
        }
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
        blockMixCb();
        for (let i = 0; i < N; i++) {
            // First u32 of the last 64-byte block (u32 is LE)
            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
            for (let k = 0; k < blockSize32; k++)
                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
            blockMixCb();
        }
    }
    return scryptOutput(password, dkLen, B, V, tmp);
}
exports.scrypt = scrypt;
async function scryptAsync(password, salt, _opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, _opts);
    for (let pi = 0; pi < p; pi++) {
        const Pi = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
            V[i] = B32[Pi + i]; // V[0] = B[i]
        let pos = 0;
        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, (i) => {
            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
            blockMixCb();
        });
        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
        blockMixCb();
        await (0, utils_js_1.asyncLoop)(N, asyncTick, (i) => {
            // First u32 of the last 64-byte block (u32 is LE)
            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
            for (let k = 0; k < blockSize32; k++)
                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
            blockMixCb();
        });
    }
    return scryptOutput(password, dkLen, B, V, tmp);
}
exports.scryptAsync = scryptAsync;

},{"./pbkdf2.js":9,"./sha256.js":11,"./utils.js":14}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha256 = void 0;
const _sha2_js_1 = require("./_sha2.js");
const utils_js_1 = require("./utils.js");
// Choice: a ? b : c
const Chi = (a, b, c) => (a & b) ^ (~a & c);
// Majority function, true if any two inpust is true
const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const SHA256_K = new Uint32Array([
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const IV = new Uint32Array([
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const SHA256_W = new Uint32Array(64);
class SHA256 extends _sha2_js_1.SHA2 {
    constructor() {
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);
            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        // Compression function main loop, 64 rounds
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
            const T2 = (sigma0 + Maj(A, B, C)) | 0;
            H = G;
            G = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        // Add the compressed chunk to the current hash value
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G = (G + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());

},{"./_sha2.js":4,"./utils.js":14}],12:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
const u64 = __importStar(require("./_u64.js"));
const utils_js_1 = require("./utils.js");
// Various per round constants calculations
const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const _7n = BigInt(7);
const _256n = BigInt(256);
const _0x71n = BigInt(0x71);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
    // Pi
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
    // Iota
    let t = _0n;
    for (let j = 0; j < 7; j++) {
        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;
        if (R & _2n)
            t ^= _1n << ((_1n << BigInt(j)) - _1n);
    }
    _SHA3_IOTA.push(t);
}
const [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);
const rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);
// Same as keccakf1600, but allows to skip some rounds
function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for (let round = 24 - rounds; round < 24; round++) {
        // Theta θ
        for (let x = 0; x < 10; x++)
            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for (let y = 0; y < 50; y += 10) {
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
            const shift = SHA3_ROTL[t];
            const Th = rotlH(curH, curL, shift);
            const Tl = rotlL(curH, curL, shift);
            const PI = SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for (let y = 0; y < 50; y += 10) {
            for (let x = 0; x < 10; x++)
                B[x] = s[y + x];
            for (let x = 0; x < 10; x++)
                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
}
exports.keccakP = keccakP;
class Keccak extends utils_js_1.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        (0, utils_js_1.assertNumber)(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200)
            throw new Error('Sha3 supports only keccak-f1600 function');
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
    }
    keccak() {
        keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (this.finished)
            throw new Error('digest() was already called');
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len;) {
            const take = Math.min(blockLen - this.pos, len - pos);
            for (let i = 0; i < take; i++)
                state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen)
                this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished)
            return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
            this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        if (this.destroyed)
            throw new Error('instance is destroyed');
        if (!(out instanceof Uint8Array))
            throw new Error('Keccak: invalid output buffer');
        this.finish();
        for (let pos = 0, len = out.length; pos < len;) {
            if (this.posOut >= this.blockLen)
                this.keccak();
            const take = Math.min(this.blockLen - this.posOut, len - pos);
            out.set(this.state.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF)
            throw new Error('XOF is not possible for this instance');
        return this.writeInto(out);
    }
    xof(bytes) {
        (0, utils_js_1.assertNumber)(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        if (out.length < this.outputLen)
            throw new Error('Keccak: invalid output buffer');
        if (this.finished)
            throw new Error('digest() was already called');
        this.finish();
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
exports.Keccak = Keccak;
const gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));
exports.sha3_224 = gen(0x06, 144, 224 / 8);
exports.sha3_256 = gen(0x06, 136, 256 / 8);
exports.sha3_384 = gen(0x06, 104, 384 / 8);
exports.sha3_512 = gen(0x06, 72, 512 / 8);
exports.keccak_224 = gen(0x01, 144, 224 / 8);
exports.keccak_256 = gen(0x01, 136, 256 / 8);
exports.keccak_384 = gen(0x01, 104, 384 / 8);
exports.keccak_512 = gen(0x01, 72, 512 / 8);
const genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen !== undefined ? opts.dkLen : outputLen, true));
exports.shake128 = genShake(0x1f, 168, 128 / 8);
exports.shake256 = genShake(0x1f, 136, 256 / 8);

},{"./_u64.js":5,"./utils.js":14}],13:[function(require,module,exports){
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sha384 = exports.sha512_256 = exports.sha512 = exports.SHA512 = void 0;
const _sha2_js_1 = require("./_sha2.js");
const u64 = __importStar(require("./_u64.js"));
const utils_js_1 = require("./utils.js");
// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const [SHA512_Kh, SHA512_Kl] = u64.split([
    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',
    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',
    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',
    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',
    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',
    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',
    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',
    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',
    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',
    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',
    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',
    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',
    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',
    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',
    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',
    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',
    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',
    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',
    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',
    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'
].map(n => BigInt(n)));
// Temporary buffer, not used to store anything between runs
const SHA512_W_H = new Uint32Array(80);
const SHA512_W_L = new Uint32Array(80);
class SHA512 extends _sha2_js_1.SHA2 {
    constructor() {
        super(128, 64, 16, false);
        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
        // Also looks cleaner and easier to verify with spec.
        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0x6a09e667 | 0;
        this.Al = 0xf3bcc908 | 0;
        this.Bh = 0xbb67ae85 | 0;
        this.Bl = 0x84caa73b | 0;
        this.Ch = 0x3c6ef372 | 0;
        this.Cl = 0xfe94f82b | 0;
        this.Dh = 0xa54ff53a | 0;
        this.Dl = 0x5f1d36f1 | 0;
        this.Eh = 0x510e527f | 0;
        this.El = 0xade682d1 | 0;
        this.Fh = 0x9b05688c | 0;
        this.Fl = 0x2b3e6c1f | 0;
        this.Gh = 0x1f83d9ab | 0;
        this.Gl = 0xfb41bd6b | 0;
        this.Hh = 0x5be0cd19 | 0;
        this.Hl = 0x137e2179 | 0;
    }
    // prettier-ignore
    get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for (let i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32((offset += 4));
        }
        for (let i = 16; i < 80; i++) {
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);
            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);
            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        // Compression function main loop, 80 rounds
        for (let i = 0; i < 80; i++) {
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);
            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = (Eh & Fh) ^ (~Eh & Gh);
            const CHIl = (El & Fl) ^ (~El & Gl);
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);
            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);
            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = u64.add3L(T1l, sigma0l, MAJl);
            Ah = u64.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
    }
    destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
exports.SHA512 = SHA512;
class SHA512_256 extends SHA512 {
    constructor() {
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0x22312194 | 0;
        this.Al = 0xfc2bf72c | 0;
        this.Bh = 0x9f555fa3 | 0;
        this.Bl = 0xc84c64c2 | 0;
        this.Ch = 0x2393b86b | 0;
        this.Cl = 0x6f53b151 | 0;
        this.Dh = 0x96387719 | 0;
        this.Dl = 0x5940eabd | 0;
        this.Eh = 0x96283ee2 | 0;
        this.El = 0xa88effe3 | 0;
        this.Fh = 0xbe5e1e25 | 0;
        this.Fl = 0x53863992 | 0;
        this.Gh = 0x2b0199fc | 0;
        this.Gl = 0x2c85b8aa | 0;
        this.Hh = 0x0eb72ddc | 0;
        this.Hl = 0x81c52ca2 | 0;
        this.outputLen = 32;
    }
}
class SHA384 extends SHA512 {
    constructor() {
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 0xcbbb9d5d | 0;
        this.Al = 0xc1059ed8 | 0;
        this.Bh = 0x629a292a | 0;
        this.Bl = 0x367cd507 | 0;
        this.Ch = 0x9159015a | 0;
        this.Cl = 0x3070dd17 | 0;
        this.Dh = 0x152fecd8 | 0;
        this.Dl = 0xf70e5939 | 0;
        this.Eh = 0x67332667 | 0;
        this.El = 0xffc00b31 | 0;
        this.Fh = 0x8eb44a87 | 0;
        this.Fl = 0x68581511 | 0;
        this.Gh = 0xdb0c2e0d | 0;
        this.Gl = 0x64f98fa7 | 0;
        this.Hh = 0x47b5481d | 0;
        this.Hl = 0xbefa4fa4 | 0;
        this.outputLen = 48;
    }
}
exports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());
exports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());
exports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());

},{"./_sha2.js":4,"./_u64.js":5,"./utils.js":14}],14:[function(require,module,exports){
"use strict";
/*! noble-hashes - MIT License (c) 2021 Paul Miller (paulmillr.com) */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.assertHash = exports.assertBool = exports.assertNumber = exports.toBytes = exports.asyncLoop = exports.nextTick = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0; // The import here is via the package name. This is to ensure
// that exports mapping/resolution does fall into place.

const crypto_1 = require("@noble/hashes/lib/crypto"); // Cast array to different type


const u8 = arr => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);

exports.u8 = u8;

const u32 = arr => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));

exports.u32 = u32; // Cast array to view

const createView = arr => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);

exports.createView = createView; // The rotate right (circular right shift) operation for uint32

const rotr = (word, shift) => word << 32 - shift | word >>> shift;

exports.rotr = rotr;
exports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44; // There is almost no big endian hardware, but js typed arrays uses platform specific endianess.
// So, just to be sure not to corrupt anything.

if (!exports.isLE) throw new Error('Non little-endian hardware is not supported');
const hexes = Array.from({
  length: 256
}, (v, i) => i.toString(16).padStart(2, '0'));

function bytesToHex(uint8a) {
  // pre-caching chars could speed this up 6x.
  let hex = '';

  for (let i = 0; i < uint8a.length; i++) {
    hex += hexes[uint8a[i]];
  }

  return hex;
}

exports.bytesToHex = bytesToHex; // Currently avoid insertion of polyfills with packers (browserify/webpack/etc)
// But setTimeout is pretty slow, maybe worth to investigate howto do minimal polyfill here

exports.nextTick = (() => {
  const nodeRequire = typeof module !== 'undefined' && typeof module.require === 'function' && module.require.bind(module);

  try {
    if (nodeRequire) {
      const {
        setImmediate
      } = nodeRequire('timers');
      return () => new Promise(resolve => setImmediate(resolve));
    }
  } catch (e) {}

  return () => new Promise(resolve => setTimeout(resolve, 0));
})(); // Returns control to thread each 'tick' ms to avoid blocking


async function asyncLoop(iters, tick, cb) {
  let ts = Date.now();

  for (let i = 0; i < iters; i++) {
    cb(i); // Date.now() is not monotonic, so in case if clock goes backwards we return return control too

    const diff = Date.now() - ts;
    if (diff >= 0 && diff < tick) continue;
    await (0, exports.nextTick)();
    ts += diff;
  }
}

exports.asyncLoop = asyncLoop;

function toBytes(data) {
  if (typeof data === 'string') data = new TextEncoder().encode(data);
  if (!(data instanceof Uint8Array)) throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
  return data;
}

exports.toBytes = toBytes;

function assertNumber(n) {
  if (!Number.isSafeInteger(n)) throw new Error(`Wrong integer: ${n}`);
}

exports.assertNumber = assertNumber;

function assertBool(b) {
  if (typeof b !== 'boolean') {
    throw new Error(`Expected boolean, not ${b}`);
  }
}

exports.assertBool = assertBool;

function assertHash(hash) {
  if (typeof hash !== 'function' || typeof hash.init !== 'function') throw new Error('Hash should be wrapped by utils.wrapConstructor');
  assertNumber(hash.outputLen);
  assertNumber(hash.blockLen);
}

exports.assertHash = assertHash; // For runtime check if class implements interface

class Hash {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }

}

exports.Hash = Hash; // Check if object doens't have custom constructor (like Uint8Array/Array)

const isPlainObject = obj => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;

function checkOpts(def, _opts) {
  if (_opts !== undefined && (typeof _opts !== 'object' || !isPlainObject(_opts))) throw new TypeError('Options should be object or undefined');
  const opts = Object.assign(def, _opts);
  return opts;
}

exports.checkOpts = checkOpts;

function wrapConstructor(hashConstructor) {
  const hashC = message => hashConstructor().update(toBytes(message)).digest();

  const tmp = hashConstructor();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;

  hashC.create = () => hashConstructor();

  hashC.init = hashC.create;
  return hashC;
}

exports.wrapConstructor = wrapConstructor;

function wrapConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();

  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;

  hashC.create = opts => hashCons(opts);

  hashC.init = hashC.create;
  return hashC;
}

exports.wrapConstructorWithOpts = wrapConstructorWithOpts;

function randomBytes(bytesLength = 32) {
  if (crypto_1.crypto.web) {
    return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));
  } else if (crypto_1.crypto.node) {
    return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);
  } else {
    throw new Error("The environment doesn't have randomBytes function");
  }
}

exports.randomBytes = randomBytes;

},{"@noble/hashes/lib/crypto":7}],15:[function(require,module,exports){
"use strict";
/*! noble-secp256k1 - MIT License (c) Paul Miller (paulmillr.com) */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.utils = exports.schnorr = exports.verify = exports.signSync = exports.sign = exports.getSharedSecret = exports.recoverPublicKey = exports.getPublicKey = exports.SignResult = exports.Signature = exports.Point = exports.CURVE = void 0;
const crypto_1 = __importDefault(require("crypto"));
const _0n = BigInt(0);
const _1n = BigInt(1);
const _2n = BigInt(2);
const _3n = BigInt(3);
const _8n = BigInt(8);
const POW_2_256 = _2n ** BigInt(256);
const CURVE = {
    a: _0n,
    b: BigInt(7),
    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),
    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),
    h: _1n,
    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
};
exports.CURVE = CURVE;
function weistrass(x) {
    const { a, b } = CURVE;
    return mod(x ** _3n + a * x + b);
}
const USE_ENDOMORPHISM = CURVE.a === _0n;
class JacobianPoint {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
    static fromAffine(p) {
        if (!(p instanceof Point)) {
            throw new TypeError('JacobianPoint#fromAffine: expected Point');
        }
        return new JacobianPoint(p.x, p.y, _1n);
    }
    static toAffineBatch(points) {
        const toInv = invertBatch(points.map((p) => p.z));
        return points.map((p, i) => p.toAffine(toInv[i]));
    }
    static normalizeZ(points) {
        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
    }
    equals(other) {
        const a = this;
        const b = other;
        const az2 = mod(a.z * a.z);
        const az3 = mod(a.z * az2);
        const bz2 = mod(b.z * b.z);
        const bz3 = mod(b.z * bz2);
        return mod(a.x * bz2) === mod(az2 * b.x) && mod(a.y * bz3) === mod(az3 * b.y);
    }
    negate() {
        return new JacobianPoint(this.x, mod(-this.y), this.z);
    }
    double() {
        const X1 = this.x;
        const Y1 = this.y;
        const Z1 = this.z;
        const A = mod(X1 ** _2n);
        const B = mod(Y1 ** _2n);
        const C = mod(B ** _2n);
        const D = mod(_2n * (mod(mod((X1 + B) ** _2n)) - A - C));
        const E = mod(_3n * A);
        const F = mod(E ** _2n);
        const X3 = mod(F - _2n * D);
        const Y3 = mod(E * (D - X3) - _8n * C);
        const Z3 = mod(_2n * Y1 * Z1);
        return new JacobianPoint(X3, Y3, Z3);
    }
    add(other) {
        if (!(other instanceof JacobianPoint)) {
            throw new TypeError('JacobianPoint#add: expected JacobianPoint');
        }
        const X1 = this.x;
        const Y1 = this.y;
        const Z1 = this.z;
        const X2 = other.x;
        const Y2 = other.y;
        const Z2 = other.z;
        if (X2 === _0n || Y2 === _0n)
            return this;
        if (X1 === _0n || Y1 === _0n)
            return other;
        const Z1Z1 = mod(Z1 ** _2n);
        const Z2Z2 = mod(Z2 ** _2n);
        const U1 = mod(X1 * Z2Z2);
        const U2 = mod(X2 * Z1Z1);
        const S1 = mod(Y1 * Z2 * Z2Z2);
        const S2 = mod(mod(Y2 * Z1) * Z1Z1);
        const H = mod(U2 - U1);
        const r = mod(S2 - S1);
        if (H === _0n) {
            if (r === _0n) {
                return this.double();
            }
            else {
                return JacobianPoint.ZERO;
            }
        }
        const HH = mod(H ** _2n);
        const HHH = mod(H * HH);
        const V = mod(U1 * HH);
        const X3 = mod(r ** _2n - HHH - _2n * V);
        const Y3 = mod(r * (V - X3) - S1 * HHH);
        const Z3 = mod(Z1 * Z2 * H);
        return new JacobianPoint(X3, Y3, Z3);
    }
    subtract(other) {
        return this.add(other.negate());
    }
    multiplyUnsafe(scalar) {
        let n = normalizeScalar(scalar);
        if (!USE_ENDOMORPHISM) {
            let p = JacobianPoint.ZERO;
            let d = this;
            while (n > _0n) {
                if (n & _1n)
                    p = p.add(d);
                d = d.double();
                n >>= _1n;
            }
            return p;
        }
        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);
        let k1p = JacobianPoint.ZERO;
        let k2p = JacobianPoint.ZERO;
        let d = this;
        while (k1 > _0n || k2 > _0n) {
            if (k1 & _1n)
                k1p = k1p.add(d);
            if (k2 & _1n)
                k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n;
            k2 >>= _1n;
        }
        if (k1neg)
            k1p = k1p.negate();
        if (k2neg)
            k2p = k2p.negate();
        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
        return k1p.add(k2p);
    }
    precomputeWindow(W) {
        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
        let points = [];
        let p = this;
        let base = p;
        for (let window = 0; window < windows; window++) {
            base = p;
            points.push(base);
            for (let i = 1; i < 2 ** (W - 1); i++) {
                base = base.add(p);
                points.push(base);
            }
            p = base.double();
        }
        return points;
    }
    wNAF(n, affinePoint) {
        if (!affinePoint && this.equals(JacobianPoint.BASE))
            affinePoint = Point.BASE;
        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;
        if (256 % W) {
            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');
        }
        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
        if (!precomputes) {
            precomputes = this.precomputeWindow(W);
            if (affinePoint && W !== 1) {
                precomputes = JacobianPoint.normalizeZ(precomputes);
                pointPrecomputes.set(affinePoint, precomputes);
            }
        }
        let p = JacobianPoint.ZERO;
        let f = JacobianPoint.ZERO;
        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
        const windowSize = 2 ** (W - 1);
        const mask = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for (let window = 0; window < windows; window++) {
            const offset = window * windowSize;
            let wbits = Number(n & mask);
            n >>= shiftBy;
            if (wbits > windowSize) {
                wbits -= maxNumber;
                n += _1n;
            }
            if (wbits === 0) {
                let pr = precomputes[offset];
                if (window % 2)
                    pr = pr.negate();
                f = f.add(pr);
            }
            else {
                let cached = precomputes[offset + Math.abs(wbits) - 1];
                if (wbits < 0)
                    cached = cached.negate();
                p = p.add(cached);
            }
        }
        return { p, f };
    }
    multiply(scalar, affinePoint) {
        let n = normalizeScalar(scalar);
        let point;
        let fake;
        if (USE_ENDOMORPHISM) {
            let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);
            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);
            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);
            if (k1neg)
                k1p = k1p.negate();
            if (k2neg)
                k2p = k2p.negate();
            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
        }
        else {
            let { p, f } = this.wNAF(n, affinePoint);
            point = p;
            fake = f;
        }
        return JacobianPoint.normalizeZ([point, fake])[0];
    }
    toAffine(invZ = invert(this.z)) {
        const invZ2 = invZ ** _2n;
        const x = mod(this.x * invZ2);
        const y = mod(this.y * invZ2 * invZ);
        return new Point(x, y);
    }
}
JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);
JacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);
const pointPrecomputes = new WeakMap();
class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    _setWindowSize(windowSize) {
        this._WINDOW_SIZE = windowSize;
        pointPrecomputes.delete(this);
    }
    static fromCompressedHex(bytes) {
        const isShort = bytes.length === 32;
        const x = bytesToNumber(isShort ? bytes : bytes.slice(1));
        const y2 = weistrass(x);
        let y = sqrtMod(y2);
        const isYOdd = (y & _1n) === _1n;
        if (isShort) {
            if (isYOdd)
                y = mod(-y);
        }
        else {
            const isFirstByteOdd = (bytes[0] & 1) === 1;
            if (isFirstByteOdd !== isYOdd)
                y = mod(-y);
        }
        const point = new Point(x, y);
        point.assertValidity();
        return point;
    }
    static fromUncompressedHex(bytes) {
        const x = bytesToNumber(bytes.slice(1, 33));
        const y = bytesToNumber(bytes.slice(33));
        const point = new Point(x, y);
        point.assertValidity();
        return point;
    }
    static fromHex(hex) {
        const bytes = ensureBytes(hex);
        const header = bytes[0];
        if (bytes.length === 32 || (bytes.length === 33 && (header === 0x02 || header === 0x03))) {
            return this.fromCompressedHex(bytes);
        }
        if (bytes.length === 65 && header === 0x04)
            return this.fromUncompressedHex(bytes);
        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${bytes.length}`);
    }
    static fromPrivateKey(privateKey) {
        return Point.BASE.multiply(normalizePrivateKey(privateKey));
    }
    static fromSignature(msgHash, signature, recovery) {
        let h = msgHash instanceof Uint8Array ? bytesToNumber(msgHash) : hexToNumber(msgHash);
        const sig = normalizeSignature(signature);
        const { r, s } = sig;
        if (recovery !== 0 && recovery !== 1) {
            throw new Error('Cannot recover signature: invalid yParity bit');
        }
        const prefix = 2 + (recovery & 1);
        const P_ = Point.fromHex(`0${prefix}${pad64(r)}`);
        const sP = JacobianPoint.fromAffine(P_).multiplyUnsafe(s);
        const hG = JacobianPoint.BASE.multiply(h);
        const rinv = invert(r, CURVE.n);
        const Q = sP.subtract(hG).multiplyUnsafe(rinv);
        const point = Q.toAffine();
        point.assertValidity();
        return point;
    }
    toRawBytes(isCompressed = false) {
        return hexToBytes(this.toHex(isCompressed));
    }
    toHex(isCompressed = false) {
        const x = pad64(this.x);
        if (isCompressed) {
            return `${this.y & _1n ? '03' : '02'}${x}`;
        }
        else {
            return `04${x}${pad64(this.y)}`;
        }
    }
    toHexX() {
        return this.toHex(true).slice(2);
    }
    toRawX() {
        return this.toRawBytes(true).slice(1);
    }
    assertValidity() {
        const msg = 'Point is not on elliptic curve';
        const { P } = CURVE;
        const { x, y } = this;
        if (x === _0n || y === _0n || x >= P || y >= P)
            throw new Error(msg);
        const left = mod(y * y);
        const right = weistrass(x);
        if ((left - right) % P !== _0n)
            throw new Error(msg);
    }
    equals(other) {
        return this.x === other.x && this.y === other.y;
    }
    negate() {
        return new Point(this.x, mod(-this.y));
    }
    double() {
        return JacobianPoint.fromAffine(this).double().toAffine();
    }
    add(other) {
        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
    }
    subtract(other) {
        return this.add(other.negate());
    }
    multiply(scalar) {
        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
    }
}
exports.Point = Point;
Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
Point.ZERO = new Point(_0n, _0n);
function sliceDer(s) {
    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;
}
class Signature {
    constructor(r, s) {
        this.r = r;
        this.s = s;
    }
    static fromCompact(hex) {
        if (typeof hex !== 'string' && !(hex instanceof Uint8Array)) {
            throw new TypeError(`Signature.fromCompact: Expected string or Uint8Array`);
        }
        const str = hex instanceof Uint8Array ? bytesToHex(hex) : hex;
        if (str.length !== 128)
            throw new Error('Signature.fromCompact: Expected 64-byte hex');
        const sig = new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
        sig.assertValidity();
        return sig;
    }
    static fromDER(hex) {
        const fn = 'Signature.fromDER';
        if (typeof hex !== 'string' && !(hex instanceof Uint8Array)) {
            throw new TypeError(`${fn}: Expected string or Uint8Array`);
        }
        const str = hex instanceof Uint8Array ? bytesToHex(hex) : hex;
        const length = parseByte(str.slice(2, 4));
        if (str.slice(0, 2) !== '30' || length !== str.length - 4 || str.slice(4, 6) !== '02') {
            throw new Error(`${fn}: Invalid signature ${str}`);
        }
        const rLen = parseByte(str.slice(6, 8));
        const rEnd = 8 + rLen;
        const rr = str.slice(8, rEnd);
        if (rr.startsWith('00') && parseByte(rr.slice(2, 4)) <= 0x7f) {
            throw new Error(`${fn}: Invalid r with trailing length`);
        }
        const r = hexToNumber(rr);
        const separator = str.slice(rEnd, rEnd + 2);
        if (separator !== '02') {
            throw new Error(`${fn}: Invalid r-s separator`);
        }
        const sLen = parseByte(str.slice(rEnd + 2, rEnd + 4));
        const diff = length - sLen - rLen - 10;
        if (diff > 0 || diff === -4) {
            throw new Error(`${fn}: Invalid total length`);
        }
        if (sLen > length - rLen - 4) {
            throw new Error(`${fn}: Invalid s`);
        }
        const sStart = rEnd + 4;
        const ss = str.slice(sStart, sStart + sLen);
        if (ss.startsWith('00') && parseByte(ss.slice(2, 4)) <= 0x7f) {
            throw new Error(`${fn}: Invalid s with trailing length`);
        }
        const s = hexToNumber(ss);
        const sig = new Signature(r, s);
        sig.assertValidity();
        return sig;
    }
    static fromHex(hex) {
        return this.fromDER(hex);
    }
    assertValidity() {
        const { r, s } = this;
        if (!isWithinCurveOrder(r))
            throw new Error('Invalid Signature: r must be 0 < r < n');
        if (!isWithinCurveOrder(s))
            throw new Error('Invalid Signature: s must be 0 < s < n');
    }
    toDERRawBytes(isCompressed = false) {
        return hexToBytes(this.toDERHex(isCompressed));
    }
    toDERHex(isCompressed = false) {
        const sHex = sliceDer(numberToHex(this.s));
        if (isCompressed)
            return sHex;
        const rHex = sliceDer(numberToHex(this.r));
        const rLen = numberToHex(rHex.length / 2);
        const sLen = numberToHex(sHex.length / 2);
        const length = numberToHex(rHex.length / 2 + sHex.length / 2 + 4);
        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
    }
    toRawBytes() {
        return this.toDERRawBytes();
    }
    toHex() {
        return this.toDERHex();
    }
    toCompactRawBytes() {
        return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
        return pad64(this.r) + pad64(this.s);
    }
}
exports.Signature = Signature;
exports.SignResult = Signature;
function concatBytes(...arrays) {
    if (arrays.length === 1)
        return arrays[0];
    const length = arrays.reduce((a, arr) => a + arr.length, 0);
    const result = new Uint8Array(length);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
    }
    return result;
}
function bytesToHex(uint8a) {
    let hex = '';
    for (let i = 0; i < uint8a.length; i++) {
        hex += uint8a[i].toString(16).padStart(2, '0');
    }
    return hex;
}
function pad64(num) {
    return num.toString(16).padStart(64, '0');
}
function pad32b(num) {
    return hexToBytes(pad64(num));
}
function numberToHex(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);
    }
    return BigInt(`0x${hex}`);
}
function hexToBytes(hex) {
    if (typeof hex !== 'string') {
        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
    }
    if (hex.length % 2)
        throw new Error('hexToBytes: received invalid unpadded hex');
    const array = new Uint8Array(hex.length / 2);
    for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        array[i] = Number.parseInt(hex.slice(j, j + 2), 16);
    }
    return array;
}
function ensureBytes(hex) {
    return hex instanceof Uint8Array ? hex : hexToBytes(hex);
}
function bytesToNumber(bytes) {
    return hexToNumber(bytesToHex(bytes));
}
function parseByte(str) {
    return Number.parseInt(str, 16) * 2;
}
function normalizeScalar(num) {
    if (typeof num === 'number' && num > 0 && Number.isSafeInteger(num))
        return BigInt(num);
    if (typeof num === 'bigint' && isWithinCurveOrder(num))
        return num;
    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');
}
function mod(a, b = CURVE.P) {
    const result = a % b;
    return result >= 0 ? result : b + result;
}
function pow2(x, power) {
    const { P } = CURVE;
    let res = x;
    while (power-- > _0n) {
        res *= res;
        res %= P;
    }
    return res;
}
function sqrtMod(x) {
    const { P } = CURVE;
    const _6n = BigInt(6);
    const _11n = BigInt(11);
    const _22n = BigInt(22);
    const _23n = BigInt(23);
    const _44n = BigInt(44);
    const _88n = BigInt(88);
    const b2 = (x * x * x) % P;
    const b3 = (b2 * b2 * x) % P;
    const b6 = (pow2(b3, _3n) * b3) % P;
    const b9 = (pow2(b6, _3n) * b3) % P;
    const b11 = (pow2(b9, _2n) * b2) % P;
    const b22 = (pow2(b11, _11n) * b11) % P;
    const b44 = (pow2(b22, _22n) * b22) % P;
    const b88 = (pow2(b44, _44n) * b44) % P;
    const b176 = (pow2(b88, _88n) * b88) % P;
    const b220 = (pow2(b176, _44n) * b44) % P;
    const b223 = (pow2(b220, _3n) * b3) % P;
    const t1 = (pow2(b223, _23n) * b22) % P;
    const t2 = (pow2(t1, _6n) * b2) % P;
    return pow2(t2, _2n);
}
function invert(number, modulo = CURVE.P) {
    if (number === _0n || modulo <= _0n) {
        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
    }
    let a = mod(number, modulo);
    let b = modulo;
    let x = _0n, y = _1n, u = _1n, v = _0n;
    while (a !== _0n) {
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        b = a, a = r, x = u, y = v, u = m, v = n;
    }
    const gcd = b;
    if (gcd !== _1n)
        throw new Error('invert: does not exist');
    return mod(x, modulo);
}
function invertBatch(nums, n = CURVE.P) {
    const len = nums.length;
    const scratch = new Array(len);
    let acc = _1n;
    for (let i = 0; i < len; i++) {
        if (nums[i] === _0n)
            continue;
        scratch[i] = acc;
        acc = mod(acc * nums[i], n);
    }
    acc = invert(acc, n);
    for (let i = len - 1; i >= 0; i--) {
        if (nums[i] === _0n)
            continue;
        const tmp = mod(acc * nums[i], n);
        nums[i] = mod(acc * scratch[i], n);
        acc = tmp;
    }
    return nums;
}
const divNearest = (a, b) => (a + b / _2n) / b;
const POW_2_128 = _2n ** BigInt(128);
function splitScalarEndo(k) {
    const { n } = CURVE;
    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
    const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
    const b2 = a1;
    const c1 = divNearest(b2 * k, n);
    const c2 = divNearest(-b1 * k, n);
    let k1 = mod(k - c1 * a1 - c2 * a2, n);
    let k2 = mod(-c1 * b1 - c2 * b2, n);
    const k1neg = k1 > POW_2_128;
    const k2neg = k2 > POW_2_128;
    if (k1neg)
        k1 = n - k1;
    if (k2neg)
        k2 = n - k2;
    if (k1 > POW_2_128 || k2 > POW_2_128)
        throw new Error('splitScalarEndo: Endomorphism failed');
    return { k1neg, k1, k2neg, k2 };
}
function truncateHash(hash) {
    if (typeof hash !== 'string')
        hash = bytesToHex(hash);
    let msg = hexToNumber(hash || '0');
    const byteLength = hash.length / 2;
    const delta = byteLength * 8 - 256;
    if (delta > 0) {
        msg = msg >> BigInt(delta);
    }
    if (msg >= CURVE.n) {
        msg -= CURVE.n;
    }
    return msg;
}
function _abc6979(msgHash, privateKey) {
    if (msgHash == null)
        throw new Error(`sign: expected valid msgHash, not "${msgHash}"`);
    const num = typeof msgHash === 'string' ? hexToNumber(msgHash) : bytesToNumber(msgHash);
    const h1 = pad32b(num);
    const h1n = bytesToNumber(h1);
    const x = pad32b(privateKey);
    let v = new Uint8Array(32).fill(1);
    let k = new Uint8Array(32).fill(0);
    const b0 = Uint8Array.from([0x00]);
    const b1 = Uint8Array.from([0x01]);
    return { h1, h1n, x, v, k, b0, b1 };
}
async function getQRSrfc6979(msgHash, privateKey) {
    const privKey = normalizePrivateKey(privateKey);
    let { h1, h1n, x, v, k, b0, b1 } = _abc6979(msgHash, privKey);
    const hmac = exports.utils.hmacSha256;
    k = await hmac(k, v, b0, x, h1);
    v = await hmac(k, v);
    k = await hmac(k, v, b1, x, h1);
    v = await hmac(k, v);
    for (let i = 0; i < 1000; i++) {
        v = await hmac(k, v);
        let qrs = calcQRSFromK(v, h1n, privKey);
        if (qrs)
            return qrs;
        k = await hmac(k, v, b0);
        v = await hmac(k, v);
    }
    throw new TypeError('secp256k1: Tried 1,000 k values for sign(), all were invalid');
}
function getQRSrfc6979Sync(msgHash, privateKey) {
    const privKey = normalizePrivateKey(privateKey);
    let { h1, h1n, x, v, k, b0, b1 } = _abc6979(msgHash, privKey);
    const hmac = exports.utils.hmacSha256Sync;
    if (!hmac)
        throw new Error('utils.hmacSha256Sync is undefined, you need to set it');
    k = hmac(k, v, b0, x, h1);
    if (k instanceof Promise)
        throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');
    v = hmac(k, v);
    k = hmac(k, v, b1, x, h1);
    v = hmac(k, v);
    for (let i = 0; i < 1000; i++) {
        v = hmac(k, v);
        let qrs = calcQRSFromK(v, h1n, privKey);
        if (qrs)
            return qrs;
        k = hmac(k, v, b0);
        v = hmac(k, v);
    }
    throw new TypeError('secp256k1: Tried 1,000 k values for sign(), all were invalid');
}
function isWithinCurveOrder(num) {
    return 0 < num && num < CURVE.n;
}
function calcQRSFromK(v, msg, priv) {
    const k = bytesToNumber(v);
    if (!isWithinCurveOrder(k))
        return;
    const max = CURVE.n;
    const q = Point.BASE.multiply(k);
    const r = mod(q.x, max);
    const s = mod(invert(k, max) * (msg + r * priv), max);
    if (r === _0n || s === _0n)
        return;
    return [q, r, s];
}
function normalizePrivateKey(key) {
    let num;
    if (typeof key === 'bigint') {
        num = key;
    }
    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {
        num = BigInt(key);
    }
    else if (typeof key === 'string') {
        if (key.length !== 64)
            throw new Error('Expected 32 bytes of private key');
        num = hexToNumber(key);
    }
    else if (key instanceof Uint8Array) {
        if (key.length !== 32)
            throw new Error('Expected 32 bytes of private key');
        num = bytesToNumber(key);
    }
    else {
        throw new TypeError('Expected valid private key');
    }
    if (!isWithinCurveOrder(num))
        throw new Error('Expected private key: 0 < key < n');
    return num;
}
function normalizePublicKey(publicKey) {
    if (publicKey instanceof Point) {
        publicKey.assertValidity();
        return publicKey;
    }
    else {
        return Point.fromHex(publicKey);
    }
}
function normalizeSignature(signature) {
    if (signature instanceof Signature) {
        signature.assertValidity();
        return signature;
    }
    else {
        return Signature.fromDER(signature);
    }
}
function getPublicKey(privateKey, isCompressed = false) {
    const point = Point.fromPrivateKey(privateKey);
    if (typeof privateKey === 'string') {
        return point.toHex(isCompressed);
    }
    return point.toRawBytes(isCompressed);
}
exports.getPublicKey = getPublicKey;
function recoverPublicKey(msgHash, signature, recovery) {
    const point = Point.fromSignature(msgHash, signature, recovery);
    return typeof msgHash === 'string' ? point.toHex() : point.toRawBytes();
}
exports.recoverPublicKey = recoverPublicKey;
function isPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === 'string';
    const len = (arr || str) && item.length;
    if (arr)
        return len === 33 || len === 65;
    if (str)
        return len === 66 || len === 130;
    if (item instanceof Point)
        return true;
    return false;
}
function getSharedSecret(privateA, publicB, isCompressed = false) {
    if (isPub(privateA))
        throw new TypeError('getSharedSecret: first arg must be private key');
    if (!isPub(publicB))
        throw new TypeError('getSharedSecret: second arg must be public key');
    const b = normalizePublicKey(publicB);
    b.assertValidity();
    const shared = b.multiply(normalizePrivateKey(privateA));
    return typeof privateA === 'string'
        ? shared.toHex(isCompressed)
        : shared.toRawBytes(isCompressed);
}
exports.getSharedSecret = getSharedSecret;
function QRSToSig(qrs, opts, str = false) {
    const [q, r, s] = qrs;
    let { canonical, der, recovered } = opts;
    let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n);
    let adjustedS = s;
    const HIGH_NUMBER = CURVE.n >> _1n;
    if (s > HIGH_NUMBER && canonical) {
        adjustedS = CURVE.n - s;
        recovery ^= 1;
    }
    const sig = new Signature(r, adjustedS);
    sig.assertValidity();
    const hex = der === false ? sig.toCompactHex() : sig.toDERHex();
    const hashed = str ? hex : hexToBytes(hex);
    return recovered ? [hashed, recovery] : hashed;
}
async function sign(msgHash, privKey, opts = {}) {
    return QRSToSig(await getQRSrfc6979(msgHash, privKey), opts, typeof msgHash === 'string');
}
exports.sign = sign;
function signSync(msgHash, privKey, opts = {}) {
    return QRSToSig(getQRSrfc6979Sync(msgHash, privKey), opts, typeof msgHash === 'string');
}
exports.signSync = signSync;
function verify(signature, msgHash, publicKey) {
    const { n } = CURVE;
    let sig;
    try {
        sig = normalizeSignature(signature);
    }
    catch (error) {
        return false;
    }
    const { r, s } = sig;
    const h = truncateHash(msgHash);
    if (h === _0n)
        return false;
    const pubKey = JacobianPoint.fromAffine(normalizePublicKey(publicKey));
    const s1 = invert(s, n);
    const u1 = mod(h * s1, n);
    const u2 = mod(r * s1, n);
    const Ghs1 = JacobianPoint.BASE.multiply(u1);
    const Prs1 = pubKey.multiplyUnsafe(u2);
    const R = Ghs1.add(Prs1).toAffine();
    const v = mod(R.x, n);
    return v === r;
}
exports.verify = verify;
async function taggedHash(tag, ...messages) {
    const tagB = new Uint8Array(tag.split('').map((c) => c.charCodeAt(0)));
    const tagH = await exports.utils.sha256(tagB);
    const h = await exports.utils.sha256(concatBytes(tagH, tagH, ...messages));
    return bytesToNumber(h);
}
async function createChallenge(x, P, message) {
    const rx = pad32b(x);
    const t = await taggedHash('BIP0340/challenge', rx, P.toRawX(), message);
    return mod(t, CURVE.n);
}
function hasEvenY(point) {
    return mod(point.y, _2n) === _0n;
}
class SchnorrSignature {
    constructor(r, s) {
        this.r = r;
        this.s = s;
        if (r <= _0n || s <= _0n || r >= CURVE.P || s >= CURVE.n)
            throw new Error('Invalid signature');
    }
    static fromHex(hex) {
        const bytes = ensureBytes(hex);
        if (bytes.length !== 64) {
            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);
        }
        const r = bytesToNumber(bytes.slice(0, 32));
        const s = bytesToNumber(bytes.slice(32));
        return new SchnorrSignature(r, s);
    }
    toHex() {
        return pad64(this.r) + pad64(this.s);
    }
    toRawBytes() {
        return hexToBytes(this.toHex());
    }
}
function schnorrGetPublicKey(privateKey) {
    const P = Point.fromPrivateKey(privateKey);
    return typeof privateKey === 'string' ? P.toHexX() : P.toRawX();
}
async function schnorrSign(msgHash, privateKey, auxRand = exports.utils.randomBytes()) {
    if (msgHash == null)
        throw new TypeError(`sign: Expected valid message, not "${msgHash}"`);
    if (!privateKey)
        privateKey = _0n;
    const { n } = CURVE;
    const m = ensureBytes(msgHash);
    const d0 = normalizePrivateKey(privateKey);
    const rand = ensureBytes(auxRand);
    if (rand.length !== 32)
        throw new TypeError('sign: Expected 32 bytes of aux randomness');
    const P = Point.fromPrivateKey(d0);
    const d = hasEvenY(P) ? d0 : n - d0;
    const t0h = await taggedHash('BIP0340/aux', rand);
    const t = d ^ t0h;
    const k0h = await taggedHash('BIP0340/nonce', pad32b(t), P.toRawX(), m);
    const k0 = mod(k0h, n);
    if (k0 === _0n)
        throw new Error('sign: Creation of signature failed. k is zero');
    const R = Point.fromPrivateKey(k0);
    const k = hasEvenY(R) ? k0 : n - k0;
    const e = await createChallenge(R.x, P, m);
    const sig = new SchnorrSignature(R.x, mod(k + e * d, n));
    const isValid = await schnorrVerify(sig.toRawBytes(), m, P.toRawX());
    if (!isValid)
        throw new Error('sign: Invalid signature produced');
    return typeof msgHash === 'string' ? sig.toHex() : sig.toRawBytes();
}
async function schnorrVerify(signature, msgHash, publicKey) {
    const sig = signature instanceof SchnorrSignature ? signature : SchnorrSignature.fromHex(signature);
    const m = typeof msgHash === 'string' ? hexToBytes(msgHash) : msgHash;
    const P = normalizePublicKey(publicKey);
    const e = await createChallenge(sig.r, P, m);
    const sG = Point.fromPrivateKey(sig.s);
    const eP = P.multiply(e);
    const R = sG.subtract(eP);
    if (R.equals(Point.BASE) || !hasEvenY(R) || R.x !== sig.r)
        return false;
    return true;
}
exports.schnorr = {
    Signature: SchnorrSignature,
    getPublicKey: schnorrGetPublicKey,
    sign: schnorrSign,
    verify: schnorrVerify,
};
Point.BASE._setWindowSize(8);
const crypto = {
    node: crypto_1.default,
    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
};
exports.utils = {
    isValidPrivateKey(privateKey) {
        try {
            normalizePrivateKey(privateKey);
            return true;
        }
        catch (error) {
            return false;
        }
    },
    randomBytes: (bytesLength = 32) => {
        if (crypto.web) {
            return crypto.web.getRandomValues(new Uint8Array(bytesLength));
        }
        else if (crypto.node) {
            const { randomBytes } = crypto.node;
            return new Uint8Array(randomBytes(bytesLength).buffer);
        }
        else {
            throw new Error("The environment doesn't have randomBytes function");
        }
    },
    randomPrivateKey: () => {
        let i = 8;
        while (i--) {
            const b32 = exports.utils.randomBytes(32);
            const num = bytesToNumber(b32);
            if (isWithinCurveOrder(num) && num !== _1n)
                return b32;
        }
        throw new Error('Valid private key was not found in 8 iterations. PRNG is broken');
    },
    sha256: async (message) => {
        if (crypto.web) {
            const buffer = await crypto.web.subtle.digest('SHA-256', message.buffer);
            return new Uint8Array(buffer);
        }
        else if (crypto.node) {
            const { createHash } = crypto.node;
            return Uint8Array.from(createHash('sha256').update(message).digest());
        }
        else {
            throw new Error("The environment doesn't have sha256 function");
        }
    },
    hmacSha256: async (key, ...messages) => {
        if (crypto.web) {
            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);
            const message = concatBytes(...messages);
            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);
            return new Uint8Array(buffer);
        }
        else if (crypto.node) {
            const { createHmac } = crypto.node;
            const hash = createHmac('sha256', key);
            for (let message of messages) {
                hash.update(message);
            }
            return Uint8Array.from(hash.digest());
        }
        else {
            throw new Error("The environment doesn't have hmac-sha256 function");
        }
    },
    sha256Sync: undefined,
    hmacSha256Sync: undefined,
    precompute(windowSize = 8, point = Point.BASE) {
        const cached = point === Point.BASE ? point : new Point(point.x, point.y);
        cached._setWindowSize(windowSize);
        cached.multiply(_3n);
        return cached;
    },
};

},{"crypto":741}],16:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accountId = accountId;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name accountId
 * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
 * @description  An [[AccountId]]
 */
function accountId(instanceId, api) {
  return (0, _index.memo)(instanceId, address => {
    const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());

    if (decoded.length > 8) {
      return (0, _rxjs.of)(api.registry.createType('AccountId', decoded));
    }

    const accountIndex = api.registry.createType('AccountIndex', decoded);
    return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _rxjs.map)(a => (0, _util.assertReturn)(a, 'Unable to retrieve accountId')));
  });
}

},{"../util/index.js":133,"@polkadot/util":640,"@polkadot/util-crypto":513,"rxjs":746}],17:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flags = flags;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
  const isIncluded = id => address ? id.toString() === address.toString() : false;

  return {
    isCouncil: ((electionsMembers === null || electionsMembers === void 0 ? void 0 : electionsMembers.map(([id]) => id)) || councilMembers || []).some(isIncluded),
    isSociety: (societyMembers || []).some(isIncluded),
    isSudo: (sudoKey === null || sudoKey === void 0 ? void 0 : sudoKey.toString()) === (address === null || address === void 0 ? void 0 : address.toString()),
    isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
  };
}
/**
 * @name info
 * @description Returns account membership flags
 */


function flags(instanceId, api) {
  return (0, _index.memo)(instanceId, address => {
    var _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;

    const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
    return (0, _rxjs.combineLatest)([address && elections !== null && elections !== void 0 && elections.members ? elections.members() : (0, _rxjs.of)(undefined), address && (_api$query$council = api.query.council) !== null && _api$query$council !== void 0 && _api$query$council.members ? api.query.council.members() : (0, _rxjs.of)([]), address && (_api$query$technicalC = api.query.technicalCommittee) !== null && _api$query$technicalC !== void 0 && _api$query$technicalC.members ? api.query.technicalCommittee.members() : (0, _rxjs.of)([]), address && (_api$query$society = api.query.society) !== null && _api$query$society !== void 0 && _api$query$society.members ? api.query.society.members() : (0, _rxjs.of)([]), address && (_api$query$sudo = api.query.sudo) !== null && _api$query$sudo !== void 0 && _api$query$sudo.key ? api.query.sudo.key() : (0, _rxjs.of)(undefined)]).pipe((0, _rxjs.map)(r => parseFlags(address, r)));
  });
}

},{"../util/index.js":133,"rxjs":746}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.idAndIndex = idAndIndex;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name idAndIndex
 * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
 * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
 *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
 * });
 * ```
 */
function idAndIndex(instanceId, api) {
  return (0, _index.memo)(instanceId, address => {
    try {
      // yes, this can fail, don't care too much, catch will catch it
      const decoded = (0, _util.isU8a)(address) ? address : (0, _utilCrypto.decodeAddress)((address || '').toString());

      if (decoded.length > 8) {
        const accountId = api.registry.createType('AccountId', decoded);
        return api.derive.accounts.idToIndex(accountId).pipe((0, _rxjs.map)(accountIndex => [accountId, accountIndex]));
      }

      const accountIndex = api.registry.createType('AccountIndex', decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe((0, _rxjs.map)(accountId => [accountId, accountIndex]));
    } catch (error) {
      return (0, _rxjs.of)([undefined, undefined]);
    }
  });
}

},{"../util/index.js":133,"@polkadot/util":640,"@polkadot/util-crypto":513,"rxjs":746}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.idToIndex = idToIndex;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name idToIndex
 * @param {( AccountId | string )} accountId - An accounts Id in different formats.
 * @returns Returns the corresponding AccountIndex.
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
 * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
 *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
 * });
 * ```
 */
function idToIndex(instanceId, api) {
  return (0, _index.memo)(instanceId, accountId => api.derive.accounts.indexes().pipe((0, _rxjs.map)(indexes => (indexes || {})[accountId.toString()])));
}

},{"../util/index.js":133,"rxjs":746}],20:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasIdentity = void 0;
exports.hasIdentityMulti = hasIdentityMulti;
exports.identity = identity;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const UNDEF_HEX = {
  toHex: () => undefined
};

function dataAsString(data) {
  return data.isRaw ? (0, _util.u8aToString)(data.asRaw.toU8a(true)) : data.isNone ? undefined : data.toHex();
}

function extractOther(additional) {
  return additional.reduce((other, [_key, _value]) => {
    const key = dataAsString(_key);
    const value = dataAsString(_value);

    if (key && value) {
      other[key] = value;
    }

    return other;
  }, {});
}

function extractIdentity(identityOfOpt, superOf) {
  if (!(identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome)) {
    return {
      judgements: []
    };
  }

  const {
    info,
    judgements
  } = identityOfOpt.unwrap();
  const topDisplay = dataAsString(info.display);
  return {
    display: superOf && dataAsString(superOf[1]) || topDisplay,
    displayParent: superOf && topDisplay,
    email: dataAsString(info.email),
    image: dataAsString(info.image),
    judgements,
    legal: dataAsString(info.legal),
    other: extractOther(info.additional),
    parent: superOf && superOf[0],
    pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
    riot: dataAsString(info.riot),
    twitter: dataAsString(info.twitter),
    web: dataAsString(info.web)
  };
}

function getParent(api, identityOfOpt, superOfOpt) {
  if (identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome) {
    // this identity has something set
    return (0, _rxjs.of)([identityOfOpt, undefined]);
  } else if (superOfOpt !== null && superOfOpt !== void 0 && superOfOpt.isSome) {
    const superOf = superOfOpt.unwrap(); // we have a super

    return (0, _rxjs.combineLatest)([api.query.identity.identityOf(superOf[0]), (0, _rxjs.of)(superOf)]);
  } // nothing of value returned


  return (0, _rxjs.of)([undefined, undefined]);
}

function getBase(api, accountId) {
  var _api$query$identity;

  return accountId && (_api$query$identity = api.query.identity) !== null && _api$query$identity !== void 0 && _api$query$identity.identityOf ? api.queryMulti([[api.query.identity.identityOf, accountId], [api.query.identity.superOf, accountId]]) : (0, _rxjs.of)([undefined, undefined]);
}
/**
 * @name identity
 * @description Returns identity info for an account
 */


function identity(instanceId, api) {
  return (0, _index.memo)(instanceId, accountId => getBase(api, accountId).pipe((0, _rxjs.switchMap)(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), (0, _rxjs.map)(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
}

const hasIdentity = (0, _index.firstMemo)((api, accountId) => api.derive.accounts.hasIdentityMulti([accountId]));
exports.hasIdentity = hasIdentity;

function hasIdentityMulti(instanceId, api) {
  return (0, _index.memo)(instanceId, accountIds => {
    var _api$query$identity2;

    return (_api$query$identity2 = api.query.identity) !== null && _api$query$identity2 !== void 0 && _api$query$identity2.identityOf ? (0, _rxjs.combineLatest)([api.query.identity.identityOf.multi(accountIds), api.query.identity.superOf.multi(accountIds)]).pipe((0, _rxjs.map)(([identities, supers]) => identities.map((identityOfOpt, index) => {
      const superOfOpt = supers[index];
      const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : undefined;
      let display;

      if (identityOfOpt && identityOfOpt.isSome) {
        const value = dataAsString(identityOfOpt.unwrap().info.display);

        if (value && !(0, _util.isHex)(value)) {
          display = value;
        }
      }

      return {
        display,
        hasIdentity: !!(display || parentId),
        parentId
      };
    }))) : (0, _rxjs.of)(accountIds.map(() => ({
      hasIdentity: false
    })));
  });
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],21:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _accountId = require("./accountId.js");

Object.keys(_accountId).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _accountId[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _accountId[key];
    }
  });
});

var _flags = require("./flags.js");

Object.keys(_flags).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _flags[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _flags[key];
    }
  });
});

var _idAndIndex = require("./idAndIndex.js");

Object.keys(_idAndIndex).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _idAndIndex[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _idAndIndex[key];
    }
  });
});

var _idToIndex = require("./idToIndex.js");

Object.keys(_idToIndex).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _idToIndex[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _idToIndex[key];
    }
  });
});

var _identity = require("./identity.js");

Object.keys(_identity).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _identity[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _identity[key];
    }
  });
});

var _indexToId = require("./indexToId.js");

Object.keys(_indexToId).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _indexToId[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _indexToId[key];
    }
  });
});

var _indexes = require("./indexes.js");

Object.keys(_indexes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _indexes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _indexes[key];
    }
  });
});

var _info = require("./info.js");

Object.keys(_info).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _info[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _info[key];
    }
  });
});

},{"./accountId.js":16,"./flags.js":17,"./idAndIndex.js":18,"./idToIndex.js":19,"./identity.js":20,"./indexToId.js":22,"./indexes.js":23,"./info.js":24}],22:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indexToId = indexToId;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name indexToId
 * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
 * @returns Returns the corresponding AccountId.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexToId('F7Hs', (accountId) => {
 *   console.log(`The AccountId of F7Hs is ${accountId}`);
 * });
 * ```
 */
function indexToId(instanceId, api) {
  return (0, _index.memo)(instanceId, accountIndex => api.query.indices ? api.query.indices.accounts(accountIndex).pipe((0, _rxjs.map)(optResult => optResult.unwrapOr([])[0])) : (0, _rxjs.of)(undefined));
}

},{"../util/index.js":133,"rxjs":746}],23:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indexes = indexes;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
let indicesCache = null;

function queryAccounts(api) {
  return api.query.indices.accounts.entries().pipe((0, _rxjs.map)(entries => entries.reduce((indexes, [key, idOpt]) => {
    if (idOpt.isSome) {
      indexes[idOpt.unwrap()[0].toString()] = api.registry.createType('AccountIndex', key.args[0]);
    }

    return indexes;
  }, {})));
}
/**
 * @name indexes
 * @returns Returns all the indexes on the system.
 * @description This is an unwieldly query since it loops through
 * all of the enumsets and returns all of the values found. This could be up to 32k depending
 * on the number of active accounts in the system
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.accounts.indexes((indexes) => {
 *   console.log('All existing AccountIndexes', indexes);
 * });
 * ```
 */


function indexes(instanceId, api) {
  return (0, _index.memo)(instanceId, () => indicesCache ? (0, _rxjs.of)(indicesCache) : (api.query.indices ? queryAccounts(api).pipe((0, _rxjs.startWith)({})) : (0, _rxjs.of)({})).pipe((0, _rxjs.map)(indices => {
    indicesCache = indices;
    return indices;
  })));
}

},{"../util/index.js":133,"rxjs":746}],24:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function retrieveNick(api, accountId) {
  var _api$query$nicks;

  return (accountId && (_api$query$nicks = api.query.nicks) !== null && _api$query$nicks !== void 0 && _api$query$nicks.nameOf ? api.query.nicks.nameOf(accountId) : (0, _rxjs.of)(undefined)).pipe((0, _rxjs.map)(nameOf => nameOf !== null && nameOf !== void 0 && nameOf.isSome ? (0, _util.u8aToString)(nameOf.unwrap()[0]).substr(0, api.consts.nicks.maxLength.toNumber()) : undefined));
}
/**
 * @name info
 * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
 */


function info(instanceId, api) {
  return (0, _index.memo)(instanceId, address => api.derive.accounts.idAndIndex(address).pipe((0, _rxjs.switchMap)(([accountId, accountIndex]) => (0, _rxjs.combineLatest)([(0, _rxjs.of)({
    accountId,
    accountIndex
  }), api.derive.accounts.identity(accountId), retrieveNick(api, accountId)])), (0, _rxjs.map)(([{
    accountId,
    accountIndex
  }, identity, nickname]) => ({
    accountId,
    accountIndex,
    identity,
    nickname
  }))));
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],25:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.account = account;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function zeroBalance(api) {
  return api.registry.createType('Balance');
}

function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
  const votingBalance = api.registry.createType('Balance', freeBalance.toBn());
  return {
    freeBalance,
    frozenFee,
    frozenMisc,
    reservedBalance,
    votingBalance
  };
}

function calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {
  return {
    accountId,
    accountNonce,
    additional: additional.map(b => getBalance(api, b)),
    ...getBalance(api, primary)
  };
} // old


function queryBalancesFree(api, accountId) {
  return api.queryMulti([[api.query.balances.freeBalance, accountId], [api.query.balances.reservedBalance, accountId], [api.query.system.accountNonce, accountId]]).pipe((0, _rxjs.map)(([freeBalance, reservedBalance, accountNonce]) => [accountNonce, [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]]));
}

function queryNonceOnly(api, accountId) {
  const fill = nonce => [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];

  return (0, _util.isFunction)(api.query.system.account) ? api.query.system.account(accountId).pipe((0, _rxjs.map)(({
    nonce
  }) => fill(nonce))) : (0, _util.isFunction)(api.query.system.accountNonce) ? api.query.system.accountNonce(accountId).pipe((0, _rxjs.map)(nonce => fill(nonce))) : (0, _rxjs.of)(fill(api.registry.createType('Index')));
}

function queryBalancesAccount(api, accountId, modules = ['balances']) {
  const balances = modules.map(m => {
    var _m, _api$query$m;

    return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customAccount) || ((_api$query$m = api.query[m]) === null || _api$query$m === void 0 ? void 0 : _api$query$m.account);
  }).filter(q => (0, _util.isFunction)(q)).map(q => [q, accountId]);

  const extract = (nonce, data) => [nonce, data.map(({
    feeFrozen,
    free,
    miscFrozen,
    reserved
  }) => [free, reserved, feeFrozen, miscFrozen])]; // NOTE this is for the first case where we do have instances specified


  return balances.length ? (0, _util.isFunction)(api.query.system.account) ? api.queryMulti([[api.query.system.account, accountId], ...balances]).pipe((0, _rxjs.map)(([{
    nonce
  }, ...balances]) => extract(nonce, balances))) : api.queryMulti([[api.query.system.accountNonce, accountId], ...balances]).pipe((0, _rxjs.map)(([nonce, ...balances]) => extract(nonce, balances))) : queryNonceOnly(api, accountId);
}

function querySystemAccount(api, accountId) {
  // AccountInfo is current, support old, eg. Edgeware
  return api.query.system.account(accountId).pipe((0, _rxjs.map)(infoOrTuple => {
    const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
    const nonce = infoOrTuple.nonce || infoOrTuple[0];

    if (!data || data.isEmpty) {
      return [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];
    }

    const {
      feeFrozen,
      free,
      miscFrozen,
      reserved
    } = data;
    return [nonce, [[free, reserved, feeFrozen, miscFrozen]]];
  }));
}
/**
 * @name account
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */


function account(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
  return (0, _index.memo)(instanceId, address => api.derive.accounts.accountId(address).pipe((0, _rxjs.switchMap)(accountId => {
    var _api$query$system, _api$query$balances, _api$query$balances2;

    return accountId ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(accountId), balanceInstances ? queryBalancesAccount(api, accountId, balanceInstances) : (0, _util.isFunction)((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) ? querySystemAccount(api, accountId) : (0, _util.isFunction)((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryBalancesAccount(api, accountId) : (0, _util.isFunction)((_api$query$balances2 = api.query.balances) === null || _api$query$balances2 === void 0 ? void 0 : _api$query$balances2.freeBalance) ? queryBalancesFree(api, accountId) : queryNonceOnly(api, accountId)]) : (0, _rxjs.of)([api.registry.createType('AccountId'), [api.registry.createType('Index'), [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]]]);
  }), (0, _rxjs.map)(result => calcBalances(api, result))));
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],26:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.all = all;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const VESTING_ID = '0x76657374696e6720';

function calcLocked(api, bestNumber, locks) {
  let lockedBalance = api.registry.createType('Balance');
  let lockedBreakdown = [];
  let vestingLocked = api.registry.createType('Balance');
  let allLocked = false;

  if (Array.isArray(locks)) {
    // only get the locks that are valid until passed the current block
    lockedBreakdown = locks.filter(({
      until
    }) => !until || bestNumber && until.gt(bestNumber));
    allLocked = lockedBreakdown.some(({
      amount
    }) => amount && amount.isMax());
    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({
      id
    }) => id.eq(VESTING_ID)).reduce((result, {
      amount
    }) => result.iadd(amount), new _util.BN(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699

    const notAll = lockedBreakdown.filter(({
      amount
    }) => amount && !amount.isMax());

    if (notAll.length) {
      lockedBalance = api.registry.createType('Balance', (0, _util.bnMax)(...notAll.map(({
        amount
      }) => amount)));
    }
  }

  return {
    allLocked,
    lockedBalance,
    lockedBreakdown,
    vestingLocked
  };
}

function calcShared(api, bestNumber, data, locks) {
  const {
    allLocked,
    lockedBalance,
    lockedBreakdown,
    vestingLocked
  } = calcLocked(api, bestNumber, locks);
  return { ...data,
    availableBalance: api.registry.createType('Balance', allLocked ? 0 : (0, _util.bnMax)(new _util.BN(0), data.freeBalance.sub(lockedBalance))),
    lockedBalance,
    lockedBreakdown,
    vestingLocked
  };
}

function calcVesting(bestNumber, shared, _vesting) {
  // Calculate the vesting balances,
  //  - offset = balance locked at startingBlock
  //  - perBlock is the unlock amount
  const vesting = _vesting || [];
  const isVesting = !shared.vestingLocked.isZero();
  const vestedBalances = vesting.map(({
    locked,
    perBlock,
    startingBlock
  }) => bestNumber.gt(startingBlock) ? (0, _util.bnMin)(locked, perBlock.mul(bestNumber.sub(startingBlock))) : _util.BN_ZERO);
  const vestedBalance = vestedBalances.reduce((all, value) => all.iadd(value), new _util.BN(0));
  const vestingTotal = vesting.reduce((all, {
    locked
  }) => all.iadd(locked), new _util.BN(0));
  return {
    isVesting,
    vestedBalance,
    vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : _util.BN_ZERO,
    vesting: vesting.map(({
      locked,
      perBlock,
      startingBlock
    }, index) => ({
      endBlock: locked.div(perBlock).iadd(startingBlock),
      locked,
      perBlock,
      startingBlock,
      vested: vestedBalances[index]
    })).filter(({
      locked
    }) => !locked.isZero()),
    vestingTotal
  };
}

function calcBalances(api, [data, bestNumber, [vesting, allLocks]]) {
  const shared = calcShared(api, bestNumber, data, allLocks[0]);
  return { ...shared,
    ...calcVesting(bestNumber, shared, vesting),
    accountId: data.accountId,
    accountNonce: data.accountNonce,
    additional: allLocks.filter((_, index) => index !== 0).map((l, index) => calcShared(api, bestNumber, data.additional[index], l))
  };
} // old


function queryOld(api, accountId) {
  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe((0, _rxjs.map)(([locks, optVesting]) => {
    let vestingNew = null;

    if (optVesting.isSome) {
      const {
        offset: locked,
        perBlock,
        startingBlock
      } = optVesting.unwrap();
      vestingNew = api.registry.createType('VestingInfo', {
        locked,
        perBlock,
        startingBlock
      });
    }

    return [vestingNew ? [vestingNew] : null, [locks]];
  }));
}

const isNonNullable = nullable => !!nullable; // current (balances, vesting)


function queryCurrent(api, accountId, balanceInstances = ['balances']) {
  var _api$query$vesting;

  const calls = balanceInstances.map(m => {
    var _m, _api$query;

    return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customLocks) || ((_api$query = api.query[m]) === null || _api$query === void 0 ? void 0 : _api$query.locks);
  });
  const lockEmpty = calls.map(c => !c);
  const queries = calls.filter(isNonNullable).map(c => [c, accountId]);
  return ((_api$query$vesting = api.query.vesting) !== null && _api$query$vesting !== void 0 && _api$query$vesting.vesting ? api.queryMulti([[api.query.vesting.vesting, accountId], ...queries]) // TODO We need to check module instances here as well, not only the balances module
  : queries.length ? api.queryMulti(queries).pipe((0, _rxjs.map)(r => [api.registry.createType('Option<VestingInfo>'), ...r])) : (0, _rxjs.of)([api.registry.createType('Option<VestingInfo>')])).pipe((0, _rxjs.map)(([opt, ...locks]) => {
    let offset = -1;
    const vesting = opt.unwrapOr(null);
    return [vesting ? Array.isArray(vesting) ? vesting : [vesting] : null, lockEmpty.map(e => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offset])];
  }));
}
/**
 * @name all
 * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
 * @returns An object containing the results of various balance queries
 * @example
 * <BR>
 *
 * ```javascript
 * const ALICE = 'F7Hs';
 *
 * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
 *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
 * });
 * ```
 */


function all(instanceId, api) {
  const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
  return (0, _index.memo)(instanceId, address => api.derive.balances.account(address).pipe((0, _rxjs.switchMap)(account => {
    var _api$query$system, _api$query$balances;

    return !account.accountId.isEmpty ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(account), api.derive.chain.bestNumber(), (0, _util.isFunction)((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) || (0, _util.isFunction)((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryCurrent(api, account.accountId, balanceInstances) : queryOld(api, account.accountId)]) : (0, _rxjs.of)([account, api.registry.createType('BlockNumber'), [null, []]]);
  }), (0, _rxjs.map)(result => calcBalances(api, result))));
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],27:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fees = fees;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name fees
 * @returns An object containing the combined results of the storage queries for
 * all relevant fees as declared in the substrate chain spec.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.balances.fees(({ creationFee, transferFee }) => {
 *   console.log(`The fee for creating a new account on this chain is ${creationFee} units. The fee required for making a transfer is ${transferFee} units.`);
 * });
 * ```
 */
function fees(instanceId, api) {
  return (0, _index.memo)(instanceId, () => {
    var _api$consts$balances, _api$consts$balances2, _api$consts$balances3, _api$consts$transacti, _api$consts$transacti2;

    return (0, _rxjs.of)([// deprecated - remove
    ((_api$consts$balances = api.consts.balances) === null || _api$consts$balances === void 0 ? void 0 : _api$consts$balances.creationFee) || api.registry.createType('Balance'), ((_api$consts$balances2 = api.consts.balances) === null || _api$consts$balances2 === void 0 ? void 0 : _api$consts$balances2.transferFee) || api.registry.createType('Balance'), // current
    ((_api$consts$balances3 = api.consts.balances) === null || _api$consts$balances3 === void 0 ? void 0 : _api$consts$balances3.existentialDeposit) || api.registry.createType('Balance'), ((_api$consts$transacti = api.consts.transactionPayment) === null || _api$consts$transacti === void 0 ? void 0 : _api$consts$transacti.transactionBaseFee) || api.registry.createType('Balance'), ((_api$consts$transacti2 = api.consts.transactionPayment) === null || _api$consts$transacti2 === void 0 ? void 0 : _api$consts$transacti2.transactionByteFee) || api.registry.createType('Balance')]).pipe((0, _rxjs.map)(([creationFee, transferFee, existentialDeposit, transactionBaseFee, transactionByteFee]) => ({
      creationFee,
      existentialDeposit,
      transactionBaseFee,
      transactionByteFee,
      transferFee
    })));
  });
}

},{"../util/index.js":133,"rxjs":746}],28:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  votingBalance: true,
  all: true
};
Object.defineProperty(exports, "all", {
  enumerable: true,
  get: function () {
    return _all.all;
  }
});
exports.votingBalance = void 0;

var _all = require("./all.js");

var _account = require("./account.js");

Object.keys(_account).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _account[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _account[key];
    }
  });
});

var _fees = require("./fees.js");

Object.keys(_fees).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _fees[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fees[key];
    }
  });
});

var _votingBalances = require("./votingBalances.js");

Object.keys(_votingBalances).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _votingBalances[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _votingBalances[key];
    }
  });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const votingBalance = _all.all;
exports.votingBalance = votingBalance;

},{"./account.js":25,"./all.js":26,"./fees.js":27,"./votingBalances.js":29}],29:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.votingBalances = votingBalances;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function votingBalances(instanceId, api) {
  return (0, _index.memo)(instanceId, addresses => !addresses || !addresses.length ? (0, _rxjs.of)([]) : (0, _rxjs.combineLatest)(addresses.map(accountId => api.derive.balances.account(accountId))));
}

},{"../util/index.js":133,"rxjs":746}],30:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bounties = bounties;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _filterBountyProposals = require("./helpers/filterBountyProposals.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function parseResult([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
  const bounties = [];
  maybeBounties.forEach((bounty, index) => {
    if (bounty.isSome) {
      bounties.push({
        bounty: bounty.unwrap(),
        description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
        index: ids[index],
        proposals: bountyProposals.filter(bountyProposal => ids[index].eq(bountyProposal.proposal.args[0]))
      });
    }
  });
  return bounties;
}

function bounties(instanceId, api) {
  const bountyBase = api.query.bounties || api.query.treasury;
  return (0, _index.memo)(instanceId, () => (0, _rxjs.combineLatest)([bountyBase.bountyCount(), api.query.council ? api.query.council.proposalCount() : (0, _rxjs.of)(0)]).pipe((0, _rxjs.switchMap)(() => (0, _rxjs.combineLatest)([bountyBase.bounties.keys(), api.derive.council ? api.derive.council.proposals() : (0, _rxjs.of)([])])), (0, _rxjs.switchMap)(([keys, proposals]) => {
    const ids = keys.map(({
      args: [id]
    }) => id);
    return (0, _rxjs.combineLatest)([bountyBase.bounties.multi(ids), bountyBase.bountyDescriptions.multi(ids), (0, _rxjs.of)(ids), (0, _rxjs.of)((0, _filterBountyProposals.filterBountiesProposals)(api, proposals))]);
  }), (0, _rxjs.map)(parseResult)));
}

},{"../util/index.js":133,"./helpers/filterBountyProposals.js":31,"rxjs":746}],31:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterBountiesProposals = filterBountiesProposals;

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function filterBountiesProposals(api, allProposals) {
  const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
  const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
  return allProposals.filter(proposal => bountyProposalCalls.find(bountyCall => bountyCall.is(proposal.proposal)));
}

},{}],32:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bounties = require("./bounties.js");

Object.keys(_bounties).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bounties[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bounties[key];
    }
  });
});

},{"./bounties.js":30}],33:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  derive: true,
  getAvailableDerives: true,
  lazyDeriveSection: true,
  packageInfo: true
};
exports.derive = void 0;
exports.getAvailableDerives = getAvailableDerives;
Object.defineProperty(exports, "lazyDeriveSection", {
  enumerable: true,
  get: function () {
    return _lazy.lazyDeriveSection;
  }
});
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _lazy = require("./util/lazy.js");

var accounts = _interopRequireWildcard(require("./accounts/index.js"));

var balances = _interopRequireWildcard(require("./balances/index.js"));

var bounties = _interopRequireWildcard(require("./bounties/index.js"));

var chain = _interopRequireWildcard(require("./chain/index.js"));

var contracts = _interopRequireWildcard(require("./contracts/index.js"));

var council = _interopRequireWildcard(require("./council/index.js"));

var crowdloan = _interopRequireWildcard(require("./crowdloan/index.js"));

var democracy = _interopRequireWildcard(require("./democracy/index.js"));

var elections = _interopRequireWildcard(require("./elections/index.js"));

var imOnline = _interopRequireWildcard(require("./imOnline/index.js"));

var membership = _interopRequireWildcard(require("./membership/index.js"));

var parachains = _interopRequireWildcard(require("./parachains/index.js"));

var session = _interopRequireWildcard(require("./session/index.js"));

var society = _interopRequireWildcard(require("./society/index.js"));

var staking = _interopRequireWildcard(require("./staking/index.js"));

var technicalCommittee = _interopRequireWildcard(require("./technicalCommittee/index.js"));

var treasury = _interopRequireWildcard(require("./treasury/index.js"));

var tx = _interopRequireWildcard(require("./tx/index.js"));

var _packageInfo = require("./packageInfo.js");

var _index19 = require("./type/index.js");

Object.keys(_index19).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index19[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index19[key];
    }
  });
});

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const derive = {
  accounts,
  balances,
  bounties,
  chain,
  contracts,
  council,
  crowdloan,
  democracy,
  elections,
  imOnline,
  membership,
  parachains,
  session,
  society,
  staking,
  technicalCommittee,
  treasury,
  tx
}; // Enable derive only if some of these modules are available

exports.derive = derive;
const checks = {
  contracts: {
    instances: ['contracts'],
    methods: []
  },
  council: {
    instances: ['council'],
    methods: [],
    withDetect: true
  },
  crowdloan: {
    instances: ['crowdloan'],
    methods: []
  },
  democracy: {
    instances: ['democracy'],
    methods: []
  },
  elections: {
    instances: ['phragmenElection', 'electionsPhragmen', 'elections', 'council'],
    methods: [],
    withDetect: true
  },
  imOnline: {
    instances: ['imOnline'],
    methods: []
  },
  membership: {
    instances: ['membership'],
    methods: []
  },
  parachains: {
    instances: ['parachains', 'registrar'],
    methods: []
  },
  session: {
    instances: ['session'],
    methods: []
  },
  society: {
    instances: ['society'],
    methods: []
  },
  staking: {
    instances: ['staking'],
    methods: ['erasRewardPoints']
  },
  technicalCommittee: {
    instances: ['technicalCommittee'],
    methods: [],
    withDetect: true
  },
  treasury: {
    instances: ['treasury'],
    methods: []
  }
};

function getModuleInstances(api, specName, moduleName) {
  return api.registry.getModuleInstances(specName, moduleName) || [];
}
/**
 * Returns an object that will inject `api` into all the functions inside
 * `allSections`, and keep the object architecture of `allSections`.
 */

/** @internal */


function injectFunctions(instanceId, api, derives) {
  const result = {};
  const names = Object.keys(derives);
  const keys = Object.keys(api.query);
  const specName = api.runtimeVersion.specName.toString();

  const filterKeys = q => keys.includes(q);

  const filterInstances = q => getModuleInstances(api, specName, q).some(filterKeys);

  const filterMethods = all => m => all.some(q => keys.includes(q) && api.query[q][m]);

  const getKeys = s => Object.keys(derives[s]);

  const creator = (s, m) => derives[s][m](instanceId, api);

  const isIncluded = c => !checks[c] || checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances);

  for (let i = 0; i < names.length; i++) {
    const name = names[i];
    isIncluded(name) && (0, _lazy.lazyDeriveSection)(result, name, getKeys, creator);
  }

  return result;
} // FIXME The return type of this function should be {...ExactDerive, ...DeriveCustom}
// For now we just drop the custom derive typings

/** @internal */


function getAvailableDerives(instanceId, api, custom = {}) {
  return { ...injectFunctions(instanceId, api, derive),
    ...injectFunctions(instanceId, api, custom)
  };
}

},{"./accounts/index.js":21,"./balances/index.js":28,"./bounties/index.js":32,"./chain/index.js":39,"./contracts/index.js":49,"./council/index.js":50,"./crowdloan/index.js":55,"./democracy/index.js":59,"./elections/index.js":73,"./imOnline/index.js":75,"./membership/index.js":78,"./packageInfo.js":79,"./parachains/index.js":80,"./session/index.js":84,"./society/index.js":89,"./staking/index.js":103,"./technicalCommittee/index.js":118,"./treasury/index.js":119,"./tx/index.js":123,"./type/index.js":127,"./util/lazy.js":134}],34:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bestNumber = void 0;

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name bestNumber
 * @returns The latest block number.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumber((blockNumber) => {
 *   console.log(`the current best block is #${blockNumber}`);
 * });
 * ```
 */
const bestNumber = (0, _util.unwrapBlockNumber)(api => api.derive.chain.subscribeNewHeads());
exports.bestNumber = bestNumber;

},{"./util.js":42}],35:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bestNumberFinalized = void 0;

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name bestNumberFinalized
 * @returns A BlockNumber
 * @description Get the latest finalized block number.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumberFinalized((blockNumber) => {
 *   console.log(`the current finalized block is #${blockNumber}`);
 * });
 * ```
 */
const bestNumberFinalized = (0, _util.unwrapBlockNumber)(api => api.rpc.chain.subscribeFinalizedHeads());
exports.bestNumberFinalized = bestNumberFinalized;

},{"./util.js":42}],36:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bestNumberLag = bestNumberLag;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name bestNumberLag
 * @returns A number of blocks
 * @description Calculates the lag between finalized head and best head
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.bestNumberLag((lag) => {
 *   console.log(`finalized is ${lag} blocks behind head`);
 * });
 * ```
 */
function bestNumberLag(instanceId, api) {
  return (0, _index.memo)(instanceId, () => (0, _rxjs.combineLatest)([api.derive.chain.bestNumber(), api.derive.chain.bestNumberFinalized()]).pipe((0, _rxjs.map)(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
}

},{"../util/index.js":133,"rxjs":746}],37:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBlock = getBlock;

var _rxjs = require("rxjs");

var _index = require("../type/index.js");

var _index2 = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name getBlock
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, block } = await api.derive.chain.getBlock('0x123...456');
 *
 * console.log(`block #${block.header.number} was authored by ${author}`);
 * ```
 */
function getBlock(instanceId, api) {
  return (0, _index2.memo)(instanceId, blockHash => (0, _rxjs.combineLatest)([api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe((0, _rxjs.switchMap)(queryAt => (0, _rxjs.combineLatest)([queryAt.system.events(), queryAt.session ? queryAt.session.validators() : (0, _rxjs.of)([])])))]).pipe((0, _rxjs.map)(([signedBlock, [events, validators]]) => (0, _index.createSignedBlockExtended)(api.registry, signedBlock, events, validators)), (0, _rxjs.catchError)(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
  // we supplied an invalid hash. (Due to defaults, storage will have an
  // empty value, so only the RPC is affected). So return undefined
  (0, _rxjs.of)())));
}

},{"../type/index.js":127,"../util/index.js":133,"rxjs":746}],38:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHeader = getHeader;

var _rxjs = require("rxjs");

var _index = require("../type/index.js");

var _index2 = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name getHeader
 * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
 * @returns An array containing the block header and the block author
 * @description Get a specific block header and extend it with the author
 * @example
 * <BR>
 *
 * ```javascript
 * const { author, number } = await api.derive.chain.getHeader('0x123...456');
 *
 * console.log(`block #${number} was authored by ${author}`);
 * ```
 */
function getHeader(instanceId, api) {
  return (0, _index2.memo)(instanceId, blockHash => (0, _rxjs.combineLatest)([api.rpc.chain.getHeader(blockHash), api.queryAt(blockHash).pipe((0, _rxjs.switchMap)(queryAt => queryAt.session ? queryAt.session.validators() : (0, _rxjs.of)([])))]).pipe((0, _rxjs.map)(([header, validators]) => (0, _index.createHeaderExtended)(header.registry, header, validators)), (0, _rxjs.catchError)(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
  // we supplied an invalid hash. (Due to defaults, storeage will have an
  // empty value, so only the RPC is affected). So return undefined
  (0, _rxjs.of)())));
}

},{"../type/index.js":127,"../util/index.js":133,"rxjs":746}],39:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bestNumber = require("./bestNumber.js");

Object.keys(_bestNumber).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bestNumber[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bestNumber[key];
    }
  });
});

var _bestNumberFinalized = require("./bestNumberFinalized.js");

Object.keys(_bestNumberFinalized).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bestNumberFinalized[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bestNumberFinalized[key];
    }
  });
});

var _bestNumberLag = require("./bestNumberLag.js");

Object.keys(_bestNumberLag).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bestNumberLag[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bestNumberLag[key];
    }
  });
});

var _getHeader = require("./getHeader.js");

Object.keys(_getHeader).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getHeader[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getHeader[key];
    }
  });
});

var _getBlock = require("./getBlock.js");

Object.keys(_getBlock).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getBlock[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getBlock[key];
    }
  });
});

var _subscribeNewBlocks = require("./subscribeNewBlocks.js");

Object.keys(_subscribeNewBlocks).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _subscribeNewBlocks[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _subscribeNewBlocks[key];
    }
  });
});

var _subscribeNewHeads = require("./subscribeNewHeads.js");

Object.keys(_subscribeNewHeads).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _subscribeNewHeads[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _subscribeNewHeads[key];
    }
  });
});

},{"./bestNumber.js":34,"./bestNumberFinalized.js":35,"./bestNumberLag.js":36,"./getBlock.js":37,"./getHeader.js":38,"./subscribeNewBlocks.js":40,"./subscribeNewHeads.js":41}],40:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscribeNewBlocks = subscribeNewBlocks;

var _rxjs = require("rxjs");

var _index = require("../type/index.js");

var _index2 = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name subscribeNewBlocks
 * @returns The latest block & events for that block
 */
function subscribeNewBlocks(instanceId, api) {
  return (0, _index2.memo)(instanceId, () => api.derive.chain.subscribeNewHeads().pipe((0, _rxjs.switchMap)(header => {
    const blockHash = header.createdAtHash || header.hash; // we get the block first, setting up the registry

    return (0, _rxjs.combineLatest)([(0, _rxjs.of)(header), api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe((0, _rxjs.switchMap)(queryAt => queryAt.system.events()))]);
  }), (0, _rxjs.map)(([header, block, events]) => (0, _index.createSignedBlockExtended)(block.registry, block, events, header.validators))));
}

},{"../type/index.js":127,"../util/index.js":133,"rxjs":746}],41:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscribeNewHeads = subscribeNewHeads;

var _rxjs = require("rxjs");

var _index = require("../type/index.js");

var _index2 = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name subscribeNewHeads
 * @returns A header with the current header (including extracted author)
 * @description An observable of the current block header and it's author
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.chain.subscribeNewHeads((header) => {
 *   console.log(`block #${header.number} was authored by ${header.author}`);
 * });
 * ```
 */
function subscribeNewHeads(instanceId, api) {
  return (0, _index2.memo)(instanceId, () => (0, _rxjs.combineLatest)([api.rpc.chain.subscribeNewHeads(), api.query.session ? api.query.session.validators() : (0, _rxjs.of)(undefined)]).pipe((0, _rxjs.map)(([header, validators]) => {
    header.createdAtHash = header.hash;
    return (0, _index.createHeaderExtended)(header.registry, header, validators);
  })));
}

},{"../type/index.js":127,"../util/index.js":133,"rxjs":746}],42:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unwrapBlockNumber = unwrapBlockNumber;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// re-export these - since these needs to be resolvable from api-derive, i.e. without this
// we would emit code with ../<somewhere>/src embedded in the *.d.ts files
function unwrapBlockNumber(fn) {
  return (instanceId, api) => (0, _index.memo)(instanceId, () => fn(api).pipe((0, _rxjs.map)(r => r.number.unwrap())));
}

},{"../util/index.js":133,"rxjs":746}],43:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callMethod = callMethod;
exports.getInstance = getInstance;
exports.withSection = withSection;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// We are re-exporting these from here to ensure that *.d.ts generation is correct
function getInstance(api, section) {
  const instances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), section);
  return instances && instances.length ? instances[0] : section;
}

function withSection(_section, fn) {
  return (instanceId, api) => (0, _index.memo)(instanceId, fn(getInstance(api, _section), api, instanceId));
}

function callMethod(method, empty) {
  return _section => withSection(_section, (section, api) => () => {
    var _api$query$section;

    return (0, _util.isFunction)((_api$query$section = api.query[section]) === null || _api$query$section === void 0 ? void 0 : _api$query$section[method]) ? api.query[section][method]() : (0, _rxjs.of)(empty);
  });
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],44:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _members = require("./members.js");

Object.keys(_members).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _members[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _members[key];
    }
  });
});

var _prime = require("./prime.js");

Object.keys(_prime).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _prime[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _prime[key];
    }
  });
});

var _proposals = require("./proposals.js");

Object.keys(_proposals).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _proposals[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _proposals[key];
    }
  });
});

},{"./members.js":45,"./prime.js":46,"./proposals.js":47}],45:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.members = void 0;

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// We are re-exporting these from here to ensure that *.d.ts generation is correct
const members = (0, _helpers.callMethod)('members', []);
exports.members = members;

},{"./helpers.js":43}],46:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prime = prime;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// We are re-exporting these from here to ensure that *.d.ts generation is correct
function prime(_section) {
  return (0, _helpers.withSection)(_section, (section, api) => () => {
    var _api$query;

    return (0, _util.isFunction)((_api$query = api.query[section]) === null || _api$query === void 0 ? void 0 : _api$query.prime) ? api.query[section].prime().pipe((0, _rxjs.map)(optPrime => optPrime.unwrapOr(null))) : (0, _rxjs.of)(null);
  });
}

},{"./helpers.js":43,"@polkadot/util":640,"rxjs":746}],47:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasProposals = hasProposals;
exports.proposal = proposal;
exports.proposalHashes = exports.proposalCount = void 0;
exports.proposals = proposals;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// We are re-exporting these from here to ensure that *.d.ts generation is correct
function parse(api, [hashes, proposals, votes]) {
  return proposals.map((o, index) => o && o.isSome ? {
    hash: api.registry.createType('Hash', hashes[index]),
    proposal: o.unwrap(),
    votes: votes[index].unwrapOr(null)
  } : null).filter(proposal => !!proposal);
}

function _proposalsFrom(section, api, hashes) {
  var _api$query$section;

  return ((0, _util.isFunction)((_api$query$section = api.query[section]) === null || _api$query$section === void 0 ? void 0 : _api$query$section.proposals) && hashes.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(hashes), // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
  // however we have had cases on Edgeware where the indices have moved around after an
  // upgrade, which results in invalid on-chain data
  (0, _rxjs.combineLatest)(hashes.map(h => api.query[section].proposalOf(h).pipe((0, _rxjs.catchError)(() => (0, _rxjs.of)(null))))), api.query[section].voting.multi(hashes)]) : (0, _rxjs.of)([[], [], []])).pipe((0, _rxjs.map)(r => parse(api, r)));
}

function hasProposals(_section) {
  return (0, _helpers.withSection)(_section, (section, api) => () => {
    var _api$query$section2;

    return (0, _rxjs.of)((0, _util.isFunction)((_api$query$section2 = api.query[section]) === null || _api$query$section2 === void 0 ? void 0 : _api$query$section2.proposals));
  });
}

function proposals(_section) {
  return (0, _helpers.withSection)(_section, (section, api) => () => api.derive[section].proposalHashes().pipe((0, _rxjs.switchMap)(all => _proposalsFrom(section, api, all))));
}

function proposal(_section) {
  return (0, _helpers.withSection)(_section, (section, api) => hash => {
    var _api$query$section3;

    return (0, _util.isFunction)((_api$query$section3 = api.query[section]) === null || _api$query$section3 === void 0 ? void 0 : _api$query$section3.proposals) ? (0, _index.firstObservable)(_proposalsFrom(section, api, [hash])) : (0, _rxjs.of)(null);
  });
}

const proposalCount = (0, _helpers.callMethod)('proposalCount', null);
exports.proposalCount = proposalCount;
const proposalHashes = (0, _helpers.callMethod)('proposals', []);
exports.proposalHashes = proposalHashes;

},{"../util/index.js":133,"./helpers.js":43,"@polkadot/util":640,"rxjs":746}],48:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fees = fees;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// query via constants (current applicable path)
function queryConstants(api) {
  return (0, _rxjs.of)([// deprecated
  api.consts.contracts.callBaseFee || api.registry.createType('Balance'), api.consts.contracts.contractFee || api.registry.createType('Balance'), api.consts.contracts.creationFee || api.registry.createType('Balance'), api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'), api.consts.contracts.transactionByteFee || api.registry.createType('Balance'), api.consts.contracts.transferFee || api.registry.createType('Balance'), // current
  api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.surchargeReward, api.consts.contracts.tombstoneDeposit]);
}
/**
 * @name fees
 * @returns An object containing the combined results of the queries for
 * all relevant contract fees as declared in the substrate chain spec.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.contracts.fees(([creationFee, transferFee]) => {
 *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
 * });
 * ```
 */


function fees(instanceId, api) {
  return (0, _index.memo)(instanceId, () => {
    return queryConstants(api).pipe((0, _rxjs.map)(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
      callBaseFee,
      contractFee,
      creationFee,
      rentByteFee,
      rentDepositOffset,
      surchargeReward,
      tombstoneDeposit,
      transactionBaseFee,
      transactionByteFee,
      transferFee
    })));
  });
}

},{"../util/index.js":133,"rxjs":746}],49:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fees = require("./fees.js");

Object.keys(_fees).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _fees[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fees[key];
    }
  });
});

},{"./fees.js":48}],50:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  members: true,
  hasProposals: true,
  proposal: true,
  proposalCount: true,
  proposalHashes: true,
  proposals: true,
  prime: true
};
exports.proposals = exports.proposalHashes = exports.proposalCount = exports.proposal = exports.prime = exports.members = exports.hasProposals = void 0;

var _index = require("../collective/index.js");

var _votes = require("./votes.js");

Object.keys(_votes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _votes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _votes[key];
    }
  });
});

var _votesOf = require("./votesOf.js");

Object.keys(_votesOf).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _votesOf[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _votesOf[key];
    }
  });
});
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const members = (0, _index.members)('council');
exports.members = members;
const hasProposals = (0, _index.hasProposals)('council');
exports.hasProposals = hasProposals;
const proposal = (0, _index.proposal)('council');
exports.proposal = proposal;
const proposalCount = (0, _index.proposalCount)('council');
exports.proposalCount = proposalCount;
const proposalHashes = (0, _index.proposalHashes)('council');
exports.proposalHashes = proposalHashes;
const proposals = (0, _index.proposals)('council');
exports.proposals = proposals;
const prime = (0, _index.prime)('council');
exports.prime = prime;

},{"../collective/index.js":44,"./votes.js":51,"./votesOf.js":52}],51:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.votes = votes;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Voter is current tuple is 2.x-era
function isVoter(value) {
  return !Array.isArray(value);
}

function retrieveStakeOf(elections) {
  return elections.stakeOf.entries().pipe((0, _rxjs.map)(entries => entries.map(([{
    args: [accountId]
  }, stake]) => [accountId, stake])));
}

function retrieveVoteOf(elections) {
  return elections.votesOf.entries().pipe((0, _rxjs.map)(entries => entries.map(([{
    args: [accountId]
  }, votes]) => [accountId, votes])));
}

function retrievePrev(api, elections) {
  return (0, _rxjs.combineLatest)([retrieveStakeOf(elections), retrieveVoteOf(elections)]).pipe((0, _rxjs.map)(([stakes, votes]) => {
    const result = [];
    votes.forEach(([voter, votes]) => {
      result.push([voter, {
        stake: api.registry.createType('Balance'),
        votes
      }]);
    });
    stakes.forEach(([staker, stake]) => {
      const entry = result.find(([voter]) => voter.eq(staker));

      if (entry) {
        entry[1].stake = stake;
      } else {
        result.push([staker, {
          stake,
          votes: []
        }]);
      }
    });
    return result;
  }));
}

function retrieveCurrent(elections) {
  return elections.voting.entries().pipe((0, _rxjs.map)(entries => entries.map(([{
    args: [accountId]
  }, value]) => [accountId, isVoter(value) ? {
    stake: value.stake,
    votes: value.votes
  } : {
    stake: value[0],
    votes: value[1]
  }])));
}

function votes(instanceId, api) {
  const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
  return (0, _index.memo)(instanceId, () => elections ? elections.stakeOf ? retrievePrev(api, elections) : retrieveCurrent(elections) : (0, _rxjs.of)([]));
}

},{"../util/index.js":133,"rxjs":746}],52:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.votesOf = votesOf;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function votesOf(instanceId, api) {
  return (0, _index.memo)(instanceId, accountId => api.derive.council.votes().pipe((0, _rxjs.map)(votes => (votes.find(([from]) => from.eq(accountId)) || [null, {
    stake: api.registry.createType('Balance'),
    votes: []
  }])[1])));
}

},{"../util/index.js":133,"rxjs":746}],53:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.childKey = childKey;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function createChildKey({
  trieIndex
}) {
  return (0, _util.u8aToHex)((0, _util.u8aConcat)(':child_storage:default:', (0, _utilCrypto.blake2AsU8a)((0, _util.u8aConcat)('crowdloan', trieIndex.toU8a()))));
}

function childKey(instanceId, api) {
  return (0, _index.memo)(instanceId, paraId => api.query.crowdloan.funds(paraId).pipe((0, _rxjs.map)(optInfo => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
}

},{"../util/index.js":133,"@polkadot/util":640,"@polkadot/util-crypto":513,"rxjs":746}],54:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.contributions = contributions;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

var _util2 = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)

function _getUpdates(api, paraId) {
  let added = [];
  let removed = [];
  return api.query.system.events().pipe((0, _rxjs.switchMap)(events => {
    const changes = (0, _util2.extractContributed)(paraId, events);

    if (changes.added.length || changes.removed.length) {
      var _events$createdAtHash;

      added = added.concat(...changes.added);
      removed = removed.concat(...changes.removed);
      return (0, _rxjs.of)({
        added,
        addedDelta: changes.added,
        blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
        removed,
        removedDelta: changes.removed
      });
    }

    return _rxjs.EMPTY;
  }), (0, _rxjs.startWith)({
    added,
    addedDelta: [],
    blockHash: '-',
    removed,
    removedDelta: []
  }));
}

function _eventTriggerAll(api, paraId) {
  return api.query.system.events().pipe((0, _rxjs.switchMap)(events => {
    var _events$createdAtHash2;

    const items = events.filter(({
      event: {
        data: [eventParaId],
        method,
        section
      }
    }) => section === 'crowdloan' && ['AllRefunded', 'Dissolved', 'PartiallyRefunded'].includes(method) && eventParaId.eq(paraId));
    return items.length ? (0, _rxjs.of)(((_events$createdAtHash2 = events.createdAtHash) === null || _events$createdAtHash2 === void 0 ? void 0 : _events$createdAtHash2.toHex()) || '-') : _rxjs.EMPTY;
  }), (0, _rxjs.startWith)('-'));
}

function _getKeysPaged(api, childKey) {
  const startSubject = new _rxjs.BehaviorSubject(undefined);
  return startSubject.pipe((0, _rxjs.switchMap)(startKey => api.rpc.childstate.getKeysPaged(childKey, '0x', PAGE_SIZE_K, startKey)), (0, _rxjs.tap)(keys => {
    setTimeout(() => {
      keys.length === PAGE_SIZE_K ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
    }, 0);
  }), (0, _rxjs.toArray)(), // toArray since we want to startSubject to be completed
  (0, _rxjs.map)(keyArr => (0, _util.arrayFlatten)(keyArr)));
}

function _getAll(api, paraId, childKey) {
  return _eventTriggerAll(api, paraId).pipe((0, _rxjs.switchMap)(() => (0, _util.isFunction)(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey) : api.rpc.childstate.getKeys(childKey, '0x')), (0, _rxjs.map)(keys => keys.map(k => k.toHex())));
}

function _contributions(api, paraId, childKey) {
  return (0, _rxjs.combineLatest)([_getAll(api, paraId, childKey), _getUpdates(api, paraId)]).pipe((0, _rxjs.map)(([keys, {
    added,
    blockHash,
    removed
  }]) => {
    const contributorsMap = {};
    keys.forEach(k => {
      contributorsMap[k] = true;
    });
    added.forEach(k => {
      contributorsMap[k] = true;
    });
    removed.forEach(k => {
      delete contributorsMap[k];
    });
    return {
      blockHash,
      contributorsHex: Object.keys(contributorsMap)
    };
  }));
}

function contributions(instanceId, api) {
  return (0, _index.memo)(instanceId, paraId => api.derive.crowdloan.childKey(paraId).pipe((0, _rxjs.switchMap)(childKey => childKey ? _contributions(api, paraId, childKey) : (0, _rxjs.of)({
    blockHash: '-',
    contributorsHex: []
  }))));
}

},{"../util/index.js":133,"./util.js":57,"@polkadot/util":640,"rxjs":746}],55:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _childKey = require("./childKey.js");

Object.keys(_childKey).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _childKey[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _childKey[key];
    }
  });
});

var _contributions = require("./contributions.js");

Object.keys(_contributions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _contributions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _contributions[key];
    }
  });
});

var _onwContributions = require("./onwContributions.js");

Object.keys(_onwContributions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _onwContributions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _onwContributions[key];
    }
  });
});

},{"./childKey.js":53,"./contributions.js":54,"./onwContributions.js":56}],56:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ownContributions = ownContributions;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function _getValues(api, childKey, keys) {
  // We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
  return (0, _rxjs.combineLatest)(keys.map(k => api.rpc.childstate.getStorage(childKey, k))).pipe((0, _rxjs.map)(values => values.map(v => api.registry.createType('Option<StorageData>', v)).map(o => o.isSome ? api.registry.createType('Balance', o.unwrap()) : api.registry.createType('Balance')).reduce((all, b, index) => ({ ...all,
    [keys[index]]: b
  }), {})));
}

function _watchOwnChanges(api, paraId, childkey, keys) {
  return api.query.system.events().pipe((0, _rxjs.switchMap)(events => {
    const changes = (0, _util.extractContributed)(paraId, events);
    const filtered = keys.filter(k => changes.added.includes(k) || changes.removed.includes(k));
    return filtered.length ? _getValues(api, childkey, filtered) : _rxjs.EMPTY;
  }), (0, _rxjs.startWith)({}));
}

function _contributions(api, paraId, childKey, keys) {
  return (0, _rxjs.combineLatest)([_getValues(api, childKey, keys), _watchOwnChanges(api, paraId, childKey, keys)]).pipe((0, _rxjs.map)(([all, latest]) => ({ ...all,
    ...latest
  })));
}

function ownContributions(instanceId, api) {
  return (0, _index.memo)(instanceId, (paraId, keys) => api.derive.crowdloan.childKey(paraId).pipe((0, _rxjs.switchMap)(childKey => childKey && keys.length ? _contributions(api, paraId, childKey, keys) : (0, _rxjs.of)({}))));
}

},{"../util/index.js":133,"./util.js":57,"rxjs":746}],57:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractContributed = extractContributed;

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function extractContributed(paraId, events) {
  var _events$createdAtHash;

  const added = [];
  const removed = [];
  return events.filter(({
    event: {
      data: [, eventParaId],
      method,
      section
    }
  }) => section === 'crowdloan' && ['Contributed', 'Withdrew'].includes(method) && eventParaId.eq(paraId)).reduce((result, {
    event: {
      data: [accountId],
      method
    }
  }) => {
    if (method === 'Contributed') {
      result.added.push(accountId.toHex());
    } else {
      result.removed.push(accountId.toHex());
    }

    return result;
  }, {
    added,
    blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
    removed
  });
}

},{}],58:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dispatchQueue = dispatchQueue;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEMOCRACY_ID = (0, _util.stringToHex)('democrac');

function queryQueue(api) {
  return api.query.democracy.dispatchQueue().pipe((0, _rxjs.switchMap)(dispatches => (0, _rxjs.combineLatest)([(0, _rxjs.of)(dispatches), api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))])), (0, _rxjs.map)(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
    at,
    image: images[dispatchIndex],
    imageHash,
    index
  }))));
}

function schedulerEntries(api) {
  // We don't get entries, but rather we get the keys (triggered via finished referendums) and
  // the subscribe to those keys - this means we pickup when the schedulers actually executes
  // at a block, the entry for that block will become empty
  return api.derive.democracy.referendumsFinished().pipe((0, _rxjs.switchMap)(() => api.query.scheduler.agenda.keys()), (0, _rxjs.switchMap)(keys => {
    const blockNumbers = keys.map(({
      args: [blockNumber]
    }) => blockNumber);
    return blockNumbers.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(blockNumbers), // this should simply be api.query.scheduler.agenda.multi,
    // however we have had cases on Darwinia where the indices have moved around after an
    // upgrade, which results in invalid on-chain data
    (0, _rxjs.combineLatest)(blockNumbers.map(blockNumber => // this does create an issue since it discards all at that block
    api.query.scheduler.agenda(blockNumber).pipe((0, _rxjs.catchError)(() => (0, _rxjs.of)(null)))))]) : (0, _rxjs.of)([[], []]);
  }));
}

function queryScheduler(api) {
  return schedulerEntries(api).pipe((0, _rxjs.switchMap)(([blockNumbers, agendas]) => {
    const result = [];
    blockNumbers.forEach((at, index) => {
      (agendas[index] || []).filter(o => o.isSome).forEach(o => {
        const scheduled = o.unwrap();

        if (scheduled.maybeId.isSome) {
          const id = scheduled.maybeId.unwrap().toHex();
          id.startsWith(DEMOCRACY_ID) && result.push({
            at,
            imageHash: scheduled.call.args[0],
            index: api.registry.createType('(u64, ReferendumIndex)', id)[1]
          });
        }
      });
    });
    return (0, _rxjs.combineLatest)([(0, _rxjs.of)(result), result.length ? api.derive.democracy.preimages(result.map(({
      imageHash
    }) => imageHash)) : (0, _rxjs.of)([])]);
  }), (0, _rxjs.map)(([infos, images]) => infos.map((info, index) => ({ ...info,
    image: images[index]
  }))));
}

function dispatchQueue(instanceId, api) {
  return (0, _index.memo)(instanceId, () => {
    var _api$query$scheduler;

    return (0, _util.isFunction)((_api$query$scheduler = api.query.scheduler) === null || _api$query$scheduler === void 0 ? void 0 : _api$query$scheduler.agenda) ? queryScheduler(api) : api.query.democracy.dispatchQueue ? queryQueue(api) : (0, _rxjs.of)([]);
  });
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],59:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dispatchQueue = require("./dispatchQueue.js");

Object.keys(_dispatchQueue).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _dispatchQueue[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dispatchQueue[key];
    }
  });
});

var _locks = require("./locks.js");

Object.keys(_locks).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _locks[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _locks[key];
    }
  });
});

var _nextExternal = require("./nextExternal.js");

Object.keys(_nextExternal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _nextExternal[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nextExternal[key];
    }
  });
});

var _preimage = require("./preimage.js");

Object.keys(_preimage).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _preimage[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _preimage[key];
    }
  });
});

var _preimages = require("./preimages.js");

Object.keys(_preimages).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _preimages[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _preimages[key];
    }
  });
});

var _proposals = require("./proposals.js");

Object.keys(_proposals).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _proposals[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _proposals[key];
    }
  });
});

var _referendumIds = require("./referendumIds.js");

Object.keys(_referendumIds).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _referendumIds[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _referendumIds[key];
    }
  });
});

var _referendums = require("./referendums.js");

Object.keys(_referendums).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _referendums[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _referendums[key];
    }
  });
});

var _referendumsActive = require("./referendumsActive.js");

Object.keys(_referendumsActive).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _referendumsActive[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _referendumsActive[key];
    }
  });
});

var _referendumsFinished = require("./referendumsFinished.js");

Object.keys(_referendumsFinished).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _referendumsFinished[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _referendumsFinished[key];
    }
  });
});

var _referendumsInfo = require("./referendumsInfo.js");

Object.keys(_referendumsInfo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _referendumsInfo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _referendumsInfo[key];
    }
  });
});

var _sqrtElectorate = require("./sqrtElectorate.js");

Object.keys(_sqrtElectorate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _sqrtElectorate[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _sqrtElectorate[key];
    }
  });
});

},{"./dispatchQueue.js":58,"./locks.js":60,"./nextExternal.js":61,"./preimage.js":62,"./preimages.js":63,"./proposals.js":64,"./referendumIds.js":65,"./referendums.js":66,"./referendumsActive.js":67,"./referendumsFinished.js":68,"./referendumsInfo.js":69,"./sqrtElectorate.js":70}],60:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.locks = locks;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];

function parseEnd(api, vote, {
  approved,
  end
}) {
  return [end, approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : _util.BN_ZERO];
}

function parseLock(api, [referendumId, accountVote], referendum) {
  const {
    balance,
    vote
  } = accountVote.asStandard;
  const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [_util.BN_ZERO, _util.BN_ZERO];
  return {
    balance,
    isDelegated: false,
    isFinished: referendum.isFinished,
    referendumEnd,
    referendumId,
    unlockAt,
    vote
  };
}

function delegateLocks(api, {
  balance,
  conviction,
  target
}) {
  return api.derive.democracy.locks(target).pipe((0, _rxjs.map)(available => available.map(({
    isFinished,
    referendumEnd,
    referendumId,
    unlockAt,
    vote
  }) => ({
    balance,
    isDelegated: true,
    isFinished,
    referendumEnd,
    referendumId,
    unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
    vote: api.registry.createType('Vote', {
      aye: vote.isAye,
      conviction
    })
  }))));
}

function directLocks(api, {
  votes
}) {
  if (!votes.length) {
    return (0, _rxjs.of)([]);
  }

  return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe((0, _rxjs.map)(referendums => votes.map((vote, index) => [vote, referendums[index].unwrapOr(null)]).filter(item => !!item[1] && (0, _util.isUndefined)(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
}

function locks(instanceId, api) {
  return (0, _index.memo)(instanceId, accountId => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId).pipe((0, _rxjs.switchMap)(voting => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : (0, _rxjs.of)([]))) : (0, _rxjs.of)([]));
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],61:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nextExternal = nextExternal;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function withImage(api, nextOpt) {
  if (nextOpt.isNone) {
    return (0, _rxjs.of)(null);
  }

  const [imageHash, threshold] = nextOpt.unwrap();
  return api.derive.democracy.preimage(imageHash).pipe((0, _rxjs.map)(image => ({
    image,
    imageHash,
    threshold
  })));
}

function nextExternal(instanceId, api) {
  return (0, _index.memo)(instanceId, () => {
    var _api$query$democracy;

    return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.nextExternal ? api.query.democracy.nextExternal().pipe((0, _rxjs.switchMap)(nextOpt => withImage(api, nextOpt))) : (0, _rxjs.of)(null);
  });
}

},{"../util/index.js":133,"rxjs":746}],62:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preimage = preimage;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function preimage(instanceId, api) {
  return (0, _index.memo)(instanceId, hash => api.query.democracy.preimages(hash).pipe((0, _rxjs.map)(imageOpt => (0, _util.parseImage)(api, imageOpt))));
}

},{"../util/index.js":133,"./util.js":71,"rxjs":746}],63:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preimages = preimages;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function preimages(instanceId, api) {
  return (0, _index.memo)(instanceId, hashes => hashes.length ? api.query.democracy.preimages.multi(hashes).pipe((0, _rxjs.map)(images => images.map(imageOpt => (0, _util.parseImage)(api, imageOpt)))) : (0, _rxjs.of)([]));
}

},{"../util/index.js":133,"./util.js":71,"rxjs":746}],64:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proposals = proposals;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function isNewDepositors(depositors) {
  // Detect balance...
  // eslint-disable-next-line @typescript-eslint/unbound-method
  return (0, _util.isFunction)(depositors[1].mul);
}

function parse([proposals, images, optDepositors]) {
  return proposals.filter(([,, proposer], index) => {
    var _optDepositors$index;

    return !!((_optDepositors$index = optDepositors[index]) !== null && _optDepositors$index !== void 0 && _optDepositors$index.isSome) && !proposer.isEmpty;
  }).map(([index, imageHash, proposer], proposalIndex) => {
    const depositors = optDepositors[proposalIndex].unwrap();
    return { ...(isNewDepositors(depositors) ? {
        balance: depositors[1],
        seconds: depositors[0]
      } : {
        balance: depositors[0],
        seconds: depositors[1]
      }),
      image: images[proposalIndex],
      imageHash,
      index,
      proposer
    };
  });
}

function proposals(instanceId, api) {
  return (0, _index.memo)(instanceId, () => {
    var _api$query$democracy, _api$query$democracy2;

    return (0, _util.isFunction)((_api$query$democracy = api.query.democracy) === null || _api$query$democracy === void 0 ? void 0 : _api$query$democracy.publicProps) && (0, _util.isFunction)((_api$query$democracy2 = api.query.democracy) === null || _api$query$democracy2 === void 0 ? void 0 : _api$query$democracy2.preimages) ? api.query.democracy.publicProps().pipe((0, _rxjs.switchMap)(proposals => proposals.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(proposals), api.derive.democracy.preimages(proposals.map(([, hash]) => hash)), api.query.democracy.depositOf.multi(proposals.map(([index]) => index))]) : (0, _rxjs.of)([[], [], []])), (0, _rxjs.map)(parse)) : (0, _rxjs.of)([]);
  });
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],65:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.referendumIds = referendumIds;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function referendumIds(instanceId, api) {
  return (0, _index.memo)(instanceId, () => {
    var _api$query$democracy;

    return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.lowestUnbaked ? api.queryMulti([api.query.democracy.lowestUnbaked, api.query.democracy.referendumCount]).pipe((0, _rxjs.map)(([first, total]) => total.gt(first) // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i)) : [])) : (0, _rxjs.of)([]);
  });
}

},{"../util/index.js":133,"rxjs":746}],66:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.referendums = referendums;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function referendums(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.derive.democracy.referendumsActive().pipe((0, _rxjs.switchMap)(referendums => referendums.length ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(referendums), api.derive.democracy._referendumsVotes(referendums)]) : (0, _rxjs.of)([[], []])), (0, _rxjs.map)(([referendums, votes]) => referendums.map((referendum, index) => ({ ...referendum,
    ...votes[index]
  })))));
}

},{"../util/index.js":133,"rxjs":746}],67:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.referendumsActive = referendumsActive;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function referendumsActive(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.derive.democracy.referendumIds().pipe((0, _rxjs.switchMap)(ids => ids.length ? api.derive.democracy.referendumsInfo(ids) : (0, _rxjs.of)([]))));
}

},{"../util/index.js":133,"rxjs":746}],68:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.referendumsFinished = referendumsFinished;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function referendumsFinished(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.derive.democracy.referendumIds().pipe((0, _rxjs.switchMap)(ids => api.query.democracy.referendumInfoOf.multi(ids)), (0, _rxjs.map)(infos => infos.map(optInfo => optInfo.unwrapOr(null)).filter(info => !!info && info.isFinished).map(info => info.asFinished))));
}

},{"../util/index.js":133,"rxjs":746}],69:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._referendumInfo = _referendumInfo;
exports._referendumVotes = _referendumVotes;
exports._referendumsVotes = _referendumsVotes;
exports.referendumsInfo = referendumsInfo;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

var _util2 = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function votesPrev(api, referendumId) {
  return api.query.democracy.votersFor(referendumId).pipe((0, _rxjs.switchMap)(votersFor => (0, _rxjs.combineLatest)([(0, _rxjs.of)(votersFor), votersFor.length ? api.query.democracy.voteOf.multi(votersFor.map(accountId => [referendumId, accountId])) : (0, _rxjs.of)([]), api.derive.balances.votingBalances(votersFor)])), (0, _rxjs.map)(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
    accountId,
    balance: balances[index].votingBalance || api.registry.createType('Balance'),
    isDelegating: false,
    vote: votes[index] || api.registry.createType('Vote')
  }))));
}

function extractVotes(mapped, referendumId) {
  return mapped.filter(([, voting]) => voting.isDirect).map(([accountId, voting]) => [accountId, voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId, votes]) => // FIXME We are ignoring split votes
  votes.reduce((result, [, vote]) => {
    if (vote.isStandard) {
      result.push({
        accountId,
        isDelegating: false,
        ...vote.asStandard
      });
    }

    return result;
  }, result), []);
}

function votesCurr(api, referendumId) {
  return api.query.democracy.votingOf.entries().pipe((0, _rxjs.map)(allVoting => {
    const mapped = allVoting.map(([{
      args: [accountId]
    }, voting]) => [accountId, voting]);
    const votes = extractVotes(mapped, referendumId);
    const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId, voting]) => [accountId, voting.asDelegating]); // add delegations

    delegations.forEach(([accountId, {
      balance,
      conviction,
      target
    }]) => {
      // Are we delegating to a delegator
      const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
      const to = votes.find(({
        accountId
      }) => accountId.eq(toDelegator ? toDelegator[0] : target)); // this delegation has a target

      if (to) {
        votes.push({
          accountId,
          balance,
          isDelegating: true,
          vote: api.registry.createType('Vote', {
            aye: to.vote.isAye,
            conviction
          })
        });
      }
    });
    return votes;
  }));
}

function _referendumVotes(instanceId, api) {
  return (0, _index.memo)(instanceId, referendum => (0, _rxjs.combineLatest)([api.derive.democracy.sqrtElectorate(), (0, _util.isFunction)(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)]).pipe((0, _rxjs.map)(([sqrtElectorate, votes]) => (0, _util2.calcVotes)(sqrtElectorate, referendum, votes))));
}

function _referendumsVotes(instanceId, api) {
  return (0, _index.memo)(instanceId, referendums => referendums.length ? (0, _rxjs.combineLatest)(referendums.map(referendum => api.derive.democracy._referendumVotes(referendum))) : (0, _rxjs.of)([]));
}

function _referendumInfo(instanceId, api) {
  return (0, _index.memo)(instanceId, (index, info) => {
    const status = (0, _util2.getStatus)(info);
    return status ? api.query.democracy.preimages(status.proposalHash).pipe((0, _rxjs.map)(preimage => ({
      image: (0, _util2.parseImage)(api, preimage),
      imageHash: status.proposalHash,
      index: api.registry.createType('ReferendumIndex', index),
      status
    }))) : (0, _rxjs.of)(null);
  });
}

function referendumsInfo(instanceId, api) {
  return (0, _index.memo)(instanceId, ids => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe((0, _rxjs.switchMap)(infos => (0, _rxjs.combineLatest)(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), (0, _rxjs.map)(infos => infos.filter(referendum => !!referendum))) : (0, _rxjs.of)([]));
}

},{"../util/index.js":133,"./util.js":71,"@polkadot/util":640,"rxjs":746}],70:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sqrtElectorate = sqrtElectorate;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function sqrtElectorate(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.query.balances.totalIssuance().pipe((0, _rxjs.map)(totalIssuance => (0, _util.bnSqrt)(totalIssuance))));
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],71:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calcPassing = calcPassing;
exports.calcVotes = calcVotes;
exports.compareRationals = compareRationals;
exports.getStatus = getStatus;
exports.parseImage = parseImage;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function isOldInfo(info) {
  return !!info.proposalHash;
}

function isCurrentStatus(status) {
  return !!status.tally;
}

function isCurrentPreimage(api, imageOpt) {
  return !!imageOpt && !api.query.democracy.dispatchQueue;
}

function compareRationals(n1, d1, n2, d2) {
  while (true) {
    const q1 = n1.div(d1);
    const q2 = n2.div(d2);

    if (q1.lt(q2)) {
      return true;
    } else if (q2.lt(q1)) {
      return false;
    }

    const r1 = n1.mod(d1);
    const r2 = n2.mod(d2);

    if (r2.isZero()) {
      return false;
    } else if (r1.isZero()) {
      return true;
    }

    n1 = d2;
    n2 = d1;
    d1 = r2;
    d2 = r1;
  }
}

function calcPassingOther(threshold, sqrtElectorate, {
  votedAye,
  votedNay,
  votedTotal
}) {
  const sqrtVoters = (0, _util.bnSqrt)(votedTotal);
  return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate) : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
}

function calcPassing(threshold, sqrtElectorate, state) {
  return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate, state);
}

function calcVotesPrev(votesFor) {
  return votesFor.reduce((state, derived) => {
    const {
      balance,
      vote
    } = derived;
    const isDefault = vote.conviction.index === 0;
    const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);

    if (vote.isAye) {
      state.allAye.push(derived);
      state.voteCountAye++;
      state.votedAye.iadd(counted);
    } else {
      state.allNay.push(derived);
      state.voteCountNay++;
      state.votedNay.iadd(counted);
    }

    state.voteCount++;
    state.votedTotal.iadd(counted);
    return state;
  }, {
    allAye: [],
    allNay: [],
    voteCount: 0,
    voteCountAye: 0,
    voteCountNay: 0,
    votedAye: new _util.BN(0),
    votedNay: new _util.BN(0),
    votedTotal: new _util.BN(0)
  });
}

function calcVotesCurrent(tally, votes) {
  const allAye = [];
  const allNay = [];
  votes.forEach(derived => {
    if (derived.vote.isAye) {
      allAye.push(derived);
    } else {
      allNay.push(derived);
    }
  });
  return {
    allAye,
    allNay,
    voteCount: allAye.length + allNay.length,
    voteCountAye: allAye.length,
    voteCountNay: allNay.length,
    votedAye: tally.ayes,
    votedNay: tally.nays,
    votedTotal: tally.turnout
  };
}

function calcVotes(sqrtElectorate, referendum, votes) {
  const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes) : calcVotesPrev(votes);
  return { ...state,
    isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
    votes
  };
}

function getStatus(info) {
  if (info.isNone) {
    return null;
  }

  const unwrapped = info.unwrap();

  if (isOldInfo(unwrapped)) {
    return unwrapped;
  } else if (unwrapped.isOngoing) {
    return unwrapped.asOngoing;
  } // done, we don't include it here... only currently active


  return null;
}

function constructProposal(api, [bytes, proposer, balance, at]) {
  let proposal;

  try {
    proposal = api.registry.createType('Proposal', bytes.toU8a(true));
  } catch (error) {
    console.error(error);
  }

  return {
    at,
    balance,
    proposal,
    proposer
  };
}

function parseImage(api, imageOpt) {
  if (imageOpt.isNone) {
    return;
  }

  if (isCurrentPreimage(api, imageOpt)) {
    const status = imageOpt.unwrap();

    if (status.isMissing) {
      return;
    }

    const {
      data,
      deposit,
      provider,
      since
    } = status.asAvailable;
    return constructProposal(api, [data, provider, deposit, since]);
  }

  return constructProposal(api, imageOpt.unwrap());
}

},{"@polkadot/util":640}],72:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _packageInfo = require("@polkadot/api/packageInfo");

var _packageInfo2 = require("@polkadot/rpc-core/packageInfo");

var _packageInfo3 = require("@polkadot/types/packageInfo");

var _util = require("@polkadot/util");

var _packageInfo4 = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _util.detectPackage)(_packageInfo4.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo.packageInfo, _packageInfo2.packageInfo, _packageInfo3.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/api-derive")
},{"./packageInfo.js":79,"@polkadot/api/packageInfo":144,"@polkadot/rpc-core/packageInfo":186,"@polkadot/types/packageInfo":423,"@polkadot/util":640}],73:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _info = require("./info.js");

Object.keys(_info).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _info[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _info[key];
    }
  });
});

},{"./info.js":74}],74:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// SeatHolder is current tuple is 2.x-era Substrate
function isSeatHolder(value) {
  return !Array.isArray(value);
}

function isCandidateTuple(value) {
  return Array.isArray(value);
}

function getAccountTuple(value) {
  return isSeatHolder(value) ? [value.who, value.stake] : value;
}

function getCandidate(value) {
  return isCandidateTuple(value) ? value[0] : value;
}

function sortAccounts([, balanceA], [, balanceB]) {
  return balanceB.cmp(balanceA);
}

function getConstants(api, elections) {
  return elections ? {
    candidacyBond: api.consts[elections].candidacyBond,
    desiredRunnersUp: api.consts[elections].desiredRunnersUp,
    desiredSeats: api.consts[elections].desiredMembers,
    termDuration: api.consts[elections].termDuration,
    votingBond: api.consts[elections].votingBond
  } : {};
}

function getModules(api) {
  const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'council') || ['council'];
  const elections = api.query.phragmenElection ? 'phragmenElection' : api.query.electionsPhragmen ? 'electionsPhragmen' : api.query.elections ? 'elections' : null;
  return [council, elections];
}
/**
 * @name info
 * @returns An object containing the combined results of the storage queries for
 * all relevant election module properties.
 * @example
 * <BR>
 *
 * ```javascript
 * api.derive.elections.info(({ members, candidates }) => {
 *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
 * });
 * ```
 */


function info(instanceId, api) {
  return (0, _index.memo)(instanceId, () => {
    const [council, elections] = getModules(api);
    return (elections ? api.queryMulti([api.query[council].members, api.query[elections].candidates, api.query[elections].members, api.query[elections].runnersUp]) : (0, _rxjs.combineLatest)([api.query[council].members(), (0, _rxjs.of)([]), (0, _rxjs.of)([]), (0, _rxjs.of)([])])).pipe((0, _rxjs.map)(([councilMembers, candidates, members, runnersUp]) => ({ ...getConstants(api, elections),
      candidateCount: api.registry.createType('u32', candidates.length),
      candidates: candidates.map(getCandidate),
      members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(a => [a, api.registry.createType('Balance')]),
      runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
    })));
  });
}

},{"../util/index.js":133,"rxjs":746}],75:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _receivedHeartbeats = require("./receivedHeartbeats.js");

Object.keys(_receivedHeartbeats).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _receivedHeartbeats[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _receivedHeartbeats[key];
    }
  });
});

},{"./receivedHeartbeats.js":76}],76:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.receivedHeartbeats = receivedHeartbeats;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function mapResult([result, validators, heartbeats, numBlocks]) {
  validators.forEach((validator, index) => {
    const validatorId = validator.toString();
    const blockCount = numBlocks[index];
    const hasMessage = !heartbeats[index].isEmpty;
    const prev = result[validatorId];

    if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
      result[validatorId] = {
        blockCount,
        hasMessage,
        isOnline: hasMessage || blockCount.gt(_util.BN_ZERO)
      };
    }
  });
  return result;
}
/**
 * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
 */


function receivedHeartbeats(instanceId, api) {
  return (0, _index.memo)(instanceId, () => {
    var _api$query$imOnline;

    return (_api$query$imOnline = api.query.imOnline) !== null && _api$query$imOnline !== void 0 && _api$query$imOnline.receivedHeartbeats ? api.derive.staking.overview().pipe((0, _rxjs.switchMap)(({
      currentIndex,
      validators
    }) => (0, _rxjs.combineLatest)([(0, _rxjs.of)({}), (0, _rxjs.of)(validators), api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])), api.query.imOnline.authoredBlocks.multi(validators.map(address => [currentIndex, address]))])), (0, _rxjs.map)(mapResult)) : (0, _rxjs.of)({});
  });
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],77:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});

},{"./bundle.js":33,"./detectPackage.js":72}],78:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proposals = exports.proposalHashes = exports.proposalCount = exports.proposal = exports.prime = exports.members = exports.hasProposals = void 0;

var _index = require("../collective/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const members = (0, _index.members)('membership');
exports.members = members;
const hasProposals = (0, _index.hasProposals)('membership');
exports.hasProposals = hasProposals;
const proposal = (0, _index.proposal)('membership');
exports.proposal = proposal;
const proposalCount = (0, _index.proposalCount)('membership');
exports.proposalCount = proposalCount;
const proposalHashes = (0, _index.proposalHashes)('membership');
exports.proposalHashes = proposalHashes;
const proposals = (0, _index.proposals)('membership');
exports.proposals = proposals;
const prime = (0, _index.prime)('membership');
exports.prime = prime;

},{"../collective/index.js":44}],79:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/api-derive',
  version: '6.12.1'
};
exports.packageInfo = packageInfo;

},{}],80:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _info = require("./info.js");

Object.keys(_info).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _info[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _info[key];
    }
  });
});

var _overview = require("./overview.js");

Object.keys(_overview).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _overview[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _overview[key];
    }
  });
});

},{"./info.js":81,"./overview.js":82}],81:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function parseActive(id, active) {
  const found = active.find(([paraId]) => paraId === id);

  if (found && found[1].isSome) {
    const [collatorId, retriable] = found[1].unwrap();
    return {
      collatorId,
      ...(retriable.isWithRetries ? {
        isRetriable: true,
        retries: retriable.asWithRetries.toNumber()
      } : {
        isRetriable: false,
        retries: 0
      })
    };
  }

  return null;
}

function parseCollators(id, collatorQueue) {
  return collatorQueue.map(queue => {
    const found = queue.find(([paraId]) => paraId === id);
    return found ? found[1] : null;
  });
}

function parse(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
  if (info.isNone) {
    return null;
  }

  return {
    active: parseActive(id, active),
    didUpdate: (0, _util.didUpdateToBool)(didUpdate, id),
    heads,
    id,
    info: {
      id,
      ...info.unwrap()
    },
    pendingSwapId: pendingSwap.unwrapOr(null),
    relayDispatchQueue,
    retryCollators: parseCollators(id, retryQueue),
    selectedCollators: parseCollators(id, selectedThreads)
  };
}

function info(instanceId, api) {
  return (0, _index.memo)(instanceId, id => api.query.registrar && api.query.parachains ? api.queryMulti([api.query.registrar.active, api.query.registrar.retryQueue, api.query.registrar.selectedThreads, api.query.parachains.didUpdate, [api.query.registrar.paras, id], [api.query.registrar.pendingSwap, id], [api.query.parachains.heads, id], [api.query.parachains.relayDispatchQueue, id]]).pipe((0, _rxjs.map)(result => parse(api.registry.createType('ParaId', id), result))) : (0, _rxjs.of)(null));
}

},{"../util/index.js":133,"./util.js":83,"rxjs":746}],82:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.overview = overview;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function parse([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {
  return ids.map((id, index) => ({
    didUpdate: (0, _util.didUpdateToBool)(didUpdate, id),
    id,
    info: {
      id,
      ...infos[index].unwrapOr(null)
    },
    pendingSwapId: pendingSwaps[index].unwrapOr(null),
    relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
  }));
}

function overview(instanceId, api) {
  return (0, _index.memo)(instanceId, () => {
    var _api$query$registrar;

    return (_api$query$registrar = api.query.registrar) !== null && _api$query$registrar !== void 0 && _api$query$registrar.parachains && api.query.parachains ? api.query.registrar.parachains().pipe((0, _rxjs.switchMap)(paraIds => (0, _rxjs.combineLatest)([(0, _rxjs.of)(paraIds), api.query.parachains.didUpdate(), api.query.registrar.paras.multi(paraIds), api.query.registrar.pendingSwap.multi(paraIds), api.query.parachains.relayDispatchQueueSize.multi(paraIds)])), (0, _rxjs.map)(parse)) : (0, _rxjs.of)([]);
  });
}

},{"../util/index.js":133,"./util.js":83,"rxjs":746}],83:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.didUpdateToBool = didUpdateToBool;

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function didUpdateToBool(didUpdate, id) {
  return didUpdate.isSome ? didUpdate.unwrap().some(paraId => paraId.eq(id)) : false;
}

},{}],84:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _indexes = require("./indexes.js");

Object.keys(_indexes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _indexes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _indexes[key];
    }
  });
});

var _info = require("./info.js");

Object.keys(_info).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _info[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _info[key];
    }
  });
});

var _progress = require("./progress.js");

Object.keys(_progress).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _progress[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _progress[key];
    }
  });
});

},{"./indexes.js":85,"./info.js":86,"./progress.js":87}],85:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.indexes = indexes;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// parse into Indexes
function parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
  return {
    activeEra,
    activeEraStart,
    currentEra,
    currentIndex,
    validatorCount
  };
} // query based on latest


function queryStaking(api) {
  return api.queryMulti([api.query.session.currentIndex, api.query.staking.activeEra, api.query.staking.currentEra, api.query.staking.validatorCount]).pipe((0, _rxjs.map)(([currentIndex, activeOpt, currentEra, validatorCount]) => {
    const {
      index,
      start
    } = activeOpt.unwrapOrDefault();
    return parse([currentIndex, index, start, currentEra.unwrapOrDefault(), validatorCount]);
  }));
} // query based on latest


function querySession(api) {
  return api.query.session.currentIndex().pipe((0, _rxjs.map)(currentIndex => parse([currentIndex, api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')])));
} // empty set when none is available


function empty(api) {
  return (0, _rxjs.of)(parse([api.registry.createType('SessionIndex', 1), api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')]));
}

function indexes(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));
}

},{"../util/index.js":133,"rxjs":746}],86:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */
function info(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.derive.session.indexes().pipe((0, _rxjs.map)(indexes => {
    var _api$consts, _api$consts$babe, _api$consts2, _api$consts2$staking;

    const sessionLength = ((_api$consts = api.consts) === null || _api$consts === void 0 ? void 0 : (_api$consts$babe = _api$consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.epochDuration) || api.registry.createType('u64', 1);
    const sessionsPerEra = ((_api$consts2 = api.consts) === null || _api$consts2 === void 0 ? void 0 : (_api$consts2$staking = _api$consts2.staking) === null || _api$consts2$staking === void 0 ? void 0 : _api$consts2$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1);
    return { ...indexes,
      eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(sessionLength)),
      isEpoch: !!api.query.babe,
      sessionLength,
      sessionsPerEra
    };
  })));
}

},{"../util/index.js":133,"rxjs":746}],87:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eraProgress = exports.eraLength = void 0;
exports.progress = progress;
exports.sessionProgress = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function withProgressField(field) {
  return (instanceId, api) => (0, _index.memo)(instanceId, () => api.derive.session.progress().pipe((0, _rxjs.map)(info => info[field])));
}

function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
  const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
  const sessionProgress = currentSlot.sub(epochStartSlot);
  const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
  return { ...info,
    eraProgress: api.registry.createType('BlockNumber', eraProgress),
    sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
  };
}

function queryAura(api) {
  return api.derive.session.info().pipe((0, _rxjs.map)(info => ({ ...info,
    eraProgress: api.registry.createType('BlockNumber'),
    sessionProgress: api.registry.createType('BlockNumber')
  })));
}

function queryBabe(api) {
  return api.derive.session.info().pipe((0, _rxjs.switchMap)(info => {
    var _api$query$staking;

    return (0, _rxjs.combineLatest)([(0, _rxjs.of)(info), // we may have no staking, but have babe (permissioned)
    (_api$query$staking = api.query.staking) !== null && _api$query$staking !== void 0 && _api$query$staking.erasStartSessionIndex ? api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot, [api.query.staking.erasStartSessionIndex, info.activeEra]]) : api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot])]);
  }), (0, _rxjs.map)(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]]));
}
/**
 * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
 */


function progress(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.query.babe ? queryBabe(api).pipe((0, _rxjs.map)(([info, slots]) => createDerive(api, info, slots))) : queryAura(api));
}

const eraLength = withProgressField('eraLength');
exports.eraLength = eraLength;
const eraProgress = withProgressField('eraProgress');
exports.eraProgress = eraProgress;
const sessionProgress = withProgressField('sessionProgress');
exports.sessionProgress = sessionProgress;

},{"../util/index.js":133,"rxjs":746}],88:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.candidates = candidates;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @description Get the candidate info for a society
 */
function candidates(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.query.society.candidates().pipe((0, _rxjs.switchMap)(candidates => (0, _rxjs.combineLatest)([(0, _rxjs.of)(candidates), api.query.society.suspendedCandidates.multi(candidates.map(({
    who
  }) => who))])), (0, _rxjs.map)(([candidates, suspended]) => candidates.map(({
    kind,
    value,
    who
  }, index) => ({
    accountId: who,
    isSuspended: suspended[index].isSome,
    kind,
    value
  })))));
}

},{"../util/index.js":133,"rxjs":746}],89:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _candidates = require("./candidates.js");

Object.keys(_candidates).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _candidates[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _candidates[key];
    }
  });
});

var _info = require("./info.js");

Object.keys(_info).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _info[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _info[key];
    }
  });
});

var _member = require("./member.js");

Object.keys(_member).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _member[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _member[key];
    }
  });
});

var _members = require("./members.js");

Object.keys(_members).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _members[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _members[key];
    }
  });
});

},{"./candidates.js":88,"./info.js":90,"./member.js":91,"./members.js":92}],90:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.info = info;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @description Get the overall info for a society
 */
function info(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.queryMulti([api.query.society.bids, api.query.society.defender, api.query.society.founder, api.query.society.head, api.query.society.maxMembers, api.query.society.pot]).pipe((0, _rxjs.map)(([bids, defender, founder, head, maxMembers, pot]) => ({
    bids,
    defender: defender.unwrapOr(undefined),
    founder: founder.unwrapOr(undefined),
    hasDefender: defender.isSome && head.isSome && !head.eq(defender) || false,
    head: head.unwrapOr(undefined),
    maxMembers,
    pot
  }))));
}

},{"../util/index.js":133,"rxjs":746}],91:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.member = member;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @description Get the member info for a society
 */
function member(instanceId, api) {
  return (0, _index.memo)(instanceId, accountId => api.derive.society._members([accountId]).pipe((0, _rxjs.map)(([result]) => result)));
}

},{"../util/index.js":133,"rxjs":746}],92:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._members = _members;
exports.members = members;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function _members(instanceId, api) {
  return (0, _index.memo)(instanceId, accountIds => (0, _rxjs.combineLatest)([(0, _rxjs.of)(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.strikes.multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society.vouching.multi(accountIds)]).pipe((0, _rxjs.map)(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({
    accountId,
    isDefenderVoter: defenderVotes[index].isSome,
    isSuspended: suspended[index].isTrue,
    payouts: payouts[index],
    strikes: strikes[index],
    vote: defenderVotes[index].unwrapOr(undefined),
    vouching: vouching[index].unwrapOr(undefined)
  })))));
}
/**
 * @description Get the member info for a society
 */


function members(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.query.society.members().pipe((0, _rxjs.switchMap)(members => api.derive.society._members(members))));
}

},{"../util/index.js":133,"rxjs":746}],93:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.account = void 0;
exports.accounts = accounts;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const QUERY_OPTS = {
  withDestination: true,
  withLedger: true,
  withNominations: true,
  withPrefs: true
};

function groupByEra(list) {
  return list.reduce((map, {
    era,
    value
  }) => {
    const key = era.toString();
    map[key] = (map[key] || _util.BN_ZERO).add(value.unwrap());
    return map;
  }, {});
}

function calculateUnlocking(api, stakingLedger, sessionInfo) {
  const results = Object.entries(groupByEra(((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).filter(({
    era
  }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
    remainingEras: new _util.BN(eraString).isub(sessionInfo.activeEra),
    value: api.registry.createType('Balance', value)
  }));
  return results.length ? results : undefined;
}

function redeemableSum(api, stakingLedger, sessionInfo) {
  return api.registry.createType('Balance', ((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).reduce((total, {
    era,
    value
  }) => {
    return sessionInfo.activeEra.gte(era.unwrap()) ? total.iadd(value.unwrap()) : total;
  }, new _util.BN(0)));
}

function parseResult(api, sessionInfo, keys, query) {
  return { ...keys,
    ...query,
    redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
    unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
  };
}
/**
 * @description From a list of stashes, fill in all the relevant staking details
 */


function accounts(instanceId, api) {
  return (0, _index.memo)(instanceId, accountIds => api.derive.session.info().pipe((0, _rxjs.switchMap)(sessionInfo => (0, _rxjs.combineLatest)([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, QUERY_OPTS)]).pipe((0, _rxjs.map)(([keys, queries]) => queries.map((q, index) => parseResult(api, sessionInfo, keys[index], q)))))));
}
/**
 * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
 */


const account = (0, _index.firstMemo)((api, accountId) => api.derive.staking.accounts([accountId]));
exports.account = account;

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],94:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterCachedEras = filterCachedEras;
exports.getEraCache = getEraCache;
exports.getEraMultiCache = getEraMultiCache;
exports.setEraCache = setEraCache;
exports.setEraMultiCache = setEraMultiCache;

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function getEraCache(CACHE_KEY, era, withActive) {
  const cacheKey = `${CACHE_KEY}-${era.toString()}`;
  return [cacheKey, withActive ? undefined : _index.deriveCache.get(cacheKey)];
}

function getEraMultiCache(CACHE_KEY, eras, withActive) {
  const cached = withActive ? [] : eras.map(e => _index.deriveCache.get(`${CACHE_KEY}-${e.toString()}`)).filter(v => !!v);
  return cached;
}

function setEraCache(cacheKey, withActive, value) {
  !withActive && _index.deriveCache.set(cacheKey, value);
  return value;
}

function setEraMultiCache(CACHE_KEY, withActive, values) {
  !withActive && values.forEach(v => _index.deriveCache.set(`${CACHE_KEY}-${v.era.toString()}`, v));
  return values;
}

function filterCachedEras(eras, cached, query) {
  return eras.map(e => cached.find(({
    era
  }) => e.eq(era)) || query.find(({
    era
  }) => e.eq(era)));
}

},{"../util/index.js":133}],95:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.currentPoints = currentPoints;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @description Retrieve the staking overview, including elected and points earned
 */
function currentPoints(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.derive.session.indexes().pipe((0, _rxjs.switchMap)(({
    activeEra
  }) => api.query.staking.erasRewardPoints(activeEra))));
}

},{"../util/index.js":133,"rxjs":746}],96:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.electedInfo = electedInfo;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_FLAGS = {
  withController: true,
  withExposure: true,
  withPrefs: true
};

function combineAccounts(nextElected, validators) {
  return (0, _util.arrayFlatten)([nextElected, validators.filter(v => !nextElected.find(n => n.eq(v)))]);
}

function electedInfo(instanceId, api) {
  return (0, _index.memo)(instanceId, (flags = DEFAULT_FLAGS) => api.derive.staking.validators().pipe((0, _rxjs.switchMap)(({
    nextElected,
    validators
  }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe((0, _rxjs.map)(info => ({
    info,
    nextElected,
    validators
  }))))));
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],97:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._eraExposure = _eraExposure;
exports.erasExposure = exports.eraExposure = exports._erasExposure = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _cache = require("./cache.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const CACHE_KEY = 'eraExposure';

function mapStakers(era, stakers) {
  const nominators = {};
  const validators = {};
  stakers.forEach(([key, exposure]) => {
    const validatorId = key.args[1].toString();
    validators[validatorId] = exposure;
    exposure.others.forEach(({
      who
    }, validatorIndex) => {
      const nominatorId = who.toString();
      nominators[nominatorId] = nominators[nominatorId] || [];
      nominators[nominatorId].push({
        validatorId,
        validatorIndex
      });
    });
  });
  return {
    era,
    nominators,
    validators
  };
}

function _eraExposure(instanceId, api) {
  return (0, _index.memo)(instanceId, (era, withActive = false) => {
    const [cacheKey, cached] = (0, _cache.getEraCache)(CACHE_KEY, era, withActive);
    return cached ? (0, _rxjs.of)(cached) : api.query.staking.erasStakersClipped.entries(era).pipe((0, _rxjs.map)(r => (0, _cache.setEraCache)(cacheKey, withActive, mapStakers(era, r))));
  });
}

const eraExposure = (0, _util.singleEra)('_eraExposure');
exports.eraExposure = eraExposure;

const _erasExposure = (0, _util.combineEras)('_eraExposure');

exports._erasExposure = _erasExposure;
const erasExposure = (0, _util.erasHistoricApply)('_erasExposure');
exports.erasExposure = erasExposure;

},{"../util/index.js":133,"./cache.js":94,"./util.js":115,"rxjs":746}],98:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.erasHistoric = erasHistoric;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function erasHistoric(instanceId, api) {
  return (0, _index.memo)(instanceId, withActive => api.queryMulti([api.query.staking.activeEra, api.query.staking.historyDepth]).pipe((0, _rxjs.map)(([activeEraOpt, historyDepth]) => {
    const result = [];
    const max = historyDepth.toNumber();
    const activeEra = activeEraOpt.unwrapOrDefault().index;
    let lastEra = activeEra;

    while (lastEra.gte(_util.BN_ZERO) && result.length < max) {
      if (lastEra !== activeEra || withActive === true) {
        result.push(api.registry.createType('EraIndex', lastEra));
      }

      lastEra = lastEra.sub(_util.BN_ONE);
    } // go from oldest to newest


    return result.reverse();
  })));
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],99:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._erasPoints = _erasPoints;
exports.erasPoints = void 0;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

var _cache = require("./cache.js");

var _util2 = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const CACHE_KEY = 'eraPoints';

function mapValidators({
  individual
}) {
  return [...individual.entries()].filter(([, points]) => points.gt(_util.BN_ZERO)).reduce((result, [validatorId, points]) => {
    result[validatorId.toString()] = points;
    return result;
  }, {});
}

function mapPoints(eras, points) {
  return eras.map((era, index) => ({
    era,
    eraPoints: points[index].total,
    validators: mapValidators(points[index])
  }));
}

function _erasPoints(instanceId, api) {
  return (0, _index.memo)(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return (0, _rxjs.of)([]);
    }

    const cached = (0, _cache.getEraMultiCache)(CACHE_KEY, eras, withActive);
    const remaining = (0, _util2.filterEras)(eras, cached);
    return !remaining.length ? (0, _rxjs.of)(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe((0, _rxjs.map)(p => (0, _cache.filterCachedEras)(eras, cached, (0, _cache.setEraMultiCache)(CACHE_KEY, withActive, mapPoints(remaining, p)))));
  });
}

const erasPoints = (0, _util2.erasHistoricApply)('_erasPoints');
exports.erasPoints = erasPoints;

},{"../util/index.js":133,"./cache.js":94,"./util.js":115,"@polkadot/util":640,"rxjs":746}],100:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._eraPrefs = _eraPrefs;
exports.erasPrefs = exports.eraPrefs = exports._erasPrefs = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _cache = require("./cache.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const CACHE_KEY = 'eraPrefs';

function mapPrefs(era, all) {
  const validators = {};
  all.forEach(([key, prefs]) => {
    validators[key.args[1].toString()] = prefs;
  });
  return {
    era,
    validators
  };
}

function _eraPrefs(instanceId, api) {
  return (0, _index.memo)(instanceId, (era, withActive) => {
    const [cacheKey, cached] = (0, _cache.getEraCache)(CACHE_KEY, era, withActive);
    return cached ? (0, _rxjs.of)(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe((0, _rxjs.map)(r => (0, _cache.setEraCache)(cacheKey, withActive, mapPrefs(era, r))));
  });
}

const eraPrefs = (0, _util.singleEra)('_eraPrefs');
exports.eraPrefs = eraPrefs;

const _erasPrefs = (0, _util.combineEras)('_eraPrefs');

exports._erasPrefs = _erasPrefs;
const erasPrefs = (0, _util.erasHistoricApply)('_erasPrefs');
exports.erasPrefs = erasPrefs;

},{"../util/index.js":133,"./cache.js":94,"./util.js":115,"rxjs":746}],101:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._erasRewards = _erasRewards;
exports.erasRewards = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _cache = require("./cache.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const CACHE_KEY = 'eraRewards';

function mapRewards(eras, optRewards) {
  return eras.map((era, index) => ({
    era,
    eraReward: optRewards[index].unwrapOrDefault()
  }));
}

function _erasRewards(instanceId, api) {
  return (0, _index.memo)(instanceId, (eras, withActive) => {
    if (!eras.length) {
      return (0, _rxjs.of)([]);
    }

    const cached = (0, _cache.getEraMultiCache)(CACHE_KEY, eras, withActive);
    const remaining = (0, _util.filterEras)(eras, cached);

    if (!remaining.length) {
      return (0, _rxjs.of)(cached);
    }

    return api.query.staking.erasValidatorReward.multi(remaining).pipe((0, _rxjs.map)(r => (0, _cache.filterCachedEras)(eras, cached, (0, _cache.setEraMultiCache)(CACHE_KEY, withActive, mapRewards(remaining, r)))));
  });
}

const erasRewards = (0, _util.erasHistoricApply)('_erasRewards');
exports.erasRewards = erasRewards;

},{"../util/index.js":133,"./cache.js":94,"./util.js":115,"rxjs":746}],102:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._eraSlashes = _eraSlashes;
exports.erasSlashes = exports.eraSlashes = exports._erasSlashes = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _cache = require("./cache.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const CACHE_KEY = 'eraSlashes';

function mapSlashes(era, noms, vals) {
  const nominators = {};
  const validators = {};
  noms.forEach(([key, optBalance]) => {
    nominators[key.args[1].toString()] = optBalance.unwrap();
  });
  vals.forEach(([key, optRes]) => {
    validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
  });
  return {
    era,
    nominators,
    validators
  };
}

function _eraSlashes(instanceId, api) {
  return (0, _index.memo)(instanceId, (era, withActive) => {
    const [cacheKey, cached] = (0, _cache.getEraCache)(CACHE_KEY, era, withActive);
    return cached ? (0, _rxjs.of)(cached) : (0, _rxjs.combineLatest)([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe((0, _rxjs.map)(([n, v]) => (0, _cache.setEraCache)(cacheKey, withActive, mapSlashes(era, n, v))));
  });
}

const eraSlashes = (0, _util.singleEra)('_eraSlashes');
exports.eraSlashes = eraSlashes;

const _erasSlashes = (0, _util.combineEras)('_eraSlashes');

exports._erasSlashes = _erasSlashes;
const erasSlashes = (0, _util.erasHistoricApply)('_erasSlashes');
exports.erasSlashes = erasSlashes;

},{"../util/index.js":133,"./cache.js":94,"./util.js":115,"rxjs":746}],103:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _account = require("./account.js");

Object.keys(_account).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _account[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _account[key];
    }
  });
});

var _currentPoints = require("./currentPoints.js");

Object.keys(_currentPoints).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _currentPoints[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _currentPoints[key];
    }
  });
});

var _erasExposure = require("./erasExposure.js");

Object.keys(_erasExposure).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _erasExposure[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _erasExposure[key];
    }
  });
});

var _erasHistoric = require("./erasHistoric.js");

Object.keys(_erasHistoric).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _erasHistoric[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _erasHistoric[key];
    }
  });
});

var _erasPoints = require("./erasPoints.js");

Object.keys(_erasPoints).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _erasPoints[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _erasPoints[key];
    }
  });
});

var _erasPrefs = require("./erasPrefs.js");

Object.keys(_erasPrefs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _erasPrefs[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _erasPrefs[key];
    }
  });
});

var _erasRewards = require("./erasRewards.js");

Object.keys(_erasRewards).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _erasRewards[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _erasRewards[key];
    }
  });
});

var _erasSlashes = require("./erasSlashes.js");

Object.keys(_erasSlashes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _erasSlashes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _erasSlashes[key];
    }
  });
});

var _electedInfo = require("./electedInfo.js");

Object.keys(_electedInfo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _electedInfo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _electedInfo[key];
    }
  });
});

var _keys = require("./keys.js");

Object.keys(_keys).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _keys[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _keys[key];
    }
  });
});

var _overview = require("./overview.js");

Object.keys(_overview).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _overview[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _overview[key];
    }
  });
});

var _ownExposure = require("./ownExposure.js");

Object.keys(_ownExposure).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ownExposure[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ownExposure[key];
    }
  });
});

var _ownSlashes = require("./ownSlashes.js");

Object.keys(_ownSlashes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _ownSlashes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ownSlashes[key];
    }
  });
});

var _query = require("./query.js");

Object.keys(_query).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _query[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _query[key];
    }
  });
});

var _stakerExposure = require("./stakerExposure.js");

Object.keys(_stakerExposure).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stakerExposure[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stakerExposure[key];
    }
  });
});

var _stakerPoints = require("./stakerPoints.js");

Object.keys(_stakerPoints).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stakerPoints[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stakerPoints[key];
    }
  });
});

var _stakerPrefs = require("./stakerPrefs.js");

Object.keys(_stakerPrefs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stakerPrefs[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stakerPrefs[key];
    }
  });
});

var _stakerRewards = require("./stakerRewards.js");

Object.keys(_stakerRewards).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stakerRewards[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stakerRewards[key];
    }
  });
});

var _stakerSlashes = require("./stakerSlashes.js");

Object.keys(_stakerSlashes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stakerSlashes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stakerSlashes[key];
    }
  });
});

var _stashes = require("./stashes.js");

Object.keys(_stashes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _stashes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stashes[key];
    }
  });
});

var _validators = require("./validators.js");

Object.keys(_validators).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _validators[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _validators[key];
    }
  });
});

var _waitingInfo = require("./waitingInfo.js");

Object.keys(_waitingInfo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _waitingInfo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waitingInfo[key];
    }
  });
});

},{"./account.js":93,"./currentPoints.js":95,"./electedInfo.js":96,"./erasExposure.js":97,"./erasHistoric.js":98,"./erasPoints.js":99,"./erasPrefs.js":100,"./erasRewards.js":101,"./erasSlashes.js":102,"./keys.js":104,"./overview.js":105,"./ownExposure.js":106,"./ownSlashes.js":107,"./query.js":108,"./stakerExposure.js":109,"./stakerPoints.js":110,"./stakerPrefs.js":111,"./stakerRewards.js":112,"./stakerSlashes.js":113,"./stashes.js":114,"./validators.js":116,"./waitingInfo.js":117}],104:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keys = void 0;
exports.keysMulti = keysMulti;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function extractsIds(stashId, queuedKeys, nextKeys) {
  const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
  const nextSessionIds = nextKeys.unwrapOr([]);
  return {
    nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [...nextSessionIds.values()],
    sessionIds: Array.isArray(sessionIds) ? sessionIds : [...sessionIds.values()]
  };
}

const keys = (0, _index.firstMemo)((api, stashId) => api.derive.staking.keysMulti([stashId]));
exports.keys = keys;

function keysMulti(instanceId, api) {
  return (0, _index.memo)(instanceId, stashIds => stashIds.length ? api.query.session.queuedKeys().pipe((0, _rxjs.switchMap)(queuedKeys => {
    var _api$consts$session;

    return (0, _rxjs.combineLatest)([(0, _rxjs.of)(queuedKeys), (_api$consts$session = api.consts.session) !== null && _api$consts$session !== void 0 && _api$consts$session.dedupKeyPrefix ? api.query.session.nextKeys.multi(stashIds.map(stashId => [api.consts.session.dedupKeyPrefix, stashId])) : api.query.session.nextKeys.multi(stashIds)]);
  }), (0, _rxjs.map)(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : (0, _rxjs.of)([]));
}

},{"../util/index.js":133,"rxjs":746}],105:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.overview = overview;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @description Retrieve the staking overview, including elected and points earned
 */
function overview(instanceId, api) {
  return (0, _index.memo)(instanceId, () => (0, _rxjs.combineLatest)([api.derive.session.indexes(), api.derive.staking.validators()]).pipe((0, _rxjs.map)(([indexes, {
    nextElected,
    validators
  }]) => ({ ...indexes,
    nextElected,
    validators
  }))));
}

},{"../util/index.js":133,"rxjs":746}],106:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._ownExposures = _ownExposures;
exports.ownExposures = exports.ownExposure = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function _ownExposures(instanceId, api) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  return (0, _index.memo)(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(e => [api.query.staking.erasStakersClipped, [e, accountId]]), ...eras.map(e => [api.query.staking.erasStakers, [e, accountId]])]).pipe((0, _rxjs.map)(all => eras.map((era, index) => ({
    clipped: all[index],
    era,
    exposure: all[eras.length + index]
  })))) : (0, _rxjs.of)([]));
}

const ownExposure = (0, _index.firstMemo)((api, accountId, era) => api.derive.staking._ownExposures(accountId, [era], true));
exports.ownExposure = ownExposure;
const ownExposures = (0, _util.erasHistoricApplyAccount)('_ownExposures');
exports.ownExposures = ownExposures;

},{"../util/index.js":133,"./util.js":115,"rxjs":746}],107:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._ownSlashes = _ownSlashes;
exports.ownSlashes = exports.ownSlash = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function _ownSlashes(instanceId, api) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  return (0, _index.memo)(instanceId, (accountId, eras, _withActive) => eras.length ? api.queryMulti([...eras.map(e => [api.query.staking.validatorSlashInEra, [e, accountId]]), ...eras.map(e => [api.query.staking.nominatorSlashInEra, [e, accountId]])]).pipe((0, _rxjs.map)(values => eras.map((era, index) => ({
    era,
    total: values[index].isSome ? values[index].unwrap()[1] : values[index + eras.length].unwrapOrDefault()
  })))) : (0, _rxjs.of)([]));
}

const ownSlash = (0, _index.firstMemo)((api, accountId, era) => api.derive.staking._ownSlashes(accountId, [era], true));
exports.ownSlash = ownSlash;
const ownSlashes = (0, _util.erasHistoricApplyAccount)('_ownSlashes');
exports.ownSlashes = ownSlashes;

},{"../util/index.js":133,"./util.js":115,"rxjs":746}],108:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.query = void 0;
exports.queryMulti = queryMulti;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
  return {
    accountId: stashId,
    controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
    exposure,
    nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
    rewardDestination,
    stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
    stashId,
    validatorPrefs
  };
}

function getLedgers(api, optIds, {
  withLedger = false
}) {
  const ids = optIds.filter(o => withLedger && !!o && o.isSome).map(o => o.unwrap());
  const emptyLed = api.registry.createType('Option<StakingLedger>');
  return (ids.length ? api.query.staking.ledger.multi(ids) : (0, _rxjs.of)([])).pipe((0, _rxjs.map)(optLedgers => {
    let offset = -1;
    return optIds.map(opt => opt && opt.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
  }));
}

function getStashInfo(api, stashIds, activeEra, {
  withController,
  withDestination,
  withExposure,
  withLedger,
  withNominations,
  withPrefs
}) {
  const emptyNoms = api.registry.createType('Option<Nominations>');
  const emptyRewa = api.registry.createType('RewardDestination');
  const emptyExpo = api.registry.createType('Exposure');
  const emptyPrefs = api.registry.createType('ValidatorPrefs');
  return (0, _rxjs.combineLatest)([withController || withLedger ? api.query.staking.bonded.multi(stashIds) : (0, _rxjs.of)(stashIds.map(() => null)), withNominations ? api.query.staking.nominators.multi(stashIds) : (0, _rxjs.of)(stashIds.map(() => emptyNoms)), withDestination ? api.query.staking.payee.multi(stashIds) : (0, _rxjs.of)(stashIds.map(() => emptyRewa)), withPrefs ? api.query.staking.validators.multi(stashIds) : (0, _rxjs.of)(stashIds.map(() => emptyPrefs)), withExposure ? api.query.staking.erasStakers.multi(stashIds.map(stashId => [activeEra, stashId])) : (0, _rxjs.of)(stashIds.map(() => emptyExpo))]);
}

function getBatch(api, activeEra, stashIds, flags) {
  return getStashInfo(api, stashIds, activeEra, flags).pipe((0, _rxjs.switchMap)(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe((0, _rxjs.map)(stakingLedgerOpts => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
} //

/**
 * @description From a stash, retrieve the controllerId and all relevant details
 */


const query = (0, _index.firstMemo)((api, accountId, flags) => api.derive.staking.queryMulti([accountId], flags));
exports.query = query;

function queryMulti(instanceId, api) {
  return (0, _index.memo)(instanceId, (accountIds, flags) => accountIds.length ? api.derive.session.indexes().pipe((0, _rxjs.switchMap)(({
    activeEra
  }) => {
    const stashIds = accountIds.map(accountId => api.registry.createType('AccountId', accountId));
    return getBatch(api, activeEra, stashIds, flags);
  })) : (0, _rxjs.of)([]));
}

},{"../util/index.js":133,"rxjs":746}],109:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._stakerExposures = _stakerExposures;
exports.stakerExposure = void 0;
exports.stakerExposures = stakerExposures;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function _stakerExposures(instanceId, api) {
  return (0, _index.memo)(instanceId, (accountIds, eras, withActive = false) => {
    const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());
    return api.derive.staking._erasExposure(eras, withActive).pipe((0, _rxjs.map)(exposures => stakerIds.map(stakerId => exposures.map(({
      era,
      nominators: allNominators,
      validators: allValidators
    }) => {
      const isValidator = !!allValidators[stakerId];
      const validators = {};
      const nominating = allNominators[stakerId] || [];

      if (isValidator) {
        validators[stakerId] = allValidators[stakerId];
      } else if (nominating) {
        nominating.forEach(({
          validatorId
        }) => {
          validators[validatorId] = allValidators[validatorId];
        });
      }

      return {
        era,
        isEmpty: !Object.keys(validators).length,
        isValidator,
        nominating,
        validators
      };
    }))));
  });
}

function stakerExposures(instanceId, api) {
  return (0, _index.memo)(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
}

const stakerExposure = (0, _index.firstMemo)((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));
exports.stakerExposure = stakerExposure;

},{"../util/index.js":133,"rxjs":746}],110:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._stakerPoints = _stakerPoints;
exports.stakerPoints = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function _stakerPoints(instanceId, api) {
  return (0, _index.memo)(instanceId, (accountId, eras, withActive) => {
    const stakerId = api.registry.createType('AccountId', accountId).toString();
    return api.derive.staking._erasPoints(eras, withActive).pipe((0, _rxjs.map)(points => points.map(({
      era,
      eraPoints,
      validators
    }) => ({
      era,
      eraPoints,
      points: validators[stakerId] || api.registry.createType('RewardPoint')
    }))));
  });
}

const stakerPoints = (0, _util.erasHistoricApplyAccount)('_stakerPoints');
exports.stakerPoints = stakerPoints;

},{"../util/index.js":133,"./util.js":115,"rxjs":746}],111:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._stakerPrefs = _stakerPrefs;
exports.stakerPrefs = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function _stakerPrefs(instanceId, api) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  return (0, _index.memo)(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map(e => [e, accountId])).pipe((0, _rxjs.map)(all => all.map((validatorPrefs, index) => ({
    era: eras[index],
    validatorPrefs
  })))));
}

const stakerPrefs = (0, _util.erasHistoricApplyAccount)('_stakerPrefs');
exports.stakerPrefs = stakerPrefs;

},{"../util/index.js":133,"./util.js":115,"rxjs":746}],112:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._stakerRewards = _stakerRewards;
exports._stakerRewardsEras = _stakerRewardsEras;
exports.stakerRewards = void 0;
exports.stakerRewardsMulti = stakerRewardsMulti;
exports.stakerRewardsMultiEras = stakerRewardsMultiEras;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
  return exposures.map(({
    era,
    isEmpty,
    isValidator,
    nominating,
    validators: eraValidators
  }) => {
    const {
      eraPoints,
      validators: allValPoints
    } = erasPoints.find(p => p.era.eq(era)) || {
      eraPoints: _util.BN_ZERO,
      validators: {}
    };
    const {
      eraReward
    } = erasRewards.find(r => r.era.eq(era)) || {
      eraReward: api.registry.createType('Balance')
    };
    const {
      validators: allValPrefs
    } = erasPrefs.find(p => p.era.eq(era)) || {
      validators: {}
    };
    const validators = {};
    const stakerId = stashId.toString();
    Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
      var _allValPrefs$validato, _exposure$total;

      const valPoints = allValPoints[validatorId] || _util.BN_ZERO;
      const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || _util.BN_ZERO;
      const expTotal = ((_exposure$total = exposure.total) === null || _exposure$total === void 0 ? void 0 : _exposure$total.unwrap()) || _util.BN_ZERO;
      let avail = _util.BN_ZERO;
      let value;

      if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
        avail = eraReward.mul(valPoints).div(eraPoints);
        const valCut = valComm.mul(avail).div(_util.BN_BILLION);
        let staked;

        if (validatorId === stakerId) {
          staked = exposure.own.unwrap();
        } else {
          const stakerExp = exposure.others.find(({
            who
          }) => who.eq(stakerId));
          staked = stakerExp ? stakerExp.value.unwrap() : _util.BN_ZERO;
        }

        value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : _util.BN_ZERO);
      }

      validators[validatorId] = {
        total: api.registry.createType('Balance', avail),
        value: api.registry.createType('Balance', value)
      };
    });
    return {
      era,
      eraReward,
      isEmpty,
      isValidator,
      nominating,
      validators
    };
  });
}

function allUniqValidators(rewards) {
  return rewards.reduce(([all, perStash], rewards) => {
    const uniq = [];
    perStash.push(uniq);
    rewards.forEach(({
      validators
    }) => Object.keys(validators).forEach(validatorId => {
      if (!uniq.includes(validatorId)) {
        uniq.push(validatorId);

        if (!all.includes(validatorId)) {
          all.push(validatorId);
        }
      }
    }));
    return [all, perStash];
  }, [[], []]);
}

function removeClaimed(validators, queryValidators, reward) {
  const rm = [];
  Object.keys(reward.validators).forEach(validatorId => {
    const index = validators.indexOf(validatorId);

    if (index !== -1) {
      const valLedger = queryValidators[index].stakingLedger;

      if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(e => reward.era.eq(e))) {
        rm.push(validatorId);
      }
    }
  });
  rm.forEach(validatorId => {
    delete reward.validators[validatorId];
  });
}

function filterRewards(eras, valInfo, {
  rewards,
  stakingLedger
}) {
  const filter = eras.filter(e => !stakingLedger.claimedRewards.some(s => s.eq(e)));
  const validators = valInfo.map(([v]) => v);
  const queryValidators = valInfo.map(([, q]) => q);
  return rewards.filter(({
    isEmpty
  }) => !isEmpty).filter(reward => {
    if (!filter.some(e => reward.era.eq(e))) {
      return false;
    }

    removeClaimed(validators, queryValidators, reward);
    return true;
  }).filter(({
    validators
  }) => Object.keys(validators).length !== 0).map(reward => ({ ...reward,
    nominators: reward.nominating.filter(n => reward.validators[n.validatorId])
  }));
}

function _stakerRewardsEras(instanceId, api) {
  return (0, _index.memo)(instanceId, (eras, withActive = false) => (0, _rxjs.combineLatest)([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));
}

function _stakerRewards(instanceId, api) {
  return (0, _index.memo)(instanceId, (accountIds, eras, withActive = false) => (0, _rxjs.combineLatest)([api.derive.staking.queryMulti(accountIds, {
    withLedger: true
  }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe((0, _rxjs.switchMap)(([queries, exposures, erasResult]) => {
    const allRewards = queries.map(({
      stakingLedger,
      stashId
    }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));

    if (withActive) {
      return (0, _rxjs.of)(allRewards);
    }

    const [allValidators, stashValidators] = allUniqValidators(allRewards);
    return api.derive.staking.queryMulti(allValidators, {
      withLedger: true
    }).pipe((0, _rxjs.map)(queriedVals => queries.map(({
      stakingLedger
    }, index) => filterRewards(eras, stashValidators[index].map(validatorId => [validatorId, queriedVals.find(q => q.accountId.eq(validatorId))]), {
      rewards: allRewards[index],
      stakingLedger
    }))));
  })));
}

const stakerRewards = (0, _index.firstMemo)((api, accountId, withActive) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking._stakerRewards([accountId], eras, withActive))));
exports.stakerRewards = stakerRewards;

function stakerRewardsMultiEras(instanceId, api) {
  return (0, _index.memo)(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : (0, _rxjs.of)([]));
}

function stakerRewardsMulti(instanceId, api) {
  return (0, _index.memo)(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
}

},{"../util/index.js":133,"@polkadot/util":640,"rxjs":746}],113:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._stakerSlashes = _stakerSlashes;
exports.stakerSlashes = void 0;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function _stakerSlashes(instanceId, api) {
  return (0, _index.memo)(instanceId, (accountId, eras, withActive) => {
    const stakerId = api.registry.createType('AccountId', accountId).toString();
    return api.derive.staking._erasSlashes(eras, withActive).pipe((0, _rxjs.map)(slashes => slashes.map(({
      era,
      nominators,
      validators
    }) => ({
      era,
      total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
    }))));
  });
}

const stakerSlashes = (0, _util.erasHistoricApplyAccount)('_stakerSlashes');
exports.stakerSlashes = stakerSlashes;

},{"../util/index.js":133,"./util.js":115,"rxjs":746}],114:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stashes = stashes;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function onBondedEvent(api) {
  let current = Date.now();
  return api.query.system.events().pipe((0, _rxjs.map)(events => {
    current = events.filter(({
      event,
      phase
    }) => {
      try {
        return phase.isApplyExtrinsic && event.section === 'staking' && event.method === 'Bonded';
      } catch {
        return false;
      }
    }) ? Date.now() : current;
    return current;
  }), (0, _rxjs.startWith)(current), (0, _index.drr)({
    skipTimeout: true
  }));
}
/**
 * @description Retrieve the list of all validator stashes
 */


function stashes(instanceId, api) {
  return (0, _index.memo)(instanceId, () => onBondedEvent(api).pipe((0, _rxjs.switchMap)(() => api.query.staking.validators.keys()), (0, _rxjs.map)(keys => keys.map(({
    args: [validatorId]
  }) => validatorId).filter(a => a))));
}

},{"../util/index.js":133,"rxjs":746}],115:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineEras = combineEras;
exports.erasHistoricApply = erasHistoricApply;
exports.erasHistoricApplyAccount = erasHistoricApplyAccount;
exports.filterEras = filterEras;
exports.singleEra = singleEra;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function filterEras(eras, list) {
  return eras.filter(e => !list.some(({
    era
  }) => e.eq(era)));
}

function erasHistoricApply(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  (0, _index.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(e => api.derive.staking[fn](e, withActive))));
}

function erasHistoricApplyAccount(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  (0, _index.memo)(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _rxjs.switchMap)(e => api.derive.staking[fn](accountId, e, withActive))));
}

function singleEra(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  (0, _index.memo)(instanceId, era => api.derive.staking[fn](era, true));
}

function combineEras(fn) {
  return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  (0, _index.memo)(instanceId, (eras, withActive) => // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  eras.length ? (0, _rxjs.combineLatest)(eras.map(e => api.derive.staking[fn](e, withActive))) : (0, _rxjs.of)([]));
}

},{"../util/index.js":133,"rxjs":746}],116:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nextElected = nextElected;
exports.validators = validators;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function nextElected(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe( // only populate for next era in the last session, so track both here - entries are not
  // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
  (0, _rxjs.switchMap)(({
    currentEra
  }) => api.query.staking.erasStakers.keys(currentEra)), (0, _rxjs.map)(keys => keys.map(({
    args: [, accountId]
  }) => accountId))) : api.query.staking.currentElected());
}
/**
 * @description Retrieve latest list of validators
 */


function validators(instanceId, api) {
  return (0, _index.memo)(instanceId, () => // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
  // in all actual real-world deployed chains, it does create some confusion for limited template chains
  (0, _rxjs.combineLatest)([api.query.session ? api.query.session.validators() : (0, _rxjs.of)([]), api.query.staking ? api.derive.staking.nextElected() : (0, _rxjs.of)([])]).pipe((0, _rxjs.map)(([validators, nextElected]) => ({
    nextElected: nextElected.length ? nextElected : validators,
    validators
  }))));
}

},{"../util/index.js":133,"rxjs":746}],117:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.waitingInfo = waitingInfo;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_FLAGS = {
  withController: true,
  withPrefs: true
};

function waitingInfo(instanceId, api) {
  return (0, _index.memo)(instanceId, (flags = DEFAULT_FLAGS) => (0, _rxjs.combineLatest)([api.derive.staking.validators(), api.derive.staking.stashes()]).pipe((0, _rxjs.switchMap)(([{
    nextElected
  }, stashes]) => {
    const elected = nextElected.map(a => a.toString());
    const waiting = stashes.filter(v => !elected.includes(v.toString()));
    return api.derive.staking.queryMulti(waiting, flags).pipe((0, _rxjs.map)(info => ({
      info,
      waiting
    })));
  })));
}

},{"../util/index.js":133,"rxjs":746}],118:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proposals = exports.proposalHashes = exports.proposalCount = exports.proposal = exports.prime = exports.members = exports.hasProposals = void 0;

var _index = require("../collective/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const members = (0, _index.members)('technicalCommittee');
exports.members = members;
const hasProposals = (0, _index.hasProposals)('technicalCommittee');
exports.hasProposals = hasProposals;
const proposal = (0, _index.proposal)('technicalCommittee');
exports.proposal = proposal;
const proposalCount = (0, _index.proposalCount)('technicalCommittee');
exports.proposalCount = proposalCount;
const proposalHashes = (0, _index.proposalHashes)('technicalCommittee');
exports.proposalHashes = proposalHashes;
const proposals = (0, _index.proposals)('technicalCommittee');
exports.proposals = proposals;
const prime = (0, _index.prime)('technicalCommittee');
exports.prime = prime;

},{"../collective/index.js":44}],119:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _proposals = require("./proposals.js");

Object.keys(_proposals).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _proposals[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _proposals[key];
    }
  });
});

},{"./proposals.js":120}],120:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.proposals = proposals;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function parseResult(api, {
  allIds,
  allProposals,
  approvalIds,
  councilProposals,
  proposalCount
}) {
  const approvals = [];
  const proposals = [];
  const councilTreasury = councilProposals.filter(({
    proposal
  }) => api.tx.treasury.approveProposal.is(proposal) || api.tx.treasury.rejectProposal.is(proposal));
  allIds.forEach((id, index) => {
    if (allProposals[index].isSome) {
      const council = councilTreasury.filter(({
        proposal
      }) => id.eq(proposal.args[0])).sort((a, b) => a.proposal.method.localeCompare(b.proposal.method));
      const isApproval = approvalIds.some(approvalId => approvalId.eq(id));
      const derived = {
        council,
        id,
        proposal: allProposals[index].unwrap()
      };

      if (isApproval) {
        approvals.push(derived);
      } else {
        proposals.push(derived);
      }
    }
  });
  return {
    approvals,
    proposalCount,
    proposals
  };
}

function retrieveProposals(api, proposalCount, approvalIds) {
  const proposalIds = [];
  const count = proposalCount.toNumber();

  for (let index = 0; index < count; index++) {
    if (!approvalIds.some(id => id.eqn(index))) {
      proposalIds.push(api.registry.createType('ProposalIndex', index));
    }
  }

  const allIds = [...proposalIds, ...approvalIds];
  return (0, _rxjs.combineLatest)([api.query.treasury.proposals.multi(allIds), api.derive.council ? api.derive.council.proposals() : (0, _rxjs.of)([])]).pipe((0, _rxjs.map)(([allProposals, councilProposals]) => parseResult(api, {
    allIds,
    allProposals,
    approvalIds,
    councilProposals,
    proposalCount
  })));
}
/**
 * @description Retrieve all active and approved treasury proposals, along with their info
 */


function proposals(instanceId, api) {
  return (0, _index.memo)(instanceId, () => api.query.treasury ? (0, _rxjs.combineLatest)([api.query.treasury.proposalCount(), api.query.treasury.approvals()]).pipe((0, _rxjs.switchMap)(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds))) : (0, _rxjs.of)({
    approvals: [],
    proposalCount: api.registry.createType('ProposalIndex'),
    proposals: []
  }));
}

},{"../util/index.js":133,"rxjs":746}],121:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MORTAL_PERIOD = exports.MAX_FINALITY_LAG = exports.FALLBACK_PERIOD = exports.FALLBACK_MAX_HASH_COUNT = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const FALLBACK_MAX_HASH_COUNT = 250; // default here to 5 min eras, adjusted based on the actual blocktime

exports.FALLBACK_MAX_HASH_COUNT = FALLBACK_MAX_HASH_COUNT;
const FALLBACK_PERIOD = new _util.BN(6 * 1000);
exports.FALLBACK_PERIOD = FALLBACK_PERIOD;
const MAX_FINALITY_LAG = new _util.BN(5);
exports.MAX_FINALITY_LAG = MAX_FINALITY_LAG;
const MORTAL_PERIOD = new _util.BN(5 * 60 * 1000);
exports.MORTAL_PERIOD = MORTAL_PERIOD;

},{"@polkadot/util":640}],122:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.events = events;

var _rxjs = require("rxjs");

var _index = require("../util/index.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function events(instanceId, api) {
  return (0, _index.memo)(instanceId, blockHash => (0, _rxjs.combineLatest)([api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe((0, _rxjs.switchMap)(queryAt => queryAt.system.events()))]).pipe((0, _rxjs.map)(([block, events]) => ({
    block,
    events
  }))));
}

},{"../util/index.js":133,"rxjs":746}],123:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _events = require("./events.js");

Object.keys(_events).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _events[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _events[key];
    }
  });
});

var _signingInfo = require("./signingInfo.js");

Object.keys(_signingInfo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _signingInfo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _signingInfo[key];
    }
  });
});

},{"./events.js":122,"./signingInfo.js":124}],124:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signingInfo = signingInfo;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _constants = require("./constants.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function latestNonce(api, address) {
  return api.derive.balances.account(address).pipe((0, _rxjs.map)(({
    accountNonce
  }) => accountNonce));
}

function nextNonce(api, address) {
  var _api$rpc$system;

  return (_api$rpc$system = api.rpc.system) !== null && _api$rpc$system !== void 0 && _api$rpc$system.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
}

function signingHeader(api) {
  return (0, _rxjs.combineLatest)([api.rpc.chain.getHeader().pipe((0, _rxjs.switchMap)(header => // check for chains at genesis (until block 1 is produced, e.g. 6s), since
  // we do need to allow transactions at chain start (also dev/seal chains)
  header.parentHash.isEmpty ? (0, _rxjs.of)(header) // in the case of the current block, we use the parent to minimize the
  // impact of forks on the system, but not completely remove it
  : api.rpc.chain.getHeader(header.parentHash))), api.rpc.chain.getFinalizedHead().pipe((0, _rxjs.switchMap)(hash => api.rpc.chain.getHeader(hash)))]).pipe((0, _rxjs.map)(([current, finalized]) => // determine the hash to use, current when lag > max, else finalized
  current.number.unwrap().sub(finalized.number.unwrap()).gt(_constants.MAX_FINALITY_LAG) ? current : finalized));
}

function signingInfo(_instanceId, api) {
  // no memo, we want to do this fresh on each run
  return (address, nonce, era) => (0, _rxjs.combineLatest)([// retrieve nonce if none was specified
  (0, _util.isUndefined)(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : (0, _rxjs.of)(api.registry.createType('Index', nonce)), // if no era (create) or era > 0 (mortal), do block retrieval
  (0, _util.isUndefined)(era) || (0, _util.isNumber)(era) && era > 0 ? signingHeader(api) : (0, _rxjs.of)(null)]).pipe((0, _rxjs.map)(([nonce, header]) => {
    var _api$consts$system, _api$consts$system$bl, _api$consts$babe, _api$consts$timestamp;

    return {
      header,
      mortalLength: Math.min(((_api$consts$system = api.consts.system) === null || _api$consts$system === void 0 ? void 0 : (_api$consts$system$bl = _api$consts$system.blockHashCount) === null || _api$consts$system$bl === void 0 ? void 0 : _api$consts$system$bl.toNumber()) || _constants.FALLBACK_MAX_HASH_COUNT, _constants.MORTAL_PERIOD.div(((_api$consts$babe = api.consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.expectedBlockTime) || ((_api$consts$timestamp = api.consts.timestamp) === null || _api$consts$timestamp === void 0 ? void 0 : _api$consts$timestamp.minimumPeriod.muln(2)) || _constants.FALLBACK_PERIOD).iadd(_constants.MAX_FINALITY_LAG).toNumber()),
      nonce
    };
  }));
}

},{"./constants.js":121,"@polkadot/util":640,"rxjs":746}],125:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createHeaderExtended = createHeaderExtended;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("./util.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function createHeaderExtended(registry, header, validators) {
  // an instance of the base extrinsic for us to extend
  const HeaderBase = registry.createClass('Header');

  var _author = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("author");

  var _validators = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("validators");

  class Implementation extends HeaderBase {
    constructor(registry, header, validators) {
      super(registry, header);
      Object.defineProperty(this, _author, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _validators, {
        writable: true,
        value: void 0
      });
      (0, _classPrivateFieldLooseBase2.default)(this, _author)[_author] = (0, _util.extractAuthor)(this.digest, validators);
      (0, _classPrivateFieldLooseBase2.default)(this, _validators)[_validators] = validators;
      this.createdAtHash = header === null || header === void 0 ? void 0 : header.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */


    get author() {
      return (0, _classPrivateFieldLooseBase2.default)(this, _author)[_author];
    }
    /**
     * @description Convenience method, returns the validators for the block
     */


    get validators() {
      return (0, _classPrivateFieldLooseBase2.default)(this, _validators)[_validators];
    }

  }

  return new Implementation(registry, header, validators);
}

},{"./util.js":128,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2}],126:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSignedBlockExtended = createSignedBlockExtended;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("./util.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function mapExtrinsics(extrinsics, records) {
  return extrinsics.map((extrinsic, index) => {
    let dispatchError;
    let dispatchInfo;
    const events = records.filter(({
      phase
    }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({
      event
    }) => {
      if (event.section === 'system') {
        if (event.method === 'ExtrinsicSuccess') {
          dispatchInfo = event.data[0];
        } else if (event.method === 'ExtrinsicFailed') {
          dispatchError = event.data[0];
          dispatchInfo = event.data[1];
        }
      }

      return event;
    });
    return {
      dispatchError,
      dispatchInfo,
      events,
      extrinsic
    };
  });
}

function createSignedBlockExtended(registry, block, events, validators) {
  // an instance of the base extrinsic for us to extend
  const SignedBlockBase = registry.createClass('SignedBlock');

  var _author = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("author");

  var _events = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("events");

  var _extrinsics = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extrinsics");

  class Implementation extends SignedBlockBase {
    constructor(registry, block, events, validators) {
      super(registry, block);
      Object.defineProperty(this, _author, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _events, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _extrinsics, {
        writable: true,
        value: void 0
      });
      (0, _classPrivateFieldLooseBase2.default)(this, _author)[_author] = (0, _util.extractAuthor)(this.block.header.digest, validators);
      (0, _classPrivateFieldLooseBase2.default)(this, _events)[_events] = events || [];
      (0, _classPrivateFieldLooseBase2.default)(this, _extrinsics)[_extrinsics] = mapExtrinsics(this.block.extrinsics, (0, _classPrivateFieldLooseBase2.default)(this, _events)[_events]);
      this.createdAtHash = block === null || block === void 0 ? void 0 : block.createdAtHash;
    }
    /**
     * @description Convenience method, returns the author for the block
     */


    get author() {
      return (0, _classPrivateFieldLooseBase2.default)(this, _author)[_author];
    }
    /**
     * @description Convenience method, returns the events associated with the block
     */


    get events() {
      return (0, _classPrivateFieldLooseBase2.default)(this, _events)[_events];
    }
    /**
     * @description Returns the extrinsics and their events, mapped
     */


    get extrinsics() {
      return (0, _classPrivateFieldLooseBase2.default)(this, _extrinsics)[_extrinsics];
    }

  }

  return new Implementation(registry, block, events, validators);
}

},{"./util.js":128,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2}],127:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "createHeaderExtended", {
  enumerable: true,
  get: function () {
    return _HeaderExtended.createHeaderExtended;
  }
});
Object.defineProperty(exports, "createSignedBlockExtended", {
  enumerable: true,
  get: function () {
    return _SignedBlockExtended.createSignedBlockExtended;
  }
});

var _HeaderExtended = require("./HeaderExtended.js");

var _SignedBlockExtended = require("./SignedBlockExtended.js");

},{"./HeaderExtended.js":125,"./SignedBlockExtended.js":126}],128:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractAuthor = extractAuthor;

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function extractAuthor(digest, sessionValidators = []) {
  const [citem] = digest.logs.filter(e => e.isConsensus);
  const [pitem] = digest.logs.filter(e => e.isPreRuntime);
  const [sitem] = digest.logs.filter(e => e.isSeal);
  let accountId;

  try {
    // This is critical to be first for BABE (before Consensus)
    // If not first, we end up dropping the author at session-end
    if (pitem) {
      const [engine, data] = pitem.asPreRuntime;
      accountId = engine.extractAuthor(data, sessionValidators);
    }

    if (!accountId && citem) {
      const [engine, data] = citem.asConsensus;
      accountId = engine.extractAuthor(data, sessionValidators);
    } // SEAL, still used in e.g. Kulupu for pow


    if (!accountId && sitem) {
      const [engine, data] = sitem.asSeal;
      accountId = engine.extractAuthor(data, sessionValidators);
    }
  } catch {// ignore
  }

  return accountId;
}

},{}],129:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.approvalFlagsToBools = approvalFlagsToBools;

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function approvalFlagsToBools(flags) {
  const bools = [];

  for (let i = 0; i < flags.length; i++) {
    const str = flags[i].toString(2); // read from lowest bit to highest

    for (const bit of str.split('').reverse()) {
      bools.push(!!parseInt(bit, 10));
    }
  } // slice off trailing "false" values, as in substrate


  const lastApproval = bools.lastIndexOf(true);
  return lastApproval >= 0 ? bools.slice(0, lastApproval + 1) : [];
}

},{}],130:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deriveCache = void 0;
exports.setDeriveCache = setDeriveCache;

var _cacheImpl = require("./cacheImpl.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
let deriveCache;
exports.deriveCache = deriveCache;

function wrapCache(keyStart, cache) {
  return {
    del: partial => cache.del(`${keyStart}${partial}`),
    forEach: cache.forEach,
    get: partial => {
      const key = `${keyStart}${partial}`;
      const cached = cache.get(key);

      if (cached) {
        cached.x = Date.now();
        cache.set(key, cached);
        return cached.v;
      }

      return undefined;
    },
    set: (partial, v) => {
      cache.set(`${keyStart}${partial}`, {
        v,
        x: Date.now()
      });
    }
  };
}

function clearCache(cache) {
  // clear all expired values
  const now = Date.now();
  const all = [];
  cache.forEach((key, {
    x
  }) => {
    now - x > CHACHE_EXPIRY && all.push(key);
  }); // don't do delete inside loop, just in-case

  all.forEach(key => cache.del(key));
}

function setDeriveCache(prefix = '', cache) {
  exports.deriveCache = deriveCache = cache ? wrapCache(`derive:${prefix}:`, cache) : _cacheImpl.deriveNoopCache;

  if (cache) {
    clearCache(cache);
  }
}

setDeriveCache();

},{"./cacheImpl.js":131}],131:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deriveNoopCache = exports.deriveMapCache = void 0;
// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
const mapCache = new Map();
const deriveMapCache = {
  del: key => {
    mapCache.delete(key);
  },
  forEach: cb => {
    for (const [k, v] of mapCache.entries()) {
      cb(k, v);
    }
  },
  get: key => {
    return mapCache.get(key);
  },
  set: (key, value) => {
    mapCache.set(key, value);
  }
};
exports.deriveMapCache = deriveMapCache;
const deriveNoopCache = {
  del: () => undefined,
  forEach: () => undefined,
  get: () => undefined,
  set: (_, value) => value
};
exports.deriveNoopCache = deriveNoopCache;

},{}],132:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.firstMemo = firstMemo;
exports.firstObservable = firstObservable;

var _rxjs = require("rxjs");

var _rpcCore = require("@polkadot/rpc-core");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// We are re-exporting these from here to ensure that *.d.ts generation is correct
function firstObservable(obs) {
  return obs.pipe((0, _rxjs.map)(([a]) => a));
}

function firstMemo(fn) {
  return (instanceId, api) => (0, _rpcCore.memo)(instanceId, (...args) => firstObservable(fn(api, ...args)));
}

},{"@polkadot/rpc-core":185,"rxjs":746}],133:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  drr: true,
  memo: true
};
Object.defineProperty(exports, "drr", {
  enumerable: true,
  get: function () {
    return _rpcCore.drr;
  }
});
Object.defineProperty(exports, "memo", {
  enumerable: true,
  get: function () {
    return _rpcCore.memo;
  }
});

var _rpcCore = require("@polkadot/rpc-core");

var _approvalFlagsToBools = require("./approvalFlagsToBools.js");

Object.keys(_approvalFlagsToBools).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _approvalFlagsToBools[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _approvalFlagsToBools[key];
    }
  });
});

var _cache = require("./cache.js");

Object.keys(_cache).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _cache[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _cache[key];
    }
  });
});

var _cacheImpl = require("./cacheImpl.js");

Object.keys(_cacheImpl).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _cacheImpl[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _cacheImpl[key];
    }
  });
});

var _first = require("./first.js");

Object.keys(_first).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _first[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _first[key];
    }
  });
});

},{"./approvalFlagsToBools.js":129,"./cache.js":130,"./cacheImpl.js":131,"./first.js":132,"@polkadot/rpc-core":185}],134:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lazyDeriveSection = lazyDeriveSection;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
function lazyDeriveSection(result, section, getKeys, creator) {
  (0, _util.lazyMethod)(result, section, () => (0, _util.lazyMethods)({}, getKeys(section), method => creator(section, method)));
}

},{"@polkadot/util":640}],135:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Decorate = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _rxjs = require("rxjs");

var _apiDerive = require("@polkadot/api-derive");

var _rpcCore = require("@polkadot/rpc-core");

var _rpcProvider = require("@polkadot/rpc-provider");

var _types = require("@polkadot/types");

var _util = require("@polkadot/util");

var _index = require("../submittable/index.js");

var _augmentObject = require("../util/augmentObject.js");

var _decorate = require("../util/decorate.js");

var _validate = require("../util/validate.js");

var _Events = require("./Events.js");

var _find = require("./find.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
// the max amount of keys/values that we will retrieve at once
const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)

const PAGE_SIZE_V = 250; // limited since the data may be very large (e.g. misfiring elections)

const l = (0, _util.logger)('api/init');
let instanceCounter = 0;

function getAtQueryFn(api, {
  method,
  section
}) {
  (0, _util.assert)(api.rx.query[section] && api.rx.query[section][method], () => `query.${section}.${method} is not available in this version of the metadata`);
  return api.rx.query[section][method];
}

var _instanceId = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("instanceId");

var _registry = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("registry");

class Decorate extends _Events.Events {
  // HACK Use BN import so decorateDerive works... yes, wtf.
  // latest extrinsic version

  /**
   * This is the one and only method concrete children classes need to implement.
   * It's a higher-order function, which takes one argument
   * `method: Method extends (...args: any[]) => Observable<any>`
   * (and one optional `options`), and should return the user facing method.
   * For example:
   * - For ApiRx, `decorateMethod` should just be identity, because the input
   * function is already an Observable
   * - For ApiPromise, `decorateMethod` should return a function that takes all
   * the parameters from `method`, adds an optional `callback` argument, and
   * returns a Promise.
   *
   * We could easily imagine other user-facing interfaces, which are simply
   * implemented by transforming the Observable to Stream/Iterator/Kefir/Bacon
   * via `decorateMethod`.
   */

  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options, type, decorateMethod) {
    var _options$source;

    super();
    Object.defineProperty(this, _instanceId, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _registry, {
      writable: true,
      value: void 0
    });
    this.__phantom = new _util.BN(0);
    this._consts = {};
    this._derive = void 0;
    this._errors = {};
    this._events = {};
    this._extrinsics = void 0;
    this._extrinsicType = 4;
    this._genesisHash = void 0;
    this._isConnected = void 0;
    this._isReady = false;
    this._options = void 0;
    this._query = {};
    this._queryMulti = void 0;
    this._rpc = void 0;
    this._rpcCore = void 0;
    this._runtimeChain = void 0;
    this._runtimeMetadata = void 0;
    this._runtimeVersion = void 0;
    this._rx = {
      consts: {},
      query: {},
      tx: {}
    };
    this._type = void 0;
    this._decorateMethod = void 0;

    this._rxDecorateMethod = method => {
      return method;
    };

    (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] = `${++instanceCounter}`;
    (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry] = ((_options$source = options.source) === null || _options$source === void 0 ? void 0 : _options$source.registry) || options.registry || new _types.TypeRegistry();

    this._rx.queryAt = (blockHash, knownVersion) => (0, _rxjs.from)(this.at(blockHash, knownVersion)).pipe((0, _rxjs.map)(a => a.rx.query));

    this._rx.registry = (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry];
    const thisProvider = options.source ? options.source._rpcCore.provider.clone() : options.provider || new _rpcProvider.WsProvider();
    this._decorateMethod = decorateMethod;
    this._options = options;
    this._type = type; // The RPC interface decorates the known interfaces on init

    this._rpcCore = new _rpcCore.RpcCore((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], thisProvider, this._options.rpc);
    this._isConnected = new _rxjs.BehaviorSubject(this._rpcCore.provider.isConnected);
    this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
  }
  /**
   * @description Return the current used registry
   */


  get registry() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry];
  }
  /**
   * @description Creates an instance of a type as registered
   */


  createType(type, ...params) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry].createType(type, ...params);
  }
  /**
   * @description Register additional user-defined of chain-specific types in the type registry
   */


  registerTypes(types) {
    types && (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry].register(types);
  }
  /**
   * @returns `true` if the API operates with subscriptions
   */


  get hasSubscriptions() {
    return this._rpcCore.provider.hasSubscriptions;
  }
  /**
   * @returns `true` if the API decorate multi-key queries
   */


  get supportMulti() {
    return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
  }

  _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
    if (!decoratedApi) {
      decoratedApi = {
        consts: {},
        errors: {},
        events: {},
        query: {},
        registry: registry.registry,
        rx: {
          query: {}
        }
      };
    }

    if (!registry.decoratedMeta) {
      registry.decoratedMeta = (0, _types.expandMetadata)(registry.registry, registry.metadata);
    }

    const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);

    const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);

    (0, _augmentObject.augmentObject)('consts', registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
    (0, _augmentObject.augmentObject)('errors', registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
    (0, _augmentObject.augmentObject)('events', registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
    (0, _augmentObject.augmentObject)('query', storage, decoratedApi.query, fromEmpty);
    (0, _augmentObject.augmentObject)('query', storageRx, decoratedApi.rx.query, fromEmpty);

    decoratedApi.findCall = callIndex => (0, _find.findCall)(registry.registry, callIndex);

    decoratedApi.findError = errorIndex => (0, _find.findError)(registry.registry, errorIndex);

    decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
    return {
      decoratedApi,
      decoratedMeta: registry.decoratedMeta
    };
  }

  _injectMetadata(registry, fromEmpty = false) {
    // clear the decoration, we are redoing it here
    if (fromEmpty || !registry.decoratedApi) {
      registry.decoratedApi = {
        consts: {},
        errors: {},
        events: {},
        query: {},
        registry: registry.registry,
        rx: {
          query: {}
        }
      };
    }

    const {
      decoratedApi,
      decoratedMeta
    } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);

    this._consts = decoratedApi.consts;
    this._errors = decoratedApi.errors;
    this._events = decoratedApi.events;
    this._query = decoratedApi.query;
    this._rx.query = decoratedApi.rx.query;

    const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);

    const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);

    if (fromEmpty || !this._extrinsics) {
      this._extrinsics = tx;
      this._rx.tx = rxtx;
    } else {
      (0, _augmentObject.augmentObject)('tx', tx, this._extrinsics, false);
      (0, _augmentObject.augmentObject)(null, rxtx, this._rx.tx, false);
    }

    (0, _augmentObject.augmentObject)(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
  }
  /**
   * @deprecated
   * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
   */


  injectMetadata(metadata, fromEmpty, registry) {
    this._injectMetadata({
      metadata,
      registry: registry || (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry],
      specName: (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry].createType('Text'),
      specVersion: _util.BN_ZERO
    }, fromEmpty);
  }

  _decorateFunctionMeta(input, output) {
    output.meta = input.meta;
    output.method = input.method;
    output.section = input.section;
    output.toJSON = input.toJSON;

    if (input.callIndex) {
      output.callIndex = input.callIndex;
    }

    return output;
  } // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
  // manner to cater for both old and new:
  //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
  //   - when non-zero, remove anything that is not in the array (we don't do this)


  _filterRpc(methods, additional) {
    // add any specific user-base RPCs
    if (Object.keys(additional).length !== 0) {
      this._rpcCore.addUserInterfaces(additional); // re-decorate, only adding any new additional interfaces


      this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);

      this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
    }

    this._filterRpcMethods(methods);
  }

  _filterRpcMethods(exposed) {
    const hasResults = exposed.length !== 0;
    const allKnown = [...this._rpcCore.mapping.entries()];
    const allKeys = [];

    for (let i = 0; i < allKnown.length; i++) {
      const [, {
        alias,
        endpoint,
        method,
        pubsub,
        section
      }] = allKnown[i];
      allKeys.push(`${section}_${method}`);

      if (pubsub) {
        allKeys.push(`${section}_${pubsub[1]}`);
        allKeys.push(`${section}_${pubsub[2]}`);
      }

      if (alias) {
        allKeys.push(...alias);
      }

      if (endpoint) {
        allKeys.push(endpoint);
      }
    }

    const filterKey = k => !allKeys.includes(k);

    const unknown = exposed.filter(filterKey);

    if (unknown.length) {
      l.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
    } // loop through all entries we have (populated in decorate) and filter as required
    // only remove when we have results and method missing, or with no results if optional


    for (let i = 0; i < allKnown.length; i++) {
      const [k, {
        method,
        section
      }] = allKnown[i];

      if (hasResults && !exposed.includes(k) && k !== 'rpc_methods') {
        if (this._rpc[section]) {
          delete this._rpc[section][method];
          delete this._rx.rpc[section][method];
        }
      }
    }
  }

  _decorateRpc(rpc, decorateMethod, input = {}) {
    const out = input;

    const decorateFn = (section, method) => {
      const source = rpc[section][method];
      const fn = decorateMethod(source, {
        methodName: method
      });
      fn.meta = source.meta;
      fn.raw = decorateMethod(source.raw, {
        methodName: method
      });
      return fn;
    };

    for (let s = 0; s < rpc.sections.length; s++) {
      const section = rpc.sections[s];

      if (!Object.prototype.hasOwnProperty.call(out, section)) {
        const methods = Object.keys(rpc[section]);

        const decorateInternal = method => decorateFn(section, method);

        for (let m = 0; m < methods.length; m++) {
          const method = methods[m]; //  skip subscriptions where we have a non-subscribe interface

          if (this.hasSubscriptions || !(method.startsWith('subscribe') || method.startsWith('unsubscribe'))) {
            if (!Object.prototype.hasOwnProperty.call(out, section)) {
              out[section] = {};
            }

            (0, _util.lazyMethod)(out[section], method, decorateInternal);
          }
        }
      }
    }

    return out;
  } // only be called if supportMulti is true


  _decorateMulti(decorateMethod) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return decorateMethod(calls => (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(calls.map(args => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])));
  }

  _decorateMultiAt(atApi, decorateMethod, blockHash) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return decorateMethod(calls => this._rpcCore.state.queryStorageAt(calls.map(args => {
      if (Array.isArray(args)) {
        const {
          creator
        } = getAtQueryFn(atApi, args[0].creator);
        return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
      }

      return [getAtQueryFn(atApi, args.creator).creator];
    }), blockHash));
  }

  _decorateExtrinsics({
    tx
  }, decorateMethod) {
    const result = (0, _index.createSubmittable)(this._type, this._rx, decorateMethod);

    const lazySection = section => (0, _util.lazyMethods)({}, Object.keys(tx[section]), method => this._decorateExtrinsicEntry(tx[section][method], result));

    const sections = Object.keys(tx);

    for (let i = 0; i < sections.length; i++) {
      (0, _util.lazyMethod)(result, sections[i], lazySection);
    }

    return result;
  }

  _decorateExtrinsicEntry(method, creator) {
    const decorated = (...params) => creator(method(...params)); // pass through the `.is`


    decorated.is = other => method.is(other); // eslint-disable-next-line @typescript-eslint/no-unsafe-return


    return this._decorateFunctionMeta(method, decorated);
  }

  _decorateStorage({
    query,
    registry
  }, decorateMethod, blockHash) {
    const result = {};

    const lazySection = section => (0, _util.lazyMethods)({}, Object.keys(query[section]), method => blockHash ? this._decorateStorageEntryAt(registry, query[section][method], decorateMethod, blockHash) : this._decorateStorageEntry(query[section][method], decorateMethod));

    const sections = Object.keys(query);

    for (let i = 0; i < sections.length; i++) {
      (0, _util.lazyMethod)(result, sections[i], lazySection);
    }

    return result;
  }

  _decorateStorageEntry(creator, decorateMethod) {
    const getArgs = (args, registry) => (0, _validate.extractStorageArgs)(registry || (0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], creator, args);

    const getQueryAt = blockHash => (0, _rxjs.from)(this.at(blockHash)).pipe((0, _rxjs.map)(api => getAtQueryFn(api, creator))); // Disable this where it occurs for each field we are decorating

    /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


    const decorated = this._decorateStorageCall(creator, decorateMethod);

    decorated.creator = creator;
    decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe((0, _rxjs.switchMap)(q => q(...args))));
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));

    decorated.is = key => key.section === creator.section && key.method === creator.method;

    decorated.key = (...args) => (0, _util.u8aToHex)((0, _util.compactStripLength)(creator(...args))[1]);

    decorated.keyPrefix = (...args) => (0, _util.u8aToHex)(creator.keyPrefix(...args));

    decorated.range = decorateMethod((range, ...args) => this._decorateStorageRange(decorated, args, range));
    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
    decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe((0, _rxjs.switchMap)(q => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash)))); // .keys() & .entries() only available on map types

    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (...args) => this._retrieveMapEntries(creator, null, args)));
      decorated.entriesAt = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (blockHash, ...args) => getQueryAt(blockHash).pipe((0, _rxjs.switchMap)(q => this._retrieveMapEntries(q.creator, blockHash, args)))));
      decorated.entriesPaged = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], opts => this._retrieveMapEntriesPaged(creator, opts)));
      decorated.keys = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (...args) => this._retrieveMapKeys(creator, null, args)));
      decorated.keysAt = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (blockHash, ...args) => getQueryAt(blockHash).pipe((0, _rxjs.switchMap)(q => this._retrieveMapKeys(q.creator, blockHash, args)))));
      decorated.keysPaged = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], opts => this._retrieveMapKeysPaged(creator, opts)));
    }

    if (this.supportMulti && creator.meta.type.isMap) {
      // When using double map storage function, user need to pass double map key as an array
      decorated.multi = decorateMethod(args => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map(a => [creator, [a]])) : this._retrieveMulti(args.map(a => [creator, a])));
    }
    /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


    return this._decorateFunctionMeta(creator, decorated);
  }

  _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
    const getArgs = args => (0, _validate.extractStorageArgs)(registry, creator, args); // Disable this where it occurs for each field we are decorating

    /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


    const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
    decorated.creator = creator;
    decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));

    decorated.is = key => key.section === creator.section && key.method === creator.method;

    decorated.key = (...args) => (0, _util.u8aToHex)((0, _util.compactStripLength)(creator(creator.meta.type.isPlain ? undefined : args))[1]);

    decorated.keyPrefix = (...keys) => (0, _util.u8aToHex)(creator.keyPrefix(...keys));

    decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash)); // .keys() & .entries() only available on map types

    if (creator.iterKey && creator.meta.type.isMap) {
      decorated.entries = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (...args) => this._retrieveMapEntries(creator, blockHash, args)));
      decorated.keys = decorateMethod((0, _rpcCore.memo)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], (...args) => this._retrieveMapKeys(creator, blockHash, args)));
    }
    /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


    return this._decorateFunctionMeta(creator, decorated);
  } // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
  // we make a subscription, alternatively we push this through a single-shot query


  _decorateStorageCall(creator, decorateMethod) {
    return decorateMethod((...args) => {
      return this.hasSubscriptions ? this._rpcCore.state.subscribeStorage([(0, _validate.extractStorageArgs)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], creator, args)]).pipe((0, _rxjs.map)(([data]) => data) // extract first/only result from list
      ) : this._rpcCore.state.getStorage((0, _validate.extractStorageArgs)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], creator, args));
    }, {
      methodName: creator.method,
      overrideNoSub: (...args) => this._rpcCore.state.getStorage((0, _validate.extractStorageArgs)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], creator, args))
    });
  }

  _decorateStorageRange(decorated, args, range) {
    const outputType = (0, _types.unwrapStorageType)((0, _classPrivateFieldLooseBase2.default)(this, _registry)[_registry], decorated.creator.meta.type, decorated.creator.meta.modifier.isOptional);
    return this._rpcCore.state.queryStorage([decorated.key(...args)], ...range).pipe((0, _rxjs.map)(result => result.map(([blockHash, [value]]) => [blockHash, this.createType(outputType, value.isSome ? value.unwrap().toHex() : undefined)])));
  } // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes


  _retrieveMulti(keys) {
    if (!keys.length) {
      return (0, _rxjs.of)([]);
    }

    const queryCall = this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
    return (0, _rxjs.combineLatest)((0, _util.arrayChunk)(keys, PAGE_SIZE_V).map(keys => queryCall(keys))).pipe((0, _rxjs.map)(_util.arrayFlatten));
  }

  _retrieveMapKeys({
    iterKey,
    meta,
    method,
    section
  }, at, args) {
    (0, _util.assert)(iterKey && meta.type.isMap, 'keys can only be retrieved on maps');
    const headKey = iterKey(...args).toHex();
    const startSubject = new _rxjs.BehaviorSubject(headKey);
    const queryCall = at ? startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at) : startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);

    const setMeta = key => key.setMeta(meta, section, method);

    return startSubject.pipe((0, _rxjs.switchMap)(queryCall), (0, _rxjs.map)(keys => keys.map(setMeta)), (0, _rxjs.tap)(keys => {
      setTimeout(() => {
        keys.length === PAGE_SIZE_K ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
      }, 0);
    }), (0, _rxjs.toArray)(), // toArray since we want to startSubject to be completed
    (0, _rxjs.map)(_util.arrayFlatten));
  }

  _retrieveMapKeysPaged({
    iterKey,
    meta,
    method,
    section
  }, opts) {
    (0, _util.assert)(iterKey && meta.type.isMap, 'keys can only be retrieved on maps');
    const headKey = iterKey(...opts.args).toHex();

    const setMeta = key => key.setMeta(meta, section, method);

    return this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey).pipe((0, _rxjs.map)(keys => keys.map(setMeta)));
  }

  _retrieveMapEntries(entry, at, args) {
    const query = at ? keyset => this._rpcCore.state.queryStorageAt(keyset, at) : keyset => this._rpcCore.state.queryStorageAt(keyset);
    return this._retrieveMapKeys(entry, at, args).pipe((0, _rxjs.switchMap)(keys => keys.length ? (0, _rxjs.combineLatest)((0, _util.arrayChunk)(keys, PAGE_SIZE_V).map(query)).pipe((0, _rxjs.map)(valsArr => (0, _util.arrayFlatten)(valsArr).map((value, index) => [keys[index], value]))) : (0, _rxjs.of)([])));
  }

  _retrieveMapEntriesPaged(entry, opts) {
    return this._retrieveMapKeysPaged(entry, opts).pipe((0, _rxjs.switchMap)(keys => keys.length ? this._rpcCore.state.queryStorageAt(keys).pipe((0, _rxjs.map)(valsArr => valsArr.map((value, index) => [keys[index], value]))) : (0, _rxjs.of)([])));
  }

  _decorateDeriveRx(decorateMethod) {
    var _this$_runtimeVersion, _this$_options$typesB, _this$_options$typesB2, _this$_options$typesB3;

    const specName = (_this$_runtimeVersion = this._runtimeVersion) === null || _this$_runtimeVersion === void 0 ? void 0 : _this$_runtimeVersion.specName.toString(); // Pull in derive from api-derive

    const available = (0, _apiDerive.getAvailableDerives)((0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId], this._rx, (0, _util.objectSpread)({}, this._options.derives, (_this$_options$typesB = this._options.typesBundle) === null || _this$_options$typesB === void 0 ? void 0 : (_this$_options$typesB2 = _this$_options$typesB.spec) === null || _this$_options$typesB2 === void 0 ? void 0 : (_this$_options$typesB3 = _this$_options$typesB2[specName || '']) === null || _this$_options$typesB3 === void 0 ? void 0 : _this$_options$typesB3.derives));
    return (0, _decorate.decorateDeriveSections)(decorateMethod, available);
  }

  _decorateDerive(decorateMethod) {
    return (0, _decorate.decorateDeriveSections)(decorateMethod, this._rx.derive);
  }
  /**
   * Put the `this.onCall` function of ApiRx here, because it is needed by
   * `api._rx`.
   */


}

exports.Decorate = Decorate;

},{"../submittable/index.js":155,"../util/augmentObject.js":156,"../util/decorate.js":157,"../util/validate.js":162,"./Events.js":136,"./find.js":139,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/api-derive":77,"@polkadot/rpc-core":185,"@polkadot/rpc-provider":196,"@polkadot/types":311,"@polkadot/util":640,"rxjs":746}],136:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Events = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _eventemitter2 = _interopRequireDefault(require("eventemitter3"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
var _eventemitter = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("eventemitter");

class Events {
  constructor() {
    Object.defineProperty(this, _eventemitter, {
      writable: true,
      value: new _eventemitter2.default()
    });
  }

  emit(type, ...args) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].emit(type, ...args);
  }
  /**
   * @description Attach an eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.on('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.on('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */


  on(type, handler) {
    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].on(type, handler);

    return this;
  }
  /**
   * @description Remove the given eventemitter handler
   *
   * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to unregister.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const handler = (): void => {
   *  console.log('Connected !);
   * };
   *
   * // Start listening
   * api.on('connected', handler);
   *
   * // Stop listening
   * api.off('connected', handler);
   * ```
   */


  off(type, handler) {
    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].removeListener(type, handler);

    return this;
  }
  /**
   * @description Attach an one-time eventemitter handler to listen to a specific event
   *
   * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
   * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.once('connected', (): void => {
   *   console.log('API has been connected to the endpoint');
   * });
   *
   * api.once('disconnected', (): void => {
   *   console.log('API has been disconnected from the endpoint');
   * });
   * ```
   */


  once(type, handler) {
    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].once(type, handler);

    return this;
  }

}

exports.Events = Events;

},{"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"eventemitter3":743}],137:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Getters = void 0;

var _util = require("@polkadot/util");

var _packageInfo = require("../packageInfo.js");

var _find = require("./find.js");

var _Init = require("./Init.js");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
function assertResult(value) {
  return (0, _util.assertReturn)(value, 'Api needs to be initialized before using, listen on \'ready\'');
}

class Getters extends _Init.Init {
  /**
   * @description Contains the parameter types (constants) of all modules.
   *
   * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
   *
   * @example
   * <BR>
   *
   * ```javascript
   * console.log(api.consts.democracy.enactmentPeriod.toString())
   * ```
   */
  get consts() {
    return assertResult(this._consts);
  }
  /**
   * @description Derived results that are injected into the API, allowing for combinations of various query results.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumber((number) => {
   *   console.log('best number', number);
   * });
   * ```
   */


  get derive() {
    return assertResult(this._derive);
  }
  /**
   * @description Errors from metadata
   */


  get errors() {
    return assertResult(this._errors);
  }
  /**
   * @description Events from metadata
   */


  get events() {
    return assertResult(this._events);
  }
  /**
   * @description  Returns the version of extrinsics in-use on this chain
   */


  get extrinsicVersion() {
    return this._extrinsicType;
  }
  /**
   * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
   */


  get genesisHash() {
    return assertResult(this._genesisHash);
  }
  /**
   * @description true is the underlying provider is connected
   */


  get isConnected() {
    return this._isConnected.getValue();
  }
  /**
   * @description The library information name & version (from package.json)
   */


  get libraryInfo() {
    return `${_packageInfo.packageInfo.name} v${_packageInfo.packageInfo.version}`;
  }
  /**
   * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
   *
   * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.query.system.account(<accountId>, ([nonce, balance]) => {
   *   console.log('new free balance', balance.free, 'new nonce', nonce);
   * });
   * ```
   */


  get query() {
    return assertResult(this._query);
  }
  /**
   * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const unsub = await api.queryMulti(
   *   [
   *     // you can include the storage without any parameters
   *     api.query.balances.totalIssuance,
   *     // or you can pass parameters to the storage query
   *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
   *   ],
   *   ([existential, [, { free }]]) => {
   *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
   *
   *     unsub();
   *   }
   * );
   * ```
   */


  get queryMulti() {
    return assertResult(this._queryMulti);
  }
  /**
   * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
   *
   * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.rpc.chain.subscribeNewHeads((header) => {
   *   console.log('new header', header);
   * });
   * ```
   */


  get rpc() {
    return assertResult(this._rpc);
  }
  /**
   * @description Contains the chain information for the current node.
   */


  get runtimeChain() {
    return assertResult(this._runtimeChain);
  }
  /**
   * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
   */


  get runtimeMetadata() {
    return assertResult(this._runtimeMetadata);
  }
  /**
   * @description Contains the version information for the current runtime.
   */


  get runtimeVersion() {
    return assertResult(this._runtimeVersion);
  }
  /**
   * @description The underlying Rx API interface
   */


  get rx() {
    return assertResult(this._rx);
  }
  /**
   * @description The type of this API instance, either 'rxjs' or 'promise'
   */


  get type() {
    return this._type;
  }
  /**
   * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * api.tx.balances
   *   .transfer(<recipientId>, <balance>)
   *   .signAndSend(<keyPair>, ({status}) => {
   *     console.log('tx status', status.asFinalized.toHex());
   *   });
   * ```
   */


  get tx() {
    return assertResult(this._extrinsics);
  }
  /**
   * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
   */


  findCall(callIndex) {
    return (0, _find.findCall)(this.registry, callIndex);
  }
  /**
   * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
   */


  findError(errorIndex) {
    return (0, _find.findError)(this.registry, errorIndex);
  }

}

exports.Getters = Getters;

},{"../packageInfo.js":144,"./Init.js":138,"./find.js":139,"@polkadot/util":640}],138:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Init = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _rxjs = require("rxjs");

var _types = require("@polkadot/types");

var _typesKnown = require("@polkadot/types-known");

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _Decorate = require("./Decorate.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
const KEEPALIVE_INTERVAL = 10000;
const l = (0, _util.logger)('api/init');

function textToString(t) {
  return t.toString();
}

var _healthTimer = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("healthTimer");

var _registries = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("registries");

var _updateSub = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("updateSub");

var _waitingRegistries = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("waitingRegistries");

var _onProviderConnect = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onProviderConnect");

var _onProviderDisconnect = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onProviderDisconnect");

var _onProviderError = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onProviderError");

class Init extends _Decorate.Decorate {
  constructor(options, type, decorateMethod) {
    super(options, type, decorateMethod); // all injected types added to the registry for overrides

    Object.defineProperty(this, _healthTimer, {
      writable: true,
      value: null
    });
    Object.defineProperty(this, _registries, {
      writable: true,
      value: []
    });
    Object.defineProperty(this, _updateSub, {
      writable: true,
      value: null
    });
    Object.defineProperty(this, _waitingRegistries, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _onProviderConnect, {
      writable: true,
      value: async () => {
        this._isConnected.next(true);

        this.emit('connected');

        try {
          const [hasMeta, cryptoReady] = await Promise.all([this._loadMeta(), this._options.initWasm === false ? Promise.resolve(true) : (0, _utilCrypto.cryptoWaitReady)()]);

          this._subscribeHealth();

          if (hasMeta && !this._isReady && cryptoReady) {
            this._isReady = true;
            this.emit('ready', this);
          }
        } catch (_error) {
          const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
          l.error(error);
          this.emit('error', error);
        }
      }
    });
    Object.defineProperty(this, _onProviderDisconnect, {
      writable: true,
      value: () => {
        this._isConnected.next(false);

        this._unsubscribeHealth();

        this.emit('disconnected');
      }
    });
    Object.defineProperty(this, _onProviderError, {
      writable: true,
      value: error => {
        this.emit('error', error);
      }
    });
    this.registry.setKnownTypes(options); // We only register the types (global) if this is not a cloned instance.
    // Do right up-front, so we get in the user types before we are actually
    // doing anything on-chain, this ensures we have the overrides in-place

    if (!options.source) {
      this.registerTypes(options.types);
    } else {
      (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries] = (0, _classPrivateFieldLooseBase2.default)(options.source, _registries)[_registries];
    }

    this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
    this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);

    if (this.supportMulti) {
      this._queryMulti = this._decorateMulti(this._decorateMethod);
      this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
    }

    this._rx.signer = options.signer;

    this._rpcCore.setRegistrySwap(blockHash => this.getBlockRegistry(blockHash));

    if (this.hasSubscriptions) {
      this._rpcCore.provider.on('disconnected', (0, _classPrivateFieldLooseBase2.default)(this, _onProviderDisconnect)[_onProviderDisconnect]);

      this._rpcCore.provider.on('error', (0, _classPrivateFieldLooseBase2.default)(this, _onProviderError)[_onProviderError]);

      this._rpcCore.provider.on('connected', (0, _classPrivateFieldLooseBase2.default)(this, _onProviderConnect)[_onProviderConnect]);
    } else {
      l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
    } // If the provider was instantiated earlier, and has already emitted a
    // 'connected' event, then the `on('connected')` won't fire anymore. To
    // cater for this case, we call manually `this._onProviderConnect`.


    if (this._rpcCore.provider.isConnected) {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      (0, _classPrivateFieldLooseBase2.default)(this, _onProviderConnect)[_onProviderConnect]();
    }
  }
  /**
   * @description Decorates a registry based on the runtime version
   */


  _initRegistry(registry, chain, version, metadata, chainProps) {
    registry.setChainProperties(chainProps || this.registry.getChainProperties());
    registry.setKnownTypes(this._options);
    registry.register((0, _typesKnown.getSpecTypes)(registry, chain, version.specName, version.specVersion));
    registry.setHasher((0, _typesKnown.getSpecHasher)(registry, chain, version.specName)); // for bundled types, pull through the aliases defined

    if (registry.knownTypes.typesBundle) {
      registry.knownTypes.typesAlias = (0, _typesKnown.getSpecAlias)(registry, chain, version.specName);
    }

    registry.setMetadata(metadata, undefined, (0, _util.objectSpread)({}, (0, _typesKnown.getSpecExtensions)(registry, chain, version.specName), this._options.signedExtensions));
  }
  /**
   * @description Returns the default versioned registry
   */


  _getDefaultRegistry() {
    // get the default registry version
    const thisRegistry = (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].find(({
      isDefault
    }) => isDefault);

    (0, _util.assert)(thisRegistry, 'Initialization error, cannot find the default registry');
    return thisRegistry;
  }
  /**
   * @description Returns a decorated API instance at a specific point in time
   */


  async at(blockHash, knownVersion) {
    const u8aHash = (0, _util.u8aToU8a)(blockHash);
    const registry = await this.getBlockRegistry(u8aHash, knownVersion); // always create a new decoration - since we are pointing to a specific hash, this
    // means that all queries needs to use that hash (not a previous one already existing)

    return this._createDecorated(registry, true, null, u8aHash).decoratedApi;
  }

  _getBlockRegistryViaVersion(blockHash, version) {
    if (version) {
      // check for pre-existing registries. We also check specName, e.g. it
      // could be changed like in Westmint with upgrade from shell -> westmint
      const existingViaVersion = (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].find(({
        specName,
        specVersion
      }) => specName.eq(version.specName) && specVersion.eq(version.specVersion));

      if (existingViaVersion) {
        existingViaVersion.lastBlockHash = blockHash;
        return existingViaVersion;
      }
    }

    return null;
  }

  async _getBlockRegistry(blockHash) {
    // ensure we have everything required
    (0, _util.assert)(this._genesisHash && this._runtimeVersion, 'Cannot retrieve data on an uninitialized chain'); // We have to assume that on the RPC layer the calls used here does not call back into
    // the registry swap, so getHeader & getRuntimeVersion should not be historic

    const header = this.registry.createType('HeaderPartial', this._genesisHash.eq(blockHash) ? {
      number: _util.BN_ZERO,
      parentHash: this._genesisHash
    } : await (0, _rxjs.firstValueFrom)(this._rpcCore.chain.getHeader.raw(blockHash)));
    (0, _util.assert)(!header.parentHash.isEmpty, 'Unable to retrieve header and parent from supplied hash'); // get the runtime version, either on-chain or via an known upgrade history

    const [firstVersion, lastVersion] = (0, _typesKnown.getUpgradeVersion)(this._genesisHash, header.number);
    const version = this.registry.createType('RuntimeVersionPartial', firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion)) ? {
      specName: this._runtimeVersion.specName,
      specVersion: firstVersion.specVersion
    } : await (0, _rxjs.firstValueFrom)(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));

    const existingViaVersion = this._getBlockRegistryViaVersion(blockHash, version);

    if (existingViaVersion) {
      return existingViaVersion;
    } // nothing has been found, construct new


    const registry = new _types.TypeRegistry(blockHash);
    const metadata = new _types.Metadata(registry, await (0, _rxjs.firstValueFrom)(this._rpcCore.state.getMetadata.raw(header.parentHash)));

    this._initRegistry(registry, this._runtimeChain, version, metadata); // add our new registry


    const result = {
      lastBlockHash: blockHash,
      metadata,
      registry,
      specName: version.specName,
      specVersion: version.specVersion
    };

    (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].push(result);

    return result;
  }
  /**
   * @description Sets up a registry based on the block hash defined
   */


  async getBlockRegistry(blockHash, knownVersion) {
    const existingViaHash = (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].find(({
      lastBlockHash
    }) => lastBlockHash && (0, _util.u8aEq)(lastBlockHash, blockHash));

    if (existingViaHash) {
      return existingViaHash;
    }

    const existingViaVersion = this._getBlockRegistryViaVersion(blockHash, knownVersion);

    if (existingViaVersion) {
      return existingViaVersion;
    }

    const blockHashHex = (0, _util.u8aToHex)(blockHash);

    let waiting = (0, _classPrivateFieldLooseBase2.default)(this, _waitingRegistries)[_waitingRegistries][blockHashHex];

    if ((0, _util.isUndefined)(waiting)) {
      waiting = this._getBlockRegistry(blockHash);
      (0, _classPrivateFieldLooseBase2.default)(this, _waitingRegistries)[_waitingRegistries][blockHashHex] = waiting; // when we have resolved, remove this from the waiting list

      waiting.then(() => {
        delete (0, _classPrivateFieldLooseBase2.default)(this, _waitingRegistries)[_waitingRegistries][blockHashHex];
      }).catch(() => undefined);
    }

    return waiting;
  }

  async _loadMeta() {
    var _this$_options$source; // on re-connection to the same chain, we don't want to re-do everything from chain again


    if (this._isReady) {
      return true;
    }

    this._unsubscribeUpdates(); // only load from on-chain if we are not a clone (default path), alternatively
    // just use the values from the source instance provided


    [this._genesisHash, this._runtimeMetadata] = (_this$_options$source = this._options.source) !== null && _this$_options$source !== void 0 && _this$_options$source._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
    return this._initFromMeta(this._runtimeMetadata);
  } // eslint-disable-next-line @typescript-eslint/require-await


  async _metaFromSource(source) {
    this._extrinsicType = source.extrinsicVersion;
    this._runtimeChain = source.runtimeChain;
    this._runtimeVersion = source.runtimeVersion; // manually build a list of all available methods in this RPC, we are
    // going to filter on it to align the cloned RPC without making a call

    const sections = Object.keys(source.rpc);
    const rpcs = [];

    for (let s = 0; s < sections.length; s++) {
      const section = sections[s];
      const methods = Object.keys(source.rpc[section]);

      for (let m = 0; m < methods.length; m++) {
        rpcs.push(`${section}_${methods[m]}`);
      }
    }

    this._filterRpc(rpcs, (0, _typesKnown.getSpecRpc)(this.registry, source.runtimeChain, source.runtimeVersion.specName));

    return [source.genesisHash, source.runtimeMetadata];
  } // subscribe to metadata updates, inject the types on changes


  _subscribeUpdates() {
    if ((0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub] || !this.hasSubscriptions) {
      return;
    }

    (0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub] = this._rpcCore.state.subscribeRuntimeVersion().pipe((0, _rxjs.switchMap)(version => {
      var _this$_runtimeVersion;

      return (// only retrieve the metadata when the on-chain version has been changed
        (_this$_runtimeVersion = this._runtimeVersion) !== null && _this$_runtimeVersion !== void 0 && _this$_runtimeVersion.specVersion.eq(version.specVersion) ? (0, _rxjs.of)(false) : this._rpcCore.state.getMetadata().pipe((0, _rxjs.map)(metadata => {
          l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
          this._runtimeMetadata = metadata;
          this._runtimeVersion = version;
          this._rx.runtimeVersion = version; // update the default registry version

          const thisRegistry = this._getDefaultRegistry(); // setup the data as per the current versions


          thisRegistry.metadata = metadata;
          thisRegistry.specVersion = version.specVersion; // clear the registry types to ensure that we override correctly

          this._initRegistry(thisRegistry.registry.init(), this._runtimeChain, version, metadata);

          this._injectMetadata(thisRegistry, false);

          return true;
        }))
      );
    })).subscribe();
  }

  async _metaFromChain(optMetadata) {
    const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([(0, _rxjs.firstValueFrom)(this._rpcCore.chain.getBlockHash(0)), (0, _rxjs.firstValueFrom)(this._rpcCore.state.getRuntimeVersion()), (0, _rxjs.firstValueFrom)(this._rpcCore.system.chain()), (0, _rxjs.firstValueFrom)(this._rpcCore.system.properties()), (0, _rxjs.firstValueFrom)(this._rpcCore.rpc.methods()), optMetadata ? Promise.resolve(null) : (0, _rxjs.firstValueFrom)(this._rpcCore.state.getMetadata())]); // set our chain version & genesisHash as returned

    this._runtimeChain = chain;
    this._runtimeVersion = runtimeVersion;
    this._rx.runtimeVersion = runtimeVersion; // retrieve metadata, either from chain  or as pass-in via options

    const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
    const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey] ? new _types.Metadata(this.registry, optMetadata[metadataKey]) : await (0, _rxjs.firstValueFrom)(this._rpcCore.state.getMetadata())); // initializes the registry & RPC

    this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);

    this._filterRpc(rpcMethods.methods.map(textToString), (0, _typesKnown.getSpecRpc)(this.registry, chain, runtimeVersion.specName));

    this._subscribeUpdates(); // setup the initial registry, when we have none


    if (!(0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].length) {
      (0, _classPrivateFieldLooseBase2.default)(this, _registries)[_registries].push({
        isDefault: true,
        metadata,
        registry: this.registry,
        specName: runtimeVersion.specName,
        specVersion: runtimeVersion.specVersion
      });
    } // get unique types & validate


    metadata.getUniqTypes(this._options.throwOnUnknown || false);
    return [genesisHash, metadata];
  }

  _initFromMeta(metadata) {
    this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
    this._rx.extrinsicType = this._extrinsicType;
    this._rx.genesisHash = this._genesisHash;
    this._rx.runtimeVersion = this._runtimeVersion; // must be set here
    // inject metadata and adjust the types as detected

    this._injectMetadata(this._getDefaultRegistry(), true); // derive is last, since it uses the decorated rx


    this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
    this._derive = this._decorateDerive(this._decorateMethod);
    return true;
  }

  _subscribeHealth() {
    // Only enable the health keepalive on WS, not needed on HTTP
    (0, _classPrivateFieldLooseBase2.default)(this, _healthTimer)[_healthTimer] = this.hasSubscriptions ? setInterval(() => {
      (0, _rxjs.firstValueFrom)(this._rpcCore.system.health()).catch(() => undefined);
    }, KEEPALIVE_INTERVAL) : null;
  }

  _unsubscribeHealth() {
    if ((0, _classPrivateFieldLooseBase2.default)(this, _healthTimer)[_healthTimer]) {
      clearInterval((0, _classPrivateFieldLooseBase2.default)(this, _healthTimer)[_healthTimer]);
      (0, _classPrivateFieldLooseBase2.default)(this, _healthTimer)[_healthTimer] = null;
    }
  }

  _unsubscribeUpdates() {
    if ((0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub]) {
      (0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub].unsubscribe();

      (0, _classPrivateFieldLooseBase2.default)(this, _updateSub)[_updateSub] = null;
    }
  }

  _unsubscribe() {
    this._unsubscribeHealth();

    this._unsubscribeUpdates();
  }

}

exports.Init = Init;

},{"./Decorate.js":135,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/types":311,"@polkadot/types-known":204,"@polkadot/util":640,"@polkadot/util-crypto":513,"rxjs":746}],139:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findCall = findCall;
exports.findError = findError;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
function findCall(registry, callIndex) {
  return registry.findMetaCall((0, _util.u8aToU8a)(callIndex));
}

function findError(registry, errorIndex) {
  return registry.findMetaError((0, _util.u8aToU8a)(errorIndex));
}

},{"@polkadot/util":640}],140:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiBase = void 0;

var _util = require("@polkadot/util");

var _Getters = require("./Getters.js");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
class ApiBase extends _Getters.Getters {
  /**
   * @description Create an instance of the class
   *
   * @param options Options object to create API instance or a Provider instance
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * const api = new Api().isReady();
   *
   * api.rpc.subscribeNewHeads((header) => {
   *   console.log(`new block #${header.number.toNumber()}`);
   * });
   * ```
   */
  constructor(options = {}, type, decorateMethod) {
    super(options, type, decorateMethod);
  }
  /**
   * @description Connect from the underlying provider, halting all network traffic
   */


  connect() {
    return this._rpcCore.connect();
  }
  /**
   * @description Disconnect from the underlying provider, halting all network traffic
   */


  disconnect() {
    this._unsubscribe();

    return this._rpcCore.disconnect();
  }
  /**
   * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
   */


  setSigner(signer) {
    this._rx.signer = signer;
  }
  /**
   * @description Signs a raw signer payload, string or Uint8Array
   */


  async sign(address, data, {
    signer
  } = {}) {
    if ((0, _util.isString)(address)) {
      const _signer = signer || this._rx.signer;

      (0, _util.assert)(_signer === null || _signer === void 0 ? void 0 : _signer.signRaw, 'No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
      return (await _signer.signRaw((0, _util.objectSpread)({
        type: 'bytes'
      }, data, {
        address
      }))).signature;
    }

    return (0, _util.u8aToHex)(address.sign((0, _util.u8aToU8a)(data.data)));
  }

}

exports.ApiBase = ApiBase;

},{"./Getters.js":137,"@polkadot/util":640}],141:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  Keyring: true,
  WsProvider: true,
  HttpProvider: true,
  packageInfo: true,
  SubmittableResult: true
};
Object.defineProperty(exports, "HttpProvider", {
  enumerable: true,
  get: function () {
    return _rpcProvider.HttpProvider;
  }
});
Object.defineProperty(exports, "Keyring", {
  enumerable: true,
  get: function () {
    return _keyring.Keyring;
  }
});
Object.defineProperty(exports, "SubmittableResult", {
  enumerable: true,
  get: function () {
    return _index2.SubmittableResult;
  }
});
Object.defineProperty(exports, "WsProvider", {
  enumerable: true,
  get: function () {
    return _rpcProvider.WsProvider;
  }
});
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _keyring = require("@polkadot/keyring");

var _rpcProvider = require("@polkadot/rpc-provider");

var _packageInfo = require("./packageInfo.js");

var _index = require("./promise/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _index2 = require("./submittable/index.js");

var _index3 = require("./rx/index.js");

Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    }
  });
});

},{"./packageInfo.js":144,"./promise/index.js":148,"./rx/index.js":151,"./submittable/index.js":155,"@polkadot/keyring":166,"@polkadot/rpc-provider":196}],142:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _packageInfo = require("@polkadot/api-derive/packageInfo");

var _packageInfo2 = require("@polkadot/rpc-core/packageInfo");

var _packageInfo3 = require("@polkadot/rpc-provider/packageInfo");

var _packageInfo4 = require("@polkadot/types/packageInfo");

var _packageInfo5 = require("@polkadot/types-known/packageInfo");

var _util = require("@polkadot/util");

var _packageInfo6 = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _util.detectPackage)(_packageInfo6.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo.packageInfo, _packageInfo2.packageInfo, _packageInfo3.packageInfo, _packageInfo4.packageInfo, _packageInfo5.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/api")
},{"./packageInfo.js":144,"@polkadot/api-derive/packageInfo":79,"@polkadot/rpc-core/packageInfo":186,"@polkadot/rpc-provider/packageInfo":198,"@polkadot/types-known/packageInfo":207,"@polkadot/types/packageInfo":423,"@polkadot/util":640}],143:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});

},{"./bundle.js":141,"./detectPackage.js":142}],144:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/api',
  version: '6.12.1'
};
exports.packageInfo = packageInfo;

},{}],145:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiPromise = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _index = require("../base/index.js");

var _Combinator = require("./Combinator.js");

var _decorateMethod = require("./decorateMethod.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * # @polkadot/api/promise
 *
 * ## Overview
 *
 * @name ApiPromise
 * @description
 * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
 *
 * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
 *
 * @see [[ApiRx]]
 *
 * ## Usage
 *
 * Making rpc calls -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * // initialise via static create
 * const api = await ApiPromise.create();
 *
 * // make a subscription to the network head
 * api.rpc.chain.subscribeNewHeads((header) => {
 *   console.log(`Chain is at #${header.number}`);
 * });
 * ```
 * <BR>
 *
 * Subscribing to chain state -
 * <BR>
 *
 * ```javascript
 * import { ApiPromise, WsProvider } from '@polkadot/api';
 *
 * // initialise a provider with a specific endpoint
 * const provider = new WsProvider('wss://example.com:9944')
 *
 * // initialise via isReady & new with specific provider
 * const api = await new ApiPromise({ provider }).isReady;
 *
 * // retrieve the block target time
 * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
 * let last = 0;
 *
 * // subscribe to the current block timestamp, updates automatically (callback provided)
 * api.query.timestamp.now((timestamp) => {
 *   const elapsed = last
 *     ? `, ${timestamp.toNumber() - last}s since last`
 *     : '';
 *
 *   last = timestamp.toNumber();
 *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
 * });
 * ```
 * <BR>
 *
 * Submitting a transaction -
 * <BR>
 *
 * ```javascript
 * import ApiPromise from '@polkadot/api/promise';
 *
 * ApiPromise.create().then((api) => {
 *   const [nonce] = await api.query.system.account(keyring.alice.address);
 *
 *   api.tx.balances
 *     // create transfer
 *     transfer(keyring.bob.address, 12345)
 *     // sign the transcation
 *     .sign(keyring.alice, { nonce })
 *     // send the transaction (optional status callback)
 *     .send((status) => {
 *       console.log(`current status ${status.type}`);
 *     })
 *     // retrieve the submitted extrinsic hash
 *     .then((hash) => {
 *       console.log(`submitted with hash ${hash}`);
 *     });
 * });
 * ```
 */
var _isReadyPromise = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isReadyPromise");

var _isReadyOrErrorPromise = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isReadyOrErrorPromise");

class ApiPromise extends _index.ApiBase {
  /**
   * @description Creates an instance of the ApiPromise class
   * @param options Options to create an instance. This can be either [[ApiOptions]] or
   * an [[WsProvider]].
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * new Api().isReady.then((api) => {
   *   api.rpc.subscribeNewHeads((header) => {
   *     console.log(`new block #${header.number.toNumber()}`);
   *   });
   * });
   * ```
   */
  constructor(options) {
    super(options, 'promise', _decorateMethod.toPromiseMethod);
    Object.defineProperty(this, _isReadyPromise, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _isReadyOrErrorPromise, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {
      super.once('ready', () => resolve(this));
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise] = new Promise((resolve, reject) => {
      const tracker = (0, _decorateMethod.promiseTracker)(resolve, reject);
      super.once('ready', () => tracker.resolve(this));
      super.once('error', error => tracker.reject(error));
    });
  }
  /**
   * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
   * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
   * provider (see the constructor arguments)
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   *
   * Api.create().then(async (api) => {
   *   const timestamp = await api.query.timestamp.now();
   *
   *   console.log(`lastest block timestamp ${timestamp}`);
   * });
   * ```
   */


  static create(options) {
    const instance = new ApiPromise(options);

    if (options && options.throwOnConnect) {
      return instance.isReadyOrError;
    } // Swallow any rejections on isReadyOrError
    // (in Node 15.x this creates issues, when not being looked at)


    instance.isReadyOrError.catch(() => {// ignore
    });
    return instance.isReady;
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */


  get isReady() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise];
  }
  /**
   * @description Promise that resolves if we can connect, or reject if there is an error
   */


  get isReadyOrError() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyOrErrorPromise)[_isReadyOrErrorPromise];
  }
  /**
   * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
   */


  clone() {
    return new ApiPromise((0, _util.objectSpread)({}, this._options, {
      source: this
    }));
  }
  /**
   * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
   * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
   * @param callback A callback that will return an Array of all the values this combinator has been applied to
   * @example
   * <BR>
   *
   * ```javascript
   * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
   *
   * // combines values from balance & nonce as it updates
   * api.combineLatest([
   *   api.rpc.chain.subscribeNewHeads,
   *   (cb) => api.query.system.account(address, cb)
   * ], ([head, [balance, nonce]]) => {
   *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
   * });
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/require-await


  async combineLatest(fns, callback) {
    const combinator = new _Combinator.Combinator(fns, callback);
    return () => {
      combinator.unsubscribe();
    };
  }

}

exports.ApiPromise = ApiPromise;

},{"../base/index.js":140,"./Combinator.js":146,"./decorateMethod.js":147,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],146:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Combinator = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
var _allHasFired = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("allHasFired");

var _callback = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("callback");

var _fired = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("fired");

var _fns = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("fns");

var _isActive = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isActive");

var _results = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("results");

var _subscriptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("subscriptions");

class Combinator {
  constructor(fns, callback) {
    Object.defineProperty(this, _allHasFired, {
      writable: true,
      value: false
    });
    Object.defineProperty(this, _callback, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _fired, {
      writable: true,
      value: []
    });
    Object.defineProperty(this, _fns, {
      writable: true,
      value: []
    });
    Object.defineProperty(this, _isActive, {
      writable: true,
      value: true
    });
    Object.defineProperty(this, _results, {
      writable: true,
      value: []
    });
    Object.defineProperty(this, _subscriptions, {
      writable: true,
      value: []
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback] = callback; // eslint-disable-next-line @typescript-eslint/require-await

    (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions] = fns.map(async (input, index) => {
      const [fn, ...args] = Array.isArray(input) ? input : [input];

      (0, _classPrivateFieldLooseBase2.default)(this, _fired)[_fired].push(false);

      (0, _classPrivateFieldLooseBase2.default)(this, _fns)[_fns].push(fn); // Not quite 100% how to have a variable number at the front here
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types


      return fn(...args, this._createCallback(index));
    });
  }

  _allHasFired() {
    var _classPrivateFieldLoo;

    (_classPrivateFieldLoo = (0, _classPrivateFieldLooseBase2.default)(this, _allHasFired))[_allHasFired] || (_classPrivateFieldLoo[_allHasFired] = (0, _classPrivateFieldLooseBase2.default)(this, _fired)[_fired].filter(hasFired => !hasFired).length === 0);
    return (0, _classPrivateFieldLooseBase2.default)(this, _allHasFired)[_allHasFired];
  }

  _createCallback(index) {
    return value => {
      (0, _classPrivateFieldLooseBase2.default)(this, _fired)[_fired][index] = true;
      (0, _classPrivateFieldLooseBase2.default)(this, _results)[_results][index] = value;

      this._triggerUpdate();
    };
  }

  _triggerUpdate() {
    if (!(0, _classPrivateFieldLooseBase2.default)(this, _isActive)[_isActive] || !(0, _util.isFunction)((0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback]) || !this._allHasFired()) {
      return;
    }

    try {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      (0, _classPrivateFieldLooseBase2.default)(this, _callback)[_callback]((0, _classPrivateFieldLooseBase2.default)(this, _results)[_results]);
    } catch (error) {// swallow, we don't want the handler to trip us up
    }
  }

  unsubscribe() {
    if (!(0, _classPrivateFieldLooseBase2.default)(this, _isActive)[_isActive]) {
      return;
    }

    (0, _classPrivateFieldLooseBase2.default)(this, _isActive)[_isActive] = false; // eslint-disable-next-line @typescript-eslint/no-misused-promises

    (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions].forEach(async subscription => {
      try {
        const unsubscribe = await subscription;

        if ((0, _util.isFunction)(unsubscribe)) {
          unsubscribe();
        }
      } catch (error) {// ignore
      }
    });
  }

}

exports.Combinator = Combinator;

},{"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],147:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promiseTracker = promiseTracker;
exports.toPromiseMethod = toPromiseMethod;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
// a Promise completion tracker, wrapping an isComplete variable that ensures the promise only resolves once
function promiseTracker(resolve, reject) {
  let isCompleted = false;
  return {
    reject: error => {
      if (!isCompleted) {
        isCompleted = true;
        reject(error);
      }

      return _rxjs.EMPTY;
    },
    resolve: value => {
      if (!isCompleted) {
        isCompleted = true;
        resolve(value);
      }
    }
  };
} // extract the arguments and callback params from a value array possibly containing a callback


function extractArgs(args, needsCallback) {
  let callback;
  const actualArgs = args.slice(); // If the last arg is a function, we pop it, put it into callback.
  // actualArgs will then hold the actual arguments to be passed to `method`

  if (args.length && (0, _util.isFunction)(args[args.length - 1])) {
    callback = actualArgs.pop();
  } // When we need a subscription, ensure that a valid callback is actually passed


  (0, _util.assert)(!needsCallback || (0, _util.isFunction)(callback), 'Expected a callback to be passed with subscriptions');
  return [actualArgs, callback];
} // Decorate a call for a single-shot result - retrieve and then immediate unsubscribe


function decorateCall(method, args) {
  return new Promise((resolve, reject) => {
    // single result tracker - either reject with Error or resolve with Codec result
    const tracker = promiseTracker(resolve, reject); // encoding errors reject immediately, any result unsubscribes and resolves

    const subscription = method(...args).pipe((0, _rxjs.catchError)(error => tracker.reject(error))).subscribe(result => {
      tracker.resolve(result);
      setTimeout(() => subscription.unsubscribe(), 0);
    });
  });
} // Decorate a subscription where we have a result callback specified


function decorateSubscribe(method, args, resultCb) {
  return new Promise((resolve, reject) => {
    // either reject with error or resolve with unsubscribe callback
    const tracker = promiseTracker(resolve, reject); // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback

    const subscription = method(...args).pipe((0, _rxjs.catchError)(error => tracker.reject(error)), (0, _rxjs.tap)(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe(result => {
      // queue result (back of queue to clear current)
      setTimeout(() => resultCb(result), 0);
    });
  });
}
/**
 * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
 */


function toPromiseMethod(method, options) {
  const needsCallback = !!(options && options.methodName && options.methodName.includes('subscribe'));
  return function (...args) {
    const [actualArgs, resultCb] = extractArgs(args, needsCallback);
    return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options === null || options === void 0 ? void 0 : options.overrideNoSub) || method, actualArgs);
  };
}

},{"@polkadot/util":640,"rxjs":746}],148:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ApiPromise", {
  enumerable: true,
  get: function () {
    return _Api.ApiPromise;
  }
});
Object.defineProperty(exports, "toPromiseMethod", {
  enumerable: true,
  get: function () {
    return _decorateMethod.toPromiseMethod;
  }
});

var _Api = require("./Api.js");

var _decorateMethod = require("./decorateMethod.js");

},{"./Api.js":145,"./decorateMethod.js":147}],149:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiRx = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../base/index.js");

var _decorateMethod = require("./decorateMethod.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * # @polkadot/api/rx
 *
 *  ## Overview
 *
 * @name ApiRx
 *
 * @description
 * ApiRx is a powerful RxJS Observable wrapper around the RPC and interfaces on the Polkadot network. As a full Observable API, all interface calls return RxJS Observables, including the static `.create(...)`. In the same fashion and subscription-based methods return long-running Observables that update with the latest values.
 *
 * The API is well suited to real-time applications where the latest state is needed, unlocking the subscription-based features of Polkadot (and Substrate) clients. Some familiarity with RxJS is a requirement to use the API, however just understanding `.subscribe` and `.pipe` on Observables will unlock full-scale use thereof.
 *
 * @see [[ApiPromise]]
 *
 * ## Usage
 *
 * Making rpc calls -
 * <BR>
 *
 * ```javascript
 * import ApiRx from '@polkadot/api/rx';
 *
 * // initialize via Promise & static create
 * const api = await ApiRx.create().toPromise();
 *
 * // make a call to retrieve the current network head
 * api.rpc.chain.subscribeNewHeads().subscribe((header) => {
 *   console.log(`Chain is at #${header.number}`);
 * });
 * ```
 * <BR>
 *
 * Subscribing to chain state -
 * <BR>
 *
 * ```javascript
 * import { combineLatest, pairwise, switchMap } from 'rxjs';
 * import { ApiRx, WsProvider } from '@polkadot/api';
 *
 *
 * // initialize a provider with a specific endpoint
 * const provider = new WsProvider('wss://example.com:9944')
 *
 * // initialize via isReady & new with specific provider
 * new ApiRx({ provider })
 *   .isReady
 *   .pipe(
 *     switchMap((api) =>
 *       combineLatest([
 *         api.query.timestamp.blockPeriod(),
 *         api.query.timestamp.now().pipe(pairwise())
 *       ])
 *     )
 *   )
 *   .subscribe(([blockPeriod, timestamp]) => {
 *      const elapsed = timestamp[1].toNumber() - timestamp[0].toNumber();
 *      console.log(`timestamp ${timestamp[1]} \nelapsed ${elapsed} \n(${blockPeriod}s target)`);
 *   });
 * ```
 * <BR>
 *
 * Submitting a transaction -
 * <BR>
 *
 * ```javascript
 * import { first, switchMap } from 'rxjs';
 * import ApiRx from '@polkadot/api/rx';
 *
 * // import the test keyring (already has dev keys for Alice, Bob, Charlie, Eve & Ferdie)
 * import testingPairs from '@polkadot/keyring/testingPairs';
 * const keyring = testingPairs();
 *
 * // get api via Promise
 * const api = await ApiRx.create().toPromise();
 *
 * // retrieve nonce for the account
 * api.query.system
 *   .account(keyring.alice.address)
 *   .pipe(
 *      first(),
 *      // pipe nonce into transfer
 *      switchMap(([nonce]) =>
 *        api.tx.balances
 *          // create transfer
 *          .transfer(keyring.bob.address, 12345)
 *          // sign the transaction
 *          .sign(keyring.alice, { nonce })
 *          // send the transaction
 *          .send()
 *      )
 *   )
 *   // subscribe to overall result
 *   .subscribe(({ status }) => {
 *     if (status.isInBlock) {
 *       console.log('Completed at block hash', status.asFinalized.toHex());
 *     }
 *   });
 * ```
 */
var _isReadyRx = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isReadyRx");

class ApiRx extends _index.ApiBase {
  /**
   * @description Create an instance of the ApiRx class
   * @param options Options to create an instance. Can be either [[ApiOptions]] or [[WsProvider]]
   * @example
   * <BR>
   *
   * ```javascript
   * import { switchMap } from 'rxjs';
   * import Api from '@polkadot/api/rx';
   *
   * new Api().isReady
   *   .pipe(
   *     switchMap((api) =>
   *       api.rpc.chain.subscribeNewHeads()
   *   ))
   *   .subscribe((header) => {
   *     console.log(`new block #${header.number.toNumber()}`);
   *   });
   * ```
   */
  constructor(options) {
    super(options, 'rxjs', _decorateMethod.toRxMethod);
    Object.defineProperty(this, _isReadyRx, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyRx)[_isReadyRx] = (0, _rxjs.from)( // You can create an observable from an event, however my mind groks this form better
    new Promise(resolve => {
      super.on('ready', () => resolve(this));
    }));
  }
  /**
   * @description Creates an ApiRx instance using the supplied provider. Returns an Observable containing the actual Api instance.
   * @param options options that is passed to the class constructor. Can be either [[ApiOptions]] or [[WsProvider]]
   * @example
   * <BR>
   *
   * ```javascript
   * import { switchMap } from 'rxjs';
   * import Api from '@polkadot/api/rx';
   *
   * Api.create()
   *   .pipe(
   *     switchMap((api) =>
   *       api.rpc.chain.subscribeNewHeads()
   *   ))
   *   .subscribe((header) => {
   *     console.log(`new block #${header.number.toNumber()}`);
   *   });
   * ```
   */


  static create(options) {
    return new ApiRx(options).isReady;
  }
  /**
   * @description Observable that returns the first time we are connected and loaded
   */


  get isReady() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyRx)[_isReadyRx];
  }
  /**
   * @description Returns a clone of this ApiRx instance (new underlying provider connection)
   */


  clone() {
    return new ApiRx((0, _util.objectSpread)({}, this._options, {
      source: this
    }));
  }

}

exports.ApiRx = ApiRx;

},{"../base/index.js":140,"./decorateMethod.js":150,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640,"rxjs":746}],150:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toRxMethod = toRxMethod;

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
function toRxMethod(method) {
  return method;
}

},{}],151:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ApiRx", {
  enumerable: true,
  get: function () {
    return _Api.ApiRx;
  }
});
Object.defineProperty(exports, "toRxMethod", {
  enumerable: true,
  get: function () {
    return _decorateMethod.toRxMethod;
  }
});

var _Api = require("./Api.js");

var _decorateMethod = require("./decorateMethod.js");

},{"./Api.js":149,"./decorateMethod.js":150}],152:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SubmittableResult = void 0;

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
const recordIdentity = record => record;

function filterAndApply(events, section, methods, onFound) {
  return events.filter(({
    event
  }) => section === event.section && methods.includes(event.method)).map(record => onFound(record));
}

function getDispatchError({
  event: {
    data: [dispatchError]
  }
}) {
  return dispatchError;
}

function getDispatchInfo({
  event: {
    data,
    method
  }
}) {
  return method === 'ExtrinsicSuccess' ? data[0] : data[1];
}

function extractError(events = []) {
  return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];
}

function extractInfo(events = []) {
  return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];
}

class SubmittableResult {
  constructor({
    dispatchError,
    dispatchInfo,
    events,
    internalError,
    status
  }) {
    this.dispatchError = void 0;
    this.dispatchInfo = void 0;
    this.internalError = void 0;
    this.events = void 0;
    this.status = void 0;
    this.dispatchError = dispatchError || extractError(events);
    this.dispatchInfo = dispatchInfo || extractInfo(events);
    this.events = events || [];
    this.internalError = internalError;
    this.status = status;
  }

  get isCompleted() {
    return this.isError || this.status.isInBlock || this.status.isFinalized;
  }

  get isError() {
    return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
  }

  get isFinalized() {
    return this.status.isFinalized;
  }

  get isInBlock() {
    return this.status.isInBlock;
  }

  get isWarning() {
    return this.status.isRetracted;
  }
  /**
   * @description Filters EventRecords for the specified method & section (there could be multiple)
   */


  filterRecords(section, method) {
    return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);
  }
  /**
   * @description Finds an EventRecord for the specified method & section
   */


  findRecord(section, method) {
    return this.filterRecords(section, method)[0];
  }
  /**
   * @description Creates a human representation of the output
   */


  toHuman(isExtended) {
    var _this$dispatchError, _this$dispatchInfo, _this$internalError;

    return {
      dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),
      dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),
      events: this.events.map(e => e.toHuman(isExtended)),
      internalError: (_this$internalError = this.internalError) === null || _this$internalError === void 0 ? void 0 : _this$internalError.message.toString(),
      status: this.status.toHuman(isExtended)
    };
  }

}

exports.SubmittableResult = SubmittableResult;

},{}],153:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createClass = createClass;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _index = require("../util/index.js");

var _Result = require("./Result.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable no-dupe-class-members */
const identity = input => input;

function makeEraOptions(api, registry, partialOptions, {
  header,
  mortalLength,
  nonce
}) {
  if (!header) {
    if ((0, _util.isNumber)(partialOptions.era)) {
      // since we have no header, it is immortal, remove any option overrides
      // so we only supply the genesisHash and no era to the construction
      delete partialOptions.era;
      delete partialOptions.blockHash;
    }

    return makeSignOptions(api, partialOptions, {
      nonce
    });
  }

  return makeSignOptions(api, partialOptions, {
    blockHash: header.hash,
    era: registry.createType('ExtrinsicEra', {
      current: header.number,
      period: partialOptions.era || mortalLength
    }),
    nonce
  });
}

function makeSignAndSendOptions(partialOptions, statusCb) {
  let options = {};

  if ((0, _util.isFunction)(partialOptions)) {
    statusCb = partialOptions;
  } else {
    options = (0, _util.objectSpread)({}, partialOptions);
  }

  return [options, statusCb];
}

function makeSignOptions(api, partialOptions, extras) {
  return (0, _util.objectSpread)({
    blockHash: api.genesisHash,
    genesisHash: api.genesisHash
  }, partialOptions, extras, {
    runtimeVersion: api.runtimeVersion,
    signedExtensions: api.registry.signedExtensions,
    version: api.extrinsicType
  });
}

function optionsOrNonce(partialOptions = {}) {
  return (0, _util.isBn)(partialOptions) || (0, _util.isNumber)(partialOptions) ? {
    nonce: partialOptions
  } : partialOptions;
}

function createClass({
  api,
  apiType,
  decorateMethod
}) {
  // an instance of the base extrinsic for us to extend
  const ExtrinsicBase = api.registry.createClass('Extrinsic');

  var _ignoreStatusCb = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("ignoreStatusCb");

  var _transformResult = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("transformResult");

  var _observeSign = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("observeSign");

  var _observeStatus = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("observeStatus");

  var _observeSend = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("observeSend");

  var _observeSubscribe = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("observeSubscribe");

  var _signViaSigner = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("signViaSigner");

  var _updateSigner = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("updateSigner");

  class Submittable extends ExtrinsicBase {
    constructor(registry, extrinsic) {
      super(registry, extrinsic, {
        version: api.extrinsicType
      });
      Object.defineProperty(this, _ignoreStatusCb, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _transformResult, {
        writable: true,
        value: identity
      });
      Object.defineProperty(this, _observeSign, {
        writable: true,
        value: (account, partialOptions) => {
          const address = (0, _index.isKeyringPair)(account) ? account.address : account.toString();
          const options = optionsOrNonce(partialOptions);
          let updateId;
          return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe((0, _rxjs.first)(), (0, _rxjs.mergeMap)(async signingInfo => {
            const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);

            if ((0, _index.isKeyringPair)(account)) {
              this.sign(account, eraOptions);
            } else {
              updateId = await (0, _classPrivateFieldLooseBase2.default)(this, _signViaSigner)[_signViaSigner](address, eraOptions, signingInfo.header);
            }
          }), (0, _rxjs.mapTo)(updateId));
        }
      });
      Object.defineProperty(this, _observeStatus, {
        writable: true,
        value: (hash, status) => {
          if (!status.isFinalized && !status.isInBlock) {
            return (0, _rxjs.of)((0, _classPrivateFieldLooseBase2.default)(this, _transformResult)[_transformResult](new _Result.SubmittableResult({
              status
            })));
          }

          const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;
          return api.derive.tx.events(blockHash).pipe((0, _rxjs.map)(({
            block,
            events
          }) => (0, _classPrivateFieldLooseBase2.default)(this, _transformResult)[_transformResult](new _Result.SubmittableResult({
            events: (0, _index.filterEvents)(hash, block, events, status),
            status
          }))), (0, _rxjs.catchError)(internalError => (0, _rxjs.of)((0, _classPrivateFieldLooseBase2.default)(this, _transformResult)[_transformResult](new _Result.SubmittableResult({
            internalError,
            status
          })))));
        }
      });
      Object.defineProperty(this, _observeSend, {
        writable: true,
        value: (updateId = -1) => {
          return api.rpc.author.submitExtrinsic(this).pipe((0, _rxjs.tap)(hash => {
            (0, _classPrivateFieldLooseBase2.default)(this, _updateSigner)[_updateSigner](updateId, hash);
          }));
        }
      });
      Object.defineProperty(this, _observeSubscribe, {
        writable: true,
        value: (updateId = -1) => {
          const hash = this.hash;
          return api.rpc.author.submitAndWatchExtrinsic(this).pipe((0, _rxjs.switchMap)(status => (0, _classPrivateFieldLooseBase2.default)(this, _observeStatus)[_observeStatus](hash, status)), (0, _rxjs.tap)(status => {
            (0, _classPrivateFieldLooseBase2.default)(this, _updateSigner)[_updateSigner](updateId, status);
          }));
        }
      });
      Object.defineProperty(this, _signViaSigner, {
        writable: true,
        value: async (address, options, header) => {
          const signer = options.signer || api.signer;
          (0, _util.assert)(signer, 'No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
          const payload = this.registry.createType('SignerPayload', (0, _util.objectSpread)({}, options, {
            address,
            blockNumber: header ? header.number : 0,
            method: this.method
          }));
          let result;

          if (signer.signPayload) {
            result = await signer.signPayload(payload.toPayload());
          } else if (signer.signRaw) {
            result = await signer.signRaw(payload.toRaw());
          } else {
            throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
          } // Here we explicitly call `toPayload()` again instead of working with an object
          // (reference) as passed to the signer. This means that we are sure that the
          // payload data is not modified from our inputs, but the signer


          super.addSignature(address, result.signature, payload.toPayload());
          return result.id;
        }
      });
      Object.defineProperty(this, _updateSigner, {
        writable: true,
        value: (updateId, status) => {
          if (updateId !== -1 && api.signer && api.signer.update) {
            api.signer.update(updateId, status);
          }
        }
      });
      (0, _classPrivateFieldLooseBase2.default)(this, _ignoreStatusCb)[_ignoreStatusCb] = apiType === 'rxjs';
    } // dry run an extrinsic


    dryRun(account, optionsOrHash) {
      if ((0, _util.isString)(optionsOrHash) || (0, _util.isU8a)(optionsOrHash)) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), optionsOrHash));
      } // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call


      return decorateMethod(() => (0, _classPrivateFieldLooseBase2.default)(this, _observeSign)[_observeSign](account, optionsOrHash).pipe((0, _rxjs.switchMap)(() => api.rpc.system.dryRun(this.toHex()))))();
    } // calculate the payment info for this transaction (if signed and submitted)


    paymentInfo(account, optionsOrHash) {
      if ((0, _util.isString)(optionsOrHash) || (0, _util.isU8a)(optionsOrHash)) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return decorateMethod(() => api.rpc.payment.queryInfo(this.toHex(), optionsOrHash));
      }

      const [allOptions] = makeSignAndSendOptions(optionsOrHash);
      const address = (0, _index.isKeyringPair)(account) ? account.address : account.toString(); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe((0, _rxjs.first)(), (0, _rxjs.switchMap)(signingInfo => {
        // setup our options (same way as in signAndSend)
        const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);
        const signOptions = makeSignOptions(api, eraOptions, {});
        this.signFake(address, signOptions);
        return api.rpc.payment.queryInfo(this.toHex());
      })))();
    } // send with an immediate Hash result
    // send implementation for both immediate Hash and statusCb variants


    send(statusCb) {
      const isSubscription = api.hasSubscriptions && ((0, _classPrivateFieldLooseBase2.default)(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

      return decorateMethod(isSubscription ? (0, _classPrivateFieldLooseBase2.default)(this, _observeSubscribe)[_observeSubscribe] : (0, _classPrivateFieldLooseBase2.default)(this, _observeSend)[_observeSend])(statusCb);
    }
    /**
     * @description Sign a transaction, returning the this to allow chaining, i.e. .sign(...).send(). When options, e.g. nonce/blockHash are not specified, it will be inferred. To retrieve eg. nonce use `signAsync` (the preferred interface, this is provided for backwards compatibility)
     * @deprecated
     */


    sign(account, partialOptions) {
      super.sign(account, makeSignOptions(api, optionsOrNonce(partialOptions), {}));
      return this;
    }
    /**
     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `sign(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
     */


    signAsync(account, partialOptions) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
      return decorateMethod(() => (0, _classPrivateFieldLooseBase2.default)(this, _observeSign)[_observeSign](account, partialOptions).pipe((0, _rxjs.mapTo)(this)))();
    } // signAndSend with an immediate Hash result
    // signAndSend implementation for all 3 cases above


    signAndSend(account, partialOptions, optionalStatusCb) {
      const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
      const isSubscription = api.hasSubscriptions && ((0, _classPrivateFieldLooseBase2.default)(this, _ignoreStatusCb)[_ignoreStatusCb] || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

      return decorateMethod(() => (0, _classPrivateFieldLooseBase2.default)(this, _observeSign)[_observeSign](account, options).pipe((0, _rxjs.switchMap)(updateId => isSubscription ? (0, _classPrivateFieldLooseBase2.default)(this, _observeSubscribe)[_observeSubscribe](updateId) : (0, _classPrivateFieldLooseBase2.default)(this, _observeSend)[_observeSend](updateId))) // FIXME This is wrong, SubmittableResult is _not_ a codec
      )(statusCb);
    } // adds a transform to the result, applied before result is returned


    withResultTransform(transform) {
      (0, _classPrivateFieldLooseBase2.default)(this, _transformResult)[_transformResult] = transform;
      return this;
    }

  }

  return Submittable;
}

},{"../util/index.js":159,"./Result.js":152,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640,"rxjs":746}],154:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSubmittable = createSubmittable;

var _createClass = require("./createClass.js");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
function createSubmittable(apiType, api, decorateMethod) {
  const Submittable = (0, _createClass.createClass)({
    api,
    apiType,
    decorateMethod
  });
  return extrinsic => new Submittable(api.registry, extrinsic);
}

},{"./createClass.js":153}],155:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "SubmittableResult", {
  enumerable: true,
  get: function () {
    return _Result.SubmittableResult;
  }
});
Object.defineProperty(exports, "createSubmittable", {
  enumerable: true,
  get: function () {
    return _createSubmittable.createSubmittable;
  }
});

var _createSubmittable = require("./createSubmittable.js");

var _Result = require("./Result.js");

},{"./Result.js":152,"./createSubmittable.js":154}],156:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.augmentObject = augmentObject;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
const l = (0, _util.logger)('api/augment');

function logLength(type, values, and = []) {
  return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';
}

function logValues(type, values) {
  return values.length ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';
} // log details to console


function warn(prefix, type, [added, removed]) {
  if (added.length || removed.length) {
    l.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
  }
}

function findSectionExcludes(a, b) {
  return a.filter(s => !b.includes(s));
}

function findSectionIncludes(a, b) {
  return a.filter(s => b.includes(s));
}

function extractSections(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = Object.keys(dst);
  return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];
}

function findMethodExcludes(src, dst) {
  const srcSections = Object.keys(src);
  const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
  const excludes = [];

  for (let s = 0; s < dstSections.length; s++) {
    const section = dstSections[s];
    const srcMethods = Object.keys(src[section]);
    const dstMethods = Object.keys(dst[section]);
    excludes.push(...dstMethods.filter(m => !srcMethods.includes(m)).map(m => `${section}.${m}`));
  }

  return excludes;
}

function extractMethods(src, dst) {
  return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];
}

function lazySection(src, dst) {
  const creator = m => src[m];

  const methods = Object.keys(src);

  for (let i = 0; i < methods.length; i++) {
    const method = methods[i]; // We use hasOwnproperty here to only check for the existence of the key,
    // instead of reading dst[section][method] which will evaluate when already
    // set as a lazy value previously

    if (!Object.prototype.hasOwnProperty.call(dst, method)) {
      (0, _util.lazyMethod)(dst, method, creator);
    }
  }
}
/**
 * @description Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
 * already available, but rather just adds new missing items into the result object.
 * @internal
 */


function augmentObject(prefix, src, dst, fromEmpty = false) {
  fromEmpty && (0, _util.objectClear)(dst); // NOTE: This part is slightly problematic since it will get the
  // values for at least all the sections and the names of the methods
  // (Since methods won't be decorated before lazy, this _may_ be ok)

  if (prefix && Object.keys(dst).length) {
    warn(prefix, 'modules', extractSections(src, dst));
    warn(prefix, 'calls', extractMethods(src, dst));
  }

  const sections = Object.keys(src);

  for (let i = 0; i < sections.length; i++) {
    const section = sections[i]; // We don't set here with a lazy interface, we decorate based
    // on the top-level structure (this bypasses adding lazy onto lazy)

    if (!dst[section]) {
      dst[section] = {};
    }

    lazySection(src[section], dst[section]);
  }

  return dst;
}

},{"@polkadot/util":640}],157:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateDeriveSections = decorateDeriveSections;

var _apiDerive = require("@polkadot/api-derive");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * This is a section decorator which keeps all type information.
 */
function decorateDeriveSections(decorateMethod, derives) {
  const getKeys = s => Object.keys(derives[s]);

  const creator = (s, m) => decorateMethod(derives[s][m]);

  const result = {};
  const names = Object.keys(derives);

  for (let i = 0; i < names.length; i++) {
    (0, _apiDerive.lazyDeriveSection)(result, names[i], getKeys, creator);
  }

  return result;
}

},{"@polkadot/api-derive":77}],158:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterEvents = filterEvents;

var _logging = require("./logging.js");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
function filterEvents(extHash, {
  block: {
    extrinsics,
    header
  }
}, allEvents, status) {
  // extrinsics to hashes
  for (const [index, extrinsic] of extrinsics.entries()) {
    if (extrinsic.hash.eq(extHash)) {
      return allEvents.filter(({
        phase
      }) => // only ApplyExtrinsic has the extrinsic index
      phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(index));
    }
  } // if we do get the block after finalized, it _should_ be there
  // only warn on filtering with isInBlock (finalization finalizes after)


  if (status.isInBlock) {
    const allHashes = extrinsics.map(x => x.hash.toHex());

    _logging.l.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${extHash.toHex()} inside ${allHashes.join(', ')}`);
  }

  return undefined;
}

},{"./logging.js":161}],159:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  filterEvents: true,
  isKeyringPair: true,
  l: true
};
Object.defineProperty(exports, "filterEvents", {
  enumerable: true,
  get: function () {
    return _filterEvents.filterEvents;
  }
});
Object.defineProperty(exports, "isKeyringPair", {
  enumerable: true,
  get: function () {
    return _isKeyringPair.isKeyringPair;
  }
});
Object.defineProperty(exports, "l", {
  enumerable: true,
  get: function () {
    return _logging.l;
  }
});

var _decorate = require("./decorate.js");

Object.keys(_decorate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _decorate[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decorate[key];
    }
  });
});

var _filterEvents = require("./filterEvents.js");

var _isKeyringPair = require("./isKeyringPair.js");

var _logging = require("./logging.js");

},{"./decorate.js":157,"./filterEvents.js":158,"./isKeyringPair.js":160,"./logging.js":161}],160:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isKeyringPair = isKeyringPair;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
function isKeyringPair(account) {
  return (0, _util.isFunction)(account.sign);
}

},{"@polkadot/util":640}],161:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.l = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
const l = (0, _util.logger)('api/util');
exports.l = l;

},{"@polkadot/util":640}],162:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractStorageArgs = extractStorageArgs;

var _util = require("@polkadot/util");

// Copyright 2017-2019 @polkadot/api authors & contributors
// SPDX-License-Identifier: Apache-2.0
function sig({
  lookup
}, {
  method,
  section
}, args) {
  return `${section}.${method}(${args.map(a => lookup.getTypeDef(a).type).join(', ')})`;
} // sets up the arguments in the form of [creator, args] ready to be used in a storage
// call. Additionally, it verifies that the correct number of arguments have been passed


function extractStorageArgs(registry, creator, _args) {
  const args = _args.filter(a => !(0, _util.isUndefined)(a));

  if (creator.meta.type.isPlain) {
    (0, _util.assert)(args.length === 0, () => `${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
  } else {
    const {
      hashers,
      key
    } = creator.meta.type.asMap;
    const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map(t => t);
    (0, _util.assert)(args.length === keys.length, () => `${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);
  } // pass as tuple


  return [creator, args];
}

},{"@polkadot/util":640}],163:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  Keyring: true,
  decodeAddress: true,
  encodeAddress: true,
  setSS58Format: true,
  createPair: true,
  packageInfo: true,
  createTestKeyring: true,
  createTestPairs: true
};
Object.defineProperty(exports, "Keyring", {
  enumerable: true,
  get: function () {
    return _keyring.Keyring;
  }
});
Object.defineProperty(exports, "createPair", {
  enumerable: true,
  get: function () {
    return _index.createPair;
  }
});
Object.defineProperty(exports, "createTestKeyring", {
  enumerable: true,
  get: function () {
    return _testing.createTestKeyring;
  }
});
Object.defineProperty(exports, "createTestPairs", {
  enumerable: true,
  get: function () {
    return _testingPairs.createTestPairs;
  }
});
Object.defineProperty(exports, "decodeAddress", {
  enumerable: true,
  get: function () {
    return _utilCrypto.decodeAddress;
  }
});
Object.defineProperty(exports, "encodeAddress", {
  enumerable: true,
  get: function () {
    return _utilCrypto.encodeAddress;
  }
});
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});
Object.defineProperty(exports, "setSS58Format", {
  enumerable: true,
  get: function () {
    return _utilCrypto.setSS58Format;
  }
});

var _keyring = require("./keyring.js");

var _utilCrypto = require("@polkadot/util-crypto");

var _defaults = require("./defaults.js");

Object.keys(_defaults).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _defaults[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _defaults[key];
    }
  });
});

var _index = require("./pair/index.js");

var _packageInfo = require("./packageInfo.js");

var _testing = require("./testing.js");

var _testingPairs = require("./testingPairs.js");

},{"./defaults.js":164,"./keyring.js":167,"./packageInfo.js":168,"./pair/index.js":172,"./testing.js":176,"./testingPairs.js":177,"@polkadot/util-crypto":513}],164:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEV_SEED = exports.DEV_PHRASE = void 0;
// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
// default substrate dev phrase
const DEV_PHRASE = 'bottom drive obey lake curtain smoke basket hold race lonely fit walk'; // seed from the above phrase

exports.DEV_PHRASE = DEV_PHRASE;
const DEV_SEED = '0xfac7959dbfe72f052e5a0c3c8d6530f202b02fd8f9f5ca3580ec8deb7797479e';
exports.DEV_SEED = DEV_SEED;

},{}],165:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _util = require("@polkadot/util");

var _packageInfo = require("@polkadot/util-crypto/packageInfo");

var _packageInfo2 = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _util.detectPackage)(_packageInfo2.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_util.packageInfo, _packageInfo.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/keyring")
},{"./packageInfo.js":168,"@polkadot/util":640,"@polkadot/util-crypto/packageInfo":546}],166:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {};
exports.default = void 0;

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});
// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
var _default = _bundle.Keyring;
exports.default = _default;

},{"./bundle.js":163,"./detectPackage.js":165}],167:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keyring = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _defaults = require("./defaults.js");

var _index = require("./pair/index.js");

var _pairs2 = require("./pairs.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
const PairFromSeed = {
  ecdsa: seed => (0, _utilCrypto.secp256k1PairFromSeed)(seed),
  ed25519: seed => (0, _utilCrypto.ed25519PairFromSeed)(seed),
  ethereum: seed => (0, _utilCrypto.secp256k1PairFromSeed)(seed),
  sr25519: seed => (0, _utilCrypto.sr25519PairFromSeed)(seed)
};

function pairToPublic({
  publicKey
}) {
  return publicKey;
}
/**
 * # @polkadot/keyring
 *
 * ## Overview
 *
 * @name Keyring
 * @summary Keyring management of user accounts
 * @description Allows generation of keyring pairs from a variety of input combinations, such as
 * json object containing account address or public key, account metadata, and account encoded using
 * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,
 * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.
 * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair
 * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform
 * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with
 * an account may be obtained using `toJson` accompanied by the account passphrase.
 */


var _pairs = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("pairs");

var _type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("type");

var _ss = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("ss58");

class Keyring {
  constructor(options = {}) {
    Object.defineProperty(this, _pairs, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _type, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _ss, {
      writable: true,
      value: void 0
    });
    this.decodeAddress = _utilCrypto.decodeAddress;

    this.encodeAddress = (address, ss58Format) => {
      return this.type === 'ethereum' ? (0, _utilCrypto.ethereumEncode)(address) : (0, _utilCrypto.encodeAddress)(address, (0, _util.isUndefined)(ss58Format) ? (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] : ss58Format);
    };

    options.type = options.type || 'ed25519';
    (0, _util.assert)(['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined'), () => `Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || 'unknown'}`);
    (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs] = new _pairs2.Pairs();
    (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] = options.ss58Format;
    (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = options.type;
  }
  /**
   * @description retrieve the pairs (alias for getPairs)
   */


  get pairs() {
    return this.getPairs();
  }
  /**
   * @description retrieve the publicKeys (alias for getPublicKeys)
   */


  get publicKeys() {
    return this.getPublicKeys();
  }
  /**
   * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
   */


  get type() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type];
  }
  /**
   * @name addPair
   * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   */


  addPair(pair) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].add(pair);
  }
  /**
   * @name addFromAddress
   * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
   * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from them that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */


  addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {
    const publicKey = this.decodeAddress(address, ignoreChecksum);
    return this.addPair((0, _index.createPair)({
      toSS58: this.encodeAddress,
      type
    }, {
      publicKey,
      secretKey: new Uint8Array()
    }, meta, encoded, encType));
  }
  /**
   * @name addFromJson
   * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from it that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */


  addFromJson(json, ignoreChecksum) {
    return this.addPair(this.createFromJson(json, ignoreChecksum));
  }
  /**
   * @name addFromMnemonic
   * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
   * argument and a metadata argument that contains account information (that may be obtained from the json file
   * of an account backup), and then generates a keyring pair from it that it passes to
   * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */


  addFromMnemonic(mnemonic, meta = {}, type = this.type) {
    return this.addFromUri(mnemonic, meta, type);
  }
  /**
   * @name addFromPair
   * @summary Stores an account created from an explicit publicKey/secreteKey combination
   */


  addFromPair(pair, meta = {}, type = this.type) {
    return this.addPair(this.createFromPair(pair, meta, type));
  }
  /**
   * @name addFromSeed
   * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
   * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
   * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
   * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
   */


  addFromSeed(seed, meta = {}, type = this.type) {
    return this.addPair((0, _index.createPair)({
      toSS58: this.encodeAddress,
      type
    }, PairFromSeed[type](seed), meta, null));
  }
  /**
   * @name addFromUri
   * @summary Creates an account via an suri
   * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
   */


  addFromUri(suri, meta = {}, type = this.type) {
    return this.addPair(this.createFromUri(suri, meta, type));
  }
  /**
   * @name createFromJson
   * @description Creates a pair from a JSON keyfile
   */


  createFromJson({
    address,
    encoded,
    encoding: {
      content,
      type,
      version
    },
    meta
  }, ignoreChecksum) {
    (0, _util.assert)(version !== '3' || content[0] === 'pkcs8', () => `Unable to decode non-pkcs8 type, [${content.join(',')}] found}`);
    const cryptoType = version === '0' || !Array.isArray(content) ? this.type : content[1];
    const encType = !Array.isArray(type) ? [type] : type;
    (0, _util.assert)(['ed25519', 'sr25519', 'ecdsa', 'ethereum'].includes(cryptoType), () => `Unknown crypto type ${cryptoType}`); // Here the address and publicKey are 32 bytes and isomorphic. This is why the address field needs to be the public key for ethereum type pairs

    const publicKey = (0, _util.isHex)(address) ? (0, _util.hexToU8a)(address) : this.decodeAddress(address, ignoreChecksum);
    const decoded = (0, _util.isHex)(encoded) ? (0, _util.hexToU8a)(encoded) : (0, _utilCrypto.base64Decode)(encoded);
    return (0, _index.createPair)({
      toSS58: this.encodeAddress,
      type: cryptoType
    }, {
      publicKey,
      secretKey: new Uint8Array()
    }, meta, decoded, encType);
  }
  /**
   * @name createFromPair
   * @summary Creates a pair from an explicit publicKey/secreteKey combination
   */


  createFromPair(pair, meta = {}, type = this.type) {
    return (0, _index.createPair)({
      toSS58: this.encodeAddress,
      type
    }, pair, meta, null);
  }
  /**
   * @name createFromUri
   * @summary Creates a Keypair from an suri
   * @description This creates a pair from the suri, but does not add it to the keyring
   */


  createFromUri(_suri, meta = {}, type = this.type) {
    // here we only aut-add the dev phrase if we have a hard-derived path
    const suri = _suri.startsWith('//') ? `${_defaults.DEV_PHRASE}${_suri}` : _suri;
    const {
      derivePath,
      password,
      path,
      phrase
    } = (0, _utilCrypto.keyExtractSuri)(suri);
    let seed;
    const isPhraseHex = (0, _util.isHex)(phrase, 256);

    if (isPhraseHex) {
      seed = (0, _util.hexToU8a)(phrase);
    } else {
      const parts = phrase.split(' ');

      if ([12, 15, 18, 21, 24].includes(parts.length)) {
        seed = type === 'ethereum' ? (0, _utilCrypto.mnemonicToLegacySeed)(phrase, '', false, 64) : (0, _utilCrypto.mnemonicToMiniSecret)(phrase, password);
      } else {
        (0, _util.assert)(phrase.length <= 32, 'specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');
        seed = (0, _util.stringToU8a)(phrase.padEnd(32));
      }
    }

    const derived = type === 'ethereum' ? isPhraseHex ? PairFromSeed[type](seed) // for eth, if the private key is provided as suri, it must be derived only once
    : (0, _utilCrypto.hdEthereum)(seed, derivePath.substring(1)) : (0, _utilCrypto.keyFromPath)(PairFromSeed[type](seed), path, type);
    return (0, _index.createPair)({
      toSS58: this.encodeAddress,
      type
    }, derived, meta, null);
  }
  /**
   * @name encodeAddress
   * @description Encodes the input into an ss58 representation
   */

  /**
   * @name getPair
   * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
   * @description Returns a keyring pair value from the keyring pair dictionary by performing
   * a key lookup using the provided account address or public key (after decoding it).
   */


  getPair(address) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].get(address);
  }
  /**
   * @name getPairs
   * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
   * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
   */


  getPairs() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].all();
  }
  /**
   * @name getPublicKeys
   * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
   * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
   */


  getPublicKeys() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].all().map(pairToPublic);
  }
  /**
   * @name removePair
   * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
   */


  removePair(address) {
    (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].remove(address);
  }
  /**
   * @name setSS58Format;
   * @description Sets the ss58 format for the keyring
   */


  setSS58Format(ss58) {
    (0, _classPrivateFieldLooseBase2.default)(this, _ss)[_ss] = ss58;
  }
  /**
   * @name toJson
   * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
   * @description Returns a JSON object containing the metadata associated with an account
   * when valid address or public key and when the account passphrase is provided if the account secret
   * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
   * may backup their account to a JSON file that contains this information.
   */


  toJson(address, passphrase) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _pairs)[_pairs].get(address).toJson(passphrase);
  }

}

exports.Keyring = Keyring;

},{"./defaults.js":164,"./pair/index.js":172,"./pairs.js":175,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640,"@polkadot/util-crypto":513}],168:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/keyring',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],169:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodePair = decodePair;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _defaults = require("./defaults.js");

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
const SEED_OFFSET = _defaults.PKCS8_HEADER.length;

function decodePair(passphrase, encrypted, _encType) {
  const encType = Array.isArray(_encType) || (0, _util.isUndefined)(_encType) ? _encType : [_encType];
  const decrypted = (0, _utilCrypto.jsonDecryptData)(encrypted, passphrase, encType);
  const header = decrypted.subarray(0, _defaults.PKCS8_HEADER.length);
  (0, _util.assert)((0, _util.u8aEq)(header, _defaults.PKCS8_HEADER), 'Invalid Pkcs8 header found in body');
  let secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + _defaults.SEC_LENGTH);
  let divOffset = SEED_OFFSET + _defaults.SEC_LENGTH;
  let divider = decrypted.subarray(divOffset, divOffset + _defaults.PKCS8_DIVIDER.length); // old-style, we have the seed here

  if (!(0, _util.u8aEq)(divider, _defaults.PKCS8_DIVIDER)) {
    divOffset = SEED_OFFSET + _defaults.SEED_LENGTH;
    secretKey = decrypted.subarray(SEED_OFFSET, divOffset);
    divider = decrypted.subarray(divOffset, divOffset + _defaults.PKCS8_DIVIDER.length);
    (0, _util.assert)((0, _util.u8aEq)(divider, _defaults.PKCS8_DIVIDER), 'Invalid Pkcs8 divider found in body');
  }

  const pubOffset = divOffset + _defaults.PKCS8_DIVIDER.length;
  const publicKey = decrypted.subarray(pubOffset, pubOffset + _defaults.PUB_LENGTH);
  return {
    publicKey,
    secretKey
  };
}

},{"./defaults.js":170,"@polkadot/util":640,"@polkadot/util-crypto":513}],170:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SEED_LENGTH = exports.SEC_LENGTH = exports.SALT_LENGTH = exports.PUB_LENGTH = exports.PKCS8_HEADER = exports.PKCS8_DIVIDER = void 0;
// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
const PKCS8_DIVIDER = new Uint8Array([161, 35, 3, 33, 0]);
exports.PKCS8_DIVIDER = PKCS8_DIVIDER;
const PKCS8_HEADER = new Uint8Array([48, 83, 2, 1, 1, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);
exports.PKCS8_HEADER = PKCS8_HEADER;
const PUB_LENGTH = 32;
exports.PUB_LENGTH = PUB_LENGTH;
const SALT_LENGTH = 32;
exports.SALT_LENGTH = SALT_LENGTH;
const SEC_LENGTH = 64;
exports.SEC_LENGTH = SEC_LENGTH;
const SEED_LENGTH = 32;
exports.SEED_LENGTH = SEED_LENGTH;

},{}],171:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodePair = encodePair;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _defaults = require("./defaults.js");

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
function encodePair({
  publicKey,
  secretKey
}, passphrase) {
  (0, _util.assert)(secretKey, 'Expected a valid secretKey to be passed to encode');
  const encoded = (0, _util.u8aConcat)(_defaults.PKCS8_HEADER, secretKey, _defaults.PKCS8_DIVIDER, publicKey);

  if (!passphrase) {
    return encoded;
  }

  const {
    params,
    password,
    salt
  } = (0, _utilCrypto.scryptEncode)(passphrase);
  const {
    encrypted,
    nonce
  } = (0, _utilCrypto.naclEncrypt)(encoded, password.subarray(0, 32));
  return (0, _util.u8aConcat)((0, _utilCrypto.scryptToU8a)(salt, params), nonce, encrypted);
}

},{"./defaults.js":170,"@polkadot/util":640,"@polkadot/util-crypto":513}],172:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPair = createPair;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _decode = require("./decode.js");

var _encode = require("./encode.js");

var _toJson = require("./toJson.js");

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
const SIG_TYPE_NONE = new Uint8Array();
const TYPE_FROM_SEED = {
  ecdsa: _utilCrypto.secp256k1PairFromSeed,
  ed25519: _utilCrypto.ed25519PairFromSeed,
  ethereum: _utilCrypto.secp256k1PairFromSeed,
  sr25519: _utilCrypto.sr25519PairFromSeed
};
const TYPE_PREFIX = {
  ecdsa: new Uint8Array([2]),
  ed25519: new Uint8Array([0]),
  ethereum: new Uint8Array([2]),
  sr25519: new Uint8Array([1])
};
const TYPE_SIGNATURE = {
  ecdsa: (m, p) => (0, _utilCrypto.secp256k1Sign)(m, p, 'blake2'),
  ed25519: _utilCrypto.ed25519Sign,
  ethereum: (m, p) => (0, _utilCrypto.secp256k1Sign)(m, p, 'keccak'),
  sr25519: _utilCrypto.sr25519Sign
};
const TYPE_ADDRESS = {
  ecdsa: p => p.length > 32 ? (0, _utilCrypto.blake2AsU8a)(p) : p,
  ed25519: p => p,
  ethereum: p => p.length === 20 ? p : (0, _utilCrypto.keccakAsU8a)((0, _utilCrypto.secp256k1Expand)(p)),
  sr25519: p => p
};

function isLocked(secretKey) {
  return !secretKey || (0, _util.u8aEmpty)(secretKey);
}

function vrfHash(proof, context, extra) {
  return (0, _utilCrypto.blake2AsU8a)((0, _util.u8aConcat)(context || '', extra || '', proof));
}
/**
 * @name createPair
 * @summary Creates a keyring pair object
 * @description Creates a keyring pair object with provided account public key, metadata, and encoded arguments.
 * The keyring pair stores the account state including the encoded address and associated metadata.
 *
 * It has properties whose values are functions that may be called to perform account actions:
 *
 * - `address` function retrieves the address associated with the account.
 * - `decodedPkcs8` function is called with the account passphrase and account encoded public key.
 * It decodes the encoded public key using the passphrase provided to obtain the decoded account public key
 * and associated secret key that are then available in memory, and changes the account address stored in the
 * state of the pair to correspond to the address of the decoded public key.
 * - `encodePkcs8` function when provided with the correct passphrase associated with the account pair
 * and when the secret key is in memory (when the account pair is not locked) it returns an encoded
 * public key of the account.
 * - `meta` is the metadata that is stored in the state of the pair, either when it was originally
 * created or set via `setMeta`.
 * - `publicKey` returns the public key stored in memory for the pair.
 * - `sign` may be used to return a signature by signing a provided message with the secret
 * key (if it is in memory) using Nacl.
 * - `toJson` calls another `toJson` function and provides the state of the pair,
 * it generates arguments to be passed to the other `toJson` function including an encoded public key of the account
 * that it generates using the secret key from memory (if it has been made available in memory)
 * and the optionally provided passphrase argument. It passes a third boolean argument to `toJson`
 * indicating whether the public key has been encoded or not (if a passphrase argument was provided then it is encoded).
 * The `toJson` function that it calls returns a JSON object with properties including the `address`
 * and `meta` that are assigned with the values stored in the corresponding state variables of the account pair,
 * an `encoded` property that is assigned with the encoded public key in hex format, and an `encoding`
 * property that indicates whether the public key value of the `encoded` property is encoded or not.
 */


function createPair({
  toSS58,
  type
}, {
  publicKey,
  secretKey
}, meta = {}, encoded = null, encTypes) {
  const decodePkcs8 = (passphrase, userEncoded) => {
    const decoded = (0, _decode.decodePair)(passphrase, userEncoded || encoded, encTypes);

    if (decoded.secretKey.length === 64) {
      publicKey = decoded.publicKey;
      secretKey = decoded.secretKey;
    } else {
      const pair = TYPE_FROM_SEED[type](decoded.secretKey);
      publicKey = pair.publicKey;
      secretKey = pair.secretKey;
    }
  };

  const recode = passphrase => {
    isLocked(secretKey) && encoded && decodePkcs8(passphrase, encoded);
    encoded = (0, _encode.encodePair)({
      publicKey,
      secretKey
    }, passphrase); // re-encode, latest version

    encTypes = undefined; // swap to defaults, latest version follows

    return encoded;
  };

  const encodeAddress = () => {
    const raw = TYPE_ADDRESS[type](publicKey);
    return type === 'ethereum' ? (0, _utilCrypto.ethereumEncode)(raw) : toSS58(raw);
  };

  return {
    get address() {
      return encodeAddress();
    },

    get addressRaw() {
      const raw = TYPE_ADDRESS[type](publicKey);
      return type === 'ethereum' ? raw.slice(-20) : raw;
    },

    get isLocked() {
      return isLocked(secretKey);
    },

    get meta() {
      return meta;
    },

    get publicKey() {
      return publicKey;
    },

    get type() {
      return type;
    },

    // eslint-disable-next-line sort-keys
    decodePkcs8,
    decryptMessage: (encryptedMessageWithNonce, senderPublicKey) => {
      (0, _util.assert)(!isLocked(secretKey), 'Cannot encrypt with a locked key pair');
      (0, _util.assert)(!['ecdsa', 'ethereum'].includes(type), 'Secp256k1 not supported yet');
      const messageU8a = (0, _util.u8aToU8a)(encryptedMessageWithNonce);
      return (0, _utilCrypto.naclOpen)(messageU8a.slice(24, messageU8a.length), messageU8a.slice(0, 24), (0, _utilCrypto.convertPublicKeyToCurve25519)((0, _util.u8aToU8a)(senderPublicKey)), (0, _utilCrypto.convertSecretKeyToCurve25519)(secretKey));
    },
    derive: (suri, meta) => {
      (0, _util.assert)(type !== 'ethereum', 'Unable to derive on this keypair');
      (0, _util.assert)(!isLocked(secretKey), 'Cannot derive on a locked keypair');
      const {
        path
      } = (0, _utilCrypto.keyExtractPath)(suri);
      const derived = (0, _utilCrypto.keyFromPath)({
        publicKey,
        secretKey
      }, path, type);
      return createPair({
        toSS58,
        type
      }, derived, meta, null);
    },
    encodePkcs8: passphrase => {
      return recode(passphrase);
    },
    encryptMessage: (message, recipientPublicKey, nonceIn) => {
      (0, _util.assert)(!isLocked(secretKey), 'Cannot encrypt with a locked key pair');
      (0, _util.assert)(!['ecdsa', 'ethereum'].includes(type), 'Secp256k1 not supported yet');
      const {
        nonce,
        sealed
      } = (0, _utilCrypto.naclSeal)((0, _util.u8aToU8a)(message), (0, _utilCrypto.convertSecretKeyToCurve25519)(secretKey), (0, _utilCrypto.convertPublicKeyToCurve25519)((0, _util.u8aToU8a)(recipientPublicKey)), nonceIn);
      return (0, _util.u8aConcat)(nonce, sealed);
    },
    lock: () => {
      secretKey = new Uint8Array();
    },
    setMeta: additional => {
      meta = (0, _util.objectSpread)({}, meta, additional);
    },
    sign: (message, options = {}) => {
      (0, _util.assert)(!isLocked(secretKey), 'Cannot sign with a locked key pair');
      return (0, _util.u8aConcat)(options.withType ? TYPE_PREFIX[type] : SIG_TYPE_NONE, TYPE_SIGNATURE[type]((0, _util.u8aToU8a)(message), {
        publicKey,
        secretKey
      }));
    },
    toJson: passphrase => {
      // NOTE: For ecdsa and ethereum, the publicKey cannot be extracted from the address. For these
      // pass the hex-encoded publicKey through to the address portion of the JSON (before decoding)
      // unless the publicKey is already an address
      const address = ['ecdsa', 'ethereum'].includes(type) ? publicKey.length === 20 ? (0, _util.u8aToHex)(publicKey) : (0, _util.u8aToHex)((0, _utilCrypto.secp256k1Compress)(publicKey)) : encodeAddress();
      return (0, _toJson.pairToJson)(type, {
        address,
        meta
      }, recode(passphrase), !!passphrase);
    },
    unlock: passphrase => {
      return decodePkcs8(passphrase);
    },
    verify: (message, signature, signerPublic) => {
      return (0, _utilCrypto.signatureVerify)(message, signature, TYPE_ADDRESS[type]((0, _util.u8aToU8a)(signerPublic))).isValid;
    },
    vrfSign: (message, context, extra) => {
      (0, _util.assert)(!isLocked(secretKey), 'Cannot sign with a locked key pair');

      if (type === 'sr25519') {
        return (0, _utilCrypto.sr25519VrfSign)(message, {
          secretKey
        }, context, extra);
      }

      const proof = TYPE_SIGNATURE[type]((0, _util.u8aToU8a)(message), {
        publicKey,
        secretKey
      });
      return (0, _util.u8aConcat)(vrfHash(proof, context, extra), proof);
    },
    vrfVerify: (message, vrfResult, signerPublic, context, extra) => {
      if (type === 'sr25519') {
        return (0, _utilCrypto.sr25519VrfVerify)(message, vrfResult, publicKey, context, extra);
      }

      const result = (0, _utilCrypto.signatureVerify)(message, (0, _util.u8aConcat)(TYPE_PREFIX[type], vrfResult.subarray(32)), TYPE_ADDRESS[type]((0, _util.u8aToU8a)(signerPublic)));
      return result.isValid && (0, _util.u8aEq)(vrfResult.subarray(0, 32), vrfHash(vrfResult.subarray(32), context, extra));
    }
  };
}

},{"./decode.js":169,"./encode.js":171,"./toJson.js":174,"@polkadot/util":640,"@polkadot/util-crypto":513}],173:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nobody = nobody;

var _utilCrypto = require("@polkadot/util-crypto");

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
const publicKey = new Uint8Array(32);
const address = (0, _utilCrypto.encodeAddress)(publicKey);
const meta = {
  isTesting: true,
  name: 'nobody'
};
const json = {
  address,
  encoded: '',
  encoding: {
    content: ['pkcs8', 'ed25519'],
    type: 'none',
    version: '0'
  },
  meta
};
const pair = {
  address,
  addressRaw: publicKey,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  decodePkcs8: (passphrase, encoded) => undefined,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  decryptMessage: (encryptedMessageWithNonce, senderPublicKey) => null,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  derive: (suri, meta) => pair,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  encodePkcs8: passphrase => new Uint8Array(0),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  encryptMessage: (message, recipientPublicKey, _nonce) => new Uint8Array(),
  isLocked: true,
  lock: () => {// no locking, it is always locked
  },
  meta,
  publicKey,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  setMeta: meta => undefined,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  sign: message => new Uint8Array(64),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  toJson: passphrase => json,
  type: 'ed25519',
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  unlock: passphrase => undefined,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  verify: (message, signature) => false,
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  vrfSign: (message, context, extra) => new Uint8Array(96),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  vrfVerify: (message, vrfResult, context, extra) => false
};

function nobody() {
  return pair;
}

},{"@polkadot/util-crypto":513}],174:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pairToJson = pairToJson;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
function pairToJson(type, {
  address,
  meta
}, encoded, isEncrypted) {
  return (0, _util.objectSpread)((0, _utilCrypto.jsonEncryptFormat)(encoded, ['pkcs8', type], isEncrypted), {
    address,
    meta
  });
}

},{"@polkadot/util":640,"@polkadot/util-crypto":513}],175:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pairs = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
var _map = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("map");

class Pairs {
  constructor() {
    Object.defineProperty(this, _map, {
      writable: true,
      value: {}
    });
  }

  add(pair) {
    (0, _classPrivateFieldLooseBase2.default)(this, _map)[_map][(0, _utilCrypto.decodeAddress)(pair.address).toString()] = pair;
    return pair;
  }

  all() {
    return Object.values((0, _classPrivateFieldLooseBase2.default)(this, _map)[_map]);
  }

  get(address) {
    const pair = (0, _classPrivateFieldLooseBase2.default)(this, _map)[_map][(0, _utilCrypto.decodeAddress)(address).toString()];

    (0, _util.assert)(pair, () => `Unable to retrieve keypair '${(0, _util.isU8a)(address) || (0, _util.isHex)(address) ? (0, _util.u8aToHex)((0, _util.u8aToU8a)(address)) : address}'`);
    return pair;
  }

  remove(address) {
    delete (0, _classPrivateFieldLooseBase2.default)(this, _map)[_map][(0, _utilCrypto.decodeAddress)(address).toString()];
  }

}

exports.Pairs = Pairs;

},{"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640,"@polkadot/util-crypto":513}],176:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PAIRSSR25519 = exports.PAIRSETHEREUM = void 0;
exports.createTestKeyring = createTestKeyring;

var _util = require("@polkadot/util");

var _keyring = require("./keyring.js");

var _index = require("./pair/index.js");

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
// NOTE This is not great since we have the secretKey here explicitly, but a testing
// keyring is for testing - what happens is that in most cases the keyring is initialises
// before anything else. Since the sr25519 crypto is async, this creates problems with
// adding the keys when only the keyring is used.
const PAIRSSR25519 = [{
  publicKey: (0, _util.hexToU8a)('0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'),
  secretKey: (0, _util.hexToU8a)('0x98319d4ff8a9508c4bb0cf0b5a78d760a0b2082c02775e6e82370816fedfff48925a225d97aa00682d6a59b95b18780c10d7032336e88f3442b42361f4a66011'),
  // nosemgrep
  seed: 'Alice',
  type: 'sr25519'
}, {
  publicKey: (0, _util.hexToU8a)('0xbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f'),
  secretKey: (0, _util.hexToU8a)('0xe8da6c9d810e020f5e3c7f5af2dea314cbeaa0d72bc6421e92c0808a0c584a6046ab28e97c3ffc77fe12b5a4d37e8cd4afbfebbf2391ffc7cb07c0f38c023efd'),
  // nosemgrep
  seed: 'Alice//stash',
  type: 'sr25519'
}, {
  publicKey: (0, _util.hexToU8a)('0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48'),
  secretKey: (0, _util.hexToU8a)('0x081ff694633e255136bdb456c20a5fc8fed21f8b964c11bb17ff534ce80ebd5941ae88f85d0c1bfc37be41c904e1dfc01de8c8067b0d6d5df25dd1ac0894a325'),
  // nosemgrep
  seed: 'Bob',
  type: 'sr25519'
}, {
  publicKey: (0, _util.hexToU8a)('0xfe65717dad0447d715f660a0a58411de509b42e6efb8375f562f58a554d5860e'),
  secretKey: (0, _util.hexToU8a)('0xc006507cdfc267a21532394c49ca9b754ca71de21e15a1cdf807c7ceab6d0b6c3ed408d9d35311540dcd54931933e67cf1ea10d46f75408f82b789d9bd212fde'),
  // nosemgrep
  seed: 'Bob//stash',
  type: 'sr25519'
}, {
  publicKey: (0, _util.hexToU8a)('0x90b5ab205c6974c9ea841be688864633dc9ca8a357843eeacf2314649965fe22'),
  secretKey: (0, _util.hexToU8a)('0xa8f2d83016052e5d6d77b2f6fd5d59418922a09024cda701b3c34369ec43a7668faf12ff39cd4e5d92bb773972f41a7a5279ebc2ed92264bed8f47d344f8f18c'),
  // nosemgrep
  seed: 'Charlie',
  type: 'sr25519'
}, {
  publicKey: (0, _util.hexToU8a)('0x306721211d5404bd9da88e0204360a1a9ab8b87c66c1bc2fcdd37f3c2222cc20'),
  secretKey: (0, _util.hexToU8a)('0x20e05482ca4677e0edbc58ae9a3a59f6ed3b1a9484ba17e64d6fe8688b2b7b5d108c4487b9323b98b11fe36cb301b084e920f7b7895536809a6d62a451b25568'),
  // nosemgrep
  seed: 'Dave',
  type: 'sr25519'
}, {
  publicKey: (0, _util.hexToU8a)('0xe659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df4e'),
  secretKey: (0, _util.hexToU8a)('0x683576abfd5dc35273e4264c23095a1bf21c14517bece57c7f0cc5c0ed4ce06a3dbf386b7828f348abe15d76973a72009e6ef86a5c91db2990cb36bb657c6587'),
  // nosemgrep
  seed: 'Eve',
  type: 'sr25519'
}, {
  publicKey: (0, _util.hexToU8a)('0x1cbd2d43530a44705ad088af313e18f80b53ef16b36177cd4b77b846f2a5f07c'),
  secretKey: (0, _util.hexToU8a)('0xb835c20f450079cf4f513900ae9faf8df06ad86c681884122c752a4b2bf74d4303e4f21bc6cc62bb4eeed5a9cce642c25e2d2ac1464093b50f6196d78e3a7426'),
  // nosemgrep
  seed: 'Ferdie',
  type: 'sr25519'
}];
exports.PAIRSSR25519 = PAIRSSR25519;
const PAIRSETHEREUM = [{
  name: 'Alith',
  publicKey: (0, _util.hexToU8a)('0x02509540919faacf9ab52146c9aa40db68172d83777250b28e4679176e49ccdd9f'),
  secretKey: (0, _util.hexToU8a)('0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133'),
  // nosemgrep
  type: 'ethereum'
}, {
  name: 'Baltathar',
  publicKey: (0, _util.hexToU8a)('0x033bc19e36ff1673910575b6727a974a9abd80c9a875d41ab3e2648dbfb9e4b518'),
  secretKey: (0, _util.hexToU8a)('0x8075991ce870b93a8870eca0c0f91913d12f47948ca0fd25b49c6fa7cdbeee8b'),
  // nosemgrep
  type: 'ethereum'
}, {
  name: 'Charleth',
  publicKey: (0, _util.hexToU8a)('0x0234637bdc0e89b5d46543bcbf8edff329d2702bc995e27e9af4b1ba009a3c2a5e'),
  secretKey: (0, _util.hexToU8a)('0x0b6e18cafb6ed99687ec547bd28139cafdd2bffe70e6b688025de6b445aa5c5b'),
  // nosemgrep
  type: 'ethereum'
}, {
  name: 'Dorothy',
  publicKey: (0, _util.hexToU8a)('0x02a00d60b2b408c2a14c5d70cdd2c205db8985ef737a7e55ad20ea32cc9e7c417c'),
  secretKey: (0, _util.hexToU8a)('0x39539ab1876910bbf3a223d84a29e28f1cb4e2e456503e7e91ed39b2e7223d68'),
  // nosemgrep
  type: 'ethereum'
}, {
  name: 'Ethan',
  publicKey: (0, _util.hexToU8a)('0x025cdc005b752651cd3f728fb9192182acb3a9c89e19072cbd5b03f3ee1f1b3ffa'),
  secretKey: (0, _util.hexToU8a)('0x7dce9bc8babb68fec1409be38c8e1a52650206a7ed90ff956ae8a6d15eeaaef4'),
  // nosemgrep
  type: 'ethereum'
}, {
  name: 'Faith',
  publicKey: (0, _util.hexToU8a)('0x037964b6c9d546da4646ada28a99e34acaa1d14e7aba861a9055f9bd200c8abf74'),
  secretKey: (0, _util.hexToU8a)('0xb9d2ea9a615f3165812e8d44de0d24da9bbd164b65c4f0573e1ce2c8dbd9c8df'),
  // nosemgrep
  type: 'ethereum'
}];
exports.PAIRSETHEREUM = PAIRSETHEREUM;

function createMeta(name, seed) {
  (0, _util.assert)(name || seed, 'Testing pair should have either a name or a seed');
  return {
    isTesting: true,
    name: name || seed && seed.replace('//', '_').toLowerCase()
  };
}
/**
 * @name testKeyring
 * @summary Create an instance of Keyring pre-populated with locked test accounts
 * @description The test accounts (i.e. alice, bob, dave, eve, ferdie)
 * are available on the dev chain and each test account is initialized with DOT funds.
 */


function createTestKeyring(options = {}, isDerived = true) {
  const keyring = new _keyring.Keyring(options);
  const pairs = options.type && options.type === 'ethereum' ? PAIRSETHEREUM : PAIRSSR25519;

  for (const {
    name,
    publicKey,
    secretKey,
    seed,
    type
  } of pairs) {
    const meta = createMeta(name, seed);
    const pair = !isDerived && !name && seed ? keyring.addFromUri(seed, meta, options.type) : keyring.addPair((0, _index.createPair)({
      toSS58: keyring.encodeAddress,
      type
    }, {
      publicKey,
      secretKey
    }, meta));

    pair.lock = () => {// we don't have lock/unlock functionality here
    };
  }

  return keyring;
}

},{"./keyring.js":167,"./pair/index.js":172,"@polkadot/util":640}],177:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestPairs = createTestPairs;

var _nobody = require("./pair/nobody.js");

var _testing = require("./testing.js");

// Copyright 2017-2021 @polkadot/keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
function createTestPairs(options, isDerived = true) {
  const keyring = (0, _testing.createTestKeyring)(options, isDerived);
  const pairs = keyring.getPairs();
  const map = {
    nobody: (0, _nobody.nobody)()
  };

  for (const p of pairs) {
    map[p.meta.name] = p;
  }

  return map;
}

},{"./pair/nobody.js":173,"./testing.js":176}],178:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.substrateRegistry = exports.knownTestnet = exports.knownLedger = exports.knownIcon = exports.knownGenesis = void 0;
// Copyright 2017-2021 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0
const substrateRegistry = 'https://raw.githubusercontent.com/paritytech/ss58-registry/main/ss58-registry.json'; // NOTE: In the case where the network was hard-spooned and multiple genesisHashes
// are provided, it needs to be in reverse order, i.e. most-recent first, oldest
// last. This make lookups for the current a simple genesisHash[0]
// (See Kusama as an example)

exports.substrateRegistry = substrateRegistry;
const knownGenesis = {
  acala: ['0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c'],
  bifrost: ['0x9f28c6a68e0fc9646eff64935684f6eeeece527e37bbe1f213d22caa1d9d6bed'],
  centrifuge: ['0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5'],
  'dock-mainnet': ['0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9'],
  edgeware: ['0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b'],
  equilibrium: ['0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925'],
  genshiro: ['0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243'],
  hydradx: ['0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc', // Snakenet Gen3-1
  '0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9', // Snakenet Gen3
  '0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047', // Snakenet Gen2
  '0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2' // Snakenet Gen1
  ],
  karura: ['0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b'],
  kulupu: ['0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba'],
  kusama: ['0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe', // Kusama CC3,
  '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636', // Kusama CC2
  '0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf' // Kusama CC1
  ],
  'nodle-chain': ['0xa3d114c2b8d0627c1aa9b134eafcf7d05ca561fdc19fb388bb9457f81809fb23'],
  picasso: ['0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c'],
  plasm: ['0x3e86364d4b4894021cb2a0390bcf2feb5517d5292f2de2bb9404227e908b0b8b'],
  polkadot: ['0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3'],
  polymesh: ['0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063'],
  sora: ['0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5'],
  stafi: ['0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80'],
  statemine: ['0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a'],
  subsocial: ['0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8']
}; // these are icon overrides

exports.knownGenesis = knownGenesis;
const knownIcon = {
  centrifuge: 'polkadot',
  kusama: 'polkadot',
  polkadot: 'polkadot',
  sora: 'polkadot',
  statemine: 'polkadot',
  statemint: 'polkadot',
  westmint: 'polkadot'
}; // These match up with the keys of the ledgerApps object in the @polkadot/hw-ledger/defaults.ts
// and maps to the known slip44 (minus the `0x8` hard derivation flag)
// NOTE: Any network here needs to have a genesisHash attached in the config above

exports.knownIcon = knownIcon;
const knownLedger = {
  bifrost: 0x00000314,
  centrifuge: 0x000002eb,
  'dock-mainnet': 0x00000252,
  edgeware: 0x0000020b,
  equilibrium: 0x05f5e0fd,
  genshiro: 0x05f5e0fc,
  kusama: 0x000001b2,
  'nodle-chain': 0x000003eb,
  polkadot: 0x00000162,
  polymesh: 0x00000253,
  sora: 0x00000269,
  statemine: 0x000001b2 // common-good on Kusama, shares derivation

}; // testnets should not allow selection

exports.knownLedger = knownLedger;
const knownTestnet = {
  '': true,
  // this is the default non-network entry
  'cess-testnet': true,
  'dock-testnet': true,
  jupiter: true,
  'mathchain-testnet': true,
  subspace_testnet: true,
  'zero-alphaville': true
};
exports.knownTestnet = knownTestnet;

},{}],179:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  packageInfo: true
};
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _interfaces = require("./interfaces.js");

Object.keys(_interfaces).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _interfaces[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _interfaces[key];
    }
  });
});

var _packageInfo = require("./packageInfo.js");

},{"./interfaces.js":180,"./packageInfo.js":181}],180:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectableNetworks = exports.availableNetworks = exports.allNetworks = void 0;

var _defaults = require("./defaults.js");

var _substrate = require("./substrate.js");

// Copyright 2017-2021 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0
// These are known prefixes that are not sorted
const UNSORTED = [0, 2, 42];
const TESTNETS = ['testnet'];

function toExpanded(o) {
  const network = o.network || '';
  const nameParts = network.replace(/_/g, '-').split('-');
  const n = o; // ledger additions

  n.slip44 = _defaults.knownLedger[network];
  n.hasLedgerSupport = !!n.slip44; // general items

  n.genesisHash = _defaults.knownGenesis[network] || [];
  n.icon = _defaults.knownIcon[network] || 'substrate'; // filtering

  n.isTestnet = !!_defaults.knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
  n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.symbols) && o.prefix !== 42;
  return n;
}

function filterSelectable({
  genesisHash,
  prefix
}) {
  return !!genesisHash.length || prefix === 42;
}

function filterAvailable(n) {
  return !n.isIgnored && !!n.network;
}

function sortNetworks(a, b) {
  const isUnSortedA = UNSORTED.includes(a.prefix);
  const isUnSortedB = UNSORTED.includes(b.prefix);
  return isUnSortedA === isUnSortedB ? 0 : isUnSortedA ? -1 : isUnSortedB ? 1 : a.displayName.localeCompare(b.displayName);
} // This is all the Substrate networks with our additional information


const allNetworks = _substrate.knownSubstrate.map(toExpanded); // The list of available/claimed prefixes
//   - no testnets
//   - we only include those where we have a standardAccount
//   - sort by name, however we keep 0, 2, 42 first in the list


exports.allNetworks = allNetworks;
const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks); // A filtered list of those chains we have details about (genesisHashes)

exports.availableNetworks = availableNetworks;
const selectableNetworks = availableNetworks.filter(filterSelectable);
exports.selectableNetworks = selectableNetworks;

},{"./defaults.js":178,"./substrate.js":182}],181:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/networks',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],182:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.knownSubstrate = void 0;
// Copyright 2017-2021 @polkadot/networks authors & contributors
// SPDX-License-Identifier: Apache-2.0
//
// Auto-generated by yarn networks:sync (via scripts/fromSubstrate.mjs)
//
// This file should never be edited manually. Rather the process is as follow -
//
//   - make a PR to the upstream registry found at https://github.com/paritytech/ss58-registry/
//   - ensure the PR gets merged
//   - yarn networks:sync in this repo to sync
//
// Any manual changes to this file will make CI cron checks fail and will be
// lost when the registry is updated alongside the above sync.
//
const knownSubstrate = [{
  decimals: [10],
  displayName: 'Polkadot Relay Chain',
  network: 'polkadot',
  prefix: 0,
  standardAccount: '*25519',
  symbols: ['DOT'],
  website: 'https://polkadot.network'
}, {
  decimals: null,
  displayName: 'Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.',
  network: 'BareSr25519',
  prefix: 1,
  standardAccount: 'Sr25519',
  symbols: null,
  website: null
}, {
  decimals: [12],
  displayName: 'Kusama Relay Chain',
  network: 'kusama',
  prefix: 2,
  standardAccount: '*25519',
  symbols: ['KSM'],
  website: 'https://kusama.network'
}, {
  decimals: null,
  displayName: 'Bare 32-bit Ed25519 public key.',
  network: 'BareEd25519',
  prefix: 3,
  standardAccount: 'Ed25519',
  symbols: null,
  website: null
}, {
  decimals: null,
  displayName: 'Katal Chain',
  network: 'katalchain',
  prefix: 4,
  standardAccount: '*25519',
  symbols: null,
  website: null
}, {
  decimals: [15],
  displayName: 'Plasm Network',
  network: 'plasm',
  prefix: 5,
  standardAccount: '*25519',
  symbols: ['PLM'],
  website: 'https://plasmnet.io'
}, {
  decimals: [12],
  displayName: 'Bifrost',
  network: 'bifrost',
  prefix: 6,
  standardAccount: '*25519',
  symbols: ['BNC'],
  website: 'https://bifrost.finance/'
}, {
  decimals: [18],
  displayName: 'Edgeware',
  network: 'edgeware',
  prefix: 7,
  standardAccount: '*25519',
  symbols: ['EDG'],
  website: 'https://edgewa.re'
}, {
  decimals: [12],
  displayName: 'Karura',
  network: 'karura',
  prefix: 8,
  standardAccount: '*25519',
  symbols: ['KAR'],
  website: 'https://karura.network/'
}, {
  decimals: [18],
  displayName: 'Laminar Reynolds Canary',
  network: 'reynolds',
  prefix: 9,
  standardAccount: '*25519',
  symbols: ['REY'],
  website: 'http://laminar.network/'
}, {
  decimals: [12],
  displayName: 'Acala',
  network: 'acala',
  prefix: 10,
  standardAccount: '*25519',
  symbols: ['ACA'],
  website: 'https://acala.network/'
}, {
  decimals: [18],
  displayName: 'Laminar',
  network: 'laminar',
  prefix: 11,
  standardAccount: '*25519',
  symbols: ['LAMI'],
  website: 'http://laminar.network/'
}, {
  decimals: [6],
  displayName: 'Polymesh',
  network: 'polymesh',
  prefix: 12,
  standardAccount: '*25519',
  symbols: ['POLYX'],
  website: 'https://polymath.network/'
}, {
  decimals: [12],
  displayName: 'Integritee',
  network: 'integritee',
  prefix: 13,
  standardAccount: '*25519',
  symbols: ['TEER'],
  website: 'https://integritee.network'
}, {
  decimals: [0],
  displayName: 'Totem',
  network: 'totem',
  prefix: 14,
  standardAccount: '*25519',
  symbols: ['TOTEM'],
  website: 'https://totemaccounting.com'
}, {
  decimals: [12],
  displayName: 'Synesthesia',
  network: 'synesthesia',
  prefix: 15,
  standardAccount: '*25519',
  symbols: ['SYN'],
  website: 'https://synesthesia.network/'
}, {
  decimals: [12],
  displayName: 'Kulupu',
  network: 'kulupu',
  prefix: 16,
  standardAccount: '*25519',
  symbols: ['KLP'],
  website: 'https://kulupu.network/'
}, {
  decimals: null,
  displayName: 'Dark Mainnet',
  network: 'dark',
  prefix: 17,
  standardAccount: '*25519',
  symbols: null,
  website: null
}, {
  decimals: [9, 9],
  displayName: 'Darwinia Network',
  network: 'darwinia',
  prefix: 18,
  standardAccount: '*25519',
  symbols: ['RING', 'KTON'],
  website: 'https://darwinia.network/'
}, {
  decimals: [12],
  displayName: 'GeekCash',
  network: 'geek',
  prefix: 19,
  standardAccount: '*25519',
  symbols: ['GEEK'],
  website: 'https://geekcash.org'
}, {
  decimals: [12],
  displayName: 'Stafi',
  network: 'stafi',
  prefix: 20,
  standardAccount: '*25519',
  symbols: ['FIS'],
  website: 'https://stafi.io'
}, {
  decimals: [6],
  displayName: 'Dock Testnet',
  network: 'dock-testnet',
  prefix: 21,
  standardAccount: '*25519',
  symbols: ['DCK'],
  website: 'https://dock.io'
}, {
  decimals: [6],
  displayName: 'Dock Mainnet',
  network: 'dock-mainnet',
  prefix: 22,
  standardAccount: '*25519',
  symbols: ['DCK'],
  website: 'https://dock.io'
}, {
  decimals: null,
  displayName: 'ShiftNrg',
  network: 'shift',
  prefix: 23,
  standardAccount: '*25519',
  symbols: null,
  website: null
}, {
  decimals: [18],
  displayName: 'ZERO',
  network: 'zero',
  prefix: 24,
  standardAccount: '*25519',
  symbols: ['PLAY'],
  website: 'https://zero.io'
}, {
  decimals: [18],
  displayName: 'ZERO Alphaville',
  network: 'zero-alphaville',
  prefix: 25,
  standardAccount: '*25519',
  symbols: ['PLAY'],
  website: 'https://zero.io'
}, {
  decimals: [10],
  displayName: 'Jupiter',
  network: 'jupiter',
  prefix: 26,
  standardAccount: '*25519',
  symbols: ['jDOT'],
  website: 'https://jupiter.patract.io'
}, {
  decimals: null,
  displayName: 'Subsocial',
  network: 'subsocial',
  prefix: 28,
  standardAccount: '*25519',
  symbols: null,
  website: null
}, {
  decimals: [12, 12],
  displayName: 'CORD Network',
  network: 'cord',
  prefix: 29,
  standardAccount: '*25519',
  symbols: ['DHI', 'WAY'],
  website: 'https://cord.network/'
}, {
  decimals: [12],
  displayName: 'Phala Network',
  network: 'phala',
  prefix: 30,
  standardAccount: '*25519',
  symbols: ['PHA'],
  website: 'https://phala.network'
}, {
  decimals: [12],
  displayName: 'Litentry Network',
  network: 'litentry',
  prefix: 31,
  standardAccount: '*25519',
  symbols: ['LIT'],
  website: 'https://litentry.com/'
}, {
  decimals: [9],
  displayName: 'Robonomics',
  network: 'robonomics',
  prefix: 32,
  standardAccount: '*25519',
  symbols: ['XRT'],
  website: 'https://robonomics.network'
}, {
  decimals: null,
  displayName: 'DataHighway',
  network: 'datahighway',
  prefix: 33,
  standardAccount: '*25519',
  symbols: null,
  website: null
}, {
  decimals: [12],
  displayName: 'Ares Protocol',
  network: 'ares',
  prefix: 34,
  standardAccount: '*25519',
  symbols: ['ARES'],
  website: 'https://www.aresprotocol.com/'
}, {
  decimals: [15],
  displayName: 'Valiu Liquidity Network',
  network: 'vln',
  prefix: 35,
  standardAccount: '*25519',
  symbols: ['USDv'],
  website: 'https://valiu.com/'
}, {
  decimals: [18],
  displayName: 'Centrifuge Chain',
  network: 'centrifuge',
  prefix: 36,
  standardAccount: '*25519',
  symbols: ['CFG'],
  website: 'https://centrifuge.io/'
}, {
  decimals: [18],
  displayName: 'Nodle Chain',
  network: 'nodle',
  prefix: 37,
  standardAccount: '*25519',
  symbols: ['NODL'],
  website: 'https://nodle.io/'
}, {
  decimals: [18],
  displayName: 'KILT Chain',
  network: 'kilt',
  prefix: 38,
  standardAccount: '*25519',
  symbols: ['KILT'],
  website: 'https://kilt.io/'
}, {
  decimals: [18],
  displayName: 'MathChain mainnet',
  network: 'mathchain',
  prefix: 39,
  standardAccount: '*25519',
  symbols: ['MATH'],
  website: 'https://mathwallet.org'
}, {
  decimals: [18],
  displayName: 'MathChain testnet',
  network: 'mathchain-testnet',
  prefix: 40,
  standardAccount: '*25519',
  symbols: ['MATH'],
  website: 'https://mathwallet.org'
}, {
  decimals: null,
  displayName: 'Polimec Chain',
  network: 'poli',
  prefix: 41,
  standardAccount: '*25519',
  symbols: null,
  website: 'https://polimec.io/'
}, {
  decimals: null,
  displayName: 'Substrate',
  network: 'substrate',
  prefix: 42,
  standardAccount: '*25519',
  symbols: null,
  website: 'https://substrate.io/'
}, {
  decimals: null,
  displayName: 'Bare 32-bit ECDSA SECP-256k1 public key.',
  network: 'BareSecp256k1',
  prefix: 43,
  standardAccount: 'secp256k1',
  symbols: null,
  website: null
}, {
  decimals: [8],
  displayName: 'ChainX',
  network: 'chainx',
  prefix: 44,
  standardAccount: '*25519',
  symbols: ['PCX'],
  website: 'https://chainx.org/'
}, {
  decimals: [12, 12],
  displayName: 'UniArts Network',
  network: 'uniarts',
  prefix: 45,
  standardAccount: '*25519',
  symbols: ['UART', 'UINK'],
  website: 'https://uniarts.me'
}, {
  decimals: null,
  displayName: 'This prefix is reserved.',
  network: 'reserved46',
  prefix: 46,
  standardAccount: null,
  symbols: null,
  website: null
}, {
  decimals: null,
  displayName: 'This prefix is reserved.',
  network: 'reserved47',
  prefix: 47,
  standardAccount: null,
  symbols: null,
  website: null
}, {
  decimals: [12],
  displayName: 'Neatcoin Mainnet',
  network: 'neatcoin',
  prefix: 48,
  standardAccount: '*25519',
  symbols: ['NEAT'],
  website: 'https://neatcoin.org'
}, {
  decimals: [12],
  displayName: 'Picasso',
  network: 'picasso',
  prefix: 49,
  standardAccount: '*25519',
  symbols: ['PICA'],
  website: 'https://picasso.composable.finance'
}, {
  decimals: [12],
  displayName: 'Composable',
  network: 'composable',
  prefix: 50,
  standardAccount: '*25519',
  symbols: ['LAYR'],
  website: 'https://composable.finance'
}, {
  decimals: [9],
  displayName: 'xx network',
  network: 'xxnetwork',
  prefix: 55,
  standardAccount: '*25519',
  symbols: ['XX'],
  website: 'https://xx.network'
}, {
  decimals: [12],
  displayName: 'HydraDX',
  network: 'hydradx',
  prefix: 63,
  standardAccount: '*25519',
  symbols: ['HDX'],
  website: 'https://hydradx.io'
}, {
  decimals: [18],
  displayName: 'AvN Mainnet',
  network: 'aventus',
  prefix: 65,
  standardAccount: '*25519',
  symbols: ['AVT'],
  website: 'https://aventus.io'
}, {
  decimals: [12],
  displayName: 'Crust Network',
  network: 'crust',
  prefix: 66,
  standardAccount: '*25519',
  symbols: ['CRU'],
  website: 'https://crust.network'
}, {
  decimals: [9, 9, 9],
  displayName: 'Genshiro Network',
  network: 'genshiro',
  prefix: 67,
  standardAccount: '*25519',
  symbols: ['GENS', 'EQD', 'LPT0'],
  website: 'https://genshiro.equilibrium.io'
}, {
  decimals: [9],
  displayName: 'Equilibrium Network',
  network: 'equilibrium',
  prefix: 68,
  standardAccount: '*25519',
  symbols: ['EQ'],
  website: 'https://equilibrium.io'
}, {
  decimals: [18],
  displayName: 'SORA Network',
  network: 'sora',
  prefix: 69,
  standardAccount: '*25519',
  symbols: ['XOR'],
  website: 'https://sora.org'
}, {
  decimals: [10],
  displayName: 'Zeitgeist',
  network: 'zeitgeist',
  prefix: 73,
  standardAccount: '*25519',
  symbols: ['ZTG'],
  website: 'https://zeitgeist.pm'
}, {
  decimals: [18],
  displayName: 'Manta network',
  network: 'manta',
  prefix: 77,
  standardAccount: '*25519',
  symbols: ['MANTA'],
  website: 'https://manta.network'
}, {
  decimals: [12],
  displayName: 'Calamari: Manta Canary Network',
  network: 'calamari',
  prefix: 78,
  standardAccount: '*25519',
  symbols: ['KMA'],
  website: 'https://manta.network'
}, {
  decimals: [12],
  displayName: 'Polkadex Mainnet',
  network: 'polkadex',
  prefix: 88,
  standardAccount: '*25519',
  symbols: ['PDEX'],
  website: 'https://polkadex.trade'
}, {
  decimals: [18],
  displayName: 'PolkaSmith Canary Network',
  network: 'polkasmith',
  prefix: 98,
  standardAccount: '*25519',
  symbols: ['PKS'],
  website: 'https://polkafoundry.com'
}, {
  decimals: [18],
  displayName: 'PolkaFoundry Network',
  network: 'polkafoundry',
  prefix: 99,
  standardAccount: '*25519',
  symbols: ['PKF'],
  website: 'https://polkafoundry.com'
}, {
  decimals: [18],
  displayName: 'OriginTrail Parachain',
  network: 'origintrail-parachain',
  prefix: 101,
  standardAccount: 'secp256k1',
  symbols: ['TRAC'],
  website: 'https://origintrail.io'
}, {
  decimals: [10],
  displayName: 'Pontem Network',
  network: 'pontem-network',
  prefix: 105,
  standardAccount: '*25519',
  symbols: ['PONT'],
  website: 'https://pontem.network'
}, {
  decimals: [12],
  displayName: 'Heiko',
  network: 'heiko',
  prefix: 110,
  standardAccount: '*25519',
  symbols: ['HKO'],
  website: 'https://parallel.fi/'
}, {
  decimals: null,
  displayName: 'Integritee Incognito',
  network: 'integritee-incognito',
  prefix: 113,
  standardAccount: '*25519',
  symbols: null,
  website: 'https://integritee.network'
}, {
  decimals: [18],
  displayName: 'Clover Finance',
  network: 'clover',
  prefix: 128,
  standardAccount: '*25519',
  symbols: ['CLV'],
  website: 'https://clover.finance'
}, {
  decimals: [18],
  displayName: 'Altair',
  network: 'altair',
  prefix: 136,
  standardAccount: '*25519',
  symbols: ['AIR'],
  website: 'https://centrifuge.io/'
}, {
  decimals: [12],
  displayName: 'Parallel',
  network: 'parallel',
  prefix: 172,
  standardAccount: '*25519',
  symbols: ['PARA'],
  website: 'https://parallel.fi/'
}, {
  decimals: [18],
  displayName: 'Social Network',
  network: 'social-network',
  prefix: 252,
  standardAccount: '*25519',
  symbols: ['NET'],
  website: 'https://social.network'
}, {
  decimals: [15],
  displayName: 'QUARTZ by UNIQUE',
  network: 'quartz_mainnet',
  prefix: 255,
  standardAccount: '*25519',
  symbols: ['QTZ'],
  website: 'https://unique.network'
}, {
  decimals: [18],
  displayName: 'Pioneer Network by Bit.Country',
  network: 'pioneer_network',
  prefix: 268,
  standardAccount: '*25519',
  symbols: ['NEER'],
  website: 'https://bit.country'
}, {
  decimals: [18],
  displayName: 'Efinity',
  network: 'efinity',
  prefix: 1110,
  standardAccount: 'Sr25519',
  symbols: ['EFI'],
  website: 'https://efinity.io/'
}, {
  decimals: [18],
  displayName: 'Moonbeam',
  network: 'moonbeam',
  prefix: 1284,
  standardAccount: 'secp256k1',
  symbols: ['GLMR'],
  website: 'https://moonbeam.network'
}, {
  decimals: [18],
  displayName: 'Moonriver',
  network: 'moonriver',
  prefix: 1285,
  standardAccount: 'secp256k1',
  symbols: ['MOVR'],
  website: 'https://moonbeam.network'
}, {
  decimals: [12],
  displayName: 'Kapex',
  network: 'kapex',
  prefix: 2007,
  standardAccount: '*25519',
  symbols: ['KAPEX'],
  website: 'https://totemaccounting.com'
}, {
  decimals: [10],
  displayName: 'Interlay',
  network: 'interlay',
  prefix: 2032,
  standardAccount: '*25519',
  symbols: ['INTR'],
  website: 'https://interlay.io/'
}, {
  decimals: [12],
  displayName: 'Kintsugi',
  network: 'kintsugi',
  prefix: 2092,
  standardAccount: '*25519',
  symbols: ['KINT'],
  website: 'https://interlay.io/'
}, {
  decimals: [18],
  displayName: 'Subspace testnet',
  network: 'subspace_testnet',
  prefix: 2254,
  standardAccount: '*25519',
  symbols: ['tSSC'],
  website: 'https://subspace.network'
}, {
  decimals: [18],
  displayName: 'Subspace',
  network: 'subspace',
  prefix: 6094,
  standardAccount: '*25519',
  symbols: ['SSC'],
  website: 'https://subspace.network'
}, {
  decimals: [12],
  displayName: 'Basilisk',
  network: 'basilisk',
  prefix: 10041,
  standardAccount: '*25519',
  symbols: ['BSX'],
  website: 'https://bsx.fi'
}, {
  decimals: [12],
  displayName: 'CESS Testnet',
  network: 'cess-testnet',
  prefix: 11330,
  standardAccount: '*25519',
  symbols: ['TCESS'],
  website: 'https://cess.cloud'
}, {
  decimals: [12],
  displayName: 'CESS',
  network: 'cess',
  prefix: 11331,
  standardAccount: '*25519',
  symbols: ['CESS'],
  website: 'https://cess.cloud'
}, {
  decimals: [18],
  displayName: 'Automata ContextFree',
  network: 'contextfree',
  prefix: 11820,
  standardAccount: '*25519',
  symbols: ['CTX'],
  website: 'https://ata.network'
}];
exports.knownSubstrate = knownSubstrate;

},{}],183:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  RpcCore: true,
  packageInfo: true
};
exports.RpcCore = void 0;
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _rxjs = require("rxjs");

var _types = require("@polkadot/types");

var _util = require("@polkadot/util");

var _index = require("./util/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _packageInfo = require("./packageInfo.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
const l = (0, _util.logger)('rpc-core');
const EMPTY_META = {
  fallback: undefined,
  modifier: {
    isOptional: true
  },
  type: {
    asMap: {
      linked: {
        isTrue: false
      }
    },
    isMap: false
  }
}; // utility method to create a nicely-formatted error

/** @internal */

function logErrorMessage(method, {
  params,
  type
}, error) {
  const inputs = params.map(({
    isOptional,
    name,
    type
  }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');
  l.error(`${method}(${inputs}): ${type}:: ${error.message}`);
}

function isTreatAsHex(key) {
  // :code is problematic - it does not have the length attached, which is
  // unlike all other storage entries where it is indeed properly encoded
  return ['0x3a636f6465'].includes(key.toHex());
}
/**
 * @name Rpc
 * @summary The API may use a HTTP or WebSockets provider.
 * @description It allows for querying a Polkadot Client Node.
 * WebSockets provider is recommended since HTTP provider only supports basic querying.
 *
 * ```mermaid
 * graph LR;
 *   A[Api] --> |WebSockets| B[WsProvider];
 *   B --> |endpoint| C[ws://127.0.0.1:9944]
 * ```
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Rpc from '@polkadot/rpc-core';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const rpc = new Rpc(provider);
 * ```
 */


var _instanceId = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("instanceId");

var _registryDefault = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("registryDefault");

var _getBlockRegistry = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("getBlockRegistry");

var _storageCache = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("storageCache");

class RpcCore {
  /**
   * @constructor
   * Default constructor for the Api Object
   * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket
   */
  constructor(instanceId, registry, provider, userRpc = {}) {
    Object.defineProperty(this, _instanceId, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _registryDefault, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _getBlockRegistry, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _storageCache, {
      writable: true,
      value: new Map()
    });
    this.mapping = new Map();
    this.provider = void 0;
    this.sections = []; // eslint-disable-next-line @typescript-eslint/unbound-method

    (0, _util.assert)(provider && (0, _util.isFunction)(provider.send), 'Expected Provider to API create');
    (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId] = instanceId;
    (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault] = registry;
    this.provider = provider;
    const sectionNames = Object.keys(_types.rpcDefinitions); // these are the base keys (i.e. part of jsonrpc)

    this.sections.push(...sectionNames); // decorate all interfaces, defined and user on this instance

    this.addUserInterfaces(userRpc);
  }
  /**
   * @description Returns the connected status of a provider
   */


  get isConnected() {
    return this.provider.isConnected;
  }
  /**
   * @description Manually connect from the attached provider
   */


  connect() {
    return this.provider.connect();
  }
  /**
   * @description Manually disconnect from the attached provider
   */


  disconnect() {
    return this.provider.disconnect();
  }
  /**
   * @description Sets a registry swap (typically from Api)
   */


  setRegistrySwap(registrySwap) {
    (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry] = (0, _util.memoize)(registrySwap, {
      getInstanceId: () => (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId]
    });
  }

  addUserInterfaces(userRpc) {
    // add any extra user-defined sections
    this.sections.push(...Object.keys(userRpc).filter(k => !this.sections.includes(k)));

    for (let s = 0; s < this.sections.length; s++) {
      const section = this.sections[s];
      const defs = (0, _util.objectSpread)({}, _types.rpcDefinitions[section], userRpc[section]);
      const methods = Object.keys(defs);

      for (let m = 0; m < methods.length; m++) {
        const method = methods[m];
        const def = defs[method];
        const jsonrpc = def.endpoint || `${section}_${method}`;

        if (!this.mapping.has(jsonrpc)) {
          const isSubscription = !!def.pubsub;

          if (!this[section]) {
            this[section] = {};
          }

          this.mapping.set(jsonrpc, (0, _util.objectSpread)({}, def, {
            isSubscription,
            jsonrpc,
            method,
            section
          }));
          (0, _util.lazyMethod)(this[section], method, () => isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def));
        }
      }
    }
  }

  _memomize(creator, def) {
    const memoOpts = {
      getInstanceId: () => (0, _classPrivateFieldLooseBase2.default)(this, _instanceId)[_instanceId]
    };
    const memoized = (0, _util.memoize)(creator(true), memoOpts);
    memoized.raw = (0, _util.memoize)(creator(false), memoOpts);
    memoized.meta = def;
    return memoized;
  }

  _formatResult(isScale, registry, blockHash, method, def, params, result) {
    return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
  }

  _createMethodSend(section, method, def) {
    const rpcName = def.endpoint || `${section}_${method}`;
    const hashIndex = def.params.findIndex(({
      isHistoric
    }) => isHistoric);
    let memoized = null; // execute the RPC call, doing a registry swap for historic as applicable

    const callWithRegistry = async (isScale, values) => {
      const blockHash = hashIndex === -1 ? null : values[hashIndex];
      const {
        registry
      } = isScale && blockHash && (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry] ? await (0, _classPrivateFieldLooseBase2.default)(this, _getBlockRegistry)[_getBlockRegistry]((0, _util.u8aToU8a)(blockHash)) : {
        registry: (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault]
      };

      const params = this._formatInputs(registry, null, def, values);

      const result = await this.provider.send(rpcName, params.map(p => p.toJSON()), !!blockHash);
      return this._formatResult(isScale, registry, blockHash, method, def, params, result);
    };

    const creator = isScale => (...values) => {
      const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
      return new _rxjs.Observable(observer => {
        callWithRegistry(isScale, values).then(value => {
          observer.next(value);
          observer.complete();
        }).catch(error => {
          logErrorMessage(method, def, error);
          observer.error(error);
          observer.complete();
        });
        return () => {
          var _memoized; // delete old results from cache


          (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.unmemoize(...values);
        };
      }).pipe((0, _rxjs.publishReplay)(1), // create a Replay(1)
      isDelayed ? (0, _index.refCountDelay)() // Unsubscribe after delay
      : (0, _rxjs.refCount)());
    };

    memoized = this._memomize(creator, def);
    return memoized;
  } // create a subscriptor, it subscribes once and resolves with the id as subscribe


  _createSubscriber({
    paramsJson,
    subName,
    subType,
    update
  }, errorHandler) {
    return new Promise((resolve, reject) => {
      this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {
        errorHandler(error);
        reject(error);
      });
    });
  }

  _createMethodSubscribe(section, method, def) {
    const [updateType, subMethod, unsubMethod] = def.pubsub;
    const subName = `${section}_${subMethod}`;
    const unsubName = `${section}_${unsubMethod}`;
    const subType = `${section}_${updateType}`;
    let memoized = null;

    const creator = isScale => (...values) => {
      return new _rxjs.Observable(observer => {
        // Have at least an empty promise, as used in the unsubscribe
        let subscriptionPromise = Promise.resolve(null);

        const registry = (0, _classPrivateFieldLooseBase2.default)(this, _registryDefault)[_registryDefault];

        const errorHandler = error => {
          logErrorMessage(method, def, error);
          observer.error(error);
        };

        try {
          const params = this._formatInputs(registry, null, def, values);

          const paramsJson = params.map(p => p.toJSON());

          const update = (error, result) => {
            if (error) {
              logErrorMessage(method, def, error);
              return;
            }

            try {
              observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
            } catch (error) {
              observer.error(error);
            }
          };

          subscriptionPromise = this._createSubscriber({
            paramsJson,
            subName,
            subType,
            update
          }, errorHandler);
        } catch (error) {
          errorHandler(error);
        } // Teardown logic


        return () => {
          var _memoized2; // Delete from cache, so old results don't hang around


          (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.unmemoize(...values); // Unsubscribe from provider

          subscriptionPromise.then(subscriptionId => (0, _util.isNull)(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));
        };
      }).pipe((0, _index.drr)());
    };

    memoized = this._memomize(creator, def);
    return memoized;
  }

  _formatInputs(registry, blockHash, def, inputs) {
    const reqArgCount = def.params.filter(({
      isOptional
    }) => !isOptional).length;
    const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;
    (0, _util.assert)(inputs.length >= reqArgCount && inputs.length <= def.params.length, () => `Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);
    return inputs.map((input, index) => registry.createTypeUnsafe(def.params[index].type, [input], {
      blockHash
    }));
  }

  _formatOutput(registry, blockHash, method, rpc, params, result) {
    if (rpc.type === 'StorageData') {
      const key = params[0];
      return this._formatStorageData(registry, blockHash, key, result);
    } else if (rpc.type === 'StorageChangeSet') {
      const keys = params[0];
      return keys ? this._formatStorageSet(registry, result.block, keys, result.changes) : registry.createType('StorageChangeSet', result);
    } else if (rpc.type === 'Vec<StorageChangeSet>') {
      const mapped = result.map(({
        block,
        changes
      }) => [registry.createType('Hash', block), this._formatStorageSet(registry, block, params[0], changes)]); // we only query at a specific block, not a range - flatten

      return method === 'queryStorageAt' ? mapped[0][1] : mapped;
    }

    return registry.createTypeUnsafe(rpc.type, [result], {
      blockHash
    });
  }

  _formatStorageData(registry, blockHash, key, value) {
    const isEmpty = (0, _util.isNull)(value); // we convert to Uint8Array since it maps to the raw encoding, all
    // data will be correctly encoded (incl. numbers, excl. :code)

    const input = isEmpty ? null : isTreatAsHex(key) ? value : (0, _util.u8aToU8a)(value);
    return this._newType(registry, blockHash, key, input, isEmpty);
  }

  _formatStorageSet(registry, blockHash, keys, changes) {
    // For StorageChangeSet, the changes has the [key, value] mappings
    const withCache = keys.length !== 1; // multiple return values (via state.storage subscription), decode the values
    // one at a time, all based on the query types. Three values can be returned -
    //   - Codec - There is a valid value, non-empty
    //   - null - The storage key is empty

    return keys.reduce((results, key, index) => {
      results.push(this._formatStorageSetEntry(registry, blockHash, key, changes, withCache, index));
      return results;
    }, []);
  }

  _formatStorageSetEntry(registry, blockHash, key, changes, witCache, entryIndex) {
    const hexKey = key.toHex();
    const found = changes.find(([key]) => key === hexKey); // if we don't find the value, this is our fallback
    //   - in the case of an array of values, fill the hole from the cache
    //   - if a single result value, don't fill - it is not an update hole
    //   - fallback to an empty option in all cases

    const value = (0, _util.isUndefined)(found) ? witCache && (0, _classPrivateFieldLooseBase2.default)(this, _storageCache)[_storageCache].get(hexKey) || null : found[1];
    const isEmpty = (0, _util.isNull)(value);
    const input = isEmpty || isTreatAsHex(key) ? value : (0, _util.u8aToU8a)(value); // store the retrieved result - the only issue with this cache is that there is no
    // clearing of it, so very long running processes (not just a couple of hours, longer)
    // will increase memory beyond what is allowed.

    (0, _classPrivateFieldLooseBase2.default)(this, _storageCache)[_storageCache].set(hexKey, value);

    return this._newType(registry, blockHash, key, input, isEmpty, entryIndex);
  }

  _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
    // single return value (via state.getStorage), decode the value based on the
    // outputType that we have specified. Fallback to Raw on nothing
    const type = key.outputType || 'Raw';
    const meta = key.meta || EMPTY_META;
    const entryNum = entryIndex === -1 ? '' : ` entry ${entryIndex}:`;

    try {
      return registry.createTypeUnsafe(type, [isEmpty ? meta.fallback ? (0, _util.hexToU8a)(meta.fallback.toHex()) : undefined : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], {
        blockHash,
        isPedantic: true
      }) : input], {
        blockHash,
        isOptional: meta.modifier.isOptional,
        isPedantic: !meta.modifier.isOptional
      });
    } catch (error) {
      throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);
    }
  }

}

exports.RpcCore = RpcCore;

},{"./packageInfo.js":186,"./util/index.js":188,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/types":311,"@polkadot/util":640,"rxjs":746}],184:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _packageInfo = require("@polkadot/rpc-provider/packageInfo");

var _packageInfo2 = require("@polkadot/types/packageInfo");

var _util = require("@polkadot/util");

var _packageInfo3 = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _util.detectPackage)(_packageInfo3.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo.packageInfo, _packageInfo2.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/rpc-core")
},{"./packageInfo.js":186,"@polkadot/rpc-provider/packageInfo":198,"@polkadot/types/packageInfo":423,"@polkadot/util":640}],185:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});

},{"./bundle.js":183,"./detectPackage.js":184}],186:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/rpc-core',
  version: '6.12.1'
};
exports.packageInfo = packageInfo;

},{}],187:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drr = void 0;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _refCountDelay = require("./refCountDelay.js");

// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0
const l = (0, _util.logger)('drr');

const CMP = (a, b) => (0, _util.stringify)({
  t: a
}) === (0, _util.stringify)({
  t: b
});

const ERR = error => {
  l.error(error.message);
  throw error;
};

const NOOP = () => undefined;
/**
 * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
 *
 * @ignore
 * @internal
 */


const drr = ({
  delay,
  skipChange = false,
  skipTimeout = false
} = {}) => source$ => source$.pipe((0, _rxjs.catchError)(ERR), skipChange ? (0, _rxjs.tap)(NOOP) : (0, _rxjs.distinctUntilChanged)(CMP), (0, _rxjs.publishReplay)(1), skipTimeout ? (0, _rxjs.refCount)() : (0, _refCountDelay.refCountDelay)(delay));

exports.drr = drr;

},{"./refCountDelay.js":190,"@polkadot/util":640,"rxjs":746}],188:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _drr = require("./drr.js");

Object.keys(_drr).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _drr[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _drr[key];
    }
  });
});

var _memo = require("./memo.js");

Object.keys(_memo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _memo[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _memo[key];
    }
  });
});

var _refCountDelay = require("./refCountDelay.js");

Object.keys(_refCountDelay).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _refCountDelay[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _refCountDelay[key];
    }
  });
});

},{"./drr.js":187,"./memo.js":189,"./refCountDelay.js":190}],189:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memo = memo;

var _rxjs = require("rxjs");

var _util = require("@polkadot/util");

var _drr = require("./drr.js");

// Copyright 2017-2021 @polkadot/api-derive authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Wraps a derive, doing 2 things to optimize calls -
//   1. creates a memo of the inner fn -> Observable, removing when unsubscribed
//   2. wraps the observable in a drr() (which includes an unsub delay)

/** @internal */
// eslint-disable-next-line @typescript-eslint/ban-types
function memo(instanceId, inner) {
  const options = {
    getInstanceId: () => instanceId
  };
  const cached = (0, _util.memoize)((...params) => new _rxjs.Observable(observer => {
    const subscription = inner(...params).subscribe(observer);
    return () => {
      cached.unmemoize(...params);
      subscription.unsubscribe();
    };
  }).pipe((0, _drr.drr)()), options);
  return cached;
}

},{"./drr.js":187,"@polkadot/util":640,"rxjs":746}],190:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.refCountDelay = refCountDelay;

var _rxjs = require("rxjs");

// Copyright 2017-2021 @polkadot/rpc-core authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function refCountDelay(delay = 1750) {
  return source => {
    // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
    let [state, refCount, connection, scheduler] = [0, 0, _rxjs.Subscription.EMPTY, _rxjs.Subscription.EMPTY];
    return new _rxjs.Observable(ob => {
      source.subscribe(ob);

      if (refCount++ === 0) {
        if (state === 1) {
          scheduler.unsubscribe();
        } else {
          connection = source.connect();
        }

        state = 3;
      }

      return () => {
        if (--refCount === 0) {
          if (state === 2) {
            state = 0;
            scheduler.unsubscribe();
          } else {
            // state === 3
            state = 1;
            scheduler = _rxjs.asapScheduler.schedule(() => {
              state = 0;
              connection.unsubscribe();
            }, delay);
          }
        }
      };
    });
  };
}

},{"rxjs":746}],191:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "HttpProvider", {
  enumerable: true,
  get: function () {
    return _index.HttpProvider;
  }
});
Object.defineProperty(exports, "WsProvider", {
  enumerable: true,
  get: function () {
    return _index2.WsProvider;
  }
});
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _index = require("./http/index.js");

var _packageInfo = require("./packageInfo.js");

var _index2 = require("./ws/index.js");

},{"./http/index.js":195,"./packageInfo.js":198,"./ws/index.js":200}],192:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RpcCoder = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
function formatErrorData(data) {
  if ((0, _util.isUndefined)(data)) {
    return '';
  }

  const formatted = `: ${(0, _util.isString)(data) ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '') : (0, _util.stringify)(data)}`; // We need some sort of cut-off here since these can be very large and
  // very nested, pick a number and trim the result display to it

  return formatted.length <= 256 ? formatted : `${formatted.substr(0, 255)}…`;
}
/** @internal */


var _id = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("id");

class RpcCoder {
  constructor() {
    Object.defineProperty(this, _id, {
      writable: true,
      value: 0
    });
  }

  decodeResponse(response) {
    (0, _util.assert)(response, 'Empty response object received');
    (0, _util.assert)(response.jsonrpc === '2.0', 'Invalid jsonrpc field in decoded object');
    const isSubscription = !(0, _util.isUndefined)(response.params) && !(0, _util.isUndefined)(response.method);
    (0, _util.assert)((0, _util.isNumber)(response.id) || isSubscription && ((0, _util.isNumber)(response.params.subscription) || (0, _util.isString)(response.params.subscription)), 'Invalid id field in decoded object');

    this._checkError(response.error);

    (0, _util.assert)(!(0, _util.isUndefined)(response.result) || isSubscription, 'No result found in JsonRpc response');

    if (isSubscription) {
      this._checkError(response.params.error);

      return response.params.result;
    }

    return response.result;
  }

  encodeJson(method, params) {
    return (0, _util.stringify)(this.encodeObject(method, params));
  }

  encodeObject(method, params) {
    return {
      id: ++(0, _classPrivateFieldLooseBase2.default)(this, _id)[_id],
      jsonrpc: '2.0',
      method,
      params
    };
  }

  getId() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _id)[_id];
  }

  _checkError(error) {
    if (error) {
      const {
        code,
        data,
        message
      } = error;
      throw new Error(`${code}: ${message}${formatErrorData(data)}`);
    }
  }

}

exports.RpcCoder = RpcCoder;

},{"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],193:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
const HTTP_URL = 'http://127.0.0.1:9933';
const WS_URL = 'ws://127.0.0.1:9944';
var _default = {
  HTTP_URL,
  WS_URL
};
exports.default = _default;

},{}],194:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _packageInfo = require("@polkadot/types/packageInfo");

var _util = require("@polkadot/util");

var _packageInfo2 = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _util.detectPackage)(_packageInfo2.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/rpc-provider")
},{"./packageInfo.js":198,"@polkadot/types/packageInfo":423,"@polkadot/util":640}],195:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HttpProvider = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _xFetch = require("@polkadot/x-fetch");

var _index = require("../coder/index.js");

var _defaults = _interopRequireDefault(require("../defaults.js"));

var _lru = require("../lru.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
const ERROR_SUBSCRIBE = 'HTTP Provider does not have subscriptions, use WebSockets instead';
const l = (0, _util.logger)('api-http');
/**
 * # @polkadot/rpc-provider
 *
 * @name HttpProvider
 *
 * @description The HTTP Provider allows sending requests using HTTP to a HTTP RPC server TCP port. It does not support subscriptions so you won't be able to listen to events such as new blocks or balance changes. It is usually preferable using the [[WsProvider]].
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Api from '@polkadot/api/promise';
 * import { HttpProvider } from '@polkadot/rpc-provider';
 *
 * const provider = new HttpProvider('http://127.0.0.1:9933');
 * const api = new Api(provider);
 * ```
 *
 * @see [[WsProvider]]
 */

var _callCache = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("callCache");

var _coder = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("coder");

var _endpoint = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("endpoint");

var _headers = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("headers");

var _send = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("send");

class HttpProvider {
  /**
   * @param {string} endpoint The endpoint url starting with http://
   */
  constructor(endpoint = _defaults.default.HTTP_URL, headers = {}) {
    Object.defineProperty(this, _send, {
      value: _send2
    });
    Object.defineProperty(this, _callCache, {
      writable: true,
      value: new _lru.LRUCache()
    });
    Object.defineProperty(this, _coder, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _endpoint, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _headers, {
      writable: true,
      value: void 0
    });
    (0, _util.assert)(/^(https|http):\/\//.test(endpoint), () => `Endpoint should start with 'http://', received '${endpoint}'`);
    (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder] = new _index.RpcCoder();
    (0, _classPrivateFieldLooseBase2.default)(this, _endpoint)[_endpoint] = endpoint;
    (0, _classPrivateFieldLooseBase2.default)(this, _headers)[_headers] = headers;
  }
  /**
   * @summary `true` when this provider supports subscriptions
   */


  get hasSubscriptions() {
    return false;
  }
  /**
   * @description Returns a clone of the object
   */


  clone() {
    return new HttpProvider((0, _classPrivateFieldLooseBase2.default)(this, _endpoint)[_endpoint], (0, _classPrivateFieldLooseBase2.default)(this, _headers)[_headers]);
  }
  /**
   * @description Manually connect from the connection
   */


  async connect() {// noop
  }
  /**
   * @description Manually disconnect from the connection
   */


  async disconnect() {// noop
  }
  /**
   * @summary Whether the node is connected or not.
   * @return {boolean} true if connected
   */


  get isConnected() {
    return true;
  }
  /**
   * @summary Events are not supported with the HttpProvider, see [[WsProvider]].
   * @description HTTP Provider does not have 'on' emitters. WebSockets should be used instead.
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  on(type, sub) {
    l.error('HTTP Provider does not have \'on\' emitters, use WebSockets instead');
    return () => {// noop
    };
  }
  /**
   * @summary Send HTTP POST Request with Body to configured HTTP Endpoint.
   */


  async send(method, params, isCacheable) {
    const body = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].encodeJson(method, params);

    let resultPromise = isCacheable ? (0, _classPrivateFieldLooseBase2.default)(this, _callCache)[_callCache].get(body) : null;

    if (!resultPromise) {
      resultPromise = (0, _classPrivateFieldLooseBase2.default)(this, _send)[_send](body);

      if (isCacheable) {
        (0, _classPrivateFieldLooseBase2.default)(this, _callCache)[_callCache].set(body, resultPromise);
      }
    }

    return resultPromise;
  }
  /**
   * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/require-await


  async subscribe(types, method, params, cb) {
    l.error(ERROR_SUBSCRIBE);
    throw new Error(ERROR_SUBSCRIBE);
  }
  /**
   * @summary Subscriptions are not supported with the HttpProvider, see [[WsProvider]].
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/require-await


  async unsubscribe(type, method, id) {
    l.error(ERROR_SUBSCRIBE);
    throw new Error(ERROR_SUBSCRIBE);
  }

}

exports.HttpProvider = HttpProvider;

async function _send2(body) {
  const response = await (0, _xFetch.fetch)((0, _classPrivateFieldLooseBase2.default)(this, _endpoint)[_endpoint], {
    body,
    headers: {
      Accept: 'application/json',
      'Content-Length': `${body.length}`,
      'Content-Type': 'application/json',
      ...(0, _classPrivateFieldLooseBase2.default)(this, _headers)[_headers]
    },
    method: 'POST'
  });
  (0, _util.assert)(response.ok, () => `[${response.status}]: ${response.statusText}`);
  const result = await response.json();
  return (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].decodeResponse(result);
}

},{"../coder/index.js":192,"../defaults.js":193,"../lru.js":197,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640,"@polkadot/x-fetch":726}],196:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});

},{"./bundle.js":191,"./detectPackage.js":194}],197:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LRUCache = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_CAPACITY = 2048;

class LRUNode {
  constructor(key) {
    this.key = void 0;
    this.next = void 0;
    this.prev = void 0;
    this.key = key;
    this.next = this.prev = this;
  }

} // https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU


var _data = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("data");

var _refs = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("refs");

var _length = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("length");

var _head = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("head");

var _tail = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("tail");

var _toHead = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("toHead");

class LRUCache {
  constructor(capacity = DEFAULT_CAPACITY) {
    Object.defineProperty(this, _toHead, {
      value: _toHead2
    });
    this.capacity = void 0;
    Object.defineProperty(this, _data, {
      writable: true,
      value: new Map()
    });
    Object.defineProperty(this, _refs, {
      writable: true,
      value: new Map()
    });
    Object.defineProperty(this, _length, {
      writable: true,
      value: 0
    });
    Object.defineProperty(this, _head, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _tail, {
      writable: true,
      value: void 0
    });
    this.capacity = capacity;
    (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head] = (0, _classPrivateFieldLooseBase2.default)(this, _tail)[_tail] = new LRUNode('<empty>');
  }

  get length() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length];
  }

  get lengthData() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _data)[_data].size;
  }

  get lengthRefs() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _refs)[_refs].size;
  }

  entries() {
    const keys = this.keys();
    const entries = new Array(keys.length);

    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      entries[i] = [key, (0, _classPrivateFieldLooseBase2.default)(this, _data)[_data].get(key)];
    }

    return entries;
  }

  keys() {
    const keys = [];

    if ((0, _classPrivateFieldLooseBase2.default)(this, _length)[_length]) {
      let curr = (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head];

      while (curr !== (0, _classPrivateFieldLooseBase2.default)(this, _tail)[_tail]) {
        keys.push(curr.key);
        curr = curr.next;
      }

      keys.push(curr.key);
    }

    return keys;
  }

  get(key) {
    const data = (0, _classPrivateFieldLooseBase2.default)(this, _data)[_data].get(key);

    if (data) {
      (0, _classPrivateFieldLooseBase2.default)(this, _toHead)[_toHead](key);

      return data;
    }

    return null;
  }

  set(key, value) {
    if ((0, _classPrivateFieldLooseBase2.default)(this, _data)[_data].has(key)) {
      (0, _classPrivateFieldLooseBase2.default)(this, _toHead)[_toHead](key);
    } else {
      const node = new LRUNode(key);

      (0, _classPrivateFieldLooseBase2.default)(this, _refs)[_refs].set(node.key, node);

      if (this.length === 0) {
        (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head] = (0, _classPrivateFieldLooseBase2.default)(this, _tail)[_tail] = node;
      } else {
        (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head].prev = node;
        node.next = (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head];
        (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head] = node;
      }

      if ((0, _classPrivateFieldLooseBase2.default)(this, _length)[_length] === this.capacity) {
        (0, _classPrivateFieldLooseBase2.default)(this, _data)[_data].delete((0, _classPrivateFieldLooseBase2.default)(this, _tail)[_tail].key);

        (0, _classPrivateFieldLooseBase2.default)(this, _refs)[_refs].delete((0, _classPrivateFieldLooseBase2.default)(this, _tail)[_tail].key);

        (0, _classPrivateFieldLooseBase2.default)(this, _tail)[_tail] = (0, _classPrivateFieldLooseBase2.default)(this, _tail)[_tail].prev;
      } else {
        (0, _classPrivateFieldLooseBase2.default)(this, _length)[_length] += 1;
      }
    }

    (0, _classPrivateFieldLooseBase2.default)(this, _data)[_data].set(key, value);
  }

}

exports.LRUCache = LRUCache;

function _toHead2(key) {
  const ref = (0, _classPrivateFieldLooseBase2.default)(this, _refs)[_refs].get(key);

  if (ref && ref !== (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head]) {
    ref.prev.next = ref.next;
    ref.next.prev = ref.prev;
    ref.next = (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head];
    (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head].prev = ref;
    (0, _classPrivateFieldLooseBase2.default)(this, _head)[_head] = ref;
  }
}

},{"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2}],198:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/rpc-provider',
  version: '6.12.1'
};
exports.packageInfo = packageInfo;

},{}],199:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWSErrorString = getWSErrorString;
// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0
// from https://stackoverflow.com/questions/19304157/getting-the-reason-why-websockets-closed-with-close-code-1006
const known = {
  1000: 'Normal Closure',
  1001: 'Going Away',
  1002: 'Protocol Error',
  1003: 'Unsupported Data',
  1004: '(For future)',
  1005: 'No Status Received',
  1006: 'Abnormal Closure',
  1007: 'Invalid frame payload data',
  1008: 'Policy Violation',
  1009: 'Message too big',
  1010: 'Missing Extension',
  1011: 'Internal Error',
  1012: 'Service Restart',
  1013: 'Try Again Later',
  1014: 'Bad Gateway',
  1015: 'TLS Handshake'
};

function getUnmapped(code) {
  if (code <= 1999) {
    return '(For WebSocket standard)';
  } else if (code <= 2999) {
    return '(For WebSocket extensions)';
  } else if (code <= 3999) {
    return '(For libraries and frameworks)';
  } else if (code <= 4999) {
    return '(For applications)';
  }
}

function getWSErrorString(code) {
  if (code >= 0 && code <= 999) {
    return '(Unused)';
  }

  return known[code] || getUnmapped(code) || '(Unknown)';
}

},{}],200:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WsProvider = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _eventemitter2 = _interopRequireDefault(require("eventemitter3"));

var _util = require("@polkadot/util");

var _xGlobal = require("@polkadot/x-global");

var _xWs = require("@polkadot/x-ws");

var _index = require("../coder/index.js");

var _defaults = _interopRequireDefault(require("../defaults.js"));

var _lru = require("../lru.js");

var _errors = require("./errors.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/rpc-provider authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable camelcase */
const ALIASES = {
  chain_finalisedHead: 'chain_finalizedHead',
  chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
  chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
};
const RETRY_DELAY = 2500;
const MEGABYTE = 1024 * 1024;
const l = (0, _util.logger)('api-ws');

function eraseRecord(record, cb) {
  Object.keys(record).forEach(key => {
    if (cb) {
      cb(record[key]);
    }

    delete record[key];
  });
}
/**
 * # @polkadot/rpc-provider/ws
 *
 * @name WsProvider
 *
 * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
 *
 * @example
 * <BR>
 *
 * ```javascript
 * import Api from '@polkadot/api/promise';
 * import { WsProvider } from '@polkadot/rpc-provider/ws';
 *
 * const provider = new WsProvider('ws://127.0.0.1:9944');
 * const api = new Api(provider);
 * ```
 *
 * @see [[HttpProvider]]
 */


var _callCache = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("callCache");

var _coder = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("coder");

var _endpoints = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("endpoints");

var _headers = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("headers");

var _eventemitter = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("eventemitter");

var _handlers = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("handlers");

var _isReadyPromise = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isReadyPromise");

var _waitingForId = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("waitingForId");

var _autoConnectMs = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("autoConnectMs");

var _endpointIndex = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("endpointIndex");

var _isConnected = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isConnected");

var _subscriptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("subscriptions");

var _websocket = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("websocket");

var _send = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("send");

var _emit = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("emit");

var _onSocketClose = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketClose");

var _onSocketError = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketError");

var _onSocketMessage = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketMessage");

var _onSocketMessageResult = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketMessageResult");

var _onSocketMessageSubscribe = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketMessageSubscribe");

var _onSocketOpen = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("onSocketOpen");

var _resubscribe = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("resubscribe");

class WsProvider {
  /**
   * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
   * @param {boolean} autoConnect Whether to connect automatically or not.
   */
  constructor(endpoint = _defaults.default.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}) {
    Object.defineProperty(this, _send, {
      value: _send2
    });
    Object.defineProperty(this, _callCache, {
      writable: true,
      value: new _lru.LRUCache()
    });
    Object.defineProperty(this, _coder, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _endpoints, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _headers, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _eventemitter, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _handlers, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _isReadyPromise, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _waitingForId, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _autoConnectMs, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _endpointIndex, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _isConnected, {
      writable: true,
      value: false
    });
    Object.defineProperty(this, _subscriptions, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _websocket, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _emit, {
      writable: true,
      value: (type, ...args) => {
        (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].emit(type, ...args);
      }
    });
    Object.defineProperty(this, _onSocketClose, {
      writable: true,
      value: event => {
        const error = new Error(`disconnected from ${(0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints][(0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex]]}: ${event.code}:: ${event.reason || (0, _errors.getWSErrorString)(event.code)}`);

        if ((0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] > 0) {
          l.error(error.message);
        }

        (0, _classPrivateFieldLooseBase2.default)(this, _isConnected)[_isConnected] = false;

        if ((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]) {
          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onclose = null;
          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onerror = null;
          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onmessage = null;
          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onopen = null;
          (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket] = null;
        }

        (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('disconnected'); // reject all hanging requests


        eraseRecord((0, _classPrivateFieldLooseBase2.default)(this, _handlers)[_handlers], h => h.callback(error, undefined));
        eraseRecord((0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId]);

        if ((0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] > 0) {
          setTimeout(() => {
            this.connectWithRetry().catch(() => {// does not throw
            });
          }, (0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs]);
        }
      }
    });
    Object.defineProperty(this, _onSocketError, {
      writable: true,
      value: error => {
        l.debug(() => ['socket error', error]);

        (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('error', error);
      }
    });
    Object.defineProperty(this, _onSocketMessage, {
      writable: true,
      value: message => {
        l.debug(() => ['received', message.data]);
        const response = JSON.parse(message.data);
        return (0, _util.isUndefined)(response.method) ? (0, _classPrivateFieldLooseBase2.default)(this, _onSocketMessageResult)[_onSocketMessageResult](response) : (0, _classPrivateFieldLooseBase2.default)(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](response);
      }
    });
    Object.defineProperty(this, _onSocketMessageResult, {
      writable: true,
      value: response => {
        const handler = (0, _classPrivateFieldLooseBase2.default)(this, _handlers)[_handlers][response.id];

        if (!handler) {
          l.debug(() => `Unable to find handler for id=${response.id}`);
          return;
        }

        try {
          const {
            method,
            params,
            subscription
          } = handler;

          const result = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].decodeResponse(response); // first send the result - in case of subs, we may have an update
          // immediately if we have some queued results already


          handler.callback(null, result);

          if (subscription) {
            const subId = `${subscription.type}::${result}`;
            (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions][subId] = (0, _util.objectSpread)({}, subscription, {
              method,
              params
            }); // if we have a result waiting for this subscription already

            if ((0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId][subId]) {
              (0, _classPrivateFieldLooseBase2.default)(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe]((0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId][subId]);
            }
          }
        } catch (error) {
          handler.callback(error, undefined);
        }

        delete (0, _classPrivateFieldLooseBase2.default)(this, _handlers)[_handlers][response.id];
      }
    });
    Object.defineProperty(this, _onSocketMessageSubscribe, {
      writable: true,
      value: response => {
        const method = ALIASES[response.method] || response.method || 'invalid';
        const subId = `${method}::${response.params.subscription}`;

        const handler = (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions][subId];

        if (!handler) {
          // store the JSON, we could have out-of-order subid coming in
          (0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId][subId] = response;
          l.debug(() => `Unable to find handler for subscription=${subId}`);
          return;
        } // housekeeping


        delete (0, _classPrivateFieldLooseBase2.default)(this, _waitingForId)[_waitingForId][subId];

        try {
          const result = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].decodeResponse(response);

          handler.callback(null, result);
        } catch (error) {
          handler.callback(error, undefined);
        }
      }
    });
    Object.defineProperty(this, _onSocketOpen, {
      writable: true,
      value: () => {
        (0, _util.assert)(!(0, _util.isNull)((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]), 'WebSocket cannot be null in onOpen');
        l.debug(() => ['connected to', (0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints][(0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex]]]);
        (0, _classPrivateFieldLooseBase2.default)(this, _isConnected)[_isConnected] = true;

        (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('connected');

        (0, _classPrivateFieldLooseBase2.default)(this, _resubscribe)[_resubscribe]();

        return true;
      }
    });
    Object.defineProperty(this, _resubscribe, {
      writable: true,
      value: () => {
        const subscriptions = (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions];

        (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions] = {};
        Promise.all(Object.keys(subscriptions).map(async id => {
          const {
            callback,
            method,
            params,
            type
          } = subscriptions[id]; // only re-create subscriptions which are not in author (only area where
          // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
          // are not included (and will not be re-broadcast)

          if (type.startsWith('author_')) {
            return;
          }

          try {
            await this.subscribe(type, method, params, callback);
          } catch (error) {
            l.error(error);
          }
        })).catch(l.error);
      }
    });
    const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];
    (0, _util.assert)(endpoints.length !== 0, 'WsProvider requires at least one Endpoint');
    endpoints.forEach(endpoint => {
      (0, _util.assert)(/^(wss|ws):\/\//.test(endpoint), () => `Endpoint should start with 'ws://', received '${endpoint}'`);
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter] = new _eventemitter2.default();
    (0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] = autoConnectMs || 0;
    (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder] = new _index.RpcCoder();
    (0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex] = -1;
    (0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints] = endpoints;
    (0, _classPrivateFieldLooseBase2.default)(this, _headers)[_headers] = headers;
    (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket] = null;

    if (autoConnectMs > 0) {
      this.connectWithRetry().catch(() => {// does not throw
      });
    }

    (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {
      (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].once('connected', () => {
        resolve(this);
      });
    });
  }
  /**
   * @summary `true` when this provider supports subscriptions
   */


  get hasSubscriptions() {
    return true;
  }
  /**
   * @summary Whether the node is connected or not.
   * @return {boolean} true if connected
   */


  get isConnected() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _isConnected)[_isConnected];
  }
  /**
   * @description Promise that resolves the first time we are connected and loaded
   */


  get isReady() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _isReadyPromise)[_isReadyPromise];
  }
  /**
   * @description Returns a clone of the object
   */


  clone() {
    return new WsProvider((0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints]);
  }
  /**
   * @summary Manually connect
   * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
   * connect manually using this method.
   */
  // eslint-disable-next-line @typescript-eslint/require-await


  async connect() {
    try {
      (0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex] = ((0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex] + 1) % (0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints].length;
      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket] = typeof _xGlobal.xglobal.WebSocket !== 'undefined' && (0, _util.isChildClass)(_xGlobal.xglobal.WebSocket, _xWs.WebSocket) ? new _xWs.WebSocket((0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints][(0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex]]) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore - WS may be an instance of w3cwebsocket, which supports headers
      : new _xWs.WebSocket((0, _classPrivateFieldLooseBase2.default)(this, _endpoints)[_endpoints][(0, _classPrivateFieldLooseBase2.default)(this, _endpointIndex)[_endpointIndex]], undefined, undefined, (0, _classPrivateFieldLooseBase2.default)(this, _headers)[_headers], undefined, {
        // default: true
        fragmentOutgoingMessages: true,
        // default: 16K (bump, the Node has issues with too many fragments, e.g. on setCode)
        fragmentationThreshold: 1 * MEGABYTE,
        // default: 1MiB (also align with maxReceivedMessageSize)
        maxReceivedFrameSize: 24 * MEGABYTE,
        // default: 8MB (however Polkadot api.query.staking.erasStakers.entries(356) is over that, 16M is ok there)
        maxReceivedMessageSize: 24 * MEGABYTE
      });
      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onclose = (0, _classPrivateFieldLooseBase2.default)(this, _onSocketClose)[_onSocketClose];
      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onerror = (0, _classPrivateFieldLooseBase2.default)(this, _onSocketError)[_onSocketError];
      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onmessage = (0, _classPrivateFieldLooseBase2.default)(this, _onSocketMessage)[_onSocketMessage];
      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].onopen = (0, _classPrivateFieldLooseBase2.default)(this, _onSocketOpen)[_onSocketOpen];
    } catch (error) {
      l.error(error);

      (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('error', error);

      throw error;
    }
  }
  /**
   * @description Connect, never throwing an error, but rather forcing a retry
   */


  async connectWithRetry() {
    if ((0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] > 0) {
      try {
        await this.connect();
      } catch (error) {
        setTimeout(() => {
          this.connectWithRetry().catch(() => {// does not throw
          });
        }, (0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs]);
      }
    }
  }
  /**
   * @description Manually disconnect from the connection, clearing auto-connect logic
   */
  // eslint-disable-next-line @typescript-eslint/require-await


  async disconnect() {
    // switch off autoConnect, we are in manual mode now
    (0, _classPrivateFieldLooseBase2.default)(this, _autoConnectMs)[_autoConnectMs] = 0;

    try {
      if ((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]) {
        // 1000 - Normal closure; the connection successfully completed
        (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].close(1000);
      }
    } catch (error) {
      l.error(error);

      (0, _classPrivateFieldLooseBase2.default)(this, _emit)[_emit]('error', error);

      throw error;
    }
  }
  /**
   * @summary Listens on events after having subscribed using the [[subscribe]] function.
   * @param  {ProviderInterfaceEmitted} type Event
   * @param  {ProviderInterfaceEmitCb}  sub  Callback
   * @return unsubscribe function
   */


  on(type, sub) {
    (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].on(type, sub);

    return () => {
      (0, _classPrivateFieldLooseBase2.default)(this, _eventemitter)[_eventemitter].removeListener(type, sub);
    };
  }
  /**
   * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
   * @param method The RPC methods to execute
   * @param params Encoded parameters as applicable for the method
   * @param subscription Subscription details (internally used)
   */


  send(method, params, isCacheable, subscription) {
    const body = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].encodeJson(method, params);

    let resultPromise = isCacheable ? (0, _classPrivateFieldLooseBase2.default)(this, _callCache)[_callCache].get(body) : null;

    if (!resultPromise) {
      resultPromise = (0, _classPrivateFieldLooseBase2.default)(this, _send)[_send](body, method, params, subscription);

      if (isCacheable) {
        (0, _classPrivateFieldLooseBase2.default)(this, _callCache)[_callCache].set(body, resultPromise);
      }
    }

    return resultPromise;
  }
  /**
   * @name subscribe
   * @summary Allows subscribing to a specific event.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const rpc = new Rpc(provider);
   *
   * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
   *   console.log(values)
   * }).then((subscriptionId) => {
   *   console.log('balance changes subscription id: ', subscriptionId)
   * })
   * ```
   */


  subscribe(type, method, params, callback) {
    return this.send(method, params, false, {
      callback,
      type
    });
  }
  /**
   * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
   */


  async unsubscribe(type, method, id) {
    const subscription = `${type}::${id}`; // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
    // the assigned id now does not match what the API user originally received. It has
    // a slight complication in solving - since we cannot rely on the send id, but rather
    // need to find the actual subscription id to map it

    if ((0, _util.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions][subscription])) {
      l.debug(() => `Unable to find active subscription=${subscription}`);
      return false;
    }

    delete (0, _classPrivateFieldLooseBase2.default)(this, _subscriptions)[_subscriptions][subscription];

    try {
      return this.isConnected && !(0, _util.isNull)((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]) ? this.send(method, [id]) : true;
    } catch (error) {
      return false;
    }
  }

}

exports.WsProvider = WsProvider;

async function _send2(json, method, params, subscription) {
  return new Promise((resolve, reject) => {
    try {
      (0, _util.assert)(this.isConnected && !(0, _util.isNull)((0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket]), 'WebSocket is not connected');

      const id = (0, _classPrivateFieldLooseBase2.default)(this, _coder)[_coder].getId();

      const callback = (error, result) => {
        error ? reject(error) : resolve(result);
      };

      l.debug(() => ['calling', method, json]);
      (0, _classPrivateFieldLooseBase2.default)(this, _handlers)[_handlers][id] = {
        callback,
        method,
        params,
        subscription
      };

      (0, _classPrivateFieldLooseBase2.default)(this, _websocket)[_websocket].send(json);
    } catch (error) {
      reject(error);
    }
  });
}

},{"../coder/index.js":192,"../defaults.js":193,"../lru.js":197,"./errors.js":199,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640,"@polkadot/x-global":728,"@polkadot/x-ws":738,"eventemitter3":743}],201:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getModuleTypes = getModuleTypes;
exports.getSpecAlias = getSpecAlias;
exports.getSpecExtensions = getSpecExtensions;
exports.getSpecHasher = getSpecHasher;
exports.getSpecRpc = getSpecRpc;
exports.getSpecTypes = getSpecTypes;
exports.getUpgradeVersion = getUpgradeVersion;
Object.defineProperty(exports, "knownOrigins", {
  enumerable: true,
  get: function () {
    return _knownOrigins.knownOrigins;
  }
});
Object.defineProperty(exports, "mapXcmTypes", {
  enumerable: true,
  get: function () {
    return _xcm.mapXcmTypes;
  }
});
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _util = require("@polkadot/util");

var _index = _interopRequireDefault(require("./chain/index.js"));

var _modules = _interopRequireDefault(require("./modules.js"));

var _index2 = _interopRequireDefault(require("./spec/index.js"));

var _index3 = _interopRequireDefault(require("./upgrades/index.js"));

var _knownOrigins = require("./knownOrigins.js");

var _packageInfo = require("./packageInfo.js");

var _xcm = require("./xcm.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
function withNames(chainName, specName, fn) {
  return fn(chainName.toString(), specName.toString());
} // flatten a VersionedType[] into a Record<string, string>

/** @internal */


function filterVersions(versions = [], specVersion) {
  return versions.filter(({
    minmax: [min, max]
  }) => ((0, _util.isUndefined)(min) || (0, _util.isNull)(min) || specVersion >= min) && ((0, _util.isUndefined)(max) || (0, _util.isNull)(max) || specVersion <= max)).reduce((result, {
    types
  }) => (0, _util.objectSpread)(result, types), {});
}
/**
 * @description Get types for specific modules (metadata override)
 */


function getModuleTypes({
  knownTypes
}, section) {
  var _knownTypes$typesAlia;

  return (0, _util.objectSpread)({}, _modules.default[section], (_knownTypes$typesAlia = knownTypes.typesAlias) === null || _knownTypes$typesAlia === void 0 ? void 0 : _knownTypes$typesAlia[section]);
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable signed extensions (ready for registration)
 */


function getSpecExtensions({
  knownTypes
}, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund, _knownTypes$typesBund2, _knownTypes$typesBund3, _knownTypes$typesBund4, _knownTypes$typesBund5, _knownTypes$typesBund6;

    return (0, _util.objectSpread)({}, (_knownTypes$typesBund = knownTypes.typesBundle) === null || _knownTypes$typesBund === void 0 ? void 0 : (_knownTypes$typesBund2 = _knownTypes$typesBund.spec) === null || _knownTypes$typesBund2 === void 0 ? void 0 : (_knownTypes$typesBund3 = _knownTypes$typesBund2[s]) === null || _knownTypes$typesBund3 === void 0 ? void 0 : _knownTypes$typesBund3.signedExtensions, (_knownTypes$typesBund4 = knownTypes.typesBundle) === null || _knownTypes$typesBund4 === void 0 ? void 0 : (_knownTypes$typesBund5 = _knownTypes$typesBund4.chain) === null || _knownTypes$typesBund5 === void 0 ? void 0 : (_knownTypes$typesBund6 = _knownTypes$typesBund5[c]) === null || _knownTypes$typesBund6 === void 0 ? void 0 : _knownTypes$typesBund6.signedExtensions);
  });
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
 */


function getSpecTypes({
  knownTypes
}, chainName, specName, specVersion) {
  const _specVersion = (0, _util.bnToBn)(specVersion).toNumber();

  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund7, _knownTypes$typesBund8, _knownTypes$typesBund9, _knownTypes$typesBund10, _knownTypes$typesBund11, _knownTypes$typesBund12, _knownTypes$typesSpec, _knownTypes$typesChai;

    return (// The order here is always, based on -
      //   - spec then chain
      //   - typesBundle takes higher precedence
      //   - types is the final catch-all override
      (0, _util.objectSpread)({}, filterVersions(_index2.default[s], _specVersion), filterVersions(_index.default[c], _specVersion), filterVersions((_knownTypes$typesBund7 = knownTypes.typesBundle) === null || _knownTypes$typesBund7 === void 0 ? void 0 : (_knownTypes$typesBund8 = _knownTypes$typesBund7.spec) === null || _knownTypes$typesBund8 === void 0 ? void 0 : (_knownTypes$typesBund9 = _knownTypes$typesBund8[s]) === null || _knownTypes$typesBund9 === void 0 ? void 0 : _knownTypes$typesBund9.types, _specVersion), filterVersions((_knownTypes$typesBund10 = knownTypes.typesBundle) === null || _knownTypes$typesBund10 === void 0 ? void 0 : (_knownTypes$typesBund11 = _knownTypes$typesBund10.chain) === null || _knownTypes$typesBund11 === void 0 ? void 0 : (_knownTypes$typesBund12 = _knownTypes$typesBund11[c]) === null || _knownTypes$typesBund12 === void 0 ? void 0 : _knownTypes$typesBund12.types, _specVersion), (_knownTypes$typesSpec = knownTypes.typesSpec) === null || _knownTypes$typesSpec === void 0 ? void 0 : _knownTypes$typesSpec[s], (_knownTypes$typesChai = knownTypes.typesChain) === null || _knownTypes$typesChai === void 0 ? void 0 : _knownTypes$typesChai[c], knownTypes.types)
    );
  });
}

function getSpecHasher({
  knownTypes
}, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund13, _knownTypes$typesBund14, _knownTypes$typesBund15, _knownTypes$typesBund16, _knownTypes$typesBund17, _knownTypes$typesBund18;

    return knownTypes.hasher || ((_knownTypes$typesBund13 = knownTypes.typesBundle) === null || _knownTypes$typesBund13 === void 0 ? void 0 : (_knownTypes$typesBund14 = _knownTypes$typesBund13.chain) === null || _knownTypes$typesBund14 === void 0 ? void 0 : (_knownTypes$typesBund15 = _knownTypes$typesBund14[c]) === null || _knownTypes$typesBund15 === void 0 ? void 0 : _knownTypes$typesBund15.hasher) || ((_knownTypes$typesBund16 = knownTypes.typesBundle) === null || _knownTypes$typesBund16 === void 0 ? void 0 : (_knownTypes$typesBund17 = _knownTypes$typesBund16.spec) === null || _knownTypes$typesBund17 === void 0 ? void 0 : (_knownTypes$typesBund18 = _knownTypes$typesBund17[s]) === null || _knownTypes$typesBund18 === void 0 ? void 0 : _knownTypes$typesBund18.hasher) || null;
  });
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
 */


function getSpecRpc({
  knownTypes
}, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund19, _knownTypes$typesBund20, _knownTypes$typesBund21, _knownTypes$typesBund22, _knownTypes$typesBund23, _knownTypes$typesBund24;

    return (0, _util.objectSpread)({}, (_knownTypes$typesBund19 = knownTypes.typesBundle) === null || _knownTypes$typesBund19 === void 0 ? void 0 : (_knownTypes$typesBund20 = _knownTypes$typesBund19.spec) === null || _knownTypes$typesBund20 === void 0 ? void 0 : (_knownTypes$typesBund21 = _knownTypes$typesBund20[s]) === null || _knownTypes$typesBund21 === void 0 ? void 0 : _knownTypes$typesBund21.rpc, (_knownTypes$typesBund22 = knownTypes.typesBundle) === null || _knownTypes$typesBund22 === void 0 ? void 0 : (_knownTypes$typesBund23 = _knownTypes$typesBund22.chain) === null || _knownTypes$typesBund23 === void 0 ? void 0 : (_knownTypes$typesBund24 = _knownTypes$typesBund23[c]) === null || _knownTypes$typesBund24 === void 0 ? void 0 : _knownTypes$typesBund24.rpc);
  });
}
/**
 * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
 */


function getSpecAlias({
  knownTypes
}, chainName, specName) {
  return withNames(chainName, specName, (c, s) => {
    var _knownTypes$typesBund25, _knownTypes$typesBund26, _knownTypes$typesBund27, _knownTypes$typesBund28, _knownTypes$typesBund29, _knownTypes$typesBund30;

    return (// as per versions, first spec, then chain then finally non-versioned
      (0, _util.objectSpread)({}, (_knownTypes$typesBund25 = knownTypes.typesBundle) === null || _knownTypes$typesBund25 === void 0 ? void 0 : (_knownTypes$typesBund26 = _knownTypes$typesBund25.spec) === null || _knownTypes$typesBund26 === void 0 ? void 0 : (_knownTypes$typesBund27 = _knownTypes$typesBund26[s]) === null || _knownTypes$typesBund27 === void 0 ? void 0 : _knownTypes$typesBund27.alias, (_knownTypes$typesBund28 = knownTypes.typesBundle) === null || _knownTypes$typesBund28 === void 0 ? void 0 : (_knownTypes$typesBund29 = _knownTypes$typesBund28.chain) === null || _knownTypes$typesBund29 === void 0 ? void 0 : (_knownTypes$typesBund30 = _knownTypes$typesBund29[c]) === null || _knownTypes$typesBund30 === void 0 ? void 0 : _knownTypes$typesBund30.alias, knownTypes.typesAlias)
    );
  });
}
/**
 * @description Returns a version record for known chains where upgrades are being tracked
 */


function getUpgradeVersion(genesisHash, blockNumber) {
  const known = _index3.default.find(u => genesisHash.eq(u.genesisHash));

  return known ? [known.versions.reduce((last, version) => {
    return blockNumber.gt(version.blockNumber) ? version : last;
  }, undefined), known.versions.find(version => blockNumber.lte(version.blockNumber))] : [undefined, undefined];
}

},{"./chain/index.js":202,"./knownOrigins.js":205,"./modules.js":206,"./packageInfo.js":207,"./spec/index.js":209,"./upgrades/index.js":218,"./xcm.js":222,"@polkadot/util":640}],202:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Type overrides based on specific nodes
const typesChain = {};
var _default = typesChain;
exports.default = _default;

},{}],203:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _packageInfo = require("@polkadot/types/packageInfo");

var _util = require("@polkadot/util");

var _packageInfo2 = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _util.detectPackage)(_packageInfo2.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/types-known")
},{"./packageInfo.js":207,"@polkadot/types/packageInfo":423,"@polkadot/util":640}],204:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});

},{"./bundle.js":201,"./detectPackage.js":203}],205:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.knownOrigins = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// We want predictive ordering (manually managed)

/* eslint-disable sort-keys */
// Since we don't have insight into the origin specification, we can only define what we know about
// in a pure Substrate/Polkadot implementation, any other custom origins won't be handled at all
const knownOrigins = {
  //
  // (1) Defaults from Substrate
  //
  Council: 'CollectiveOrigin',
  System: 'SystemOrigin',
  TechnicalCommittee: 'CollectiveOrigin',
  //
  // (2) Defaults from Polkadot
  //
  Xcm: 'XcmOrigin',
  XcmPallet: 'XcmOrigin',
  //
  // (3) Defaults from Acala
  //
  Authority: 'AuthorityOrigin',
  GeneralCouncil: 'CollectiveOrigin'
};
exports.knownOrigins = knownOrigins;

},{}],206:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
// type overrides for modules (where duplication between modules exist)
const typesModules = {
  assets: {
    Approval: 'AssetApproval',
    ApprovalKey: 'AssetApprovalKey',
    Balance: 'TAssetBalance',
    DestroyWitness: 'AssetDestroyWitness'
  },
  babe: {
    EquivocationProof: 'BabeEquivocationProof'
  },
  balances: {
    Status: 'BalanceStatus'
  },
  beefy: {
    AuthorityId: 'BeefyId'
  },
  contracts: {
    StorageKey: 'ContractStorageKey'
  },
  electionProviderMultiPhase: {
    Phase: 'ElectionPhase'
  },
  ethereum: {
    Block: 'EthBlock',
    Header: 'EthHeader',
    Receipt: 'EthReceipt',
    Transaction: 'EthTransaction',
    TransactionStatus: 'EthTransactionStatus'
  },
  evm: {
    Account: 'EvmAccount',
    Log: 'EvmLog',
    Vicinity: 'EvmVicinity'
  },
  grandpa: {
    Equivocation: 'GrandpaEquivocation',
    EquivocationProof: 'GrandpaEquivocationProof'
  },
  identity: {
    Judgement: 'IdentityJudgement'
  },
  inclusion: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  paraDisputes: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  paraInclusion: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  paraScheduler: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  paraShared: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  parachains: {
    Id: 'ParaId'
  },
  parasDisputes: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  parasInclusion: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  parasScheduler: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  parasShared: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  proposeParachain: {
    Proposal: 'ParachainProposal'
  },
  proxy: {
    Announcement: 'ProxyAnnouncement'
  },
  scheduler: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  shared: {
    ValidatorIndex: 'ParaValidatorIndex'
  },
  society: {
    Judgement: 'SocietyJudgement',
    Vote: 'SocietyVote'
  },
  staking: {
    Compact: 'CompactAssignments'
  },
  treasury: {
    Proposal: 'TreasuryProposal'
  },
  xcm: {
    AssetId: 'XcmAssetId'
  },
  xcmPallet: {
    AssetId: 'XcmAssetId'
  }
};
var _default = typesModules;
exports.default = _default;

},{}],207:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/types-known',
  version: '6.12.1'
};
exports.packageInfo = packageInfo;

},{}],208:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const sharedTypes = {
  // Anchor
  AnchorData: {
    anchoredBlock: 'u64',
    docRoot: 'H256',
    id: 'H256'
  },
  PreCommitData: {
    expirationBlock: 'u64',
    identity: 'H256',
    signingRoot: 'H256'
  },
  // Fees
  Fee: {
    key: 'Hash',
    price: 'Balance'
  },
  // MultiAccount
  MultiAccountData: {
    deposit: 'Balance',
    depositor: 'AccountId',
    signatories: 'Vec<AccountId>',
    threshold: 'u16'
  },
  // Bridge
  ChainId: 'u8',
  DepositNonce: 'u64',
  ResourceId: '[u8; 32]',
  'chainbridge::ChainId': 'u8',
  // NFT
  RegistryId: 'H160',
  TokenId: 'U256',
  AssetId: {
    registryId: 'RegistryId',
    tokenId: 'TokenId'
  },
  AssetInfo: {
    metadata: 'Bytes'
  },
  MintInfo: {
    anchorId: 'Hash',
    proofs: 'Vec<ProofMint>',
    staticHashes: '[Hash; 3]'
  },
  Proof: {
    leafHash: 'H256',
    sortedHashes: 'H256'
  },
  ProofMint: {
    hashes: 'Vec<Hash>',
    property: 'Bytes',
    salt: '[u8; 32]',
    value: 'Bytes'
  },
  RegistryInfo: {
    fields: 'Vec<Bytes>',
    ownerCanBurn: 'bool'
  },
  ProxyType: {
    _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'NonProxy']
  }
};
const standaloneTypes = (0, _util.objectSpread)({}, sharedTypes, {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'LookupSource',
  LookupSource: 'IndicesLookupSource',
  Multiplier: 'Fixed64',
  RefCount: 'RefCountTo259'
});
const versioned = [{
  minmax: [240, 243],
  types: (0, _util.objectSpread)({}, standaloneTypes, {
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'Vesting']
    }
  })
}, {
  minmax: [244, 999],
  types: (0, _util.objectSpread)({}, standaloneTypes)
}, {
  minmax: [1000, undefined],
  types: (0, _util.objectSpread)({}, sharedTypes)
}];
var _default = versioned;
exports.default = _default;

},{"@polkadot/util":640}],209:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _centrifugeChain = _interopRequireDefault(require("./centrifuge-chain.js"));

var _kusama = _interopRequireDefault(require("./kusama.js"));

var _node = _interopRequireDefault(require("./node.js"));

var _nodeTemplate = _interopRequireDefault(require("./node-template.js"));

var _polkadot = _interopRequireDefault(require("./polkadot.js"));

var _rococo = _interopRequireDefault(require("./rococo.js"));

var _shell = _interopRequireDefault(require("./shell.js"));

var _statemint = _interopRequireDefault(require("./statemint.js"));

var _westend = _interopRequireDefault(require("./westend.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Type overrides for specific spec types & versions as given in runtimeVersion
const typesSpec = {
  'centrifuge-chain': _centrifugeChain.default,
  kusama: _kusama.default,
  node: _node.default,
  'node-template': _nodeTemplate.default,
  polkadot: _polkadot.default,
  rococo: _rococo.default,
  shell: _shell.default,
  statemine: _statemint.default,
  statemint: _statemint.default,
  westend: _westend.default,
  westmint: _statemint.default
};
var _default = typesSpec;
exports.default = _default;

},{"./centrifuge-chain.js":208,"./kusama.js":210,"./node-template.js":211,"./node.js":212,"./polkadot.js":213,"./rococo.js":214,"./shell.js":215,"./statemint.js":216,"./westend.js":217}],210:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _xcm = require("../xcm.js");

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const sharedTypes = {
  CompactAssignments: 'CompactAssignmentsWith24',
  RawSolution: 'RawSolutionWith24',
  Keys: 'SessionKeys6',
  ProxyType: {
    _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement', 'CancelProxy', 'Auction']
  }
};
const addrIndicesTypes = {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'LookupSource',
  CompactAssignments: 'CompactAssignmentsWith16',
  RawSolution: 'RawSolutionWith16',
  Keys: 'SessionKeys5',
  LookupSource: 'IndicesLookupSource',
  ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const addrAccountIdTypes = {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'AccountId',
  CompactAssignments: 'CompactAssignmentsWith16',
  RawSolution: 'RawSolutionWith16',
  Keys: 'SessionKeys5',
  LookupSource: 'AccountId',
  ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const versioned = [{
  // 1020 is first CC3
  minmax: [1019, 1031],
  types: (0, _util.objectSpread)({}, addrIndicesTypes, {
    BalanceLock: 'BalanceLockTo212',
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchError: 'DispatchErrorTo198',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    IdentityInfo: 'IdentityInfoTo198',
    Keys: 'SessionKeys5',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    ReferendumInfo: 'ReferendumInfoTo239',
    SlashingSpans: 'SlashingSpansTo204',
    StakingLedger: 'StakingLedgerTo223',
    Votes: 'VotesTo230',
    Weight: 'u32'
  })
}, {
  minmax: [1032, 1042],
  types: (0, _util.objectSpread)({}, addrIndicesTypes, {
    BalanceLock: 'BalanceLockTo212',
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Keys: 'SessionKeys5',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    ReferendumInfo: 'ReferendumInfoTo239',
    SlashingSpans: 'SlashingSpansTo204',
    StakingLedger: 'StakingLedgerTo223',
    Votes: 'VotesTo230',
    Weight: 'u32'
  })
}, {
  // actual at 1045 (1043-1044 is dev)
  minmax: [1043, 1045],
  types: (0, _util.objectSpread)({}, addrIndicesTypes, {
    BalanceLock: 'BalanceLockTo212',
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Keys: 'SessionKeys5',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    ReferendumInfo: 'ReferendumInfoTo239',
    StakingLedger: 'StakingLedgerTo223',
    Votes: 'VotesTo230',
    Weight: 'u32'
  })
}, {
  minmax: [1046, 1054],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    ReferendumInfo: 'ReferendumInfoTo239',
    StakingLedger: 'StakingLedgerTo240',
    Weight: 'u32'
  })
}, {
  minmax: [1055, 1056],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    StakingLedger: 'StakingLedgerTo240',
    Weight: 'u32'
  })
}, {
  minmax: [1057, 1061],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [1062, 2012],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [2013, 2022],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [2023, 2024],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [2025, 2027],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes)
}, {
  minmax: [2028, 2029],
  types: (0, _util.objectSpread)({}, sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount',
    CompactAssignments: 'CompactAssignmentsWith16',
    RawSolution: 'RawSolutionWith16'
  })
}, {
  minmax: [2030, 9000],
  types: (0, _util.objectSpread)({}, sharedTypes, {
    CompactAssignments: 'CompactAssignmentsWith16',
    RawSolution: 'RawSolutionWith16'
  })
}, {
  minmax: [9010, 9099],
  types: (0, _util.objectSpread)({}, sharedTypes, (0, _xcm.mapXcmTypes)('V0'))
}, {
  // jump from 9100 to 9110, however align with Rococo
  minmax: [9100, 9105],
  types: (0, _util.objectSpread)({}, sharedTypes, (0, _xcm.mapXcmTypes)('V1'))
}, {
  // metadata v14
  minmax: [9106, undefined],
  types: {}
}];
var _default = versioned;
exports.default = _default;

},{"../xcm.js":222,"@polkadot/util":640}],211:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const versioned = [{
  minmax: [0, undefined],
  types: {// nothing, API tracks master
  }
}];
var _default = versioned;
exports.default = _default;

},{}],212:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const versioned = [{
  minmax: [0, undefined],
  types: {// nothing, API tracks master
  }
}];
var _default = versioned;
exports.default = _default;

},{}],213:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const sharedTypes = {
  CompactAssignments: 'CompactAssignmentsWith16',
  RawSolution: 'RawSolutionWith16',
  Keys: 'SessionKeys6',
  ProxyType: {
    _enum: {
      Any: 0,
      NonTransfer: 1,
      Governance: 2,
      Staking: 3,
      UnusedSudoBalances: 4,
      IdentityJudgement: 5,
      CancelProxy: 6,
      Auction: 7
    }
  }
};
const addrAccountIdTypes = {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'AccountId',
  Keys: 'SessionKeys5',
  LookupSource: 'AccountId',
  ValidatorPrefs: 'ValidatorPrefsWithCommission'
}; // these are override types for Polkadot

const versioned = [{
  minmax: [0, 12],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [13, 22],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [23, 24],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [25, 27],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes)
}, {
  minmax: [28, 29],
  types: (0, _util.objectSpread)({}, sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount'
  })
}, {
  minmax: [30, 9109],
  types: (0, _util.objectSpread)({}, sharedTypes)
}, {
  // metadata v14
  minmax: [9110, undefined],
  types: {}
}];
var _default = versioned;
exports.default = _default;

},{"@polkadot/util":640}],214:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _xcm = require("../xcm.js");

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
// structs need to be in order

/* eslint-disable sort-keys */
const sharedTypes = {
  FullIdentification: '()',
  // No staking, only session (as per config)
  Keys: 'SessionKeys7B'
};
const versioned = [{
  minmax: [0, 200],
  types: (0, _util.objectSpread)({}, sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount',
    Address: 'AccountId',
    LookupSource: 'AccountId'
  })
}, {
  minmax: [201, 214],
  types: (0, _util.objectSpread)({}, sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount'
  })
}, {
  minmax: [215, 228],
  types: (0, _util.objectSpread)({}, sharedTypes, {
    Keys: 'SessionKeys6'
  })
}, {
  minmax: [229, 9099],
  types: (0, _util.objectSpread)({}, sharedTypes, (0, _xcm.mapXcmTypes)('V0'))
}, {
  minmax: [9100, 9105],
  types: (0, _util.objectSpread)({}, sharedTypes, (0, _xcm.mapXcmTypes)('V1'))
}, {
  // metadata v14
  minmax: [9106, undefined],
  types: {}
}];
var _default = versioned;
exports.default = _default;

},{"../xcm.js":222,"@polkadot/util":640}],215:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const versioned = [{
  minmax: [0, undefined],
  types: {// nothing, limited runtime
  }
}];
var _default = versioned;
exports.default = _default;

},{}],216:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _xcm = require("../xcm.js");

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const sharedTypes = {
  TAssetBalance: 'u128',
  ProxyType: {
    _enum: ['Any', 'NonTransfer', 'CancelProxy', 'Assets', 'AssetOwner', 'AssetManager', 'Staking']
  }
}; // these are override types for Statemine, Statemint, Westmint

const versioned = [{
  minmax: [0, 3],
  types: (0, _util.objectSpread)({}, sharedTypes, (0, _xcm.mapXcmTypes)('V0'))
}, {
  minmax: [4, 5],
  types: (0, _util.objectSpread)({}, sharedTypes, (0, _xcm.mapXcmTypes)('V1'))
}, {
  // metadata V14
  minmax: [500, undefined],
  types: {}
}];
var _default = versioned;
exports.default = _default;

},{"../xcm.js":222,"@polkadot/util":640}],217:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _xcm = require("../xcm.js");

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */
const sharedTypes = {
  // 16 validators
  CompactAssignments: 'CompactAssignmentsWith16',
  RawSolution: 'RawSolutionWith16',
  // general
  Keys: 'SessionKeys6',
  ProxyType: {
    _enum: ['Any', 'NonTransfer', 'Staking', 'SudoBalances', 'IdentityJudgement', 'CancelProxy']
  }
};
const addrAccountIdTypes = {
  AccountInfo: 'AccountInfoWithRefCount',
  Address: 'AccountId',
  CompactAssignments: 'CompactAssignmentsWith16',
  LookupSource: 'AccountId',
  Keys: 'SessionKeys5',
  RawSolution: 'RawSolutionWith16',
  ValidatorPrefs: 'ValidatorPrefsWithCommission'
};
const versioned = [{
  minmax: [1, 2],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    Multiplier: 'Fixed64',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259',
    Weight: 'u32'
  })
}, {
  minmax: [3, 22],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    OpenTip: 'OpenTipTo225',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [23, 42],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    CompactAssignments: 'CompactAssignmentsTo257',
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [43, 44],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes, {
    DispatchInfo: 'DispatchInfoTo244',
    Heartbeat: 'HeartbeatTo244',
    RefCount: 'RefCountTo259'
  })
}, {
  minmax: [45, 47],
  types: (0, _util.objectSpread)({}, sharedTypes, addrAccountIdTypes)
}, {
  minmax: [48, 49],
  types: (0, _util.objectSpread)({}, sharedTypes, {
    AccountInfo: 'AccountInfoWithDualRefCount'
  })
}, {
  minmax: [50, 9099],
  types: (0, _util.objectSpread)({}, sharedTypes, (0, _xcm.mapXcmTypes)('V0'))
}, {
  minmax: [9100, 9105],
  types: (0, _util.objectSpread)({}, sharedTypes, (0, _xcm.mapXcmTypes)('V1'))
}, {
  // metadata v14
  minmax: [9106, undefined],
  types: {}
}];
var _default = versioned;
exports.default = _default;

},{"../xcm.js":222,"@polkadot/util":640}],218:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _networks = require("@polkadot/networks");

var _util = require("@polkadot/util");

var _kusama = _interopRequireDefault(require("./kusama.js"));

var _polkadot = _interopRequireDefault(require("./polkadot.js"));

var _westend = _interopRequireDefault(require("./westend.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
const allKnown = {
  kusama: _kusama.default,
  polkadot: _polkadot.default,
  westend: _westend.default
}; // testnets are not available in the networks map

const NET_EXTRA = {
  westend: {
    genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']
  }
};
/** @internal */

function checkOrder(network, versions) {
  const ooo = versions.filter((curr, index) => {
    const prev = versions[index - 1];
    return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];
  });
  (0, _util.assert)(!ooo.length, () => `${network}: Mismatched upgrade ordering: ${(0, _util.stringify)(ooo)}`);
  return versions;
}
/** @internal */


function mapRaw([network, versions]) {
  const chain = _networks.selectableNetworks.find(n => n.network === network) || NET_EXTRA[network];
  (0, _util.assert)(chain, () => `Unable to find info for chain ${network}`);
  return {
    genesisHash: (0, _util.hexToU8a)(chain.genesisHash[0]),
    network,
    versions: checkOrder(network, versions).map(([blockNumber, specVersion]) => ({
      blockNumber: new _util.BN(blockNumber),
      specVersion: new _util.BN(specVersion)
    }))
  };
} // Type overrides for specific spec types & versions as given in runtimeVersion


const upgrades = Object.entries(allKnown).map(mapRaw);
var _default = upgrades;
exports.default = _default;

},{"./kusama.js":219,"./polkadot.js":220,"./westend.js":221,"@polkadot/networks":179,"@polkadot/util":640}],219:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
const upgrades = [[0, 1020], [26669, 1021], [38245, 1022], [54248, 1023], [59659, 1024], [67651, 1025], [82191, 1027], [83238, 1028], [101503, 1029], [203466, 1030], [295787, 1031], [461692, 1032], [504329, 1033], [569327, 1038], [587687, 1039], [653183, 1040], [693488, 1042], [901442, 1045], [1375086, 1050], [1445458, 1051], [1472960, 1052], [1475648, 1053], [1491596, 1054], [1574408, 1055], [2064961, 1058], [2201991, 1062], [2671528, 2005], [2704202, 2007], [2728002, 2008], [2832534, 2011], [2962294, 2012], [3240000, 2013], [3274408, 2015], [3323565, 2019], [3534175, 2022], [3860281, 2023], [4143129, 2024], [4401242, 2025], [4841367, 2026], [5961600, 2027], [6137912, 2028], [6561855, 2029], [7100891, 2030], [7468792, 9010], [7668600, 9030], [7812476, 9040], [8010981, 9050], [8073833, 9070], [8555825, 9080], [8945245, 9090], [9611377, 9100], [9625129, 9111], [9866422, 9122], [10403784, 9130]];
var _default = upgrades;
exports.default = _default;

},{}],220:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
const upgrades = [[0, 0], [29231, 1], [188836, 5], [199405, 6], [214264, 7], [244358, 8], [303079, 9], [314201, 10], [342400, 11], [443963, 12], [528470, 13], [687751, 14], [746085, 15], [787923, 16], [799302, 17], [1205128, 18], [1603423, 23], [1733218, 24], [2005673, 25], [2436698, 26], [3613564, 27], [3899547, 28], [4345767, 29], [4876134, 30], [5661442, 9050], [6321619, 9080], [6713249, 9090], [7217907, 9100], [7229126, 9110], [7560558, 9122]];
var _default = upgrades;
exports.default = _default;

},{}],221:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
const upgrades = [[214356, 4], [392764, 7], [409740, 8], [809976, 20], [877581, 24], [879238, 25], [889472, 26], [902937, 27], [932751, 28], [991142, 29], [1030162, 31], [1119657, 32], [1199282, 33], [1342534, 34], [1392263, 35], [1431703, 36], [1433369, 37], [1490972, 41], [2087397, 43], [2316688, 44], [2549864, 45], [3925782, 46], [3925843, 47], [4207800, 48], [4627944, 49], [5124076, 50], [5478664, 900], [5482450, 9000], [5584305, 9010], [5784566, 9030], [5879822, 9031], [5896856, 9032], [5897316, 9033], [6117927, 9050], [6210274, 9070], [6379314, 9080], [6979141, 9090], [7568453, 9100], [7766394, 9111], [7911691, 9120], [7968866, 9121], [7982889, 9122]];
var _default = upgrades;
exports.default = _default;

},{}],222:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XCM_MAPPINGS = void 0;
exports.mapXcmTypes = mapXcmTypes;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types-known authors & contributors
// SPDX-License-Identifier: Apache-2.0
const XCM_MAPPINGS = ['AssetInstance', 'Fungibility', 'Junction', 'Junctions', 'MultiAsset', 'MultiAssetFilter', 'MultiLocation', 'Response', 'WildFungibility', 'WildMultiAsset', 'Xcm', 'XcmError', 'XcmOrder'];
exports.XCM_MAPPINGS = XCM_MAPPINGS;

function mapXcmTypes(version) {
  return XCM_MAPPINGS.reduce((all, key) => (0, _util.objectSpread)(all, {
    [key]: `${key}${version}`
  }), {});
}

},{"@polkadot/util":640}],223:[function(require,module,exports){
"use strict";

require("./lookup/index.js");

require("./registry.js");

},{"./lookup/index.js":224,"./registry.js":229}],224:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _types = require("./types.js");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

},{"./types.js":228}],225:[function(require,module,exports){

},{}],226:[function(require,module,exports){
arguments[4][225][0].apply(exports,arguments)
},{"dup":225}],227:[function(require,module,exports){
arguments[4][225][0].apply(exports,arguments)
},{"dup":225}],228:[function(require,module,exports){
"use strict";

require("./types-substrate.js");

require("./types-polkadot.js");

require("./types-kusama.js");

},{"./types-kusama.js":225,"./types-polkadot.js":226,"./types-substrate.js":227}],229:[function(require,module,exports){
arguments[4][225][0].apply(exports,arguments)
},{"dup":225}],230:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  typeDefinitions: true,
  rpcDefinitions: true,
  TypeDefInfo: true,
  convertSiV0toV1: true,
  packageInfo: true,
  unwrapStorageType: true
};
Object.defineProperty(exports, "TypeDefInfo", {
  enumerable: true,
  get: function () {
    return _types.TypeDefInfo;
  }
});
Object.defineProperty(exports, "convertSiV0toV1", {
  enumerable: true,
  get: function () {
    return _index4.convertSiV0toV1;
  }
});
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});
Object.defineProperty(exports, "rpcDefinitions", {
  enumerable: true,
  get: function () {
    return _jsonrpc.default;
  }
});
exports.typeDefinitions = void 0;
Object.defineProperty(exports, "unwrapStorageType", {
  enumerable: true,
  get: function () {
    return _StorageKey.unwrapStorageType;
  }
});

var typeDefinitions = _interopRequireWildcard(require("./interfaces/definitions.js"));

exports.typeDefinitions = typeDefinitions;

var _jsonrpc = _interopRequireDefault(require("./interfaces/jsonrpc.js"));

var _index = require("./codec/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _index2 = require("./create/index.js");

Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    }
  });
});

var _indexTypes = require("./index.types.js");

Object.keys(_indexTypes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _indexTypes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _indexTypes[key];
    }
  });
});

var _index3 = require("./metadata/index.js");

Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    }
  });
});

var _types = require("./create/types.js");

var _index4 = require("./metadata/PortableRegistry/index.js");

var _packageInfo = require("./packageInfo.js");

var _StorageKey = require("./primitive/StorageKey.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

},{"./codec/index.js":256,"./create/index.js":271,"./create/types.js":276,"./index.types.js":312,"./interfaces/definitions.js":332,"./interfaces/jsonrpc.js":346,"./metadata/PortableRegistry/index.js":393,"./metadata/index.js":409,"./packageInfo.js":423,"./primitive/StorageKey.js":435}],231:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AbstractArray = void 0;

var _util = require("@polkadot/util");

var _compareArray = require("./utils/compareArray.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name AbstractArray
 * @description
 * This manages codec arrays. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 * @noInheritDoc
 */
class AbstractArray extends Array {
  constructor(registry, values, initialU8aLength) {
    super(values.length); // explicitly set the values here - this removes the need for any extra allocations

    this.registry = void 0;
    this.createdAtHash = void 0;
    this.initialU8aLength = void 0;

    for (let i = 0; i < values.length; i++) {
      this[i] = values[i];
    }

    this.registry = registry;
    this.initialU8aLength = initialU8aLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    // We need to loop through all entries since they may have a variable length themselves,
    // e.g. when a Vec or Compact is contained withing, it has a variable length based on data
    let total = (0, _util.compactToU8a)(this.length).length;

    for (let i = 0; i < this.length; i++) {
      total += this[i].encodedLength;
    }

    return total;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */


  get length() {
    // only included here since we ignore inherited docs
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return (0, _compareArray.compareArray)(this, other);
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */


  toArray() {
    return Array.from(this);
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    const result = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      result[i] = this[i].toHuman(isExtended);
    }

    return result;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    const result = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      result[i] = this[i].toJSON();
    }

    return result;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */

  /**
   * @description Returns the string representation of the value
   */


  toString() {
    const result = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      result[i] = this[i].toString();
    }

    return `[${result.join(', ')}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      encoded[i] = this[i].toU8a(isBare);
    }

    return isBare ? (0, _util.u8aConcat)(...encoded) : (0, _util.u8aConcat)((0, _util.compactToU8a)(this.length), ...encoded);
  } // Below are methods that we override. When we do a `new Vec(...).map()`,
  // we want it to return an Array. We only override the methods that return a
  // new instance.

  /**
   * @description Concatenates two arrays
   */


  concat(other) {
    return this.toArray().concat(other instanceof AbstractArray ? other.toArray() : other);
  }
  /**
   * @description Filters the array with the callback
   */


  filter(callbackfn, thisArg) {
    return this.toArray().filter(callbackfn, thisArg);
  }
  /**
   * @description Maps the array with the callback
   */


  map(callbackfn, thisArg) {
    return this.toArray().map(callbackfn, thisArg);
  }
  /**
   * @description Checks if the array includes a specific value
   */


  includes(check) {
    return this.some(value => value.eq(check));
  }
  /**
   * @description Returns a slice of an array
   */


  slice(start, end) {
    return this.toArray().slice(start, end);
  }

}

exports.AbstractArray = AbstractArray;

},{"./utils/compareArray.js":257,"@polkadot/util":640}],232:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_UINT_BITS = exports.AbstractInt = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_UINT_BITS = 64; // Maximum allowed integer for JS is 2^53 - 1, set limit at 52
// In this case however, we always print any >32 as hex

exports.DEFAULT_UINT_BITS = DEFAULT_UINT_BITS;
const MAX_NUMBER_BITS = 52;
const MUL_P = new _util.BN(10000);
const FORMATTERS = [['Perquintill', _util.BN_QUINTILL], ['Perbill', _util.BN_BILLION], ['Permill', _util.BN_MILLION], ['Percent', _util.BN_HUNDRED]];

function toPercentage(value, divisor) {
  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
}
/** @internal */


function decodeAbstractInt(value, bitLength, isNegative) {
  if ((0, _util.isU8a)(value)) {
    return (0, _util.u8aToBn)(value.subarray(0, bitLength / 8), {
      isLe: true,
      isNegative
    }).toString();
  } else if ((0, _util.isBn)(value)) {
    return value.toString();
  } else if ((0, _util.isHex)(value, -1, true)) {
    return (0, _util.hexToBn)(value, {
      isLe: false,
      isNegative
    }).toString();
  }

  return (0, _util.bnToBn)(value).toString();
}
/**
 * @name AbstractInt
 * @ignore
 * @noInheritDoc
 */


var _bitLength = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("bitLength");

var _isSigned = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isSigned");

class AbstractInt extends _util.BN {
  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
    // Construct via a string, which will be passed in the BN constructor.
    // It would be ideal to actually return a BN, but there is an issue:
    // https://github.com/indutny/bn.js/issues/206
    super( // shortcut isU8a as used in SCALE decoding
    (0, _util.isU8a)(value) ? (0, _util.u8aToBn)(value.subarray(0, bitLength / 8), {
      isLe: true,
      isNegative: isSigned
    }).toString() : decodeAbstractInt(value, bitLength, isSigned));
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.encodedLength = void 0;
    Object.defineProperty(this, _bitLength, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _isSigned, {
      writable: true,
      value: void 0
    });
    this.registry = registry;
    (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] = bitLength;
    this.encodedLength = (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;
    (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned] = isSigned;
    const isPositive = this.gte(_util.BN_ZERO);
    const maxBits = bitLength - (isSigned && isPositive ? 1 : 0);
    (0, _util.assert)(isSigned || isPositive, () => `${this.toRawType()}: Negative number passed to unsigned type`);
    (0, _util.assert)(super.bitLength() <= maxBits, () => `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is a zero value (align elsewhere)
   */


  get isEmpty() {
    return this.isZero();
  }
  /**
   * @description Checks if the value is an unsigned type
   */


  get isUnsigned() {
    return !(0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned];
  }
  /**
   * @description Returns the number of bits in the value
   */


  bitLength() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength];
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  eq(other) {
    // Here we are actually overriding the built-in .eq to take care of both
    // number and BN inputs (no `.eqn` needed) - numbers will be converted
    return super.eq((0, _util.isHex)(other) ? (0, _util.hexToBn)(other.toString(), {
      isLe: false,
      isNegative: (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned]
    }) : (0, _util.bnToBn)(other));
  }
  /**
   * @description True if this value is the max of the type
   */


  isMax() {
    const u8a = this.toU8a().filter(b => b === 0xff);
    return u8a.length === (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;
  }
  /**
   * @description Returns a BigInt representation of the number
   */


  toBigInt() {
    return BigInt(this.toString());
  }
  /**
   * @description Returns the BN representation of the number. (Compatibility)
   */


  toBn() {
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex(isLe = false) {
    // For display/JSON, this is BE, for compare, use isLe
    return (0, _util.bnToHex)(this, {
      bitLength: this.bitLength(),
      isLe,
      isNegative: !this.isUnsigned
    });
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toHuman(isExpanded) {
    const rawType = this.toRawType();

    if (rawType === 'Balance') {
      return this.isMax() ? 'everything' // FIXME In the case of multiples we need some way of detecting which instance this belongs
      // to. as it stands we will always format (incorrectly) against the first token defined
      : (0, _util.formatBalance)(this, {
        decimals: this.registry.chainDecimals[0],
        withSi: true,
        withUnit: this.registry.chainTokens[0]
      });
    }

    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
    return divisor ? toPercentage(this, divisor) : (0, _util.formatNumber)(this);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON(onlyHex = false) {
    // FIXME this return type should by string | number, however BN returns string
    // Options here are
    //   - super.bitLength() - the actual used bits
    //   - this.#bitLength - the type bits (this should be used, however contracts RPC is problematic)
    return onlyHex || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    // NOTE In the case of balances, which have a special meaning on the UI
    // and can be interpreted differently, return a specific value for it so
    // underlying it always matches (no matter which length it actually is)
    return this instanceof this.registry.createClass('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
  }
  /**
   * @description Returns the string representation of the value
   * @param base The base to use for the conversion
   */


  toString(base) {
    // only included here since we do not inherit docs
    return super.toString(base);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return (0, _util.bnToU8a)(this, {
      bitLength: this.bitLength(),
      isLe: true,
      isNegative: !this.isUnsigned
    });
  }

}

exports.AbstractInt = AbstractInt;

},{"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],233:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BTreeMap = void 0;

var _Map = require("./Map.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
class BTreeMap extends _Map.CodecMap {
  static with(keyType, valType) {
    return class extends BTreeMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value, 'BTreeMap');
      }

    };
  }

}

exports.BTreeMap = BTreeMap;

},{"./Map.js":243}],234:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BTreeSet = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _index = require("./utils/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const l = (0, _util.logger)('BTreeSet');
/** @internal */

function decodeSetFromU8a(registry, ValClass, u8a) {
  const output = new Set();
  const [offset, length] = (0, _util.compactFromU8a)(u8a);
  const [values, decodedLength] = (0, _index.decodeU8aVec)(registry, u8a, offset, ValClass, length.toNumber());

  for (let i = 0; i < values.length; i++) {
    output.add(values[i]);
  }

  return [output, decodedLength + offset];
}
/** @internal */


function decodeSetFromSet(registry, ValClass, value) {
  const output = new Set();
  value.forEach(val => {
    try {
      output.add(val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      l.error('Failed to decode key or value:', error.message);
      throw error;
    }
  });
  return [output, 0];
}
/**
 * Decode input to pass into constructor.
 *
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Set<any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonSet
 * @internal
 */


function decodeSet(registry, valType, value) {
  if (!value) {
    return [new Set(), 0];
  }

  const ValClass = (0, _index.typeToConstructor)(registry, valType);

  if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) {
    return decodeSetFromU8a(registry, ValClass, (0, _util.u8aToU8a)(value));
  } else if (Array.isArray(value) || value instanceof Set) {
    return decodeSetFromSet(registry, ValClass, value);
  }

  throw new Error('BTreeSet: cannot decode type');
}

var _ValClass = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("ValClass");

class BTreeSet extends Set {
  constructor(registry, valType, rawValue) {
    const [values, decodedLength] = decodeSet(registry, valType, rawValue);
    super((0, _index.sortSet)(values));
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.initialU8aLength = void 0;
    Object.defineProperty(this, _ValClass, {
      writable: true,
      value: void 0
    });
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _index.typeToConstructor)(registry, valType);
  }

  static with(valType) {
    return class extends BTreeSet {
      constructor(registry, value) {
        super(registry, valType, value);
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let len = (0, _util.compactToU8a)(this.size).length;

    for (const v of this.values()) {
      len += v.encodedLength;
    }

    return len;
  }
  /**
   * @description Returns a hash of the value
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */


  get strings() {
    return [...super.values()].map(v => v.toString());
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return (0, _index.compareSet)(this, other);
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    const json = [];

    for (const v of this.values()) {
      json.push(v.toHuman(isExtended));
    }

    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    const json = [];

    for (const v of this.values()) {
      json.push(v.toJSON());
    }

    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `BTreeSet<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return (0, _util.stringify)(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = new Array();

    if (!isBare) {
      encoded.push((0, _util.compactToU8a)(this.size));
    }

    for (const v of this.values()) {
      encoded.push(v.toU8a(isBare));
    }

    return (0, _util.u8aConcat)(...encoded);
  }

}

exports.BTreeSet = BTreeSet;

},{"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],235:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Base = void 0;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Base
 * @description A type extends the Base class, when it holds a value
 */
class Base {
  constructor(registry, value, initialU8aLength) {
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.initialU8aLength = void 0;
    this._raw = void 0;
    this.registry = registry;
    this._raw = value;
    this.initialU8aLength = initialU8aLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this._raw.isEmpty;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return this._raw.eq(other);
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */


  toHex(isLe) {
    return this._raw.toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return this._raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this._raw.toJSON();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this._raw.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return this._raw.toU8a(isBare);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Base';
  }

}

exports.Base = Base;

},{}],236:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Compact = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _index = require("./utils/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Compact
 * @description
 * A compact length-encoding codec wrapper. It performs the same function as Length, however
 * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
 * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
 * a number and making the compact representation thereof
 */
var _Type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Type");

var _raw = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("raw");

class Compact {
  constructor(registry, Type, value = 0) {
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.initialU8aLength = void 0;
    Object.defineProperty(this, _Type, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _raw, {
      writable: true,
      value: void 0
    });
    this.registry = registry;
    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = (0, _index.typeToConstructor)(registry, Type);
    const [raw, decodedLength] = Compact.decodeCompact(registry, (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type], value);
    this.initialU8aLength = decodedLength;
    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = raw;
  }

  static with(Type) {
    return class extends Compact {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /** @internal */


  static decodeCompact(registry, Type, value) {
    if (value instanceof Compact) {
      return [new Type(registry, (0, _classPrivateFieldLooseBase2.default)(value, _raw)[_raw]), 0];
    } else if (value instanceof Type) {
      return [value, 0];
    } else if ((0, _util.isString)(value) || (0, _util.isNumber)(value) || (0, _util.isBn)(value) || (0, _util.isBigInt)(value)) {
      return [new Type(registry, value), 0];
    }

    const [decodedLength, bn] = (0, _util.compactFromU8a)(value);
    return [new Type(registry, bn), decodedLength];
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;
  }
  /**
   * @description Returns the number of bits in the value
   */


  bitLength() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].bitLength();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].eq(other instanceof Compact ? (0, _classPrivateFieldLooseBase2.default)(other, _raw)[_raw] : other);
  }
  /**
   * @description Returns a BigInt representation of the number
   */


  toBigInt() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBigInt();
  }
  /**
   * @description Returns the BN representation of the number
   */


  toBn() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBn();
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */


  toHex(isLe) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHex(isLe);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON();
  }
  /**
   * @description Returns the number representation for the value
   */


  toNumber() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `Compact<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type]) || (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return (0, _util.compactToU8a)((0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toBn());
  }
  /**
   * @description Returns the embedded [[UInt]] or [[Moment]] value
   */


  unwrap() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];
  }

}

exports.Compact = Compact;

},{"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],237:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DoNotConstruct = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _neverError = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("neverError"); // Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name DoNotConstruct
 * @description
 * An unknown type that fails on construction with the type info
 */


class DoNotConstruct {
  constructor(registry, typeName = 'DoNotConstruct') {
    this.registry = void 0;
    this.createdAtHash = void 0;
    Object.defineProperty(this, _neverError, {
      writable: true,
      value: void 0
    });
    this.registry = registry;
    (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError] = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }

  static with(typeName) {
    return class extends DoNotConstruct {
      constructor(registry) {
        super(registry, typeName);
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }
  /**
   * @description Checks if the value is an empty value (always true)
   */


  get isEmpty() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }

  eq() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }

  toHex() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }

  toHuman() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }

  toJSON() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }

  toRawType() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }

  toString() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }

  toU8a() {
    throw (0, _classPrivateFieldLooseBase2.default)(this, _neverError)[_neverError];
  }

}

exports.DoNotConstruct = DoNotConstruct;

},{"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2}],238:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Enum = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Null = require("../primitive/Null.js");

var _index = require("./utils/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// export interface, this is used in Enum.with, so required as public by TS
function isRustEnum(def) {
  const defValues = Object.values(def);

  if (defValues.some(v => (0, _util.isNumber)(v))) {
    (0, _util.assert)(defValues.every(v => (0, _util.isNumber)(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
    return false;
  }

  return true;
}

function extractDef(registry, _def) {
  const def = {};
  let isBasic;
  let isIndexed;

  if (Array.isArray(_def)) {
    for (let i = 0; i < _def.length; i++) {
      def[_def[i]] = {
        Type: _Null.Null,
        index: i
      };
    }

    isBasic = true;
    isIndexed = false;
  } else if (isRustEnum(_def)) {
    const entries = Object.entries((0, _index.mapToTypeMap)(registry, _def));

    for (let i = 0; i < entries.length; i++) {
      const [key, Type] = entries[i];
      def[key] = {
        Type,
        index: i
      };
    }

    isBasic = !Object.values(def).some(({
      Type
    }) => Type !== _Null.Null);
    isIndexed = false;
  } else {
    const entries = Object.entries(_def);

    for (let i = 0; i < entries.length; i++) {
      const [key, index] = entries[i];
      def[key] = {
        Type: _Null.Null,
        index
      };
    }

    isBasic = true;
    isIndexed = true;
  }

  return {
    def,
    isBasic,
    isIndexed
  };
}

function createFromValue(registry, def, index = 0, value) {
  const entry = Object.values(def).find(e => e.index === index);
  (0, _util.assert)(!(0, _util.isUndefined)(entry), () => `Unable to create Enum via index ${index}, in ${Object.keys(def).join(', ')}`);
  return {
    index,
    value: value instanceof entry.Type ? value : new entry.Type(registry, value)
  };
}

function decodeFromJSON(registry, def, key, value) {
  // JSON comes in the form of { "<type (camelCase)>": "<value for type>" }, here we
  // additionally force to lower to ensure forward compat
  const keys = Object.keys(def).map(k => k.toLowerCase());
  const keyLower = key.toLowerCase();
  const index = keys.indexOf(keyLower);
  (0, _util.assert)(index !== -1, () => `Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);

  try {
    return createFromValue(registry, def, Object.values(def)[index].index, value);
  } catch (error) {
    throw new Error(`Enum(${key}):: ${error.message}`);
  }
}

function decodeEnum(registry, def, value, index) {
  // NOTE We check the index path first, before looking at values - this allows treating
  // the optional indexes before anything else, more-specific > less-specific
  if ((0, _util.isNumber)(index)) {
    return createFromValue(registry, def, index, value);
  } else if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) {
    const u8a = (0, _util.u8aToU8a)(value); // nested, we don't want to match isObject below

    if (u8a.length) {
      return createFromValue(registry, def, u8a[0], u8a.subarray(1));
    }
  } else if (value instanceof Enum) {
    return createFromValue(registry, def, value.index, value.value);
  } else if ((0, _util.isNumber)(value)) {
    return createFromValue(registry, def, value);
  } else if ((0, _util.isString)(value)) {
    return decodeFromJSON(registry, def, value.toString());
  } else if ((0, _util.isObject)(value)) {
    const key = Object.keys(value)[0];
    return decodeFromJSON(registry, def, key, value[key]);
  } // Worst-case scenario, return the first with default


  return createFromValue(registry, def, Object.values(def)[0].index);
}
/**
 * @name Enum
 * @description
 * This implements an enum, that based on the value wraps a different type. It is effectively
 * an extension to enum where the value type is determined by the actual index.
 */


var _def2 = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("def");

var _entryIndex = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("entryIndex");

var _indexes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("indexes");

var _isBasic = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isBasic");

var _isIndexed = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isIndexed");

var _raw = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("raw");

class Enum {
  constructor(registry, Types, value, index) {
    this.registry = void 0;
    this.createdAtHash = void 0;
    Object.defineProperty(this, _def2, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _entryIndex, {
      writable: true,
      value: void 0
    });
    this.initialU8aLength = void 0;
    Object.defineProperty(this, _indexes, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _isBasic, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _isIndexed, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _raw, {
      writable: true,
      value: void 0
    });
    const {
      def,
      isBasic,
      isIndexed
    } = extractDef(registry, Types); // shortcut isU8a as used in SCALE decoding

    const decoded = (0, _util.isU8a)(value) && value.length && !(0, _util.isNumber)(index) ? createFromValue(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index);
    this.registry = registry;
    (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2] = def;
    (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] = isBasic;
    (0, _classPrivateFieldLooseBase2.default)(this, _isIndexed)[_isIndexed] = isIndexed;
    (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes] = Object.values(def).map(({
      index
    }) => index);
    (0, _classPrivateFieldLooseBase2.default)(this, _entryIndex)[_entryIndex] = (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes].indexOf(decoded.index) || 0;
    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = decoded.value;

    if ((0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].initialU8aLength) {
      this.initialU8aLength = 1 + (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].initialU8aLength;
    }
  }

  static with(Types) {
    const keys = Array.isArray(Types) ? Types : Object.keys(Types);
    const asKeys = new Array(keys.length);
    const isKeys = new Array(keys.length);

    for (let i = 0; i < keys.length; i++) {
      const name = (0, _util.stringPascalCase)(keys[i].replace(' ', '_'));
      asKeys[i] = `as${name}`;
      isKeys[i] = `is${name}`;
    }

    return class extends Enum {
      constructor(registry, value, index) {
        super(registry, Types, value, index);
        (0, _util.objectProperties)(this, isKeys, (_, i) => this.type === keys[i]);
        (0, _util.objectProperties)(this, asKeys, (k, i) => {
          (0, _util.assert)(this[isKeys[i]], () => `Cannot convert '${this.type}' via ${k}`);
          return this.value;
        });
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return 1 + (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].encodedLength;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The index of the enum value
   */


  get index() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes][(0, _classPrivateFieldLooseBase2.default)(this, _entryIndex)[_entryIndex]];
  }
  /**
   * @description true if this is a basic enum (no values)
   */


  get isBasic() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic];
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;
  }
  /**
   * @description Checks if the Enum points to a [[Null]] type
   */


  get isNone() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] instanceof _Null.Null;
  }
  /**
   * @description Checks if the Enum points to a [[Null]] type
   * @deprecated use isNone
   */


  get isNull() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] instanceof _Null.Null;
  }
  /**
   * @description The available keys for this enum
   */


  get defIndexes() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes];
  }
  /**
   * @description The available keys for this enum
   */


  get defKeys() {
    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);
  }
  /**
   * @description The name of the type this enum value represents
   */


  get type() {
    return this.defKeys[(0, _classPrivateFieldLooseBase2.default)(this, _entryIndex)[_entryIndex]];
  }
  /**
   * @description The value of the enum
   */


  get value() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    // cater for the case where we only pass the enum index
    if ((0, _util.isU8a)(other)) {
      return !this.toU8a().some((entry, index) => entry !== other[index]);
    } else if ((0, _util.isNumber)(other)) {
      return this.toNumber() === other;
    } else if ((0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] && (0, _util.isString)(other)) {
      return this.type === other;
    } else if ((0, _util.isHex)(other)) {
      return this.toHex() === other;
    } else if (other instanceof Enum) {
      return this.index === other.index && this.value.eq(other.value);
    } else if ((0, _util.isObject)(other)) {
      return this.value.eq(other[this.type]);
    } // compare the actual wrapper value


    return this.value.eq(other);
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] || this.isNone ? this.type : {
      [this.type]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended)
    };
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : {
      [(0, _util.stringCamelCase)(this.type)]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON()
    };
  }
  /**
   * @description Returns the number representation for the value
   */


  toNumber() {
    return this.index;
  }
  /**
   * @description Returns a raw struct representation of the enum types
   */


  _toRawStruct() {
    if ((0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic]) {
      return (0, _classPrivateFieldLooseBase2.default)(this, _isIndexed)[_isIndexed] ? this.defKeys.reduce((out, key, index) => {
        out[key] = (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes][index];
        return out;
      }, {}) : this.defKeys;
    }

    const typeMap = Object.entries((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]).reduce((out, [key, {
      Type
    }]) => {
      out[key] = Type;
      return out;
    }, {});
    return (0, _index.typesToMap)(this.registry, typeMap);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return (0, _util.stringify)({
      _enum: this._toRawStruct()
    });
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.isNull ? this.type : (0, _util.stringify)(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return (0, _util.u8aConcat)(new Uint8Array(isBare ? [] : [this.index]), (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(isBare));
  }

}

exports.Enum = Enum;

},{"../primitive/Null.js":434,"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],239:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HashMap = void 0;

var _Map = require("./Map.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
class HashMap extends _Map.CodecMap {
  static with(keyType, valType) {
    return class extends HashMap {
      constructor(registry, value) {
        super(registry, keyType, valType, value);
      }

    };
  }

}

exports.HashMap = HashMap;

},{"./Map.js":243}],240:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Int = void 0;

var _AbstractInt = require("./AbstractInt.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Int
 * @description
 * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */
class Int extends _AbstractInt.AbstractInt {
  constructor(registry, value = 0, bitLength) {
    super(registry, value, bitLength, true);
  }

  static with(bitLength, typeName) {
    return class extends Int {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }

      toRawType() {
        return typeName || super.toRawType();
      }

    };
  }

}

exports.Int = Int;

},{"./AbstractInt.js":232}],241:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Json = void 0;

var _util = require("@polkadot/util");

var _index = require("./utils/index.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeJson(value) {
  return Object.entries(value || {});
}
/**
 * @name Json
 * @description
 * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
 * implements a Codec, it is limited in that it can only be used with input objects via RPC,
 * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
 * @noInheritDoc
 */


class Json extends Map {
  constructor(registry, value) {
    const decoded = decodeJson(value);
    super(decoded);
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.registry = registry;
    (0, _util.objectProperties)(this, decoded.map(([k]) => k), k => this.get(k));
  }
  /**
   * @description Always 0, never encodes as a Uint8Array
   */


  get encodedLength() {
    return 0;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return [...this.keys()].length === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return (0, _index.compareMap)(this, other);
  }
  /**
   * @description Unimplemented, will throw
   */


  toHex() {
    throw new Error('Unimplemented');
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = (0, _util.isFunction)(value.toHuman) ? value.toHuman() : value;
      return json;
    }, {});
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return [...this.entries()].reduce((json, [key, value]) => {
      json[key] = value;
      return json;
    }, {});
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Json';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return (0, _util.stringify)(this.toJSON());
  }
  /**
   * @description Unimplemented, will throw
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    throw new Error('Unimplemented');
  }

}

exports.Json = Json;

},{"./utils/index.js":261,"@polkadot/util":640}],242:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkageResult = exports.Linkage = void 0;

var _Option = require("./Option.js");

var _Struct = require("./Struct.js");

var _Tuple = require("./Tuple.js");

var _Vec = require("./Vec.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const EMPTY = new Uint8Array();
/**
 * @name Linkage
 * @description The wrapper for the result from a LinkedMap
 */

class Linkage extends _Struct.Struct {
  constructor(registry, Type, value) {
    super(registry, {
      previous: _Option.Option.with(Type),
      // eslint-disable-next-line sort-keys
      next: _Option.Option.with(Type)
    }, value);
  }

  static withKey(Type) {
    return class extends Linkage {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }

  get previous() {
    return this.get('previous');
  }

  get next() {
    return this.get('next');
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `Linkage<${this.next.toRawType(true)}>`;
  }
  /**
   * @description Custom toU8a which with bare mode does not return the linkage if empty
   */


  toU8a() {
    // As part of a storage query (where these appear), in the case of empty, the values
    // are NOT populated by the node - follow the same logic, leaving it empty
    return this.isEmpty ? EMPTY : super.toU8a();
  }

}
/**
 * @name LinkageResult
 * @description A Linkage keys/Values tuple
 */


exports.Linkage = Linkage;

class LinkageResult extends _Tuple.Tuple {
  constructor(registry, [TypeKey, keys], [TypeValue, values]) {
    super(registry, {
      Keys: _Vec.Vec.with(TypeKey),
      Values: _Vec.Vec.with(TypeValue)
    }, [keys, values]);
  }

}

exports.LinkageResult = LinkageResult;

},{"./Option.js":244,"./Struct.js":249,"./Tuple.js":250,"./Vec.js":253}],243:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodecMap = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _AbstractArray = require("./AbstractArray.js");

var _Enum = require("./Enum.js");

var _Struct = require("./Struct.js");

var _index = require("./utils/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const l = (0, _util.logger)('Map');
/** @internal */

function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
  const output = new Map();
  const [offset, length] = (0, _util.compactFromU8a)(u8a);
  const count = length.toNumber();
  const types = [];

  for (let i = 0; i < count; i++) {
    types.push(KeyClass, ValClass);
  }

  const [values, decodedLength] = (0, _index.decodeU8a)(registry, u8a.subarray(offset), types);

  for (let i = 0; i < values.length; i += 2) {
    output.set(values[i], values[i + 1]);
  }

  return [output, offset + decodedLength];
}
/** @internal */


function decodeMapFromMap(registry, KeyClass, ValClass, value) {
  const output = new Map();

  for (const [key, val] of value.entries()) {
    const isComplex = KeyClass.prototype instanceof _AbstractArray.AbstractArray || KeyClass.prototype instanceof _Struct.Struct || KeyClass.prototype instanceof _Enum.Enum;

    try {
      output.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
    } catch (error) {
      l.error('Failed to decode key or value:', error.message);
      throw error;
    }
  }

  return [output, 0];
}
/**
 * Decode input to pass into constructor.
 *
 * @param KeyClass - Type of the map key
 * @param ValClass - Type of the map value
 * @param value - Value to decode, one of:
 * - null
 * - undefined
 * - hex
 * - Uint8Array
 * - Map<any, any>, where both key and value types are either
 *   constructors or decodeable values for their types.
 * @param jsonMap
 * @internal
 */


function decodeMap(registry, keyType, valType, value) {
  const KeyClass = (0, _index.typeToConstructor)(registry, keyType);
  const ValClass = (0, _index.typeToConstructor)(registry, valType);

  if (!value) {
    return [new Map(), 0];
  } else if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) {
    return decodeMapFromU8a(registry, KeyClass, ValClass, (0, _util.u8aToU8a)(value));
  } else if (value instanceof Map) {
    return decodeMapFromMap(registry, KeyClass, ValClass, value);
  } else if ((0, _util.isObject)(value)) {
    return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
  }

  throw new Error('Map: cannot decode type');
}

var _KeyClass = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("KeyClass");

var _ValClass = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("ValClass");

var _type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("type");

class CodecMap extends Map {
  constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
    const [decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
    super(type === 'BTreeMap' ? (0, _index.sortMap)(decoded) : decoded);
    this.registry = void 0;
    this.createdAtHash = void 0;
    Object.defineProperty(this, _KeyClass, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _ValClass, {
      writable: true,
      value: void 0
    });
    this.initialU8aLength = void 0;
    Object.defineProperty(this, _type, {
      writable: true,
      value: void 0
    });
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    (0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass] = (0, _index.typeToConstructor)(registry, keyType);
    (0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass] = (0, _index.typeToConstructor)(registry, valType);
    (0, _classPrivateFieldLooseBase2.default)(this, _type)[_type] = type;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let len = (0, _util.compactToU8a)(this.size).length;

    for (const [k, v] of this.entries()) {
      len += v.encodedLength + k.encodedLength;
    }

    return len;
  }
  /**
   * @description Returns a hash of the value
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return (0, _index.compareMap)(this, other);
  }
  /**
   * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    const json = {};

    for (const [k, v] of this.entries()) {
      json[k.toString()] = v.toHuman(isExtended);
    }

    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    const json = {};

    for (const [k, v] of this.entries()) {
      json[k.toString()] = v.toJSON();
    }

    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `${(0, _classPrivateFieldLooseBase2.default)(this, _type)[_type]}<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _KeyClass)[_KeyClass])(this.registry).toRawType()},${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _ValClass)[_ValClass])(this.registry).toRawType()}>`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return (0, _util.stringify)(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = new Array();

    if (!isBare) {
      encoded.push((0, _util.compactToU8a)(this.size));
    }

    for (const [k, v] of this.entries()) {
      encoded.push(k.toU8a(isBare), v.toU8a(isBare));
    }

    return (0, _util.u8aConcat)(...encoded);
  }

}

exports.CodecMap = CodecMap;

},{"./AbstractArray.js":231,"./Enum.js":238,"./Struct.js":249,"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],244:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Option = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Null = require("../primitive/Null.js");

var _index = require("./utils/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeOption(registry, Type, value) {
  // In the case of an option, unwrap the inner
  if (value instanceof Option) {
    value = value.value;
  }

  if ((0, _util.isNull)(value) || (0, _util.isUndefined)(value) || value instanceof _Null.Null || value === '0x') {
    return new _Null.Null(registry);
  } else if (value instanceof Type) {
    // don't re-create, use as it (which also caters for derived types)
    return value;
  } else if ((0, _util.isU8a)(value)) {
    // the isU8a check happens last in the if-tree - since the wrapped value
    // may be an instance of it, so Type and Option checks go in first
    return !value.length || value[0] === 0 ? new _Null.Null(registry) : new Type(registry, value.subarray(1));
  }

  return new Type(registry, value);
}
/**
 * @name Option
 * @description
 * An Option is an optional field. Basically the first byte indicates that there is
 * is value to follow. If the byte is `1` there is an actual value. So the Option
 * implements that - decodes, checks for optionality and wraps the required structure
 * with a value if/as required/found.
 */


var _Type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Type");

var _initialU8aLength = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("initialU8aLength");

var _raw = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("raw");

class Option {
  constructor(registry, typeName, value) {
    this.registry = void 0;
    this.createdAtHash = void 0;
    Object.defineProperty(this, _Type, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _initialU8aLength, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _raw, {
      writable: true,
      value: void 0
    });
    const Type = (0, _index.typeToConstructor)(registry, typeName);
    const decoded = (0, _util.isU8a)(value) && value.length && !(0, _util.isCodec)(value) ? value[0] === 0 ? new _Null.Null(registry) : new Type(registry, value.subarray(1)) : decodeOption(registry, Type, value);
    this.registry = registry;
    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = Type;
    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = decoded;

    if (decoded.initialU8aLength) {
      (0, _classPrivateFieldLooseBase2.default)(this, _initialU8aLength)[_initialU8aLength] = 1 + decoded.initialU8aLength;
    }
  }

  static with(Type) {
    return class extends Option {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    // boolean byte (has value, doesn't have) along with wrapped length
    return 1 + (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].encodedLength;
  }
  /**
   * @description The length of the initial encoded value (Only available when constructed from a Uint8Array)
   */


  get initialU8aLength() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _initialU8aLength)[_initialU8aLength];
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the Option has no value
   */


  get isEmpty() {
    return this.isNone;
  }
  /**
   * @description Checks if the Option has no value
   */


  get isNone() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] instanceof _Null.Null;
  }
  /**
   * @description Checks if the Option has a value
   */


  get isSome() {
    return !this.isNone;
  }
  /**
   * @description The actual value for the Option
   */


  get value() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    if (other instanceof Option) {
      return this.isSome === other.isSome && this.value.eq(other.value);
    }

    return this.value.eq(other);
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    // This attempts to align with the JSON encoding - actually in this case
    // the isSome value is correct, however the `isNone` may be problematic
    return this.isNone ? '0x' : (0, _util.u8aToHex)(this.toU8a().subarray(1));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.isNone ? null : (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType(isBare) {
    const wrapped = this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry).toRawType();
    return isBare ? wrapped : `Option<${wrapped}>`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    if (isBare) {
      return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(true);
    }

    const u8a = new Uint8Array(this.encodedLength);

    if (this.isSome) {
      u8a.set([1]);
      u8a.set((0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(), 1);
    }

    return u8a;
  }
  /**
   * @description Returns the value that the Option represents (if available), throws if null
   */


  unwrap() {
    (0, _util.assert)(this.isSome, 'Option: unwrapping a None value');
    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */


  unwrapOr(defaultValue) {
    return this.isSome ? this.unwrap() : defaultValue;
  }
  /**
   * @description Returns the value that the Option represents (if available) or defaultValue if none
   * @param defaultValue The value to return if the option isNone
   */


  unwrapOrDefault() {
    return this.isSome ? this.unwrap() : new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry);
  }

}

exports.Option = Option;

},{"../primitive/Null.js":434,"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],245:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RangeInclusive = exports.Range = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _Tuple = require("./Tuple.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
var _rangeName = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("rangeName");
/**
 * @name Range
 * @description
 * Rust `Range<T>` representation
 */


class Range extends _Tuple.Tuple {
  constructor(registry, Type, value, rangeName = 'Range') {
    super(registry, {
      end: Type,
      start: Type
    }, value);
    Object.defineProperty(this, _rangeName, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _rangeName)[_rangeName] = rangeName;
  }

  static with(Types) {
    return class extends Range {
      constructor(registry, value) {
        super(registry, Types, value);
      }

    };
  }
  /**
   * @description Returns the starting range value
   */


  get start() {
    return this[0];
  }
  /**
   * @description Returns the ending range value
   */


  get end() {
    return this[1];
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `${(0, _classPrivateFieldLooseBase2.default)(this, _rangeName)[_rangeName]}<${this.start.toRawType()}>`;
  }

}

exports.Range = Range;

class RangeInclusive extends Range {
  constructor(registry, type, value) {
    super(registry, type, value, 'RangeInclusive');
  }

  static with(Types) {
    return class extends RangeInclusive {
      constructor(registry, value) {
        super(registry, Types, value);
      }

    };
  }

}

exports.RangeInclusive = RangeInclusive;

},{"./Tuple.js":250,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2}],246:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Raw = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Raw
 * @description
 * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
 * from other implementations where it will consume the full Uint8Array as passed to it.
 * As such it is meant to be subclassed where the wrapper takes care of the
 * actual lengths instead of used directly.
 * @noInheritDoc
 */
class Raw extends Uint8Array {
  constructor(registry, value, initialU8aLength) {
    super((0, _util.u8aToU8a)(value));
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.initialU8aLength = void 0;
    this.registry = registry;
    this.initialU8aLength = initialU8aLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.length;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Returns true if the wrapped value contains only ASCII printable characters
   */


  get isAscii() {
    return (0, _util.isAscii)(this);
  }
  /**
   * @description Returns true if the type wraps an empty/default all-0 value
   */


  get isEmpty() {
    return !this.length || (0, _util.isUndefined)(this.find(b => !!b));
  }
  /**
   * @description Returns true if the wrapped value contains only utf8 characters
   */


  get isUtf8() {
    return (0, _util.isUtf8)(this);
  }
  /**
   * @description The length of the value
   */


  get length() {
    // only included here since we ignore inherited docs
    return super.length;
  }
  /**
   * @description Returns the number of bits in the value
   */


  bitLength() {
    return this.length * 8;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    if (other instanceof Uint8Array) {
      return this.length === other.length && !this.some((b, index) => b !== other[index]);
    }

    return this.eq((0, _util.u8aToU8a)(other));
  }
  /**
   * @description Create a new slice from the actual buffer. (compat)
   * @param start The position to start at
   * @param end The position to end at
   */


  slice(start, end) {
    // Like subarray below, we have to follow this approach since we are extending the TypeArray.
    // This happens especially when it comes to further extensions, the length may be an override
    return Uint8Array.from(this).slice(start, end);
  }
  /**
   * @description Create a new subarray from the actual buffer. (compat)
   * @param begin The position to start at
   * @param end The position to end at
   */


  subarray(begin, end) {
    return Uint8Array.from(this).subarray(begin, end);
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this);
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    if (this.isAscii) {
      const text = this.toUtf8(); // ensure we didn't end up with multibyte codepoints

      if ((0, _util.isAscii)(text)) {
        return text;
      }
    }

    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Raw';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return Uint8Array.from(this);
  }
  /**
   * @description Returns the wrapped data as a UTF-8 string
   */


  toUtf8() {
    (0, _util.assert)(this.isUtf8, 'The character sequence is not a valid Utf8 string');
    return (0, _util.u8aToString)(this);
  }

}

exports.Raw = Raw;

},{"@polkadot/util":640}],247:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Result = void 0;

var _util = require("@polkadot/util");

var _Enum = require("./Enum.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Result
 * @description
 * A Result maps to the Rust Result type, that can either wrap a success or error value
 */
class Result extends _Enum.Enum {
  constructor(registry, Ok, Err, value) {
    // NOTE This is order-dependent, Ok (with index 0) needs to be first
    // eslint-disable-next-line sort-keys
    super(registry, {
      Ok,
      Err
    }, value);
  }

  static with(Types) {
    return class extends Result {
      constructor(registry, value) {
        super(registry, Types.Ok, Types.Err, value);
      }

    };
  }
  /**
   * @description Returns the wrapper Err value (if isErr)
   */


  get asErr() {
    (0, _util.assert)(this.isErr, 'Cannot extract Err value from Ok result, check isErr first');
    return this.value;
  }
  /**
   * @deprecated Use asErr
   */


  get asError() {
    return this.asErr;
  }
  /**
   * @description Returns the wrapper Ok value (if isOk)
   */


  get asOk() {
    (0, _util.assert)(this.isOk, 'Cannot extract Ok value from Err result, check isOk first');
    return this.value;
  }
  /**
   * @description Checks if the Result has no value
   */


  get isEmpty() {
    return this.isOk && this.value.isEmpty;
  }
  /**
   * @description Checks if the Result wraps an Err value
   */


  get isErr() {
    return !this.isOk;
  }
  /**
   * @deprecated Use isErr
   */


  get isError() {
    return this.isErr;
  }
  /**
   * @description Checks if the Result wraps an Ok value
   */


  get isOk() {
    return this.index === 0;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    const Types = this._toRawStruct();

    return `Result<${Types.Ok},${Types.Err}>`;
  }

}

exports.Result = Result;

},{"./Enum.js":238,"@polkadot/util":640}],248:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodecSet = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _index = require("./utils/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function encodeSet(setValues, values) {
  const encoded = new _util.BN(0);

  for (let i = 0; i < values.length; i++) {
    encoded.ior((0, _util.bnToBn)(setValues[values[i]] || 0));
  }

  return encoded;
}
/** @internal */


function decodeSetArray(setValues, values) {
  const result = new Array(values.length);

  for (let i = 0; i < values.length; i++) {
    const key = values[i];
    (0, _util.assert)(!(0, _util.isUndefined)(setValues[key]), () => `Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
    result[i] = key;
  }

  return result;
}
/** @internal */


function decodeSetNumber(setValues, _value) {
  const bn = (0, _util.bnToBn)(_value);
  const keys = Object.keys(setValues);
  const result = [];

  for (let i = 0; i < keys.length; i++) {
    const key = keys[i];

    if (bn.and((0, _util.bnToBn)(setValues[key])).eq((0, _util.bnToBn)(setValues[key]))) {
      result.push(key);
    }
  }

  const computed = encodeSet(setValues, result);
  (0, _util.assert)(bn.eq(computed), () => `Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
  return result;
}
/** @internal */


function decodeSet(setValues, value = 0, bitLength) {
  (0, _util.assert)(bitLength % 8 === 0, () => `Expected valid bitLength, power of 8, found ${bitLength}`);
  const byteLength = bitLength / 8;

  if ((0, _util.isU8a)(value)) {
    return value.length === 0 ? [] : decodeSetNumber(setValues, (0, _util.u8aToBn)(value.subarray(0, byteLength), {
      isLe: true
    }));
  } else if ((0, _util.isString)(value)) {
    return decodeSet(setValues, (0, _util.u8aToU8a)(value), byteLength);
  } else if (value instanceof Set || Array.isArray(value)) {
    const input = Array.isArray(value) ? value : [...value.values()];
    return decodeSetArray(setValues, input);
  }

  return decodeSetNumber(setValues, value);
}
/**
 * @name Set
 * @description
 * An Set is an array of string values, represented an an encoded type by
 * a bitwise representation of the values.
 */


var _allowed = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("allowed");

var _byteLength = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("byteLength");

class CodecSet extends Set {
  constructor(registry, setValues, value, bitLength = 8) {
    super(decodeSet(setValues, value, bitLength));
    this.registry = void 0;
    this.createdAtHash = void 0;
    Object.defineProperty(this, _allowed, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _byteLength, {
      writable: true,
      value: void 0
    });

    this.add = key => {
      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
      // we have the isUndefined(this._setValues) in here as well, add is used internally
      // in the Set constructor (so it is undefined at this point, and should allow)
      (0, _util.assert)((0, _util.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed]) || !(0, _util.isUndefined)((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed][key]), () => `Set: Invalid key '${key}' on add`);
      super.add(key);
      return this;
    };

    this.registry = registry;
    (0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed] = setValues;
    (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength] = bitLength / 8;
  }

  static with(values, bitLength) {
    const keys = Object.keys(values);
    const isKeys = new Array(keys.length);

    for (let i = 0; i < keys.length; i++) {
      isKeys[i] = `is${(0, _util.stringPascalCase)(keys[i])}`;
    }

    return class extends CodecSet {
      constructor(registry, value) {
        super(registry, values, value, bitLength);
        (0, _util.objectProperties)(this, isKeys, (_, i) => this.strings.includes(keys[i]));
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength];
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description true is the Set contains no values
   */


  get isEmpty() {
    return this.size === 0;
  }
  /**
   * @description The actual set values as a string[]
   */


  get strings() {
    return [...super.values()];
  }
  /**
   * @description The encoded value for the set members
   */


  get valueEncoded() {
    return encodeSet((0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed], this.strings);
  }
  /**
   * @description adds a value to the Set (extended to allow for validity checking)
   */

  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    if (Array.isArray(other)) {
      // we don't actually care about the order, sort the values
      return (0, _index.compareArray)(this.strings.sort(), other.sort());
    } else if (other instanceof Set) {
      return this.eq([...other.values()]);
    } else if ((0, _util.isNumber)(other) || (0, _util.isBn)(other)) {
      return this.valueEncoded.eq((0, _util.bnToBn)(other));
    }

    return false;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.strings;
  }
  /**
   * @description The encoded value for the set members
   */


  toNumber() {
    return this.valueEncoded.toNumber();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return (0, _util.stringify)({
      _set: (0, _classPrivateFieldLooseBase2.default)(this, _allowed)[_allowed]
    });
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return `[${this.strings.join(', ')}]`;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return (0, _util.bnToU8a)(this.valueEncoded, {
      bitLength: (0, _classPrivateFieldLooseBase2.default)(this, _byteLength)[_byteLength] * 8,
      isLe: true
    });
  }

}

exports.CodecSet = CodecSet;

},{"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],249:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Struct = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _index = require("./utils/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeStructFromObject(registry, Types, value, jsonMap) {
  let jsonObj;
  const inputKeys = Object.keys(Types);
  const typeofArray = Array.isArray(value);
  const typeofMap = value instanceof Map;
  (0, _util.assert)(typeofArray || typeofMap || (0, _util.isObject)(value), () => `Struct: Cannot decode value ${(0, _util.stringify)(value)} (typeof ${typeof value}), expected an input object, map or array`);
  (0, _util.assert)(!typeofArray || value.length === inputKeys.length, () => `Struct: Unable to map ${(0, _util.stringify)(value)} array to object with known keys ${inputKeys.join(', ')}`);
  const raw = new Array(inputKeys.length);

  for (let i = 0; i < inputKeys.length; i++) {
    const key = inputKeys[i];
    const jsonKey = jsonMap.get(key) || key;
    const Type = Types[key];
    let assign;

    try {
      if (typeofArray) {
        assign = value[i];
      } else if (typeofMap) {
        assign = jsonKey && value.get(jsonKey);
      } else {
        assign = jsonKey && value[jsonKey];

        if ((0, _util.isUndefined)(assign)) {
          if ((0, _util.isUndefined)(jsonObj)) {
            const entries = Object.entries(value);
            jsonObj = {};

            for (let e = 0; e < entries.length; e++) {
              jsonObj[(0, _util.stringCamelCase)(entries[e][0])] = entries[e][1];
            }
          }

          assign = jsonKey && jsonObj[jsonKey];
        }
      }

      raw[i] = [key, assign instanceof Type ? assign : new Type(registry, assign)];
    } catch (error) {
      let type = Type.name;

      try {
        type = new Type(registry).toRawType();
      } catch (error) {// ignore
      }

      throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
    }
  }

  return [raw, 0];
}
/**
 * @name Struct
 * @description
 * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
 * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
 * values in the constructor and it manages the decoding. It is important that the constructor
 * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
 * it needs to decoded in the specific defined order.
 * @noInheritDoc
 */


var _jsonMap = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("jsonMap");

var _Types = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Types");

class Struct extends Map {
  constructor(registry, Types, value, jsonMap = new Map()) {
    const typeMap = (0, _index.mapToTypeMap)(registry, Types);
    const [decoded, decodedLength] = (0, _util.isU8a)(value) ? (0, _index.decodeU8a)(registry, value, typeMap, true) : (0, _util.isHex)(value) ? (0, _index.decodeU8a)(registry, (0, _util.u8aToU8a)(value), typeMap, true) : value instanceof Struct ? [value, 0] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
    super(decoded);
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.initialU8aLength = void 0;
    Object.defineProperty(this, _jsonMap, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _Types, {
      writable: true,
      value: void 0
    });
    this.registry = registry;
    this.initialU8aLength = decodedLength;
    (0, _classPrivateFieldLooseBase2.default)(this, _jsonMap)[_jsonMap] = jsonMap;
    (0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types] = typeMap;
  }

  static with(Types, jsonMap) {
    const keys = Object.keys(Types);
    return class extends Struct {
      constructor(registry, value) {
        super(registry, Types, value, jsonMap);
        (0, _util.objectProperties)(this, keys, k => this.get(k));
      }

    };
  }
  /**
   * @description The available keys for this struct
   */


  get defKeys() {
    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types]);
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    for (const v of this.values()) {
      if (!v.isEmpty) {
        return false;
      }
    }

    return true;
  }
  /**
   * @description Returns the Type description of the structure
   */


  get Type() {
    const result = {};
    const defs = Object.entries((0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types]);

    for (let i = 0; i < defs.length; i++) {
      const [key, Type] = defs[i];
      result[key] = new Type(this.registry).toRawType();
    }

    return result;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let total = 0;

    for (const v of this.values()) {
      total += v.encodedLength;
    }

    return total;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return (0, _index.compareMap)(this, other);
  }
  /**
   * @description Returns a specific names entry in the structure
   * @param name The name of the entry to retrieve
   */


  get(name) {
    return super.get(name);
  }
  /**
   * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
   */


  getAtIndex(index) {
    return this.toArray()[index];
  }
  /**
   * @description Converts the Object to an standard JavaScript Array
   */


  toArray() {
    return [...this.values()];
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    const json = {};

    for (const [k, v] of this.entries()) {
      json[k] = v && v.toHuman(isExtended);
    }

    return json;
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    const json = {};

    for (const [k, v] of this.entries()) {
      const jsonKey = (0, _classPrivateFieldLooseBase2.default)(this, _jsonMap)[_jsonMap].get(k) || k;
      json[jsonKey] = v && v.toJSON();
    }

    return json;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return (0, _util.stringify)((0, _index.typesToMap)(this.registry, (0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types]));
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return (0, _util.stringify)(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = [];

    for (const [k, v] of this.entries()) {
      if (v && (0, _util.isFunction)(v.toU8a)) {
        encoded.push(v.toU8a(!isBare || (0, _util.isBoolean)(isBare) ? isBare : isBare[k]));
      }
    }

    return (0, _util.u8aConcat)(...encoded);
  }

}

exports.Struct = Struct;

},{"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],250:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tuple = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _AbstractArray = require("./AbstractArray.js");

var _index = require("./utils/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeTuple(registry, Classes, value) {
  if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) {
    return (0, _index.decodeU8a)(registry, (0, _util.u8aToU8a)(value), Classes);
  }

  const Types = Array.isArray(Classes) ? Classes : Object.values(Classes);
  return [Types.map((Type, index) => {
    try {
      const entry = value === null || value === void 0 ? void 0 : value[index];

      if (entry instanceof Type) {
        return entry;
      }

      return new Type(registry, entry);
    } catch (error) {
      throw new Error(`Tuple: failed on ${index}:: ${error.message}`);
    }
  }), 0];
}
/**
 * @name Tuple
 * @description
 * A Tuple defines an anonymous fixed-length array, where each element has its
 * own type. It extends the base JS `Array` object.
 */


var _Types = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Types");

class Tuple extends _AbstractArray.AbstractArray {
  constructor(registry, Types, value) {
    const Classes = Array.isArray(Types) ? Types.map(t => (0, _index.typeToConstructor)(registry, t)) : (0, _util.isFunction)(Types) || (0, _util.isString)(Types) ? [(0, _index.typeToConstructor)(registry, Types)] : (0, _index.mapToTypeMap)(registry, Types);
    const [values, decodedLength] = (0, _util.isU8a)(value) ? (0, _index.decodeU8a)(registry, value, Classes) : decodeTuple(registry, Classes, value);
    super(registry, values, decodedLength);
    Object.defineProperty(this, _Types, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types] = Classes;
  }

  static with(Types) {
    return class extends Tuple {
      constructor(registry, value) {
        super(registry, Types, value);
      }

    };
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let total = 0;

    for (let i = 0; i < this.length; i++) {
      total += this[i].encodedLength;
    }

    return total;
  }
  /**
   * @description The types definition of the tuple
   */


  get Types() {
    return Array.isArray((0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types]) ? (0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types].map(T => new T(this.registry).toRawType()) : Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types]);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    const types = (Array.isArray((0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types]) ? (0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types] : Object.values((0, _classPrivateFieldLooseBase2.default)(this, _Types)[_Types])).map(T => this.registry.getClassName(T) || new T(this.registry).toRawType());
    return `(${types.join(',')})`;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    // Overwrite the default toString representation of Array.
    return (0, _util.stringify)(this.toJSON());
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      encoded[i] = this[i].toU8a(isBare);
    }

    return (0, _util.u8aConcat)(...encoded);
  }

}

exports.Tuple = Tuple;

},{"./AbstractArray.js":231,"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],251:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.U8aFixed = void 0;

var _util = require("@polkadot/util");

var _Raw = require("./Raw.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeU8aFixed(value, bitLength) {
  const u8a = (0, _util.u8aToU8a)(value);
  const byteLength = bitLength / 8;

  if (!u8a.length) {
    return [new Uint8Array(byteLength), 0];
  }

  (0, _util.assert)(u8a.length >= byteLength, () => `Expected at least ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
  return [u8a.subarray(0, byteLength), byteLength];
}
/**
 * @name U8aFixed
 * @description
 * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
 * to be used directly, rather is should be subclassed with the specific lengths.
 */


class U8aFixed extends _Raw.Raw {
  constructor(registry, value = new Uint8Array(), bitLength = 256) {
    const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
    super(registry, u8a, decodedLength);
  }

  static with(bitLength, typeName) {
    return class extends U8aFixed {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }

      toRawType() {
        return typeName || super.toRawType();
      }

    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `[u8;${this.length}]`;
  }

}

exports.U8aFixed = U8aFixed;

},{"./Raw.js":246,"@polkadot/util":640}],252:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UInt = void 0;

var _AbstractInt = require("./AbstractInt.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name UInt
 * @description
 * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
 * this handles the encoding and decoding of those numbers. Upon construction
 * the bitLength is provided and any additional use keeps the number to this
 * length. This extends `BN`, so all methods available on a normal `BN` object
 * is available here.
 * @noInheritDoc
 */
class UInt extends _AbstractInt.AbstractInt {
  static with(bitLength, typeName) {
    return class extends UInt {
      constructor(registry, value) {
        super(registry, value, bitLength);
      }

      toRawType() {
        return typeName || super.toRawType();
      }

    };
  }

}

exports.UInt = UInt;

},{"./AbstractInt.js":232}],253:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vec = void 0;
exports.decodeVec = decodeVec;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _AbstractArray = require("./AbstractArray.js");

var _index = require("./utils/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const MAX_LENGTH = 64 * 1024;
const l = (0, _util.logger)('Vec');

function decodeVec(registry, Type, value, length = -1) {
  if (Array.isArray(value)) {
    const result = new Array(value.length);

    for (let i = 0; i < value.length; i++) {
      const entry = value[i];

      try {
        result[i] = entry instanceof Type ? entry : new Type(registry, entry);
      } catch (error) {
        l.error(`Unable to decode on index ${i}`, error.message);
        throw error;
      }
    }

    return [result, 0, 0];
  }

  const u8a = (0, _util.u8aToU8a)(value);
  let offset = 0;

  if (length === -1) {
    const [_offset, _length] = (0, _util.compactFromU8a)(u8a);
    (0, _util.assert)(_length.lten(MAX_LENGTH), () => `Vec length ${_length.toString()} exceeds ${MAX_LENGTH}`);
    length = _length.toNumber();
    offset = _offset;
  }

  return (0, _index.decodeU8aVec)(registry, u8a, offset, Type, length);
}
/**
 * @name Vec
 * @description
 * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
 * construction with the passed `Type` in the constructor. It is an extension to Array, providing
 * specific encoding/decoding on top of the base type.
 */


var _Type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Type");

class Vec extends _AbstractArray.AbstractArray {
  constructor(registry, Type, value = []) {
    const Clazz = (0, _index.typeToConstructor)(registry, Type);
    const [values, decodedLength] = decodeVec(registry, Clazz, value);
    super(registry, values, decodedLength);
    Object.defineProperty(this, _Type, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = Clazz;
  }

  static with(Type) {
    return class extends Vec {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description The type for the items
   */


  get Type() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type].name;
  }
  /**
   * @description Finds the index of the value in the array
   */


  indexOf(_other) {
    // convert type first, this removes overhead from the eq
    const other = _other instanceof (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] ? _other : new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry, _other);

    for (let i = 0; i < this.length; i++) {
      if (other.eq(this[i])) {
        return i;
      }
    }

    return -1;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `Vec<${this.registry.getClassName((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type]) || new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry).toRawType()}>`;
  }

}

exports.Vec = Vec;

},{"./AbstractArray.js":231,"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],254:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VecFixed = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _AbstractArray = require("./AbstractArray.js");

var _index = require("./utils/index.js");

var _Vec = require("./Vec.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeVecFixed(registry, value, Type, length) {
  const [values, decodedLength, decodedLengthNoOffset] = (0, _Vec.decodeVec)(registry, Type, value, length);

  while (values.length < length) {
    values.push(new Type(registry));
  }

  (0, _util.assert)(values.length === length, () => `Expected a length of exactly ${length} entries`);
  return [values, decodedLength, decodedLengthNoOffset];
}
/**
 * @name VecFixed
 * @description
 * This manages codec arrays of a fixed length
 */


var _Type = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("Type");

class VecFixed extends _AbstractArray.AbstractArray {
  constructor(registry, Type, length, value = []) {
    const Clazz = (0, _index.typeToConstructor)(registry, Type);
    const [values,, decodedLengthNoOffset] = (0, _util.isU8a)(value) ? (0, _index.decodeU8aVec)(registry, value, 0, Clazz, length) : decodeVecFixed(registry, value, Clazz, length);
    super(registry, values, decodedLengthNoOffset);
    Object.defineProperty(this, _Type, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type] = Clazz;
  }

  static with(Type, length) {
    return class extends VecFixed {
      constructor(registry, value) {
        super(registry, Type, length, value);
      }

    };
  }
  /**
   * @description The type for the items
   */


  get Type() {
    return new ((0, _classPrivateFieldLooseBase2.default)(this, _Type)[_Type])(this.registry).toRawType();
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    let total = 0;

    for (let i = 0; i < this.length; i++) {
      total += this[i].encodedLength;
    }

    return total;
  }

  toU8a() {
    // we override, we don't add the length prefix for ourselves, and at the same time we
    // ignore isBare on entries, since they should be properly encoded at all times
    const encoded = new Array(this.length);

    for (let i = 0; i < this.length; i++) {
      encoded[i] = this[i].toU8a();
    }

    return encoded.length ? (0, _util.u8aConcat)(...encoded) : new Uint8Array([]);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `[${this.Type};${this.length}]`;
  }

}

exports.VecFixed = VecFixed;

},{"./AbstractArray.js":231,"./Vec.js":253,"./utils/index.js":261,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],255:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WrapperOpaque = void 0;

var _util = require("@polkadot/util");

var _Base = require("./Base.js");

var _index = require("./utils/index.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function decodeRaw(registry, Type, value) {
  const Clazz = (0, _index.typeToConstructor)(registry, Type);

  if ((0, _util.isU8a)(value)) {
    const [, u8a] = (0, _util.compactStripLength)(value);
    return new Clazz(registry, u8a);
  }

  return new Clazz(registry, value);
}

class WrapperOpaque extends _Base.Base {
  constructor(registry, Type, value) {
    super(registry, decodeRaw(registry, Type, value));
  }

  static with(Type) {
    return class extends WrapperOpaque {
      constructor(registry, value) {
        super(registry, Type, value);
      }

    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return `WrapperOpaque<${this._raw.toRawType()}>`;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  toU8a(isBare) {
    const u8a = super.toU8a(isBare);
    return isBare ? u8a : (0, _util.compactAddLength)(u8a);
  }
  /**
   * @description Return the inner value for the wrapped type
   */


  unwrap() {
    return this._raw;
  }

}

exports.WrapperOpaque = WrapperOpaque;

},{"./Base.js":235,"./utils/index.js":261,"@polkadot/util":640}],256:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BTreeMap", {
  enumerable: true,
  get: function () {
    return _BTreeMap.BTreeMap;
  }
});
Object.defineProperty(exports, "BTreeSet", {
  enumerable: true,
  get: function () {
    return _BTreeSet.BTreeSet;
  }
});
Object.defineProperty(exports, "CodecMap", {
  enumerable: true,
  get: function () {
    return _Map.CodecMap;
  }
});
Object.defineProperty(exports, "CodecSet", {
  enumerable: true,
  get: function () {
    return _Set.CodecSet;
  }
});
Object.defineProperty(exports, "Compact", {
  enumerable: true,
  get: function () {
    return _Compact.Compact;
  }
});
Object.defineProperty(exports, "DoNotConstruct", {
  enumerable: true,
  get: function () {
    return _DoNotConstruct.DoNotConstruct;
  }
});
Object.defineProperty(exports, "Enum", {
  enumerable: true,
  get: function () {
    return _Enum.Enum;
  }
});
Object.defineProperty(exports, "HashMap", {
  enumerable: true,
  get: function () {
    return _HashMap.HashMap;
  }
});
Object.defineProperty(exports, "Int", {
  enumerable: true,
  get: function () {
    return _Int.Int;
  }
});
Object.defineProperty(exports, "Json", {
  enumerable: true,
  get: function () {
    return _Json.Json;
  }
});
Object.defineProperty(exports, "Linkage", {
  enumerable: true,
  get: function () {
    return _Linkage.Linkage;
  }
});
Object.defineProperty(exports, "Map", {
  enumerable: true,
  get: function () {
    return _Map.CodecMap;
  }
});
Object.defineProperty(exports, "Option", {
  enumerable: true,
  get: function () {
    return _Option.Option;
  }
});
Object.defineProperty(exports, "Range", {
  enumerable: true,
  get: function () {
    return _Range.Range;
  }
});
Object.defineProperty(exports, "RangeInclusive", {
  enumerable: true,
  get: function () {
    return _Range.RangeInclusive;
  }
});
Object.defineProperty(exports, "Raw", {
  enumerable: true,
  get: function () {
    return _Raw.Raw;
  }
});
Object.defineProperty(exports, "Result", {
  enumerable: true,
  get: function () {
    return _Result.Result;
  }
});
Object.defineProperty(exports, "Set", {
  enumerable: true,
  get: function () {
    return _Set.CodecSet;
  }
});
Object.defineProperty(exports, "Struct", {
  enumerable: true,
  get: function () {
    return _Struct.Struct;
  }
});
Object.defineProperty(exports, "Tuple", {
  enumerable: true,
  get: function () {
    return _Tuple.Tuple;
  }
});
Object.defineProperty(exports, "U8aFixed", {
  enumerable: true,
  get: function () {
    return _U8aFixed.U8aFixed;
  }
});
Object.defineProperty(exports, "UInt", {
  enumerable: true,
  get: function () {
    return _UInt.UInt;
  }
});
Object.defineProperty(exports, "Vec", {
  enumerable: true,
  get: function () {
    return _Vec.Vec;
  }
});
Object.defineProperty(exports, "VecFixed", {
  enumerable: true,
  get: function () {
    return _VecFixed.VecFixed;
  }
});
Object.defineProperty(exports, "WrapperOpaque", {
  enumerable: true,
  get: function () {
    return _WrapperOpaque.WrapperOpaque;
  }
});

var _BTreeMap = require("./BTreeMap.js");

var _BTreeSet = require("./BTreeSet.js");

var _Compact = require("./Compact.js");

var _DoNotConstruct = require("./DoNotConstruct.js");

var _Enum = require("./Enum.js");

var _HashMap = require("./HashMap.js");

var _Int = require("./Int.js");

var _Json = require("./Json.js");

var _Linkage = require("./Linkage.js");

var _Map = require("./Map.js");

var _Option = require("./Option.js");

var _Range = require("./Range.js");

var _Raw = require("./Raw.js");

var _Result = require("./Result.js");

var _Set = require("./Set.js");

var _Struct = require("./Struct.js");

var _Tuple = require("./Tuple.js");

var _UInt = require("./UInt.js");

var _U8aFixed = require("./U8aFixed.js");

var _Vec = require("./Vec.js");

var _VecFixed = require("./VecFixed.js");

var _WrapperOpaque = require("./WrapperOpaque.js");

},{"./BTreeMap.js":233,"./BTreeSet.js":234,"./Compact.js":236,"./DoNotConstruct.js":237,"./Enum.js":238,"./HashMap.js":239,"./Int.js":240,"./Json.js":241,"./Linkage.js":242,"./Map.js":243,"./Option.js":244,"./Range.js":245,"./Raw.js":246,"./Result.js":247,"./Set.js":248,"./Struct.js":249,"./Tuple.js":250,"./U8aFixed.js":251,"./UInt.js":252,"./Vec.js":253,"./VecFixed.js":254,"./WrapperOpaque.js":255}],257:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareArray = compareArray;

var _util = require("@polkadot/util");

var _util2 = require("./util.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// NOTE These are used internally and when comparing objects, expects that
// when the second is an Codec[] that the first has to be as well
function compareArray(a, b) {
  if (Array.isArray(b)) {
    return a.length === b.length && (0, _util.isUndefined)(a.find((v, index) => (0, _util2.hasEq)(v) ? !v.eq(b[index]) : v !== b[index]));
  }

  return false;
}

},{"./util.js":266,"@polkadot/util":640}],258:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareMap = compareMap;

var _util = require("@polkadot/util");

var _util2 = require("./util.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function hasMismatch(a, b) {
  return (0, _util.isUndefined)(a) || ((0, _util2.hasEq)(a) ? !a.eq(b) : a !== b);
}

function notEntry(value) {
  return !Array.isArray(value) || value.length !== 2;
}

function compareMapArray(a, b) {
  // equal number of entries and each entry in the array should match
  return a.size === b.length && !b.some(e => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
} // NOTE These are used internally and when comparing objects, expects that
// when the second is an Map<string, Codec> that the first has to be as well


function compareMap(a, b) {
  if (Array.isArray(b)) {
    return compareMapArray(a, b);
  } else if (b instanceof Map) {
    return compareMapArray(a, [...b.entries()]);
  } else if ((0, _util.isObject)(b)) {
    return compareMapArray(a, Object.entries(b));
  }

  return false;
}

},{"./util.js":266,"@polkadot/util":640}],259:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareSet = compareSet;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function compareSetArray(a, b) {
  // equal number of entries and each entry in the array should match
  return a.size === b.length && !b.some(e => !a.has(e));
} // NOTE These are used internally and when comparing objects, expects that
// when the second is an Set<string, Codec> that the first has to be as well


function compareSet(a, b) {
  if (Array.isArray(b)) {
    return compareSetArray(a, b);
  } else if (b instanceof Set) {
    return compareSetArray(a, [...b.values()]);
  } else if ((0, _util.isObject)(b)) {
    return compareSetArray(a, Object.values(b));
  }

  return false;
}

},{"@polkadot/util":640}],260:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeU8a = decodeU8a;
exports.decodeU8aVec = decodeU8aVec;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function formatFailure(error, type, u8a, key) {
  return `decodeU8a: failed at ${(0, _util.u8aToHex)(u8a)}…${key ? ` on ${key}` : ''}${type ? `: ${type}` : ''}:: ${error.message}`;
}

function getRawType(registry, Type) {
  try {
    return new Type(registry).toRawType();
  } catch {
    return null;
  }
}
/**
 * Given an u8a, and an array of Type constructors, decode the u8a against the
 * types, and return an array of decoded values.
 *
 * @param u8a - The u8a to decode.
 * @param result - The result array (will be returned with values pushed)
 * @param types - The array of Constructor to decode the U8a against.
 */


function decodeU8a(registry, u8a, types, withZip) {
  const [Types, keys] = Array.isArray(types) ? [types, []] : [Object.values(types), Object.keys(types)];
  const result = new Array(Types.length);
  let offset = 0;

  for (let i = 0; i < Types.length; i++) {
    try {
      const value = new Types[i](registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = withZip ? [keys[i], value] : value;
    } catch (error) {
      throw new Error(formatFailure(error, getRawType(registry, Types[i]), u8a.subarray(offset, offset + 16), keys[i]));
    }
  }

  return [result, offset];
} // Split from decodeU8a since this is specialized to 1 instance ... yes duplication, but
// since we have to do less checks (and these are intensive anyway), much faster


function decodeU8aVec(registry, u8a, start, Type, count) {
  const result = new Array(count);
  let offset = start;

  for (let i = 0; i < count; i++) {
    try {
      const value = new Type(registry, u8a.subarray(offset));
      offset += value.initialU8aLength || value.encodedLength;
      result[i] = value;
    } catch (error) {
      throw new Error(formatFailure(error, getRawType(registry, Type), u8a.subarray(offset, offset + 16)));
    }
  }

  return [result, offset, offset - start];
}

},{"@polkadot/util":640}],261:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "compareArray", {
  enumerable: true,
  get: function () {
    return _compareArray.compareArray;
  }
});
Object.defineProperty(exports, "compareMap", {
  enumerable: true,
  get: function () {
    return _compareMap.compareMap;
  }
});
Object.defineProperty(exports, "compareSet", {
  enumerable: true,
  get: function () {
    return _compareSet.compareSet;
  }
});
Object.defineProperty(exports, "decodeU8a", {
  enumerable: true,
  get: function () {
    return _decodeU8a.decodeU8a;
  }
});
Object.defineProperty(exports, "decodeU8aVec", {
  enumerable: true,
  get: function () {
    return _decodeU8a.decodeU8aVec;
  }
});
Object.defineProperty(exports, "mapToTypeMap", {
  enumerable: true,
  get: function () {
    return _mapToTypeMap.mapToTypeMap;
  }
});
Object.defineProperty(exports, "sortAsc", {
  enumerable: true,
  get: function () {
    return _sortValues.sortAsc;
  }
});
Object.defineProperty(exports, "sortMap", {
  enumerable: true,
  get: function () {
    return _sortValues.sortMap;
  }
});
Object.defineProperty(exports, "sortSet", {
  enumerable: true,
  get: function () {
    return _sortValues.sortSet;
  }
});
Object.defineProperty(exports, "typeToConstructor", {
  enumerable: true,
  get: function () {
    return _typeToConstructor.typeToConstructor;
  }
});
Object.defineProperty(exports, "typesToMap", {
  enumerable: true,
  get: function () {
    return _typesToMap.typesToMap;
  }
});

var _compareArray = require("./compareArray.js");

var _compareMap = require("./compareMap.js");

var _compareSet = require("./compareSet.js");

var _decodeU8a = require("./decodeU8a.js");

var _mapToTypeMap = require("./mapToTypeMap.js");

var _typeToConstructor = require("./typeToConstructor.js");

var _sortValues = require("./sortValues.js");

var _typesToMap = require("./typesToMap.js");

},{"./compareArray.js":257,"./compareMap.js":258,"./compareSet.js":259,"./decodeU8a.js":260,"./mapToTypeMap.js":262,"./sortValues.js":263,"./typeToConstructor.js":264,"./typesToMap.js":265}],262:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapToTypeMap = mapToTypeMap;

var _typeToConstructor = require("./typeToConstructor.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @description takes an input map of the form `{ [string]: string | Constructor }` and returns a map of `{ [string]: Constructor }`
 */
function mapToTypeMap(registry, input) {
  const entries = Object.entries(input);
  const output = {};

  for (let i = 0; i < entries.length; i++) {
    output[entries[i][0]] = (0, _typeToConstructor.typeToConstructor)(registry, entries[i][1]);
  }

  return output;
}

},{"./typeToConstructor.js":264}],263:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortAsc = sortAsc;
exports.sortMap = sortMap;
exports.sortSet = sortSet;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal **/
function isArrayLike(arg) {
  return arg instanceof Uint8Array || Array.isArray(arg);
}
/** @internal **/


function isCodec(arg) {
  return (0, _util.isFunction)(arg && arg.toU8a);
}
/** @internal **/


function isEnum(arg) {
  return isCodec(arg) && (0, _util.isNumber)(arg.index) && isCodec(arg.value);
}
/** @internal */


function isNumberLike(arg) {
  return (0, _util.isNumber)(arg) || (0, _util.isBn)(arg) || (0, _util.isBigInt)(arg);
}
/** @internal */


function sortArray(a, b) {
  // Vec, Tuple, Bytes etc.
  let sortRes = 0;
  const minLen = Math.min(a.length, b.length);

  for (let i = 0; i < minLen; ++i) {
    sortRes = sortAsc(a[i], b[i]);

    if (sortRes !== 0) {
      return sortRes;
    }
  }

  return a.length - b.length;
}
/**
* Sort keys/values of BTreeSet/BTreeMap in ascending order for encoding compatibility with Rust's BTreeSet/BTreeMap
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html)
* (https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html)
*/


function sortAsc(a, b) {
  if (isNumberLike(a) && isNumberLike(b)) {
    return (0, _util.bnToBn)(a).cmp((0, _util.bnToBn)(b));
  } else if (a instanceof Map && b instanceof Map) {
    return sortAsc(Array.from(a.values()), Array.from(b.values()));
  } else if (isEnum(a) && isEnum(b)) {
    return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
  } else if (isArrayLike(a) && isArrayLike(b)) {
    return sortArray(a, b);
  } else if (isCodec(a) && isCodec(b)) {
    // Text, Bool etc.
    return sortAsc(a.toU8a(true), b.toU8a(true));
  }

  throw new Error(`Attempting to sort unrecognized values: ${(0, _util.stringify)(a)} (typeof ${typeof a}) <-> ${(0, _util.stringify)(b)} (typeof ${typeof b})`);
}

function sortSet(set) {
  return new Set(Array.from(set).sort(sortAsc));
}

function sortMap(map) {
  return new Map(Array.from(map.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
}

},{"@polkadot/util":640}],264:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeToConstructor = typeToConstructor;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function typeToConstructor(registry, type) {
  return (0, _util.isString)(type) ? registry.createClass(type) : type;
}

},{"@polkadot/util":640}],265:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typesToMap = typesToMap;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function typesToMap(registry, Types) {
  const entries = Object.entries(Types);
  const result = {};

  for (let i = 0; i < entries.length; i++) {
    const [key, Type] = entries[i];
    result[key] = registry.getClassName(Type) || new Type(registry).toRawType();
  }

  return result;
}

},{}],266:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasEq = hasEq;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function hasEq(o) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  return (0, _util.isFunction)(o.eq);
}

},{"@polkadot/util":640}],267:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.constructTypeClass = constructTypeClass;
exports.createClass = createClass;
exports.getTypeClass = getTypeClass;

var _util = require("@polkadot/util");

var _index = require("../codec/index.js");

var _index2 = require("../primitive/index.js");

var _getTypeDef = require("./getTypeDef.js");

var _types = require("./types.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function getTypeDefType({
  lookupName,
  type
}) {
  return lookupName || type;
}

function getSubDefArray(value) {
  (0, _util.assert)(value.sub && Array.isArray(value.sub), () => `Expected subtype as TypeDef[] in ${(0, _util.stringify)(value)}`);
  return value.sub;
}

function getSubDef(value) {
  (0, _util.assert)(value.sub && !Array.isArray(value.sub), () => `Expected subtype as TypeDef in ${(0, _util.stringify)(value)}`);
  return value.sub;
}

function getSubType(value) {
  return getTypeDefType(getSubDef(value));
} // create a maps of type string constructors from the input


function getTypeClassMap(value) {
  const subs = getSubDefArray(value);
  const map = {};

  for (let i = 0; i < subs.length; i++) {
    map[subs[i].name] = getTypeDefType(subs[i]);
  }

  return map;
} // create an array of type string constructors from the input


function getTypeClassArray(value) {
  return getSubDefArray(value).map(getTypeDefType);
}

function createInt(Clazz, {
  displayName,
  length
}) {
  (0, _util.assert)((0, _util.isNumber)(length), () => `Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
  return Clazz.with(length, displayName);
}

function createHashMap(Clazz, value) {
  const [keyType, valueType] = getTypeClassArray(value);
  return Clazz.with(keyType, valueType);
}

function createWithSub(Clazz, value) {
  return Clazz.with(getSubType(value));
}

const infoMapping = {
  [_types.TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(_index.BTreeMap, value),
  [_types.TypeDefInfo.BTreeSet]: (registry, value) => createWithSub(_index.BTreeSet, value),
  [_types.TypeDefInfo.Compact]: (registry, value) => createWithSub(_index.Compact, value),
  [_types.TypeDefInfo.DoNotConstruct]: (registry, value) => _index.DoNotConstruct.with(value.displayName || value.type),
  [_types.TypeDefInfo.Enum]: (registry, value) => {
    const subs = getSubDefArray(value);
    return _index.Enum.with(subs.every(({
      type
    }) => type === 'Null') ? subs.reduce((out, {
      index,
      name
    }, count) => {
      out[name] = index || count;
      return out;
    }, {}) : getTypeClassMap(value));
  },
  [_types.TypeDefInfo.HashMap]: (registry, value) => createHashMap(_index.HashMap, value),
  [_types.TypeDefInfo.Int]: (registry, value) => createInt(_index.Int, value),
  // We have circular deps between Linkage & Struct
  [_types.TypeDefInfo.Linkage]: (registry, value) => {
    const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys

    const Clazz = _index.Struct.with({
      previous: type,
      next: type
    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access


    Clazz.prototype.toRawType = function () {
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
      return `Linkage<${this.next.toRawType(true)}>`;
    };

    return Clazz;
  },
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [_types.TypeDefInfo.Null]: (registry, _) => _index2.Null,
  [_types.TypeDefInfo.Option]: (registry, value) => createWithSub(_index.Option, value),
  [_types.TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
  [_types.TypeDefInfo.Range]: (registry, value) => (value.type.includes('RangeInclusive') ? _index.RangeInclusive : _index.Range).with(getSubType(value)),
  [_types.TypeDefInfo.Result]: (registry, value) => {
    const [Ok, Err] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define

    return _index.Result.with({
      Err,
      Ok
    });
  },
  [_types.TypeDefInfo.Set]: (registry, value) => _index.CodecSet.with(getSubDefArray(value).reduce((result, {
    index,
    name
  }) => {
    result[name] = index;
    return result;
  }, {}), value.length),
  [_types.TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
  [_types.TypeDefInfo.Struct]: (registry, value) => _index.Struct.with(getTypeClassMap(value), value.alias),
  [_types.TypeDefInfo.Tuple]: (registry, value) => _index.Tuple.with(getTypeClassArray(value)),
  [_types.TypeDefInfo.UInt]: (registry, value) => createInt(_index.UInt, value),
  [_types.TypeDefInfo.Vec]: (registry, {
    sub
  }) => {
    (0, _util.assert)(sub && !Array.isArray(sub), 'Expected type information for vector');
    return sub.type === 'u8' ? _index2.Bytes : _index.Vec.with(getTypeDefType(sub));
  },
  [_types.TypeDefInfo.VecFixed]: (registry, {
    displayName,
    length,
    sub
  }) => {
    (0, _util.assert)(sub && (0, _util.isNumber)(length) && !Array.isArray(sub), 'Expected length & type information for fixed vector');
    return sub.type === 'u8' ? _index.U8aFixed.with(length * 8, displayName) : _index.VecFixed.with(getTypeDefType(sub), length);
  },
  [_types.TypeDefInfo.WrapperOpaque]: (registry, value) => createWithSub(_index.WrapperOpaque, value)
};

function constructTypeClass(registry, typeDef) {
  try {
    const Type = infoMapping[typeDef.info](registry, typeDef);
    (0, _util.assert)(Type, 'No class created'); // don't clobber any existing

    if (!Type.__fallbackType && typeDef.fallbackType) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore ...this is the only place we we actually assign this...
      Type.__fallbackType = typeDef.fallbackType;
    }

    return Type;
  } catch (error) {
    throw new Error(`Unable to construct class from ${(0, _util.stringify)(typeDef)}: ${error.message}`);
  }
} // Returns the type Class for construction


function getTypeClass(registry, typeDef) {
  return registry.get(typeDef.type, false, typeDef);
}

function createClass(registry, type) {
  return getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : (0, _getTypeDef.getTypeDef)(type));
}

},{"../codec/index.js":256,"../primitive/index.js":445,"./getTypeDef.js":270,"./types.js":276,"@polkadot/util":640}],268:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createType = createType;
exports.createTypeUnsafe = createTypeUnsafe;

var _util = require("@polkadot/util");

var _Option = require("../codec/Option.js");

var _createClass = require("./createClass.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// With isPedantic, actually check that the encoding matches that supplied. This
// is much slower, but verifies that we have the correct types defined
function checkInstance(created, matcher) {
  const u8a = created.toU8a();
  const rawType = created.toRawType();
  const isOk = // full match, all ok
  (0, _util.u8aEq)(u8a, matcher) || // on a length-prefixed type, just check the actual length
  ['Bytes', 'Text', 'Type'].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
  created.isEmpty && matcher.every(v => !v);
  (0, _util.assert)(isOk, () => `${rawType}:: Decoded input doesn't match input, received ${(0, _util.u8aToHex)(matcher, 512)} (${matcher.length} bytes), created ${(0, _util.u8aToHex)(u8a, 512)} (${u8a.length} bytes)`);
}

function checkPedantic(created, [value], isPedantic = false) {
  if (isPedantic) {
    if ((0, _util.isU8a)(value)) {
      checkInstance(created, value);
    } else if ((0, _util.isHex)(value)) {
      checkInstance(created, (0, _util.u8aToU8a)(value));
    }
  }
} // Initializes a type with a value. This also checks for fallbacks and in the cases
// where isPedantic is specified (storage decoding), also check the format/structure


function initType(registry, Type, params = [], {
  blockHash,
  isOptional,
  isPedantic
} = {}) {
  const created = new (isOptional ? _Option.Option.with(Type) : Type)(registry, ...params);
  checkPedantic(created, params, isPedantic);

  if (blockHash) {
    created.createdAtHash = createType(registry, 'Hash', blockHash);
  } // eslint-disable-next-line @typescript-eslint/no-unsafe-return


  return created;
} // An unsafe version of the `createType` below. It's unsafe because the `type`
// argument here can be any string, which, when it cannot parse, will yield a
// runtime error.


function createTypeUnsafe(registry, type, params = [], options = {}) {
  let Clazz = null;
  let firstError = null;

  try {
    Clazz = (0, _createClass.createClass)(registry, type);
    return initType(registry, Clazz, params, options);
  } catch (error) {
    firstError = new Error(`createType(${type}):: ${error.message}`);
  }

  if (Clazz && Clazz.__fallbackType) {
    try {
      Clazz = (0, _createClass.createClass)(registry, Clazz.__fallbackType);
      return initType(registry, Clazz, params, options);
    } catch {// swallow, we will throw the first error again
    }
  }

  throw firstError;
}
/**
 * Create an instance of a `type` with a given `params`.
 * @param type - A recognizable string representing the type to create an
 * instance from
 * @param params - The value to instantiate the type with
 */


function createType(registry, type, ...params) {
  return createTypeUnsafe(registry, type, params);
}

},{"../codec/Option.js":244,"./createClass.js":267,"@polkadot/util":640}],269:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeTypeDef = encodeTypeDef;
exports.paramsNotation = paramsNotation;
exports.withTypeString = withTypeString;

var _util = require("@polkadot/util");

var _types = require("./types.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const stringIdentity = value => value.toString();

const INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];

function paramsNotation(outer, inner, transform = stringIdentity) {
  return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>` : ''}`;
}

function encodeWithParams(registry, typeDef, outer) {
  const {
    info,
    sub
  } = typeDef;

  switch (info) {
    case _types.TypeDefInfo.BTreeMap:
    case _types.TypeDefInfo.BTreeSet:
    case _types.TypeDefInfo.Compact:
    case _types.TypeDefInfo.HashMap:
    case _types.TypeDefInfo.Linkage:
    case _types.TypeDefInfo.Option:
    case _types.TypeDefInfo.Result:
    case _types.TypeDefInfo.Vec:
    case _types.TypeDefInfo.WrapperOpaque:
      return paramsNotation(outer, sub, p => encodeTypeDef(registry, p));
  }

  throw new Error(`Unable to encode ${(0, _util.stringify)(typeDef)} with params`);
}

function encodeSubTypes(registry, sub, asEnum, extra) {
  const names = sub.map(({
    name
  }) => name);
  (0, _util.assert)(names.every(n => !!n), () => `Subtypes does not have consistent names, ${names.join(', ')}`);
  const inner = (0, _util.objectSpread)({}, extra);

  for (let i = 0; i < sub.length; i++) {
    const def = sub[i];
    inner[def.name] = encodeTypeDef(registry, def);
  }

  return (0, _util.stringify)(asEnum ? {
    _enum: inner
  } : inner);
} // We setup a record here to ensure we have comprehensive coverage (any item not covered will result
// in a compile-time error with the missing index)


const encoders = {
  [_types.TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),
  [_types.TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),
  [_types.TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),
  [_types.TypeDefInfo.DoNotConstruct]: (registry, {
    displayName,
    lookupIndex,
    lookupName
  }) => `DoNotConstruct<${lookupName || displayName || ((0, _util.isUndefined)(lookupIndex) ? 'Unknown' : registry.createLookupType(lookupIndex))}>`,
  [_types.TypeDefInfo.Enum]: (registry, {
    sub
  }) => {
    (0, _util.assert)(sub && Array.isArray(sub), 'Unable to encode Enum type'); // c-like enums have all Null entries
    // TODO We need to take the disciminant into account and auto-add empty entries

    return sub.every(({
      type
    }) => type === 'Null') ? (0, _util.stringify)({
      _enum: sub.map(({
        name
      }, index) => `${name || `Empty${index}`}`)
    }) : encodeSubTypes(registry, sub, true);
  },
  [_types.TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),
  [_types.TypeDefInfo.Int]: (registry, {
    length = 32
  }) => `Int<${length}>`,
  [_types.TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [_types.TypeDefInfo.Null]: (registry, typeDef) => 'Null',
  [_types.TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [_types.TypeDefInfo.Plain]: (registry, {
    displayName,
    type
  }) => displayName || type,
  [_types.TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, typeDef.type.includes('RangeInclusive') ? 'RangeInclusive' : 'Range'),
  [_types.TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [_types.TypeDefInfo.Set]: (registry, {
    length = 8,
    sub
  }) => {
    (0, _util.assert)(sub && Array.isArray(sub), 'Unable to encode Set type');
    return (0, _util.stringify)({
      _set: sub.reduce((all, {
        index,
        name
      }, count) => (0, _util.objectSpread)(all, {
        [`${name || `Unknown${index || count}`}`]: index || count
      }), {
        _bitLength: length || 8
      })
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  [_types.TypeDefInfo.Si]: (registry, {
    lookupName,
    type
  }) => lookupName || type,
  [_types.TypeDefInfo.Struct]: (registry, {
    alias,
    sub
  }) => {
    (0, _util.assert)(sub && Array.isArray(sub), 'Unable to encode Struct type');
    return encodeSubTypes(registry, sub, false, alias ? {
      _alias: [...alias.entries()].reduce((all, [k, v]) => (0, _util.objectSpread)(all, {
        [k]: v
      }), {})
    } : {});
  },
  [_types.TypeDefInfo.Tuple]: (registry, {
    sub
  }) => {
    (0, _util.assert)(sub && Array.isArray(sub), 'Unable to encode Tuple type');
    return `(${sub.map(type => encodeTypeDef(registry, type)).join(',')})`;
  },
  [_types.TypeDefInfo.UInt]: (registry, {
    length = 32
  }) => `UInt<${length}>`,
  [_types.TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),
  [_types.TypeDefInfo.VecFixed]: (registry, {
    length,
    sub
  }) => {
    (0, _util.assert)((0, _util.isNumber)(length) && !(0, _util.isUndefined)(sub) && !Array.isArray(sub), 'Unable to encode VecFixed type');
    return `[${sub.type};${length}]`;
  },
  [_types.TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperOpaque')
};

function encodeType(registry, typeDef, withLookup = true) {
  return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
}

function encodeTypeDef(registry, typeDef) {
  // In the case of contracts we do have the unfortunate situation where the displayName would
  // refer to "Option" when it is an option. For these, string it out, only using when actually
  // not a top-level element to be used
  return typeDef.displayName && !INFO_WRAP.some(i => typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
}

function withTypeString(registry, typeDef) {
  return (0, _util.objectSpread)({}, typeDef, {
    type: encodeType(registry, typeDef, false)
  });
}

},{"./types.js":276,"@polkadot/util":640}],270:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTypeDef = getTypeDef;

var _util = require("@polkadot/util");

var _sanitize = require("./sanitize.js");

var _types = require("./types.js");

var _typeSplit = require("./typeSplit.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const MAX_NESTED = 64;
const KNOWN_INTERNALS = ['_alias', '_fallback'];

function getTypeString(typeOrObj) {
  return (0, _util.isString)(typeOrObj) ? typeOrObj.toString() : JSON.stringify(typeOrObj);
}

function isRustEnum(details) {
  const values = Object.values(details);

  if (values.some(v => (0, _util.isNumber)(v))) {
    (0, _util.assert)(values.every(v => (0, _util.isNumber)(v) && v >= 0 && v <= 255), 'Invalid number-indexed enum definition');
    return false;
  }

  return true;
} // decode an enum of either of the following forms
//  { _enum: ['A', 'B', 'C'] }
//  { _enum: { A: AccountId, B: Balance, C: u32 } }
//  { _enum: { A: 1, B: 2 } }


function _decodeEnum(value, details, count) {
  value.info = _types.TypeDefInfo.Enum; // not as pretty, but remain compatible with oo7 for both struct and Array types

  if (Array.isArray(details)) {
    value.sub = details.map((name, index) => ({
      index,
      info: _types.TypeDefInfo.Plain,
      name,
      type: 'Null'
    }));
  } else if (isRustEnum(details)) {
    value.sub = Object.entries(details).map(([name, typeOrObj], index) => (0, _util.objectSpread)({}, getTypeDef(getTypeString(typeOrObj || 'Null'), {
      name
    }, count), {
      index
    }));
  } else {
    value.sub = Object.entries(details).map(([name, index]) => ({
      index,
      info: _types.TypeDefInfo.Plain,
      name,
      type: 'Null'
    }));
  }

  return value;
} // decode a set of the form
//   { _set: { A: 0b0001, B: 0b0010, C: 0b0100 } }


function _decodeSet(value, details) {
  value.info = _types.TypeDefInfo.Set;
  value.length = details._bitLength;
  value.sub = Object.entries(details).filter(([name]) => !name.startsWith('_')).map(([name, index]) => ({
    index,
    info: _types.TypeDefInfo.Plain,
    name,
    type: 'Null'
  }));
  return value;
} // decode a struct, set or enum
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function _decodeStruct(value, type, _, count) {
  const parsed = JSON.parse(type);
  const keys = Object.keys(parsed);

  if (keys.length === 1 && keys[0] === '_enum') {
    return _decodeEnum(value, parsed[keys[0]], count);
  } else if (keys.length === 1 && keys[0] === '_set') {
    return _decodeSet(value, parsed[keys[0]]);
  }

  value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : undefined;
  value.fallbackType = parsed._fallback;
  value.sub = keys.filter(name => !KNOWN_INTERNALS.includes(name)).map(name => getTypeDef(getTypeString(parsed[name]), {
    name
  }, count));
  return value;
} // decode a fixed vector, e.g. [u8;32]
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function _decodeFixedVec(value, type, _, count) {
  const max = type.length - 1;
  let index = -1;
  let inner = 0;

  for (let i = 1; i < max && index === -1; i++) {
    if (type[i] === ';' && inner === 0) {
      index = i;
    } else if (['[', '(', '<'].includes(type[i])) {
      inner++;
    } else if ([']', ')', '>'].includes(type[i])) {
      inner--;
    }
  }

  (0, _util.assert)(index !== -1, () => `${type}: Unable to extract location of ';'`);
  const vecType = type.substr(1, index - 1);
  const [strLength, displayName] = type.substr(index + 1, max - index - 1).split(';');
  const length = parseInt(strLength.trim(), 10); // as a first round, only u8 via u8aFixed, we can add more support

  (0, _util.assert)(length <= 256, () => `${type}: Only support for [Type; <length>], where length <= 256`);
  value.displayName = displayName;
  value.length = length;
  value.sub = getTypeDef(vecType, {}, count);
  return value;
}

function _decodeRange(value, _, subType) {
  const Type = getTypeDef(subType);
  value.sub = [Type, Type];
  return value;
} // decode a tuple


function _decodeTuple(value, _, subType, count) {
  value.sub = subType.length === 0 ? [] : (0, _typeSplit.typeSplit)(subType).map(inner => getTypeDef(inner, {}, count));
  return value;
} // decode a Int/UInt<bitLength[, name]>
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function _decodeAnyInt(value, type, _, clazz) {
  const [strLength, displayName] = type.substr(clazz.length + 1, type.length - clazz.length - 1 - 1).split(',');
  const length = parseInt(strLength.trim(), 10); // as a first round, only u8 via u8aFixed, we can add more support

  (0, _util.assert)(length <= 8192 && length % 8 === 0, () => `${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
  value.displayName = displayName;
  value.length = length;
  return value;
}

function _decodeInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, 'Int');
}

function _decodeUInt(value, type, subType) {
  return _decodeAnyInt(value, type, subType, 'UInt');
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function _decodeDoNotConstruct(value, type, _) {
  const NAME_LENGTH = 'DoNotConstruct'.length;
  value.displayName = type.substr(NAME_LENGTH + 1, type.length - NAME_LENGTH - 1 - 1);
  return value;
}

function hasWrapper(type, [start, end]) {
  return type.substr(0, start.length) === start && type.substr(-1 * end.length) === end;
}

const nestedExtraction = [['[', ']', _types.TypeDefInfo.VecFixed, _decodeFixedVec], ['{', '}', _types.TypeDefInfo.Struct, _decodeStruct], ['(', ')', _types.TypeDefInfo.Tuple, _decodeTuple], // the inner for these are the same as tuple, multiple values
['BTreeMap<', '>', _types.TypeDefInfo.BTreeMap, _decodeTuple], ['HashMap<', '>', _types.TypeDefInfo.HashMap, _decodeTuple], ['Int<', '>', _types.TypeDefInfo.Int, _decodeInt], // Not sure about these, have a specific implementation?
['Range<', '>', _types.TypeDefInfo.Tuple, _decodeRange], ['RangeInclusive<', '>', _types.TypeDefInfo.Tuple, _decodeRange], ['Result<', '>', _types.TypeDefInfo.Result, _decodeTuple], ['UInt<', '>', _types.TypeDefInfo.UInt, _decodeUInt], ['DoNotConstruct<', '>', _types.TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]];
const wrappedExtraction = [['BTreeSet<', '>', _types.TypeDefInfo.BTreeSet], ['Compact<', '>', _types.TypeDefInfo.Compact], ['Linkage<', '>', _types.TypeDefInfo.Linkage], ['Option<', '>', _types.TypeDefInfo.Option], ['Vec<', '>', _types.TypeDefInfo.Vec], ['WrapperOpaque<', '>', _types.TypeDefInfo.WrapperOpaque]];

function extractSubType(type, [start, end]) {
  return type.substr(start.length, type.length - start.length - end.length);
} // eslint-disable-next-line @typescript-eslint/ban-types


function getTypeDef(_type, {
  displayName,
  name
} = {}, count = 0) {
  // create the type via Type, allowing types to be sanitized
  const type = (0, _sanitize.sanitize)(_type);
  const value = {
    displayName,
    info: _types.TypeDefInfo.Plain,
    name,
    type
  };
  (0, _util.assert)(++count !== MAX_NESTED, 'getTypeDef: Maximum nested limit reached');
  const nested = nestedExtraction.find(nested => hasWrapper(type, nested));

  if (nested) {
    value.info = nested[2];
    return nested[3](value, type, extractSubType(type, nested), count);
  }

  const wrapped = wrappedExtraction.find(wrapped => hasWrapper(type, wrapped));

  if (wrapped) {
    value.info = wrapped[2];
    value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
  }

  return value;
}

},{"./sanitize.js":274,"./typeSplit.js":275,"./types.js":276,"@polkadot/util":640}],271:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = require("./createClass.js");

Object.keys(_createClass).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _createClass[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _createClass[key];
    }
  });
});

var _createType = require("./createType.js");

Object.keys(_createType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _createType[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _createType[key];
    }
  });
});

var _encodeTypes = require("./encodeTypes.js");

Object.keys(_encodeTypes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _encodeTypes[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _encodeTypes[key];
    }
  });
});

var _getTypeDef = require("./getTypeDef.js");

Object.keys(_getTypeDef).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _getTypeDef[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getTypeDef[key];
    }
  });
});

var _lazy = require("./lazy.js");

Object.keys(_lazy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _lazy[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _lazy[key];
    }
  });
});

var _registry = require("./registry.js");

Object.keys(_registry).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _registry[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _registry[key];
    }
  });
});

var _typeSplit = require("./typeSplit.js");

Object.keys(_typeSplit).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _typeSplit[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _typeSplit[key];
    }
  });
});

},{"./createClass.js":267,"./createType.js":268,"./encodeTypes.js":269,"./getTypeDef.js":270,"./lazy.js":272,"./registry.js":273,"./typeSplit.js":275}],272:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lazyVariants = lazyVariants;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function lazyVariants(lookup, {
  type
}, getName, creator) {
  const result = {};
  const variants = lookup.getSiType(type).def.asVariant.variants;

  for (let i = 0; i < variants.length; i++) {
    (0, _util.lazyMethod)(result, variants[i], creator, getName);
  }

  return result;
}

},{"@polkadot/util":640}],273:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeRegistry = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _DoNotConstruct = require("../codec/DoNotConstruct.js");

var _Json = require("../codec/Json.js");

var _Raw = require("../codec/Raw.js");

var _index = require("../extrinsic/signedExtensions/index.js");

var _Event = require("../generic/Event.js");

var baseTypes = _interopRequireWildcard(require("../index.types.js"));

var definitions = _interopRequireWildcard(require("../interfaces/definitions.js"));

var _index2 = require("../metadata/decorate/index.js");

var _index3 = require("../metadata/decorate/extrinsics/index.js");

var _Metadata = require("../metadata/Metadata.js");

var _index4 = require("../metadata/PortableRegistry/index.js");

var _createClass = require("./createClass.js");

var _createType = require("./createType.js");

var _lazy = require("./lazy.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const l = (0, _util.logger)('registry');

function valueToString(v) {
  return v.toString();
}

function getFieldArgs(lookup, fields) {
  const args = new Array(fields.length);

  for (let i = 0; i < fields.length; i++) {
    args[i] = lookup.getTypeDef(fields[i].type).type;
  }

  return args;
}

function clearRecord(record) {
  const keys = Object.keys(record);

  for (let i = 0; i < keys.length; i++) {
    delete record[keys[i]];
  }
}

function getVariantStringIdx({
  index
}) {
  return index.toString();
} // create error mapping from metadata


function injectErrors(_, {
  lookup,
  pallets
}, version, result) {
  clearRecord(result);

  for (let i = 0; i < pallets.length; i++) {
    const {
      errors,
      index,
      name
    } = pallets[i];

    if (errors.isSome) {
      const sectionName = (0, _util.stringCamelCase)(name);
      (0, _util.lazyMethod)(result, version >= 12 ? index.toNumber() : i, () => (0, _lazy.lazyVariants)(lookup, errors.unwrap(), getVariantStringIdx, ({
        docs,
        fields,
        index,
        name
      }) => ({
        args: getFieldArgs(lookup, fields),
        docs: docs.map(valueToString),
        fields,
        index: index.toNumber(),
        method: name.toString(),
        name: name.toString(),
        section: sectionName
      })));
    }
  }
} // create event classes from metadata


function injectEvents(registry, {
  lookup,
  pallets
}, version, result) {
  const filtered = pallets.filter(_index2.filterEventsSome);
  clearRecord(result);

  for (let i = 0; i < filtered.length; i++) {
    const {
      events,
      index,
      name
    } = filtered[i];
    (0, _util.lazyMethod)(result, version >= 12 ? index.toNumber() : i, () => (0, _lazy.lazyVariants)(lookup, events.unwrap(), getVariantStringIdx, variant => {
      const meta = registry.createType('EventMetadataLatest', (0, _util.objectSpread)({}, variant, {
        args: getFieldArgs(lookup, variant.fields)
      }));
      return class extends _Event.GenericEventData {
        constructor(registry, value) {
          super(registry, value, meta, (0, _util.stringCamelCase)(name), variant.name.toString());
        }

      };
    }));
  }
} // create extrinsic mapping from metadata


function injectExtrinsics(registry, {
  lookup,
  pallets
}, version, result) {
  const filtered = pallets.filter(_index2.filterCallsSome);
  clearRecord(result);

  for (let i = 0; i < filtered.length; i++) {
    const {
      calls,
      index,
      name
    } = filtered[i];
    const sectionIndex = version >= 12 ? index.toNumber() : i;
    (0, _util.lazyMethod)(result, sectionIndex, () => (0, _lazy.lazyVariants)(lookup, calls.unwrap(), getVariantStringIdx, variant => (0, _index3.createCallFunction)(registry, lookup, variant, (0, _util.stringCamelCase)(name), sectionIndex)));
  }
} // extract additional properties from the metadata


function extractProperties(registry, metadata) {
  const original = registry.getChainProperties();
  const constants = (0, _index2.decorateConstants)(registry, metadata.asLatest, metadata.version);
  const ss58Format = constants.system && (constants.system.sS58Prefix || constants.system.ss58Prefix);

  if (!ss58Format) {
    return original;
  }

  const {
    tokenDecimals,
    tokenSymbol
  } = original || {};
  return registry.createType('ChainProperties', {
    ss58Format,
    tokenDecimals,
    tokenSymbol
  });
}

var _classes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("classes");

var _definitions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("definitions");

var _lookup = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("lookup");

var _metadata = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadata");

var _metadataVersion = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadataVersion");

var _metadataCalls = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadataCalls");

var _metadataErrors = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadataErrors");

var _metadataEvents = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadataEvents");

var _unknownTypes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("unknownTypes");

var _chainProperties = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("chainProperties");

var _hasher = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("hasher");

var _knownDefaults = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("knownDefaults");

var _knownDefinitions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("knownDefinitions");

var _knownTypes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("knownTypes");

var _signedExtensions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("signedExtensions");

var _userExtensions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("userExtensions");

class TypeRegistry {
  constructor(createdAtHash) {
    Object.defineProperty(this, _classes, {
      writable: true,
      value: new Map()
    });
    Object.defineProperty(this, _definitions, {
      writable: true,
      value: new Map()
    });
    Object.defineProperty(this, _lookup, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _metadata, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _metadataVersion, {
      writable: true,
      value: 0
    });
    Object.defineProperty(this, _metadataCalls, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _metadataErrors, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _metadataEvents, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _unknownTypes, {
      writable: true,
      value: new Map()
    });
    Object.defineProperty(this, _chainProperties, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _hasher, {
      writable: true,
      value: _utilCrypto.blake2AsU8a
    });
    Object.defineProperty(this, _knownDefaults, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _knownDefinitions, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _knownTypes, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _signedExtensions, {
      writable: true,
      value: _index.fallbackExtensions
    });
    Object.defineProperty(this, _userExtensions, {
      writable: true,
      value: void 0
    });
    this.createdAtHash = void 0;
    (0, _classPrivateFieldLooseBase2.default)(this, _knownDefaults)[_knownDefaults] = (0, _util.objectSpread)({
      Json: _Json.Json,
      Metadata: _Metadata.Metadata,
      PortableRegistry: _index4.PortableRegistry,
      Raw: _Raw.Raw
    }, baseTypes);
    (0, _classPrivateFieldLooseBase2.default)(this, _knownDefinitions)[_knownDefinitions] = definitions;
    this.init();

    if (createdAtHash) {
      this.createdAtHash = this.createType('Hash', createdAtHash);
    }
  }

  init() {
    // start clean
    (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes] = new Map();
    (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions] = new Map();
    (0, _classPrivateFieldLooseBase2.default)(this, _unknownTypes)[_unknownTypes] = new Map();
    (0, _classPrivateFieldLooseBase2.default)(this, _knownTypes)[_knownTypes] = {}; // register know, first classes then on-demand-created definitions

    this.register((0, _classPrivateFieldLooseBase2.default)(this, _knownDefaults)[_knownDefaults]);
    const allKnown = Object.values((0, _classPrivateFieldLooseBase2.default)(this, _knownDefinitions)[_knownDefinitions]);

    for (let i = 0; i < allKnown.length; i++) {
      this.register(allKnown[i].types);
    }

    return this;
  }

  get chainDecimals() {
    var _classPrivateFieldLoo;

    if ((_classPrivateFieldLoo = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo !== void 0 && _classPrivateFieldLoo.tokenDecimals.isSome) {
      const allDecimals = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties].tokenDecimals.unwrap();

      if (allDecimals.length) {
        return allDecimals.map(b => b.toNumber());
      }
    }

    return [12];
  }

  get chainSS58() {
    var _classPrivateFieldLoo2;

    return (_classPrivateFieldLoo2 = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo2 !== void 0 && _classPrivateFieldLoo2.ss58Format.isSome ? (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties].ss58Format.unwrap().toNumber() : undefined;
  }

  get chainTokens() {
    var _classPrivateFieldLoo3;

    if ((_classPrivateFieldLoo3 = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties]) !== null && _classPrivateFieldLoo3 !== void 0 && _classPrivateFieldLoo3.tokenSymbol.isSome) {
      const allTokens = (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties].tokenSymbol.unwrap();

      if (allTokens.length) {
        return allTokens.map(valueToString);
      }
    }

    return [_util.formatBalance.getDefaults().unit];
  }
  /**
   * @description Returns tru if the type is in a Compat format
   */


  isLookupType(value) {
    return /Lookup\d+$/.test(value);
  }
  /**
   * @description Creates a lookup string from the supplied id
   */


  createLookupType(lookupId) {
    return `Lookup${lookupId.toString()}`;
  }

  get knownTypes() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _knownTypes)[_knownTypes];
  }

  get lookup() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _lookup)[_lookup] || this.metadata.lookup;
  }

  get metadata() {
    (0, _util.assert)((0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata], 'Metadata has not been set on this registry');
    return (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata];
  }

  get unknownTypes() {
    return [...(0, _classPrivateFieldLooseBase2.default)(this, _unknownTypes)[_unknownTypes].keys()];
  }

  get signedExtensions() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions];
  }
  /**
   * @describe Creates an instance of the class
   */


  createClass(type) {
    return (0, _createClass.createClass)(this, type);
  }
  /**
   * @description Creates an instance of a type as registered
   */


  createType(type, ...params) {
    return this.createTypeUnsafe(type, params);
  }
  /**
   * @description Creates an instance of a type as registered
   */


  createTypeUnsafe(type, params, options) {
    return (0, _createType.createTypeUnsafe)(this, type, params, options);
  } // find a specific call


  findMetaCall(callIndex) {
    const [section, method] = [callIndex[0], callIndex[1]];
    return (0, _util.assertReturn)((0, _classPrivateFieldLooseBase2.default)(this, _metadataCalls)[_metadataCalls][`${section}`] && (0, _classPrivateFieldLooseBase2.default)(this, _metadataCalls)[_metadataCalls][`${section}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section}, ${method}]/[${callIndex.toString()}]`);
  } // finds an error


  findMetaError(errorIndex) {
    const [section, method] = (0, _util.isU8a)(errorIndex) ? [errorIndex[0], errorIndex[1]] : [errorIndex.index.toNumber(), errorIndex.error.toNumber()];
    return (0, _util.assertReturn)((0, _classPrivateFieldLooseBase2.default)(this, _metadataErrors)[_metadataErrors][`${section}`] && (0, _classPrivateFieldLooseBase2.default)(this, _metadataErrors)[_metadataErrors][`${section}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section}, ${method}]/[${errorIndex.toString()}]`);
  }

  findMetaEvent(eventIndex) {
    const [section, method] = [eventIndex[0], eventIndex[1]];
    return (0, _util.assertReturn)((0, _classPrivateFieldLooseBase2.default)(this, _metadataEvents)[_metadataEvents][`${section}`] && (0, _classPrivateFieldLooseBase2.default)(this, _metadataEvents)[_metadataEvents][`${section}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section}, ${method}]/[${eventIndex.toString()}]`);
  }

  get(name, withUnknown, knownTypeDef) {
    let Type = (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].get(name); // we have not already created the type, attempt it


    if (!Type) {
      const definition = (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions].get(name);

      let BaseType; // we have a definition, so create the class now (lazily)

      if (definition) {
        BaseType = (0, _createClass.createClass)(this, definition);
      } else if (knownTypeDef) {
        BaseType = (0, _createClass.constructTypeClass)(this, knownTypeDef);
      } else if (withUnknown) {
        l.warn(`Unable to resolve type ${name}, it will fail on construction`);

        (0, _classPrivateFieldLooseBase2.default)(this, _unknownTypes)[_unknownTypes].set(name, true);

        BaseType = _DoNotConstruct.DoNotConstruct.with(name);
      }

      if (BaseType) {
        // NOTE If we didn't extend here, we would have strange artifacts. An example is
        // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
        // Additionally, we now pass through the registry, which is a link to ourselves
        Type = class extends BaseType {};

        (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].set(name, Type);
      }
    }

    return Type;
  }

  getChainProperties() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties];
  }

  getClassName(Type) {
    // we cannot rely on export order (anymore, since babel/core 7.15.8), so in the case of
    // items such as u32 & U32, we get the lowercase versions here... not quite as optimal
    // (previously this used to be a simple find & return)
    const names = [];

    for (const [name, Clazz] of (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].entries()) {
      if (Type === Clazz) {
        names.push(name);
      }
    } // both sort and reverse are done in-place


    names.sort().reverse();
    return names.length ? names[0] : undefined;
  }

  getDefinition(typeName) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions].get(typeName);
  }

  getModuleInstances(specName, moduleName) {
    var _classPrivateFieldLoo4, _classPrivateFieldLoo5, _classPrivateFieldLoo6, _classPrivateFieldLoo7, _classPrivateFieldLoo8;

    return (_classPrivateFieldLoo4 = (0, _classPrivateFieldLooseBase2.default)(this, _knownTypes)[_knownTypes]) === null || _classPrivateFieldLoo4 === void 0 ? void 0 : (_classPrivateFieldLoo5 = _classPrivateFieldLoo4.typesBundle) === null || _classPrivateFieldLoo5 === void 0 ? void 0 : (_classPrivateFieldLoo6 = _classPrivateFieldLoo5.spec) === null || _classPrivateFieldLoo6 === void 0 ? void 0 : (_classPrivateFieldLoo7 = _classPrivateFieldLoo6[specName]) === null || _classPrivateFieldLoo7 === void 0 ? void 0 : (_classPrivateFieldLoo8 = _classPrivateFieldLoo7.instances) === null || _classPrivateFieldLoo8 === void 0 ? void 0 : _classPrivateFieldLoo8[moduleName];
  }

  getOrThrow(name, msg) {
    const Clazz = this.get(name);
    (0, _util.assert)(Clazz, msg || `type ${name} not found`);
    return Clazz;
  }

  getOrUnknown(name) {
    return this.get(name, true);
  }

  getSignedExtensionExtra() {
    return (0, _index.expandExtensionTypes)((0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions], 'payload', (0, _classPrivateFieldLooseBase2.default)(this, _userExtensions)[_userExtensions]);
  }

  getSignedExtensionTypes() {
    return (0, _index.expandExtensionTypes)((0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions], 'extrinsic', (0, _classPrivateFieldLooseBase2.default)(this, _userExtensions)[_userExtensions]);
  }

  hasClass(name) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].has(name);
  }

  hasDef(name) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions].has(name);
  }

  hasType(name) {
    return !(0, _classPrivateFieldLooseBase2.default)(this, _unknownTypes)[_unknownTypes].get(name) && (this.hasClass(name) || this.hasDef(name));
  }

  hash(data) {
    return this.createType('CodecHash', (0, _classPrivateFieldLooseBase2.default)(this, _hasher)[_hasher](data));
  } // eslint-disable-next-line no-dupe-class-members


  register(arg1, arg2) {
    // NOTE Constructors appear as functions here
    if ((0, _util.isFunction)(arg1)) {
      (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].set(arg1.name, arg1);
    } else if ((0, _util.isString)(arg1)) {
      (0, _util.assert)((0, _util.isFunction)(arg2), () => `Expected class definition passed to '${arg1}' registration`);
      (0, _util.assert)(arg1 !== arg2.toString(), () => `Unable to register circular ${arg1} === ${arg1}`);

      (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].set(arg1, arg2);
    } else {
      this._registerObject(arg1);
    }
  }

  _registerObject(obj) {
    const entries = Object.entries(obj);

    for (let e = 0; e < entries.length; e++) {
      const [name, type] = entries[e];

      if ((0, _util.isFunction)(type)) {
        // This _looks_ a bit funny, but `typeof Clazz === 'function'
        (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].set(name, type);
      } else {
        const def = (0, _util.isString)(type) ? type : (0, _util.stringify)(type);
        (0, _util.assert)(name !== def, () => `Unable to register circular ${name} === ${def}`); // we already have this type, remove the classes registered for it

        if ((0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].has(name)) {
          (0, _classPrivateFieldLooseBase2.default)(this, _classes)[_classes].delete(name);
        }

        (0, _classPrivateFieldLooseBase2.default)(this, _definitions)[_definitions].set(name, def);
      }
    }
  } // sets the chain properties


  setChainProperties(properties) {
    if (properties) {
      (0, _classPrivateFieldLooseBase2.default)(this, _chainProperties)[_chainProperties] = properties;
    }
  }

  setHasher(hasher) {
    (0, _classPrivateFieldLooseBase2.default)(this, _hasher)[_hasher] = hasher || _utilCrypto.blake2AsU8a;
  }

  setKnownTypes(knownTypes) {
    (0, _classPrivateFieldLooseBase2.default)(this, _knownTypes)[_knownTypes] = knownTypes;
  }

  setLookup(lookup) {
    (0, _classPrivateFieldLooseBase2.default)(this, _lookup)[_lookup] = lookup;
  } // sets the metadata


  setMetadata(metadata, signedExtensions, userExtensions) {
    (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata] = metadata.asLatest;
    (0, _classPrivateFieldLooseBase2.default)(this, _metadataVersion)[_metadataVersion] = metadata.version;
    injectExtrinsics(this, (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata], (0, _classPrivateFieldLooseBase2.default)(this, _metadataVersion)[_metadataVersion], (0, _classPrivateFieldLooseBase2.default)(this, _metadataCalls)[_metadataCalls]);
    injectErrors(this, (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata], (0, _classPrivateFieldLooseBase2.default)(this, _metadataVersion)[_metadataVersion], (0, _classPrivateFieldLooseBase2.default)(this, _metadataErrors)[_metadataErrors]);
    injectEvents(this, (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata], (0, _classPrivateFieldLooseBase2.default)(this, _metadataVersion)[_metadataVersion], (0, _classPrivateFieldLooseBase2.default)(this, _metadataEvents)[_metadataEvents]); // setup the available extensions

    this.setSignedExtensions(signedExtensions || ((0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata].extrinsic.version.gt(_util.BN_ZERO) // FIXME Use the extension and their injected types
    ? (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata].extrinsic.signedExtensions.map(({
      identifier
    }) => identifier.toString()) : _index.fallbackExtensions), userExtensions); // setup the chain properties with format overrides

    this.setChainProperties(extractProperties(this, metadata));
  } // sets the available signed extensions


  setSignedExtensions(signedExtensions = _index.fallbackExtensions, userExtensions) {
    (0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions] = signedExtensions;
    (0, _classPrivateFieldLooseBase2.default)(this, _userExtensions)[_userExtensions] = userExtensions;
    const unknown = (0, _index.findUnknownExtensions)((0, _classPrivateFieldLooseBase2.default)(this, _signedExtensions)[_signedExtensions], (0, _classPrivateFieldLooseBase2.default)(this, _userExtensions)[_userExtensions]);

    if (unknown.length) {
      l.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
    }
  }

}

exports.TypeRegistry = TypeRegistry;

},{"../codec/DoNotConstruct.js":237,"../codec/Json.js":241,"../codec/Raw.js":246,"../extrinsic/signedExtensions/index.js":290,"../generic/Event.js":306,"../index.types.js":312,"../interfaces/definitions.js":332,"../metadata/Metadata.js":390,"../metadata/PortableRegistry/index.js":393,"../metadata/decorate/extrinsics/index.js":400,"../metadata/decorate/index.js":401,"./createClass.js":267,"./createType.js":268,"./lazy.js":272,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640,"@polkadot/util-crypto":513}],274:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.alias = alias;
exports.cleanupCompact = cleanupCompact;
exports.findClosing = findClosing;
exports.flattenSingleTuple = flattenSingleTuple;
exports.removeColons = removeColons;
exports.removeExtensions = removeExtensions;
exports.removeGenerics = removeGenerics;
exports.removePairOf = removePairOf;
exports.removeTraits = removeTraits;
exports.removeWrap = removeWrap;
exports.sanitize = sanitize;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];
const ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Option', 'UInt', 'WrapperOpaque']);
const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple

const mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
alias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false), alias('VecDeque<', 'Vec<', false), // <T::Balance as HasCompact>
cleanupCompact(), // Change BoundedVec<Type, Size> to Vec<Type>
removeExtensions('Bounded', true), // Change WeakVec<Type> to Vec<Type>
removeExtensions('Weak', false), // Remove all the trait prefixes
removeTraits(), // remove PairOf<T> -> (T, T)
removePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`
removeWrap('Box<'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
removeGenerics(), // alias String -> Text (compat with jsonrpc methods)
alias('String', 'Text'), // alias Vec<u8> -> Bytes
alias('Vec<u8>', 'Bytes'), alias('&\\[u8\\]', 'Bytes'), alias("&'static\\[u8\\]", 'Bytes'), // alias RawAddress -> Address
alias('RawAddress', 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime
alias('Lookup::Source', 'LookupSource'), alias('Lookup::Target', 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec
alias('exec::StorageKey', 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`
flattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
removeColons()]; // given a starting index, find the closing >

function findClosing(value, start) {
  let depth = 0;

  for (let index = start; index < value.length; index++) {
    if (value[index] === '>') {
      if (!depth) {
        return index;
      }

      depth--;
    } else if (value[index] === '<') {
      depth++;
    }
  }

  throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
}

function alias(src, dest, withChecks = true) {
  const from = new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\${box}${src}`).join('|')})`, 'g');

  const to = src => {
    from.lastIndex = 0;
    return withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest;
  };

  return value => value.replace(from, to);
}

function cleanupCompact() {
  return value => {
    for (let index = 0; index < value.length; index++) {
      if (value[index] === '<') {
        const end = findClosing(value, index + 1) - 14;

        if (value.substr(end, 14) === ' as HasCompact') {
          value = `Compact<${value.substr(index + 1, end - index - 1)}>`;
        }
      }
    }

    return value;
  };
}

function flattenSingleTuple() {
  const from1 = /,\)/g;
  const from2 = /\(([^,]+)\)/;
  return value => {
    from1.lastIndex = 0;
    return value // tuples may have trailing commas, e.g. (u32, BlockNumber, )
    .replace(from1, ')') // change (u32) -> u32
    .replace(from2, '$1');
  };
}

function replaceTagWith(value, matcher, replacer) {
  let index = -1;

  while (true) {
    index = value.indexOf(matcher, index + 1);

    if (index === -1) {
      return value;
    }

    const start = index + matcher.length;
    const end = findClosing(value, start);
    value = `${value.substr(0, index)}${replacer(value.substr(start, end - start))}${value.substr(end + 1)}`;
  }
} // remove the Bounded* or Weak* wrappers


function removeExtensions(type, isSized) {
  return value => BOUNDED.reduce((value, tag) => replaceTagWith(value, `${type}${tag}<`, inner => {
    const parts = inner.split(',').map(s => s.trim()).filter(s => s);

    if (isSized) {
      parts.pop();
    }

    return `${tag}<${parts.join(',')}>`;
  }), value);
}

function removeColons() {
  return (value, {
    allowNamespaces
  } = {}) => {
    let index = 0;

    while (index !== -1) {
      index = value.indexOf('::');

      if (index === 0) {
        value = value.substr(2);
      } else if (index !== -1) {
        if (allowNamespaces) {
          return value;
        }

        let start = index;

        while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
          start--;
        }

        value = `${value.substr(0, start + 1)}${value.substr(index + 2)}`;
      }
    }

    return value;
  };
}

function removeGenerics() {
  return value => {
    for (let index = 0; index < value.length; index++) {
      if (value[index] === '<') {
        // check against the allowed wrappers, be it Vec<..>, Option<...> ...
        const box = ALLOWED_BOXES.find(box => {
          const start = index - box.length;
          return start >= 0 && value.substr(start, box.length) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
          start === 0 || BOX_PRECEDING.includes(value[start - 1]));
        }); // we have not found anything, unwrap generic innards

        if (!box) {
          const end = findClosing(value, index + 1);
          value = `${value.substr(0, index)}${value.substr(end + 1)}`;
        }
      }
    }

    return value;
  };
} // remove the PairOf wrappers


function removePairOf() {
  const replacer = inner => `(${inner},${inner})`;

  return value => replaceTagWith(value, 'PairOf<', replacer);
} // remove the type traits


function removeTraits() {
  const from1 = /\s/g;
  const from2 = /(T|Self)::/g;
  const from3 = /<(T|Self)asTrait>::/g;
  const from4 = /<Tas[a-z]+::Trait>::/g;
  const from5 = /<LookupasStaticLookup>/g;
  const from6 = /::Type/g;
  return value => {
    from1.lastIndex = 0;
    from2.lastIndex = 0;
    from3.lastIndex = 0;
    from4.lastIndex = 0;
    from5.lastIndex = 0;
    from6.lastIndex = 0;
    return value // remove all whitespaces
    .replace(from1, '') // anything `T::<type>` to end up as `<type>`
    .replace(from2, '') // replace `<T as Trait>::` (whitespaces were removed above)
    .replace(from3, '') // replace `<T as something::Trait>::` (whitespaces were removed above)
    .replace(from4, '') // replace <Lookup as StaticLookup>
    .replace(from5, 'Lookup') // replace `<...>::Type`
    .replace(from6, '');
  };
} // remove wrapping values, i.e. Box<Proposal> -> Proposal


function removeWrap(check) {
  const replacer = inner => inner;

  return value => replaceTagWith(value, check, replacer);
}

const sanitizeMap = new Map(); // eslint-disable-next-line @typescript-eslint/ban-types

function sanitize(value, options) {
  let result = value.toString();

  if (!options) {
    const memoized = sanitizeMap.get(result);

    if (memoized) {
      return memoized;
    }
  }

  for (let i = 0; i < mappings.length; i++) {
    result = mappings[i](result, options);
  }

  result = result.trim();

  if (!options) {
    sanitizeMap.set(value.toString(), result);
  }

  return result;
}

},{}],275:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.typeSplit = typeSplit;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function isNotNested(...counters) {
  return !counters.some(counter => counter !== 0);
} // safely split a string on ', ' while taking care of any nested occurences


function typeSplit(type) {
  let [cDepth, fDepth, sDepth, tDepth, start] = [0, 0, 0, 0, 0];
  const result = [];

  const extract = index => {
    if (isNotNested(cDepth, fDepth, sDepth, tDepth)) {
      result.push(type.substr(start, index - start).trim());
      start = index + 1;
    }
  };

  for (let index = 0; index < type.length; index++) {
    switch (type[index]) {
      // if we are not nested, add the type
      case ',':
        extract(index);
        break;
      // adjust compact/vec (and friends) depth

      case '<':
        cDepth++;
        break;

      case '>':
        cDepth--;
        break;
      // adjust fixed vec depths

      case '[':
        fDepth++;
        break;

      case ']':
        fDepth--;
        break;
      // adjust struct depth

      case '{':
        sDepth++;
        break;

      case '}':
        sDepth--;
        break;
      // adjust tuple depth

      case '(':
        tDepth++;
        break;

      case ')':
        tDepth--;
        break;
    }
  }

  (0, _util.assert)(isNotNested(cDepth, fDepth, sDepth, tDepth), () => `Invalid definition (missing terminators) found in ${type}`); // the final leg of the journey

  result.push(type.substr(start, type.length - start).trim());
  return result;
}

},{"@polkadot/util":640}],276:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeDefInfo = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
let TypeDefInfo;
exports.TypeDefInfo = TypeDefInfo;

(function (TypeDefInfo) {
  TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
  TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
  TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
  TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 3] = "DoNotConstruct";
  TypeDefInfo[TypeDefInfo["Enum"] = 4] = "Enum";
  TypeDefInfo[TypeDefInfo["HashMap"] = 5] = "HashMap";
  TypeDefInfo[TypeDefInfo["Int"] = 6] = "Int";
  TypeDefInfo[TypeDefInfo["Linkage"] = 7] = "Linkage";
  TypeDefInfo[TypeDefInfo["Null"] = 8] = "Null";
  TypeDefInfo[TypeDefInfo["Option"] = 9] = "Option";
  TypeDefInfo[TypeDefInfo["Plain"] = 10] = "Plain";
  TypeDefInfo[TypeDefInfo["Range"] = 11] = "Range";
  TypeDefInfo[TypeDefInfo["Result"] = 12] = "Result";
  TypeDefInfo[TypeDefInfo["Set"] = 13] = "Set";
  TypeDefInfo[TypeDefInfo["Si"] = 14] = "Si";
  TypeDefInfo[TypeDefInfo["Struct"] = 15] = "Struct";
  TypeDefInfo[TypeDefInfo["Tuple"] = 16] = "Tuple";
  TypeDefInfo[TypeDefInfo["UInt"] = 17] = "UInt";
  TypeDefInfo[TypeDefInfo["Vec"] = 18] = "Vec";
  TypeDefInfo[TypeDefInfo["VecFixed"] = 19] = "VecFixed";
  TypeDefInfo[TypeDefInfo["WrapperOpaque"] = 20] = "WrapperOpaque";
})(TypeDefInfo || (exports.TypeDefInfo = TypeDefInfo = {}));

},{}],277:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _packageInfo = require("@polkadot/types-known/packageInfo");

var _util = require("@polkadot/util");

var _packageInfo2 = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _util.detectPackage)(_packageInfo2.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/types")
},{"./packageInfo.js":423,"@polkadot/types-known/packageInfo":207,"@polkadot/util":640}],278:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericEthereumAccountId = void 0;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _U8aFixed = require("../codec/U8aFixed.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeAccountId(value) {
  if ((0, _util.isU8a)(value) || Array.isArray(value)) {
    return (0, _util.u8aToU8a)(value);
  } else if ((0, _util.isHex)(value) || (0, _utilCrypto.isEthereumAddress)(value)) {
    return (0, _util.hexToU8a)(value);
  } else if ((0, _util.isString)(value)) {
    return (0, _util.u8aToU8a)(value);
  }

  return value;
}
/**
 * @name GenericEthereumAccountId
 * @description
 * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
 * underlying addresses (20 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */


class GenericEthereumAccountId extends _U8aFixed.U8aFixed {
  constructor(registry, value = new Uint8Array()) {
    super(registry, decodeAccountId(value), 160);
  }

  static encode(value) {
    return (0, _utilCrypto.ethereumEncode)(value);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return super.eq(decodeAccountId(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toString();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return GenericEthereumAccountId.encode(this);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'AccountId';
  }

}

exports.GenericEthereumAccountId = GenericEthereumAccountId;

},{"../codec/U8aFixed.js":251,"@polkadot/util":640,"@polkadot/util-crypto":513}],279:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericEthereumLookupSource = exports.ACCOUNT_ID_PREFIX = void 0;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _Base = require("../codec/Base.js");

var _AccountIndex = require("../generic/AccountIndex.js");

var _AccountId = require("./AccountId.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// eslint-disable-next-line no-use-before-define
const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
/** @internal */

exports.ACCOUNT_ID_PREFIX = ACCOUNT_ID_PREFIX;

function decodeString(registry, value) {
  const decoded = (0, _utilCrypto.decodeAddress)(value);
  return decoded.length === 20 ? registry.createType('EthereumAccountId', decoded) : registry.createType('AccountIndex', (0, _util.u8aToBn)(decoded, true));
}
/** @internal */


function decodeU8a(registry, value) {
  // This allows us to instantiate an address with a raw publicKey. Do this first before
  // we checking the first byte, otherwise we may split an already-existent valid address
  if (value.length === 20) {
    return registry.createType('EthereumAccountId', value);
  } else if (value[0] === 0xff) {
    return registry.createType('EthereumAccountId', value.subarray(1));
  }

  const [offset, length] = _AccountIndex.GenericAccountIndex.readLength(value);

  return registry.createType('AccountIndex', (0, _util.u8aToBn)(value.subarray(offset, offset + length), true));
}
/**
 * @name GenericEthereumLookupSource
 * @description
 * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */


class GenericEthereumLookupSource extends _Base.Base {
  constructor(registry, value = new Uint8Array()) {
    super(registry, GenericEthereumLookupSource._decodeAddress(registry, value));
  }
  /** @internal */


  static _decodeAddress(registry, value) {
    return value instanceof GenericEthereumLookupSource ? value._raw : value instanceof _AccountId.GenericEthereumAccountId || value instanceof _AccountIndex.GenericAccountIndex ? value : (0, _util.isU8a)(value) || Array.isArray(value) || (0, _util.isHex)(value) ? decodeU8a(registry, (0, _util.u8aToU8a)(value)) : (0, _util.isBn)(value) || (0, _util.isNumber)(value) || (0, _util.isBigInt)(value) ? registry.createType('AccountIndex', value) : decodeString(registry, value);
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
    rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */


  get _rawLength() {
    return this._raw instanceof _AccountIndex.GenericAccountIndex ? _AccountIndex.GenericAccountIndex.calcLength(this._raw) : this._raw.encodedLength;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Address';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = this._raw.toU8a().subarray(0, this._rawLength);

    return isBare ? encoded : (0, _util.u8aConcat)(this._raw instanceof _AccountIndex.GenericAccountIndex ? _AccountIndex.GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
  }

}

exports.GenericEthereumLookupSource = GenericEthereumLookupSource;

},{"../codec/Base.js":235,"../generic/AccountIndex.js":301,"./AccountId.js":278,"@polkadot/util":640,"@polkadot/util-crypto":513}],280:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GenericEthereumAccountId", {
  enumerable: true,
  get: function () {
    return _AccountId.GenericEthereumAccountId;
  }
});
Object.defineProperty(exports, "GenericEthereumLookupSource", {
  enumerable: true,
  get: function () {
    return _LookupSource.GenericEthereumLookupSource;
  }
});

var _AccountId = require("./AccountId.js");

var _LookupSource = require("./LookupSource.js");

},{"./AccountId.js":278,"./LookupSource.js":279}],281:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericExtrinsic = void 0;
Object.defineProperty(exports, "LATEST_EXTRINSIC_VERSION", {
  enumerable: true,
  get: function () {
    return _Extrinsic.EXTRINSIC_VERSION;
  }
});

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Base = require("../codec/Base.js");

var _constants = require("./constants.js");

var _Extrinsic = require("./v4/Extrinsic.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const VERSIONS = ['ExtrinsicUnknown', // v0 is unknown
'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];

class ExtrinsicBase extends _Base.Base {
  constructor(registry, value, initialU8aLength) {
    super(registry, value, initialU8aLength);
    const signKeys = Object.keys(registry.getSignedExtensionTypes());

    const getter = key => this._raw.signature[key]; // This is on the abstract class, ensuring that hasOwnProperty operates
    // correctly, i.e. it needs to be on the base class exposing it


    for (let i = 0; i < signKeys.length; i++) {
      (0, _util.objectProperty)(this, signKeys[i], getter);
    }
  }
  /**
   * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
   */


  get args() {
    return this.method.args;
  }
  /**
   * @description The argument definitions, compatible with [[Call]]
   */


  get argsDef() {
    return this.method.argsDef;
  }
  /**
   * @description The actual `[sectionIndex, methodIndex]` as used in the Call
   */


  get callIndex() {
    return this.method.callIndex;
  }
  /**
   * @description The actual data for the Call
   */


  get data() {
    return this.method.data;
  }
  /**
   * @description The era for this extrinsic
   */


  get era() {
    return this._raw.signature.era;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description `true` id the extrinsic is signed
   */


  get isSigned() {
    return this._raw.signature.isSigned;
  }
  /**
   * @description The length of the actual data, excluding prefix
   */


  get length() {
    return this.toU8a(true).length;
  }
  /**
   * @description The [[FunctionMetadataLatest]] that describes the extrinsic
   */


  get meta() {
    return this.method.meta;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */


  get method() {
    return this._raw.method;
  }
  /**
   * @description The nonce for this extrinsic
   */


  get nonce() {
    return this._raw.signature.nonce;
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */


  get signature() {
    return this._raw.signature.signature;
  }
  /**
   * @description The [[Address]] that signed
   */


  get signer() {
    return this._raw.signature.signer;
  }
  /**
   * @description Forwards compat
   */


  get tip() {
    return this._raw.signature.tip;
  }
  /**
   * @description Returns the raw transaction version (not flagged with signing information)
  */


  get type() {
    return this._raw.version;
  }
  /**
   * @description Returns the encoded version flag
  */


  get version() {
    return this.type | (this.isSigned ? _constants.BIT_SIGNED : _constants.BIT_UNSIGNED);
  }
  /**
   * @description Checks if the source matches this in type
   */


  is(other) {
    return this.method.is(other);
  }

}
/**
 * @name GenericExtrinsic
 * @description
 * Representation of an Extrinsic in the system. It contains the actual call,
 * (optional) signature and encodes with an actual length prefix
 *
 * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
 *
 * Can be:
 * - signed, to create a transaction
 * - left as is, to create an inherent
 */


var _hashCache = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("hashCache");

class GenericExtrinsic extends ExtrinsicBase {
  constructor(registry, value, {
    version
  } = {}) {
    super(registry, GenericExtrinsic._decodeExtrinsic(registry, value, version));
    Object.defineProperty(this, _hashCache, {
      writable: true,
      value: void 0
    });
  }
  /** @internal */


  static _newFromValue(registry, value, version) {
    if (value instanceof GenericExtrinsic) {
      return value._raw;
    }

    const isSigned = (version & _constants.BIT_SIGNED) === _constants.BIT_SIGNED;
    const type = VERSIONS[version & _constants.UNMASK_VERSION] || VERSIONS[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a
    // slice for "only add extrinsic types", and more string definitions become unwieldy

    return registry.createType(type, value, {
      isSigned,
      version
    });
  }
  /** @internal */


  static _decodeExtrinsic(registry, value, version = _constants.DEFAULT_VERSION) {
    if ((0, _util.isU8a)(value) || Array.isArray(value) || (0, _util.isHex)(value)) {
      return GenericExtrinsic._decodeU8a(registry, (0, _util.u8aToU8a)(value), version);
    } else if (value instanceof registry.createClass('Call')) {
      return GenericExtrinsic._newFromValue(registry, {
        method: value
      }, version);
    }

    return GenericExtrinsic._newFromValue(registry, value, version);
  }
  /** @internal */


  static _decodeU8a(registry, value, version) {
    if (!value.length) {
      return GenericExtrinsic._newFromValue(registry, new Uint8Array(), version);
    }

    const [offset, length] = (0, _util.compactFromU8a)(value);
    const total = offset + length.toNumber();
    (0, _util.assert)(total <= value.length, () => `Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
    const data = value.subarray(offset, total);
    return GenericExtrinsic._newFromValue(registry, data.subarray(1), data[0]);
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    if (!(0, _classPrivateFieldLooseBase2.default)(this, _hashCache)[_hashCache]) {
      (0, _classPrivateFieldLooseBase2.default)(this, _hashCache)[_hashCache] = super.hash;
    }

    return (0, _classPrivateFieldLooseBase2.default)(this, _hashCache)[_hashCache];
  }
  /**
   * @description Injects an already-generated signature into the extrinsic
   */


  addSignature(signer, signature, payload) {
    this._raw.addSignature(signer, signature, payload);

    (0, _classPrivateFieldLooseBase2.default)(this, _hashCache)[_hashCache] = undefined;
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */


  sign(account, options) {
    this._raw.sign(account, options);

    (0, _classPrivateFieldLooseBase2.default)(this, _hashCache)[_hashCache] = undefined;
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */


  signFake(signer, options) {
    this._raw.signFake(signer, options);

    (0, _classPrivateFieldLooseBase2.default)(this, _hashCache)[_hashCache] = undefined;
    return this;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex(isBare) {
    return (0, _util.u8aToHex)(this.toU8a(isBare));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExpanded) {
    return (0, _util.objectSpread)({}, {
      isSigned: this.isSigned,
      method: this.method.toHuman(isExpanded)
    }, this.isSigned ? {
      era: this.era.toHuman(isExpanded),
      nonce: this.nonce.toHuman(isExpanded),
      signature: this.signature.toHex(),
      signer: this.signer.toHuman(isExpanded),
      tip: this.tip.toHuman(isExpanded)
    } : null);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Extrinsic';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value is not length-prefixed
   */


  toU8a(isBare) {
    // we do not apply bare to the internal values, rather this only determines out length addition,
    // where we strip all lengths this creates an extrinsic that cannot be decoded
    const encoded = (0, _util.u8aConcat)(new Uint8Array([this.version]), this._raw.toU8a());
    return isBare ? encoded : (0, _util.compactAddLength)(encoded);
  }

}

exports.GenericExtrinsic = GenericExtrinsic;

},{"../codec/Base.js":235,"./constants.js":287,"./v4/Extrinsic.js":296,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],282:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MortalEra = exports.ImmortalEra = exports.GenericExtrinsicEra = void 0;

var _util = require("@polkadot/util");

var _Enum = require("../codec/Enum.js");

var _Raw = require("../codec/Raw.js");

var _Tuple = require("../codec/Tuple.js");

var _U = require("../primitive/U64.js");

var _constants = require("./constants.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function getTrailingZeros(period) {
  const binary = period.toString(2);
  let index = 0;

  while (binary[binary.length - 1 - index] === '0') {
    index++;
  }

  return index;
}
/**
 * @name ImmortalEra
 * @description
 * The ImmortalEra for an extrinsic
 */


class ImmortalEra extends _Raw.Raw {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  constructor(registry, value) {
    // For immortals, we always provide the known value (i.e. treated as a
    // constant no matter how it is constructed - it is a fixed structure)
    super(registry, _constants.IMMORTAL_ERA);
  }

}
/**
 * @name MortalEra
 * @description
 * The MortalEra for an extrinsic, indicating period and phase
 */


exports.ImmortalEra = ImmortalEra;

class MortalEra extends _Tuple.Tuple {
  constructor(registry, value) {
    super(registry, {
      period: _U.u64,
      phase: _U.u64
    }, MortalEra._decodeMortalEra(registry, value));
  }
  /** @internal */


  static _decodeMortalEra(registry, value) {
    if ((0, _util.isU8a)(value) || (0, _util.isHex)(value) || Array.isArray(value)) {
      return MortalEra._decodeMortalU8a(registry, (0, _util.u8aToU8a)(value));
    } else if (!value) {
      return [new _U.u64(registry), new _U.u64(registry)];
    } else if ((0, _util.isObject)(value)) {
      return MortalEra._decodeMortalObject(registry, value);
    }

    throw new Error('Invalid data passed to Mortal era');
  }
  /** @internal */


  static _decodeMortalObject(registry, value) {
    const {
      current,
      period
    } = value;
    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
    const phase = current % calPeriod;
    const quantizeFactor = Math.max(calPeriod >> 12, 1);
    const quantizedPhase = phase / quantizeFactor * quantizeFactor;
    return [new _U.u64(registry, calPeriod), new _U.u64(registry, quantizedPhase)];
  }
  /** @internal */


  static _decodeMortalU8a(registry, value) {
    if (value.length === 0) {
      return [new _U.u64(registry), new _U.u64(registry)];
    }

    const first = (0, _util.u8aToBn)(value.subarray(0, 1)).toNumber();
    const second = (0, _util.u8aToBn)(value.subarray(1, 2)).toNumber();
    const encoded = first + (second << 8);
    const period = 2 << encoded % (1 << 4);
    const quantizeFactor = Math.max(period >> 12, 1);
    const phase = (encoded >> 4) * quantizeFactor;
    (0, _util.assert)(period >= 4 && phase < period, 'Invalid data passed to Mortal era');
    return [new _U.u64(registry, period), new _U.u64(registry, phase)];
  }
  /**
   * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
   */


  get encodedLength() {
    return 2;
  }
  /**
   * @description The period of this Mortal wraps as a [[U64]]
   */


  get period() {
    return this[0];
  }
  /**
   * @description The phase of this Mortal wraps as a [[U64]]
   */


  get phase() {
    return this[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return {
      period: (0, _util.formatNumber)(this.period),
      phase: (0, _util.formatNumber)(this.phase)
    };
  }
  /**
   * @description Returns a JSON representation of the actual value
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   * Period and phase are encoded:
   *   - The period of validity from the block hash found in the signing material.
   *   - The phase in the period that this transaction's lifetime begins (and, importantly,
   *     implies which block hash is included in the signature material). If the `period` is
   *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
   *     `period` is.
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    const period = this.period.toNumber();
    const phase = this.phase.toNumber();
    const quantizeFactor = Math.max(period >> 12, 1);
    const trailingZeros = getTrailingZeros(period);
    const encoded = Math.min(15, Math.max(1, trailingZeros - 1)) + (phase / quantizeFactor << 4);
    const first = encoded >> 8;
    const second = encoded & 0xff;
    return new Uint8Array([second, first]);
  }
  /**
   * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
   */


  birth(current) {
    // FIXME No toNumber() here
    return Math.floor((Math.max((0, _util.bnToBn)(current).toNumber(), this.phase.toNumber()) - this.phase.toNumber()) / this.period.toNumber()) * this.period.toNumber() + this.phase.toNumber();
  }
  /**
   * @description Get the block number of the first block at which the era has ended.
   */


  death(current) {
    // FIXME No toNumber() here
    return this.birth(current) + this.period.toNumber();
  }

}
/**
 * @name GenericExtrinsicEra
 * @description
 * The era for an extrinsic, indicating either a mortal or immortal extrinsic
 */


exports.MortalEra = MortalEra;

class GenericExtrinsicEra extends _Enum.Enum {
  constructor(registry, value) {
    super(registry, {
      ImmortalEra,
      MortalEra
    }, GenericExtrinsicEra._decodeExtrinsicEra(value));
  }
  /** @internal */
  // eslint-disable-next-line @typescript-eslint/ban-types


  static _decodeExtrinsicEra(value = new Uint8Array()) {
    if ((0, _util.isU8a)(value)) {
      return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
    } else if (!value) {
      return new Uint8Array([0]);
    } else if (value instanceof GenericExtrinsicEra) {
      return GenericExtrinsicEra._decodeExtrinsicEra(value.toU8a());
    } else if ((0, _util.isHex)(value)) {
      return GenericExtrinsicEra._decodeExtrinsicEra((0, _util.hexToU8a)(value));
    } else if ((0, _util.isObject)(value)) {
      const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
      const mortal = entries.find(([k]) => k.toLowerCase() === 'mortalera');
      const immortal = entries.find(([k]) => k.toLowerCase() === 'immortalera'); // this is to de-serialize from JSON

      return mortal ? {
        MortalEra: mortal[1]
      } : immortal ? {
        ImmortalEra: immortal[1]
      } : {
        MortalEra: value
      };
    }

    throw new Error('Invalid data passed to Era');
  }
  /**
   * @description Override the encoded length method
   */


  get encodedLength() {
    return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
  }
  /**
   * @description Returns the item as a [[ImmortalEra]]
   */


  get asImmortalEra() {
    (0, _util.assert)(this.isImmortalEra, () => `Cannot convert '${this.type}' via asImmortalEra`);
    return this.value;
  }
  /**
   * @description Returns the item as a [[MortalEra]]
   */


  get asMortalEra() {
    (0, _util.assert)(this.isMortalEra, () => `Cannot convert '${this.type}' via asMortalEra`);
    return this.value;
  }
  /**
   * @description `true` if Immortal
   */


  get isImmortalEra() {
    return this.index === 0;
  }
  /**
   * @description `true` if Mortal
   */


  get isMortalEra() {
    return this.index > 0;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the parity-codec specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
  }

}

exports.GenericExtrinsicEra = GenericExtrinsicEra;

},{"../codec/Enum.js":238,"../codec/Raw.js":246,"../codec/Tuple.js":250,"../primitive/U64.js":442,"./constants.js":287,"@polkadot/util":640}],283:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericExtrinsicPayload = void 0;

var _util = require("@polkadot/util");

var _Base = require("../codec/Base.js");

var _constants = require("./constants.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const VERSIONS = ['ExtrinsicPayloadUnknown', // v0 is unknown
'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadV4'];
/**
 * @name GenericExtrinsicPayload
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
 * on the contents included
 */

class GenericExtrinsicPayload extends _Base.Base {
  constructor(registry, value, {
    version
  } = {}) {
    super(registry, GenericExtrinsicPayload.decodeExtrinsicPayload(registry, value, version));
  }
  /** @internal */


  static decodeExtrinsicPayload(registry, value, version = _constants.DEFAULT_VERSION) {
    if (value instanceof GenericExtrinsicPayload) {
      return value._raw;
    }

    return registry.createType(VERSIONS[version] || VERSIONS[0], value, {
      version
    });
  }
  /**
   * @description The block [[Hash]] the signature applies to (mortal/immortal)
   */


  get blockHash() {
    return this._raw.blockHash;
  }
  /**
   * @description The [[ExtrinsicEra]]
   */


  get era() {
    return this._raw.era;
  }
  /**
   * @description The genesis block [[Hash]] the signature applies to
   */


  get genesisHash() {
    // NOTE only v3+
    return this._raw.genesisHash || this.registry.createType('Hash');
  }
  /**
   * @description The [[Raw]] contained in the payload
   */


  get method() {
    return this._raw.method;
  }
  /**
   * @description The [[Index]]
   */


  get nonce() {
    return this._raw.nonce;
  }
  /**
   * @description The specVersion as a [[u32]] for this payload
   */


  get specVersion() {
    // NOTE only v3+
    return this._raw.specVersion || this.registry.createType('u32');
  }
  /**
   * @description The [[Balance]]
   */


  get tip() {
    // NOTE from v2+
    return this._raw.tip || this.registry.createType('Compact<Balance>');
  }
  /**
   * @description The transaction version as a [[u32]] for this payload
   */


  get transactionVersion() {
    // NOTE only v4+
    return this._raw.transactionVersion || this.registry.createType('u32');
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return this._raw.eq(other);
  }
  /**
   * @description Sign the payload with the keypair
   */


  sign(signerPair) {
    const signature = this._raw.sign(signerPair); // This is extensible, so we could quite readily extend to send back extra
    // information, such as for instance the payload, i.e. `payload: this.toHex()`
    // For the case here we sign via the extrinsic, we ignore the return, so generally
    // this is applicable for external signing


    return {
      signature: (0, _util.u8aToHex)(signature)
    };
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExtended) {
    return this._raw.toHuman(isExtended);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toHex();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.toHex();
  }
  /**
   * @description Returns a serialized u8a form
   */


  toU8a(isBare) {
    // call our parent, with only the method stripped
    return super.toU8a(isBare ? {
      method: true
    } : false);
  }

}

exports.GenericExtrinsicPayload = GenericExtrinsicPayload;

},{"../codec/Base.js":235,"./constants.js":287,"@polkadot/util":640}],284:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericExtrinsicPayloadUnknown = void 0;

var _Struct = require("../codec/Struct.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name GenericExtrinsicPayloadUnknown
 * @description
 * A default handler for payloads where the version is not known (default throw)
 */
class GenericExtrinsicPayloadUnknown extends _Struct.Struct {
  constructor(registry, value, {
    version = 0
  } = {}) {
    super(registry, {});
    throw new Error(`Unsupported extrinsic payload version ${version}`);
  }

}

exports.GenericExtrinsicPayloadUnknown = GenericExtrinsicPayloadUnknown;

},{"../codec/Struct.js":249}],285:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericExtrinsicUnknown = void 0;

var _Struct = require("../codec/Struct.js");

var _constants = require("./constants.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name GenericExtrinsicUnknown
 * @description
 * A default handler for extrinsics where the version is not known (default throw)
 */
class GenericExtrinsicUnknown extends _Struct.Struct {
  constructor(registry, value, {
    isSigned = false,
    version = 0
  } = {}) {
    super(registry, {});
    throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & _constants.UNMASK_VERSION}`);
  }

}

exports.GenericExtrinsicUnknown = GenericExtrinsicUnknown;

},{"../codec/Struct.js":249,"./constants.js":287}],286:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericSignerPayload = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Option = require("../codec/Option.js");

var _Struct = require("../codec/Struct.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const knownTypes = {
  address: 'Address',
  blockHash: 'Hash',
  blockNumber: 'BlockNumber',
  era: 'ExtrinsicEra',
  genesisHash: 'Hash',
  method: 'Call',
  nonce: 'Compact<Index>',
  runtimeVersion: 'RuntimeVersion',
  signedExtensions: 'Vec<Text>',
  tip: 'Compact<Balance>',
  version: 'u8'
};
/**
 * @name GenericSignerPayload
 * @description
 * A generic signer payload that can be used for serialization between API and signer
 */

var _extraTypes = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extraTypes");

class GenericSignerPayload extends _Struct.Struct {
  constructor(registry, value) {
    const extensionTypes = (0, _util.objectSpread)({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
    super(registry, (0, _util.objectSpread)({}, extensionTypes, knownTypes), value);
    Object.defineProperty(this, _extraTypes, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _extraTypes)[_extraTypes] = {};

    const getter = key => this.get(key); // add all extras that are not in the base types


    for (const [key, type] of Object.entries(extensionTypes)) {
      if (!knownTypes[key]) {
        (0, _classPrivateFieldLooseBase2.default)(this, _extraTypes)[_extraTypes][key] = type;
      }

      (0, _util.objectProperty)(this, key, getter);
    }
  }

  get address() {
    return this.get('address');
  }

  get blockHash() {
    return this.get('blockHash');
  }

  get blockNumber() {
    return this.get('blockNumber');
  }

  get era() {
    return this.get('era');
  }

  get genesisHash() {
    return this.get('genesisHash');
  }

  get method() {
    return this.get('method');
  }

  get nonce() {
    return this.get('nonce');
  }

  get runtimeVersion() {
    return this.get('runtimeVersion');
  }

  get signedExtensions() {
    return this.get('signedExtensions');
  }

  get tip() {
    return this.get('tip');
  }

  get version() {
    return this.get('version');
  }
  /**
   * @description Creates an representation of the structure as an ISignerPayload JSON
   */


  toPayload() {
    const result = {};
    const keys = Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _extraTypes)[_extraTypes]); // add any explicit overrides we may have

    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      const value = this.get(key);
      const isOption = value instanceof _Option.Option; // Don't include Option.isNone

      if (!isOption || value.isSome) {
        result[key] = value.toHex();
      }
    }

    return (0, _util.objectSpread)(result, {
      // the known defaults as managed explicitly and has different
      // formatting in cases, e.g. we mostly expose a hex format here
      address: this.address.toString(),
      blockHash: this.blockHash.toHex(),
      blockNumber: this.blockNumber.toHex(),
      era: this.era.toHex(),
      genesisHash: this.genesisHash.toHex(),
      method: this.method.toHex(),
      nonce: this.nonce.toHex(),
      signedExtensions: this.signedExtensions.map(e => e.toString()),
      specVersion: this.runtimeVersion.specVersion.toHex(),
      tip: this.tip.toHex(),
      transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
      version: this.version.toNumber()
    });
  }
  /**
   * @description Creates a representation of the payload in raw Exrinsic form
   */


  toRaw() {
    const payload = this.toPayload();
    const data = (0, _util.u8aToHex)(this.registry.createType('ExtrinsicPayload', payload, {
      version: payload.version
    }) // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
    .toU8a({
      method: true
    }));
    return {
      address: payload.address,
      data,
      type: 'payload'
    };
  }

}

exports.GenericSignerPayload = GenericSignerPayload;

},{"../codec/Option.js":244,"../codec/Struct.js":249,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],287:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UNMASK_VERSION = exports.IMMORTAL_ERA = exports.EMPTY_U8A = exports.DEFAULT_VERSION = exports.BIT_UNSIGNED = exports.BIT_SIGNED = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const BIT_SIGNED = 0b10000000;
exports.BIT_SIGNED = BIT_SIGNED;
const BIT_UNSIGNED = 0;
exports.BIT_UNSIGNED = BIT_UNSIGNED;
const EMPTY_U8A = new Uint8Array();
exports.EMPTY_U8A = EMPTY_U8A;
const DEFAULT_VERSION = 4;
exports.DEFAULT_VERSION = DEFAULT_VERSION;
const IMMORTAL_ERA = new Uint8Array([0]);
exports.IMMORTAL_ERA = IMMORTAL_ERA;
const UNMASK_VERSION = 0b01111111;
exports.UNMASK_VERSION = UNMASK_VERSION;

},{}],288:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  GenericExtrinsic: true,
  GenericExtrinsicEra: true,
  GenericMortalEra: true,
  GenericImmortalEra: true,
  GenericExtrinsicPayload: true,
  GenericExtrinsicPayloadUnknown: true,
  GenericExtrinsicUnknown: true,
  GenericSignerPayload: true
};
Object.defineProperty(exports, "GenericExtrinsic", {
  enumerable: true,
  get: function () {
    return _Extrinsic.GenericExtrinsic;
  }
});
Object.defineProperty(exports, "GenericExtrinsicEra", {
  enumerable: true,
  get: function () {
    return _ExtrinsicEra.GenericExtrinsicEra;
  }
});
Object.defineProperty(exports, "GenericExtrinsicPayload", {
  enumerable: true,
  get: function () {
    return _ExtrinsicPayload.GenericExtrinsicPayload;
  }
});
Object.defineProperty(exports, "GenericExtrinsicPayloadUnknown", {
  enumerable: true,
  get: function () {
    return _ExtrinsicPayloadUnknown.GenericExtrinsicPayloadUnknown;
  }
});
Object.defineProperty(exports, "GenericExtrinsicUnknown", {
  enumerable: true,
  get: function () {
    return _ExtrinsicUnknown.GenericExtrinsicUnknown;
  }
});
Object.defineProperty(exports, "GenericImmortalEra", {
  enumerable: true,
  get: function () {
    return _ExtrinsicEra.ImmortalEra;
  }
});
Object.defineProperty(exports, "GenericMortalEra", {
  enumerable: true,
  get: function () {
    return _ExtrinsicEra.MortalEra;
  }
});
Object.defineProperty(exports, "GenericSignerPayload", {
  enumerable: true,
  get: function () {
    return _SignerPayload.GenericSignerPayload;
  }
});

var _Extrinsic = require("./Extrinsic.js");

var _ExtrinsicEra = require("./ExtrinsicEra.js");

var _ExtrinsicPayload = require("./ExtrinsicPayload.js");

var _ExtrinsicPayloadUnknown = require("./ExtrinsicPayloadUnknown.js");

var _ExtrinsicUnknown = require("./ExtrinsicUnknown.js");

var _SignerPayload = require("./SignerPayload.js");

var _index = require("./v4/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

},{"./Extrinsic.js":281,"./ExtrinsicEra.js":282,"./ExtrinsicPayload.js":283,"./ExtrinsicPayloadUnknown.js":284,"./ExtrinsicUnknown.js":285,"./SignerPayload.js":286,"./v4/index.js":299}],289:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emptyCheck = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const emptyCheck = {
  extrinsic: {},
  payload: {}
};
exports.emptyCheck = emptyCheck;

},{}],290:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allExtensions = void 0;
exports.expandExtensionTypes = expandExtensionTypes;
exports.fallbackExtensions = void 0;
exports.findUnknownExtensions = findUnknownExtensions;

var _util = require("@polkadot/util");

var _polkadot = require("./polkadot.js");

var _shell = require("./shell.js");

var _statemint = require("./statemint.js");

var _substrate = require("./substrate.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// A mapping of the known signed extensions to the extra fields that they
// contain. Unlike in the actual extensions, we define the extra fields not
// as a Tuple, but rather as a struct so they can be named. These will be
// expanded into the various fields when added to the payload (we only
// support V4 onwards with these, V3 and earlier are deemed fixed))
const allExtensions = (0, _util.objectSpread)({}, _substrate.substrate, _polkadot.polkadot, _shell.shell, _statemint.statemint); // the v4 signed extensions prior to the point of exposing these to the
// metadata. This may not match 100% with the current defaults and are used
// when not specified in the metadata (which is for very old chains). The
// order is important here, as applied by default

exports.allExtensions = allExtensions;
const fallbackExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];
exports.fallbackExtensions = fallbackExtensions;

function findUnknownExtensions(extensions, userExtensions = {}) {
  const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
  return extensions.filter(k => !names.includes(k));
}

function expandExtensionTypes(extensions, type, userExtensions = {}) {
  return extensions // Always allow user extensions first - these should provide overrides
  .map(k => userExtensions[k] || allExtensions[k]).filter(info => !!info).reduce((result, info) => (0, _util.objectSpread)(result, info[type]), {});
}

},{"./polkadot.js":291,"./shell.js":292,"./statemint.js":293,"./substrate.js":294,"@polkadot/util":640}],291:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polkadot = void 0;

var _emptyCheck = require("./emptyCheck.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const polkadot = {
  LimitParathreadCommits: _emptyCheck.emptyCheck,
  OnlyStakingAndClaims: _emptyCheck.emptyCheck,
  PrevalidateAttests: _emptyCheck.emptyCheck,
  RestrictFunctionality: _emptyCheck.emptyCheck,
  TransactionCallFilter: _emptyCheck.emptyCheck,
  ValidateDoubleVoteReports: _emptyCheck.emptyCheck
};
exports.polkadot = polkadot;

},{"./emptyCheck.js":289}],292:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shell = void 0;

var _emptyCheck = require("./emptyCheck.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const shell = {
  DisallowSigned: _emptyCheck.emptyCheck
};
exports.shell = shell;

},{"./emptyCheck.js":289}],293:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.statemint = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const statemint = {
  ChargeAssetTxPayment: {
    extrinsic: {
      tip: 'Compact<Balance>',
      // eslint-disable-next-line sort-keys
      assetId: 'Option<AssetId>'
    },
    payload: {}
  }
};
exports.statemint = statemint;

},{}],294:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.substrate = void 0;

var _emptyCheck = require("./emptyCheck.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const CheckMortality = {
  extrinsic: {
    era: 'ExtrinsicEra'
  },
  payload: {
    blockHash: 'Hash'
  }
};
const substrate = {
  ChargeTransactionPayment: {
    extrinsic: {
      tip: 'Compact<Balance>'
    },
    payload: {}
  },
  CheckBlockGasLimit: _emptyCheck.emptyCheck,
  CheckEra: CheckMortality,
  CheckGenesis: {
    extrinsic: {},
    payload: {
      genesisHash: 'Hash'
    }
  },
  CheckMortality,
  CheckNonZeroSender: _emptyCheck.emptyCheck,
  CheckNonce: {
    extrinsic: {
      nonce: 'Compact<Index>'
    },
    payload: {}
  },
  CheckSpecVersion: {
    extrinsic: {},
    payload: {
      specVersion: 'u32'
    }
  },
  CheckTxVersion: {
    extrinsic: {},
    payload: {
      transactionVersion: 'u32'
    }
  },
  CheckVersion: {
    extrinsic: {},
    payload: {
      specVersion: 'u32'
    }
  },
  CheckWeight: _emptyCheck.emptyCheck,
  LockStakingStatus: _emptyCheck.emptyCheck,
  ValidateEquivocationReport: _emptyCheck.emptyCheck
};
exports.substrate = substrate;

},{"./emptyCheck.js":289}],295:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sign = sign;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// a helper function for both types of payloads, Raw and metadata-known
function sign(registry, signerPair, u8a, options) {
  const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
  return signerPair.sign(encoded, options);
}

},{}],296:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericExtrinsicV4 = exports.EXTRINSIC_VERSION = void 0;

var _util = require("@polkadot/util");

var _Struct = require("../../codec/Struct.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const EXTRINSIC_VERSION = 4;
/**
 * @name GenericExtrinsicV4
 * @description
 * The third generation of compact extrinsics
 */

exports.EXTRINSIC_VERSION = EXTRINSIC_VERSION;

class GenericExtrinsicV4 extends _Struct.Struct {
  constructor(registry, value, {
    isSigned
  } = {}) {
    super(registry, {
      signature: 'ExtrinsicSignatureV4',
      // eslint-disable-next-line sort-keys
      method: 'Call'
    }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
  }
  /** @internal */


  static decodeExtrinsic(registry, value, isSigned = false) {
    if (value instanceof GenericExtrinsicV4) {
      return value;
    } else if (value instanceof registry.createClass('Call')) {
      return {
        method: value
      };
    } else if ((0, _util.isU8a)(value)) {
      // here we decode manually since we need to pull through the version information
      const signature = registry.createType('ExtrinsicSignatureV4', value, {
        isSigned
      });
      const method = registry.createType('Call', value.subarray(signature.encodedLength));
      return {
        method,
        signature
      };
    }

    return value || {};
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description The [[Call]] this extrinsic wraps
   */


  get method() {
    return this.get('method');
  }
  /**
   * @description The [[ExtrinsicSignatureV4]]
   */


  get signature() {
    return this.get('signature');
  }
  /**
   * @description The version for the signature
   */


  get version() {
    return EXTRINSIC_VERSION;
  }
  /**
   * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
   */


  addSignature(signer, signature, payload) {
    this.signature.addSignature(signer, signature, payload);
    return this;
  }
  /**
   * @description Sign the extrinsic with a specific keypair
   */


  sign(account, options) {
    this.signature.sign(this.method, account, options);
    return this;
  }
  /**
   * @describe Adds a fake signature to the extrinsic
   */


  signFake(signer, options) {
    this.signature.signFake(this.method, signer, options);
    return this;
  }

}

exports.GenericExtrinsicV4 = GenericExtrinsicV4;

},{"../../codec/Struct.js":249,"@polkadot/util":640}],297:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericExtrinsicPayloadV4 = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Enum = require("../../codec/Enum.js");

var _Struct = require("../../codec/Struct.js");

var _util2 = require("../util.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name GenericExtrinsicPayloadV4
 * @description
 * A signing payload for an [[Extrinsic]]. For the final encoding, it is
 * variable length based on the contents included
 */
var _signOptions = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("signOptions");

class GenericExtrinsicPayloadV4 extends _Struct.Struct {
  constructor(registry, value) {
    super(registry, (0, _util.objectSpread)({
      method: 'Bytes'
    }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value); // Do detection for the type of extrinsic, in the case of MultiSignature
    // this is an enum, in the case of AnySignature, this is a Hash only
    // (which may be 64 or 65 bytes)

    Object.defineProperty(this, _signOptions, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _signOptions)[_signOptions] = {
      withType: registry.createType('ExtrinsicSignature') instanceof _Enum.Enum
    };
  }
  /**
   * @description The block [[Hash]] the signature applies to (mortal/immortal)
   */


  get blockHash() {
    return this.get('blockHash');
  }
  /**
   * @description The [[ExtrinsicEra]]
   */


  get era() {
    return this.get('era');
  }
  /**
   * @description The genesis [[Hash]] the signature applies to (mortal/immortal)
   */


  get genesisHash() {
    return this.get('genesisHash');
  }
  /**
   * @description The [[Bytes]] contained in the payload
   */


  get method() {
    return this.get('method');
  }
  /**
   * @description The [[Index]]
   */


  get nonce() {
    return this.get('nonce');
  }
  /**
   * @description The specVersion for this signature
   */


  get specVersion() {
    return this.get('specVersion');
  }
  /**
   * @description The tip [[Balance]]
   */


  get tip() {
    return this.get('tip');
  }
  /**
   * @description The transactionVersion for this signature
   */


  get transactionVersion() {
    return this.get('transactionVersion');
  }
  /**
   * @description
   * The (optional) asset id for this signature for chains that support transaction fees in assets
   */


  get assetId() {
    return this.get('assetId');
  }
  /**
   * @description Sign the payload with the keypair
   */


  sign(signerPair) {
    // NOTE The `toU8a({ method: true })` argument is absolutely critical, we
    // don't want the method (Bytes) to have the length prefix included. This
    // means that the data-as-signed is un-decodable, but is also doesn't need
    // the extra information, only the pure data (and is not decoded) ...
    // The same applies to V1..V3, if we have a V5, carrythis comment
    return (0, _util2.sign)(this.registry, signerPair, this.toU8a({
      method: true
    }), (0, _classPrivateFieldLooseBase2.default)(this, _signOptions)[_signOptions]);
  }

}

exports.GenericExtrinsicPayloadV4 = GenericExtrinsicPayloadV4;

},{"../../codec/Enum.js":238,"../../codec/Struct.js":249,"../util.js":295,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],298:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericExtrinsicSignatureV4 = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Struct = require("../../codec/Struct.js");

var _constants = require("../constants.js");

var _ExtrinsicPayload = require("./ExtrinsicPayload.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Ensure we have enough data for all types of signatures
const FAKE_SIGNATURE = new Uint8Array(256).fill(1);

function toAddress(registry, address) {
  return registry.createType('Address', (0, _util.isU8a)(address) ? (0, _util.u8aToHex)(address) : address);
}
/**
 * @name GenericExtrinsicSignatureV4
 * @description
 * A container for the [[Signature]] associated with a specific [[Extrinsic]]
 */


var _signKeys = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("signKeys");

class GenericExtrinsicSignatureV4 extends _Struct.Struct {
  constructor(registry, value, {
    isSigned
  } = {}) {
    const signTypes = registry.getSignedExtensionTypes();
    super(registry, (0, _util.objectSpread)( // eslint-disable-next-line sort-keys
    {
      signer: 'Address',
      signature: 'ExtrinsicSignature'
    }, signTypes), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
    Object.defineProperty(this, _signKeys, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _signKeys)[_signKeys] = Object.keys(signTypes);
    (0, _util.objectProperties)(this, (0, _classPrivateFieldLooseBase2.default)(this, _signKeys)[_signKeys], k => this.get(k));
  }
  /** @internal */


  static decodeExtrinsicSignature(value, isSigned = false) {
    if (!value) {
      return _constants.EMPTY_U8A;
    } else if (value instanceof GenericExtrinsicSignatureV4) {
      return value;
    }

    return isSigned ? value : _constants.EMPTY_U8A;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.isSigned ? super.encodedLength : 0;
  }
  /**
   * @description `true` if the signature is valid
   */


  get isSigned() {
    return !this.signature.isEmpty;
  }
  /**
   * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
   */


  get era() {
    return this.get('era');
  }
  /**
   * @description The [[Index]] for the signature
   */


  get nonce() {
    return this.get('nonce');
  }
  /**
   * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
   */


  get signature() {
    // the second case here is when we don't have an enum signature, treat as raw
    return this.multiSignature.value || this.multiSignature;
  }
  /**
   * @description The raw [[ExtrinsicSignature]]
   */


  get multiSignature() {
    return this.get('signature');
  }
  /**
   * @description The [[Address]] that signed
   */


  get signer() {
    return this.get('signer');
  }
  /**
   * @description The [[Balance]] tip
   */


  get tip() {
    return this.get('tip');
  }

  _injectSignature(signer, signature, payload) {
    // use the fields exposed to guide the getters
    for (let i = 0; i < (0, _classPrivateFieldLooseBase2.default)(this, _signKeys)[_signKeys].length; i++) {
      const k = (0, _classPrivateFieldLooseBase2.default)(this, _signKeys)[_signKeys][i];

      const v = payload.get(k);

      if (!(0, _util.isUndefined)(v)) {
        this.set(k, v);
      }
    } // additional fields (exposed in struct itself)


    this.set('signer', signer);
    this.set('signature', signature);
    return this;
  }
  /**
   * @description Adds a raw signature
   */


  addSignature(signer, signature, payload) {
    return this._injectSignature(toAddress(this.registry, signer), this.registry.createType('ExtrinsicSignature', signature), new _ExtrinsicPayload.GenericExtrinsicPayloadV4(this.registry, payload));
  }
  /**
   * @description Creates a payload from the supplied options
   */


  createPayload(method, options) {
    const {
      era,
      runtimeVersion: {
        specVersion,
        transactionVersion
      }
    } = options;
    return new _ExtrinsicPayload.GenericExtrinsicPayloadV4(this.registry, (0, _util.objectSpread)({}, options, {
      era: era || _constants.IMMORTAL_ERA,
      method: method.toHex(),
      specVersion,
      transactionVersion
    }));
  }
  /**
   * @description Generate a payload and applies the signature from a keypair
   */


  sign(method, account, options) {
    (0, _util.assert)(account && account.addressRaw, () => `Expected a valid keypair for signing, found ${(0, _util.stringify)(account)}`);
    const signer = toAddress(this.registry, account.addressRaw);
    const payload = this.createPayload(method, options);
    const signature = this.registry.createType('ExtrinsicSignature', payload.sign(account));
    return this._injectSignature(signer, signature, payload);
  }
  /**
   * @description Generate a payload and applies a fake signature
   */


  signFake(method, address, options) {
    (0, _util.assert)(address, () => `Expected a valid address for signing, found ${(0, _util.stringify)(address)}`);
    const signer = toAddress(this.registry, address);
    const payload = this.createPayload(method, options);
    const signature = this.registry.createType('ExtrinsicSignature', FAKE_SIGNATURE);
    return this._injectSignature(signer, signature, payload);
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return this.isSigned ? super.toU8a(isBare) : _constants.EMPTY_U8A;
  }

}

exports.GenericExtrinsicSignatureV4 = GenericExtrinsicSignatureV4;

},{"../../codec/Struct.js":249,"../constants.js":287,"./ExtrinsicPayload.js":297,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],299:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "GenericExtrinsicPayloadV4", {
  enumerable: true,
  get: function () {
    return _ExtrinsicPayload.GenericExtrinsicPayloadV4;
  }
});
Object.defineProperty(exports, "GenericExtrinsicSignatureV4", {
  enumerable: true,
  get: function () {
    return _ExtrinsicSignature.GenericExtrinsicSignatureV4;
  }
});
Object.defineProperty(exports, "GenericExtrinsicV4", {
  enumerable: true,
  get: function () {
    return _Extrinsic.GenericExtrinsicV4;
  }
});

var _Extrinsic = require("./Extrinsic.js");

var _ExtrinsicPayload = require("./ExtrinsicPayload.js");

var _ExtrinsicSignature = require("./ExtrinsicSignature.js");

},{"./Extrinsic.js":296,"./ExtrinsicPayload.js":297,"./ExtrinsicSignature.js":298}],300:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericAccountId = void 0;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _U8aFixed = require("../codec/U8aFixed.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeAccountId(value) {
  if ((0, _util.isU8a)(value) || Array.isArray(value)) {
    return (0, _util.u8aToU8a)(value);
  } else if (!value) {
    return new Uint8Array();
  } else if ((0, _util.isHex)(value)) {
    return (0, _util.hexToU8a)(value);
  } else if ((0, _util.isString)(value)) {
    return (0, _utilCrypto.decodeAddress)(value);
  }

  throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
}
/**
 * @name GenericAccountId
 * @description
 * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
 * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
 * just a Uint8Array wrapper with a fixed length.
 */


class GenericAccountId extends _U8aFixed.U8aFixed {
  constructor(registry, value) {
    const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)

    (0, _util.assert)(decoded.length >= 32 || !decoded.some(b => b), () => `Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);
    super(registry, decoded, 256);
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return super.eq(decodeAccountId(other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toString();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return (0, _utilCrypto.encodeAddress)(this, this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'AccountId';
  }

}

exports.GenericAccountId = GenericAccountId;

},{"../codec/U8aFixed.js":251,"@polkadot/util":640,"@polkadot/util-crypto":513}],301:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericAccountIndex = void 0;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _U = require("../primitive/U32.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const PREFIX_1BYTE = 0xef;
const PREFIX_2BYTE = 0xfc;
const PREFIX_4BYTE = 0xfd;
const PREFIX_8BYTE = 0xfe;
const MAX_1BYTE = new _util.BN(PREFIX_1BYTE);
const MAX_2BYTE = new _util.BN(1).shln(16);
const MAX_4BYTE = new _util.BN(1).shln(32);
/** @internal */

function decodeAccountIndex(value) {
  // eslint-disable-next-line @typescript-eslint/no-use-before-define
  if (value instanceof GenericAccountIndex) {
    // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
    // AccountIndex), which has the initial `toString()` implementation.
    return value.toBn();
  } else if ((0, _util.isBn)(value) || (0, _util.isNumber)(value) || (0, _util.isHex)(value) || (0, _util.isU8a)(value) || (0, _util.isBigInt)(value)) {
    return value;
  }

  return decodeAccountIndex((0, _utilCrypto.decodeAddress)(value));
}
/**
 * @name GenericAccountIndex
 * @description
 * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
 * for an Account. We extends from [[U32]] to provide the number-like properties.
 */


class GenericAccountIndex extends _U.u32 {
  constructor(registry, value = new _util.BN(0)) {
    super(registry, decodeAccountIndex(value));
  }

  static calcLength(_value) {
    const value = (0, _util.bnToBn)(_value);

    if (value.lte(MAX_1BYTE)) {
      return 1;
    } else if (value.lt(MAX_2BYTE)) {
      return 2;
    } else if (value.lt(MAX_4BYTE)) {
      return 4;
    }

    return 8;
  }

  static readLength(input) {
    const first = input[0];

    if (first === PREFIX_2BYTE) {
      return [1, 2];
    } else if (first === PREFIX_4BYTE) {
      return [1, 4];
    } else if (first === PREFIX_8BYTE) {
      return [1, 8];
    }

    return [0, 1];
  }

  static writeLength(input) {
    switch (input.length) {
      case 2:
        return new Uint8Array([PREFIX_2BYTE]);

      case 4:
        return new Uint8Array([PREFIX_4BYTE]);

      case 8:
        return new Uint8Array([PREFIX_8BYTE]);

      default:
        return new Uint8Array([]);
    }
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    // shortcut for BN or Number, don't create an object
    if ((0, _util.isBn)(other) || (0, _util.isNumber)(other)) {
      return super.eq(other);
    } // convert and compare


    return super.eq(this.registry.createType('AccountIndex', other));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toString();
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    const length = GenericAccountIndex.calcLength(this);
    return (0, _utilCrypto.encodeAddress)(this.toU8a().subarray(0, length), this.registry.chainSS58);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'AccountIndex';
  }

}

exports.GenericAccountIndex = GenericAccountIndex;

},{"../primitive/U32.js":441,"@polkadot/util":640,"@polkadot/util-crypto":513}],302:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericBlock = void 0;

var _Struct = require("../codec/Struct.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name GenericBlock
 * @description
 * A block encoded with header and extrinsics
 */
class GenericBlock extends _Struct.Struct {
  constructor(registry, value) {
    super(registry, {
      header: 'Header',
      // eslint-disable-next-line sort-keys
      extrinsics: 'Vec<Extrinsic>'
    }, value);
  }
  /**
   * @description Encodes a content [[Hash]] for the block
   */


  get contentHash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description The [[Extrinsic]] contained in the block
   */


  get extrinsics() {
    return this.get('extrinsics');
  }
  /**
   * @description Block/header [[Hash]]
   */


  get hash() {
    return this.header.hash;
  }
  /**
   * @description The [[Header]] of the block
   */


  get header() {
    return this.get('header');
  }

}

exports.GenericBlock = GenericBlock;

},{"../codec/Struct.js":249}],303:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericCallIndex = exports.GenericCall = void 0;

var _util = require("@polkadot/util");

var _Struct = require("../codec/Struct.js");

var _U8aFixed = require("../codec/U8aFixed.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * Get a mapping of `argument name -> argument type` for the function, from
 * its metadata.
 *
 * @param meta - The function metadata used to get the definition.
 * @internal
 */
function getArgsDef(registry, meta) {
  return meta.fields.reduce((result, {
    name,
    type
  }, index) => {
    result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
    return result;
  }, {});
}
/** @internal */


function decodeCallViaObject(registry, value, _meta) {
  // we only pass args/methodsIndex out
  const {
    args,
    callIndex
  } = value; // Get the correct lookupIndex
  // eslint-disable-next-line @typescript-eslint/no-use-before-define

  const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex; // Find metadata with callIndex

  const meta = _meta || registry.findMetaCall(lookupIndex).meta;

  return {
    args,
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
/** @internal */


function decodeCallViaU8a(registry, value, _meta) {
  // We need 2 bytes for the callIndex
  const callIndex = new Uint8Array(2);
  callIndex.set(value.subarray(0, 2), 0); // Find metadata with callIndex

  const meta = _meta || registry.findMetaCall(callIndex).meta;

  return {
    args: value.subarray(2),
    argsDef: getArgsDef(registry, meta),
    callIndex,
    meta
  };
}
/**
 * Decode input to pass into constructor.
 *
 * @param value - Value to decode, one of:
 * - hex
 * - Uint8Array
 * - {@see DecodeMethodInput}
 * @param _meta - Metadata to use, so that `injectMethods` lookup is not
 * necessary.
 * @internal
 */


function decodeCall(registry, value = new Uint8Array(), _meta) {
  if ((0, _util.isU8a)(value) || (0, _util.isHex)(value)) {
    return decodeCallViaU8a(registry, (0, _util.u8aToU8a)(value), _meta);
  } else if ((0, _util.isObject)(value) && value.callIndex && value.args) {
    return decodeCallViaObject(registry, value, _meta);
  }

  throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
}
/**
 * @name GenericCallIndex
 * @description
 * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
 */


class GenericCallIndex extends _U8aFixed.U8aFixed {
  constructor(registry, value) {
    super(registry, value, 16);
  }

}
/**
 * @name GenericCall
 * @description
 * Extrinsic function descriptor
 */


exports.GenericCallIndex = GenericCallIndex;

class GenericCall extends _Struct.Struct {
  constructor(registry, value, meta) {
    const decoded = decodeCall(registry, value, meta);

    try {
      super(registry, {
        callIndex: GenericCallIndex,
        // eslint-disable-next-line sort-keys
        args: _Struct.Struct.with(decoded.argsDef)
      }, decoded);
      this._meta = void 0;
    } catch (error) {
      let method = 'unknown.unknown';

      try {
        const c = registry.findMetaCall(decoded.callIndex);
        method = `${c.section}.${c.method}`;
      } catch (error) {// ignore
      }

      throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
    }

    this._meta = decoded.meta;
  }
  /**
   * @description The arguments for the function call
   */


  get args() {
    return [...this.get('args').values()];
  }
  /**
   * @description The argument definitions
   */


  get argsDef() {
    return getArgsDef(this.registry, this.meta);
  }
  /**
   * @description The argument entries
   */


  get argsEntries() {
    return [...this.get('args').entries()];
  }
  /**
   * @description The encoded `[sectionIndex, methodIndex]` identifier
   */


  get callIndex() {
    return this.get('callIndex').toU8a();
  }
  /**
   * @description The encoded data
   */


  get data() {
    return this.get('args').toU8a();
  }
  /**
   * @description The [[FunctionMetadata]]
   */


  get meta() {
    return this._meta;
  }
  /**
   * @description Returns the name of the method
   */


  get method() {
    return this.registry.findMetaCall(this.callIndex).method;
  }
  /**
   * @description Returns the module containing the method
   */


  get section() {
    return this.registry.findMetaCall(this.callIndex).section;
  }
  /**
   * @description Checks if the source matches this in type
   */


  is(other) {
    return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExpanded) {
    var _call, _call2;

    let call;

    try {
      call = this.registry.findMetaCall(this.callIndex);
    } catch (error) {// swallow
    }

    return (0, _util.objectSpread)({
      args: this.argsEntries.reduce((args, [n, a]) => (0, _util.objectSpread)(args, {
        [n]: a.toHuman(isExpanded)
      }), {}),
      method: (_call = call) === null || _call === void 0 ? void 0 : _call.method,
      section: (_call2 = call) === null || _call2 === void 0 ? void 0 : _call2.section
    }, isExpanded && call ? {
      docs: call.meta.docs.map(d => d.toString())
    } : null);
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Call';
  }

}

exports.GenericCall = GenericCall;

},{"../codec/Struct.js":249,"../codec/U8aFixed.js":251,"@polkadot/util":640}],304:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericChainProperties = void 0;

var _util = require("@polkadot/util");

var _Json = require("../codec/Json.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function createValue(registry, type, value, asArray = true) {
  // We detect codec here as well - when found, generally this is constructed from itself
  if (value && (0, _util.isFunction)(value.unwrapOrDefault)) {
    return value;
  }

  return registry.createType(type, asArray ? (0, _util.isNull)(value) || (0, _util.isUndefined)(value) ? null : Array.isArray(value) ? value : [value] : value);
}

function decodeValue(registry, key, value) {
  return key === 'ss58Format' ? createValue(registry, 'Option<u32>', value, false) : key === 'tokenDecimals' ? createValue(registry, 'Option<Vec<u32>>', value) : key === 'tokenSymbol' ? createValue(registry, 'Option<Vec<Text>>', value) : value;
}

function decode(registry, value) {
  return ( // allow decoding from a map as well (ourselves)
  value && (0, _util.isFunction)(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all, [key, value]) => {
    all[key] = decodeValue(registry, key, value);
    return all;
  }, {
    ss58Format: registry.createType('Option<u32>'),
    tokenDecimals: registry.createType('Option<Vec<u32>>'),
    tokenSymbol: registry.createType('Option<Vec<Text>>')
  });
}

class GenericChainProperties extends _Json.Json {
  constructor(registry, value) {
    super(registry, decode(registry, value));
  }
  /**
   * @description The chain ss58Format
   */


  get ss58Format() {
    return this.get('ss58Format');
  }
  /**
   * @description The decimals for each of the tokens
   */


  get tokenDecimals() {
    return this.get('tokenDecimals');
  }
  /**
   * @description The symbols for the tokens
   */


  get tokenSymbol() {
    return this.get('tokenSymbol');
  }

}

exports.GenericChainProperties = GenericChainProperties;

},{"../codec/Json.js":241,"@polkadot/util":640}],305:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericConsensusEngineId = exports.CID_POW = exports.CID_GRPA = exports.CID_BABE = exports.CID_AURA = void 0;

var _util = require("@polkadot/util");

var _U8aFixed = require("../codec/U8aFixed.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const CID_AURA = (0, _util.stringToU8a)('aura');
exports.CID_AURA = CID_AURA;
const CID_BABE = (0, _util.stringToU8a)('BABE');
exports.CID_BABE = CID_BABE;
const CID_GRPA = (0, _util.stringToU8a)('FRNK');
exports.CID_GRPA = CID_GRPA;
const CID_POW = (0, _util.stringToU8a)('pow_');
exports.CID_POW = CID_POW;

function getAuraAuthor(registry, bytes, sessionValidators) {
  return sessionValidators[registry.createType('RawAuraPreDigest', bytes.toU8a(true)).slotNumber.mod(new _util.BN(sessionValidators.length)).toNumber()];
}

function getBabeAuthor(registry, bytes, sessionValidators) {
  const digest = registry.createType('RawBabePreDigestCompat', bytes.toU8a(true));
  return sessionValidators[digest.value.toNumber()];
}

function getBytesAsAuthor(registry, bytes) {
  return registry.createType('AccountId', bytes);
}
/**
 * @name GenericConsensusEngineId
 * @description
 * A 4-byte identifier identifying the engine
 */


class GenericConsensusEngineId extends _U8aFixed.U8aFixed {
  constructor(registry, value) {
    super(registry, (0, _util.isNumber)(value) ? (0, _util.bnToU8a)(value, {
      isLe: false
    }) : value, 32);
  }
  /**
   * @description `true` if the engine matches aura
   */


  get isAura() {
    return this.eq(CID_AURA);
  }
  /**
   * @description `true` is the engine matches babe
   */


  get isBabe() {
    return this.eq(CID_BABE);
  }
  /**
   * @description `true` is the engine matches grandpa
   */


  get isGrandpa() {
    return this.eq(CID_GRPA);
  }
  /**
   * @description `true` is the engine matches pow
   */


  get isPow() {
    return this.eq(CID_POW);
  }
  /**
   * @description From the input bytes, decode into an author
   */


  extractAuthor(bytes, sessionValidators) {
    if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {
      if (this.isAura) {
        return getAuraAuthor(this.registry, bytes, sessionValidators);
      } else if (this.isBabe) {
        return getBabeAuthor(this.registry, bytes, sessionValidators);
      }
    } // For pow & Moonbeam, the bytes are the actual author


    if (this.isPow || bytes.length === 20) {
      return getBytesAsAuthor(this.registry, bytes);
    }

    return undefined;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toString();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'ConsensusEngineId';
  }
  /**
   * @description Override the default toString to return a 4-byte string
   */


  toString() {
    return this.isAscii ? (0, _util.u8aToString)(this) : (0, _util.u8aToHex)(this);
  }

}

exports.GenericConsensusEngineId = GenericConsensusEngineId;

},{"../codec/U8aFixed.js":251,"@polkadot/util":640}],306:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericEventData = exports.GenericEvent = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Struct = require("../codec/Struct.js");

var _Tuple = require("../codec/Tuple.js");

var _Null = require("../primitive/Null.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeEvent(registry, value) {
  if (!value || !value.length) {
    return {
      DataType: _Null.Null
    };
  }

  const index = value.subarray(0, 2);
  return {
    DataType: registry.findMetaEvent(index),
    value: {
      data: value.subarray(2),
      index
    }
  };
}
/**
 * @name GenericEventData
 * @description
 * Wrapper for the actual data that forms part of an [[Event]]
 */


var _meta = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("meta");

var _method = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("method");

var _section = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("section");

var _typeDef = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("typeDef");

class GenericEventData extends _Tuple.Tuple {
  constructor(registry, value, meta, section = '<unknown>', method = '<unknown>') {
    const fields = (meta === null || meta === void 0 ? void 0 : meta.fields) || [];
    super(registry, fields.map(({
      type
    }) => registry.createLookupType(type)), value);
    Object.defineProperty(this, _meta, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _method, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _section, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _typeDef, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _meta)[_meta] = meta;
    (0, _classPrivateFieldLooseBase2.default)(this, _method)[_method] = method;
    (0, _classPrivateFieldLooseBase2.default)(this, _section)[_section] = section;
    (0, _classPrivateFieldLooseBase2.default)(this, _typeDef)[_typeDef] = fields.map(({
      type
    }) => registry.lookup.getTypeDef(type));
  }
  /**
   * @description The wrapped [[EventMetadata]]
   */


  get meta() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _meta)[_meta];
  }
  /**
   * @description The method as a string
   */


  get method() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _method)[_method];
  }
  /**
   * @description The section as a string
   */


  get section() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _section)[_section];
  }
  /**
   * @description The [[TypeDef]] for this event
   */


  get typeDef() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _typeDef)[_typeDef];
  }

}
/**
 * @name GenericEvent
 * @description
 * A representation of a system event. These are generated via the [[Metadata]] interfaces and
 * specific to a specific Substrate runtime
 */


exports.GenericEventData = GenericEventData;

class GenericEvent extends _Struct.Struct {
  // Currently we _only_ decode from Uint8Array, since we expect it to
  // be used via EventRecord
  constructor(registry, _value) {
    const {
      DataType,
      value
    } = decodeEvent(registry, _value);
    super(registry, {
      index: 'EventId',
      // eslint-disable-next-line sort-keys
      data: DataType
    }, value);
  }
  /**
   * @description The wrapped [[EventData]]
   */


  get data() {
    return this.get('data');
  }
  /**
   * @description The [[EventId]], identifying the raw event
   */


  get index() {
    return this.get('index');
  }
  /**
   * @description The [[EventMetadata]] with the documentation
   */


  get meta() {
    return this.data.meta;
  }
  /**
   * @description The method string identifying the event
   */


  get method() {
    return this.data.method;
  }
  /**
   * @description The section string identifying the event
   */


  get section() {
    return this.data.section;
  }
  /**
   * @description The [[TypeDef]] for the event
   */


  get typeDef() {
    return this.data.typeDef;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExpanded) {
    return (0, _util.objectSpread)({
      method: this.method,
      section: this.section
    }, isExpanded ? {
      docs: this.meta.docs.map(d => d.toString())
    } : null, super.toHuman(isExpanded));
  }

}

exports.GenericEvent = GenericEvent;

},{"../codec/Struct.js":249,"../codec/Tuple.js":250,"../primitive/Null.js":434,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],307:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericLookupSource = exports.ACCOUNT_ID_PREFIX = void 0;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _Base = require("../codec/Base.js");

var _AccountId = require("./AccountId.js");

var _AccountIndex = require("./AccountIndex.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// eslint-disable-next-line no-use-before-define
const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
/** @internal */

exports.ACCOUNT_ID_PREFIX = ACCOUNT_ID_PREFIX;

function decodeString(registry, value) {
  const decoded = (0, _utilCrypto.decodeAddress)(value);
  return decoded.length === 32 ? registry.createType('AccountId', decoded) : registry.createType('AccountIndex', (0, _util.u8aToBn)(decoded, true));
}
/** @internal */


function decodeU8a(registry, value) {
  // This allows us to instantiate an address with a raw publicKey. Do this first before
  // we checking the first byte, otherwise we may split an already-existent valid address
  if (value.length === 32) {
    return registry.createType('AccountId', value);
  } else if (value[0] === 0xff) {
    return registry.createType('AccountId', value.subarray(1));
  }

  const [offset, length] = _AccountIndex.GenericAccountIndex.readLength(value);

  return registry.createType('AccountIndex', (0, _util.u8aToBn)(value.subarray(offset, offset + length), true));
}
/**
 * @name LookupSource
 * @description
 * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
 * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
 * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
 * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
 */


class GenericLookupSource extends _Base.Base {
  constructor(registry, value = new Uint8Array()) {
    super(registry, GenericLookupSource._decodeAddress(registry, value));
  }
  /** @internal */


  static _decodeAddress(registry, value) {
    return value instanceof GenericLookupSource ? value._raw : value instanceof _AccountId.GenericAccountId || value instanceof _AccountIndex.GenericAccountIndex ? value : (0, _util.isBn)(value) || (0, _util.isNumber)(value) || (0, _util.isBigInt)(value) ? registry.createType('AccountIndex', value) : Array.isArray(value) || (0, _util.isHex)(value) || (0, _util.isU8a)(value) ? decodeU8a(registry, (0, _util.u8aToU8a)(value)) : decodeString(registry, value);
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    const rawLength = this._rawLength;
    return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
    rawLength > 1 ? 1 : 0);
  }
  /**
   * @description The length of the raw value, either AccountIndex or AccountId
   */


  get _rawLength() {
    return this._raw instanceof _AccountIndex.GenericAccountIndex ? _AccountIndex.GenericAccountIndex.calcLength(this._raw) : this._raw.encodedLength;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Address';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const encoded = this._raw.toU8a().subarray(0, this._rawLength);

    return isBare ? encoded : (0, _util.u8aConcat)(this._raw instanceof _AccountIndex.GenericAccountIndex ? _AccountIndex.GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
  }

}

exports.GenericLookupSource = GenericLookupSource;

},{"../codec/Base.js":235,"./AccountId.js":300,"./AccountIndex.js":301,"@polkadot/util":640,"@polkadot/util-crypto":513}],308:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericMultiAddress = void 0;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _Enum = require("../codec/Enum.js");

var _AccountId = require("./AccountId.js");

var _AccountIndex = require("./AccountIndex.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function decodeU8a(registry, u8a) {
  if ([0, 32].includes(u8a.length)) {
    return {
      Id: u8a
    };
  } else if (u8a.length === 20) {
    return {
      Address20: u8a
    };
  } else if (u8a.length <= 8) {
    return {
      Index: registry.createType('AccountIndex', u8a).toNumber()
    };
  }

  return u8a;
}

function decodeMultiAny(registry, value) {
  if (value instanceof _AccountId.GenericAccountId) {
    return {
      Id: value
    };
  } else if ((0, _util.isU8a)(value)) {
    // NOTE This is after the AccountId check (which is U8a)
    return decodeU8a(registry, value);
  } else if (value instanceof GenericMultiAddress) {
    return value;
  } else if (value instanceof _AccountIndex.GenericAccountIndex || (0, _util.isBn)(value) || (0, _util.isNumber)(value)) {
    return {
      Index: (0, _util.isNumber)(value) ? value : value.toNumber()
    };
  } else if ((0, _util.isString)(value)) {
    return decodeU8a(registry, (0, _utilCrypto.decodeAddress)(value.toString()));
  }

  return value;
}

class GenericMultiAddress extends _Enum.Enum {
  constructor(registry, value) {
    super(registry, {
      Id: 'AccountId',
      Index: 'Compact<AccountIndex>',
      Raw: 'Bytes',
      // eslint-disable-next-line sort-keys
      Address32: 'H256',
      // eslint-disable-next-line sort-keys
      Address20: 'H160'
    }, decodeMultiAny(registry, value));
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.value.toString();
  }

}

exports.GenericMultiAddress = GenericMultiAddress;

},{"../codec/Enum.js":238,"./AccountId.js":300,"./AccountIndex.js":301,"@polkadot/util":640,"@polkadot/util-crypto":513}],309:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenericVote = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _U8aFixed = require("../codec/U8aFixed.js");

var _Bool = require("../primitive/Bool.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// For votes, the topmost bit indicated aye/nay, the lower bits indicate the conviction
const AYE_BITS = 0b10000000;
const NAY_BITS = 0b00000000;
const CON_MASK = 0b01111111;
const DEF_CONV = 0b00000000; // the default conviction, None

/** @internal */

function decodeVoteBool(value) {
  return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
}
/** @internal */


function decodeVoteU8a(value) {
  return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
}
/** @internal */


function decodeVoteType(registry, value) {
  const vote = new _Bool.bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS;
  const conviction = registry.createType('Conviction', value.conviction || DEF_CONV);
  return new Uint8Array([vote | conviction.index]);
}
/** @internal */


function decodeVote(registry, value) {
  if ((0, _util.isU8a)(value)) {
    return decodeVoteU8a(value);
  } else if ((0, _util.isUndefined)(value) || value instanceof Boolean || (0, _util.isBoolean)(value)) {
    return decodeVoteBool(new _Bool.bool(registry, value).isTrue);
  } else if ((0, _util.isNumber)(value)) {
    return decodeVoteBool(value < 0);
  }

  return decodeVoteType(registry, value);
}
/**
 * @name GenericVote
 * @description
 * A number of lock periods, plus a vote, one way or the other.
 */


var _aye = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("aye");

var _conviction = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("conviction");

class GenericVote extends _U8aFixed.U8aFixed {
  constructor(registry, value) {
    // decoded is just 1 byte
    // Aye: Most Significant Bit
    // Conviction: 0000 - 0101
    const decoded = decodeVote(registry, value);
    super(registry, decoded, 8);
    Object.defineProperty(this, _aye, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _conviction, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _aye)[_aye] = (decoded[0] & AYE_BITS) === AYE_BITS;
    (0, _classPrivateFieldLooseBase2.default)(this, _conviction)[_conviction] = this.registry.createType('Conviction', decoded[0] & CON_MASK);
  }
  /**
   * @description returns a V2 conviction
   */


  get conviction() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _conviction)[_conviction];
  }
  /**
   * @description true if the wrapped value is a positive vote
   */


  get isAye() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _aye)[_aye];
  }
  /**
   * @description true if the wrapped value is a negative vote
   */


  get isNay() {
    return !this.isAye;
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman(isExpanded) {
    return {
      conviction: this.conviction.toHuman(isExpanded),
      vote: this.isAye ? 'Aye' : 'Nay'
    };
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Vote';
  }

}

exports.GenericVote = GenericVote;

},{"../codec/U8aFixed.js":251,"../primitive/Bool.js":425,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],310:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  GenericAccountId: true,
  GenericAccountIndex: true,
  GenericBlock: true,
  GenericCall: true,
  GenericChainProperties: true,
  GenericConsensusEngineId: true,
  GenericEvent: true,
  GenericEventData: true,
  GenericLookupSource: true,
  GenericMultiAddress: true,
  GenericAddress: true,
  GenericVote: true
};
Object.defineProperty(exports, "GenericAccountId", {
  enumerable: true,
  get: function () {
    return _AccountId.GenericAccountId;
  }
});
Object.defineProperty(exports, "GenericAccountIndex", {
  enumerable: true,
  get: function () {
    return _AccountIndex.GenericAccountIndex;
  }
});
Object.defineProperty(exports, "GenericAddress", {
  enumerable: true,
  get: function () {
    return _MultiAddress.GenericMultiAddress;
  }
});
Object.defineProperty(exports, "GenericBlock", {
  enumerable: true,
  get: function () {
    return _Block.GenericBlock;
  }
});
Object.defineProperty(exports, "GenericCall", {
  enumerable: true,
  get: function () {
    return _Call.GenericCall;
  }
});
Object.defineProperty(exports, "GenericChainProperties", {
  enumerable: true,
  get: function () {
    return _ChainProperties.GenericChainProperties;
  }
});
Object.defineProperty(exports, "GenericConsensusEngineId", {
  enumerable: true,
  get: function () {
    return _ConsensusEngineId.GenericConsensusEngineId;
  }
});
Object.defineProperty(exports, "GenericEvent", {
  enumerable: true,
  get: function () {
    return _Event.GenericEvent;
  }
});
Object.defineProperty(exports, "GenericEventData", {
  enumerable: true,
  get: function () {
    return _Event.GenericEventData;
  }
});
Object.defineProperty(exports, "GenericLookupSource", {
  enumerable: true,
  get: function () {
    return _LookupSource.GenericLookupSource;
  }
});
Object.defineProperty(exports, "GenericMultiAddress", {
  enumerable: true,
  get: function () {
    return _MultiAddress.GenericMultiAddress;
  }
});
Object.defineProperty(exports, "GenericVote", {
  enumerable: true,
  get: function () {
    return _Vote.GenericVote;
  }
});

var _index = require("../ethereum/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _AccountId = require("./AccountId.js");

var _AccountIndex = require("./AccountIndex.js");

var _Block = require("./Block.js");

var _Call = require("./Call.js");

var _ChainProperties = require("./ChainProperties.js");

var _ConsensusEngineId = require("./ConsensusEngineId.js");

var _Event = require("./Event.js");

var _LookupSource = require("./LookupSource.js");

var _MultiAddress = require("./MultiAddress.js");

var _Vote = require("./Vote.js");

},{"../ethereum/index.js":280,"./AccountId.js":300,"./AccountIndex.js":301,"./Block.js":302,"./Call.js":303,"./ChainProperties.js":304,"./ConsensusEngineId.js":305,"./Event.js":306,"./LookupSource.js":307,"./MultiAddress.js":308,"./Vote.js":309}],311:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});

},{"./bundle.js":230,"./detectPackage.js":277}],312:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require("./extrinsic/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _index2 = require("./generic/index.js");

Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    }
  });
});

var _index3 = require("./primitive/index.js");

Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    }
  });
});

},{"./extrinsic/index.js":288,"./generic/index.js":310,"./primitive/index.js":445}],313:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    AssetApprovalKey: {
      owner: 'AccountId',
      delegate: 'AccountId'
    },
    AssetApproval: {
      amount: 'TAssetBalance',
      deposit: 'TAssetDepositBalance'
    },
    AssetBalance: {
      balance: 'TAssetBalance',
      isFrozen: 'bool',
      isSufficient: 'bool'
    },
    AssetDestroyWitness: {
      accounts: 'Compact<u32>',
      sufficients: 'Compact<u32>',
      approvals: 'Compact<u32>'
    },
    AssetDetails: {
      owner: 'AccountId',
      issuer: 'AccountId',
      admin: 'AccountId',
      freezer: 'AccountId',
      supply: 'TAssetBalance',
      deposit: 'TAssetDepositBalance',
      minBalance: 'TAssetBalance',
      isSufficient: 'bool',
      accounts: 'u32',
      sufficients: 'u32',
      approvals: 'u32',
      isFrozen: 'bool'
    },
    AssetMetadata: {
      deposit: 'TAssetDepositBalance',
      name: 'Vec<u8>',
      symbol: 'Vec<u8>',
      decimals: 'u8',
      isFrozen: 'bool'
    },
    TAssetBalance: 'u64',
    TAssetDepositBalance: 'BalanceOf'
  }
};
exports.default = _default;

},{}],314:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    BlockAttestations: {
      receipt: 'CandidateReceipt',
      valid: 'Vec<AccountId>',
      invalid: 'Vec<AccountId>'
    },
    IncludedBlocks: {
      actualNumber: 'BlockNumber',
      session: 'SessionIndex',
      randomSeed: 'H256',
      activeParachains: 'Vec<ParaId>',
      paraBlocks: 'Vec<Hash>'
    },
    MoreAttestations: {}
  }
};
exports.default = _default;

},{}],315:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    RawAuraPreDigest: {
      slotNumber: 'u64'
    }
  }
};
exports.default = _default;

},{}],316:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    hasKey: {
      description: 'Returns true if the keystore has private keys for the given public key and key type.',
      params: [{
        name: 'publicKey',
        type: 'Bytes'
      }, {
        name: 'keyType',
        type: 'Text'
      }],
      type: 'bool'
    },
    hasSessionKeys: {
      description: 'Returns true if the keystore has private keys for the given session public keys.',
      params: [{
        name: 'sessionKeys',
        type: 'Bytes'
      }],
      type: 'bool'
    },
    removeExtrinsic: {
      description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
      params: [{
        name: 'bytesOrHash',
        type: 'Vec<ExtrinsicOrHash>'
      }],
      type: 'Vec<Hash>'
    },
    insertKey: {
      description: 'Insert a key into the keystore.',
      params: [{
        name: 'keyType',
        type: 'Text'
      }, {
        name: 'suri',
        type: 'Text'
      }, {
        name: 'publicKey',
        type: 'Bytes'
      }],
      type: 'Bytes'
    },
    rotateKeys: {
      description: 'Generate new session keys and returns the corresponding public keys',
      params: [],
      type: 'Bytes'
    },
    pendingExtrinsics: {
      description: 'Returns all pending extrinsics, potentially grouped by sender',
      params: [],
      type: 'Vec<Extrinsic>'
    },
    submitExtrinsic: {
      isSigned: true,
      description: 'Submit a fully formatted extrinsic for block inclusion',
      params: [{
        name: 'extrinsic',
        type: 'Extrinsic'
      }],
      type: 'Hash'
    },
    submitAndWatchExtrinsic: {
      description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
      isSigned: true,
      params: [{
        name: 'extrinsic',
        type: 'Extrinsic'
      }],
      pubsub: ['extrinsicUpdate', 'submitAndWatchExtrinsic', 'unwatchExtrinsic'],
      type: 'ExtrinsicStatus'
    }
  },
  types: {
    ExtrinsicOrHash: {
      _enum: {
        Hash: 'Hash',
        Extrinsic: 'Bytes'
      }
    },
    ExtrinsicStatus: {
      _enum: {
        Future: 'Null',
        Ready: 'Null',
        Broadcast: 'Vec<Text>',
        InBlock: 'Hash',
        Retracted: 'Hash',
        FinalityTimeout: 'Hash',
        Finalized: 'Hash',
        Usurped: 'Hash',
        Dropped: 'Null',
        Invalid: 'Null'
      }
    }
  }
};
exports.default = _default;

},{}],317:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    UncleEntryItem: {
      _enum: {
        InclusionHeight: 'BlockNumber',
        Uncle: '(Hash, Option<AccountId>)'
      }
    }
  }
};
exports.default = _default;

},{}],318:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    epochAuthorship: {
      description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
      params: [],
      type: 'HashMap<AuthorityId, EpochAuthorship>'
    }
  },
  types: {
    AllowedSlots: {
      _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
    },
    BabeAuthorityWeight: 'u64',
    BabeEpochConfiguration: {
      c: '(u64, u64)',
      allowedSlots: 'AllowedSlots'
    },
    BabeBlockWeight: 'u32',
    BabeEquivocationProof: {
      offender: 'AuthorityId',
      slotNumber: 'SlotNumber',
      firstHeader: 'Header',
      secondHeader: 'Header'
    },
    BabeWeight: 'u64',
    MaybeRandomness: 'Option<Randomness>',
    MaybeVrf: 'Option<VrfData>',
    EpochAuthorship: {
      primary: 'Vec<u64>',
      secondary: 'Vec<u64>',
      secondary_vrf: 'Vec<u64>'
    },
    NextConfigDescriptor: {
      _enum: {
        V0: 'Null',
        V1: 'NextConfigDescriptorV1'
      }
    },
    NextConfigDescriptorV1: {
      c: '(u64, u64)',
      allowedSlots: 'AllowedSlots'
    },
    Randomness: 'Hash',
    RawBabePreDigest: {
      _enum: {
        Phantom: 'Null',
        // index starts at 1... empty slot at 0
        Primary: 'RawBabePreDigestPrimary',
        SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
        SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
      }
    },
    RawBabePreDigestPrimary: {
      authorityIndex: 'u32',
      // AuthorityIndex (also in aura)
      slotNumber: 'SlotNumber',
      vrfOutput: 'VrfOutput',
      vrfProof: 'VrfProof'
    },
    RawBabePreDigestSecondaryPlain: {
      authorityIndex: 'u32',
      // AuthorityIndex (also in aura)
      slotNumber: 'SlotNumber'
    },
    RawBabePreDigestSecondaryVRF: {
      authorityIndex: 'u32',
      slotNumber: 'SlotNumber',
      vrfOutput: 'VrfOutput',
      vrfProof: 'VrfProof'
    },
    RawBabePreDigestTo159: {
      _enum: {
        Primary: 'RawBabePreDigestPrimaryTo159',
        Secondary: 'RawBabePreDigestSecondaryTo159'
      }
    },
    RawBabePreDigestPrimaryTo159: {
      authorityIndex: 'u32',
      slotNumber: 'SlotNumber',
      weight: 'BabeBlockWeight',
      vrfOutput: 'VrfOutput',
      vrfProof: 'VrfProof'
    },
    RawBabePreDigestSecondaryTo159: {
      authorityIndex: 'u32',
      slotNumber: 'SlotNumber',
      weight: 'BabeBlockWeight'
    },
    // a cross old/new compatible version of the digest, that is _only_ useful
    // for partial parsing and extraction of the author. This assumes that all
    // entries has the authorityIndex in the first position - and that it is all
    // we are interested in
    RawBabePreDigestCompat: {
      _enum: {
        Zero: 'u32',
        One: 'u32',
        Two: 'u32',
        Three: 'u32'
      }
    },
    SlotNumber: 'u64',
    VrfData: '[u8; 32]',
    VrfOutput: '[u8; 32]',
    VrfProof: '[u8; 64]'
  }
};
exports.default = _default;

},{}],319:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    AccountData: {
      free: 'Balance',
      reserved: 'Balance',
      miscFrozen: 'Balance',
      feeFrozen: 'Balance'
    },
    BalanceLockTo212: {
      id: 'LockIdentifier',
      amount: 'Balance',
      until: 'BlockNumber',
      reasons: 'WithdrawReasons'
    },
    BalanceLock: {
      id: 'LockIdentifier',
      amount: 'Balance',
      reasons: 'Reasons'
    },
    BalanceStatus: {
      _enum: ['Free', 'Reserved']
    },
    Reasons: {
      _enum: ['Fee', 'Misc', 'All']
    },
    ReserveData: {
      id: 'ReserveIdentifier',
      amount: 'Balance'
    },
    ReserveIdentifier: '[u8; 8]',
    VestingSchedule: {
      offset: 'Balance',
      perBlock: 'Balance',
      startingBlock: 'BlockNumber'
    },
    WithdrawReasons: {
      _set: {
        TransactionPayment: 0b00000001,
        Transfer: 0b00000010,
        Reserve: 0b00000100,
        Fee: 0b00001000,
        Tip: 0b00010000
      }
    }
  }
};
exports.default = _default;

},{}],320:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    subscribeJustifications: {
      description: 'Returns the block most recently finalized by BEEFY, alongside side its justification.',
      params: [],
      pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
      type: 'BeefySignedCommitment'
    }
  },
  types: {
    BeefyCommitment: {
      payload: 'BeefyPayload',
      blockNumber: 'BlockNumber',
      validatorSetId: 'ValidatorSetId'
    },
    BeefyId: '[u8; 33]',
    BeefySignedCommitment: {
      commitment: 'BeefyCommitment',
      signatures: 'Vec<Option<EcdsaSignature>>'
    },
    BeefyNextAuthoritySet: {
      id: 'u64',
      len: 'u32',
      root: 'H256'
    },
    BeefyPayload: 'MmrRootHash',
    MmrRootHash: 'H256',
    ValidatorSetId: 'u64'
  }
};
exports.default = _default;

},{}],321:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    BridgedBlockHash: 'H256',
    BridgedBlockNumber: 'BlockNumber',
    BridgedHeader: 'Header',
    BridgeMessageId: '(LaneId, MessageNonce)',
    CallOrigin: {
      _enum: {
        SourceRoot: 'Null',
        TargetAccount: '(AccountId, MultiSigner, MultiSignature)',
        SourceAccount: 'AccountId'
      }
    },
    ChainId: '[u8; 4]',
    DeliveredMessages: {
      begin: 'MessageNonce',
      end: 'MessageNonce',
      // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
      dispatchResults: 'BitVec'
    },
    DispatchFeePayment: {
      _enum: ['AtSourceChain', 'AtTargetChain']
    },
    InboundLaneData: {
      relayers: 'Vec<UnrewardedRelayer>',
      lastConfirmedNonce: 'MessageNonce'
    },
    InboundRelayer: 'AccountId',
    InitializationData: {
      header: 'Header',
      authorityList: 'AuthorityList',
      setId: 'SetId',
      isHalted: 'bool'
    },
    LaneId: '[u8; 4]',
    MessageData: {
      payload: 'Bytes',
      fee: 'Balance'
    },
    MessagesDeliveryProofOf: {
      bridgedHeaderHash: 'BlockHash',
      storageProof: 'Vec<Bytes>',
      lane: 'LaneId'
    },
    MessageKey: {
      laneId: 'LaneId',
      nonce: 'MessageNonce'
    },
    MessageNonce: 'u64',
    MessagesProofOf: {
      bridgedHeaderHash: 'BridgedBlockHash',
      storageProof: 'Vec<Bytes>',
      lane: 'LaneId',
      noncesStart: 'MessageNonce',
      noncesEnd: 'MessageNonce'
    },
    OperatingMode: {
      _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']
    },
    OutboundLaneData: {
      oldestUnprunedNonce: 'MessageNonce',
      latestReceivedNonce: 'MessageNonce',
      latestGeneratedNonce: 'MessageNonce'
    },
    OutboundMessageFee: 'Balance',
    OutboundPayload: {
      specVersion: 'u32',
      weight: 'Weight',
      origin: 'CallOrigin',
      dispatchFeePayment: 'DispatchFeePayment',
      call: 'Bytes'
    },
    Parameter: 'Null',
    RelayerId: 'AccountId',
    UnrewardedRelayer: {
      relayer: 'RelayerId',
      messages: 'DeliveredMessages'
    },
    UnrewardedRelayersState: {
      unrewardedRelayer_Entries: 'MessageNonce',
      messagesInOldestEntry: 'MessageNonce',
      totalMessages: 'MessageNonce'
    }
  }
};
exports.default = _default;

},{}],322:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    getHeader: {
      alias: ['chain_getHead'],
      description: 'Retrieves the header for a specific block',
      params: [{
        name: 'hash',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Header'
    },
    getBlock: {
      description: 'Get header and body of a relay chain block',
      params: [{
        name: 'hash',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'SignedBlock'
    },
    getBlockHash: {
      description: 'Get the block hash for a specific block',
      params: [{
        name: 'blockNumber',
        type: 'BlockNumber',
        isOptional: true
      }],
      type: 'BlockHash'
    },
    getFinalizedHead: {
      alias: ['chain_getFinalisedHead'],
      description: 'Get hash of the last finalized block in the canon chain',
      params: [],
      type: 'BlockHash'
    },
    subscribeNewHeads: {
      alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
      description: 'Retrieves the best header via subscription',
      params: [],
      // NOTE These still has the aliassed version, compatible with 1.x
      pubsub: ['newHead', 'subscribeNewHead', 'unsubscribeNewHead'],
      type: 'Header'
    },
    subscribeFinalizedHeads: {
      alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
      description: 'Retrieves the best finalized header via subscription',
      params: [],
      pubsub: ['finalizedHead', 'subscribeFinalizedHeads', 'unsubscribeFinalizedHeads'],
      type: 'Header'
    },
    subscribeAllHeads: {
      description: 'Retrieves the newest header via subscription',
      params: [],
      pubsub: ['allHead', 'subscribeAllHeads', 'unsubscribeAllHeads'],
      type: 'Header'
    }
  },
  types: {
    BlockHash: 'Hash'
  }
};
exports.default = _default;

},{}],323:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    getKeys: {
      description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'prefix',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getKeysPaged: {
      alias: ['childstate_getKeysPagedAt'],
      description: 'Returns the keys with prefix from a child storage with pagination support',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'prefix',
        type: 'StorageKey'
      }, {
        name: 'count',
        type: 'u32'
      }, {
        name: 'startKey',
        type: 'StorageKey',
        isOptional: true
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getStorage: {
      description: 'Returns a child storage entry at a specific block state',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Option<StorageData>'
    },
    getStorageEntries: {
      description: 'Returns child storage entries for multiple keys at a specific block state',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<Option<StorageData>>'
    },
    getStorageHash: {
      description: 'Returns the hash of a child storage entry at a block state',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Option<Hash>'
    },
    getStorageSize: {
      description: 'Returns the size of a child storage entry at a block state',
      params: [{
        name: 'childKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'Hash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Option<u64>'
    }
  },
  types: {
    // StorageKey extends Bytes
    PrefixedStorageKey: 'StorageKey'
  }
};
exports.default = _default;

},{}],324:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    StatementKind: {
      _enum: ['Regular', 'Saft']
    }
  }
};
exports.default = _default;

},{}],325:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    CollectiveOrigin: {
      _enum: {
        Members: '(MemberCount, MemberCount)',
        Member: 'AccountId'
      }
    },
    MemberCount: 'u32',
    ProposalIndex: 'u32',
    VotesTo230: {
      index: 'ProposalIndex',
      threshold: 'MemberCount',
      ayes: 'Vec<AccountId>',
      nays: 'Vec<AccountId>'
    },
    Votes: {
      index: 'ProposalIndex',
      threshold: 'MemberCount',
      ayes: 'Vec<AccountId>',
      nays: 'Vec<AccountId>',
      end: 'BlockNumber'
    }
  }
};
exports.default = _default;

},{}],326:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    AuthorityId: 'AccountId',
    RawVRFOutput: '[u8; 32]'
  }
};
exports.default = _default;

},{}],327:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rpc = _interopRequireDefault(require("./rpc.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: _rpc.default,
  types: {
    AliveContractInfo: {
      trieId: 'TrieId',
      storageSize: 'u32',
      pairCount: 'u32',
      codeHash: 'CodeHash',
      rentAllowance: 'Balance',
      rentPaid: 'Balance',
      deductBlock: 'BlockNumber',
      lastWrite: 'Option<BlockNumber>',
      _reserved: 'Option<Null>'
    },
    CodeHash: 'Hash',
    ContractCallRequest: {
      origin: 'AccountId',
      dest: 'AccountId',
      value: 'Balance',
      gasLimit: 'u64',
      inputData: 'Bytes'
    },
    ContractExecResultSuccessTo255: {
      status: 'u8',
      data: 'Raw'
    },
    ContractExecResultTo255: {
      _enum: {
        Success: 'ContractExecResultSuccessTo255',
        Error: 'Null'
      }
    },
    ContractExecResultSuccessTo260: {
      flags: 'u32',
      data: 'Bytes',
      gasConsumed: 'u64'
    },
    ContractExecResultTo260: {
      _enum: {
        Success: 'ContractExecResultSuccessTo260',
        Error: 'Null'
      }
    },
    ContractExecResultErrModule: {
      index: 'u8',
      error: 'u8',
      message: 'Option<Text>'
    },
    ContractExecResultErr: {
      _enum: {
        Other: 'Text',
        CannotLookup: 'Null',
        BadOrigin: 'Null',
        Module: 'ContractExecResultErrModule'
      }
    },
    ContractExecResultOk: {
      flags: 'u32',
      data: 'Bytes'
    },
    ContractExecResultResult: {
      _enum: {
        Ok: 'ContractExecResultOk',
        Err: 'ContractExecResultErr'
      }
    },
    ContractExecResultTo267: {
      gasConsumed: 'u64',
      debugMessage: 'Text',
      result: 'ContractExecResultResult'
    },
    ContractExecResult: {
      gasConsumed: 'u64',
      gasRequired: 'u64',
      debugMessage: 'Text',
      result: 'ContractExecResultResult'
    },
    ContractInfo: {
      _enum: {
        Alive: 'AliveContractInfo',
        Tombstone: 'TombstoneContractInfo'
      }
    },
    ContractStorageKey: '[u8; 32]',
    DeletedContract: {
      pairCount: 'u32',
      trieId: 'TrieId'
    },
    ExecReturnValue: {
      flags: 'u32',
      data: 'Bytes'
    },
    Gas: 'u64',
    HostFnWeightsTo264: {
      caller: 'Weight',
      address: 'Weight',
      gasLeft: 'Weight',
      balance: 'Weight',
      valueTransferred: 'Weight',
      minimumBalance: 'Weight',
      tombstoneDeposit: 'Weight',
      rentAllowance: 'Weight',
      blockNumber: 'Weight',
      now: 'Weight',
      weightToFee: 'Weight',
      gas: 'Weight',
      input: 'Weight',
      inputPerByte: 'Weight',
      return: 'Weight',
      returnPerByte: 'Weight',
      terminate: 'Weight',
      restoreTo: 'Weight',
      restoreToPerDelta: 'Weight',
      random: 'Weight',
      depositEvent: 'Weight',
      depositEventPerTopic: 'Weight',
      depositEventPerByte: 'Weight',
      setRentAllowance: 'Weight',
      setStorage: 'Weight',
      setStoragePerByte: 'Weight',
      clearStorage: 'Weight',
      getStorage: 'Weight',
      getStoragePerByte: 'Weight',
      transfer: 'Weight',
      call: 'Weight',
      callTransferSurcharge: 'Weight',
      callPerInputByte: 'Weight',
      callPerOutputByte: 'Weight',
      instantiate: 'Weight',
      instantiatePerInputByte: 'Weight',
      instantiatePerOutputByte: 'Weight',
      hashSha2256: 'Weight',
      hashSha2256PerByte: 'Weight',
      hashKeccak256: 'Weight',
      hashKeccak256PerByte: 'Weight',
      hashBlake2256: 'Weight',
      hashBlake2256PerByte: 'Weight',
      hashBlake2128: 'Weight',
      hashBlake2128PerByte: 'Weight'
    },
    HostFnWeights: {
      caller: 'Weight',
      address: 'Weight',
      gasLeft: 'Weight',
      balance: 'Weight',
      valueTransferred: 'Weight',
      minimumBalance: 'Weight',
      tombstoneDeposit: 'Weight',
      rentAllowance: 'Weight',
      blockNumber: 'Weight',
      now: 'Weight',
      weightToFee: 'Weight',
      gas: 'Weight',
      input: 'Weight',
      inputPerByte: 'Weight',
      return: 'Weight',
      returnPerByte: 'Weight',
      terminate: 'Weight',
      terminatePerCodeByte: 'Weight',
      restoreTo: 'Weight',
      restoreToPerCallerCodeByte: 'Weight',
      restoreToPerTombstoneCodeByte: 'Weight',
      restoreToPerDelta: 'Weight',
      random: 'Weight',
      depositEvent: 'Weight',
      depositEventPerTopic: 'Weight',
      depositEventPerByte: 'Weight',
      setRentAllowance: 'Weight',
      setStorage: 'Weight',
      setStoragePerByte: 'Weight',
      clearStorage: 'Weight',
      getStorage: 'Weight',
      getStoragePerByte: 'Weight',
      transfer: 'Weight',
      call: 'Weight',
      callPerCodeByte: 'Weight',
      callTransferSurcharge: 'Weight',
      callPerInputByte: 'Weight',
      callPerOutputByte: 'Weight',
      instantiate: 'Weight',
      instantiatePerCodeByte: 'Weight',
      instantiatePerInputByte: 'Weight',
      instantiatePerOutputByte: 'Weight',
      instantiatePerSaltByte: 'Weight',
      hashSha2256: 'Weight',
      hashSha2256PerByte: 'Weight',
      hashKeccak256: 'Weight',
      hashKeccak256PerByte: 'Weight',
      hashBlake2256: 'Weight',
      hashBlake2256PerByte: 'Weight',
      hashBlake2128: 'Weight',
      hashBlake2128PerByte: 'Weight',
      rentParams: 'Weight'
    },
    InstantiateRequest: {
      origin: 'AccountId',
      endowment: 'Balance',
      gasLimit: 'Gas',
      code: 'Bytes',
      data: 'Bytes',
      salt: 'Bytes'
    },
    ContractInstantiateResultTo267: {
      _enum: {
        Ok: 'InstantiateReturnValueTo267',
        Err: 'Null'
      }
    },
    ContractInstantiateResult: {
      _enum: {
        Ok: 'InstantiateReturnValue',
        Err: 'Null'
      }
    },
    InstantiateReturnValueTo267: {
      result: 'ExecReturnValue',
      accountId: 'AccountId',
      rentProjection: 'Option<RentProjection>'
    },
    InstantiateReturnValue: {
      _fallback: 'InstantiateReturnValueTo267',
      result: 'ExecReturnValue',
      accountId: 'AccountId'
    },
    InstructionWeights: {
      i64const: 'u32',
      i64load: 'u32',
      i64store: 'u32',
      select: 'u32',
      rIf: 'u32',
      br: 'u32',
      brIf: 'u32',
      brIable: 'u32',
      brIablePerEntry: 'u32',
      call: 'u32',
      callIndirect: 'u32',
      callIndirectPerParam: 'u32',
      localGet: 'u32',
      localSet: 'u32',
      local_tee: 'u32',
      globalGet: 'u32',
      globalSet: 'u32',
      memoryCurrent: 'u32',
      memoryGrow: 'u32',
      i64clz: 'u32',
      i64ctz: 'u32',
      i64popcnt: 'u32',
      i64eqz: 'u32',
      i64extendsi32: 'u32',
      i64extendui32: 'u32',
      i32wrapi64: 'u32',
      i64eq: 'u32',
      i64ne: 'u32',
      i64lts: 'u32',
      i64ltu: 'u32',
      i64gts: 'u32',
      i64gtu: 'u32',
      i64les: 'u32',
      i64leu: 'u32',
      i64ges: 'u32',
      i64geu: 'u32',
      i64add: 'u32',
      i64sub: 'u32',
      i64mul: 'u32',
      i64divs: 'u32',
      i64divu: 'u32',
      i64rems: 'u32',
      i64remu: 'u32',
      i64and: 'u32',
      i64or: 'u32',
      i64xor: 'u32',
      i64shl: 'u32',
      i64shrs: 'u32',
      i64shru: 'u32',
      i64rotl: 'u32',
      i64rotr: 'u32'
    },
    LimitsTo264: {
      eventTopics: 'u32',
      stackHeight: 'u32',
      globals: 'u32',
      parameters: 'u32',
      memoryPages: 'u32',
      tableSize: 'u32',
      brTableSize: 'u32',
      subjectLen: 'u32',
      codeSize: 'u32'
    },
    Limits: {
      eventTopics: 'u32',
      stackHeight: 'u32',
      globals: 'u32',
      parameters: 'u32',
      memoryPages: 'u32',
      tableSize: 'u32',
      brTableSize: 'u32',
      subjectLen: 'u32'
    },
    PrefabWasmModule: {
      scheduleVersion: 'Compact<u32>',
      initial: 'Compact<u32>',
      maximum: 'Compact<u32>',
      refcount: 'Compact<u64>',
      _reserved: 'Option<Null>',
      code: 'Bytes',
      originalCodeLen: 'u32'
    },
    RentProjection: {
      _enum: {
        EvictionAt: 'BlockNumber',
        NoEviction: 'Null'
      }
    },
    ScheduleTo212: {
      version: 'u32',
      putCodePerByteCost: 'Gas',
      growMemCost: 'Gas',
      regularOpCost: 'Gas',
      returnDataPerByteCost: 'Gas',
      eventDataPerByteCost: 'Gas',
      eventPerTopicCost: 'Gas',
      eventBaseCost: 'Gas',
      sandboxDataReadCost: 'Gas',
      sandboxDataWriteCost: 'Gas',
      maxEventTopics: 'u32',
      maxStackHeight: 'u32',
      maxMemoryPages: 'u32',
      enablePrintln: 'bool',
      maxSubjectLen: 'u32'
    },
    ScheduleTo258: {
      version: 'u32',
      putCodePerByteCost: 'Gas',
      growMemCost: 'Gas',
      regularOpCost: 'Gas',
      returnDataPerByteCost: 'Gas',
      eventDataPerByteCost: 'Gas',
      eventPerTopicCost: 'Gas',
      eventBaseCost: 'Gas',
      sandboxDataReadCost: 'Gas',
      sandboxDataWriteCost: 'Gas',
      transferCost: 'Gas',
      maxEventTopics: 'u32',
      maxStackHeight: 'u32',
      maxMemoryPages: 'u32',
      enablePrintln: 'bool',
      maxSubjectLen: 'u32'
    },
    ScheduleTo264: {
      version: 'u32',
      enablePrintln: 'bool',
      limits: 'LimitsTo264',
      instructionWeights: 'InstructionWeights',
      hostFnWeights: 'HostFnWeightsTo264'
    },
    Schedule: {
      version: 'u32',
      enablePrintln: 'bool',
      limits: 'Limits',
      instructionWeights: 'InstructionWeights',
      hostFnWeights: 'HostFnWeights'
    },
    SeedOf: 'Hash',
    TombstoneContractInfo: 'Hash',
    TrieId: 'Bytes'
  }
};
exports.default = _default;

},{"./rpc.js":328}],328:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  call: {
    description: 'Executes a call to a contract',
    params: [{
      name: 'callRequest',
      type: 'ContractCallRequest'
    }, {
      name: 'at',
      type: 'BlockHash',
      isHistoric: true,
      isOptional: true
    }],
    type: 'ContractExecResult'
  },
  instantiate: {
    description: 'Instantiate a new contract',
    params: [{
      name: 'request',
      type: 'InstantiateRequest'
    }, {
      name: 'at',
      type: 'BlockHash',
      isHstoric: true,
      isOptional: true
    }],
    type: 'ContractInstantiateResult'
  },
  getStorage: {
    description: 'Returns the value under a specified storage key in a contract',
    params: [{
      name: 'address',
      type: 'AccountId'
    }, {
      name: 'key',
      type: 'H256'
    }, {
      name: 'at',
      type: 'BlockHash',
      isHistoric: true,
      isOptional: true
    }],
    type: 'Option<Bytes>'
  },
  rentProjection: {
    description: 'Returns the projected time a given contract will be able to sustain paying its rent',
    params: [{
      name: 'address',
      type: 'AccountId'
    }, {
      name: 'at',
      type: 'BlockHash',
      isHistoric: true,
      isOptional: true
    }],
    type: 'Option<BlockNumber>'
  }
};
exports.default = _default;

},{}],329:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const layout = {
  ContractCryptoHasher: {
    _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
  },
  ContractDiscriminant: 'u32',
  ContractLayoutArray: {
    offset: 'ContractLayoutKey',
    len: 'u32',
    cellsPerElem: 'u64',
    layout: 'ContractStorageLayout'
  },
  ContractLayoutCell: {
    key: 'ContractLayoutKey',
    ty: 'SiLookupTypeId'
  },
  ContractLayoutEnum: {
    dispatchKey: 'ContractLayoutKey',
    variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
  },
  ContractLayoutHash: {
    offset: 'ContractLayoutKey',
    strategy: 'ContractLayoutHashingStrategy',
    layout: 'ContractStorageLayout'
  },
  ContractLayoutHashingStrategy: {
    hasher: 'ContractCryptoHasher',
    postfix: 'Vec<u8>',
    prefix: 'Vec<u8>'
  },
  ContractLayoutKey: '[u8; 32]',
  ContractLayoutStruct: {
    fields: 'Vec<ContractLayoutStructField>'
  },
  ContractLayoutStructField: {
    layout: 'ContractStorageLayout',
    name: 'Text'
  },
  ContractStorageLayout: {
    _enum: {
      Cell: 'ContractLayoutCell',
      Hash: 'ContractLayoutHash',
      Array: 'ContractLayoutArray',
      Struct: 'ContractLayoutStruct',
      Enum: 'ContractLayoutEnum'
    }
  }
};
const spec = {
  ContractConstructorSpecV0: {
    name: 'Text',
    selector: 'ContractSelector',
    args: 'Vec<ContractMessageParamSpecV0>',
    docs: 'Vec<Text>'
  },
  ContractConstructorSpecV2: {
    label: 'Text',
    selector: 'ContractSelector',
    args: 'Vec<ContractMessageParamSpecV2>',
    docs: 'Vec<Text>'
  },
  ContractContractSpecV0: {
    constructors: 'Vec<ContractConstructorSpecV0>',
    messages: 'Vec<ContractMessageSpecV0>',
    events: 'Vec<ContractEventSpecV0>',
    docs: 'Vec<Text>'
  },
  ContractContractSpecV2: {
    constructors: 'Vec<ContractConstructorSpecV2>',
    messages: 'Vec<ContractMessageSpecV2>',
    events: 'Vec<ContractEventSpecV2>',
    docs: 'Vec<Text>'
  },
  ContractDisplayName: 'SiPath',
  ContractEventParamSpecV0: {
    name: 'Text',
    indexed: 'bool',
    type: 'ContractTypeSpec',
    docs: 'Vec<Text>'
  },
  ContractEventParamSpecV2: {
    label: 'Text',
    indexed: 'bool',
    type: 'ContractTypeSpec',
    docs: 'Vec<Text>'
  },
  ContractEventSpecV0: {
    name: 'Text',
    args: 'Vec<ContractEventParamSpecV0>',
    docs: 'Vec<Text>'
  },
  ContractEventSpecV2: {
    label: 'Text',
    args: 'Vec<ContractEventParamSpecV2>',
    docs: 'Vec<Text>'
  },
  ContractMessageParamSpecV0: {
    name: 'Text',
    type: 'ContractTypeSpec'
  },
  ContractMessageParamSpecV2: {
    label: 'Text',
    type: 'ContractTypeSpec'
  },
  ContractMessageSpecV0: {
    name: 'Text',
    selector: 'ContractSelector',
    mutates: 'bool',
    payable: 'bool',
    args: 'Vec<ContractMessageParamSpecV0>',
    returnType: 'Option<ContractTypeSpec>',
    docs: 'Vec<Text>'
  },
  ContractMessageSpecV2: {
    label: 'Text',
    selector: 'ContractSelector',
    mutates: 'bool',
    payable: 'bool',
    args: 'Vec<ContractMessageParamSpecV2>',
    returnType: 'Option<ContractTypeSpec>',
    docs: 'Vec<Text>'
  },
  ContractSelector: '[u8; 4]',
  ContractTypeSpec: {
    type: 'SiLookupTypeId',
    displayName: 'ContractDisplayName'
  }
};
const ContractMetadataV0 = {
  types: 'Vec<Si0Type>',
  spec: 'ContractContractSpecV0'
};
const ContractMetadataV1 = {
  types: 'Vec<PortableType>',
  spec: 'ContractContractSpecV0'
};
const ContractMetadataV2 = {
  types: 'Vec<PortableType>',
  spec: 'ContractContractSpecV2'
};
const ContractProjectInfo = {
  source: 'ContractProjectSource',
  contract: 'ContractProjectContract'
};
const latest = {
  ContractConstructorSpecLatest: 'ContractConstructorSpecV2',
  ContractEventSpecLatest: 'ContractEventSpecV2',
  ContractEventParamSpecLatest: 'ContractEventParamSpecV2',
  ContractMessageParamSpecLatest: 'ContractMessageParamSpecV2',
  ContractMessageSpecLatest: 'ContractMessageSpecV2',
  ContractMetadataLatest: 'ContractMetadataV2'
};
var _default = {
  rpc: {},
  types: (0, _util.objectSpread)({}, layout, spec, latest, {
    ContractProjectInfo,
    ContractMetadataV0,
    ContractMetadataV1,
    ContractMetadataV2,
    ContractMetadata: {
      _enum: {
        V0: 'ContractMetadataV0',
        V1: 'ContractMetadataV1',
        V2: 'ContractMetadataV2'
      }
    },
    ContractProjectV0: (0, _util.objectSpread)({
      metadataVersion: 'Text'
    }, ContractProjectInfo, ContractMetadataV0),
    ContractProject: '(ContractProjectInfo, ContractMetadata)',
    ContractProjectContract: {
      _alias: {
        docs: 'documentation'
      },
      name: 'Text',
      version: 'Text',
      authors: 'Vec<Text>',
      description: 'Option<Text>',
      docs: 'Option<Text>',
      repository: 'Option<Text>',
      homepage: 'Option<Text>',
      license: 'Option<Text>'
    },
    ContractProjectSource: {
      _alias: {
        wasmHash: 'hash'
      },
      wasmHash: '[u8; 32]',
      language: 'Text',
      compiler: 'Text',
      wasm: 'Raw'
    }
  })
};
exports.default = _default;

},{"@polkadot/util":640}],330:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    FundIndex: 'u32',
    LastContribution: {
      _enum: {
        Never: 'Null',
        PreEnding: 'u32',
        Ending: 'BlockNumber'
      }
    },
    FundInfo: {
      depositor: 'AccountId',
      verifier: 'Option<MultiSigner>',
      deposit: 'Balance',
      raised: 'Balance',
      end: 'BlockNumber',
      cap: 'Balance',
      lastContribution: 'LastContribution',
      firstPeriod: 'LeasePeriod',
      lastPeriod: 'LeasePeriod',
      trieIndex: 'TrieIndex'
    },
    TrieIndex: 'u32'
  }
};
exports.default = _default;

},{}],331:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const dmpQueue = {
  ConfigData: {
    maxIndividual: 'Weight'
  },
  MessageId: '[u8; 32]',
  OverweightIndex: 'u64',
  PageCounter: 'u32',
  PageIndexData: {
    beginUsed: 'PageCounter',
    endUsed: 'PageCounter',
    overweightCount: 'OverweightIndex'
  }
};
var _default = {
  rpc: {},
  types: dmpQueue
};
exports.default = _default;

},{}],332:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  assets: true,
  authorship: true,
  aura: true,
  babe: true,
  balances: true,
  beefy: true,
  collective: true,
  consensus: true,
  contracts: true,
  democracy: true,
  elections: true,
  engine: true,
  evm: true,
  extrinsics: true,
  genericAsset: true,
  gilt: true,
  grandpa: true,
  identity: true,
  imOnline: true,
  lottery: true,
  mmr: true,
  offences: true,
  proxy: true,
  recovery: true,
  scheduler: true,
  session: true,
  society: true,
  staking: true,
  support: true,
  syncstate: true,
  system: true,
  treasury: true,
  txpayment: true,
  uniques: true,
  utility: true,
  vesting: true,
  attestations: true,
  bridges: true,
  claims: true,
  crowdloan: true,
  cumulus: true,
  parachains: true,
  poll: true,
  purchase: true,
  xcm: true,
  contractsAbi: true,
  eth: true,
  rpc: true,
  author: true,
  chain: true,
  childstate: true,
  offchain: true,
  payment: true,
  state: true
};
Object.defineProperty(exports, "assets", {
  enumerable: true,
  get: function () {
    return _definitions.default;
  }
});
Object.defineProperty(exports, "attestations", {
  enumerable: true,
  get: function () {
    return _definitions37.default;
  }
});
Object.defineProperty(exports, "aura", {
  enumerable: true,
  get: function () {
    return _definitions3.default;
  }
});
Object.defineProperty(exports, "author", {
  enumerable: true,
  get: function () {
    return _definitions49.default;
  }
});
Object.defineProperty(exports, "authorship", {
  enumerable: true,
  get: function () {
    return _definitions2.default;
  }
});
Object.defineProperty(exports, "babe", {
  enumerable: true,
  get: function () {
    return _definitions4.default;
  }
});
Object.defineProperty(exports, "balances", {
  enumerable: true,
  get: function () {
    return _definitions5.default;
  }
});
Object.defineProperty(exports, "beefy", {
  enumerable: true,
  get: function () {
    return _definitions6.default;
  }
});
Object.defineProperty(exports, "bridges", {
  enumerable: true,
  get: function () {
    return _definitions38.default;
  }
});
Object.defineProperty(exports, "chain", {
  enumerable: true,
  get: function () {
    return _definitions50.default;
  }
});
Object.defineProperty(exports, "childstate", {
  enumerable: true,
  get: function () {
    return _definitions51.default;
  }
});
Object.defineProperty(exports, "claims", {
  enumerable: true,
  get: function () {
    return _definitions39.default;
  }
});
Object.defineProperty(exports, "collective", {
  enumerable: true,
  get: function () {
    return _definitions7.default;
  }
});
Object.defineProperty(exports, "consensus", {
  enumerable: true,
  get: function () {
    return _definitions8.default;
  }
});
Object.defineProperty(exports, "contracts", {
  enumerable: true,
  get: function () {
    return _definitions9.default;
  }
});
Object.defineProperty(exports, "contractsAbi", {
  enumerable: true,
  get: function () {
    return _definitions46.default;
  }
});
Object.defineProperty(exports, "crowdloan", {
  enumerable: true,
  get: function () {
    return _definitions40.default;
  }
});
Object.defineProperty(exports, "cumulus", {
  enumerable: true,
  get: function () {
    return _definitions41.default;
  }
});
Object.defineProperty(exports, "democracy", {
  enumerable: true,
  get: function () {
    return _definitions10.default;
  }
});
Object.defineProperty(exports, "elections", {
  enumerable: true,
  get: function () {
    return _definitions11.default;
  }
});
Object.defineProperty(exports, "engine", {
  enumerable: true,
  get: function () {
    return _definitions12.default;
  }
});
Object.defineProperty(exports, "eth", {
  enumerable: true,
  get: function () {
    return _definitions47.default;
  }
});
Object.defineProperty(exports, "evm", {
  enumerable: true,
  get: function () {
    return _definitions13.default;
  }
});
Object.defineProperty(exports, "extrinsics", {
  enumerable: true,
  get: function () {
    return _definitions14.default;
  }
});
Object.defineProperty(exports, "genericAsset", {
  enumerable: true,
  get: function () {
    return _definitions15.default;
  }
});
Object.defineProperty(exports, "gilt", {
  enumerable: true,
  get: function () {
    return _definitions16.default;
  }
});
Object.defineProperty(exports, "grandpa", {
  enumerable: true,
  get: function () {
    return _definitions17.default;
  }
});
Object.defineProperty(exports, "identity", {
  enumerable: true,
  get: function () {
    return _definitions18.default;
  }
});
Object.defineProperty(exports, "imOnline", {
  enumerable: true,
  get: function () {
    return _definitions19.default;
  }
});
Object.defineProperty(exports, "lottery", {
  enumerable: true,
  get: function () {
    return _definitions20.default;
  }
});
Object.defineProperty(exports, "mmr", {
  enumerable: true,
  get: function () {
    return _definitions21.default;
  }
});
Object.defineProperty(exports, "offchain", {
  enumerable: true,
  get: function () {
    return _definitions52.default;
  }
});
Object.defineProperty(exports, "offences", {
  enumerable: true,
  get: function () {
    return _definitions22.default;
  }
});
Object.defineProperty(exports, "parachains", {
  enumerable: true,
  get: function () {
    return _definitions42.default;
  }
});
Object.defineProperty(exports, "payment", {
  enumerable: true,
  get: function () {
    return _definitions53.default;
  }
});
Object.defineProperty(exports, "poll", {
  enumerable: true,
  get: function () {
    return _definitions43.default;
  }
});
Object.defineProperty(exports, "proxy", {
  enumerable: true,
  get: function () {
    return _definitions23.default;
  }
});
Object.defineProperty(exports, "purchase", {
  enumerable: true,
  get: function () {
    return _definitions44.default;
  }
});
Object.defineProperty(exports, "recovery", {
  enumerable: true,
  get: function () {
    return _definitions24.default;
  }
});
Object.defineProperty(exports, "rpc", {
  enumerable: true,
  get: function () {
    return _definitions48.default;
  }
});
Object.defineProperty(exports, "scheduler", {
  enumerable: true,
  get: function () {
    return _definitions25.default;
  }
});
Object.defineProperty(exports, "session", {
  enumerable: true,
  get: function () {
    return _definitions26.default;
  }
});
Object.defineProperty(exports, "society", {
  enumerable: true,
  get: function () {
    return _definitions27.default;
  }
});
Object.defineProperty(exports, "staking", {
  enumerable: true,
  get: function () {
    return _definitions28.default;
  }
});
Object.defineProperty(exports, "state", {
  enumerable: true,
  get: function () {
    return _definitions54.default;
  }
});
Object.defineProperty(exports, "support", {
  enumerable: true,
  get: function () {
    return _definitions29.default;
  }
});
Object.defineProperty(exports, "syncstate", {
  enumerable: true,
  get: function () {
    return _definitions30.default;
  }
});
Object.defineProperty(exports, "system", {
  enumerable: true,
  get: function () {
    return _definitions31.default;
  }
});
Object.defineProperty(exports, "treasury", {
  enumerable: true,
  get: function () {
    return _definitions32.default;
  }
});
Object.defineProperty(exports, "txpayment", {
  enumerable: true,
  get: function () {
    return _definitions33.default;
  }
});
Object.defineProperty(exports, "uniques", {
  enumerable: true,
  get: function () {
    return _definitions34.default;
  }
});
Object.defineProperty(exports, "utility", {
  enumerable: true,
  get: function () {
    return _definitions35.default;
  }
});
Object.defineProperty(exports, "vesting", {
  enumerable: true,
  get: function () {
    return _definitions36.default;
  }
});
Object.defineProperty(exports, "xcm", {
  enumerable: true,
  get: function () {
    return _definitions45.default;
  }
});

var _essentials = require("./essentials.js");

Object.keys(_essentials).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _essentials[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _essentials[key];
    }
  });
});

var _definitions = _interopRequireDefault(require("./assets/definitions.js"));

var _definitions2 = _interopRequireDefault(require("./authorship/definitions.js"));

var _definitions3 = _interopRequireDefault(require("./aura/definitions.js"));

var _definitions4 = _interopRequireDefault(require("./babe/definitions.js"));

var _definitions5 = _interopRequireDefault(require("./balances/definitions.js"));

var _definitions6 = _interopRequireDefault(require("./beefy/definitions.js"));

var _definitions7 = _interopRequireDefault(require("./collective/definitions.js"));

var _definitions8 = _interopRequireDefault(require("./consensus/definitions.js"));

var _definitions9 = _interopRequireDefault(require("./contracts/definitions.js"));

var _definitions10 = _interopRequireDefault(require("./democracy/definitions.js"));

var _definitions11 = _interopRequireDefault(require("./elections/definitions.js"));

var _definitions12 = _interopRequireDefault(require("./engine/definitions.js"));

var _definitions13 = _interopRequireDefault(require("./evm/definitions.js"));

var _definitions14 = _interopRequireDefault(require("./extrinsics/definitions.js"));

var _definitions15 = _interopRequireDefault(require("./genericAsset/definitions.js"));

var _definitions16 = _interopRequireDefault(require("./gilt/definitions.js"));

var _definitions17 = _interopRequireDefault(require("./grandpa/definitions.js"));

var _definitions18 = _interopRequireDefault(require("./identity/definitions.js"));

var _definitions19 = _interopRequireDefault(require("./imOnline/definitions.js"));

var _definitions20 = _interopRequireDefault(require("./lottery/definitions.js"));

var _definitions21 = _interopRequireDefault(require("./mmr/definitions.js"));

var _definitions22 = _interopRequireDefault(require("./offences/definitions.js"));

var _definitions23 = _interopRequireDefault(require("./proxy/definitions.js"));

var _definitions24 = _interopRequireDefault(require("./recovery/definitions.js"));

var _definitions25 = _interopRequireDefault(require("./scheduler/definitions.js"));

var _definitions26 = _interopRequireDefault(require("./session/definitions.js"));

var _definitions27 = _interopRequireDefault(require("./society/definitions.js"));

var _definitions28 = _interopRequireDefault(require("./staking/definitions.js"));

var _definitions29 = _interopRequireDefault(require("./support/definitions.js"));

var _definitions30 = _interopRequireDefault(require("./syncstate/definitions.js"));

var _definitions31 = _interopRequireDefault(require("./system/definitions.js"));

var _definitions32 = _interopRequireDefault(require("./treasury/definitions.js"));

var _definitions33 = _interopRequireDefault(require("./txpayment/definitions.js"));

var _definitions34 = _interopRequireDefault(require("./uniques/definitions.js"));

var _definitions35 = _interopRequireDefault(require("./utility/definitions.js"));

var _definitions36 = _interopRequireDefault(require("./vesting/definitions.js"));

var _definitions37 = _interopRequireDefault(require("./attestations/definitions.js"));

var _definitions38 = _interopRequireDefault(require("./bridges/definitions.js"));

var _definitions39 = _interopRequireDefault(require("./claims/definitions.js"));

var _definitions40 = _interopRequireDefault(require("./crowdloan/definitions.js"));

var _definitions41 = _interopRequireDefault(require("./cumulus/definitions.js"));

var _definitions42 = _interopRequireDefault(require("./parachains/definitions.js"));

var _definitions43 = _interopRequireDefault(require("./poll/definitions.js"));

var _definitions44 = _interopRequireDefault(require("./purchase/definitions.js"));

var _definitions45 = _interopRequireDefault(require("./xcm/definitions.js"));

var _definitions46 = _interopRequireDefault(require("./contractsAbi/definitions.js"));

var _definitions47 = _interopRequireDefault(require("./eth/definitions.js"));

var _definitions48 = _interopRequireDefault(require("./rpc/definitions.js"));

var _definitions49 = _interopRequireDefault(require("./author/definitions.js"));

var _definitions50 = _interopRequireDefault(require("./chain/definitions.js"));

var _definitions51 = _interopRequireDefault(require("./childstate/definitions.js"));

var _definitions52 = _interopRequireDefault(require("./offchain/definitions.js"));

var _definitions53 = _interopRequireDefault(require("./payment/definitions.js"));

var _definitions54 = _interopRequireDefault(require("./state/definitions.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"./assets/definitions.js":313,"./attestations/definitions.js":314,"./aura/definitions.js":315,"./author/definitions.js":316,"./authorship/definitions.js":317,"./babe/definitions.js":318,"./balances/definitions.js":319,"./beefy/definitions.js":320,"./bridges/definitions.js":321,"./chain/definitions.js":322,"./childstate/definitions.js":323,"./claims/definitions.js":324,"./collective/definitions.js":325,"./consensus/definitions.js":326,"./contracts/definitions.js":327,"./contractsAbi/definitions.js":329,"./crowdloan/definitions.js":330,"./cumulus/definitions.js":331,"./democracy/definitions.js":333,"./elections/definitions.js":334,"./engine/definitions.js":335,"./essentials.js":336,"./eth/definitions.js":337,"./evm/definitions.js":339,"./extrinsics/definitions.js":340,"./genericAsset/definitions.js":341,"./gilt/definitions.js":342,"./grandpa/definitions.js":343,"./identity/definitions.js":344,"./imOnline/definitions.js":345,"./lottery/definitions.js":347,"./mmr/definitions.js":356,"./offchain/definitions.js":357,"./offences/definitions.js":358,"./parachains/definitions.js":359,"./payment/definitions.js":362,"./poll/definitions.js":363,"./proxy/definitions.js":364,"./purchase/definitions.js":365,"./recovery/definitions.js":366,"./rpc/definitions.js":367,"./scheduler/definitions.js":372,"./session/definitions.js":373,"./society/definitions.js":374,"./staking/definitions.js":375,"./state/definitions.js":376,"./support/definitions.js":377,"./syncstate/definitions.js":378,"./system/definitions.js":379,"./treasury/definitions.js":380,"./txpayment/definitions.js":381,"./uniques/definitions.js":382,"./utility/definitions.js":383,"./vesting/definitions.js":384,"./xcm/definitions.js":385}],333:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AllConvictions = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const AllConvictions = [// 0.1x votes, unlocked.
'None', // 1x votes, locked for an enactment period following a successful vote.
'Locked1x', // 2x votes, locked for 2x enactment periods following a successful vote.
'Locked2x', // 3x votes, locked for 4x...
'Locked3x', // 4x votes, locked for 8x...
'Locked4x', // 5x votes, locked for 16x...
'Locked5x', /// 6x votes, locked for 32x...
'Locked6x'];
exports.AllConvictions = AllConvictions;
var _default = {
  rpc: {},
  types: {
    AccountVote: {
      _enum: {
        Standard: 'AccountVoteStandard',
        Split: 'AccountVoteSplit'
      }
    },
    AccountVoteSplit: {
      aye: 'Balance',
      nay: 'Balance'
    },
    AccountVoteStandard: {
      vote: 'Vote',
      balance: 'Balance'
    },
    Conviction: {
      _enum: AllConvictions
    },
    Delegations: {
      votes: 'Balance',
      capital: 'Balance'
    },
    PreimageStatus: {
      _enum: {
        Missing: 'BlockNumber',
        Available: 'PreimageStatusAvailable'
      }
    },
    PreimageStatusAvailable: {
      data: 'Bytes',
      provider: 'AccountId',
      deposit: 'Balance',
      since: 'BlockNumber',
      expiry: 'Option<BlockNumber>'
    },
    PriorLock: '(BlockNumber, Balance)',
    PropIndex: 'u32',
    Proposal: 'Call',
    ProxyState: {
      _enum: {
        Open: 'AccountId',
        Active: 'AccountId'
      }
    },
    ReferendumIndex: 'u32',
    ReferendumInfoTo239: {
      end: 'BlockNumber',
      proposalHash: 'Hash',
      threshold: 'VoteThreshold',
      delay: 'BlockNumber'
    },
    ReferendumInfo: {
      _enum: {
        Ongoing: 'ReferendumStatus',
        Finished: 'ReferendumInfoFinished'
      }
    },
    ReferendumInfoFinished: {
      approved: 'bool',
      end: 'BlockNumber'
    },
    ReferendumStatus: {
      end: 'BlockNumber',
      proposalHash: 'Hash',
      threshold: 'VoteThreshold',
      delay: 'BlockNumber',
      tally: 'Tally'
    },
    Tally: {
      ayes: 'Balance',
      nays: 'Balance',
      turnout: 'Balance'
    },
    Voting: {
      _enum: {
        Direct: 'VotingDirect',
        Delegating: 'VotingDelegating'
      }
    },
    VotingDirect: {
      votes: 'Vec<VotingDirectVote>',
      delegations: 'Delegations',
      prior: 'PriorLock'
    },
    VotingDirectVote: '(ReferendumIndex, AccountVote)',
    VotingDelegating: {
      balance: 'Balance',
      target: 'AccountId',
      conviction: 'Conviction',
      delegations: 'Delegations',
      prior: 'PriorLock'
    }
  }
};
exports.default = _default;

},{}],334:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    ApprovalFlag: 'u32',
    DefunctVoter: {
      who: 'AccountId',
      voteCount: 'Compact<u32>',
      candidateCount: 'Compact<u32>'
    },
    Renouncing: {
      _enum: {
        Member: 'Null',
        RunnerUp: 'Null',
        Candidate: 'Compact<u32>'
      }
    },
    SetIndex: 'u32',
    Vote: 'GenericVote',
    VoteIndex: 'u32',
    VoterInfo: {
      lastActive: 'VoteIndex',
      lastWin: 'VoteIndex',
      pot: 'Balance',
      stake: 'Balance'
    },
    VoteThreshold: {
      _enum: ['Super Majority Approve', 'Super Majority Against', 'Simple Majority']
    }
  }
};
exports.default = _default;

},{}],335:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    createBlock: {
      description: 'Instructs the manual-seal authorship task to create a new block',
      params: [{
        name: 'createEmpty',
        type: 'bool'
      }, {
        name: 'finalize',
        type: 'bool'
      }, {
        name: 'parentHash',
        type: 'BlockHash',
        isOptional: true
      }],
      type: 'CreatedBlock'
    },
    finalizeBlock: {
      description: 'Instructs the manual-seal authorship task to finalize a block',
      params: [{
        name: 'hash',
        type: 'BlockHash'
      }, {
        name: 'justification',
        type: 'Justification',
        isOptional: true
      }],
      type: 'bool'
    }
  },
  types: {
    CreatedBlock: {
      hash: 'BlockHash',
      aux: 'ImportedAux'
    },
    ImportedAux: {
      headerOnly: 'bool',
      clearJustificationRequests: 'bool',
      needsJustification: 'bool',
      badJustification: 'bool',
      needsFinalityProof: 'bool',
      isNewBest: 'bool'
    }
  }
};
exports.default = _default;

},{}],336:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "metadata", {
  enumerable: true,
  get: function () {
    return _definitions.default;
  }
});
Object.defineProperty(exports, "runtime", {
  enumerable: true,
  get: function () {
    return _definitions2.default;
  }
});
Object.defineProperty(exports, "scaleInfo", {
  enumerable: true,
  get: function () {
    return _definitions3.default;
  }
});

var _definitions = _interopRequireDefault(require("./metadata/definitions.js"));

var _definitions2 = _interopRequireDefault(require("./runtime/definitions.js"));

var _definitions3 = _interopRequireDefault(require("./scaleInfo/definitions.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"./metadata/definitions.js":348,"./runtime/definitions.js":368,"./scaleInfo/definitions.js":369}],337:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _rpc = require("./rpc.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
// As per frontier
const V0 = {
  BlockV0: {
    header: 'EthHeader',
    transactions: 'Vec<TransactionV0>',
    ommers: 'Vec<EthHeader>'
  },
  LegacyTransaction: {
    nonce: 'U256',
    gasPrice: 'U256',
    gasLimit: 'U256',
    action: 'EthTransactionAction',
    value: 'U256',
    input: 'Bytes',
    signature: 'EthTransactionSignature'
  },
  TransactionV0: 'LegacyTransaction'
};
const V1 = {
  BlockV1: {
    header: 'EthHeader',
    transactions: 'Vec<TransactionV1>',
    ommers: 'Vec<EthHeader>'
  },
  EIP2930Transaction: {
    chainId: 'u64',
    nonce: 'U256',
    gasPrice: 'U256',
    gasLimit: 'U256',
    action: 'EthTransactionAction',
    value: 'U256',
    input: 'Bytes',
    accessList: 'EthAccessList',
    oddYParity: 'bool',
    r: 'H256',
    s: 'H256'
  },
  TransactionV1: {
    _enum: {
      Legacy: 'LegacyTransaction',
      EIP2930: 'EIP2930Transaction'
    }
  }
};
const V2 = {
  BlockV2: {
    header: 'EthHeader',
    transactions: 'Vec<TransactionV2>',
    ommers: 'Vec<EthHeader>'
  },
  EIP1559Transaction: {
    chainId: 'u64',
    nonce: 'U256',
    maxPriorityFeePerGas: 'U256',
    maxFeePerGas: 'U256',
    gasLimit: 'U256',
    action: 'EthTransactionAction',
    value: 'U256',
    input: 'Bytes',
    accessList: 'EthAccessList',
    oddYParity: 'bool',
    r: 'H256',
    s: 'H256'
  },
  TransactionV2: {
    _enum: {
      Legacy: 'LegacyTransaction',
      EIP2930: 'EIP2930Transaction',
      EIP1559: 'EIP1559Transaction'
    }
  }
};
const types = (0, _util.objectSpread)({}, V0, V1, V2, {
  EthereumAccountId: 'GenericEthereumAccountId',
  EthereumAddress: 'GenericEthereumAccountId',
  EthereumLookupSource: 'GenericEthereumLookupSource',
  EthereumSignature: '[u8; 65]',
  EthAccessListItem: {
    address: 'EthAddress',
    slots: 'Vec<H256>'
  },
  EthAccessList: 'Vec<EthAccessListItem>',
  EthAccount: {
    address: 'EthAddress',
    balance: 'U256',
    nonce: 'U256',
    codeHash: 'H256',
    storageHash: 'H256',
    accountProof: 'Vec<Bytes>',
    storageProof: 'Vec<EthStorageProof>'
  },
  EthAddress: 'H160',
  EthBlock: {
    header: 'EthHeader',
    transactions: 'Vec<EthTransaction>',
    ommers: 'Vec<EthHeader>'
  },
  EthHeader: {
    parentHash: 'H256',
    ommersHash: 'H256',
    beneficiary: 'EthAddress',
    stateRoot: 'H256',
    transactionsRoot: 'H256',
    receiptsRoot: 'H256',
    logsBloom: 'EthBloom',
    difficulty: 'U256',
    number: 'U256',
    gasLimit: 'U256',
    gasUsed: 'U256',
    timestamp: 'u64',
    extraData: 'Bytes',
    mixMash: 'H256',
    nonce: 'H64'
  },
  EthRichBlock: {
    _alias: {
      blockHash: 'hash',
      blockSize: 'size'
    },
    blockHash: 'Option<H256>',
    parentHash: 'H256',
    sha3Uncles: 'H256',
    author: 'EthAddress',
    miner: 'EthAddress',
    stateRoot: 'H256',
    transactionsRoot: 'H256',
    receiptsRoot: 'H256',
    number: 'Option<U256>',
    gasUsed: 'U256',
    gasLimit: 'U256',
    extraData: 'Bytes',
    logsBloom: 'EthBloom',
    timestamp: 'U256',
    difficulty: 'U256',
    totalDifficulty: 'Option<U256>',
    sealFields: 'Vec<Bytes>',
    uncles: 'Vec<H256>',
    transactions: 'Vec<EthTransaction>',
    blockSize: 'Option<U256>'
  },
  EthBloom: 'H2048',
  EthCallRequest: {
    from: 'Option<EthAddress>',
    to: 'Option<EthAddress>',
    gasPrice: 'Option<U256>',
    gas: 'Option<U256>',
    value: 'Option<U256>',
    data: 'Option<Bytes>',
    nonce: 'Option<U256>'
  },
  EthFilter: {
    fromBlock: 'Option<BlockNumber>',
    toBlock: 'Option<BlockNumber>',
    blockHash: 'Option<H256>',
    address: 'Option<EthFilterAddress>',
    topics: 'Option<EthFilterTopic>'
  },
  EthFilterAddress: {
    _enum: {
      Single: 'EthAddress',
      Multiple: 'Vec<EthAddress>',
      Null: 'Null'
    }
  },
  EthFilterChanges: {
    _enum: {
      Logs: 'Vec<EthLog>',
      Hashes: 'Vec<H256>',
      Empty: 'Null'
    }
  },
  EthFilterTopic: {
    _enum: {
      Single: 'EthFilterTopicInner',
      Multiple: 'Vec<EthFilterTopicInner>',
      Null: 'Null'
    }
  },
  EthFilterTopicEntry: 'Option<H256>',
  EthFilterTopicInner: {
    _enum: {
      Single: 'EthFilterTopicEntry',
      Multiple: 'Vec<EthFilterTopicEntry>',
      Null: 'Null'
    }
  },
  EthRichHeader: {
    _alias: {
      blockHash: 'hash',
      blockSize: 'size'
    },
    blockHash: 'Option<H256>',
    parentHash: 'H256',
    sha3Uncles: 'H256',
    author: 'EthAddress',
    miner: 'EthAddress',
    stateRoot: 'H256',
    transactionsRoot: 'H256',
    receiptsRoot: 'H256',
    number: 'Option<U256>',
    gasUsed: 'U256',
    gasLimit: 'U256',
    extraData: 'Bytes',
    logsBloom: 'EthBloom',
    timestamp: 'U256',
    difficulty: 'U256',
    sealFields: 'Vec<Bytes>',
    blockSize: 'Option<U256>'
  },
  EthLog: {
    address: 'EthAddress',
    topics: 'Vec<H256>',
    data: 'Bytes',
    blockHash: 'Option<H256>',
    blockNumber: 'Option<U256>',
    transactionHash: 'Option<H256>',
    transactionIndex: 'Option<U256>',
    logIndex: 'Option<U256>',
    transactionLogIndex: 'Option<U256>',
    removed: 'bool'
  },
  EthReceipt: {
    transactionHash: 'Option<H256>',
    transactionIndex: 'Option<U256>',
    blockHash: 'Option<H256>',
    from: 'Option<EthAddress>',
    to: 'Option<EthAddress>',
    blockNumber: 'Option<U256>',
    cumulativeGasUsed: 'U256',
    gasUsed: 'Option<U256>',
    contractAddress: 'Option<EthAddress>',
    logs: 'Vec<EthLog>',
    root: 'Option<H256>',
    logsBloom: 'EthBloom',
    statusCode: 'Option<U64>'
  },
  EthStorageProof: {
    key: 'U256',
    value: 'U256',
    proof: 'Vec<Bytes>'
  },
  EthSubKind: {
    _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
  },
  EthSubParams: {
    _enum: {
      None: 'Null',
      Logs: 'EthFilter'
    }
  },
  EthSubResult: {
    _enum: {
      Header: 'EthRichHeader',
      Log: 'EthLog',
      TransactionHash: 'H256',
      SyncState: 'EthSyncStatus'
    }
  },
  EthSyncInfo: {
    startingBlock: 'U256',
    currentBlock: 'U256',
    highestBlock: 'U256',
    warpChunksAmount: 'Option<U256>',
    warpChunksProcessed: 'Option<U256>'
  },
  EthSyncStatus: {
    _enum: {
      Info: 'EthSyncInfo',
      None: 'Null'
    }
  },
  EthTransaction: 'LegacyTransaction',
  EthTransactionSignature: {
    v: 'u64',
    r: 'H256',
    s: 'H256'
  },
  EthTransactionAction: {
    _enum: {
      Call: 'H160',
      Create: 'Null'
    }
  },
  EthTransactionCondition: {
    _enum: {
      block: 'u64',
      time: 'u64'
    }
  },
  EthTransactionRequest: {
    from: 'Option<EthAddress>',
    to: 'Option<EthAddress>',
    gasPrice: 'Option<U256>',
    gas: 'Option<U256>',
    value: 'Option<U256>',
    data: 'Option<Bytes>',
    nonce: 'Option<U256>'
  },
  EthTransactionStatus: {
    transactionHash: 'H256',
    transactionIndex: 'u32',
    from: 'EthAddress',
    to: 'Option<EthAddress>',
    contractAddress: 'Option<EthAddress>',
    logs: 'Vec<EthLog>',
    logsBloom: 'EthBloom'
  },
  EthWork: {
    powHash: 'H256',
    seedHash: 'H256',
    target: 'H256',
    number: 'Option<u64>'
  }
});
var _default = {
  rpc: _rpc.rpc,
  types
};
exports.default = _default;

},{"./rpc.js":338,"@polkadot/util":640}],338:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpc = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// As per frontier
// We use aliasSection here to override since these are in another namespace
const netRpc = {
  listening: {
    aliasSection: 'net',
    description: 'Returns true if client is actively listening for network connections. Otherwise false.',
    params: [],
    type: 'bool'
  },
  peerCount: {
    aliasSection: 'net',
    description: 'Returns number of peers connected to node.',
    params: [],
    type: 'String'
  },
  version: {
    aliasSection: 'net',
    description: 'Returns protocol version.',
    params: [],
    type: 'String'
  }
};
const web3Rpc = {
  clientVersion: {
    aliasSection: 'web3',
    description: 'Returns current client version.',
    params: [],
    type: 'String'
  },
  sha3: {
    aliasSection: 'web3',
    description: 'Returns sha3 of the given data',
    params: [{
      name: 'data',
      type: 'Bytes'
    }],
    type: 'H256'
  }
};
const rpc = (0, _util.objectSpread)({}, netRpc, web3Rpc, {
  accounts: {
    description: 'Returns accounts list.',
    params: [],
    type: 'Vec<H160>'
  },
  blockNumber: {
    description: 'Returns the blockNumber',
    params: [],
    type: 'U256'
  },
  call: {
    description: 'Call contract, returning the output data.',
    params: [{
      name: 'request',
      type: 'EthCallRequest'
    }, {
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'Bytes'
  },
  chainId: {
    description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
    params: [],
    type: 'U64'
  },
  coinbase: {
    description: 'Returns block author.',
    params: [],
    type: 'H160'
  },
  estimateGas: {
    description: 'Estimate gas needed for execution of given contract.',
    params: [{
      name: 'request',
      type: 'EthCallRequest'
    }, {
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  gasPrice: {
    description: 'Returns current gas price.',
    params: [],
    type: 'U256'
  },
  getBalance: {
    description: 'Returns balance of the given account.',
    params: [{
      name: 'address',
      type: 'H160'
    }, {
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  getBlockByHash: {
    description: 'Returns block with given hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }, {
      name: 'full',
      type: 'bool'
    }],
    type: 'Option<EthRichBlock>'
  },
  getBlockByNumber: {
    description: 'Returns block with given number.',
    params: [{
      name: 'block',
      type: 'BlockNumber'
    }, {
      name: 'full',
      type: 'bool'
    }],
    type: 'Option<EthRichBlock>'
  },
  getBlockTransactionCountByHash: {
    description: 'Returns the number of transactions in a block with given hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }],
    type: 'U256'
  },
  getBlockTransactionCountByNumber: {
    description: 'Returns the number of transactions in a block with given block number.',
    params: [{
      name: 'block',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  getCode: {
    description: 'Returns the code at given address at given time (block number).',
    params: [{
      name: 'address',
      type: 'H160'
    }, {
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'Bytes'
  },
  getFilterChanges: {
    description: 'Returns filter changes since last poll.',
    params: [{
      name: 'index',
      type: 'U256'
    }],
    type: 'EthFilterChanges'
  },
  getFilterLogs: {
    description: 'Returns all logs matching given filter (in a range \'from\' - \'to\').',
    params: [{
      name: 'index',
      type: 'U256'
    }],
    type: 'Vec<EthLog>'
  },
  getLogs: {
    description: 'Returns logs matching given filter object.',
    params: [{
      name: 'filter',
      type: 'EthFilter'
    }],
    type: 'Vec<EthLog>'
  },
  getProof: {
    description: 'Returns proof for account and storage.',
    params: [{
      name: 'address',
      type: 'H160'
    }, {
      name: 'storageKeys',
      type: 'Vec<H256>'
    }, {
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'EthAccount'
  },
  getStorageAt: {
    description: 'Returns content of the storage at given address.',
    params: [{
      name: 'address',
      type: 'H160'
    }, {
      name: 'index',
      type: 'U256'
    }, {
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'H256'
  },
  getTransactionByBlockHashAndIndex: {
    description: 'Returns transaction at given block hash and index.',
    params: [{
      name: 'hash',
      type: 'H256'
    }, {
      name: 'index',
      type: 'U256'
    }],
    type: 'EthTransaction'
  },
  getTransactionByBlockNumberAndIndex: {
    description: 'Returns transaction by given block number and index.',
    params: [{
      name: 'number',
      type: 'BlockNumber'
    }, {
      name: 'index',
      type: 'U256'
    }],
    type: 'EthTransaction'
  },
  getTransactionByHash: {
    description: 'Get transaction by its hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }],
    type: 'EthTransaction'
  },
  getTransactionCount: {
    description: 'Returns the number of transactions sent from given address at given time (block number).',
    params: [{
      name: 'hash',
      type: 'H256'
    }, {
      isOptional: true,
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  getTransactionReceipt: {
    description: 'Returns transaction receipt by transaction hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }],
    type: 'EthReceipt'
  },
  getUncleByBlockHashAndIndex: {
    description: 'Returns an uncles at given block and index.',
    params: [{
      name: 'hash',
      type: 'H256'
    }, {
      name: 'index',
      type: 'U256'
    }],
    type: 'EthRichBlock'
  },
  getUncleByBlockNumberAndIndex: {
    description: 'Returns an uncles at given block and index.',
    params: [{
      name: 'number',
      type: 'BlockNumber'
    }, {
      name: 'index',
      type: 'U256'
    }],
    type: 'EthRichBlock'
  },
  getUncleCountByBlockHash: {
    description: 'Returns the number of uncles in a block with given hash.',
    params: [{
      name: 'hash',
      type: 'H256'
    }],
    type: 'U256'
  },
  getUncleCountByBlockNumber: {
    description: 'Returns the number of uncles in a block with given block number.',
    params: [{
      name: 'number',
      type: 'BlockNumber'
    }],
    type: 'U256'
  },
  getWork: {
    description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
    params: [],
    type: 'EthWork'
  },
  hashrate: {
    description: 'Returns the number of hashes per second that the node is mining with.',
    params: [],
    type: 'U256'
  },
  mining: {
    description: 'Returns true if client is actively mining new blocks.',
    params: [],
    type: 'bool'
  },
  newBlockFilter: {
    description: 'Returns id of new block filter.',
    params: [],
    type: 'U256'
  },
  newFilter: {
    description: 'Returns id of new filter.',
    params: [{
      name: 'filter',
      type: 'EthFilter'
    }],
    type: 'U256'
  },
  newPendingTransactionFilter: {
    description: 'Returns id of new block filter.',
    params: [],
    type: 'U256'
  },
  protocolVersion: {
    description: 'Returns protocol version encoded as a string (quotes are necessary).',
    params: [],
    type: 'u64'
  },
  sendRawTransaction: {
    description: 'Sends signed transaction, returning its hash.',
    params: [{
      name: 'bytes',
      type: 'Bytes'
    }],
    type: 'H256'
  },
  sendTransaction: {
    description: 'Sends transaction; will block waiting for signer to return the transaction hash',
    params: [{
      name: 'tx',
      type: 'EthTransactionRequest'
    }],
    type: 'H256'
  },
  submitHashrate: {
    description: 'Used for submitting mining hashrate.',
    params: [{
      name: 'index',
      type: 'U256'
    }, {
      name: 'hash',
      type: 'H256'
    }],
    type: 'bool'
  },
  submitWork: {
    description: 'Used for submitting a proof-of-work solution.',
    params: [{
      name: 'nonce',
      type: 'H64'
    }, {
      name: 'headerHash',
      type: 'H256'
    }, {
      name: 'mixDigest',
      type: 'H256'
    }],
    type: 'bool'
  },
  subscribe: {
    description: 'Subscribe to Eth subscription.',
    params: [{
      name: 'kind',
      type: 'EthSubKind'
    }, {
      isOptional: true,
      name: 'params',
      type: 'EthSubParams'
    }],
    pubsub: ['subscription', 'subscribe', 'unsubscribe'],
    type: 'Null'
  },
  syncing: {
    description: 'Returns an object with data about the sync status or false.',
    params: [],
    type: 'EthSyncStatus'
  },
  uninstallFilter: {
    description: 'Uninstalls filter.',
    params: [{
      name: 'index',
      type: 'U256'
    }],
    type: 'bool'
  }
});
exports.rpc = rpc;

},{"@polkadot/util":640}],339:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    EvmAccount: {
      nonce: 'u256',
      balance: 'u256'
    },
    EvmLog: {
      address: 'H160',
      topics: 'Vec<H256>',
      data: 'Bytes'
    },
    EvmVicinity: {
      gasPrice: 'u256',
      origin: 'H160'
    },
    ExitError: {
      _enum: {
        StackUnderflow: 'Null',
        StackOverflow: 'Null',
        InvalidJump: 'Null',
        InvalidRange: 'Null',
        DesignatedInvalid: 'Null',
        CallTooDeep: 'Null',
        CreateCollision: 'Null',
        CreateContractLimit: 'Null',
        OutOfOffset: 'Null',
        OutOfGas: 'Null',
        OutOfFund: 'Null',
        PCUnderflow: 'Null',
        CreateEmpty: 'Null',
        Other: 'Text'
      }
    },
    ExitFatal: {
      _enum: {
        NotSupported: 'Null',
        UnhandledInterrupt: 'Null',
        CallErrorAsFatal: 'ExitError',
        Other: 'Text'
      }
    },
    ExitReason: {
      _enum: {
        Succeed: 'ExitSucceed',
        Error: 'ExitError',
        Revert: 'ExitRevert',
        Fatal: 'ExitFatal'
      }
    },
    ExitRevert: {
      _enum: ['Reverted']
    },
    ExitSucceed: {
      _enum: ['Stopped', 'Returned', 'Suicided']
    }
  }
};
exports.default = _default;

},{}],340:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    Extrinsic: 'GenericExtrinsic',
    ExtrinsicEra: 'GenericExtrinsicEra',
    ExtrinsicPayload: 'GenericExtrinsicPayload',
    ExtrinsicSignature: 'MultiSignature',
    ExtrinsicV4: 'GenericExtrinsicV4',
    ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
    ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
    ExtrinsicUnknown: 'GenericExtrinsicUnknown',
    ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
    // eras
    Era: 'ExtrinsicEra',
    ImmortalEra: 'GenericImmortalEra',
    MortalEra: 'GenericMortalEra',
    // signatures & signer
    AnySignature: 'H512',
    MultiSignature: {
      _enum: {
        Ed25519: 'Ed25519Signature',
        Sr25519: 'Sr25519Signature',
        Ecdsa: 'EcdsaSignature'
      }
    },
    Signature: 'H512',
    SignerPayload: 'GenericSignerPayload',
    EcdsaSignature: '[u8; 65]',
    Ed25519Signature: 'H512',
    Sr25519Signature: 'H512'
  }
};
exports.default = _default;

},{}],341:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    AssetOptions: {
      initalIssuance: 'Compact<Balance>',
      permissions: 'PermissionLatest'
    },
    Owner: {
      _enum: {
        None: 'Null',
        Address: 'AccountId'
      }
    },
    PermissionsV1: {
      update: 'Owner',
      mint: 'Owner',
      burn: 'Owner'
    },
    PermissionVersions: {
      _enum: {
        V1: 'PermissionsV1'
      }
    },
    PermissionLatest: 'PermissionsV1'
  }
};
exports.default = _default;

},{}],342:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    ActiveGilt: {
      proportion: 'Perquintill',
      amount: 'Balance',
      who: 'AccountId',
      expiry: 'BlockNumber'
    },
    ActiveGiltsTotal: {
      frozen: 'Balance',
      proportion: 'Perquintill',
      index: 'ActiveIndex',
      target: 'Perquintill'
    },
    ActiveIndex: 'u32',
    GiltBid: {
      amount: 'Balance',
      who: 'AccountId'
    }
  }
};
exports.default = _default;

},{}],343:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    proveFinality: {
      description: 'Prove finality for the range (begin; end] hash.',
      params: [{
        name: 'begin',
        type: 'BlockHash'
      }, {
        name: 'end',
        type: 'BlockHash'
      }, {
        name: 'authoritiesSetId',
        type: 'u64',
        isOptional: true
      }],
      type: 'Option<EncodedFinalityProofs>'
    },
    roundState: {
      description: 'Returns the state of the current best round state as well as the ongoing background rounds',
      params: [],
      type: 'ReportedRoundStates'
    },
    subscribeJustifications: {
      description: 'Subscribes to grandpa justifications',
      params: [],
      pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
      type: 'JustificationNotification'
    }
  },
  types: {
    AuthorityIndex: 'u64',
    AuthorityList: 'Vec<NextAuthority>',
    AuthoritySet: {
      currentAuthorities: 'AuthorityList',
      setId: 'u64',
      pendingStandardChanges: 'ForkTreePendingChange',
      pendingForcedChanges: 'Vec<PendingChange>',
      authoritySetChanges: 'AuthoritySetChanges'
    },
    ForkTreePendingChange: {
      roots: 'Vec<ForkTreePendingChangeNode>',
      bestFinalizedNumber: 'Option<BlockNumber>'
    },
    ForkTreePendingChangeNode: {
      hash: 'BlockHash',
      number: 'BlockNumber',
      data: 'PendingChange',
      // actual data, here PendingChange
      children: 'Vec<ForkTreePendingChangeNode>'
    },
    AuthoritySetChange: '(U64, BlockNumber)',
    AuthoritySetChanges: 'Vec<AuthoritySetChange>',
    AuthorityWeight: 'u64',
    DelayKind: {
      _enum: {
        Finalized: 'Null',
        Best: 'DelayKindBest'
      }
    },
    DelayKindBest: {
      medianLastFinalized: 'BlockNumber'
    },
    EncodedFinalityProofs: 'Bytes',
    GrandpaEquivocation: {
      _enum: {
        Prevote: 'GrandpaEquivocationValue',
        Precommit: 'GrandpaEquivocationValue'
      }
    },
    GrandpaEquivocationProof: {
      setId: 'SetId',
      equivocation: 'GrandpaEquivocation'
    },
    GrandpaEquivocationValue: {
      roundNumber: 'u64',
      identity: 'AuthorityId',
      first: '(GrandpaPrevote, AuthoritySignature)',
      second: '(GrandpaPrevote, AuthoritySignature)'
    },
    GrandpaPrevote: {
      targetHash: 'Hash',
      targetNumber: 'BlockNumber'
    },
    GrandpaCommit: {
      targetHash: 'BlockHash',
      targetNumber: 'BlockNumber',
      precommits: 'Vec<GrandpaSignedPrecommit>'
    },
    GrandpaPrecommit: {
      targetHash: 'BlockHash',
      targetNumber: 'BlockNumber'
    },
    GrandpaSignedPrecommit: {
      precommit: 'GrandpaPrecommit',
      signature: 'AuthoritySignature',
      id: 'AuthorityId'
    },
    GrandpaJustification: {
      round: 'u64',
      commit: 'GrandpaCommit',
      votesAncestries: 'Vec<Header>'
    },
    JustificationNotification: 'Bytes',
    KeyOwnerProof: 'MembershipProof',
    NextAuthority: '(AuthorityId, AuthorityWeight)',
    PendingChange: {
      nextAuthorities: 'AuthorityList',
      delay: 'BlockNumber',
      canonHeight: 'BlockNumber',
      canonHash: 'BlockHash',
      delayKind: 'DelayKind'
    },
    PendingPause: {
      scheduledAt: 'BlockNumber',
      delay: 'BlockNumber'
    },
    PendingResume: {
      scheduledAt: 'BlockNumber',
      delay: 'BlockNumber'
    },
    Precommits: {
      currentWeight: 'u32',
      missing: 'BTreeSet<AuthorityId>'
    },
    Prevotes: {
      currentWeight: 'u32',
      missing: 'BTreeSet<AuthorityId>'
    },
    ReportedRoundStates: {
      setId: 'u32',
      best: 'RoundState',
      background: 'Vec<RoundState>'
    },
    RoundState: {
      round: 'u32',
      totalWeight: 'u32',
      thresholdWeight: 'u32',
      prevotes: 'Prevotes',
      precommits: 'Precommits'
    },
    SetId: 'u64',
    StoredPendingChange: {
      scheduledAt: 'BlockNumber',
      delay: 'BlockNumber',
      nextAuthorities: 'AuthorityList'
    },
    StoredState: {
      _enum: {
        Live: 'Null',
        PendingPause: 'PendingPause',
        Paused: 'Null',
        PendingResume: 'PendingResume'
      }
    }
  }
};
exports.default = _default;

},{}],344:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    IdentityFields: {
      _set: {
        _bitLength: 64,
        // Mapped here to 32 bits, in Rust these are 64-bit values
        Display: 0b00000000000000000000000000000001,
        Legal: 0b00000000000000000000000000000010,
        Web: 0b00000000000000000000000000000100,
        Riot: 0b00000000000000000000000000001000,
        Email: 0b00000000000000000000000000010000,
        PgpFingerprint: 0b00000000000000000000000000100000,
        Image: 0b00000000000000000000000001000000,
        Twitter: 0b00000000000000000000000010000000
      }
    },
    IdentityInfoAdditional: '(Data, Data)',
    IdentityInfoTo198: {
      additional: 'Vec<IdentityInfoAdditional>',
      display: 'Data',
      legal: 'Data',
      web: 'Data',
      riot: 'Data',
      email: 'Data',
      pgpFingerprint: 'Option<H160>',
      image: 'Data'
    },
    IdentityInfo: {
      _fallback: 'IdentityInfoTo198',
      additional: 'Vec<IdentityInfoAdditional>',
      display: 'Data',
      legal: 'Data',
      web: 'Data',
      riot: 'Data',
      email: 'Data',
      pgpFingerprint: 'Option<H160>',
      image: 'Data',
      twitter: 'Data'
    },
    IdentityJudgement: {
      _enum: {
        Unknown: 'Null',
        FeePaid: 'Balance',
        Reasonable: 'Null',
        KnownGood: 'Null',
        OutOfDate: 'Null',
        LowQuality: 'Null',
        Erroneous: 'Null'
      }
    },
    RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
    RegistrationTo198: {
      judgements: 'Vec<RegistrationJudgement>',
      deposit: 'Balance',
      info: 'IdentityInfoTo198'
    },
    Registration: {
      _fallback: 'RegistrationTo198',
      judgements: 'Vec<RegistrationJudgement>',
      deposit: 'Balance',
      info: 'IdentityInfo'
    },
    RegistrarIndex: 'u32',
    RegistrarInfo: {
      account: 'AccountId',
      fee: 'Balance',
      fields: 'IdentityFields'
    }
  }
};
exports.default = _default;

},{}],345:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    AuthIndex: 'u32',
    AuthoritySignature: 'Signature',
    Heartbeat: {
      blockNumber: 'BlockNumber',
      networkState: 'OpaqueNetworkState',
      sessionIndex: 'SessionIndex',
      authorityIndex: 'AuthIndex',
      validatorsLen: 'u32'
    },
    HeartbeatTo244: {
      blockNumber: 'BlockNumber',
      networkState: 'OpaqueNetworkState',
      sessionIndex: 'SessionIndex',
      authorityIndex: 'AuthIndex'
    },
    OpaqueMultiaddr: 'Bytes',
    OpaquePeerId: 'Bytes',
    OpaqueNetworkState: {
      peerId: 'OpaquePeerId',
      externalAddresses: 'Vec<OpaqueMultiaddr>'
    }
  }
};
exports.default = _default;

},{}],346:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var defs = _interopRequireWildcard(require("./definitions.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const jsonrpc = {};
Object.keys(defs).forEach(s => Object.entries(defs[s].rpc || {}).forEach(([method, def]) => {
  // allow for section overrides
  const section = def.aliasSection || s;

  if (!jsonrpc[section]) {
    jsonrpc[section] = {};
  }

  jsonrpc[section][method] = (0, _util.objectSpread)({}, def, {
    isSubscription: !!def.pubsub,
    jsonrpc: `${section}_${method}`,
    method,
    section
  });
}));
var _default = jsonrpc;
exports.default = _default;

},{"./definitions.js":332,"@polkadot/util":640}],347:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    CallIndex: '(u8, u8)',
    LotteryConfig: {
      price: 'Balance',
      start: 'BlockNumber',
      length: 'BlockNumber',
      delay: 'BlockNumber',
      repeat: 'bool'
    }
  }
};
exports.default = _default;

},{}],348:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AllHashers", {
  enumerable: true,
  get: function () {
    return _hashers.AllHashers;
  }
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _hashers = require("./hashers.js");

var _v = require("./v9.js");

var _v2 = require("./v10.js");

var _v3 = require("./v11.js");

var _v4 = require("./v12.js");

var _v5 = require("./v13.js");

var _v6 = require("./v14.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: (0, _util.objectSpread)({}, _v.v9, _v2.v10, _v3.v11, _v4.v12, _v5.v13, _v6.v14, {
    // latest mappings
    ErrorMetadataLatest: 'ErrorMetadataV14',
    EventMetadataLatest: 'EventMetadataV14',
    ExtrinsicMetadataLatest: 'ExtrinsicMetadataV14',
    FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV14',
    FunctionMetadataLatest: 'FunctionMetadataV14',
    MetadataLatest: 'MetadataV14',
    PalletCallMetadataLatest: 'PalletCallMetadataV14',
    PalletConstantMetadataLatest: 'PalletConstantMetadataV14',
    PalletErrorMetadataLatest: 'PalletErrorMetadataV14',
    PalletEventMetadataLatest: 'PalletEventMetadataV14',
    PalletMetadataLatest: 'PalletMetadataV14',
    PalletStorageMetadataLatest: 'PalletStorageMetadataV14',
    PortableType: 'PortableTypeV14',
    SignedExtensionMetadataLatest: 'SignedExtensionMetadataV14',
    StorageEntryMetadataLatest: 'StorageEntryMetadataV14',
    StorageEntryModifierLatest: 'StorageEntryModifierV14',
    StorageEntryTypeLatest: 'StorageEntryTypeV14',
    StorageHasher: 'StorageHasherV14',
    // the enum containing all the mappings
    MetadataAll: {
      _enum: {
        V0: 'DoNotConstruct<MetadataV0>',
        V1: 'DoNotConstruct<MetadataV1>',
        V2: 'DoNotConstruct<MetadataV2>',
        V3: 'DoNotConstruct<MetadataV3>',
        V4: 'DoNotConstruct<MetadataV4>',
        V5: 'DoNotConstruct<MetadataV5>',
        V6: 'DoNotConstruct<MetadataV6>',
        V7: 'DoNotConstruct<MetadataV7>',
        V8: 'DoNotConstruct<MetadataV8>',
        // First version on Kusama in V9, dropping will be problematic
        V9: 'MetadataV9',
        V10: 'MetadataV10',
        V11: 'MetadataV11',
        V12: 'MetadataV12',
        V13: 'MetadataV13',
        V14: 'MetadataV14'
      }
    }
  })
};
exports.default = _default;

},{"./hashers.js":349,"./v10.js":350,"./v11.js":351,"./v12.js":352,"./v13.js":353,"./v14.js":354,"./v9.js":355,"@polkadot/util":640}],349:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AllHashers = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const AllHashers = {
  Blake2_128: null,
  // eslint-disable-line camelcase
  Blake2_256: null,
  // eslint-disable-line camelcase
  Blake2_128Concat: null,
  // eslint-disable-line camelcase
  Twox128: null,
  Twox256: null,
  Twox64Concat: null,
  // new in v11
  Identity: null
};
exports.AllHashers = AllHashers;

},{}],350:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v10 = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v10 = {
  // v10
  ErrorMetadataV10: 'ErrorMetadataV9',
  EventMetadataV10: 'EventMetadataV9',
  FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
  FunctionMetadataV10: 'FunctionMetadataV9',
  MetadataV10: {
    modules: 'Vec<ModuleMetadataV10>'
  },
  ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
  ModuleMetadataV10: {
    name: 'Text',
    storage: 'Option<StorageMetadataV10>',
    calls: 'Option<Vec<FunctionMetadataV10>>',
    events: 'Option<Vec<EventMetadataV10>>',
    constants: 'Vec<ModuleConstantMetadataV10>',
    errors: 'Vec<ErrorMetadataV10>'
  },
  StorageEntryModifierV10: 'StorageEntryModifierV9',
  StorageEntryMetadataV10: {
    name: 'Text',
    modifier: 'StorageEntryModifierV10',
    type: 'StorageEntryTypeV10',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryTypeV10: {
    _enum: {
      Plain: 'Type',
      Map: {
        hasher: 'StorageHasherV10',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      DoubleMap: {
        hasher: 'StorageHasherV10',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV10'
      }
    }
  },
  StorageMetadataV10: {
    prefix: 'Text',
    items: 'Vec<StorageEntryMetadataV10>'
  },
  StorageHasherV10: {
    _enum: {
      Blake2_128: null,
      // eslint-disable-line camelcase
      Blake2_256: null,
      // eslint-disable-line camelcase
      Blake2_128Concat: null,
      // eslint-disable-line camelcase
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  }
};
exports.v10 = v10;

},{}],351:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v11 = void 0;

var _hashers = require("./hashers.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v11 = {
  // v11
  ErrorMetadataV11: 'ErrorMetadataV10',
  EventMetadataV11: 'EventMetadataV10',
  ExtrinsicMetadataV11: {
    version: 'u8',
    signedExtensions: 'Vec<Text>'
  },
  FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
  FunctionMetadataV11: 'FunctionMetadataV10',
  MetadataV11: {
    modules: 'Vec<ModuleMetadataV11>',
    extrinsic: 'ExtrinsicMetadataV11'
  },
  ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
  ModuleMetadataV11: {
    name: 'Text',
    storage: 'Option<StorageMetadataV11>',
    calls: 'Option<Vec<FunctionMetadataV11>>',
    events: 'Option<Vec<EventMetadataV11>>',
    constants: 'Vec<ModuleConstantMetadataV11>',
    errors: 'Vec<ErrorMetadataV11>'
  },
  StorageEntryModifierV11: 'StorageEntryModifierV10',
  StorageEntryMetadataV11: {
    name: 'Text',
    modifier: 'StorageEntryModifierV11',
    type: 'StorageEntryTypeV11',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryTypeV11: {
    _enum: {
      Plain: 'Type',
      Map: {
        hasher: 'StorageHasherV11',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      DoubleMap: {
        hasher: 'StorageHasherV11',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV11'
      }
    }
  },
  StorageMetadataV11: {
    prefix: 'Text',
    items: 'Vec<StorageEntryMetadataV11>'
  },
  StorageHasherV11: {
    _enum: _hashers.AllHashers
  }
};
exports.v11 = v11;

},{"./hashers.js":349}],352:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v12 = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v12 = {
  // v12
  ErrorMetadataV12: 'ErrorMetadataV11',
  EventMetadataV12: 'EventMetadataV11',
  ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
  FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
  FunctionMetadataV12: 'FunctionMetadataV11',
  MetadataV12: {
    modules: 'Vec<ModuleMetadataV12>',
    extrinsic: 'ExtrinsicMetadataV12'
  },
  ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
  ModuleMetadataV12: {
    name: 'Text',
    storage: 'Option<StorageMetadataV12>',
    calls: 'Option<Vec<FunctionMetadataV12>>',
    events: 'Option<Vec<EventMetadataV12>>',
    constants: 'Vec<ModuleConstantMetadataV12>',
    errors: 'Vec<ErrorMetadataV12>',
    index: 'u8'
  },
  StorageEntryModifierV12: 'StorageEntryModifierV11',
  StorageEntryMetadataV12: 'StorageEntryMetadataV11',
  StorageEntryTypeV12: 'StorageEntryTypeV11',
  StorageMetadataV12: 'StorageMetadataV11',
  StorageHasherV12: 'StorageHasherV11'
};
exports.v12 = v12;

},{}],353:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v13 = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v13 = {
  // v13
  ErrorMetadataV13: 'ErrorMetadataV12',
  EventMetadataV13: 'EventMetadataV12',
  ExtrinsicMetadataV13: 'ExtrinsicMetadataV12',
  FunctionArgumentMetadataV13: 'FunctionArgumentMetadataV12',
  FunctionMetadataV13: 'FunctionMetadataV12',
  MetadataV13: {
    modules: 'Vec<ModuleMetadataV13>',
    extrinsic: 'ExtrinsicMetadataV13'
  },
  ModuleConstantMetadataV13: 'ModuleConstantMetadataV12',
  ModuleMetadataV13: {
    name: 'Text',
    storage: 'Option<StorageMetadataV13>',
    calls: 'Option<Vec<FunctionMetadataV13>>',
    events: 'Option<Vec<EventMetadataV13>>',
    constants: 'Vec<ModuleConstantMetadataV13>',
    errors: 'Vec<ErrorMetadataV13>',
    index: 'u8'
  },
  StorageEntryModifierV13: 'StorageEntryModifierV12',
  StorageEntryMetadataV13: {
    name: 'Text',
    modifier: 'StorageEntryModifierV13',
    type: 'StorageEntryTypeV13',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryTypeV13: {
    _enum: {
      Plain: 'Type',
      Map: {
        hasher: 'StorageHasherV13',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      DoubleMap: {
        hasher: 'StorageHasherV13',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV13'
      },
      NMap: {
        keyVec: 'Vec<Type>',
        hashers: 'Vec<StorageHasherV13>',
        value: 'Type'
      }
    }
  },
  StorageMetadataV13: {
    prefix: 'Text',
    items: 'Vec<StorageEntryMetadataV13>'
  },
  StorageHasherV13: 'StorageHasherV12'
};
exports.v13 = v13;

},{}],354:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v14 = void 0;

var _util = require("@polkadot/util");

var _v = require("../scaleInfo/v1.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v14 = {
  // registry
  PortableTypeV14: {
    id: 'Si1LookupTypeId',
    type: 'Si1Type'
  },
  // compatibility with earlier layouts, i.e. don't break previous users
  ErrorMetadataV14: (0, _util.objectSpread)({}, _v.Si1Variant, {
    args: 'Vec<Type>'
  }),
  EventMetadataV14: (0, _util.objectSpread)({}, _v.Si1Variant, {
    args: 'Vec<Type>'
  }),
  FunctionArgumentMetadataV14: {
    name: 'Text',
    type: 'Type',
    typeName: 'Option<Type>'
  },
  FunctionMetadataV14: (0, _util.objectSpread)({}, _v.Si1Variant, {
    args: 'Vec<FunctionArgumentMetadataV14>'
  }),
  // V14
  ExtrinsicMetadataV14: {
    type: 'SiLookupTypeId',
    version: 'u8',
    signedExtensions: 'Vec<SignedExtensionMetadataV14>'
  },
  MetadataV14: {
    lookup: 'PortableRegistry',
    pallets: 'Vec<PalletMetadataV14>',
    extrinsic: 'ExtrinsicMetadataV14',
    type: 'SiLookupTypeId'
  },
  PalletCallMetadataV14: {
    type: 'SiLookupTypeId'
  },
  PalletConstantMetadataV14: {
    name: 'Text',
    type: 'SiLookupTypeId',
    value: 'Bytes',
    docs: 'Vec<Text>'
  },
  PalletErrorMetadataV14: {
    type: 'SiLookupTypeId'
  },
  PalletEventMetadataV14: {
    type: 'SiLookupTypeId'
  },
  PalletMetadataV14: {
    name: 'Text',
    storage: 'Option<PalletStorageMetadataV14>',
    calls: 'Option<PalletCallMetadataV14>',
    events: 'Option<PalletEventMetadataV14>',
    constants: 'Vec<PalletConstantMetadataV14>',
    errors: 'Option<PalletErrorMetadataV14>',
    index: 'u8'
  },
  PalletStorageMetadataV14: {
    prefix: 'Text',
    // NOTE: Renamed from entries
    items: 'Vec<StorageEntryMetadataV14>'
  },
  SignedExtensionMetadataV14: {
    identifier: 'Text',
    type: 'SiLookupTypeId',
    additionalSigned: 'SiLookupTypeId'
  },
  StorageEntryMetadataV14: {
    name: 'Text',
    modifier: 'StorageEntryModifierV14',
    type: 'StorageEntryTypeV14',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryModifierV14: 'StorageEntryModifierV13',
  StorageEntryTypeV14: {
    _enum: {
      Plain: 'SiLookupTypeId',
      Map: {
        hashers: 'Vec<StorageHasherV14>',
        key: 'SiLookupTypeId',
        // NOTE: Renamed from "keys"
        value: 'SiLookupTypeId'
      }
    }
  },
  StorageHasherV14: 'StorageHasherV13'
};
exports.v14 = v14;

},{"../scaleInfo/v1.js":371,"@polkadot/util":640}],355:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v9 = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v9 = {
  // v9
  ErrorMetadataV9: {
    name: 'Text',
    docs: 'Vec<Text>'
  },
  EventMetadataV9: {
    name: 'Text',
    args: 'Vec<Type>',
    docs: 'Vec<Text>'
  },
  FunctionArgumentMetadataV9: {
    name: 'Text',
    type: 'Type'
  },
  FunctionMetadataV9: {
    name: 'Text',
    args: 'Vec<FunctionArgumentMetadataV9>',
    docs: 'Vec<Text>'
  },
  MetadataV9: {
    modules: 'Vec<ModuleMetadataV9>'
  },
  ModuleConstantMetadataV9: {
    name: 'Text',
    type: 'Type',
    value: 'Bytes',
    docs: 'Vec<Text>'
  },
  ModuleMetadataV9: {
    name: 'Text',
    storage: 'Option<StorageMetadataV9>',
    calls: 'Option<Vec<FunctionMetadataV9>>',
    events: 'Option<Vec<EventMetadataV9>>',
    constants: 'Vec<ModuleConstantMetadataV9>',
    errors: 'Vec<ErrorMetadataV9>'
  },
  StorageEntryMetadataV9: {
    name: 'Text',
    modifier: 'StorageEntryModifierV9',
    type: 'StorageEntryTypeV9',
    fallback: 'Bytes',
    docs: 'Vec<Text>'
  },
  StorageEntryModifierV9: {
    _enum: ['Optional', 'Default', 'Required']
  },
  StorageEntryTypeV9: {
    _enum: {
      Plain: 'Type',
      Map: {
        hasher: 'StorageHasherV9',
        key: 'Type',
        value: 'Type',
        linked: 'bool'
      },
      DoubleMap: {
        hasher: 'StorageHasherV9',
        key1: 'Type',
        key2: 'Type',
        value: 'Type',
        key2Hasher: 'StorageHasherV9'
      }
    }
  },
  StorageHasherV9: {
    _enum: {
      Blake2_128: null,
      // eslint-disable-line camelcase
      Blake2_256: null,
      // eslint-disable-line camelcase
      Twox128: null,
      Twox256: null,
      Twox64Concat: null
    }
  },
  StorageMetadataV9: {
    prefix: 'Text',
    items: 'Vec<StorageEntryMetadataV9>'
  }
};
exports.v9 = v9;

},{}],356:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    generateProof: {
      description: 'Generate MMR proof for given leaf index.',
      params: [{
        name: 'leafIndex',
        type: 'u64'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'MmrLeafProof'
    }
  },
  types: {
    MmrLeafProof: {
      blockHash: 'BlockHash',
      leaf: 'Bytes',
      proof: 'Bytes'
    }
  }
};
exports.default = _default;

},{}],357:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    localStorageSet: {
      description: 'Set offchain local storage under given key and prefix',
      params: [{
        name: 'kind',
        type: 'StorageKind'
      }, {
        name: 'key',
        type: 'Bytes'
      }, {
        name: 'value',
        type: 'Bytes'
      }],
      type: 'Null'
    },
    localStorageGet: {
      description: 'Get offchain local storage under given key and prefix',
      params: [{
        name: 'kind',
        type: 'StorageKind'
      }, {
        name: 'key',
        type: 'Bytes'
      }],
      type: 'Option<Bytes>'
    }
  },
  types: {
    StorageKind: {
      _enum: {
        PERSISTENT: 1,
        LOCAL: 2
      }
    }
  }
};
exports.default = _default;

},{}],358:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
    Kind: '[u8; 16]',
    OffenceDetails: {
      offender: 'Offender',
      reporters: 'Vec<Reporter>'
    },
    Offender: 'IdentificationTuple',
    OpaqueTimeSlot: 'Bytes',
    ReportIdOf: 'Hash',
    Reporter: 'AccountId'
  }
};
exports.default = _default;

},{}],359:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _hrmp = _interopRequireDefault(require("./hrmp.js"));

var _slots = _interopRequireDefault(require("./slots.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
// proposeParachain
const proposeTypes = {
  ParachainProposal: {
    proposer: 'AccountId',
    genesisHead: 'HeadData',
    validators: 'Vec<ValidatorId>',
    name: 'Bytes',
    balance: 'Balance'
  },
  RegisteredParachainInfo: {
    validators: 'Vec<ValidatorId>',
    proposer: 'AccountId'
  }
};
const cumulusTypes = {
  ServiceQuality: {
    _enum: ['Ordered', 'Fast']
  }
};
const disputeTypes = {
  DisputeLocation: {
    _enum: ['Local', 'Remote']
  },
  DisputeResult: {
    _enum: ['Valid', 'Invalid']
  },
  DisputeState: {
    validatorsFor: 'BitVec',
    validatorsAgainst: 'BitVec',
    start: 'BlockNumber',
    concludedAt: 'Option<BlockNumber>'
  },
  DisputeStatement: {
    _enum: {
      Valid: 'ValidDisputeStatementKind',
      Invalid: 'InvalidDisputeStatementKind'
    }
  },
  DisputeStatementSet: {
    candidateHash: 'CandidateHash',
    session: 'SessionIndex',
    statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'
  },
  ExplicitDisputeStatement: {
    valid: 'bool',
    candidateHash: 'CandidateHash',
    session: 'SessionIndex'
  },
  InvalidDisputeStatementKind: {
    _enum: ['Explicit']
  },
  MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',
  ValidDisputeStatementKind: {
    _enum: {
      Explicit: 'Null',
      BackingSeconded: 'Hash',
      BackingValid: 'Hash',
      ApprovalChecking: 'Null'
    }
  }
};
var _default = {
  rpc: {},
  types: (0, _util.objectSpread)({}, cumulusTypes, disputeTypes, _hrmp.default, proposeTypes, _slots.default, {
    AbridgedCandidateReceipt: {
      parachainIndex: 'ParaId',
      relayParent: 'Hash',
      headData: 'HeadData',
      collator: 'CollatorId',
      signature: 'CollatorSignature',
      povBlockHash: 'Hash',
      commitments: 'CandidateCommitments'
    },
    AbridgedHostConfiguration: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      maxUpwardQueueCount: 'u32',
      maxUpwardQueueSize: 'u32',
      maxUpwardMessageSize: 'u32',
      maxUpwardMessageNumPerCandidate: 'u32',
      hrmpMaxMessageNumPerCandidate: 'u32',
      validationUpgradeFrequency: 'BlockNumber',
      validationUpgradeDelay: 'BlockNumber'
    },
    AbridgedHrmpChannel: {
      maxCapacity: 'u32',
      maxTotalSize: 'u32',
      maxMessageSize: 'u32',
      msgCount: 'u32',
      totalSize: 'u32',
      mqcHead: 'Option<Hash>'
    },
    AssignmentId: 'AccountId',
    AssignmentKind: {
      _enum: {
        Parachain: 'Null',
        Parathread: '(CollatorId, u32)'
      }
    },
    AttestedCandidate: {
      candidate: 'AbridgedCandidateReceipt',
      validityVotes: 'Vec<ValidityAttestation>',
      validatorIndices: 'BitVec'
    },
    AuthorityDiscoveryId: 'AccountId',
    AvailabilityBitfield: 'BitVec',
    AvailabilityBitfieldRecord: {
      bitfield: 'AvailabilityBitfield',
      submittedTt: 'BlockNumber'
    },
    BackedCandidate: {
      candidate: 'CommittedCandidateReceipt',
      validityVotes: 'Vec<ValidityAttestation>',
      validatorIndices: 'BitVec'
    },
    BufferedSessionChange: {
      applyAt: 'BlockNumber',
      validators: 'Vec<ValidatorId>',
      queued: 'Vec<ValidatorId>',
      sessionIndex: 'SessionIndex'
    },
    CandidateCommitments: {
      upwardMessages: 'Vec<UpwardMessage>',
      horizontalMessages: 'Vec<OutboundHrmpMessage>',
      newValidationCode: 'Option<ValidationCode>',
      headData: 'HeadData',
      processedDownwardMessages: 'u32',
      hrmpWatermark: 'BlockNumber'
    },
    CandidateDescriptor: {
      paraId: 'ParaId',
      relayParent: 'RelayChainHash',
      collatorId: 'CollatorId',
      persistedValidationDataHash: 'Hash',
      povHash: 'Hash',
      erasureRoot: 'Hash',
      signature: 'CollatorSignature',
      paraHead: 'Hash',
      validationCodeHash: 'ValidationCodeHash'
    },
    CandidateHash: 'Hash',
    CandidateInfo: {
      who: 'AccountId',
      deposit: 'Balance'
    },
    CandidatePendingAvailability: {
      core: 'CoreIndex',
      hash: 'CandidateHash',
      descriptor: 'CandidateDescriptor',
      availabilityVotes: 'BitVec',
      backers: 'BitVec',
      relayParentNumber: 'BlockNumber',
      backedInNumber: 'BlockNumber',
      backingGroup: 'GroupIndex'
    },
    CandidateReceipt: {
      descriptor: 'CandidateDescriptor',
      commitmentsHash: 'Hash'
    },
    GlobalValidationData: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      blockNumber: 'BlockNumber'
    },
    CollatorId: 'H256',
    CollatorSignature: 'Signature',
    CommittedCandidateReceipt: {
      descriptor: 'CandidateDescriptor',
      commitments: 'CandidateCommitments'
    },
    CoreAssignment: {
      core: 'CoreIndex',
      paraId: 'ParaId',
      kind: 'AssignmentKind',
      groupIdx: 'GroupIndex'
    },
    CoreIndex: 'u32',
    CoreOccupied: {
      _enum: {
        Parathread: 'ParathreadEntry',
        Parachain: 'Null'
      }
    },
    DoubleVoteReport: {
      identity: 'ValidatorId',
      first: '(Statement, ValidatorSignature)',
      second: '(Statement, ValidatorSignature)',
      proof: 'MembershipProof',
      signingContext: 'SigningContext'
    },
    DownwardMessage: 'Bytes',
    GroupIndex: 'u32',
    GlobalValidationSchedule: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      blockNumber: 'BlockNumber'
    },
    HeadData: 'Bytes',
    HostConfiguration: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      maxUpwardQueueCount: 'u32',
      maxUpwardQueueSize: 'u32',
      maxUpwardMessageSize: 'u32',
      maxUpwardMessageNumPerCandidate: 'u32',
      hrmpMaxMessageNumPerCandidate: 'u32',
      validationUpgradeFrequency: 'BlockNumber',
      validationUpgradeDelay: 'BlockNumber',
      maxPovSize: 'u32',
      maxDownwardMessageSize: 'u32',
      preferredDispatchableUpwardMessagesStepWeight: 'Weight',
      hrmpMaxParachainOutboundChannels: 'u32',
      hrmpMaxParathreadOutboundChannels: 'u32',
      hrmpOpenRequestTtl: 'u32',
      hrmpSenderDeposit: 'Balance',
      hrmpRecipientDeposit: 'Balance',
      hrmpChannelMaxCapacity: 'u32',
      hrmpChannelMaxTotalSize: 'u32',
      hrmpMaxParachainInboundChannels: 'u32',
      hrmpMaxParathreadInboundChannels: 'u32',
      hrmpChannelMaxMessageSize: 'u32',
      codeRetentionPeriod: 'BlockNumber',
      parathreadCores: 'u32',
      parathreadRetries: 'u32',
      groupRotationFrequency: 'BlockNumber',
      chainAvailabilityPeriod: 'BlockNumber',
      threadAvailabilityPeriod: 'BlockNumber',
      schedulingLookahead: 'u32',
      maxValidatorsPerCore: 'Option<u32>',
      maxValidators: 'Option<u32>',
      disputePeriod: 'SessionIndex',
      disputePostConclusionAcceptancePeriod: 'BlockNumber',
      disputeMaxSpamSlots: 'u32',
      disputeConclusionByTimeOutPeriod: 'BlockNumber',
      noShowSlots: 'u32',
      nDelayTranches: 'u32',
      zerothDelayTrancheWidth: 'u32',
      neededApprovals: 'u32',
      relayVrfModuloSamples: 'u32'
    },
    InboundDownwardMessage: {
      pubSentAt: 'BlockNumber',
      pubMsg: 'DownwardMessage'
    },
    InboundHrmpMessage: {
      sentAt: 'BlockNumber',
      data: 'Bytes'
    },
    InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
    LocalValidationData: {
      parentHead: 'HeadData',
      balance: 'Balance',
      codeUpgradeAllowed: 'Option<BlockNumber>'
    },
    MessageIngestionType: {
      downwardMessages: 'Vec<InboundDownwardMessage>',
      horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
    },
    MessageQueueChain: 'RelayChainHash',
    OutboundHrmpMessage: {
      recipient: 'u32',
      data: 'Bytes'
    },
    ParachainDispatchOrigin: {
      _enum: ['Signed', 'Parachain', 'Root']
    },
    ParachainInherentData: {
      validationData: 'PersistedValidationData',
      relayChainState: 'StorageProof',
      downwardMessages: 'Vec<InboundDownwardMessage>',
      horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'
    },
    ParachainsInherentData: {
      bitfields: 'SignedAvailabilityBitfields',
      backedCandidates: 'Vec<BackedCandidate>',
      disputes: 'MultiDisputeStatementSet',
      parentHeader: 'Header'
    },
    ParaGenesisArgs: {
      genesisHead: 'Bytes',
      validationCode: 'Bytes',
      parachain: 'bool'
    },
    ParaId: 'u32',
    ParaInfo: {
      manager: 'AccountId',
      deposit: 'Balance',
      locked: 'bool'
    },
    ParaLifecycle: {
      _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']
    },
    ParaPastCodeMeta: {
      upgradeTimes: 'Vec<ReplacementTimes>',
      lastPruned: 'Option<BlockNumber>'
    },
    ParaScheduling: {
      _enum: ['Always', 'Dynamic']
    },
    ParathreadClaim: '(ParaId, CollatorId)',
    ParathreadClaimQueue: {
      queue: 'Vec<QueuedParathread>',
      nextCoreOffset: 'u32'
    },
    ParathreadEntry: {
      claim: 'ParathreadClaim',
      retries: 'u32'
    },
    ParaValidatorIndex: 'u32',
    PersistedValidationData: {
      parentHead: 'HeadData',
      relayParentNumber: 'RelayChainBlockNumber',
      relayParentStorageRoot: 'Hash',
      maxPovSize: 'u32'
    },
    QueuedParathread: {
      claim: 'ParathreadEntry',
      coreOffset: 'u32'
    },
    RelayBlockNumber: 'u32',
    RelayChainBlockNumber: 'RelayBlockNumber',
    RelayHash: 'Hash',
    RelayChainHash: 'RelayHash',
    Remark: '[u8; 32]',
    ReplacementTimes: {
      expectedAt: 'BlockNumber',
      activatedAt: 'BlockNumber'
    },
    Retriable: {
      _enum: {
        Never: 'Null',
        WithRetries: 'u32'
      }
    },
    Scheduling: {
      _enum: ['Always', 'Dynamic']
    },
    SessionInfo: {
      validators: 'Vec<ValidatorId>',
      discoveryKeys: 'Vec<AuthorityDiscoveryId>',
      assignmentKeys: 'Vec<AssignmentId>',
      validatorGroups: 'Vec<SessionInfoValidatorGroup>',
      nCores: 'u32',
      zerothDelayTrancheWidth: 'u32',
      relayVrfModuloSamples: 'u32',
      nDelayTranches: 'u32',
      noShowSlots: 'u32',
      neededApprovals: 'u32'
    },
    SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',
    SignedAvailabilityBitfield: {
      payload: 'BitVec',
      validatorIndex: 'ParaValidatorIndex',
      signature: 'ValidatorSignature'
    },
    SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
    SigningContext: {
      sessionIndex: 'SessionIndex',
      parentHash: 'Hash'
    },
    Statement: {
      _enum: {
        Never: 'Null',
        // starts at 1
        Candidate: 'Hash',
        Valid: 'Hash',
        Invalid: 'Hash'
      }
    },
    TransientValidationData: {
      maxCodeSize: 'u32',
      maxHeadDataSize: 'u32',
      balance: 'Balance',
      codeUpgradeAllowed: 'Option<BlockNumber>',
      dmqLength: 'u32'
    },
    UpgradeGoAhead: {
      _enum: ['Abort', 'GoAhead']
    },
    UpgradeRestriction: {
      _enum: ['Present']
    },
    UpwardMessage: 'Bytes',
    ValidationFunctionParams: {
      maxCodeSize: 'u32',
      relayChainHeight: 'RelayChainBlockNumber',
      codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
    },
    ValidationCode: 'Bytes',
    ValidationCodeHash: 'Hash',
    ValidationData: {
      persisted: 'PersistedValidationData',
      transient: 'TransientValidationData'
    },
    ValidationDataType: {
      validationData: 'ValidationData',
      relayChainState: 'Vec<Bytes>'
    },
    ValidatorSignature: 'Signature',
    ValidityAttestation: {
      _enum: {
        Never: 'Null',
        // starts at 1
        Implicit: 'ValidatorSignature',
        Explicit: 'ValidatorSignature'
      }
    },
    MessagingStateSnapshot: {
      relayDispatchQueueSize: '(u32, u32)',
      egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'
    },
    MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',
    SystemInherentData: 'ParachainInherentData',
    VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'
  })
};
exports.default = _default;

},{"./hrmp.js":360,"./slots.js":361,"@polkadot/util":640}],360:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  HrmpChannel: {
    maxCapacity: 'u32',
    maxTotalSize: 'u32',
    maxMessageSize: 'u32',
    msgCount: 'u32',
    totalSize: 'u32',
    mqcHead: 'Option<Hash>',
    senderDeposit: 'Balance',
    recipientDeposit: 'Balance'
  },
  HrmpChannelId: {
    sender: 'u32',
    receiver: 'u32'
  },
  HrmpOpenChannelRequest: {
    confirmed: 'bool',
    age: 'SessionIndex',
    senderDeposit: 'Balance',
    maxMessageSize: 'u32',
    maxCapacity: 'u32',
    maxTotalSize: 'u32'
  }
};
exports.default = _default;

},{}],361:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const SLOT_RANGE_COUNT = 10;
const oldTypes = {
  Bidder: {
    _enum: {
      New: 'NewBidder',
      Existing: 'ParaId'
    }
  },
  IncomingParachain: {
    _enum: {
      Unset: 'NewBidder',
      Fixed: 'IncomingParachainFixed',
      Deploy: 'IncomingParachainDeploy'
    }
  },
  IncomingParachainDeploy: {
    code: 'ValidationCode',
    initialHeadData: 'HeadData'
  },
  IncomingParachainFixed: {
    codeHash: 'Hash',
    codeSize: 'u32',
    initialHeadData: 'HeadData'
  },
  NewBidder: {
    who: 'AccountId',
    sub: 'SubId'
  },
  SubId: 'u32'
};

var _default = (0, _util.objectSpread)({}, oldTypes, {
  AuctionIndex: 'u32',
  LeasePeriod: 'BlockNumber',
  LeasePeriodOf: 'BlockNumber',
  SlotRange: {
    _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
  },
  WinningData: `[WinningDataEntry; ${SLOT_RANGE_COUNT}]`,
  WinningDataEntry: 'Option<(AccountId, ParaId, BalanceOf)>',
  WinnersData: 'Vec<WinnersDataTuple>',
  WinnersDataTuple: '(AccountId, ParaId, BalanceOf, SlotRange)'
});

exports.default = _default;

},{"@polkadot/util":640}],362:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const QUERY_PARAMS = [{
  name: 'extrinsic',
  type: 'Bytes'
}, {
  name: 'at',
  type: 'BlockHash',
  isHistoric: true,
  isOptional: true
}];
var _default = {
  rpc: {
    queryInfo: {
      description: 'Retrieves the fee information for an encoded extrinsic',
      params: QUERY_PARAMS,
      type: 'RuntimeDispatchInfo'
    },
    queryFeeDetails: {
      description: 'Query the detailed fee of a given encoded extrinsic',
      params: QUERY_PARAMS,
      type: 'FeeDetails'
    }
  },
  types: {
    FeeDetails: {
      inclusionFee: 'Option<InclusionFee>' // skipped in serde
      // tip: 'Balance'

    },
    InclusionFee: {
      baseFee: 'Balance',
      lenFee: 'Balance',
      adjustedWeightFee: 'Balance'
    },
    RuntimeDispatchInfo: {
      weight: 'Weight',
      class: 'DispatchClass',
      partialFee: 'Balance'
    }
  }
};
exports.default = _default;

},{}],363:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    Approvals: '[bool; 4]'
  }
};
exports.default = _default;

},{}],364:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    ProxyDefinition: {
      delegate: 'AccountId',
      proxyType: 'ProxyType',
      delay: 'BlockNumber'
    },
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
    },
    ProxyAnnouncement: {
      real: 'AccountId',
      callHash: 'Hash',
      height: 'BlockNumber'
    }
  }
};
exports.default = _default;

},{}],365:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    AccountStatus: {
      validity: 'AccountValidity',
      freeBalance: 'Balance',
      lockedBalance: 'Balance',
      signature: 'Vec<u8>',
      vat: 'Permill'
    },
    AccountValidity: {
      _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
    }
  }
};
exports.default = _default;

},{}],366:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    ActiveRecovery: {
      created: 'BlockNumber',
      deposit: 'Balance',
      friends: 'Vec<AccountId>'
    },
    RecoveryConfig: {
      delayPeriod: 'BlockNumber',
      deposit: 'Balance',
      friends: 'Vec<AccountId>',
      threshold: 'u16'
    }
  }
};
exports.default = _default;

},{}],367:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    methods: {
      description: 'Retrieves the list of RPC methods that are exposed by the node',
      params: [],
      type: 'RpcMethods'
    }
  },
  types: {
    RpcMethods: {
      version: 'u32',
      methods: 'Vec<Text>'
    }
  }
};
exports.default = _default;

},{}],368:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const numberTypes = {
  Fixed64: 'Int<64, Fixed64>',
  FixedI64: 'Int<64, FixedI64>',
  FixedU64: 'UInt<64, FixedU64>',
  Fixed128: 'Int<128, Fixed128>',
  FixedI128: 'Int<128, FixedI128>',
  FixedU128: 'UInt<128, FixedU128>',
  I32F32: 'Int<64, I32F32>',
  U32F32: 'UInt<64, U32F32>',
  PerU16: 'UInt<16, PerU16>',
  Perbill: 'UInt<32, Perbill>',
  Percent: 'UInt<8, Percent>',
  Permill: 'UInt<32, Permill>',
  Perquintill: 'UInt<64, Perquintill>'
};
var _default = {
  rpc: {},
  types: (0, _util.objectSpread)({}, numberTypes, {
    AccountId: 'AccountId32',
    AccountId20: 'GenericEthereumAccountId',
    AccountId32: 'GenericAccountId',
    AccountIdOf: 'AccountId',
    AccountIndex: 'GenericAccountIndex',
    Address: 'MultiAddress',
    AssetId: 'u32',
    Balance: 'UInt<128, Balance>',
    BalanceOf: 'Balance',
    Block: 'GenericBlock',
    BlockNumber: 'u32',
    BlockNumberFor: 'BlockNumber',
    BlockNumberOf: 'BlockNumber',
    Call: 'GenericCall',
    CallHash: 'Hash',
    CallHashOf: 'CallHash',
    ChangesTrieConfiguration: {
      digestInterval: 'u32',
      digestLevels: 'u32'
    },
    ChangesTrieSignal: {
      _enum: {
        NewConfiguration: 'Option<ChangesTrieConfiguration>'
      }
    },
    ConsensusEngineId: 'GenericConsensusEngineId',
    CodecHash: 'Hash',
    CrateVersion: {
      major: 'u16',
      minor: 'u8',
      patch: 'u8'
    },
    Digest: {
      logs: 'Vec<DigestItem>'
    },
    DigestItem: {
      _enum: {
        Other: 'Bytes',
        // 0
        AuthoritiesChange: 'Vec<AuthorityId>',
        // 1
        ChangesTrieRoot: 'Hash',
        // 2
        SealV0: 'SealV0',
        // 3
        Consensus: 'Consensus',
        // 4
        Seal: 'Seal',
        // 5
        PreRuntime: 'PreRuntime',
        // 6
        ChangesTrieSignal: 'ChangesTrieSignal',
        // 7
        RuntimeEnvironmentUpdated: 'Null' // 8

      }
    },
    ExtrinsicsWeight: {
      normal: 'Weight',
      operational: 'Weight'
    },
    H32: '[u8; 4; H32]',
    H64: '[u8; 8; H64]',
    H128: '[u8; 16; H128]',
    H160: '[u8; 20; H160]',
    H256: '[u8; 32; H256]',
    H512: '[u8; 64; H512]',
    H1024: '[u8; 128; H1024]',
    H2048: '[u8; 256; H2048]',
    Hash: 'H256',
    Header: {
      parentHash: 'Hash',
      number: 'Compact<BlockNumber>',
      stateRoot: 'Hash',
      extrinsicsRoot: 'Hash',
      digest: 'Digest'
    },
    HeaderPartial: {
      parentHash: 'Hash',
      // since we only parse JSON with this, having non-compact works
      number: 'BlockNumber'
    },
    IndicesLookupSource: 'GenericLookupSource',
    Index: 'u32',
    Justification: '(ConsensusEngineId, EncodedJustification)',
    EncodedJustification: 'Bytes',
    Justifications: 'Vec<Justification>',
    KeyValue: '(StorageKey, StorageData)',
    KeyTypeId: 'u32',
    LockIdentifier: '[u8; 8]',
    LookupSource: 'MultiAddress',
    LookupTarget: 'AccountId',
    ModuleId: 'LockIdentifier',
    MultiAddress: 'GenericMultiAddress',
    MultiSigner: {
      _enum: {
        Ed25519: '[u8; 32]',
        Sr25519: '[u8; 32]',
        Ecdsa: '[u8; 33]'
      }
    },
    Moment: 'UInt<64, Moment>',
    OpaqueCall: 'Bytes',
    Origin: 'DoNotConstruct<Origin>',
    OriginCaller: {
      _enum: {
        // this should be dynamically built from the actual modules, based on index
        System: 'SystemOrigin'
      }
    },
    PalletId: 'LockIdentifier',
    PalletsOrigin: 'OriginCaller',
    PalletVersion: {
      major: 'u16',
      minor: 'u8',
      patch: 'u8'
    },
    Pays: {
      _enum: ['Yes', 'No']
    },
    Phantom: 'Null',
    PhantomData: 'Null',
    Releases: {
      _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
    },
    RuntimeDbWeight: {
      read: 'Weight',
      write: 'Weight'
    },
    SignedBlock: 'SignedBlockWithJustifications',
    SignedBlockWithJustification: {
      block: 'Block',
      justification: 'Option<EncodedJustification>'
    },
    SignedBlockWithJustifications: {
      block: 'Block',
      justifications: 'Option<Justifications>'
    },
    Slot: 'u64',
    StorageData: 'Bytes',
    StorageProof: {
      trieNodes: 'Vec<Bytes>'
    },
    TransactionPriority: 'u64',
    TransactionInfo: {
      _alias: {
        dataSize: 'size'
      },
      chunkRoot: 'H256',
      contentHash: 'H256',
      dataSize: 'u32',
      blockChunks: 'u32'
    },
    TransactionStorageProof: {
      chunk: 'Vec<u8>',
      proof: 'Vec<Vec<u8>>'
    },
    ValidatorId: 'AccountId',
    ValidatorIdOf: 'ValidatorId',
    Weight: 'u64',
    WeightMultiplier: 'Fixed64',
    // digest
    PreRuntime: '(ConsensusEngineId, Bytes)',
    SealV0: '(u64, Signature)',
    Seal: '(ConsensusEngineId, Bytes)',
    Consensus: '(ConsensusEngineId, Bytes)'
  })
};
exports.default = _default;

},{"@polkadot/util":640}],369:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _v = require("./v0.js");

var _v2 = require("./v1.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: (0, _util.objectSpread)({}, _v.v0, _v2.v1, {
    // latest mappings
    SiField: 'Si1Field',
    SiLookupTypeId: 'Si1LookupTypeId',
    SiPath: 'Si1Path',
    SiType: 'Si1Type',
    SiTypeDef: 'Si1TypeDef',
    SiTypeDefArray: 'Si1TypeDefArray',
    SiTypeDefBitSequence: 'Si1TypeDefBitSequence',
    SiTypeDefCompact: 'Si1TypeDefCompact',
    SiTypeDefComposite: 'Si1TypeDefComposite',
    SiTypeDefPrimitive: 'Si1TypeDefPrimitive',
    SiTypeDefSequence: 'Si1TypeDefSequence',
    SiTypeDefTuple: 'Si1TypeDefTuple',
    SiTypeParameter: 'Si1TypeParameter',
    SiTypeDefVariant: 'Si1TypeDefVariant',
    SiVariant: 'Si1Variant'
  })
};
exports.default = _default;

},{"./v0.js":370,"./v1.js":371,"@polkadot/util":640}],370:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v0 = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v0 = {
  Si0Field: {
    name: 'Option<Text>',
    type: 'Si0LookupTypeId',
    typeName: 'Option<Text>',
    docs: 'Vec<Text>'
  },
  Si0LookupTypeId: 'u32',
  Si0Path: 'Vec<Text>',
  Si0Type: {
    path: 'Si0Path',
    params: 'Vec<Si0LookupTypeId>',
    def: 'Si0TypeDef'
  },
  Si0TypeDef: {
    _enum: {
      Composite: 'Si0TypeDefComposite',
      Variant: 'Si0TypeDefVariant',
      Sequence: 'Si0TypeDefSequence',
      Array: 'Si0TypeDefArray',
      Tuple: 'Si0TypeDefTuple',
      Primitive: 'Si0TypeDefPrimitive',
      Compact: 'Si0TypeDefCompact',
      Phantom: 'Si0TypeDefPhantom',
      BitSequence: 'Si0TypeDefBitSequence'
    }
  },
  Si0TypeDefArray: {
    len: 'u32',
    type: 'Si0LookupTypeId'
  },
  Si0TypeDefBitSequence: {
    bitStoreType: 'Si0LookupTypeId',
    bitOrderType: 'Si0LookupTypeId'
  },
  Si0TypeDefCompact: {
    type: 'Si0LookupTypeId'
  },
  Si0TypeDefComposite: {
    fields: 'Vec<Si0Field>'
  },
  Si0TypeDefPhantom: 'Null',
  Si0TypeDefVariant: {
    variants: 'Vec<Si0Variant>'
  },
  Si0TypeDefPrimitive: {
    _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
  },
  Si0TypeDefSequence: {
    type: 'Si0LookupTypeId'
  },
  Si0TypeDefTuple: 'Vec<Si0LookupTypeId>',
  Si0TypeParameter: {
    name: 'Text',
    type: 'Option<Si0LookupTypeId>'
  },
  Si0Variant: {
    name: 'Text',
    fields: 'Vec<Si0Field>',
    index: 'Option<u8>',
    discriminant: 'Option<u64>',
    docs: 'Vec<Text>'
  }
};
exports.v0 = v0;

},{}],371:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v1 = exports.Si1Variant = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const Si1Variant = {
  name: 'Text',
  fields: 'Vec<Si1Field>',
  index: 'u8',
  docs: 'Vec<Text>'
};
exports.Si1Variant = Si1Variant;
const v1 = {
  Si1Field: {
    name: 'Option<Text>',
    type: 'Si1LookupTypeId',
    typeName: 'Option<Text>',
    docs: 'Vec<Text>'
  },
  Si1LookupTypeId: 'Compact<u32>',
  Si1Path: 'Si0Path',
  Si1Type: {
    path: 'Si1Path',
    params: 'Vec<Si1TypeParameter>',
    def: 'Si1TypeDef',
    docs: 'Vec<Text>'
  },
  Si1TypeDef: {
    _enum: {
      Composite: 'Si1TypeDefComposite',
      Variant: 'Si1TypeDefVariant',
      Sequence: 'Si1TypeDefSequence',
      Array: 'Si1TypeDefArray',
      Tuple: 'Si1TypeDefTuple',
      Primitive: 'Si1TypeDefPrimitive',
      Compact: 'Si1TypeDefCompact',
      BitSequence: 'Si1TypeDefBitSequence',
      // NOTE: This is specific to the implementation for pre-v14 metadata
      // compatibility (always keep this as the last entry in the enum)
      HistoricMetaCompat: 'Type'
    }
  },
  Si1TypeDefArray: {
    len: 'u32',
    type: 'Si1LookupTypeId'
  },
  Si1TypeDefBitSequence: {
    bitStoreType: 'Si1LookupTypeId',
    bitOrderType: 'Si1LookupTypeId'
  },
  Si1TypeDefCompact: {
    type: 'Si1LookupTypeId'
  },
  Si1TypeDefComposite: {
    fields: 'Vec<Si1Field>'
  },
  Si1TypeDefPrimitive: 'Si0TypeDefPrimitive',
  Si1TypeDefSequence: {
    type: 'Si1LookupTypeId'
  },
  Si1TypeDefTuple: 'Vec<Si1LookupTypeId>',
  Si1TypeParameter: {
    name: 'Text',
    type: 'Option<Si1LookupTypeId>'
  },
  Si1TypeDefVariant: {
    variants: 'Vec<Si1Variant>'
  },
  Si1Variant
};
exports.v1 = v1;

},{}],372:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    Period: '(BlockNumber, u32)',
    Priority: 'u8',
    SchedulePeriod: 'Period',
    SchedulePriority: 'Priority',
    Scheduled: {
      maybeId: 'Option<Bytes>',
      priority: 'SchedulePriority',
      call: 'Call',
      maybePeriodic: 'Option<SchedulePeriod>',
      origin: 'PalletsOrigin'
    },
    ScheduledTo254: {
      maybeId: 'Option<Bytes>',
      priority: 'SchedulePriority',
      call: 'Call',
      maybePeriodic: 'Option<SchedulePeriod>'
    },
    TaskAddress: '(BlockNumber, u32)'
  }
};
exports.default = _default;

},{}],373:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
// The runtime definition of SessionKeys are passed as a Trait to session
// Defined in `node/runtime/src/lib.rs` as follow
//   impl_opaque_keys! {
//     pub struct SessionKeys {
// Here we revert to tuples to keep the interfaces "opaque", as per the use
const keyTypes = {
  // key for beefy
  BeefyKey: '[u8; 33]',
  // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
  Keys: 'SessionKeys4',
  SessionKeys1: '(AccountId)',
  SessionKeys2: '(AccountId, AccountId)',
  SessionKeys3: '(AccountId, AccountId, AccountId)',
  SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
  SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys6B: '(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
  SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys7B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
  SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys8B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
  SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys9B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
  SessionKeys10: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
  SessionKeys10B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)'
};
var _default = {
  rpc: {},
  types: (0, _util.objectSpread)({}, keyTypes, {
    FullIdentification: 'Exposure',
    IdentificationTuple: '(ValidatorId, FullIdentification)',
    MembershipProof: {
      session: 'SessionIndex',
      trieNodes: 'Vec<Vec<u8>>',
      validatorCount: 'ValidatorCount'
    },
    SessionIndex: 'u32',
    ValidatorCount: 'u32'
  })
};
exports.default = _default;

},{"@polkadot/util":640}],374:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    Bid: {
      who: 'AccountId',
      kind: 'BidKind',
      value: 'Balance'
    },
    BidKind: {
      _enum: {
        Deposit: 'Balance',
        Vouch: '(AccountId, Balance)'
      }
    },
    // a society-specific Judgement (not the same as identity Judgement)
    SocietyJudgement: {
      _enum: ['Rebid', 'Reject', 'Approve']
    },
    // a society-specific Vote
    SocietyVote: {
      _enum: ['Skeptic', 'Reject', 'Approve']
    },
    StrikeCount: 'u32',
    VouchingStatus: {
      _enum: ['Vouching', 'Banned']
    }
  }
};
exports.default = _default;

},{}],375:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const deprecated = {
  Points: 'u32',
  EraPoints: {
    total: 'Points',
    individual: 'Vec<Points>'
  }
};
const phragmen = {
  CompactAssignments: 'CompactAssignmentsWith16',
  CompactAssignmentsWith16: {
    votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
    votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
    votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
    votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
    votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
    votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
    votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
    votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
    votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
    votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
    votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
    votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
    votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
    votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
    votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
    votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
  },
  CompactAssignmentsWith24: {
    votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
    votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
    votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
    votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
    votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
    votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
    votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
    votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
    votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
    votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
    votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
    votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
    votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
    votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
    votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
    votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>',
    votes17: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>',
    votes18: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>',
    votes19: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>',
    votes20: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>',
    votes21: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>',
    votes22: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>',
    votes23: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>',
    votes24: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>'
  },
  CompactAssignmentsTo265: 'CompactAssignmentsWith16',
  CompactAssignmentsTo257: {
    votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
    votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
    votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
    votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
    votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
    votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
    votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
    votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
    votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
    votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
    votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
    votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
    votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
    votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
    votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
    votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
  },
  CompactScore: '(ValidatorIndex, OffchainAccuracy)',
  CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
  ElectionCompute: {
    // in previous versions the last entry was "AuthorityId"
    // (since no data attached, and it is via SCALE can rename)
    _enum: ['OnChain', 'Signed', 'Unsigned']
  },
  ElectionPhase: {
    _enum: {
      Off: null,
      Signed: null,
      Unsigned: '(bool, BlockNumber)',
      Emergency: null
    }
  },
  ElectionResult: {
    compute: 'ElectionCompute',
    slotStake: 'Balance',
    electedStashes: 'Vec<AccountId>',
    exposures: 'Vec<(AccountId, Exposure)>'
  },
  ElectionScore: '[u128; 3]',
  ElectionSize: {
    validators: 'Compact<ValidatorIndex>',
    nominators: 'Compact<NominatorIndex>'
  },
  ElectionStatus: {
    _enum: {
      Close: 'Null',
      Open: 'BlockNumber'
    }
  },
  ExtendedBalance: 'u128',
  RawSolution: 'RawSolutionWith16',
  RawSolutionWith16: {
    compact: 'CompactAssignmentsWith16',
    score: 'ElectionScore',
    round: 'u32'
  },
  RawSolutionWith24: {
    compact: 'CompactAssignmentsWith24',
    score: 'ElectionScore',
    round: 'u32'
  },
  RawSolutionTo265: 'RawSolutionWith16',
  ReadySolution: {
    supports: 'SolutionSupports',
    score: 'ElectionScore',
    compute: 'ElectionCompute'
  },
  RoundSnapshot: {
    voters: 'Vec<(AccountId, VoteWeight, Vec<AccountId>)>',
    targets: 'Vec<AccountId>'
  },
  SeatHolder: {
    who: 'AccountId',
    stake: 'Balance',
    deposit: 'Balance'
  },
  SignedSubmission: {
    _fallback: 'SignedSubmissionTo276',
    who: 'AccountId',
    deposit: 'Balance',
    solution: 'RawSolution',
    reward: 'Balance'
  },
  SignedSubmissionTo276: {
    who: 'AccountId',
    deposit: 'Balance',
    solution: 'RawSolution'
  },
  SignedSubmissionOf: 'SignedSubmission',
  SolutionOrSnapshotSize: {
    voters: 'Compact<u32>',
    targets: 'Compact<u32>'
  },
  SolutionSupport: {
    total: 'ExtendedBalance',
    voters: 'Vec<(AccountId, ExtendedBalance)>'
  },
  SolutionSupports: 'Vec<(AccountId, SolutionSupport)>',
  Supports: 'SolutionSupports',
  SubmissionIndicesOf: 'BTreeMap<ElectionScore, u32>',
  Voter: {
    votes: 'Vec<AccountId>',
    stake: 'Balance',
    deposit: 'Balance'
  },
  VoteWeight: 'u64'
};
var _default = {
  rpc: {},
  types: (0, _util.objectSpread)({}, deprecated, phragmen, {
    ActiveEraInfo: {
      index: 'EraIndex',
      start: 'Option<Moment>'
    },
    EraIndex: 'u32',
    EraRewardPoints: {
      total: 'RewardPoint',
      individual: 'BTreeMap<AccountId, RewardPoint>'
    },
    EraRewards: {
      total: 'u32',
      rewards: 'Vec<u32>'
    },
    Exposure: {
      total: 'Compact<Balance>',
      own: 'Compact<Balance>',
      others: 'Vec<IndividualExposure>'
    },
    Forcing: {
      _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
    },
    IndividualExposure: {
      who: 'AccountId',
      value: 'Compact<Balance>'
    },
    KeyType: 'AccountId',
    MomentOf: 'Moment',
    Nominations: {
      targets: 'Vec<AccountId>',
      submittedIn: 'EraIndex',
      suppressed: 'bool'
    },
    NominatorIndex: 'u32',
    NominatorIndexCompact: 'Compact<NominatorIndex>',
    OffchainAccuracy: 'PerU16',
    OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
    PhragmenScore: '[u128; 3]',
    Points: 'u32',
    RewardDestination: {
      _enum: {
        Staked: 'Null',
        Stash: 'Null',
        Controller: 'Null',
        Account: 'AccountId',
        None: 'Null'
      }
    },
    RewardPoint: 'u32',
    SlashJournalEntry: {
      who: 'AccountId',
      amount: 'Balance',
      ownSlash: 'Balance'
    },
    SlashingSpansTo204: {
      spanIndex: 'SpanIndex',
      lastStart: 'EraIndex',
      prior: 'Vec<EraIndex>'
    },
    SlashingSpans: {
      spanIndex: 'SpanIndex',
      lastStart: 'EraIndex',
      lastNonzeroSlash: 'EraIndex',
      prior: 'Vec<EraIndex>'
    },
    SpanIndex: 'u32',
    SpanRecord: {
      slashed: 'Balance',
      paidOut: 'Balance'
    },
    StakingLedgerTo223: {
      stash: 'AccountId',
      total: 'Compact<Balance>',
      active: 'Compact<Balance>',
      unlocking: 'Vec<UnlockChunk>'
    },
    StakingLedgerTo240: {
      stash: 'AccountId',
      total: 'Compact<Balance>',
      active: 'Compact<Balance>',
      unlocking: 'Vec<UnlockChunk>',
      lastReward: 'Option<EraIndex>'
    },
    StakingLedger: {
      stash: 'AccountId',
      total: 'Compact<Balance>',
      active: 'Compact<Balance>',
      unlocking: 'Vec<UnlockChunk>',
      claimedRewards: 'Vec<EraIndex>'
    },
    UnappliedSlashOther: '(AccountId, Balance)',
    UnappliedSlash: {
      validator: 'AccountId',
      own: 'Balance',
      others: 'Vec<UnappliedSlashOther>',
      reporters: 'Vec<AccountId>',
      payout: 'Balance'
    },
    UnlockChunk: {
      value: 'Compact<Balance>',
      era: 'Compact<BlockNumber>'
    },
    ValidatorIndex: 'u16',
    ValidatorIndexCompact: 'Compact<ValidatorIndex>',
    ValidatorPrefs: 'ValidatorPrefsWithBlocked',
    ValidatorPrefsWithCommission: {
      commission: 'Compact<Perbill>'
    },
    ValidatorPrefsWithBlocked: {
      commission: 'Compact<Perbill>',
      blocked: 'bool'
    },
    ValidatorPrefsTo196: {
      validatorPayment: 'Compact<Balance>'
    },
    ValidatorPrefsTo145: {
      unstakeThreshold: 'Compact<u32>',
      validatorPayment: 'Compact<Balance>'
    }
  })
};
exports.default = _default;

},{"@polkadot/util":640}],376:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    call: {
      alias: ['state_callAt'],
      description: 'Perform a call to a builtin on the chain',
      params: [{
        name: 'method',
        type: 'Text'
      }, {
        name: 'data',
        type: 'Bytes'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Bytes'
    },
    getKeys: {
      description: 'Retrieves the keys with a certain prefix',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getPairs: {
      description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
      params: [{
        name: 'prefix',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<KeyValue>'
    },
    getKeysPaged: {
      alias: ['state_getKeysPagedAt'],
      description: 'Returns the keys with prefix with pagination support.',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'count',
        type: 'u32'
      }, {
        name: 'startKey',
        type: 'StorageKey',
        isOptional: true
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getStorage: {
      alias: ['state_getStorageAt'],
      description: 'Retrieves the storage for a key',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'StorageData'
    },
    getStorageHash: {
      alias: ['state_getStorageHashAt'],
      description: 'Retrieves the storage hash',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Hash'
    },
    getStorageSize: {
      alias: ['state_getStorageSizeAt'],
      description: 'Retrieves the storage size',
      params: [{
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'u64'
    },
    getChildKeys: {
      description: 'Retrieves the keys with prefix of a specific child storage',
      params: [{
        name: 'childStorageKey',
        type: 'StorageKey'
      }, {
        name: 'childDefinition',
        type: 'StorageKey'
      }, {
        name: 'childType',
        type: 'u32'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageKey>'
    },
    getChildStorage: {
      description: 'Retrieves the child storage for a key',
      params: [{
        name: 'childStorageKey',
        type: 'StorageKey'
      }, {
        name: 'childDefinition',
        type: 'StorageKey'
      }, {
        name: 'childType',
        type: 'u32'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'StorageData'
    },
    getChildStorageHash: {
      description: 'Retrieves the child storage hash',
      params: [{
        name: 'childStorageKey',
        type: 'StorageKey'
      }, {
        name: 'childDefinition',
        type: 'StorageKey'
      }, {
        name: 'childType',
        type: 'u32'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Hash'
    },
    getChildStorageSize: {
      description: 'Retrieves the child storage size',
      params: [{
        name: 'childStorageKey',
        type: 'StorageKey'
      }, {
        name: 'childDefinition',
        type: 'StorageKey'
      }, {
        name: 'childType',
        type: 'u32'
      }, {
        name: 'key',
        type: 'StorageKey'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'u64'
    },
    getMetadata: {
      description: 'Returns the runtime metadata',
      params: [{
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Metadata'
    },
    getRuntimeVersion: {
      alias: ['chain_getRuntimeVersion'],
      description: 'Get the runtime version',
      params: [{
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'RuntimeVersion'
    },
    queryStorage: {
      description: 'Query historical storage entries (by key) starting from a start block',
      params: [{
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'fromBlock',
        type: 'Hash'
      }, {
        name: 'toBlock',
        type: 'BlockHash',
        isOptional: true
      }],
      type: 'Vec<StorageChangeSet>'
    },
    queryStorageAt: {
      description: 'Query storage entries (by key) starting at block hash given as the second parameter',
      params: [{
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Vec<StorageChangeSet>'
    },
    getChildReadProof: {
      description: 'Returns proof of storage for child key entries at a specific block state.',
      params: [{
        name: 'childStorageKey',
        type: 'PrefixedStorageKey'
      }, {
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'ReadProof'
    },
    getReadProof: {
      description: 'Returns proof of storage entries at a specific block state',
      params: [{
        name: 'keys',
        type: 'Vec<StorageKey>'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'ReadProof'
    },
    subscribeRuntimeVersion: {
      alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
      description: 'Retrieves the runtime version via subscription',
      params: [],
      pubsub: ['runtimeVersion', 'subscribeRuntimeVersion', 'unsubscribeRuntimeVersion'],
      type: 'RuntimeVersion'
    },
    subscribeStorage: {
      description: 'Subscribes to storage changes for the provided keys',
      params: [{
        name: 'keys',
        type: 'Vec<StorageKey>',
        isOptional: true
      }],
      pubsub: ['storage', 'subscribeStorage', 'unsubscribeStorage'],
      type: 'StorageChangeSet'
    },
    traceBlock: {
      description: 'Provides a way to trace the re-execution of a single block',
      params: [{
        name: 'block',
        type: 'Hash'
      }, {
        name: 'targets',
        type: 'Option<Text>'
      }, {
        name: 'storageKeys',
        type: 'Option<Text>'
      }, {
        name: 'methods',
        type: 'Option<Text>'
      }],
      type: 'TraceBlockResponse'
    }
  },
  types: {
    ApiId: '[u8; 8]',
    BlockTrace: {
      blockHash: 'Text',
      parentHash: 'Text',
      tracingTargets: 'Text',
      storageKeys: 'Text',
      spans: 'Vec<BlockTraceSpan>',
      events: 'Vec<BlockTraceEvent>'
    },
    BlockTraceEvent: {
      target: 'Text',
      data: 'BlockTraceEventData',
      parentId: 'Option<u64>'
    },
    BlockTraceEventData: {
      stringValues: 'HashMap<Text, Text>'
    },
    BlockTraceSpan: {
      id: 'u64',
      parentId: 'Option<u64>',
      name: 'Text',
      target: 'Text',
      wasm: 'bool'
    },
    KeyValueOption: '(StorageKey, Option<StorageData>)',
    ReadProof: {
      at: 'Hash',
      proof: 'Vec<Bytes>'
    },
    RuntimeVersionApi: '(ApiId, u32)',
    RuntimeVersion: {
      specName: 'Text',
      implName: 'Text',
      authoringVersion: 'u32',
      specVersion: 'u32',
      implVersion: 'u32',
      apis: 'Vec<RuntimeVersionApi>',
      transactionVersion: 'u32'
    },
    RuntimeVersionPartial: {
      specName: 'Text',
      specVersion: 'u32'
    },
    SpecVersion: 'u32',
    StorageChangeSet: {
      block: 'Hash',
      changes: 'Vec<KeyValueOption>'
    },
    TraceBlockResponse: {
      _enum: {
        TraceError: 'TraceError',
        BlockTrace: 'BlockTrace'
      }
    },
    TraceError: {
      error: 'Text'
    }
  }
};
exports.default = _default;

},{}],377:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    WeightToFeeCoefficient: {
      coeffInteger: 'Balance',
      coeffFrac: 'Perbill',
      negative: 'bool',
      degree: 'u8'
    }
  }
};
exports.default = _default;

},{}],378:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    genSyncSpec: {
      endpoint: 'sync_state_genSyncSpec',
      description: 'Returns the json-serialized chainspec running the node, with a sync state.',
      params: [{
        name: 'raw',
        type: 'bool'
      }],
      type: 'Json'
    }
  },
  types: {}
};
exports.default = _default;

},{}],379:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {
    accountNextIndex: {
      alias: ['account_nextIndex'],
      description: 'Retrieves the next accountIndex as available on the node',
      params: [{
        name: 'accountId',
        type: 'AccountId'
      }],
      type: 'Index'
    },
    dryRun: {
      alias: ['system_dryRunAt'],
      description: 'Dry run an extrinsic at a given block',
      params: [{
        name: 'extrinsic',
        type: 'Bytes'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'ApplyExtrinsicResult'
    },
    name: {
      description: 'Retrieves the node name',
      params: [],
      type: 'Text'
    },
    version: {
      description: 'Retrieves the version of the node',
      params: [],
      type: 'Text'
    },
    chain: {
      description: 'Retrieves the chain',
      params: [],
      type: 'Text'
    },
    chainType: {
      description: 'Retrieves the chain type',
      params: [],
      type: 'ChainType'
    },
    properties: {
      description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
      params: [],
      type: 'ChainProperties'
    },
    health: {
      description: 'Return health status of the node',
      params: [],
      type: 'Health'
    },
    localPeerId: {
      description: 'Returns the base58-encoded PeerId of the node',
      params: [],
      type: 'Text'
    },
    localListenAddresses: {
      description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
      params: [],
      type: 'Vec<Text>'
    },
    peers: {
      description: 'Returns the currently connected peers',
      params: [],
      type: 'Vec<PeerInfo>'
    },
    networkState: {
      alias: ['system_unstable_networkState'],
      description: 'Returns current state of the network',
      params: [],
      type: 'NetworkState'
    },
    addReservedPeer: {
      description: 'Adds a reserved peer',
      params: [{
        name: 'peer',
        type: 'Text'
      }],
      type: 'Text'
    },
    removeReservedPeer: {
      description: 'Remove a reserved peer',
      params: [{
        name: 'peerId',
        type: 'Text'
      }],
      type: 'Text'
    },
    reservedPeers: {
      description: 'Returns the list of reserved peers',
      params: [],
      type: 'Vec<Text>'
    },
    nodeRoles: {
      description: 'Returns the roles the node is running as',
      params: [],
      type: 'Vec<NodeRole>'
    },
    syncState: {
      description: 'Returns the state of the syncing of the node',
      params: [],
      type: 'SyncState'
    },
    addLogFilter: {
      description: 'Adds the supplied directives to the current log filter',
      params: [{
        name: 'directives',
        type: 'Text'
      }],
      type: 'Null'
    },
    resetLogFilter: {
      description: 'Resets the log filter to Substrate defaults',
      params: [],
      type: 'Null'
    }
  },
  types: {
    AccountInfo: 'AccountInfoWithTripleRefCount',
    AccountInfoWithRefCountU8: {
      nonce: 'Index',
      refcount: 'u8',
      data: 'AccountData'
    },
    AccountInfoWithRefCount: {
      _fallback: 'AccountInfoWithRefCountU8',
      nonce: 'Index',
      refcount: 'RefCount',
      data: 'AccountData'
    },
    AccountInfoWithDualRefCount: {
      _fallback: 'AccountInfoWithRefCount',
      nonce: 'Index',
      consumers: 'RefCount',
      providers: 'RefCount',
      data: 'AccountData'
    },
    // original naming
    AccountInfoWithProviders: 'AccountInfoWithDualRefCount',
    AccountInfoWithTripleRefCount: {
      _fallback: 'AccountInfoWithDualRefCount',
      nonce: 'Index',
      consumers: 'RefCount',
      providers: 'RefCount',
      sufficients: 'RefCount',
      data: 'AccountData'
    },
    ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
    ArithmeticError: {
      _enum: ['Underflow', 'Overflow', 'DivisionByZero']
    },
    BlockLength: {
      max: 'PerDispatchClassU32'
    },
    BlockWeights: {
      baseBlock: 'Weight',
      maxBlock: 'Weight',
      perClass: 'PerDispatchClassWeightsPerClass'
    },
    ChainProperties: 'GenericChainProperties',
    ChainType: {
      _enum: {
        Development: 'Null',
        Local: 'Null',
        Live: 'Null',
        Custom: 'Text'
      }
    },
    ConsumedWeight: 'PerDispatchClassWeight',
    DigestOf: 'Digest',
    DispatchClass: {
      _enum: ['Normal', 'Operational', 'Mandatory']
    },
    DispatchError: {
      _enum: {
        Other: 'Null',
        CannotLookup: 'Null',
        BadOrigin: 'Null',
        Module: 'DispatchErrorModule',
        ConsumerRemaining: 'Null',
        NoProviders: 'Null',
        Token: 'TokenError',
        Arithmetic: 'ArithmeticError'
      }
    },
    DispatchErrorModule: {
      index: 'u8',
      error: 'u8'
    },
    DispatchErrorTo198: {
      module: 'Option<u8>',
      error: 'u8'
    },
    DispatchInfo: {
      weight: 'Weight',
      class: 'DispatchClass',
      paysFee: 'Pays'
    },
    DispatchInfoTo190: {
      weight: 'Weight',
      class: 'DispatchClass'
    },
    DispatchInfoTo244: {
      weight: 'Weight',
      class: 'DispatchClass',
      paysFee: 'bool'
    },
    DispatchOutcome: 'Result<(), DispatchError>',
    DispatchResult: 'Result<(), DispatchError>',
    DispatchResultOf: 'DispatchResult',
    DispatchResultTo198: 'Result<(), Text>',
    Event: 'GenericEvent',
    EventId: '[u8; 2]',
    EventIndex: 'u32',
    EventRecord: {
      phase: 'Phase',
      event: 'Event',
      topics: 'Vec<Hash>'
    },
    Health: {
      peers: 'u64',
      isSyncing: 'bool',
      shouldHavePeers: 'bool'
    },
    InvalidTransaction: {
      _enum: {
        Call: 'Null',
        Payment: 'Null',
        Future: 'Null',
        Stale: 'Null',
        BadProof: 'Null',
        AncientBirthBlock: 'Null',
        ExhaustsResources: 'Null',
        Custom: 'u8',
        BadMandatory: 'Null',
        MandatoryDispatch: 'Null'
      }
    },
    Key: 'Bytes',
    LastRuntimeUpgradeInfo: {
      specVersion: 'Compact<u32>',
      specName: 'Text'
    },
    NetworkState: {
      peerId: 'Text',
      listenedAddresses: 'Vec<Text>',
      externalAddresses: 'Vec<Text>',
      connectedPeers: 'HashMap<Text, Peer>',
      notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
      averageDownloadPerSec: 'u64',
      averageUploadPerSec: 'u64',
      peerset: 'NetworkStatePeerset'
    },
    NetworkStatePeerset: {
      messageQueue: 'u64',
      nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
    },
    NetworkStatePeersetInfo: {
      connected: 'bool',
      reputation: 'i32'
    },
    NodeRole: {
      _enum: {
        Full: 'Null',
        LightClient: 'Null',
        Authority: 'Null',
        UnknownRole: 'u8'
      }
    },
    NotConnectedPeer: {
      knownAddresses: 'Vec<Text>',
      latestPingTime: 'Option<PeerPing>',
      versionString: 'Option<Text>'
    },
    Peer: {
      enabled: 'bool',
      endpoint: 'PeerEndpoint',
      knownAddresses: 'Vec<Text>',
      latestPingTime: 'PeerPing',
      open: 'bool',
      versionString: 'Text'
    },
    PeerEndpoint: {
      listening: 'PeerEndpointAddr'
    },
    PeerEndpointAddr: {
      _alias: {
        localAddr: 'local_addr',
        sendBackAddr: 'send_back_addr'
      },
      localAddr: 'Text',
      sendBackAddr: 'Text'
    },
    PeerPing: {
      nanos: 'u64',
      secs: 'u64'
    },
    PeerInfo: {
      peerId: 'Text',
      roles: 'Text',
      protocolVersion: 'u32',
      bestHash: 'Hash',
      bestNumber: 'BlockNumber'
    },
    PerDispatchClassU32: {
      normal: 'u32',
      operational: 'u32',
      mandatory: 'u32'
    },
    PerDispatchClassWeight: {
      normal: 'Weight',
      operational: 'Weight',
      mandatory: 'Weight'
    },
    PerDispatchClassWeightsPerClass: {
      normal: 'WeightPerClass',
      operational: 'WeightPerClass',
      mandatory: 'WeightPerClass'
    },
    Phase: {
      _enum: {
        ApplyExtrinsic: 'u32',
        Finalization: 'Null',
        Initialization: 'Null'
      }
    },
    RawOrigin: {
      _enum: {
        Root: 'Null',
        Signed: 'AccountId',
        None: 'Null'
      }
    },
    RefCount: 'u32',
    RefCountTo259: 'u8',
    SyncState: {
      startingBlock: 'BlockNumber',
      currentBlock: 'BlockNumber',
      highestBlock: 'Option<BlockNumber>'
    },
    SystemOrigin: 'RawOrigin',
    TokenError: {
      _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', // these are dropped, but still in older versions
      // (if this adjusts, will need to take a re-look)
      'Underflow', 'Overflow']
    },
    TransactionValidityError: {
      _enum: {
        Invalid: 'InvalidTransaction',
        Unknown: 'UnknownTransaction'
      }
    },
    UnknownTransaction: {
      _enum: {
        CannotLookup: 'Null',
        NoUnsignedValidator: 'Null',
        Custom: 'u8'
      }
    },
    WeightPerClass: {
      baseExtrinsic: 'Weight',
      maxExtrinsic: 'Weight',
      maxTotal: 'Option<Weight>',
      reserved: 'Option<Weight>'
    }
  }
};
exports.default = _default;

},{}],380:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    Bounty: {
      proposer: 'AccountId',
      value: 'Balance',
      fee: 'Balance',
      curatorDeposit: 'Balance',
      bond: 'Balance',
      status: 'BountyStatus'
    },
    BountyIndex: 'u32',
    BountyStatus: {
      _enum: {
        Proposed: 'Null',
        Approved: 'Null',
        Funded: 'Null',
        CuratorProposed: 'BountyStatusCuratorProposed',
        Active: 'BountyStatusActive',
        PendingPayout: 'BountyStatusPendingPayout'
      }
    },
    BountyStatusActive: {
      curator: 'AccountId',
      updateDue: 'BlockNumber'
    },
    BountyStatusCuratorProposed: {
      curator: 'AccountId'
    },
    BountyStatusPendingPayout: {
      curator: 'AccountId',
      beneficiary: 'AccountId',
      unlockAt: 'BlockNumber'
    },
    OpenTip: {
      reason: 'Hash',
      who: 'AccountId',
      finder: 'AccountId',
      deposit: 'Balance',
      closes: 'Option<BlockNumber>',
      tips: 'Vec<OpenTipTip>',
      findersFee: 'bool'
    },
    OpenTipTo225: {
      reason: 'Hash',
      who: 'AccountId',
      finder: 'Option<OpenTipFinderTo225>',
      closes: 'Option<BlockNumber>',
      tips: 'Vec<OpenTipTip>'
    },
    OpenTipFinderTo225: '(AccountId, Balance)',
    OpenTipTip: '(AccountId, Balance)',
    TreasuryProposal: {
      proposer: 'AccountId',
      value: 'Balance',
      beneficiary: 'AccountId',
      bond: 'Balance'
    }
  }
};
exports.default = _default;

},{}],381:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
var _default = {
  rpc: {},
  types: {
    Multiplier: 'Fixed128'
  }
};
exports.default = _default;

},{}],382:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    ClassId: 'u32',
    InstanceId: 'u32',
    DepositBalance: 'Balance',
    DepositBalanceOf: 'Balance',
    ClassDetails: {
      owner: 'AccountId',
      issuer: 'AccountId',
      admin: 'AccountId',
      freezer: 'AccountId',
      totalDeposit: 'DepositBalance',
      freeHolding: 'bool',
      instances: 'u32',
      instanceMetadatas: 'u32',
      attributes: 'u32',
      isFrozen: 'bool'
    },
    DestroyWitness: {
      instances: 'Compact<u32>',
      instanceMetadatas: 'Compact<u32>',
      attributes: 'Compact<u32>'
    },
    InstanceDetails: {
      owner: 'AccountId',
      approved: 'Option<AccountId>',
      isFrozen: 'bool',
      deposit: 'DepositBalance'
    },
    ClassMetadata: {
      deposit: 'DepositBalance',
      data: 'Vec<u8>',
      isFrozen: 'bool'
    },
    InstanceMetadata: {
      deposit: 'DepositBalance',
      data: 'Vec<u8>',
      isFrozen: 'bool'
    }
  }
};
exports.default = _default;

},{}],383:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    Multisig: {
      when: 'Timepoint',
      deposit: 'Balance',
      depositor: 'AccountId',
      approvals: 'Vec<AccountId>'
    },
    Timepoint: {
      height: 'BlockNumber',
      index: 'u32'
    }
  }
};
exports.default = _default;

},{}],384:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
var _default = {
  rpc: {},
  types: {
    VestingInfo: {
      locked: 'Balance',
      perBlock: 'Balance',
      startingBlock: 'BlockNumber'
    }
  }
};
exports.default = _default;

},{}],385:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _typesKnown = require("@polkadot/types-known");

var _util = require("@polkadot/util");

var _v = require("./v0.js");

var _v2 = require("./v1.js");

var _v3 = require("./v2.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const XCM_LATEST = 'V2';
const xcm = {
  XcmOrigin: {
    _enum: {
      Xcm: 'MultiLocation'
    }
  },
  XcmpMessageFormat: {
    _enum: ['ConcatenatedVersionedXcm', 'ConcatenatedEncodedBlob', 'Signals']
  },
  XcmAssetId: {
    _enum: {
      Concrete: 'MultiLocation',
      Abstract: 'Bytes'
    }
  },
  InboundStatus: {
    _enum: ['Ok', 'Suspended']
  },
  OutboundStatus: {
    _enum: ['Ok', 'Suspended']
  },
  MultiAssets: 'Vec<MultiAsset>'
};
const location = {
  BodyId: {
    _enum: {
      Unit: 'Null',
      Named: 'Vec<u8>',
      Index: 'Compact<u32>',
      Executive: 'Null',
      Technical: 'Null',
      Legislative: 'Null',
      Judicial: 'Null'
    }
  },
  BodyPart: {
    _enum: {
      Voice: 'Null',
      Members: 'Compact<u32>',
      Fraction: {
        nom: 'Compact<u32>',
        denom: 'Compact<u32>'
      },
      AtLeastProportion: {
        nom: 'Compact<u32>',
        denom: 'Compact<u32>'
      },
      MoreThanProportion: {
        nom: 'Compact<u32>',
        denom: 'Compact<u32>'
      }
    }
  },
  InteriorMultiLocation: 'Junctions',
  NetworkId: {
    _enum: {
      Any: 'Null',
      Named: 'Vec<u8>',
      Polkadot: 'Null',
      Kusama: 'Null'
    }
  }
};
var _default = {
  rpc: {},
  types: (0, _util.objectSpread)({}, location, xcm, _v.v0, _v2.v1, _v3.v2, (0, _typesKnown.mapXcmTypes)(XCM_LATEST), {
    DoubleEncodedCall: {
      encoded: 'Vec<u8>'
    },
    XcmOriginKind: {
      _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
    },
    Outcome: {
      _enum: {
        Complete: 'Weight',
        Incomplete: '(Weight, XcmErrorV0)',
        Error: 'XcmErrorV0'
      }
    },
    QueryId: 'u64',
    QueryStatus: {
      _enum: {
        Pending: {
          responder: 'VersionedMultiLocation',
          maybeNotify: 'Option<(u8, u8)>',
          timeout: 'BlockNumber'
        },
        Ready: {
          response: 'VersionedResponse',
          at: 'BlockNumber'
        }
      }
    },
    QueueConfigData: {
      suspendThreshold: 'u32',
      dropThreshold: 'u32',
      resumeThreshold: 'u32',
      thresholdWeight: 'Weight',
      weightRestrictDecay: 'Weight'
    },
    VersionMigrationStage: {
      _enum: {
        MigrateSupportedVersion: 'Null',
        MigrateVersionNotifiers: 'Null',
        NotifyCurrentTargets: 'Option<Bytes>',
        MigrateAndNotifyOldTargets: 'Null'
      }
    },
    VersionedMultiAsset: {
      _enum: {
        V0: 'MultiAssetV0',
        V1: 'MultiAssetV1',
        V2: 'MultiAssetV2'
      }
    },
    VersionedMultiAssets: {
      _enum: {
        V0: 'Vec<MultiAssetV0>',
        V1: 'MultiAssetsV1',
        V2: 'MultiAssetsV2'
      }
    },
    VersionedMultiLocation: {
      _enum: {
        V0: 'MultiLocationV0',
        V1: 'MultiLocationV1',
        V2: 'MultiLocationV2'
      }
    },
    VersionedResponse: {
      V0: 'ResponseV0',
      V1: 'ResponseV1',
      V2: 'ResponseV2'
    },
    VersionedXcm: {
      _enum: {
        V0: 'XcmV0',
        V1: 'XcmV1',
        V2: 'XcmV2'
      }
    },
    XcmVersion: 'u32'
  })
};
exports.default = _default;

},{"./v0.js":386,"./v1.js":387,"./v2.js":388,"@polkadot/types-known":204,"@polkadot/util":640}],386:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v0 = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v0 = {
  FungibilityV0: 'FungibilityV1',
  WildFungibilityV0: 'WildFungibilityV1',
  AssetInstanceV0: {
    _enum: {
      Undefined: 'Null',
      Index8: 'u8',
      Index16: 'Compact<u16>',
      Index32: 'Compact<u32>',
      Index64: 'Compact<u64>',
      Index128: 'Compact<u128>',
      Array4: '[u8; 4]',
      Array8: '[u8; 8]',
      Array16: '[u8; 16]',
      Array32: '[u8; 32]',
      Blob: 'Vec<u8>'
    }
  },
  JunctionV0: {
    _enum: {
      Parent: 'Null',
      Parachain: 'Compact<u32>',
      AccountId32: {
        network: 'NetworkId',
        id: 'AccountId'
      },
      AccountIndex64: {
        network: 'NetworkId',
        index: 'Compact<u64>'
      },
      AccountKey20: {
        network: 'NetworkId',
        key: '[u8; 20]'
      },
      PalletInstance: 'u8',
      GeneralIndex: 'Compact<u128>',
      GeneralKey: 'Vec<u8>',
      OnlyChild: 'Null',
      Plurality: {
        id: 'BodyId',
        part: 'BodyPart'
      }
    }
  },
  MultiAssetV0: {
    _enum: {
      None: 'Null',
      All: 'Null',
      AllFungible: 'Null',
      AllNonFungible: 'Null',
      AllAbstractFungible: 'Vec<u8>',
      AllAbstractNonFungible: 'Vec<u8>',
      AllConcreteFungible: 'MultiLocationV0',
      AllConcreteNonFungible: 'MultiLocationV0',
      AbstractFungible: {
        id: 'Vec<u8>',
        instance: 'Compact<u128>'
      },
      AbstractNonFungible: {
        class: 'Vec<u8>',
        instance: 'AssetInstanceV0'
      },
      ConcreteFungible: {
        id: 'MultiLocationV0',
        amount: 'Compact<u128>'
      },
      ConcreteNonFungible: {
        class: 'MultiLocationV0',
        instance: 'AssetInstanceV0'
      }
    }
  },
  MultiLocationV0: {
    _enum: {
      Here: 'Null',
      X1: 'JunctionV0',
      X2: '(JunctionV0, JunctionV0)',
      X3: '(JunctionV0, JunctionV0, JunctionV0)',
      X4: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
      X5: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
      X6: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
      X7: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
      X8: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)'
    }
  },
  OriginKindV0: {
    _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
  },
  ResponseV0: {
    _enum: {
      Assets: 'Vec<MultiAssetV0>'
    }
  },
  XcmV0: {
    _enum: {
      WithdrawAsset: {
        assets: 'Vec<MultiAssetV0>',
        effects: 'Vec<XcmOrderV0>'
      },
      ReserveAssetDeposit: {
        assets: 'Vec<MultiAssetV0>',
        effects: 'Vec<XcmOrderV0>'
      },
      ReceiveTeleportedAsset: {
        assets: 'Vec<MultiAssetV0>',
        effects: 'Vec<XcmOrderV0>'
      },
      QueryResponse: {
        queryId: 'Compact<u64>',
        response: 'ResponseV0'
      },
      TransferAsset: {
        assets: 'Vec<MultiAssetV0>',
        dest: 'MultiLocationV0'
      },
      TransferReserveAsset: {
        assets: 'Vec<MultiAssetV0>',
        dest: 'MultiLocationV0',
        effects: 'Vec<XcmOrderV0>'
      },
      Transact: {
        originType: 'XcmOriginKind',
        requireWeightAtMost: 'u64',
        call: 'DoubleEncodedCall'
      },
      HrmpNewChannelOpenRequest: {
        sender: 'Compact<u32>',
        maxMessageSize: 'Compact<u32>',
        maxCapacity: 'Compact<u32>'
      },
      HrmpChannelAccepted: {
        recipient: 'Compact<u32>'
      },
      HrmpChannelClosing: {
        initiator: 'Compact<u32>',
        sender: 'Compact<u32>',
        recipient: 'Compact<u32>'
      },
      RelayedFrom: {
        who: 'MultiLocationV0',
        message: 'XcmV0'
      }
    }
  },
  XcmErrorV0: {
    _enum: {
      Undefined: 'Null',
      Overflow: 'Null',
      Unimplemented: 'Null',
      UnhandledXcmVersion: 'Null',
      UnhandledXcmMessage: 'Null',
      UnhandledEffect: 'Null',
      EscalationOfPrivilege: 'Null',
      UntrustedReserveLocation: 'Null',
      UntrustedTeleportLocation: 'Null',
      DestinationBufferOverflow: 'Null',
      SendFailed: 'Null',
      CannotReachDestination: '(MultiLocation, Xcm)',
      MultiLocationFull: 'Null',
      FailedToDecode: 'Null',
      BadOrigin: 'Null',
      ExceedsMaxMessageSize: 'Null',
      FailedToTransactAsset: 'Null',
      WeightLimitReached: 'Weight',
      Wildcard: 'Null',
      TooMuchWeightRequired: 'Null',
      NotHoldingFees: 'Null',
      WeightNotComputable: 'Null',
      Barrier: 'Null',
      NotWithdrawable: 'Null',
      LocationCannotHold: 'Null',
      TooExpensive: 'Null',
      AssetNotFound: 'Null',
      RecursionLimitReached: 'Null'
    }
  },
  XcmOrderV0: {
    _enum: {
      Null: 'Null',
      DepositAsset: {
        assets: 'Vec<MultiAssetV0>',
        dest: 'MultiLocationV0'
      },
      DepositReserveAsset: {
        assets: 'Vec<MultiAssetV0>',
        dest: 'MultiLocationV0',
        effects: 'Vec<XcmOrderV0>'
      },
      ExchangeAsset: {
        give: 'Vec<MultiAssetV0>',
        receive: 'Vec<MultiAssetV0>'
      },
      InitiateReserveWithdraw: {
        assets: 'Vec<MultiAssetV0>',
        reserve: 'MultiLocationV0',
        effects: 'Vec<XcmOrderV0>'
      },
      InitiateTeleport: {
        assets: 'Vec<MultiAsset>',
        dest: 'MultiLocationV0',
        effects: 'Vec<XcmOrderV0>'
      },
      QueryHolding: {
        queryId: 'Compact<u64>',
        dest: 'MultiLocationV0',
        assets: 'Vec<MultiAssetV0>'
      },
      BuyExecution: {
        fees: 'MultiAsset',
        weight: 'u64',
        debt: 'u64',
        haltOnError: 'bool',
        xcm: 'Vec<XcmV0>'
      }
    }
  }
};
exports.v0 = v0;

},{}],387:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v1 = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v1 = {
  AssetInstanceV1: {
    _enum: {
      Undefined: 'Null',
      Index: 'Compact<u128>',
      Array4: '[u8; 4]',
      Array8: '[u8; 8]',
      Array16: '[u8; 16]',
      Array32: '[u8; 32]',
      Blob: 'Bytes'
    }
  },
  FungibilityV1: {
    _enum: {
      Fungible: 'Compact<u128>',
      NonFungible: 'AssetInstanceV1'
    }
  },
  JunctionV1: {
    _enum: {
      Parachain: 'Compact<u32>',
      AccountId32: {
        network: 'NetworkId',
        id: 'AccountId'
      },
      AccountIndex64: {
        network: 'NetworkId',
        index: 'Compact<u64>'
      },
      AccountKey20: {
        network: 'NetworkId',
        key: '[u8; 20]'
      },
      PalletInstance: 'u8',
      GeneralIndex: 'Compact<u128>',
      GeneralKey: 'Vec<u8>',
      OnlyChild: 'Null',
      Plurality: {
        id: 'BodyId',
        part: 'BodyPart'
      }
    }
  },
  JunctionsV1: {
    _enum: {
      Here: 'Null',
      X1: 'JunctionV1',
      X2: '(JunctionV1, JunctionV1)',
      X3: '(JunctionV1, JunctionV1, JunctionV1)',
      X4: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
      X5: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
      X6: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
      X7: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
      X8: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)'
    }
  },
  MultiAssetsV1: 'Vec<MultiAssetV1>',
  MultiAssetV1: {
    id: 'XcmAssetId',
    fungibility: 'FungibilityV1'
  },
  MultiAssetFilterV1: {
    _enum: {
      Definite: 'MultiAssetsV1',
      Wild: 'WildMultiAssetV1'
    }
  },
  MultiLocationV1: {
    parents: 'u8',
    interior: 'JunctionsV1'
  },
  OriginKindV1: 'OriginKindV0',
  ResponseV1: {
    _enum: {
      Assets: 'MultiAssetsV1'
    }
  },
  WildFungibilityV1: {
    _enum: ['Fungible', 'NonFungible']
  },
  WildMultiAssetV1: {
    _enum: {
      All: 'Null',
      AllOf: {
        id: 'XcmAssetId',
        fungibility: 'WildFungibilityV1'
      }
    }
  },
  XcmV1: {
    _enum: {
      WithdrawAsset: {
        assets: 'MultiAssetsV1',
        effects: 'Vec<XcmOrderV1>'
      },
      ReserveAssetDeposit: {
        assets: 'MultiAssetsV1',
        effects: 'Vec<XcmOrderV1>'
      },
      ReceiveTeleportedAsset: {
        assets: 'MultiAssetsV1',
        effects: 'Vec<XcmOrderV1>'
      },
      QueryResponse: {
        queryId: 'Compact<u64>',
        response: 'ResponseV1'
      },
      TransferAsset: {
        assets: 'MultiAssetsV1',
        dest: 'MultiLocationV1'
      },
      TransferReserveAsset: {
        assets: 'MultiAssetsV1',
        dest: 'MultiLocationV1',
        effects: 'Vec<XcmOrderV1>'
      },
      Transact: {
        originType: 'XcmOriginKind',
        requireWeightAtMost: 'u64',
        call: 'DoubleEncodedCall'
      },
      HrmpNewChannelOpenRequest: {
        sender: 'Compact<u32>',
        maxMessageSize: 'Compact<u32>',
        maxCapacity: 'Compact<u32>'
      },
      HrmpChannelAccepted: {
        recipient: 'Compact<u32>'
      },
      HrmpChannelClosing: {
        initiator: 'Compact<u32>',
        sender: 'Compact<u32>',
        recipient: 'Compact<u32>'
      },
      RelayedFrom: {
        who: 'MultiLocationV1',
        message: 'XcmV1'
      }
    }
  },
  XcmErrorV1: {
    _enum: {
      Undefined: 'Null',
      Overflow: 'Null',
      Unimplemented: 'Null',
      UnhandledXcmVersion: 'Null',
      UnhandledXcmMessage: 'Null',
      UnhandledEffect: 'Null',
      EscalationOfPrivilege: 'Null',
      UntrustedReserveLocation: 'Null',
      UntrustedTeleportLocation: 'Null',
      DestinationBufferOverflow: 'Null',
      SendFailed: 'Null',
      CannotReachDestination: '(MultiLocationV1, XcmV1)',
      MultiLocationFull: 'Null',
      FailedToDecode: 'Null',
      BadOrigin: 'Null',
      ExceedsMaxMessageSize: 'Null',
      FailedToTransactAsset: 'Null',
      WeightLimitReached: 'Weight',
      Wildcard: 'Null',
      TooMuchWeightRequired: 'Null',
      NotHoldingFees: 'Null',
      WeightNotComputable: 'Null',
      Barrier: 'Null',
      NotWithdrawable: 'Null',
      LocationCannotHold: 'Null',
      TooExpensive: 'Null',
      AssetNotFound: 'Null',
      DestinationUnsupported: 'Null',
      RecursionLimitReached: 'Null'
    }
  },
  XcmOrderV1: {
    _enum: {
      Noop: 'Null',
      DepositAsset: {
        assets: 'MultiAssetFilterV1',
        maxAssets: 'u32',
        beneficiary: 'MultiLocationV1'
      },
      DepositReserveAsset: {
        assets: 'MultiAssetFilterV1',
        maxAssets: 'u32',
        dest: 'MultiLocationV1',
        effects: 'Vec<XcmOrderV1>'
      },
      ExchangeAsset: {
        give: 'MultiAssetFilterV1',
        receive: 'MultiAssetsV1'
      },
      InitiateReserveWithdraw: {
        assets: 'MultiAssetFilterV1',
        reserve: 'MultiLocationV1',
        effects: 'Vec<XcmOrderV1>'
      },
      InitiateTeleport: {
        assets: 'MultiAssetFilterV1',
        dest: 'MultiLocationV1',
        effects: 'Vec<XcmOrderV1>'
      },
      QueryHolding: {
        queryId: 'Compact<u64>',
        dest: 'MultiLocationV1',
        assets: 'MultiAssetFilterV1'
      },
      BuyExecution: {
        fees: 'MultiAssetV1',
        weight: 'u64',
        debt: 'u64',
        haltOnError: 'bool',
        instructions: 'Vec<XcmV1>'
      }
    }
  }
};
exports.v1 = v1;

},{}],388:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.v2 = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// order important in structs... :)

/* eslint-disable sort-keys */
const v2 = {
  AssetInstanceV2: 'AssetInstanceV1',
  FungibilityV2: 'FungibilityV1',
  JunctionV2: 'JunctionV1',
  JunctionsV2: 'JunctionsV1',
  MultiAssetsV2: 'MultiAssetsV1',
  MultiAssetV2: 'MultiAssetV1',
  MultiAssetFilterV2: 'MultiAssetFilterV1',
  MultiLocationV2: 'MultiLocationV1',
  OriginKindV2: 'OriginKindV1',
  WildFungibilityV2: 'WildFungibilityV1',
  ResponseV2: {
    _enum: {
      Null: 'Null',
      Assets: 'MultiAssetsV2',
      ExecutionResult: 'ResponseV2Result'
    }
  },
  ResponseV2Error: '(u32, XcmErrorV2)',
  ResponseV2Result: 'Result<Null, ResponseV2Error>',
  WeightLimitV2: {
    _enum: {
      Unlimited: 'Null',
      Limited: 'Compact<u64>'
    }
  },
  InstructionV2: {
    _enum: {
      WithdrawAsset: 'MultiAssetsV2',
      ReserveAssetDeposited: 'MultiAssetsV2',
      ReceiveTeleportedAsset: 'MultiAssetsV2',
      QueryResponse: {
        queryId: 'Compact<u64>',
        response: 'ResponseV2',
        maxWeight: 'Compact<u64>'
      },
      TransferAsset: {
        assets: 'MultiAssetsV2',
        beneficiary: 'MultiLocationV2'
      },
      TransferReserveAsset: {
        assets: 'MultiAssetsV2',
        dest: 'MultiLocationV2',
        xcm: 'XcmV2'
      },
      Transact: {
        originType: 'OriginKindV2',
        requireWeightAtMost: 'u64',
        call: 'DoubleEncodedCall'
      },
      HrmpNewChannelOpenRequest: {
        sender: 'Compact<u32>',
        maxMessageSize: 'Compact<u32>',
        maxCapacity: 'Compact<u32>'
      },
      HrmpChannelAccepted: {
        recipient: 'Compact<u32>'
      },
      HrmpChannelClosing: {
        initiator: 'Compact<u32>',
        sender: 'Compact<u32>',
        recipient: 'Compact<u32>'
      },
      ClearOrigin: 'Null',
      DescendOrigin: 'InteriorMultiLocation',
      ReportError: {
        queryId: 'Compact<u64>',
        dest: 'MultiLocationV2',
        maxResponseWeight: 'Compact<u64>'
      },
      DepositAsset: {
        assets: 'MultiAssetFilterV2',
        maxAssets: 'u32',
        beneficiary: 'MultiLocationV2'
      },
      DepositReserveAsset: {
        assets: 'MultiAssetFilterV2',
        maxAssets: 'u32',
        dest: 'MultiLocationV2',
        xcm: 'XcmV2'
      },
      ExchangeAsset: {
        give: 'MultiAssetFilterV2',
        receive: 'MultiAssetsV2'
      },
      InitiateReserveWithdraw: {
        assets: 'MultiAssetFilterV2',
        reserve: 'MultiLocationV2',
        xcm: 'XcmV2'
      },
      InitiateTeleport: {
        assets: 'MultiAssetFilterV2',
        dest: 'MultiLocationV2',
        xcm: 'XcmV2'
      },
      QueryHolding: {
        query_id: 'Compact<u64>',
        dest: 'MultiLocationV2',
        assets: 'MultiAssetFilterV2',
        maxResponse_Weight: 'Compact<u64>'
      },
      BuyExecution: {
        fees: 'MultiAssetV2',
        weightLimit: 'WeightLimitV2'
      },
      RefundSurplus: 'Null',
      SetErrorHandler: 'XcmV2',
      SetAppendix: 'XcmV2',
      ClearError: 'Null',
      ClaimAsset: {
        assets: 'MultiAssetsV2',
        ticket: 'MultiLocationV2'
      },
      Trap: 'u64'
    }
  },
  WildMultiAssetV2: 'WildMultiAssetV1',
  XcmV2: 'Vec<InstructionV2>',
  XcmErrorV2: {
    _enum: {
      Undefined: 'Null',
      Overflow: 'Null',
      Unimplemented: 'Null',
      UnhandledXcmVersion: 'Null',
      UnhandledXcmMessage: 'Null',
      UnhandledEffect: 'Null',
      EscalationOfPrivilege: 'Null',
      UntrustedReserveLocation: 'Null',
      UntrustedTeleportLocation: 'Null',
      DestinationBufferOverflow: 'Null',
      MultiLocationFull: 'Null',
      MultiLocationNotInvertible: 'Null',
      FailedToDecode: 'Null',
      BadOrigin: 'Null',
      ExceedsMaxMessageSize: 'Null',
      FailedToTransactAsset: 'Null',
      WeightLimitReached: 'Weight',
      Wildcard: 'Null',
      TooMuchWeightRequired: 'Null',
      NotHoldingFees: 'Null',
      WeightNotComputable: 'Null',
      Barrier: 'Null',
      NotWithdrawable: 'Null',
      LocationCannotHold: 'Null',
      TooExpensive: 'Null',
      AssetNotFound: 'Null',
      DestinationUnsupported: 'Null',
      RecursionLimitReached: 'Null',
      Transport: 'Null',
      Unroutable: 'Null',
      UnknownWeightRequired: 'Null',
      Trap: 'u64',
      UnknownClaim: 'Null',
      InvalidLocation: 'Null'
    }
  },
  XcmOrderV2: 'XcmOrderV1'
};
exports.v2 = v2;

},{}],389:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MagicNumber = exports.MAGIC_NUMBER = void 0;

var _util = require("@polkadot/util");

var _index = require("../primitive/index.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding

exports.MAGIC_NUMBER = MAGIC_NUMBER;

class MagicNumber extends _index.U32 {
  constructor(registry, value) {
    super(registry, value);

    if (!this.isEmpty) {
      (0, _util.assert)(this.eq(MAGIC_NUMBER), () => `MagicNumber mismatch: expected ${registry.createType('u32', MAGIC_NUMBER).toHex()}, found ${this.toHex()}`);
    }
  }

}

exports.MagicNumber = MagicNumber;

},{"../primitive/index.js":445,"@polkadot/util":640}],390:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Metadata = void 0;

var _util = require("@polkadot/util");

var _MetadataVersioned = require("./MetadataVersioned.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// magic u32 preceding the version id
const VERSION_IDX = 4; // magic + lowest supported version

const EMPTY_METADATA = new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]);

function toU8a(value) {
  return (0, _util.isHex)(value) ? toU8a((0, _util.u8aToU8a)(value)) : value.length === 0 ? EMPTY_METADATA : value;
}

function decodeU8a(registry, value) {
  try {
    return new _MetadataVersioned.MetadataVersioned(registry, value);
  } catch (error) {
    // This is an f-ing hack as a follow-up to another ugly hack
    // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
    // when we fail on V9, try to re-parse it as v10... yes... HACK
    if (value[VERSION_IDX] === 9) {
      value[VERSION_IDX] = 10;
      return decodeU8a(registry, value);
    }

    throw error;
  }
}
/**
 * @name Metadata
 * @description
 * The versioned runtime metadata as a decoded structure
 */


class Metadata extends _MetadataVersioned.MetadataVersioned {
  constructor(registry, value) {
    super(registry, (0, _util.isU8a)(value) || (0, _util.isHex)(value) ? decodeU8a(registry, toU8a(value)) : new _MetadataVersioned.MetadataVersioned(registry, value));
  }

}

exports.Metadata = Metadata;

},{"./MetadataVersioned.js":391,"@polkadot/util":640}],391:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetadataVersioned = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _index = require("../codec/index.js");

var _toV = require("./v9/toV10.js");

var _toV2 = require("./v10/toV11.js");

var _toV3 = require("./v11/toV12.js");

var _toV4 = require("./v12/toV13.js");

var _toV5 = require("./v13/toV14.js");

var _toLatest = require("./v14/toLatest.js");

var _MagicNumber = require("./MagicNumber.js");

var _index2 = require("./util/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const LATEST_VERSION = 14;
/**
 * @name MetadataVersioned
 * @description
 * The versioned runtime metadata as a decoded structure
 */

var _converted = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("converted");

var _assertVersion = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("assertVersion");

var _getVersion = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("getVersion");

var _metadata = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("metadata");

class MetadataVersioned extends _index.Struct {
  constructor(registry, value) {
    // console.time('MetadataVersioned')
    super(registry, {
      magicNumber: _MagicNumber.MagicNumber,
      metadata: 'MetadataAll'
    }, value); // console.timeEnd('MetadataVersioned')

    Object.defineProperty(this, _converted, {
      writable: true,
      value: new Map()
    });
    Object.defineProperty(this, _assertVersion, {
      writable: true,
      value: version => {
        (0, _util.assert)(this.version <= version, () => `Cannot convert metadata from version ${this.version} to ${version}`);
        return this.version === version;
      }
    });
    Object.defineProperty(this, _getVersion, {
      writable: true,
      value: (version, fromPrev) => {
        const asCurr = `asV${version}`;
        const asPrev = version === 'latest' ? `asV${LATEST_VERSION}` : `asV${version - 1}`;

        if (version !== 'latest' && (0, _classPrivateFieldLooseBase2.default)(this, _assertVersion)[_assertVersion](version)) {
          return (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata]()[asCurr];
        }

        if (!(0, _classPrivateFieldLooseBase2.default)(this, _converted)[_converted].has(version)) {
          (0, _classPrivateFieldLooseBase2.default)(this, _converted)[_converted].set(version, fromPrev(this.registry, this[asPrev], this.version));
        }

        return (0, _classPrivateFieldLooseBase2.default)(this, _converted)[_converted].get(version);
      }
    });
    Object.defineProperty(this, _metadata, {
      writable: true,
      value: () => {
        return this.get('metadata');
      }
    });
  }
  /**
   * @description Returns the wrapped metadata as a limited calls-only (latest) version
   */


  get asCallsOnly() {
    return new MetadataVersioned(this.registry, {
      magicNumber: this.magicNumber,
      metadata: this.registry.createType('MetadataAll', (0, _index2.toCallsOnly)(this.registry, this.asLatest), LATEST_VERSION)
    });
  }
  /**
   * @description Returns the wrapped metadata as a V9 object
   */


  get asV9() {
    (0, _classPrivateFieldLooseBase2.default)(this, _assertVersion)[_assertVersion](9);

    return (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata]().asV9;
  }
  /**
   * @description Returns the wrapped values as a V10 object
   */


  get asV10() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion](10, _toV.toV10);
  }
  /**
   * @description Returns the wrapped values as a V11 object
   */


  get asV11() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion](11, _toV2.toV11);
  }
  /**
   * @description Returns the wrapped values as a V12 object
   */


  get asV12() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion](12, _toV3.toV12);
  }
  /**
   * @description Returns the wrapped values as a V13 object
   */


  get asV13() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion](13, _toV4.toV13);
  }
  /**
   * @description Returns the wrapped values as a V14 object
   */


  get asV14() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion](14, _toV5.toV14);
  }
  /**
   * @description Returns the wrapped values as a latest version object
   */


  get asLatest() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _getVersion)[_getVersion]('latest', _toLatest.toLatest);
  }
  /**
   * @description The magicNumber for the Metadata (known constant)
   */


  get magicNumber() {
    return this.get('magicNumber');
  }
  /**
   * @description the metadata version this structure represents
   */


  get version() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _metadata)[_metadata]().index;
  }

  getUniqTypes(throwError) {
    return (0, _index2.getUniqTypes)(this.registry, this.asLatest, throwError);
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    // HACK(y): ensure that we apply the aliases if we have not done so already, this is
    // needed to ensure we have the correct overrides (which is only applied in toLatest)
    // eslint-disable-next-line no-unused-expressions
    this.asLatest;
    return super.toJSON();
  }

}

exports.MetadataVersioned = MetadataVersioned;

},{"../codec/index.js":256,"./MagicNumber.js":389,"./util/index.js":414,"./v10/toV11.js":417,"./v11/toV12.js":418,"./v12/toV13.js":419,"./v13/toV14.js":420,"./v14/toLatest.js":421,"./v9/toV10.js":422,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],392:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PortableRegistry = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Struct = require("../../codec/Struct.js");

var _encodeTypes = require("../../create/encodeTypes.js");

var _getTypeDef = require("../../create/getTypeDef.js");

var _sanitize = require("../../create/sanitize.js");

var _index = require("../../types/index.js");

var _util2 = require("./util.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Just a placeholder for a type.unrwapOr()
const TYPE_UNWRAP = {
  toNumber: () => -1
}; // Alias the primitive enum with out known values

const PRIMITIVE_ALIAS = {
  Char: 'u32',
  // Rust char is 4-bytes
  Str: 'Text'
}; // These are types where we have a specific decoding/encoding override + helpers

const PATHS_ALIAS = splitNamespace([// These come in different forms
//   - node_runtime::Call
//   - polkadot_runtime::Call
//   - node_template_runtime::Call
//   - interbtc_runtime_parachain::Call
'*_runtime_*::Call', '*_runtime_*::Event', // these have a specific encoding or logic (for pallets)
'pallet_democracy::vote::Vote', 'pallet_identity::types::Data', // these are well-known types with additional encoding
'sp_core::crypto::AccountId32', 'sp_runtime::generic::era::Era', 'sp_runtime::multiaddress::MultiAddress', // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
'account::AccountId20', 'polkadot_runtime_common::claims::EthereumAddress', // shorten some well-known types
'primitive_types::*', 'sp_arithmetic::per_things::*', // ink!
'ink_env::types::*']); // Mappings for types that should be converted to set via BitVec

const PATHS_SET = splitNamespace(['pallet_identity::types::BitFlags']); // These we never use these as top-level names, they are wrappers

const WRAPPERS = ['BoundedBTreeMap', 'BoundedVec', 'Box', 'BTreeMap', 'Cow', 'Result', 'Option', 'WeakBoundedVec', 'WrapperOpaque']; // These are reserved and/or conflicts with built-in Codec or JS definitions

const RESERVED = ['entries', 'hash', 'keys', 'new', 'size']; // Remove these from all paths at index 1

const PATH_RM_INDEX_1 = ['generic', 'misc', 'pallet', 'traits', 'types'];

function splitNamespace(values) {
  return values.map(v => v.split('::'));
}

function createNamespace({
  path
}) {
  return sanitizeDocs(path).join('::');
}

function sanitizeDocs(docs) {
  return docs.map(d => d.toString());
}

function matchParts(first, second) {
  return first.length === second.length && first.every((a, index) => {
    const b = second[index].toString();

    if (a === '*' || a === b) {
      return true;
    }

    if (a.includes('*') && a.includes('_') && b.includes('_')) {
      let suba = a.split('_');
      let subb = b.split('_'); // match initial *'s to multiples if we have a match for the other

      if (suba[0] === '*') {
        const indexOf = subb.indexOf(suba[1]);

        if (indexOf !== -1) {
          suba = suba.slice(1);
          subb = subb.slice(indexOf);
        }
      } // check for * matches at the end, adjust accordingly


      if (suba.length === 2 && suba[1] === '*' && suba[0] === subb[0]) {
        return true;
      }

      return matchParts(suba, subb);
    }

    return false;
  });
} // check if the path matches the PATHS_ALIAS (with wildcards)


function getAliasPath(path) {
  // TODO We need to handle ink! Balance in some way
  return path.length && PATHS_ALIAS.some(p => matchParts(p, path)) ? path[path.length - 1].toString() : null;
}

function hasNoDupes(input) {
  for (let i = 0; i < input.length; i++) {
    const [ai, an] = input[i];

    for (let j = 0; j < input.length; j++) {
      const [bi, bn] = input[j]; // if the indexes are not the same and the names match, we have a dupe

      if (ai !== bi && an === bn) {
        return false;
      }
    }
  }

  return true;
}

function removeDuplicateNames(lookup, names) {
  const rewrite = {};
  return names.map(([lookupIndex, name, params]) => {
    if (!name) {
      return null;
    } // those where the name is matching (since name is filtered, these all do have names)


    const allSame = names.filter(([, oName]) => name === oName); // are there among matching names

    const anyDiff = allSame.some(([oIndex,, oParams]) => lookupIndex !== oIndex && (params.length !== oParams.length || params.some((p, index) => !p.name.eq(oParams[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== oParams[index].type.unwrapOr(TYPE_UNWRAP).toNumber()))); // everything matches, we can combine these

    if (!anyDiff || !allSame[0][2].length) {
      return [lookupIndex, name, params];
    } // find the first parameter that yields differences


    const paramIdx = allSame[0][2].findIndex(({
      type
    }, index) => allSame.every(([,, params]) => params[index].type.isSome) && allSame.every(([,, params], aIndex) => aIndex === 0 || !params[index].type.eq(type))); // No param found that is different

    if (paramIdx === -1) {
      return [lookupIndex, name, params];
    } // see if using the param type helps


    const adjusted = new Array(allSame.length);

    for (let i = 0; i < allSame.length; i++) {
      const [oIndex, oName, oParams] = allSame[i];
      const {
        def,
        path
      } = lookup.getSiType(oParams[paramIdx].type.unwrap());

      if (!def.isPrimitive && !path.length) {
        return null;
      }

      adjusted[i] = [oIndex, def.isPrimitive ? `${oName}${def.asPrimitive.toString()}` : `${oName}${path[path.length - 1].toString()}`, params];
    }

    if (hasNoDupes(adjusted)) {
      for (let i = 0; i < adjusted.length; i++) {
        const [index, name] = adjusted[i];
        rewrite[index] = name;
      }

      return [lookupIndex, name, params];
    }

    return null;
  }).filter(n => !!n).map(([lookupIndex, name, params]) => [lookupIndex, rewrite[lookupIndex] || name, params]);
}

function extractName(types, {
  id,
  type: {
    params,
    path
  }
}) {
  // if we have no path or determined as a wrapper, we just skip it
  if (!path.length || WRAPPERS.includes(path[path.length - 1].toString())) {
    return null;
  }

  const parts = path.map(p => (0, _util.stringPascalCase)(p)).filter((p, index) => {
    const lower = p.toLowerCase();
    return ( // Remove ::{generic, misc, pallet, traits, types}::
    index !== 1 || !PATH_RM_INDEX_1.includes(lower)) && ( // sp_runtime::generic::digest::Digest -> sp_runtime::generic::Digest
    // sp_runtime::multiaddress::MultiAddress -> sp_runtime::MultiAddress
    index === path.length - 1 || lower !== path[index + 1].toLowerCase());
  });
  let typeName = parts.join(''); // do magic for RawOrigin lookup, e.g. pallet_collective::RawOrigin

  if (parts.length === 2 && parts[1] === 'RawOrigin' && params.length === 2 && params[1].type.isSome) {
    const instanceType = types[params[1].type.unwrap().toNumber()];

    if (instanceType.type.path.length === 2) {
      typeName = `${typeName}${instanceType.type.path[1].toString()}`;
    }
  }

  return [id.toNumber(), typeName, params];
}

function registerTypes(lookup, lookups, names, params) {
  // Register the types we extracted
  lookup.registry.register(lookups); // Try and extract the AccountId/Address/Signature type from UncheckedExtrinsic

  if (params.SpRuntimeUncheckedExtrinsic) {
    // Address, Call, Signature, Extra
    const [addrParam,, sigParam] = params.SpRuntimeUncheckedExtrinsic;
    const siAddress = lookup.getSiType(addrParam.type.unwrap());
    const siSignature = lookup.getSiType(sigParam.type.unwrap());
    const nsSignature = createNamespace(siSignature);
    let nsAccountId = createNamespace(siAddress);
    const isMultiAddress = nsAccountId === 'sp_runtime::multiaddress::MultiAddress'; // With multiaddress, we check the first type param again

    if (isMultiAddress) {
      // AccountId, AccountIndex
      const [idParam] = siAddress.params;
      nsAccountId = createNamespace(lookup.getSiType(idParam.type.unwrap()));
    }

    lookup.registry.register({
      AccountId: ['sp_core::crypto::AccountId32'].includes(nsAccountId) ? 'AccountId32' : ['account::AccountId20', 'primitive_types::H160'].includes(nsAccountId) ? 'AccountId20' : 'AccountId32',
      // other, default to AccountId32
      Address: isMultiAddress ? 'MultiAddress' : 'AccountId',
      ExtrinsicSignature: ['sp_runtime::MultiSignature'].includes(nsSignature) ? 'MultiSignature' : names[sigParam.type.unwrap().toNumber()] || 'MultiSignature'
    });
  }
}

function extractTypeInfo(lookup, portable) {
  const nameInfo = [];
  const types = {};

  for (let i = 0; i < portable.length; i++) {
    const type = portable[i];
    const extracted = extractName(portable, portable[i]);

    if (extracted) {
      nameInfo.push(extracted);
    }

    types[type.id.toNumber()] = type;
  }

  const dedup = removeDuplicateNames(lookup, nameInfo);
  const lookups = {};
  const names = {};
  const params = {};

  for (let i = 0; i < dedup.length; i++) {
    const [lookupIndex, name, p] = dedup[i];
    names[lookupIndex] = name;
    lookups[name] = lookup.registry.createLookupType(lookupIndex);
    params[name] = p;
  }

  return [types, lookups, names, params];
}

var _names = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("names");

var _typeDefs = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("typeDefs");

var _types = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("types");

var _createSiDef = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("createSiDef");

var _getLookupId = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("getLookupId");

var _extract = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extract");

var _extractArray = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractArray");

var _extractBitSequence = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractBitSequence");

var _extractCompact = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractCompact");

var _extractComposite = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractComposite");

var _extractCompositeSet = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractCompositeSet");

var _extractFields = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractFields");

var _extractFieldsAlias = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractFieldsAlias");

var _extractHistoric = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractHistoric");

var _extractPrimitive = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractPrimitive");

var _extractAliasPath = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractAliasPath");

var _extractSequence = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractSequence");

var _extractTuple = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractTuple");

var _extractVariant = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractVariant");

var _extractVariantEnum = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("extractVariantEnum");

class PortableRegistry extends _Struct.Struct {
  constructor(registry, value) {
    // console.time('PortableRegistry')
    super(registry, {
      types: 'Vec<PortableType>'
    }, value);
    Object.defineProperty(this, _extractVariantEnum, {
      value: _extractVariantEnum2
    });
    Object.defineProperty(this, _extractVariant, {
      value: _extractVariant2
    });
    Object.defineProperty(this, _extractTuple, {
      value: _extractTuple2
    });
    Object.defineProperty(this, _extractSequence, {
      value: _extractSequence2
    });
    Object.defineProperty(this, _extractAliasPath, {
      value: _extractAliasPath2
    });
    Object.defineProperty(this, _extractPrimitive, {
      value: _extractPrimitive2
    });
    Object.defineProperty(this, _extractHistoric, {
      value: _extractHistoric2
    });
    Object.defineProperty(this, _extractFieldsAlias, {
      value: _extractFieldsAlias2
    });
    Object.defineProperty(this, _extractFields, {
      value: _extractFields2
    });
    Object.defineProperty(this, _extractCompositeSet, {
      value: _extractCompositeSet2
    });
    Object.defineProperty(this, _extractComposite, {
      value: _extractComposite2
    });
    Object.defineProperty(this, _extractCompact, {
      value: _extractCompact2
    });
    Object.defineProperty(this, _extractBitSequence, {
      value: _extractBitSequence2
    });
    Object.defineProperty(this, _extractArray, {
      value: _extractArray2
    });
    Object.defineProperty(this, _extract, {
      value: _extract2
    });
    Object.defineProperty(this, _getLookupId, {
      value: _getLookupId2
    });
    Object.defineProperty(this, _createSiDef, {
      value: _createSiDef2
    });
    Object.defineProperty(this, _names, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _typeDefs, {
      writable: true,
      value: {}
    });
    Object.defineProperty(this, _types, {
      writable: true,
      value: void 0
    });
    const [types, lookups, names, _params] = extractTypeInfo(this, this.types);
    (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names] = names;
    (0, _classPrivateFieldLooseBase2.default)(this, _types)[_types] = types;
    registerTypes(this, lookups, names, _params); // console.timeEnd('PortableRegistry')
  }

  get names() {
    return Object.values((0, _classPrivateFieldLooseBase2.default)(this, _names)[_names]);
  }
  /**
   * @description The types of the registry
   */


  get types() {
    return this.get('types');
  }
  /**
   * @description Returns the name for a specific lookup
   */


  getName(lookupId) {
    return (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][(0, _classPrivateFieldLooseBase2.default)(this, _getLookupId)[_getLookupId](lookupId)];
  }
  /**
   * @description Finds a specific type in the registry
   */


  getSiType(lookupId) {
    // NOTE catch-22 - this may already be used as part of the constructor, so
    // ensure that we have actually initialized it correctly
    const found = ((0, _classPrivateFieldLooseBase2.default)(this, _types)[_types] || this.types)[(0, _classPrivateFieldLooseBase2.default)(this, _getLookupId)[_getLookupId](lookupId)];

    (0, _util.assert)(found, () => `PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
    return found.type;
  }
  /**
   * @description Lookup the type definition for the index
   */


  getTypeDef(lookupId) {
    const lookupIndex = (0, _classPrivateFieldLooseBase2.default)(this, _getLookupId)[_getLookupId](lookupId);

    if (!(0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex]) {
      const lookupName = (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex];

      const empty = {
        info: _index.TypeDefInfo.DoNotConstruct,
        lookupIndex,
        lookupName,
        type: this.registry.createLookupType(lookupIndex)
      }; // Set named items since we will get into circular lookups along the way

      if (lookupName) {
        (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex] = empty;
      }

      const extracted = (0, _classPrivateFieldLooseBase2.default)(this, _extract)[_extract](this.getSiType(lookupId), lookupIndex); // For non-named items, we only set this right at the end


      if (!lookupName) {
        (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex] = empty;
      }

      Object.keys(extracted).forEach(k => {
        if (k !== 'lookupName' || extracted[k]) {
          // these are safe since we are looking through the keys as set
          (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex][k] = extracted[k];
        }
      }); // don't set lookupName on lower-level, we want to always direct to the type

      if (extracted.info === _index.TypeDefInfo.Plain) {
        (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex].lookupNameRoot = (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
        delete (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
      }
    }

    return (0, _classPrivateFieldLooseBase2.default)(this, _typeDefs)[_typeDefs][lookupIndex];
  }

}

exports.PortableRegistry = PortableRegistry;

function _createSiDef2(lookupId) {
  const typeDef = this.getTypeDef(lookupId);
  const lookupIndex = lookupId.toNumber(); // Setup for a lookup on complex types

  return [_index.TypeDefInfo.DoNotConstruct, _index.TypeDefInfo.Enum, _index.TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
    docs: typeDef.docs,
    info: _index.TypeDefInfo.Si,
    lookupIndex,
    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
    type: this.registry.createLookupType(lookupId)
  } : typeDef;
}

function _getLookupId2(lookupId) {
  if ((0, _util.isString)(lookupId)) {
    (0, _util.assert)(this.registry.isLookupType(lookupId), () => `PortableRegistry: Expected a lookup string type, found ${lookupId}`);
    return parseInt(lookupId.replace('Lookup', ''), 10);
  } else if ((0, _util.isNumber)(lookupId)) {
    return lookupId;
  }

  return lookupId.toNumber();
}

function _extract2(type, lookupIndex) {
  const namespace = [...type.path].join('::');
  let typeDef;
  const aliasType = getAliasPath(type.path);

  try {
    if (aliasType) {
      typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractAliasPath)[_extractAliasPath](lookupIndex, aliasType);
    } else {
      switch (type.def.type) {
        case 'Array':
          typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractArray)[_extractArray](lookupIndex, type.def.asArray);
          break;

        case 'BitSequence':
          typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractBitSequence)[_extractBitSequence](lookupIndex, type.def.asBitSequence);
          break;

        case 'Compact':
          typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractCompact)[_extractCompact](lookupIndex, type.def.asCompact);
          break;

        case 'Composite':
          typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractComposite)[_extractComposite](lookupIndex, type, type.def.asComposite);
          break;

        case 'HistoricMetaCompat':
          typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractHistoric)[_extractHistoric](lookupIndex, type.def.asHistoricMetaCompat);
          break;

        case 'Primitive':
          typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractPrimitive)[_extractPrimitive](lookupIndex, type);
          break;

        case 'Sequence':
          typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractSequence)[_extractSequence](lookupIndex, type.def.asSequence);
          break;

        case 'Tuple':
          typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractTuple)[_extractTuple](lookupIndex, type.def.asTuple);
          break;

        case 'Variant':
          typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _extractVariant)[_extractVariant](lookupIndex, type, type.def.asVariant);
          break;

        default:
          (0, _util2.assertUnreachable)(type.def.type);
      }
    }
  } catch (error) {
    throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ''}: Error extracting ${(0, _util.stringify)(type)}: ${error.message}`);
  }

  return (0, _util.objectSpread)({
    docs: sanitizeDocs(type.docs),
    namespace
  }, typeDef);
}

function _extractArray2(_, {
  len: length,
  type
}) {
  (0, _util.assert)(!length || length.toNumber() <= 256, 'Only support for [Type; <length>], where length <= 256');
  return (0, _encodeTypes.withTypeString)(this.registry, {
    info: _index.TypeDefInfo.VecFixed,
    length: length.toNumber(),
    sub: (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type)
  });
}

function _extractBitSequence2(_, {
  bitOrderType,
  bitStoreType
}) {
  const bitOrder = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](bitOrderType);

  const bitStore = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](bitStoreType); // NOTE: Currently the BitVec type is one-way only, i.e. we only use it to decode, not
  // re-encode stuff. As such we ignore the msb/lsb identifier given by bitOrderType, or rather
  // we don't pass it though at all


  (0, _util.assert)(['bitvec::order::Lsb0', 'bitvec::order::Msb0'].includes(bitOrder.namespace || ''), () => `Unexpected bitOrder found as ${bitOrder.namespace || '<unknown>'}`);
  (0, _util.assert)(bitStore.info === _index.TypeDefInfo.Plain && bitStore.type === 'u8', () => `Only u8 bitStore is currently supported, found ${bitStore.type}`);
  return {
    info: _index.TypeDefInfo.Plain,
    type: 'BitVec'
  };
}

function _extractCompact2(_, {
  type
}) {
  return (0, _encodeTypes.withTypeString)(this.registry, {
    info: _index.TypeDefInfo.Compact,
    sub: (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type)
  });
}

function _extractComposite2(lookupIndex, {
  params,
  path
}, {
  fields
}) {
  const specialVariant = path[0].toString();

  if (path.length === 1 && specialVariant === 'BTreeMap') {
    return (0, _encodeTypes.withTypeString)(this.registry, {
      info: _index.TypeDefInfo.BTreeMap,
      sub: params.map(({
        type
      }) => (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type.unwrap()))
    });
  } else if (['Range', 'RangeInclusive'].includes(specialVariant)) {
    return (0, _encodeTypes.withTypeString)(this.registry, {
      info: _index.TypeDefInfo.Range,
      sub: fields.map(({
        name,
        type,
        typeName
      }, index) => (0, _util.objectSpread)({
        name: name.isSome ? name.unwrap().toString() : ['start', 'end'][index]
      }, (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type), typeName.isSome ? {
        typeName: (0, _sanitize.sanitize)(typeName.unwrap())
      } : null))
    });
  } else if (path.length) {
    if (path[path.length - 1].toString() === 'WrapperOpaque') {
      return (0, _encodeTypes.withTypeString)(this.registry, {
        info: _index.TypeDefInfo.WrapperOpaque,
        sub: (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
      });
    } else if (path[path.length - 1].toString() === 'WrapperKeepOpaque') {
      return {
        info: _index.TypeDefInfo.Plain,
        type: 'Bytes'
      };
    }
  }

  return PATHS_SET.some(p => matchParts(p, path)) ? (0, _classPrivateFieldLooseBase2.default)(this, _extractCompositeSet)[_extractCompositeSet](lookupIndex, params, fields) : (0, _classPrivateFieldLooseBase2.default)(this, _extractFields)[_extractFields](lookupIndex, fields);
}

function _extractCompositeSet2(_, params, fields) {
  (0, _util.assert)(params.length === 1 && fields.length === 1, 'Set handling expects param/field as single entries');
  return (0, _encodeTypes.withTypeString)(this.registry, {
    info: _index.TypeDefInfo.Set,
    length: this.registry.createType(this.registry.createLookupType(fields[0].type)).bitLength(),
    sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({
      index,
      name
    }) => ({
      // This will be an issue > 2^53 - 1 ... don't have those (yet)
      index: index.toNumber(),
      info: _index.TypeDefInfo.Plain,
      name: name.toString(),
      type: 'Null'
    }))
  });
}

function _extractFields2(lookupIndex, fields) {
  let isStruct = true;
  let isTuple = true;

  for (let f = 0; f < fields.length; f++) {
    const {
      name
    } = fields[f];
    isStruct = isStruct && name.isSome;
    isTuple = isTuple && name.isNone;
  }

  (0, _util.assert)(isTuple || isStruct, 'Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)');

  if (fields.length === 0) {
    return {
      info: _index.TypeDefInfo.Null,
      type: 'Null'
    };
  } else if (isTuple && fields.length === 1) {
    const typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](fields[0].type);

    return (0, _util.objectSpread)({}, typeDef, lookupIndex === -1 ? {} : {
      lookupIndex,
      lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
      lookupNameRoot: typeDef.lookupName
    }, fields[0].typeName.isSome ? {
      typeName: (0, _sanitize.sanitize)(fields[0].typeName.unwrap())
    } : null);
  }

  const [sub, alias] = (0, _classPrivateFieldLooseBase2.default)(this, _extractFieldsAlias)[_extractFieldsAlias](fields);

  return (0, _encodeTypes.withTypeString)(this.registry, (0, _util.objectSpread)({
    info: isTuple // Tuple check first
    ? _index.TypeDefInfo.Tuple : _index.TypeDefInfo.Struct
  }, alias.size ? {
    alias
  } : null, lookupIndex === -1 ? {} : {
    lookupIndex,
    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex]
  }, {
    sub
  }));
}

function _extractFieldsAlias2(fields) {
  const alias = new Map();
  const sub = new Array(fields.length);

  for (let i = 0; i < fields.length; i++) {
    const {
      docs,
      name,
      type,
      typeName
    } = fields[i];

    const typeDef = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type);

    if (name.isNone) {
      sub[i] = typeDef;
    } else {
      let nameField = (0, _util.stringCamelCase)(name.unwrap());
      let nameOrig = null;

      if (nameField.includes('#')) {
        nameOrig = nameField;
        nameField = nameOrig.replace(/#/g, '_');
      } else if (RESERVED.includes(nameField)) {
        nameOrig = nameField;
        nameField = `${nameField}_`;
      }

      if (nameOrig) {
        alias.set(nameField, nameOrig);
      }

      sub[i] = (0, _util.objectSpread)({}, typeDef, {
        docs: sanitizeDocs(docs),
        name: nameField
      }, typeName.isSome ? {
        typeName: (0, _sanitize.sanitize)(typeName.unwrap())
      } : null);
    }
  }

  return [sub, alias];
}

function _extractHistoric2(_, type) {
  return (0, _util.objectSpread)({}, (0, _getTypeDef.getTypeDef)(type), {
    displayName: type.toString(),
    isFromSi: true
  });
}

function _extractPrimitive2(_, type) {
  const typeStr = type.def.asPrimitive.type.toString();
  return {
    info: _index.TypeDefInfo.Plain,
    type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
  };
}

function _extractAliasPath2(_, type) {
  return {
    info: _index.TypeDefInfo.Plain,
    type
  };
}

function _extractSequence2(lookupIndex, {
  type
}) {
  const sub = (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type);

  if (sub.type === 'u8') {
    return {
      info: _index.TypeDefInfo.Plain,
      type: 'Bytes'
    };
  }

  return (0, _encodeTypes.withTypeString)(this.registry, {
    info: _index.TypeDefInfo.Vec,
    lookupIndex,
    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
    sub
  });
}

function _extractTuple2(lookupIndex, ids) {
  if (ids.length === 0) {
    return {
      info: _index.TypeDefInfo.Null,
      type: 'Null'
    };
  } else if (ids.length === 1) {
    return this.getTypeDef(ids[0]);
  }

  const sub = ids.map(type => (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type));
  return (0, _encodeTypes.withTypeString)(this.registry, {
    info: _index.TypeDefInfo.Tuple,
    lookupIndex,
    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
    sub
  });
}

function _extractVariant2(lookupIndex, {
  params,
  path
}, {
  variants
}) {
  const specialVariant = path[0].toString();

  if (specialVariant === 'Option') {
    return (0, _encodeTypes.withTypeString)(this.registry, {
      info: _index.TypeDefInfo.Option,
      sub: (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
    });
  } else if (specialVariant === 'Result') {
    return (0, _encodeTypes.withTypeString)(this.registry, {
      info: _index.TypeDefInfo.Result,
      sub: params.map(({
        type
      }, index) => (0, _util.objectSpread)({
        name: ['Ok', 'Error'][index]
      }, (0, _classPrivateFieldLooseBase2.default)(this, _createSiDef)[_createSiDef](type.unwrap())))
    });
  } else if (variants.length === 0) {
    return {
      info: _index.TypeDefInfo.Null,
      type: 'Null'
    };
  }

  return (0, _classPrivateFieldLooseBase2.default)(this, _extractVariantEnum)[_extractVariantEnum](lookupIndex, variants);
}

function _extractVariantEnum2(lookupIndex, variants) {
  const sub = []; // we may get entries out of order, arrange them first before creating with gaps filled
  // NOTE: Since we mutate, use a copy of the array as an input

  [...variants].sort((a, b) => a.index.cmp(b.index)).forEach(({
    fields,
    index,
    name
  }) => {
    const desired = index.toNumber();

    while (sub.length !== desired) {
      sub.push({
        index: sub.length,
        info: _index.TypeDefInfo.Null,
        name: `__Unused${sub.length}`,
        type: 'Null'
      });
    }

    sub.push((0, _util.objectSpread)((0, _classPrivateFieldLooseBase2.default)(this, _extractFields)[_extractFields](-1, fields), {
      index: index.toNumber(),
      name: name.toString()
    }));
  });
  return (0, _encodeTypes.withTypeString)(this.registry, {
    info: _index.TypeDefInfo.Enum,
    lookupIndex,
    lookupName: (0, _classPrivateFieldLooseBase2.default)(this, _names)[_names][lookupIndex],
    sub
  });
}

},{"../../codec/Struct.js":249,"../../create/encodeTypes.js":269,"../../create/getTypeDef.js":270,"../../create/sanitize.js":274,"../../types/index.js":452,"./util.js":395,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],393:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PortableRegistry", {
  enumerable: true,
  get: function () {
    return _PortableRegistry.PortableRegistry;
  }
});
Object.defineProperty(exports, "convertSiV0toV1", {
  enumerable: true,
  get: function () {
    return _toV.toV1;
  }
});

var _PortableRegistry = require("./PortableRegistry.js");

var _toV = require("./toV1.js");

},{"./PortableRegistry.js":392,"./toV1.js":394}],394:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toV1 = toV1;

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function convertType(key) {
  return (registry, {
    type
  }) => registry.createType('Si1TypeDef', {
    [key]: {
      type: type.toNumber()
    }
  });
}

function convertArray(registry, {
  len,
  type
}) {
  return registry.createType('Si1TypeDef', {
    Array: {
      len,
      type: type.toNumber()
    }
  });
}

function convertBitSequence(registry, {
  bitOrderType,
  bitStoreType
}) {
  return registry.createType('Si1TypeDef', {
    BitSequence: {
      bitOrderType: bitOrderType.toNumber(),
      bitStoreType: bitStoreType.toNumber()
    }
  });
}

const convertCompact = convertType('Compact');

function convertComposite(registry, {
  fields
}) {
  return registry.createType('Si1TypeDef', {
    Composite: {
      fields: convertFields(registry, fields)
    }
  });
}

function convertFields(registry, fields) {
  return fields.map(({
    docs,
    name,
    type,
    typeName
  }) => registry.createType('Si1Field', {
    docs,
    name,
    type: type.toNumber(),
    typeName
  }));
}

function convertPhantom(registry, path) {
  console.warn(`Converting phantom type ${path.map(p => p.toString()).join('::')} to empty tuple`);
  return registry.createType('Si1TypeDef', {
    Tuple: []
  });
}

function convertPrimitive(registry, prim) {
  return registry.createType('Si1TypeDef', {
    Primitive: prim.toString()
  });
}

const convertSequence = convertType('Sequence');

function convertTuple(registry, types) {
  return registry.createType('Si1TypeDef', {
    Tuple: types.map(t => t.toNumber())
  });
}

function convertVariant(registry, {
  variants
}) {
  return registry.createType('Si1TypeDef', {
    Variant: {
      variants: variants.map(({
        discriminant,
        docs,
        fields,
        name
      }, index) => registry.createType('Si1Variant', {
        docs,
        fields: convertFields(registry, fields),
        index: discriminant.isSome ? discriminant.unwrap().toNumber() : index,
        name
      }))
    }
  });
}

function convertDef(registry, {
  def,
  path
}) {
  let result;

  switch (def.type) {
    case 'Array':
      result = convertArray(registry, def.asArray);
      break;

    case 'BitSequence':
      result = convertBitSequence(registry, def.asBitSequence);
      break;

    case 'Compact':
      result = convertCompact(registry, def.asCompact);
      break;

    case 'Composite':
      result = convertComposite(registry, def.asComposite);
      break;

    case 'Phantom':
      result = convertPhantom(registry, path);
      break;

    case 'Primitive':
      result = convertPrimitive(registry, def.asPrimitive);
      break;

    case 'Sequence':
      result = convertSequence(registry, def.asSequence);
      break;

    case 'Tuple':
      result = convertTuple(registry, def.asTuple);
      break;

    case 'Variant':
      result = convertVariant(registry, def.asVariant);
      break;

    default:
      (0, _util.assertUnreachable)(def.type);
  }

  return result;
}

function toV1(registry, types) {
  return types.map((t, index) => registry.createType('PortableType', {
    // offsets are +1 from v0
    id: index + 1,
    type: {
      def: convertDef(registry, t),
      docs: [],
      params: t.params.map(p => registry.createType('Si1TypeParameter', {
        type: p.toNumber()
      })),
      path: t.path.map(p => p.toString())
    }
  }));
}

},{"./util.js":395}],395:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertUnreachable = assertUnreachable;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function assertUnreachable(_x) {
  throw new Error("Didn't expect to get here");
}

},{}],396:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateConstants = decorateConstants;

var _util = require("@polkadot/util");

var _util2 = require("../util.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function decorateConstants(registry, {
  pallets
}, _version) {
  const result = {};

  for (let i = 0; i < pallets.length; i++) {
    const {
      constants,
      name
    } = pallets[i];

    if (!constants.isEmpty) {
      (0, _util.lazyMethod)(result, (0, _util.stringCamelCase)(name), () => (0, _util.lazyMethods)({}, constants, constant => {
        const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [(0, _util.hexToU8a)(constant.value.toHex())]);
        codec.meta = constant;
        return codec;
      }, _util2.objectNameToCamel));
    }
  }

  return result;
}

},{"../util.js":408,"@polkadot/util":640}],397:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateErrors = decorateErrors;
exports.variantToMeta = variantToMeta;

var _util = require("@polkadot/util");

var _lazy = require("../../../create/lazy.js");

var _util2 = require("../util.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function variantToMeta(lookup, variant) {
  return (0, _util.objectSpread)({
    args: variant.fields.map(({
      type
    }) => lookup.getTypeDef(type).type)
  }, variant);
}
/** @internal */


function decorateErrors(registry, {
  lookup,
  pallets
}, version) {
  const result = {};

  for (let i = 0; i < pallets.length; i++) {
    const {
      errors,
      index,
      name
    } = pallets[i];

    if (errors.isSome) {
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      (0, _util.lazyMethod)(result, (0, _util.stringCamelCase)(name), () => (0, _lazy.lazyVariants)(lookup, errors.unwrap(), _util2.objectNameToString, variant => ({
        is: ({
          error,
          index
        }) => index.eq(sectionIndex) && error.eq(variant.index),
        meta: registry.createType('ErrorMetadataLatest', variantToMeta(lookup, variant))
      })));
    }
  }

  return result;
}

},{"../../../create/lazy.js":272,"../util.js":408,"@polkadot/util":640}],398:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateEvents = decorateEvents;
exports.filterEventsSome = filterEventsSome;

var _util = require("@polkadot/util");

var _lazy = require("../../../create/lazy.js");

var _index = require("../errors/index.js");

var _util2 = require("../util.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function filterEventsSome({
  events
}) {
  return events.isSome;
}
/** @internal */


function decorateEvents(registry, {
  lookup,
  pallets
}, version) {
  const result = {};
  const filtered = pallets.filter(filterEventsSome);

  for (let i = 0; i < filtered.length; i++) {
    const {
      events,
      index,
      name
    } = filtered[i];
    const sectionIndex = version >= 12 ? index.toNumber() : i;
    (0, _util.lazyMethod)(result, (0, _util.stringCamelCase)(name), () => (0, _lazy.lazyVariants)(lookup, events.unwrap(), _util2.objectNameToString, variant => ({
      is: eventRecord => sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
      meta: registry.createType('EventMetadataLatest', (0, _index.variantToMeta)(lookup, variant))
    })));
  }

  return result;
}

},{"../../../create/lazy.js":272,"../errors/index.js":397,"../util.js":408,"@polkadot/util":640}],399:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnchecked = createUnchecked;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function isTx(tx, callIndex) {
  return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
}
/** @internal */


function createUnchecked(registry, section, callIndex, callMetadata) {
  const expectedArgs = callMetadata.fields;
  const funcName = (0, _util.stringCamelCase)(callMetadata.name);

  const extrinsicFn = (...args) => {
    (0, _util.assert)(expectedArgs.length === args.length, () => `Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
    return registry.createType('Call', {
      args,
      callIndex
    }, callMetadata);
  };

  extrinsicFn.is = tx => isTx(tx, callIndex);

  extrinsicFn.callIndex = callIndex;
  extrinsicFn.meta = callMetadata;
  extrinsicFn.method = funcName;
  extrinsicFn.section = section;

  extrinsicFn.toJSON = () => callMetadata.toJSON();

  return extrinsicFn;
}

},{"@polkadot/util":640}],400:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCallFunction = createCallFunction;
exports.decorateExtrinsics = decorateExtrinsics;
exports.filterCallsSome = filterCallsSome;

var _util = require("@polkadot/util");

var _lazy = require("../../../create/lazy.js");

var _index = require("../../util/index.js");

var _util2 = require("../util.js");

var _createUnchecked = require("./createUnchecked.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function filterCallsSome({
  calls
}) {
  return calls.isSome;
}

function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
  const {
    fields,
    index
  } = variant;
  const args = new Array(fields.length);

  for (let a = 0; a < fields.length; a++) {
    const {
      name,
      type,
      typeName
    } = fields[a];
    args[a] = (0, _util.objectSpread)({
      name: (0, _util.stringCamelCase)(name.unwrapOr(`param${a}`)),
      type: (0, _index.getSiName)(lookup, type)
    }, typeName.isSome ? {
      typeName: typeName.unwrap()
    } : null);
  }

  return (0, _createUnchecked.createUnchecked)(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createType('FunctionMetadataLatest', (0, _util.objectSpread)({
    args
  }, variant)));
}
/** @internal */


function decorateExtrinsics(registry, {
  lookup,
  pallets
}, version) {
  const result = {};
  const filtered = pallets.filter(filterCallsSome);

  for (let i = 0; i < filtered.length; i++) {
    const {
      calls,
      index,
      name
    } = filtered[i];
    const sectionName = (0, _util.stringCamelCase)(name);
    const sectionIndex = version >= 12 ? index.toNumber() : i;
    (0, _util.lazyMethod)(result, sectionName, () => (0, _lazy.lazyVariants)(lookup, calls.unwrap(), _util2.objectNameToCamel, variant => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
  }

  return result;
}

},{"../../../create/lazy.js":272,"../../util/index.js":414,"../util.js":408,"./createUnchecked.js":399,"@polkadot/util":640}],401:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "decorateConstants", {
  enumerable: true,
  get: function () {
    return _index.decorateConstants;
  }
});
Object.defineProperty(exports, "decorateErrors", {
  enumerable: true,
  get: function () {
    return _index2.decorateErrors;
  }
});
Object.defineProperty(exports, "decorateEvents", {
  enumerable: true,
  get: function () {
    return _index3.decorateEvents;
  }
});
Object.defineProperty(exports, "decorateExtrinsics", {
  enumerable: true,
  get: function () {
    return _index4.decorateExtrinsics;
  }
});
Object.defineProperty(exports, "decorateStorage", {
  enumerable: true,
  get: function () {
    return _index5.decorateStorage;
  }
});
exports.expandMetadata = expandMetadata;
Object.defineProperty(exports, "filterCallsSome", {
  enumerable: true,
  get: function () {
    return _index4.filterCallsSome;
  }
});
Object.defineProperty(exports, "filterEventsSome", {
  enumerable: true,
  get: function () {
    return _index3.filterEventsSome;
  }
});

var _util = require("@polkadot/util");

var _Metadata = require("../Metadata.js");

var _index = require("./constants/index.js");

var _index2 = require("./errors/index.js");

var _index3 = require("./events/index.js");

var _index4 = require("./extrinsics/index.js");

var _index5 = require("./storage/index.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * Expands the metadata by decoration into consts, query and tx sections
 */
function expandMetadata(registry, metadata) {
  (0, _util.assert)(metadata instanceof _Metadata.Metadata, 'You need to pass a valid Metadata instance to Decorated');
  const latest = metadata.asLatest;
  const version = metadata.version;
  return {
    consts: (0, _index.decorateConstants)(registry, latest, version),
    errors: (0, _index2.decorateErrors)(registry, latest, version),
    events: (0, _index3.decorateEvents)(registry, latest, version),
    query: (0, _index5.decorateStorage)(registry, latest, version),
    registry,
    tx: (0, _index4.decorateExtrinsics)(registry, latest, version)
  };
}

},{"../Metadata.js":390,"./constants/index.js":396,"./errors/index.js":397,"./events/index.js":398,"./extrinsics/index.js":400,"./storage/index.js":405,"@polkadot/util":640}],402:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NO_RAW_ARGS = void 0;
exports.createFunction = createFunction;
exports.createKeyRaw = createKeyRaw;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _index = require("../../../codec/index.js");

var _getHasher = require("./getHasher.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const NO_RAW_ARGS = {
  args: [],
  hashers: [],
  keys: []
};
/** @internal */

exports.NO_RAW_ARGS = NO_RAW_ARGS;

function createKeyRaw(registry, itemFn, {
  args,
  hashers,
  keys
}) {
  const extra = new Array(keys.length);

  for (let i = 0; i < keys.length; i++) {
    extra[i] = (0, _getHasher.getHasher)(hashers[i])(registry.createType(registry.createLookupType(keys[i]), args[i]).toU8a());
  }

  return (0, _util.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(itemFn.prefix, 128), (0, _utilCrypto.xxhashAsU8a)(itemFn.method, 128), ...extra);
}
/** @internal */


function filterDefined(a) {
  return !(0, _util.isUndefined)(a);
}
/** @internal */


function createKey(registry, itemFn, {
  args,
  hashers,
  keys
}) {
  const {
    method,
    section
  } = itemFn;
  (0, _util.assert)(Array.isArray(args), () => `Call to ${(0, _util.stringCamelCase)(section || 'unknown')}.${(0, _util.stringCamelCase)(method || 'unknown')} needs ${keys.length} arguments`);
  (0, _util.assert)(args.filter(filterDefined).length === keys.length, () => `Call to ${(0, _util.stringCamelCase)(section || 'unknown')}.${(0, _util.stringCamelCase)(method || 'unknown')} needs ${keys.length} arguments, found [${args.join(', ')}]`); // as per createKey, always add the length prefix (underlying it is Bytes)

  return (0, _util.compactAddLength)(createKeyRaw(registry, itemFn, {
    args,
    hashers,
    keys
  }));
}
/** @internal */


function createWStorageFn(registry, itemFn, options) {
  const {
    meta: {
      type
    }
  } = itemFn;
  let cacheKey = null; // Can only have zero or one argument:
  //   - storage.system.account(address)
  //   - storage.timestamp.blockPeriod()
  // For higher-map queries the params are passed in as an tuple, [key1, key2]

  return (...args) => {
    if (type.isPlain) {
      if (!cacheKey) {
        cacheKey = options.skipHashing ? (0, _util.compactAddLength)((0, _util.u8aToU8a)(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
      }

      return cacheKey;
    }

    const {
      hashers,
      key
    } = type.asMap;
    return hashers.length === 1 ? createKey(registry, itemFn, {
      args,
      hashers,
      keys: [key]
    }) : createKey(registry, itemFn, {
      args,
      hashers,
      keys: registry.lookup.getSiType(key).def.asTuple
    });
  };
}
/** @internal */


function createWithMeta(registry, itemFn, options) {
  const {
    meta,
    method,
    prefix,
    section
  } = itemFn;
  const storageFn = createWStorageFn(registry, itemFn, options);
  storageFn.meta = meta;
  storageFn.method = (0, _util.stringLowerFirst)(method);
  storageFn.prefix = prefix;
  storageFn.section = section; // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
  // instances (e.g. collective) will not work since it is only matched on param meta

  storageFn.toJSON = () => (0, _util.objectSpread)({
    storage: {
      method,
      prefix,
      section
    }
  }, meta.toJSON());

  return storageFn;
}
/** @internal */


function extendHeadMeta(registry, {
  meta: {
    docs,
    name,
    type
  },
  section
}, {
  method
}, iterFn) {
  const outputType = registry.createLookupType(type.asMap.key); // metadata with a fallback value using the type of the key, the normal
  // meta fallback only applies to actual entry values, create one for head

  iterFn.meta = registry.createType('StorageEntryMetadataLatest', {
    docs,
    fallback: registry.createType('Bytes'),
    modifier: registry.createType('StorageEntryModifierLatest', 1),
    // required
    name,
    // FIXME???
    type: registry.createType('StorageEntryTypeLatest', outputType, 0)
  });
  return (...args) => registry.createType('StorageKey', iterFn(...args), {
    method,
    section
  });
}
/** @internal */


function extendPrefixedMap(registry, itemFn, storageFn) {
  const {
    meta: {
      type
    },
    method,
    section
  } = itemFn;
  storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
    (0, _util.assert)(args.length === 0 || type.isMap && args.length < type.asMap.hashers.length, () => `Iteration ${(0, _util.stringCamelCase)(section || 'unknown')}.${(0, _util.stringCamelCase)(method || 'unknown')} needs arguments to be at least one less than the full arguments, found [${args.join(', ')}]`);

    if (args.length) {
      if (type.isMap) {
        const {
          hashers,
          key
        } = type.asMap;
        const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
        return new _index.Raw(registry, createKeyRaw(registry, itemFn, {
          args,
          hashers: hashers.slice(0, args.length),
          keys: keysVec.slice(0, args.length)
        }));
      }
    }

    return new _index.Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
  });
  return storageFn;
}
/** @internal */


function createFunction(registry, itemFn, options) {
  const {
    meta: {
      type
    }
  } = itemFn;
  const storageFn = createWithMeta(registry, itemFn, options);

  if (type.isMap) {
    extendPrefixedMap(registry, itemFn, storageFn);
  }

  storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || (0, _util.compactStripLength)(storageFn())[1];

  return storageFn;
}

},{"../../../codec/index.js":256,"./getHasher.js":403,"@polkadot/util":640,"@polkadot/util-crypto":513}],403:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHasher = getHasher;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_FN = data => (0, _utilCrypto.xxhashAsU8a)(data, 128);

const HASHERS = {
  Blake2_128: data => // eslint-disable-line camelcase
  (0, _utilCrypto.blake2AsU8a)(data, 128),
  Blake2_128Concat: data => // eslint-disable-line camelcase
  (0, _util.u8aConcat)((0, _utilCrypto.blake2AsU8a)(data, 128), (0, _util.u8aToU8a)(data)),
  Blake2_256: data => // eslint-disable-line camelcase
  (0, _utilCrypto.blake2AsU8a)(data, 256),
  Identity: data => (0, _util.u8aToU8a)(data),
  Twox128: data => (0, _utilCrypto.xxhashAsU8a)(data, 128),
  Twox256: data => (0, _utilCrypto.xxhashAsU8a)(data, 256),
  Twox64Concat: data => (0, _util.u8aConcat)((0, _utilCrypto.xxhashAsU8a)(data, 64), (0, _util.u8aToU8a)(data))
};
/** @internal */

function getHasher(hasher) {
  return HASHERS[hasher.type] || DEFAULT_FN;
}

},{"@polkadot/util":640,"@polkadot/util-crypto":513}],404:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getStorage = getStorage;

var _substrate = require("./substrate.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function getStorage(registry) {
  const storage = {};
  const entries = Object.entries(_substrate.substrate);

  for (let e = 0; e < entries.length; e++) {
    storage[entries[e][0]] = entries[e][1](registry);
  }

  return {
    substrate: storage
  };
}

},{"./substrate.js":406}],405:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateStorage = decorateStorage;

var _util = require("@polkadot/util");

var _util2 = require("../util.js");

var _createFunction = require("./createFunction.js");

var _getStorage = require("./getStorage.js");

var _util3 = require("./util.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const VERSION_NAME = 'palletVersion';
const VERSION_KEY = ':__STORAGE_VERSION__:';
const VERSION_DOCS = {
  docs: 'Returns the current pallet version from storage',
  type: 'u16'
};
/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars

function decorateStorage(registry, {
  pallets
}, _metaVersion) {
  const result = (0, _getStorage.getStorage)(registry);

  for (let i = 0; i < pallets.length; i++) {
    const {
      name,
      storage
    } = pallets[i];

    if (storage.isSome) {
      const section = (0, _util.stringCamelCase)(name);
      const {
        items,
        prefix: _prefix
      } = storage.unwrap();

      const prefix = _prefix.toString();

      (0, _util.lazyMethod)(result, section, () => (0, _util.lazyMethods)({
        palletVersion: (0, _util3.createRuntimeFunction)({
          method: VERSION_NAME,
          prefix,
          section
        }, (0, _createFunction.createKeyRaw)(registry, {
          method: VERSION_KEY,
          prefix: name.toString()
        }, _createFunction.NO_RAW_ARGS), VERSION_DOCS)(registry)
      }, items, meta => (0, _createFunction.createFunction)(registry, {
        meta,
        method: meta.name.toString(),
        prefix,
        section
      }, {}), _util2.objectNameFirstLower));
    }
  }

  return result;
}

},{"../util.js":408,"./createFunction.js":402,"./getStorage.js":404,"./util.js":407,"@polkadot/util":640}],406:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.substrate = void 0;

var _util = require("./util.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const prefix = 'Substrate';
const section = 'substrate';

function createSubstrateFn(method, key, meta) {
  return (0, _util.createRuntimeFunction)({
    method,
    prefix,
    section
  }, key, meta);
}

const substrate = {
  changesTrieConfig: createSubstrateFn('changesTrieConfig', ':changes_trie', {
    docs: 'Changes trie configuration is stored under this key.',
    type: 'u32'
  }),
  childStorageKeyPrefix: createSubstrateFn('childStorageKeyPrefix', ':child_storage:', {
    docs: 'Prefix of child storage keys.',
    type: 'u32'
  }),
  code: createSubstrateFn('code', ':code', {
    docs: 'Wasm code of the runtime.',
    type: 'Bytes'
  }),
  extrinsicIndex: createSubstrateFn('extrinsicIndex', ':extrinsic_index', {
    docs: 'Current extrinsic index (u32) is stored under this key.',
    type: 'u32'
  }),
  heapPages: createSubstrateFn('heapPages', ':heappages', {
    docs: 'Number of wasm linear memory pages required for execution of the runtime.',
    type: 'u64'
  })
};
exports.substrate = substrate;

},{"./util.js":407}],407:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRuntimeFunction = createRuntimeFunction;

var _createFunction = require("./createFunction.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function findSiPrimitive(registry, _prim) {
  const prim = _prim.toLowerCase();

  return registry.lookup.types.find(t => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
}

function findSiType(registry, orig) {
  let portable = findSiPrimitive(registry, orig);

  if (!portable && orig === 'Bytes') {
    const u8 = findSiPrimitive(registry, 'u8');

    if (u8) {
      portable = registry.lookup.types.find(t => t.type.def.isSequence && t.type.def.asSequence.type.eq(u8.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(orig));
    }
  }

  if (!portable) {
    console.warn(`Unable to map ${orig} to a lookup index`);
  }

  return portable;
} // Small helper function to factorize code on this page.

/** @internal */


function createRuntimeFunction({
  method,
  prefix,
  section
}, key, {
  docs,
  type
}) {
  return registry => {
    var _findSiType;

    return (0, _createFunction.createFunction)(registry, {
      meta: registry.createType('StorageEntryMetadataLatest', {
        docs: registry.createType('Vec<Text>', [docs]),
        modifier: registry.createType('StorageEntryModifierLatest', 'Required'),
        name: registry.createType('Text', method),
        toJSON: () => key,
        type: registry.createType('StorageEntryTypeLatest', {
          Plain: ((_findSiType = findSiType(registry, type)) === null || _findSiType === void 0 ? void 0 : _findSiType.id) || 0
        })
      }),
      method,
      prefix,
      section
    }, {
      key,
      skipHashing: true
    });
  };
}

},{"./createFunction.js":402}],408:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectNameToString = exports.objectNameToCamel = exports.objectNameFirstLower = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function convert(fn) {
  return ({
    name
  }) => fn(name);
}

const objectNameFirstLower = convert(_util.stringLowerFirst);
exports.objectNameFirstLower = objectNameFirstLower;
const objectNameToCamel = convert(_util.stringCamelCase);
exports.objectNameToCamel = objectNameToCamel;
const objectNameToString = convert(n => n.toString());
exports.objectNameToString = objectNameToString;

},{"@polkadot/util":640}],409:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Metadata", {
  enumerable: true,
  get: function () {
    return _Metadata.Metadata;
  }
});
Object.defineProperty(exports, "PortableRegistry", {
  enumerable: true,
  get: function () {
    return _index.PortableRegistry;
  }
});
Object.defineProperty(exports, "decorateConstants", {
  enumerable: true,
  get: function () {
    return _index2.decorateConstants;
  }
});
Object.defineProperty(exports, "decorateExtrinsics", {
  enumerable: true,
  get: function () {
    return _index2.decorateExtrinsics;
  }
});
Object.defineProperty(exports, "decorateStorage", {
  enumerable: true,
  get: function () {
    return _index2.decorateStorage;
  }
});
Object.defineProperty(exports, "expandMetadata", {
  enumerable: true,
  get: function () {
    return _index2.expandMetadata;
  }
});

var _Metadata = require("./Metadata.js");

var _index = require("./PortableRegistry/index.js");

var _index2 = require("./decorate/index.js");

},{"./Metadata.js":390,"./PortableRegistry/index.js":393,"./decorate/index.js":401}],410:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractTypes = extractTypes;

var _getTypeDef = require("../../create/getTypeDef.js");

var _types = require("../../create/types.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// we are attempting to avoid circular refs, hence the path import
function extractSubSingle({
  lookupName,
  type
}) {
  return extractTypes([lookupName || type]);
}

function extractSubArray(types) {
  return extractTypes(types.map(({
    lookupName,
    type
  }) => lookupName || type));
}
/** @internal */


function extractTypes(types) {
  return types.map(type => {
    const decoded = (0, _getTypeDef.getTypeDef)(type);

    switch (decoded.info) {
      case _types.TypeDefInfo.Plain:
        return decoded.lookupName || decoded.type;

      case _types.TypeDefInfo.BTreeSet:
      case _types.TypeDefInfo.Compact:
      case _types.TypeDefInfo.Option:
      case _types.TypeDefInfo.Vec:
      case _types.TypeDefInfo.VecFixed:
      case _types.TypeDefInfo.WrapperOpaque:
        return extractSubSingle(decoded.sub);

      case _types.TypeDefInfo.BTreeMap:
      case _types.TypeDefInfo.Enum:
      case _types.TypeDefInfo.HashMap:
      case _types.TypeDefInfo.Result:
      case _types.TypeDefInfo.Set:
      case _types.TypeDefInfo.Struct:
      case _types.TypeDefInfo.Tuple:
        return extractSubArray(decoded.sub);

      default:
        throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${_types.TypeDefInfo[decoded.info]})`);
    }
  });
}

},{"../../create/getTypeDef.js":270,"../../create/types.js":276}],411:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenUniq = flattenUniq;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function flattenUniq(list, result = []) {
  for (let i = 0; i < list.length; i++) {
    const entry = list[i];

    if (Array.isArray(entry)) {
      flattenUniq(entry, result);
    } else {
      result.push(entry);
    }
  }

  return [...new Set(result)];
}

},{}],412:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSiName = getSiName;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function getSiName(lookup, type) {
  const typeDef = lookup.getTypeDef(type);
  return typeDef.lookupName || typeDef.type;
}

},{}],413:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUniqTypes = getUniqTypes;

var _flattenUniq = require("./flattenUniq.js");

var _validateTypes = require("./validateTypes.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function extractTypes(lookup, types) {
  return types.map(({
    type
  }) => lookup.getTypeDef(type).type);
}
/** @internal */


function extractFieldTypes(lookup, type) {
  return lookup.getSiType(type).def.asVariant.variants.map(({
    fields
  }) => extractTypes(lookup, fields));
}
/** @internal */


function getPalletNames({
  lookup,
  pallets
}) {
  return pallets.reduce((all, {
    calls,
    constants,
    events,
    storage
  }) => {
    all.push([extractTypes(lookup, constants)]);

    if (calls.isSome) {
      all.push(extractFieldTypes(lookup, calls.unwrap().type));
    }

    if (events.isSome) {
      all.push(extractFieldTypes(lookup, events.unwrap().type));
    }

    if (storage.isSome) {
      all.push(storage.unwrap().items.map(({
        type
      }) => {
        if (type.isPlain) {
          return [lookup.getTypeDef(type.asPlain).type];
        }

        const {
          hashers,
          key,
          value
        } = type.asMap;
        return hashers.length === 1 ? [lookup.getTypeDef(value).type, lookup.getTypeDef(key).type] : [lookup.getTypeDef(value).type, ...lookup.getSiType(key).def.asTuple.map(t => lookup.getTypeDef(t).type)];
      }));
    }

    return all;
  }, []);
}
/** @internal */


function getUniqTypes(registry, meta, throwError) {
  return (0, _validateTypes.validateTypes)(registry, throwError, (0, _flattenUniq.flattenUniq)(getPalletNames(meta)));
}

},{"./flattenUniq.js":411,"./validateTypes.js":416}],414:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "flattenUniq", {
  enumerable: true,
  get: function () {
    return _flattenUniq.flattenUniq;
  }
});
Object.defineProperty(exports, "getSiName", {
  enumerable: true,
  get: function () {
    return _getSiName.getSiName;
  }
});
Object.defineProperty(exports, "getUniqTypes", {
  enumerable: true,
  get: function () {
    return _getUniqTypes.getUniqTypes;
  }
});
Object.defineProperty(exports, "toCallsOnly", {
  enumerable: true,
  get: function () {
    return _toCallsOnly.toCallsOnly;
  }
});
Object.defineProperty(exports, "validateTypes", {
  enumerable: true,
  get: function () {
    return _validateTypes.validateTypes;
  }
});

var _flattenUniq = require("./flattenUniq.js");

var _getSiName = require("./getSiName.js");

var _getUniqTypes = require("./getUniqTypes.js");

var _toCallsOnly = require("./toCallsOnly.js");

var _validateTypes = require("./validateTypes.js");

},{"./flattenUniq.js":411,"./getSiName.js":412,"./getUniqTypes.js":413,"./toCallsOnly.js":415,"./validateTypes.js":416}],415:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toCallsOnly = toCallsOnly;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function trimDocs(docs) {
  const strings = docs.map(d => d.toString().trim());
  const firstEmpty = strings.findIndex(d => !d.length);
  return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
}
/** @internal */


function toCallsOnly(registry, {
  extrinsic,
  lookup,
  pallets
}) {
  return registry.createType('MetadataLatest', {
    extrinsic,
    lookup: {
      types: lookup.types.map(({
        id,
        type
      }) => registry.createType('PortableType', {
        id,
        type: { ...type,
          docs: trimDocs(type.docs)
        }
      }))
    },
    pallets: pallets.map(({
      calls,
      index,
      name
    }) => ({
      calls: registry.createType('Option<PalletCallMetadataLatest>', calls.unwrapOr(null)),
      index,
      name
    }))
  }).toJSON();
}

},{}],416:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateTypes = validateTypes;

var _util = require("@polkadot/util");

var _extractTypes = require("./extractTypes.js");

var _flattenUniq = require("./flattenUniq.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const l = (0, _util.logger)('metadata');
/** @internal */

function validateTypes(registry, throwError, types) {
  const missing = (0, _flattenUniq.flattenUniq)((0, _extractTypes.extractTypes)(types)).filter(type => !registry.hasType(type)).sort();

  if (missing.length !== 0) {
    const message = `Unknown types found, no types for ${missing.join(', ')}`;

    if (throwError) {
      throw new Error(message);
    } else {
      l.warn(message);
    }
  }

  return types;
}

},{"./extractTypes.js":410,"./flattenUniq.js":411,"@polkadot/util":640}],417:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toV11 = toV11;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function toV11(registry, {
  modules
}) {
  return registry.createType('MetadataV11', {
    // This is new in V11, pass V0 here - something non-existing, telling the API to use
    // the fallback for this information (on-chain detection)
    extrinsic: {
      signedExtensions: [],
      version: 0
    },
    modules
  });
}

},{}],418:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toV12 = toV12;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @internal
 **/
function toV12(registry, {
  extrinsic,
  modules
}) {
  return registry.createType('MetadataV12', {
    extrinsic,
    modules: modules.map(mod => registry.createType('ModuleMetadataV12', { ...mod,
      index: 255
    }))
  });
}

},{}],419:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toV13 = toV13;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @internal
 **/
function toV13(registry, metadata) {
  return registry.createType('MetadataV13', metadata);
}

},{}],420:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toV14 = toV14;

var _typesKnown = require("@polkadot/types-known");

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];
/**
 * Creates a compatible type mapping
 * @internal
 **/

function compatType(compatTypes, _type) {
  const type = _type.toString();

  const index = compatTypes.findIndex(({
    def
  }) => def.HistoricMetaCompat === type);

  if (index !== -1) {
    return index;
  }

  return compatTypes.push({
    def: {
      HistoricMetaCompat: type
    }
  }) - 1;
}

function makeTupleType(compatTypes, entries) {
  return compatTypes.push({
    def: {
      Tuple: entries
    }
  }) - 1;
}

function makeVariantType(modName, variantType, compatTypes, variants) {
  return compatTypes.push({
    def: {
      Variant: {
        variants
      }
    },
    path: [`pallet_${modName.toString()}`, 'pallet', variantType]
  }) - 1;
}
/**
 * @internal
 * generate & register the OriginCaller type
 **/


function registerOriginCaller(registry, modules, metaVersion) {
  registry.register({
    OriginCaller: {
      _enum: modules.map((mod, index) => [mod.name.toString(), metaVersion >= 12 ? mod.index.toNumber() : index]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
        for (let i = Object.keys(result).length; i < index; i++) {
          result[`Empty${i}`] = 'Null';
        }

        result[name] = _typesKnown.knownOrigins[name] || 'Null';
        return result;
      }, {})
    }
  });
}
/**
 * Find and apply the correct type override
 * @internal
 **/


function setTypeOverride(sectionTypes, types) {
  types.forEach(type => {
    const override = Object.keys(sectionTypes).find(aliased => type.eq(aliased));

    if (override) {
      type.setOverride(sectionTypes[override]);
    } else {
      // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
      const orig = type.toString();
      const alias = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result, [a, z]) => result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);

      if (orig !== alias) {
        type.setOverride(alias);
      }
    }
  });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/


function convertCalls(compatTypes, registry, modName, calls, sectionTypes) {
  const variants = calls.map(({
    args,
    docs,
    name
  }, index) => {
    setTypeOverride(sectionTypes, args.map(({
      type
    }) => type));
    return registry.createType('SiVariant', {
      docs,
      fields: args.map(({
        name,
        type
      }) => registry.createType('SiField', {
        name,
        type: compatType(compatTypes, type)
      })),
      index,
      name
    });
  });
  return registry.createType('PalletCallMetadataV14', {
    type: makeVariantType(modName, 'Call', compatTypes, variants)
  });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */


function convertConstants(compatTypes, registry, constants, sectionTypes) {
  return constants.map(({
    docs,
    name,
    type,
    value
  }) => {
    setTypeOverride(sectionTypes, [type]);
    return registry.createType('PalletConstantMetadataV14', {
      docs,
      name,
      type: compatType(compatTypes, type),
      value
    });
  });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function convertErrors(compatTypes, registry, modName, errors, _sectionTypes) {
  const variants = errors.map(({
    docs,
    name
  }, index) => registry.createType('SiVariant', {
    docs,
    fields: [],
    index,
    name
  }));
  return registry.createType('PalletErrorMetadataV14', {
    type: makeVariantType(modName, 'Error', compatTypes, variants)
  });
}
/**
 * Apply module-specific type overrides (always be done as part of toV14)
 * @internal
 **/


function convertEvents(compatTypes, registry, modName, events, sectionTypes) {
  const variants = events.map(({
    args,
    docs,
    name
  }, index) => {
    setTypeOverride(sectionTypes, args);
    return registry.createType('SiVariant', {
      docs,
      fields: args.map(t => registry.createType('SiField', {
        type: compatType(compatTypes, t)
      })),
      index,
      name
    });
  });
  return registry.createType('PalletEventMetadataV14', {
    type: makeVariantType(modName, 'Event', compatTypes, variants)
  });
}

function createMapEntry(compatTypes, registry, sectionTypes, {
  hashers,
  keys,
  value
}) {
  setTypeOverride(sectionTypes, [value, ...(Array.isArray(keys) ? keys : [keys])]);
  return registry.createType('StorageEntryTypeV14', {
    Map: {
      hashers,
      key: hashers.length === 1 ? compatType(compatTypes, keys[0]) : makeTupleType(compatTypes, keys.map(t => compatType(compatTypes, t))),
      value: compatType(compatTypes, value)
    }
  });
}
/**
 * Apply module-specific storage type overrides (always part of toV14)
 * @internal
 **/


function convertStorage(compatTypes, registry, {
  items,
  prefix
}, sectionTypes) {
  return registry.createType('PalletStorageMetadataV14', {
    items: items.map(({
      docs,
      fallback,
      modifier,
      name,
      type
    }) => {
      let entryType;

      if (type.isPlain) {
        const plain = type.asPlain;
        setTypeOverride(sectionTypes, [plain]);
        entryType = registry.createType('StorageEntryTypeV14', {
          Plain: compatType(compatTypes, plain)
        });
      } else if (type.isMap) {
        const map = type.asMap;
        entryType = createMapEntry(compatTypes, registry, sectionTypes, {
          hashers: [map.hasher],
          keys: [map.key],
          value: map.value
        });
      } else if (type.isDoubleMap) {
        const dm = type.asDoubleMap;
        entryType = createMapEntry(compatTypes, registry, sectionTypes, {
          hashers: [dm.hasher, dm.key2Hasher],
          keys: [dm.key1, dm.key2],
          value: dm.value
        });
      } else {
        const nm = type.asNMap;
        entryType = createMapEntry(compatTypes, registry, sectionTypes, {
          hashers: nm.hashers,
          keys: nm.keyVec,
          value: nm.value
        });
      }

      return registry.createType('StorageEntryMetadataV14', {
        docs,
        fallback,
        modifier,
        name,
        type: entryType
      });
    }),
    prefix
  });
}
/** @internal */
// eslint-disable-next-line @typescript-eslint/no-unused-vars


function convertExtrinsic(registry, {
  signedExtensions,
  version
}) {
  return registry.createType('ExtrinsicMetadataV14', {
    signedExtensions: signedExtensions.map(identifier => ({
      identifier,
      type: 0 // we don't map the fields at all

    })),
    type: 0,
    // Map to extrinsic like in v14?
    version: version
  });
}
/** @internal */


function createPallet(compatTypes, registry, mod, {
  calls,
  constants,
  errors,
  events,
  storage
}) {
  const sectionTypes = (0, _typesKnown.getModuleTypes)(registry, (0, _util.stringCamelCase)(mod.name));
  return registry.createType('PalletMetadataV14', {
    calls: calls && convertCalls(compatTypes, registry, mod.name, calls, sectionTypes),
    constants: convertConstants(compatTypes, registry, constants, sectionTypes),
    errors: errors && convertErrors(compatTypes, registry, mod.name, errors, sectionTypes),
    events: events && convertEvents(compatTypes, registry, mod.name, events, sectionTypes),
    index: mod.index,
    name: mod.name,
    storage: storage && convertStorage(compatTypes, registry, storage, sectionTypes)
  });
}
/**
 * Convert the Metadata to v14
 * @internal
 **/


function toV14(registry, v13, metaVersion) {
  const compatTypes = [];
  compatType(compatTypes, 'Null'); // position 0 always has Null

  registerOriginCaller(registry, v13.modules, metaVersion);
  const extrinsic = convertExtrinsic(registry, v13.extrinsic);
  const pallets = v13.modules.map(mod => createPallet(compatTypes, registry, mod, {
    calls: mod.calls.unwrapOr(null),
    constants: mod.constants,
    errors: mod.errors.length ? mod.errors : null,
    events: mod.events.unwrapOr(null),
    storage: mod.storage.unwrapOr(null)
  }));
  return registry.createType('MetadataV14', {
    extrinsic,
    lookup: {
      types: compatTypes.map((type, id) => registry.createType('PortableType', {
        id,
        type
      }))
    },
    pallets
  });
}

},{"@polkadot/types-known":204,"@polkadot/util":640}],421:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toLatest = toLatest;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * Convert the Metadata (which is an alias) to latest
 * @internal
 **/
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function toLatest(registry, v14, _metaVersion) {
  return v14;
}

},{}],422:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toV10 = toV10;

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// migrate a storage hasher type
// see https://github.com/paritytech/substrate/pull/4462

/** @internal */
function createStorageHasher(registry, hasher) {
  // Blake2_128_Concat has been added at index 2, so we increment all the
  // indexes greater than 2
  if (hasher.toNumber() >= 2) {
    return registry.createType('StorageHasherV10', hasher.toNumber() + 1);
  }

  return registry.createType('StorageHasherV10', hasher);
}
/** @internal */


function createStorageType(registry, entryType) {
  if (entryType.isMap) {
    return [{ ...entryType.asMap,
      hasher: createStorageHasher(registry, entryType.asMap.hasher)
    }, 1];
  }

  if (entryType.isDoubleMap) {
    return [{ ...entryType.asDoubleMap,
      hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
      key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
    }, 2];
  }

  return [entryType.asPlain, 0];
}
/** @internal */


function convertModule(registry, mod) {
  const storage = mod.storage.unwrapOr(null);
  return registry.createType('ModuleMetadataV10', { ...mod,
    storage: storage ? { ...storage,
      items: storage.items.map(item => ({ ...item,
        type: registry.createType('StorageEntryTypeV10', ...createStorageType(registry, item.type))
      }))
    } : null
  });
}
/** @internal */


function toV10(registry, {
  modules
}) {
  return registry.createType('MetadataV10', {
    modules: modules.map(mod => convertModule(registry, mod))
  });
}

},{}],423:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/types',
  version: '6.12.1'
};
exports.packageInfo = packageInfo;

},{}],424:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BitVec = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Raw = require("../codec/Raw.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeBitVecU8a(value) {
  if (!value || !value.length) {
    return [0, new Uint8Array()];
  } // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded


  const [offset, length] = (0, _util.compactFromU8a)(value);
  const total = offset + Math.ceil(length.toNumber() / 8);
  (0, _util.assert)(total <= value.length, () => `BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
  return [length.toNumber(), value.subarray(offset, total)];
}
/** @internal */


function decodeBitVec(value) {
  if (Array.isArray(value) || (0, _util.isString)(value)) {
    const u8a = (0, _util.u8aToU8a)(value);
    return [u8a.length / 8, u8a];
  }

  return decodeBitVecU8a(value);
}
/**
 * @name BitVec
 * @description
 * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
 * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
 */


var _decodedLength = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("decodedLength");

class BitVec extends _Raw.Raw {
  constructor(registry, value) {
    const [decodedLength, u8a] = decodeBitVec(value);
    super(registry, u8a);
    Object.defineProperty(this, _decodedLength, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _decodedLength)[_decodedLength] = decodedLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.length + (0, _util.compactToU8a)((0, _classPrivateFieldLooseBase2.default)(this, _decodedLength)[_decodedLength]).length;
  }

  toHuman() {
    return `0b${[...this.toU8a(true)].map(d => `00000000${d.toString(2)}`.slice(-8)).join('_')}`;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'BitVec';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    const bitVec = super.toU8a();
    return isBare ? bitVec : (0, _util.u8aConcat)((0, _util.compactToU8a)((0, _classPrivateFieldLooseBase2.default)(this, _decodedLength)[_decodedLength]), bitVec);
  }

}

exports.BitVec = BitVec;

},{"../codec/Raw.js":246,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],425:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bool = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeBool(value) {
  if ((0, _util.isU8a)(value)) {
    return value[0] === 1;
  } else if (value instanceof Boolean) {
    return value.valueOf();
  }

  return !!value;
}
/**
 * @name bool
 * @description
 * Representation for a boolean value in the system. It extends the base JS `Boolean` class
 * @noInheritDoc
 */


class bool extends Boolean {
  // eslint-disable-next-line @typescript-eslint/ban-types
  constructor(registry, value = false) {
    super(decodeBool(value));
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return 1;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value (true when it wraps false/default)
   */


  get isEmpty() {
    return this.isFalse;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */


  get isFalse() {
    return !this.isTrue;
  }
  /**
   * @description Checks if the value is an empty value (always false)
   */


  get isTrue() {
    return this.valueOf();
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return (0, _util.u8aToHex)(this.toU8a());
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.valueOf();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'bool';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.toJSON().toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return new Uint8Array([this.valueOf() ? 1 : 0]);
  }

}

exports.bool = bool;

},{"@polkadot/util":640}],426:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bytes = void 0;

var _util = require("@polkadot/util");

var _Raw = require("../codec/Raw.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Bytes are used for things like on-chain code, so it has a healthy limit
const MAX_LENGTH = 10 * 1024 * 1024;
/** @internal */

function decodeBytesU8a(value) {
  if (!value.length) {
    return [new Uint8Array(), 0];
  } // handle all other Uint8Array inputs, these do have a length prefix


  const [offset, length] = (0, _util.compactFromU8a)(value);
  const total = offset + length.toNumber();
  (0, _util.assert)(length.lten(MAX_LENGTH), () => `Bytes length ${length.toString()} exceeds ${MAX_LENGTH}`);
  (0, _util.assert)(total <= value.length, () => `Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
  return [value.subarray(offset, total), total];
}
/** @internal */


function decodeBytes(value) {
  if (Array.isArray(value) || (0, _util.isString)(value)) {
    return [(0, _util.u8aToU8a)(value), 0];
  } else if (!(value instanceof _Raw.Raw) && (0, _util.isU8a)(value)) {
    // We are ensuring we are not a Raw instance. In the case of a Raw we already have gotten
    // rid of the length, i.e. new Bytes(new Bytes(...)) will work as expected
    return decodeBytesU8a(value);
  }

  return [value, 0];
}
/**
 * @name Bytes
 * @description
 * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
 * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
 * as what is found in [[Text]] and [[Vec]])
 */


class Bytes extends _Raw.Raw {
  constructor(registry, value) {
    const [u8a, decodedLength] = decodeBytes(value);
    super(registry, u8a, decodedLength);
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.length + (0, _util.compactToU8a)(this.length).length;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Bytes';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    return isBare ? super.toU8a(isBare) : (0, _util.compactAddLength)(this);
  }

}

exports.Bytes = Bytes;

},{"../codec/Raw.js":246,"@polkadot/util":640}],427:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Data = void 0;

var _util = require("@polkadot/util");

var _Enum = require("../codec/Enum.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function decodeDataU8a(registry, value) {
  const indicator = value[0];

  if (!indicator) {
    return [undefined, undefined];
  } else if (indicator >= 1 && indicator <= 33) {
    const length = indicator - 1;
    const data = value.subarray(1, length + 1); // in this case, we are passing a Raw back (since we have no length)

    return [registry.createType('Raw', data), 1];
  } else if (indicator >= 34 && indicator <= 37) {
    return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2
  }

  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
}
/** @internal */


function decodeData(registry, value) {
  if ((0, _util.isU8a)(value) || (0, _util.isString)(value)) {
    return decodeDataU8a(registry, (0, _util.u8aToU8a)(value));
  } else if (!value) {
    return [undefined, undefined];
  } // assume we have an Enum or an  object input, handle this via the normal Enum decoding


  return [value, undefined];
}
/**
 * @name Data
 * @description
 * A [[Data]] container with node, raw or hashed data
 */


class Data extends _Enum.Enum {
  constructor(registry, value) {
    super(registry, {
      None: 'Null',
      // 0
      Raw: 'Bytes',
      // 1
      // eslint-disable-next-line sort-keys
      BlakeTwo256: 'H256',
      // 2
      Sha256: 'H256',
      // 3
      // eslint-disable-next-line sort-keys
      Keccak256: 'H256',
      // 4
      ShaThree256: 'H256' // 5

    }, ...decodeData(registry, value));
    (0, _util.assert)(!this.isRaw || this.asRaw.length <= 32, 'Data.Raw values are limited to a maximum length of 32 bytes');
  }

  get asBlakeTwo256() {
    return this.value;
  }

  get asKeccak256() {
    return this.value;
  }

  get asRaw() {
    return this.value;
  }

  get asSha256() {
    return this.value;
  }

  get asShaThree256() {
    return this.value;
  }

  get isBlakeTwo256() {
    return this.index === 2;
  }

  get isKeccak256() {
    return this.index === 4;
  }

  get isNone() {
    return this.index === 0;
  }

  get isRaw() {
    return this.index === 1;
  }

  get isSha256() {
    return this.index === 3;
  }

  get isShaThree256() {
    return this.index === 5;
  }
  /**
   * @description The encoded length
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   */


  toU8a() {
    if (this.index === 0) {
      return new Uint8Array(1);
    } else if (this.index === 1) {
      // don't add the length, just the data
      const data = this.value.toU8a(true);
      const length = Math.min(data.length, 32);
      const u8a = new Uint8Array(length + 1);
      u8a.set([length + 1], 0);
      u8a.set(data.subarray(0, length), 1);
      return u8a;
    } // otherwise we simply have a hash


    const u8a = new Uint8Array(33);
    u8a.set([this.index + 32], 0);
    u8a.set(this.value.toU8a(), 1);
    return u8a;
  }

}

exports.Data = Data;

},{"../codec/Enum.js":238,"@polkadot/util":640}],428:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.i128 = void 0;

var _Int = require("../codec/Int.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i128
 * @description
 * A 128-bit signed integer
 */
class i128 extends _Int.Int.with(128) {
  constructor(...args) {
    super(...args);
    this.__IntType = 'i128';
  }

}

exports.i128 = i128;

},{"../codec/Int.js":240}],429:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.i16 = void 0;

var _Int = require("../codec/Int.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i16
 * @description
 * A 16-bit signed integer
 */
class i16 extends _Int.Int.with(16) {
  constructor(...args) {
    super(...args);
    this.__IntType = 'i16';
  }

}

exports.i16 = i16;

},{"../codec/Int.js":240}],430:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.i256 = void 0;

var _Int = require("../codec/Int.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i256
 * @description
 * A 256-bit signed integer
 */
class i256 extends _Int.Int.with(256) {
  constructor(...args) {
    super(...args);
    this.__IntType = 'i256';
  }

}

exports.i256 = i256;

},{"../codec/Int.js":240}],431:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.i32 = void 0;

var _Int = require("../codec/Int.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i32
 * @description
 * A 32-bit signed integer
 */
class i32 extends _Int.Int.with(32) {
  constructor(...args) {
    super(...args);
    this.__IntType = 'i32';
  }

}

exports.i32 = i32;

},{"../codec/Int.js":240}],432:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.i64 = void 0;

var _Int = require("../codec/Int.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i64
 * @description
 * A 64-bit signed integer
 */
class i64 extends _Int.Int.with(64) {
  constructor(...args) {
    super(...args);
    this.__IntType = 'i64';
  }

}

exports.i64 = i64;

},{"../codec/Int.js":240}],433:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.i8 = void 0;

var _Int = require("../codec/Int.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name i8
 * @description
 * An 8-bit signed integer
 */
class i8 extends _Int.Int.with(8) {
  constructor(...args) {
    super(...args);
    this.__IntType = 'i8';
  }

}

exports.i8 = i8;

},{"../codec/Int.js":240}],434:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Null = void 0;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Null
 * @description
 * Implements a type that does not contain anything (apart from `null`)
 */
class Null {
  // Added for compatibility reasons, e.g. see Option
  constructor(registry) {
    this.registry = void 0;
    this.createdAtHash = void 0;
    this.initialU8aLength = 0;
    this.registry = registry;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return 0;
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    throw new Error('.hash is not implemented on Null');
  }
  /**
   * @description Checks if the value is an empty value (always true)
   */


  get isEmpty() {
    return true;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return other instanceof Null || (0, _util.isNull)(other);
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    return '0x';
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return null;
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Null';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return '';
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  toU8a(isBare) {
    return new Uint8Array();
  }

}

exports.Null = Null;

},{"@polkadot/util":640}],435:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StorageKey = void 0;
exports.unwrapStorageSi = unwrapStorageSi;
exports.unwrapStorageType = unwrapStorageType;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _index = require("../metadata/util/index.js");

var _Bytes = require("./Bytes.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
// hasher type -> [initialHashLength, canDecodeKey]
const HASHER_MAP = {
  // opaque
  Blake2_128: [16, false],
  // eslint-disable-line camelcase
  Blake2_128Concat: [16, true],
  // eslint-disable-line camelcase
  Blake2_256: [32, false],
  // eslint-disable-line camelcase
  Identity: [0, true],
  Twox128: [16, false],
  Twox256: [32, false],
  Twox64Concat: [8, true]
};

function unwrapStorageSi(type) {
  return type.isPlain ? type.asPlain : type.asMap.value;
}
/** @internal */


function unwrapStorageType(registry, type, isOptional) {
  const outputType = (0, _index.getSiName)(registry.lookup, unwrapStorageSi(type));
  return isOptional ? `Option<${outputType}>` : outputType;
}
/** @internal */


function decodeStorageKey(value) {
  if ((0, _util.isU8a)(value) || !value || (0, _util.isString)(value)) {
    // let Bytes handle these inputs
    return {
      key: value
    };
  } else if (value instanceof StorageKey) {
    return {
      key: value,
      method: value.method,
      section: value.section
    };
  } else if ((0, _util.isFunction)(value)) {
    return {
      key: value(),
      method: value.method,
      section: value.section
    };
  } else if (Array.isArray(value)) {
    const [fn, args = []] = value;
    (0, _util.assert)((0, _util.isFunction)(fn), 'Expected function input for key construction');

    if (fn.meta && fn.meta.type.isMap) {
      const map = fn.meta.type.asMap;
      (0, _util.assert)(Array.isArray(args) && args.length === map.hashers.length, () => `Expected an array of ${map.hashers.length} values as params to a Map query`);
    }

    return {
      key: fn(...args),
      method: fn.method,
      section: fn.section
    };
  }

  throw new Error(`Unable to convert input ${value} to StorageKey`);
}
/** @internal */


function decodeHashers(registry, value, hashers) {
  // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
  let offset = 32;
  const result = new Array(hashers.length);

  for (let i = 0; i < hashers.length; i++) {
    const [hasher, type] = hashers[i];
    const [hashLen, canDecode] = HASHER_MAP[hasher.type];
    const decoded = canDecode ? registry.createType(registry.createLookupType(type), value.subarray(offset + hashLen)) : registry.createType('Raw', value.subarray(offset, offset + hashLen));
    offset += hashLen + (canDecode ? decoded.encodedLength : 0);
    result[i] = decoded;
  }

  return result;
}
/** @internal */


function decodeArgsFromMeta(registry, value, meta) {
  if (!meta || !meta.type.isMap) {
    return [];
  }

  const {
    hashers,
    key
  } = meta.type.asMap;
  const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
  return decodeHashers(registry, value, hashers.map((h, i) => [h, keys[i]]));
}
/** @internal */


function getMeta(value) {
  if (value instanceof StorageKey) {
    return value.meta;
  } else if ((0, _util.isFunction)(value)) {
    return value.meta;
  } else if (Array.isArray(value)) {
    const [fn] = value;
    return fn.meta;
  }

  return undefined;
}
/** @internal */


function getType(registry, value) {
  if (value instanceof StorageKey) {
    return value.outputType;
  } else if ((0, _util.isFunction)(value)) {
    return unwrapStorageType(registry, value.meta.type);
  } else if (Array.isArray(value)) {
    const [fn] = value;

    if (fn.meta) {
      return unwrapStorageType(registry, fn.meta.type);
    }
  } // If we have no type set, default to Raw


  return 'Raw';
}
/**
 * @name StorageKey
 * @description
 * A representation of a storage key (typically hashed) in the system. It can be
 * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
 */


var _args = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("args");

var _meta = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("meta");

var _outputType = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("outputType");

var _method = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("method");

var _section = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("section");

class StorageKey extends _Bytes.Bytes {
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore This is assigned via this.decodeArgsFromMeta()
  constructor(registry, value, override = {}) {
    const {
      key,
      method,
      section
    } = decodeStorageKey(value);
    super(registry, key);
    Object.defineProperty(this, _args, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _meta, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _outputType, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _method, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _section, {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldLooseBase2.default)(this, _outputType)[_outputType] = getType(registry, value); // decode the args (as applicable based on the key and the hashers, after all init)

    this.setMeta(getMeta(value), override.section || section, override.method || method);
  }
  /**
   * @description Return the decoded arguments (applicable to map with decodable values)
   */


  get args() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _args)[_args];
  }
  /**
   * @description The metadata or `undefined` when not available
   */


  get meta() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _meta)[_meta];
  }
  /**
   * @description The key method or `undefined` when not specified
   */


  get method() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _method)[_method];
  }
  /**
   * @description The output type
   */


  get outputType() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _outputType)[_outputType];
  }
  /**
   * @description The key section or `undefined` when not specified
   */


  get section() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _section)[_section];
  }

  is(key) {
    return key.section === this.section && key.method === this.method;
  }
  /**
   * @description Sets the meta for this key
   */


  setMeta(meta, section, method) {
    (0, _classPrivateFieldLooseBase2.default)(this, _meta)[_meta] = meta;
    (0, _classPrivateFieldLooseBase2.default)(this, _method)[_method] = method || (0, _classPrivateFieldLooseBase2.default)(this, _method)[_method];
    (0, _classPrivateFieldLooseBase2.default)(this, _section)[_section] = section || (0, _classPrivateFieldLooseBase2.default)(this, _section)[_section];

    if (meta) {
      (0, _classPrivateFieldLooseBase2.default)(this, _outputType)[_outputType] = unwrapStorageType(this.registry, meta.type);
    }

    try {
      (0, _classPrivateFieldLooseBase2.default)(this, _args)[_args] = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
    } catch (error) {// ignore...
    }

    return this;
  }
  /**
   * @description Returns the Human representation for this type
   */


  toHuman() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _args)[_args].length ? (0, _classPrivateFieldLooseBase2.default)(this, _args)[_args].map(a => a.toHuman()) : super.toHuman();
  }
  /**
   * @description Returns the raw type for this
   */


  toRawType() {
    return 'StorageKey';
  }

}

exports.StorageKey = StorageKey;

},{"../metadata/util/index.js":414,"./Bytes.js":426,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],436:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _Raw = require("../codec/Raw.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const MAX_LENGTH = 128 * 1024;
/** @internal */

function decodeText(value) {
  if ((0, _util.isU8a)(value)) {
    if (!value.length) {
      return ['', 0];
    } // for Raw, the internal buffer does not have an internal length
    // (the same applies in e.g. Bytes, where length is added at encoding-time)


    if (value instanceof _Raw.Raw) {
      return [(0, _util.u8aToString)(value), 0];
    }

    const [offset, length] = (0, _util.compactFromU8a)(value);
    const total = offset + length.toNumber();
    (0, _util.assert)(length.lten(MAX_LENGTH), () => `Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);
    (0, _util.assert)(total <= value.length, () => `Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
    return [(0, _util.u8aToString)(value.subarray(offset, total)), total];
  } else if ((0, _util.isHex)(value)) {
    return [(0, _util.u8aToString)((0, _util.hexToU8a)(value)), 0];
  }

  return [value ? value.toString() : '', 0];
}
/**
 * @name Text
 * @description
 * This is a string wrapper, along with the length. It is used both for strings as well
 * as items such as documentation. It simply extends the standard JS `String` built-in
 * object, inheriting all methods exposed from `String`.
 * @noInheritDoc
 */
// TODO
//   - Strings should probably be trimmed (docs do come through with extra padding)


var _initialU8aLength = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("initialU8aLength");

var _override = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("override");

class Text extends String {
  constructor(registry, value) {
    const [str, decodedLength] = decodeText(value);
    super(str);
    this.registry = void 0;
    this.createdAtHash = void 0;
    Object.defineProperty(this, _initialU8aLength, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _override, {
      writable: true,
      value: null
    });
    this.registry = registry;
    (0, _classPrivateFieldLooseBase2.default)(this, _initialU8aLength)[_initialU8aLength] = decodedLength;
  }
  /**
   * @description The length of the value when encoded as a Uint8Array
   */


  get encodedLength() {
    return this.toU8a().length;
  }
  /**
   * @description The length of the initial encoded value (Only available when constructed from a Uint8Array)
   */


  get initialU8aLength() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _initialU8aLength)[_initialU8aLength];
  }
  /**
   * @description returns a hash of the contents
   */


  get hash() {
    return this.registry.hash(this.toU8a());
  }
  /**
   * @description Checks if the value is an empty value
   */


  get isEmpty() {
    return this.length === 0;
  }
  /**
   * @description The length of the value
   */


  get length() {
    // only included here since we ignore inherited docs
    return super.length;
  }
  /**
   * @description Compares the value of the input to see if there is a match
   */


  eq(other) {
    return (0, _util.isString)(other) ? this.toString() === other.toString() : false;
  }
  /**
   * @description Set an override value for this
   */


  setOverride(override) {
    (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] = override;
  }
  /**
   * @description Returns a hex string representation of the value
   */


  toHex() {
    // like with Vec<u8>, when we are encoding to hex, we don't actually add
    // the length prefix (it is already implied by the actual string length)
    return (0, _util.u8aToHex)(this.toU8a(true));
  }
  /**
   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
   */


  toHuman() {
    return this.toJSON();
  }
  /**
   * @description Converts the Object to JSON, typically used for RPC transfers
   */


  toJSON() {
    return this.toString();
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Text';
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _override)[_override] || super.toString();
  }
  /**
   * @description Encodes the value as a Uint8Array as per the SCALE specifications
   * @param isBare true when the value has none of the type-specific prefixes (internal)
   */


  toU8a(isBare) {
    // NOTE Here we use the super toString (we are not taking overrides into account,
    // rather encoding the original value the string was constructed with)
    const encoded = (0, _util.stringToU8a)(super.toString());
    return isBare ? encoded : (0, _util.compactAddLength)(encoded);
  }

}

exports.Text = Text;

},{"../codec/Raw.js":246,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],437:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Type = void 0;

var _sanitize = require("../create/sanitize.js");

var _Text = require("./Text.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name Type
 * @description
 * This is a extended version of Text, specifically to handle types. Here we rely fully
 * on what Text provides us, however we also adjust the types received from the runtime,
 * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
 */
class Type extends _Text.Text {
  constructor(registry, value = '') {
    super(registry, value);
    this.setOverride((0, _sanitize.sanitize)(this.toString()));
  }
  /**
   * @description Returns the base runtime type name for this instance
   */


  toRawType() {
    return 'Type';
  }

}

exports.Type = Type;

},{"../create/sanitize.js":274,"./Text.js":436}],438:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u128 = void 0;

var _UInt = require("../codec/UInt.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u128
 * @description
 * A 128-bit unsigned integer
 */
class u128 extends _UInt.UInt.with(128) {
  constructor(...args) {
    super(...args);
    this.__UIntType = 'u128';
  }

}

exports.u128 = u128;

},{"../codec/UInt.js":252}],439:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u16 = void 0;

var _UInt = require("../codec/UInt.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u16
 * @description
 * A 16-bit unsigned integer
 */
class u16 extends _UInt.UInt.with(16) {
  constructor(...args) {
    super(...args);
    this.__UIntType = 'u16';
  }

}

exports.u16 = u16;

},{"../codec/UInt.js":252}],440:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u256 = void 0;

var _UInt = require("../codec/UInt.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u256
 * @description
 * A 256-bit unsigned integer
 */
class u256 extends _UInt.UInt.with(256) {
  constructor(...args) {
    super(...args);
    this.__UIntType = 'u256';
  }

}

exports.u256 = u256;

},{"../codec/UInt.js":252}],441:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u32 = void 0;

var _UInt = require("../codec/UInt.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u32
 * @description
 * A 32-bit unsigned integer
 */
class u32 extends _UInt.UInt.with(32) {
  constructor(...args) {
    super(...args);
    this.__UIntType = 'u32';
  }

}

exports.u32 = u32;

},{"../codec/UInt.js":252}],442:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u64 = void 0;

var _UInt = require("../codec/UInt.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u64
 * @description
 * A 64-bit unsigned integer
 */
class u64 extends _UInt.UInt.with(64) {
  constructor(...args) {
    super(...args);
    this.__UIntType = 'u64';
  }

}

exports.u64 = u64;

},{"../codec/UInt.js":252}],443:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8 = void 0;

var _UInt = require("../codec/UInt.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8
 * @description
 * An 8-bit unsigned integer
 */
class u8 extends _UInt.UInt.with(8) {
  constructor(...args) {
    super(...args);
    this.__UIntType = 'u8';
  }

}

exports.u8 = u8;

},{"../codec/UInt.js":252}],444:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usize = void 0;

var _U = require("./U32.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name USize
 * @description
 * A System default unsigned number, typically used in RPC to report non-consensus
 * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
 * It is not to be used, since it created consensus mismatches.
 */
class usize extends _U.u32 {
  constructor(registry, value) {
    super(registry, value);
    throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
  }

}

exports.usize = usize;

},{"./U32.js":441}],445:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BitVec", {
  enumerable: true,
  get: function () {
    return _BitVec.BitVec;
  }
});
Object.defineProperty(exports, "Bool", {
  enumerable: true,
  get: function () {
    return _Bool.bool;
  }
});
Object.defineProperty(exports, "Bytes", {
  enumerable: true,
  get: function () {
    return _Bytes.Bytes;
  }
});
Object.defineProperty(exports, "Data", {
  enumerable: true,
  get: function () {
    return _Data.Data;
  }
});
Object.defineProperty(exports, "I128", {
  enumerable: true,
  get: function () {
    return _I5.i128;
  }
});
Object.defineProperty(exports, "I16", {
  enumerable: true,
  get: function () {
    return _I2.i16;
  }
});
Object.defineProperty(exports, "I256", {
  enumerable: true,
  get: function () {
    return _I6.i256;
  }
});
Object.defineProperty(exports, "I32", {
  enumerable: true,
  get: function () {
    return _I3.i32;
  }
});
Object.defineProperty(exports, "I64", {
  enumerable: true,
  get: function () {
    return _I4.i64;
  }
});
Object.defineProperty(exports, "I8", {
  enumerable: true,
  get: function () {
    return _I.i8;
  }
});
Object.defineProperty(exports, "Null", {
  enumerable: true,
  get: function () {
    return _Null.Null;
  }
});
Object.defineProperty(exports, "StorageKey", {
  enumerable: true,
  get: function () {
    return _StorageKey.StorageKey;
  }
});
Object.defineProperty(exports, "Text", {
  enumerable: true,
  get: function () {
    return _Text.Text;
  }
});
Object.defineProperty(exports, "Type", {
  enumerable: true,
  get: function () {
    return _Type.Type;
  }
});
Object.defineProperty(exports, "U128", {
  enumerable: true,
  get: function () {
    return _U5.u128;
  }
});
Object.defineProperty(exports, "U16", {
  enumerable: true,
  get: function () {
    return _U2.u16;
  }
});
Object.defineProperty(exports, "U256", {
  enumerable: true,
  get: function () {
    return _U6.u256;
  }
});
Object.defineProperty(exports, "U32", {
  enumerable: true,
  get: function () {
    return _U3.u32;
  }
});
Object.defineProperty(exports, "U64", {
  enumerable: true,
  get: function () {
    return _U4.u64;
  }
});
Object.defineProperty(exports, "U8", {
  enumerable: true,
  get: function () {
    return _U.u8;
  }
});
Object.defineProperty(exports, "USize", {
  enumerable: true,
  get: function () {
    return _USize.usize;
  }
});
Object.defineProperty(exports, "bool", {
  enumerable: true,
  get: function () {
    return _Bool.bool;
  }
});
Object.defineProperty(exports, "i128", {
  enumerable: true,
  get: function () {
    return _I5.i128;
  }
});
Object.defineProperty(exports, "i16", {
  enumerable: true,
  get: function () {
    return _I2.i16;
  }
});
Object.defineProperty(exports, "i256", {
  enumerable: true,
  get: function () {
    return _I6.i256;
  }
});
Object.defineProperty(exports, "i32", {
  enumerable: true,
  get: function () {
    return _I3.i32;
  }
});
Object.defineProperty(exports, "i64", {
  enumerable: true,
  get: function () {
    return _I4.i64;
  }
});
Object.defineProperty(exports, "i8", {
  enumerable: true,
  get: function () {
    return _I.i8;
  }
});
Object.defineProperty(exports, "u128", {
  enumerable: true,
  get: function () {
    return _U5.u128;
  }
});
Object.defineProperty(exports, "u16", {
  enumerable: true,
  get: function () {
    return _U2.u16;
  }
});
Object.defineProperty(exports, "u256", {
  enumerable: true,
  get: function () {
    return _U6.u256;
  }
});
Object.defineProperty(exports, "u32", {
  enumerable: true,
  get: function () {
    return _U3.u32;
  }
});
Object.defineProperty(exports, "u64", {
  enumerable: true,
  get: function () {
    return _U4.u64;
  }
});
Object.defineProperty(exports, "u8", {
  enumerable: true,
  get: function () {
    return _U.u8;
  }
});
Object.defineProperty(exports, "usize", {
  enumerable: true,
  get: function () {
    return _USize.usize;
  }
});

var _BitVec = require("./BitVec.js");

var _Bool = require("./Bool.js");

var _Bytes = require("./Bytes.js");

var _Data = require("./Data.js");

var _I = require("./I8.js");

var _I2 = require("./I16.js");

var _I3 = require("./I32.js");

var _I4 = require("./I64.js");

var _I5 = require("./I128.js");

var _I6 = require("./I256.js");

var _Null = require("./Null.js");

var _StorageKey = require("./StorageKey.js");

var _Text = require("./Text.js");

var _Type = require("./Type.js");

var _U = require("./U8.js");

var _U2 = require("./U16.js");

var _U3 = require("./U32.js");

var _U4 = require("./U64.js");

var _U5 = require("./U128.js");

var _U6 = require("./U256.js");

var _USize = require("./USize.js");

},{"./BitVec.js":424,"./Bool.js":425,"./Bytes.js":426,"./Data.js":427,"./I128.js":428,"./I16.js":429,"./I256.js":430,"./I32.js":431,"./I64.js":432,"./I8.js":433,"./Null.js":434,"./StorageKey.js":435,"./Text.js":436,"./Type.js":437,"./U128.js":438,"./U16.js":439,"./U256.js":440,"./U32.js":441,"./U64.js":442,"./U8.js":443,"./USize.js":444}],446:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

},{}],447:[function(require,module,exports){
arguments[4][446][0].apply(exports,arguments)
},{"dup":446}],448:[function(require,module,exports){
arguments[4][446][0].apply(exports,arguments)
},{"dup":446}],449:[function(require,module,exports){
arguments[4][446][0].apply(exports,arguments)
},{"dup":446}],450:[function(require,module,exports){
arguments[4][446][0].apply(exports,arguments)
},{"dup":446}],451:[function(require,module,exports){
arguments[4][446][0].apply(exports,arguments)
},{"dup":446}],452:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("@polkadot/types/augment");

var _registry = require("@polkadot/types/types/registry");

Object.keys(_registry).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _registry[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _registry[key];
    }
  });
});

var _types = require("../create/types.js");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

var _calls = require("./calls.js");

Object.keys(_calls).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _calls[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _calls[key];
    }
  });
});

var _codec = require("./codec.js");

Object.keys(_codec).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _codec[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _codec[key];
    }
  });
});

var _definitions = require("./definitions.js");

Object.keys(_definitions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _definitions[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _definitions[key];
    }
  });
});

var _detect = require("./detect.js");

Object.keys(_detect).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _detect[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _detect[key];
    }
  });
});

var _events = require("./events.js");

Object.keys(_events).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _events[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _events[key];
    }
  });
});

var _extrinsic = require("./extrinsic.js");

Object.keys(_extrinsic).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _extrinsic[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _extrinsic[key];
    }
  });
});

var _interfaces = require("./interfaces.js");

Object.keys(_interfaces).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _interfaces[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _interfaces[key];
    }
  });
});

var _registry2 = require("./registry.js");

Object.keys(_registry2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _registry2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _registry2[key];
    }
  });
});

},{"../create/types.js":276,"./calls.js":446,"./codec.js":447,"./definitions.js":448,"./detect.js":449,"./events.js":450,"./extrinsic.js":451,"./interfaces.js":453,"./registry.js":454,"@polkadot/types/augment":223,"@polkadot/types/types/registry":454}],453:[function(require,module,exports){
arguments[4][446][0].apply(exports,arguments)
},{"dup":446}],454:[function(require,module,exports){
arguments[4][446][0].apply(exports,arguments)
},{"dup":446}],455:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addressToEvm = addressToEvm;

var _decode = require("./decode.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name addressToEvm
 * @summary Converts an SS58 address to its corresponding EVM address.
 */
function addressToEvm(address, ignoreChecksum) {
  const decoded = (0, _decode.decodeAddress)(address, ignoreChecksum);
  return decoded.subarray(0, 20);
}

},{"./decode.js":458}],456:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkAddress = checkAddress;

var _index = require("../base58/index.js");

var _checksum = require("./checksum.js");

var _defaults = require("./defaults.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name checkAddress
 * @summary Validates an ss58 address.
 * @description
 * From the provided input, validate that the address is a valid input.
 */
function checkAddress(address, prefix) {
  let decoded;

  try {
    decoded = (0, _index.base58Decode)(address);
  } catch (error) {
    return [false, error.message];
  }

  const [isValid,,, ss58Decoded] = (0, _checksum.checkAddressChecksum)(decoded);

  if (ss58Decoded !== prefix) {
    return [false, `Prefix mismatch, expected ${prefix}, found ${ss58Decoded}`];
  } else if (!_defaults.defaults.allowedEncodedLengths.includes(decoded.length)) {
    return [false, 'Invalid decoded address length'];
  }

  return [isValid, isValid ? null : 'Invalid decoded address checksum'];
}

},{"../base58/index.js":479,"./checksum.js":457,"./defaults.js":459}],457:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkAddressChecksum = checkAddressChecksum;

var _sshash = require("./sshash.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function checkAddressChecksum(decoded) {
  const ss58Length = decoded[0] & 0b01000000 ? 2 : 1;
  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 0b00111111) << 2 | decoded[1] >> 6 | (decoded[1] & 0b00111111) << 8; // 32/33 bytes public + 2 bytes checksum + prefix

  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
  const length = decoded.length - (isPublicKey ? 2 : 1); // calculate the hash and do the checksum byte checks

  const hash = (0, _sshash.sshash)(decoded.subarray(0, length));
  const isValid = (decoded[0] & 0b10000000) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);
  return [isValid, length, ss58Length, ss58Decoded];
}

},{"./sshash.js":472}],458:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeAddress = decodeAddress;

var _util = require("@polkadot/util");

var _index = require("../base58/index.js");

var _checksum = require("./checksum.js");

var _defaults = require("./defaults.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L6
function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
  (0, _util.assert)(encoded, 'Invalid empty address passed');

  if ((0, _util.isU8a)(encoded) || (0, _util.isHex)(encoded)) {
    return (0, _util.u8aToU8a)(encoded);
  }

  try {
    const decoded = (0, _index.base58Decode)(encoded);
    (0, _util.assert)(_defaults.defaults.allowedEncodedLengths.includes(decoded.length), 'Invalid decoded address length');
    const [isValid, endPos, ss58Length, ss58Decoded] = (0, _checksum.checkAddressChecksum)(decoded);
    (0, _util.assert)(ignoreChecksum || isValid, 'Invalid decoded address checksum');
    (0, _util.assert)([-1, ss58Decoded].includes(ss58Format), () => `Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
    return decoded.slice(ss58Length, endPos);
  } catch (error) {
    throw new Error(`Decoding ${encoded}: ${error.message}`);
  }
}

},{"../base58/index.js":479,"./checksum.js":457,"./defaults.js":459,"@polkadot/util":640}],459:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaults = void 0;

var _networks = require("../networks.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function networkToPrefix({
  prefix
}) {
  return prefix;
}

const defaults = {
  allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
  // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
  allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
  allowedPrefix: _networks.availableNetworks.map(networkToPrefix),
  prefix: 42
};
exports.defaults = defaults;

},{"../networks.js":545}],460:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deriveAddress = deriveAddress;

var _util = require("@polkadot/util");

var _index = require("../key/index.js");

var _index2 = require("../sr25519/index.js");

var _decode = require("./decode.js");

var _encode = require("./encode.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function filterHard({
  isHard
}) {
  return isHard;
}
/**
 * @name deriveAddress
 * @summary Creates a sr25519 derived address from the supplied and path.
 * @description
 * Creates a sr25519 derived address based on the input address/publicKey and the uri supplied.
 */


function deriveAddress(who, suri, ss58Format) {
  const {
    path
  } = (0, _index.keyExtractPath)(suri);
  (0, _util.assert)(path.length && !path.every(filterHard), 'Expected suri to contain a combination of non-hard paths');
  let publicKey = (0, _decode.decodeAddress)(who);

  for (const {
    chainCode
  } of path) {
    publicKey = (0, _index2.sr25519DerivePublic)(publicKey, chainCode);
  }

  return (0, _encode.encodeAddress)(publicKey, ss58Format);
}

},{"../key/index.js":530,"../sr25519/index.js":576,"./decode.js":458,"./encode.js":461,"@polkadot/util":640}],461:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeAddress = encodeAddress;

var _util = require("@polkadot/util");

var _index = require("../base58/index.js");

var _decode = require("./decode.js");

var _defaults = require("./defaults.js");

var _sshash = require("./sshash.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Original implementation: https://github.com/paritytech/polka-ui/blob/4858c094684769080f5811f32b081dd7780b0880/src/polkadot.js#L34
function encodeAddress(key, ss58Format = _defaults.defaults.prefix) {
  // decode it, this means we can re-encode an address
  const u8a = (0, _decode.decodeAddress)(key);
  (0, _util.assert)(ss58Format >= 0 && ss58Format <= 16383 && ![46, 47].includes(ss58Format), 'Out of range ss58Format specified');
  (0, _util.assert)(_defaults.defaults.allowedDecodedLengths.includes(u8a.length), () => `Expected a valid key to convert, with length ${_defaults.defaults.allowedDecodedLengths.join(', ')}`);
  const input = (0, _util.u8aConcat)(ss58Format < 64 ? [ss58Format] : [(ss58Format & 0b0000000011111100) >> 2 | 0b01000000, ss58Format >> 8 | (ss58Format & 0b0000000000000011) << 6], u8a);
  return (0, _index.base58Encode)((0, _util.u8aConcat)(input, (0, _sshash.sshash)(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
}

},{"../base58/index.js":479,"./decode.js":458,"./defaults.js":459,"./sshash.js":472,"@polkadot/util":640}],462:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeDerivedAddress = encodeDerivedAddress;

var _decode = require("./decode.js");

var _encode = require("./encode.js");

var _keyDerived = require("./keyDerived.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name encodeDerivedAddress
 * @summary Creates a derived address as used in Substrate utility.
 * @description
 * Creates a Substrate derived address based on the input address/publicKey and the index supplied.
 */
function encodeDerivedAddress(who, index, ss58Format) {
  return (0, _encode.encodeAddress)((0, _keyDerived.createKeyDerived)((0, _decode.decodeAddress)(who), index), ss58Format);
}

},{"./decode.js":458,"./encode.js":461,"./keyDerived.js":468}],463:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.encodeMultiAddress = encodeMultiAddress;

var _encode = require("./encode.js");

var _keyMulti = require("./keyMulti.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name encodeMultiAddress
 * @summary Creates a multisig address.
 * @description
 * Creates a Substrate multisig address based on the input address and the required threshold.
 */
function encodeMultiAddress(who, threshold, ss58Format) {
  return (0, _encode.encodeAddress)((0, _keyMulti.createKeyMulti)(who, threshold), ss58Format);
}

},{"./encode.js":461,"./keyMulti.js":469}],464:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addressEq = addressEq;

var _util = require("@polkadot/util");

var _decode = require("./decode.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name addressEq
 * @summary Compares two addresses, either in ss58, Uint8Array or hex format.
 * @description
 * For the input values, return true is the underlying public keys do match.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aEq } from '@polkadot/util';
 *
 * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
 * ```
 */
function addressEq(a, b) {
  return (0, _util.u8aEq)((0, _decode.decodeAddress)(a), (0, _decode.decodeAddress)(b));
}

},{"./decode.js":458,"@polkadot/util":640}],465:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.evmToAddress = evmToAddress;

var _util = require("@polkadot/util");

var _hasher = require("../secp256k1/hasher.js");

var _encode = require("./encode.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name evmToAddress
 * @summary Converts an EVM address to its corresponding SS58 address.
 */
function evmToAddress(evmAddress, ss58Format, hashType = 'blake2') {
  const message = (0, _util.u8aConcat)('evm:', evmAddress);
  (0, _util.assert)(message.length === 24, () => `Converting ${evmAddress}: Invalid evm address length`);
  return (0, _encode.encodeAddress)((0, _hasher.hasher)(hashType, message), ss58Format);
}

},{"../secp256k1/hasher.js":560,"./encode.js":461,"@polkadot/util":640}],466:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "addressEq", {
  enumerable: true,
  get: function () {
    return _eq.addressEq;
  }
});
Object.defineProperty(exports, "addressToEvm", {
  enumerable: true,
  get: function () {
    return _addressToEvm.addressToEvm;
  }
});
Object.defineProperty(exports, "checkAddress", {
  enumerable: true,
  get: function () {
    return _check.checkAddress;
  }
});
Object.defineProperty(exports, "checkAddressChecksum", {
  enumerable: true,
  get: function () {
    return _checksum.checkAddressChecksum;
  }
});
Object.defineProperty(exports, "createKeyDerived", {
  enumerable: true,
  get: function () {
    return _keyDerived.createKeyDerived;
  }
});
Object.defineProperty(exports, "createKeyMulti", {
  enumerable: true,
  get: function () {
    return _keyMulti.createKeyMulti;
  }
});
Object.defineProperty(exports, "decodeAddress", {
  enumerable: true,
  get: function () {
    return _decode.decodeAddress;
  }
});
Object.defineProperty(exports, "deriveAddress", {
  enumerable: true,
  get: function () {
    return _derive.deriveAddress;
  }
});
Object.defineProperty(exports, "encodeAddress", {
  enumerable: true,
  get: function () {
    return _encode.encodeAddress;
  }
});
Object.defineProperty(exports, "encodeDerivedAddress", {
  enumerable: true,
  get: function () {
    return _encodeDerived.encodeDerivedAddress;
  }
});
Object.defineProperty(exports, "encodeMultiAddress", {
  enumerable: true,
  get: function () {
    return _encodeMulti.encodeMultiAddress;
  }
});
Object.defineProperty(exports, "evmToAddress", {
  enumerable: true,
  get: function () {
    return _evmToAddress.evmToAddress;
  }
});
Object.defineProperty(exports, "isAddress", {
  enumerable: true,
  get: function () {
    return _is.isAddress;
  }
});
Object.defineProperty(exports, "setSS58Format", {
  enumerable: true,
  get: function () {
    return _setSS58Format.setSS58Format;
  }
});
Object.defineProperty(exports, "sortAddresses", {
  enumerable: true,
  get: function () {
    return _sort.sortAddresses;
  }
});
Object.defineProperty(exports, "validateAddress", {
  enumerable: true,
  get: function () {
    return _validate.validateAddress;
  }
});

var _addressToEvm = require("./addressToEvm.js");

var _check = require("./check.js");

var _checksum = require("./checksum.js");

var _keyMulti = require("./keyMulti.js");

var _keyDerived = require("./keyDerived.js");

var _decode = require("./decode.js");

var _derive = require("./derive.js");

var _encode = require("./encode.js");

var _encodeDerived = require("./encodeDerived.js");

var _encodeMulti = require("./encodeMulti.js");

var _evmToAddress = require("./evmToAddress.js");

var _eq = require("./eq.js");

var _is = require("./is.js");

var _setSS58Format = require("./setSS58Format.js");

var _sort = require("./sort.js");

var _validate = require("./validate.js");

},{"./addressToEvm.js":455,"./check.js":456,"./checksum.js":457,"./decode.js":458,"./derive.js":460,"./encode.js":461,"./encodeDerived.js":462,"./encodeMulti.js":463,"./eq.js":464,"./evmToAddress.js":465,"./is.js":467,"./keyDerived.js":468,"./keyMulti.js":469,"./setSS58Format.js":470,"./sort.js":471,"./validate.js":474}],467:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAddress = isAddress;

var _validate = require("./validate.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function isAddress(address, ignoreChecksum, ss58Format) {
  try {
    return (0, _validate.validateAddress)(address, ignoreChecksum, ss58Format);
  } catch (error) {
    return false;
  }
}

},{"./validate.js":474}],468:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createKeyDerived = createKeyDerived;

var _util = require("@polkadot/util");

var _asU8a = require("../blake2/asU8a.js");

var _bn = require("../bn.js");

var _decode = require("./decode.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const PREFIX = (0, _util.stringToU8a)('modlpy/utilisuba');

function createKeyDerived(who, index) {
  return (0, _asU8a.blake2AsU8a)((0, _util.u8aConcat)(PREFIX, (0, _decode.decodeAddress)(who), (0, _util.bnToU8a)(index, _bn.BN_LE_16_OPTS)));
}

},{"../blake2/asU8a.js":484,"../bn.js":486,"./decode.js":458,"@polkadot/util":640}],469:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createKeyMulti = createKeyMulti;

var _util = require("@polkadot/util");

var _asU8a = require("../blake2/asU8a.js");

var _bn = require("../bn.js");

var _util2 = require("./util.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const PREFIX = (0, _util.stringToU8a)('modlpy/utilisuba');

function createKeyMulti(who, threshold) {
  return (0, _asU8a.blake2AsU8a)((0, _util.u8aConcat)(PREFIX, (0, _util.compactToU8a)(who.length), ...(0, _util.u8aSorted)(who.map(_util2.addressToU8a)), (0, _util.bnToU8a)(threshold, _bn.BN_LE_16_OPTS)));
}

},{"../blake2/asU8a.js":484,"../bn.js":486,"./util.js":473,"@polkadot/util":640}],470:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSS58Format = setSS58Format;

var _util = require("@polkadot/util");

var _defaults = require("./defaults.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const l = (0, _util.logger)('setSS58Format');
/**
 * @description Sets the global SS58 format to use for address encoding
 * @deprecated Use keyring.setSS58Format
 */

function setSS58Format(prefix) {
  l.warn('Global setting of the ss58Format is deprecated and not recommended. Set format on the keyring (if used) or as pat of the address encode function');
  _defaults.defaults.prefix = prefix;
}

},{"./defaults.js":459,"@polkadot/util":640}],471:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortAddresses = sortAddresses;

var _util = require("@polkadot/util");

var _encode = require("./encode.js");

var _util2 = require("./util.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function sortAddresses(addresses, ss58Format) {
  const u8aToAddress = u8a => (0, _encode.encodeAddress)(u8a, ss58Format);

  return (0, _util.u8aSorted)(addresses.map(_util2.addressToU8a)).map(u8aToAddress);
}

},{"./encode.js":461,"./util.js":473,"@polkadot/util":640}],472:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sshash = sshash;

var _util = require("@polkadot/util");

var _asU8a = require("../blake2/asU8a.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const SS58_PREFIX = (0, _util.stringToU8a)('SS58PRE');

function sshash(key) {
  return (0, _asU8a.blake2AsU8a)((0, _util.u8aConcat)(SS58_PREFIX, key), 512);
}

},{"../blake2/asU8a.js":484,"@polkadot/util":640}],473:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addressToU8a = addressToU8a;

var _decode = require("./decode.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function addressToU8a(who) {
  return (0, _decode.decodeAddress)(who);
}

},{"./decode.js":458}],474:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateAddress = validateAddress;

var _decode = require("./decode.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function validateAddress(encoded, ignoreChecksum, ss58Format) {
  return !!(0, _decode.decodeAddress)(encoded, ignoreChecksum, ss58Format);
}

},{"./decode.js":458}],475:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBase32 = exports.base32Validate = exports.base32Encode = exports.base32Decode = void 0;

var _microBase = require("micro-base");

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const chars = 'abcdefghijklmnopqrstuvwxyz234567';
const config = {
  chars,
  coder: _microBase.utils.chain( // We define our own chain, the default base32 has padding
  _microBase.utils.radix2(5), _microBase.utils.alphabet(chars), {
    decode: input => input.split(''),
    encode: input => input.join('')
  }),
  ipfs: 'b',
  type: 'base32'
};
/**
 * @name base32Validate
 * @summary Validates a base32 value.
 * @description
 * Validates that the supplied value is valid base32, throwing exceptions if not
 */

const base32Validate = (0, _helpers.createValidate)(config);
/**
* @name isBase32
* @description Checks if the input is in base32, returning true/false
*/

exports.base32Validate = base32Validate;
const isBase32 = (0, _helpers.createIs)(base32Validate);
/**
 * @name base32Decode
 * @summary Delookup a base32 value.
 * @description
 * From the provided input, decode the base32 and return the result as an `Uint8Array`.
 */

exports.isBase32 = isBase32;
const base32Decode = (0, _helpers.createDecode)(config, base32Validate);
/**
* @name base32Encode
* @summary Creates a base32 value.
* @description
* From the provided input, create the base32 and return the result as a string.
*/

exports.base32Decode = base32Decode;
const base32Encode = (0, _helpers.createEncode)(config);
exports.base32Encode = base32Encode;

},{"./helpers.js":476,"micro-base":745}],476:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDecode = createDecode;
exports.createEncode = createEncode;
exports.createIs = createIs;
exports.createValidate = createValidate;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// re-export the type so *.d.ts files don't have ../src imports
function createDecode({
  coder,
  ipfs
}, validate) {
  return (value, ipfsCompat) => {
    validate(value, ipfsCompat);
    return coder.decode(ipfs && ipfsCompat ? value.substr(1) : value);
  };
}

function createEncode({
  coder,
  ipfs
}) {
  return (value, ipfsCompat) => {
    const out = coder.encode((0, _util.u8aToU8a)(value));
    return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
  };
}

function createIs(validate) {
  return (value, ipfsCompat) => {
    try {
      return validate(value, ipfsCompat);
    } catch (error) {
      return false;
    }
  };
}

function createValidate({
  chars,
  ipfs,
  type
}) {
  return (value, ipfsCompat) => {
    (0, _util.assert)(value && typeof value === 'string', () => `Expected non-null, non-empty ${type} string input`);

    if (ipfs && ipfsCompat) {
      (0, _util.assert)(value[0] === ipfs, () => `Expected ipfs-compatible ${type} to start with '${ipfs}'`);
    }

    for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {
      (0, _util.assert)(chars.includes(value[i]) || value[i] === '=' && (i === value.length - 1 || !chars.includes(value[i + 1])), () => `Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
    }

    return true;
  };
}

},{"@polkadot/util":640}],477:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "base32Decode", {
  enumerable: true,
  get: function () {
    return _bs.base32Decode;
  }
});
Object.defineProperty(exports, "base32Encode", {
  enumerable: true,
  get: function () {
    return _bs.base32Encode;
  }
});
Object.defineProperty(exports, "base32Validate", {
  enumerable: true,
  get: function () {
    return _bs.base32Validate;
  }
});
Object.defineProperty(exports, "isBase32", {
  enumerable: true,
  get: function () {
    return _bs.isBase32;
  }
});

var _bs = require("./bs32.js");

},{"./bs32.js":475}],478:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBase58 = exports.base58Validate = exports.base58Encode = exports.base58Decode = void 0;

var _microBase = require("micro-base");

var _helpers = require("../base32/helpers.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const config = {
  chars: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
  coder: _microBase.base58,
  ipfs: 'z',
  type: 'base58'
};
/**
 * @name base58Validate
 * @summary Validates a base58 value.
 * @description
 * Validates that the supplied value is valid base58, throwing exceptions if not
 */

const base58Validate = (0, _helpers.createValidate)(config);
/**
 * @name base58Decode
 * @summary Decodes a base58 value.
 * @description
 * From the provided input, decode the base58 and return the result as an `Uint8Array`.
 */

exports.base58Validate = base58Validate;
const base58Decode = (0, _helpers.createDecode)(config, base58Validate);
/**
* @name base58Encode
* @summary Creates a base58 value.
* @description
* From the provided input, create the base58 and return the result as a string.
*/

exports.base58Decode = base58Decode;
const base58Encode = (0, _helpers.createEncode)(config);
/**
* @name isBase58
* @description Checks if the input is in base58, returning true/false
*/

exports.base58Encode = base58Encode;
const isBase58 = (0, _helpers.createIs)(base58Validate);
exports.isBase58 = isBase58;

},{"../base32/helpers.js":476,"micro-base":745}],479:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "base58Decode", {
  enumerable: true,
  get: function () {
    return _bs.base58Decode;
  }
});
Object.defineProperty(exports, "base58Encode", {
  enumerable: true,
  get: function () {
    return _bs.base58Encode;
  }
});
Object.defineProperty(exports, "base58Validate", {
  enumerable: true,
  get: function () {
    return _bs.base58Validate;
  }
});
Object.defineProperty(exports, "isBase58", {
  enumerable: true,
  get: function () {
    return _bs.isBase58;
  }
});

var _bs = require("./bs58.js");

},{"./bs58.js":478}],480:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBase64 = exports.base64Validate = exports.base64Encode = exports.base64Decode = void 0;

var _microBase = require("micro-base");

var _helpers = require("../base32/helpers.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const config = {
  chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
  coder: _microBase.base64,
  type: 'base64'
};
/**
 * @name base64Validate
 * @summary Validates a base64 value.
 * @description
 * Validates that the supplied value is valid base64
 */

const base64Validate = (0, _helpers.createValidate)(config);
/**
 * @name isBase64
 * @description Checks if the input is in base64, returning true/false
 */

exports.base64Validate = base64Validate;
const isBase64 = (0, _helpers.createIs)(base64Validate);
/**
 * @name base64Decode
 * @summary Decodes a base64 value.
 * @description
 * From the provided input, decode the base64 and return the result as an `Uint8Array`.
 */

exports.isBase64 = isBase64;
const base64Decode = (0, _helpers.createDecode)(config, base64Validate);
/**
 * @name base64Encode
 * @summary Creates a base64 value.
 * @description
 * From the provided input, create the base64 and return the result as a string.
 */

exports.base64Decode = base64Decode;
const base64Encode = (0, _helpers.createEncode)(config);
exports.base64Encode = base64Encode;

},{"../base32/helpers.js":476,"micro-base":745}],481:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "base64Decode", {
  enumerable: true,
  get: function () {
    return _bs.base64Decode;
  }
});
Object.defineProperty(exports, "base64Encode", {
  enumerable: true,
  get: function () {
    return _bs.base64Encode;
  }
});
Object.defineProperty(exports, "base64Pad", {
  enumerable: true,
  get: function () {
    return _pad.base64Pad;
  }
});
Object.defineProperty(exports, "base64Trim", {
  enumerable: true,
  get: function () {
    return _trim.base64Trim;
  }
});
Object.defineProperty(exports, "base64Validate", {
  enumerable: true,
  get: function () {
    return _bs.base64Validate;
  }
});
Object.defineProperty(exports, "isBase64", {
  enumerable: true,
  get: function () {
    return _bs.isBase64;
  }
});

var _bs = require("./bs64.js");

var _pad = require("./pad.js");

var _trim = require("./trim.js");

},{"./bs64.js":480,"./pad.js":482,"./trim.js":483}],482:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.base64Pad = base64Pad;

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name base64Pad
 * @description Adds padding characters for correct length
 */
function base64Pad(value) {
  return value.padEnd(value.length + value.length % 4, '=');
}

},{}],483:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.base64Trim = base64Trim;

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name base64Trim
 * @description Trims padding characters
 */
function base64Trim(value) {
  while (value.length && value[value.length - 1] === '=') {
    value = value.slice(0, -1);
  }

  return value;
}

},{}],484:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.blake2AsHex = void 0;
exports.blake2AsU8a = blake2AsU8a;

var _blake2b = require("@noble/hashes/lib/blake2b");

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _helpers = require("../helpers.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name blake2AsU8a
 * @summary Creates a blake2b u8a from the input.
 * @description
 * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { blake2AsU8a } from '@polkadot/util-crypto';
 *
 * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa5, 0x3f, 0x98, 0x1c, 0x4d, 0x0d]
 * ```
 */
function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
  const byteLength = Math.ceil(bitLength / 8);
  const u8a = (0, _util.u8aToU8a)(data);
  return !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.blake2b)(u8a, (0, _util.u8aToU8a)(key), byteLength) : (0, _blake2b.blake2b)(u8a, {
    dkLen: byteLength,
    key: key || undefined
  });
}
/**
 * @name blake2AsHex
 * @description Creates a blake2b hex from the input.
 */


const blake2AsHex = (0, _helpers.createAsHex)(blake2AsU8a);
exports.blake2AsHex = blake2AsHex;

},{"../helpers.js":510,"@noble/hashes/lib/blake2b":6,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],485:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "blake2AsHex", {
  enumerable: true,
  get: function () {
    return _asU8a.blake2AsHex;
  }
});
Object.defineProperty(exports, "blake2AsU8a", {
  enumerable: true,
  get: function () {
    return _asU8a.blake2AsU8a;
  }
});

var _asU8a = require("./asU8a.js");

},{"./asU8a.js":484}],486:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BN_LE_OPTS = exports.BN_LE_512_OPTS = exports.BN_LE_32_OPTS = exports.BN_LE_256_OPTS = exports.BN_LE_16_OPTS = exports.BN_BE_OPTS = exports.BN_BE_32_OPTS = exports.BN_BE_256_OPTS = void 0;
// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const BN_BE_OPTS = {
  isLe: false
};
exports.BN_BE_OPTS = BN_BE_OPTS;
const BN_LE_OPTS = {
  isLe: true
};
exports.BN_LE_OPTS = BN_LE_OPTS;
const BN_LE_16_OPTS = {
  bitLength: 16,
  isLe: true
};
exports.BN_LE_16_OPTS = BN_LE_16_OPTS;
const BN_BE_32_OPTS = {
  bitLength: 32,
  isLe: false
};
exports.BN_BE_32_OPTS = BN_BE_32_OPTS;
const BN_LE_32_OPTS = {
  bitLength: 32,
  isLe: true
};
exports.BN_LE_32_OPTS = BN_LE_32_OPTS;
const BN_BE_256_OPTS = {
  bitLength: 256,
  isLe: false
};
exports.BN_BE_256_OPTS = BN_BE_256_OPTS;
const BN_LE_256_OPTS = {
  bitLength: 256,
  isLe: true
};
exports.BN_LE_256_OPTS = BN_LE_256_OPTS;
const BN_LE_512_OPTS = {
  bitLength: 512,
  isLe: true
};
exports.BN_LE_512_OPTS = BN_LE_512_OPTS;

},{}],487:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  packageInfo: true
};
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

require("./cryptoInit.js");

var _packageInfo = require("./packageInfo.js");

var _index = require("./address/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _index2 = require("./base32/index.js");

Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    }
  });
});

var _index3 = require("./base58/index.js");

Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    }
  });
});

var _index4 = require("./base64/index.js");

Object.keys(_index4).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index4[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index4[key];
    }
  });
});

var _index5 = require("./blake2/index.js");

Object.keys(_index5).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index5[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index5[key];
    }
  });
});

var _crypto = require("./crypto.js");

Object.keys(_crypto).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _crypto[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _crypto[key];
    }
  });
});

var _index6 = require("./ed25519/index.js");

Object.keys(_index6).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index6[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index6[key];
    }
  });
});

var _index7 = require("./ethereum/index.js");

Object.keys(_index7).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index7[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index7[key];
    }
  });
});

var _index8 = require("./hd/index.js");

Object.keys(_index8).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index8[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index8[key];
    }
  });
});

var _index9 = require("./hmac/index.js");

Object.keys(_index9).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index9[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index9[key];
    }
  });
});

var _index10 = require("./json/index.js");

Object.keys(_index10).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index10[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index10[key];
    }
  });
});

var _index11 = require("./keccak/index.js");

Object.keys(_index11).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index11[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index11[key];
    }
  });
});

var _index12 = require("./key/index.js");

Object.keys(_index12).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index12[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index12[key];
    }
  });
});

var _index13 = require("./mnemonic/index.js");

Object.keys(_index13).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index13[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index13[key];
    }
  });
});

var _networks = require("./networks.js");

Object.keys(_networks).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _networks[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _networks[key];
    }
  });
});

var _index14 = require("./nacl/index.js");

Object.keys(_index14).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index14[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index14[key];
    }
  });
});

var _index15 = require("./pbkdf2/index.js");

Object.keys(_index15).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index15[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index15[key];
    }
  });
});

var _index16 = require("./random/index.js");

Object.keys(_index16).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index16[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index16[key];
    }
  });
});

var _index17 = require("./scrypt/index.js");

Object.keys(_index17).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index17[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index17[key];
    }
  });
});

var _index18 = require("./secp256k1/index.js");

Object.keys(_index18).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index18[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index18[key];
    }
  });
});

var _index19 = require("./sha/index.js");

Object.keys(_index19).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index19[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index19[key];
    }
  });
});

var _index20 = require("./signature/index.js");

Object.keys(_index20).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index20[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index20[key];
    }
  });
});

var _index21 = require("./sr25519/index.js");

Object.keys(_index21).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index21[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index21[key];
    }
  });
});

var _index22 = require("./xxhash/index.js");

Object.keys(_index22).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index22[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index22[key];
    }
  });
});

},{"./address/index.js":466,"./base32/index.js":477,"./base58/index.js":479,"./base64/index.js":481,"./blake2/index.js":485,"./crypto.js":488,"./cryptoInit.js":489,"./ed25519/index.js":493,"./ethereum/index.js":501,"./hd/index.js":505,"./hmac/index.js":511,"./json/index.js":519,"./keccak/index.js":521,"./key/index.js":530,"./mnemonic/index.js":534,"./nacl/index.js":542,"./networks.js":545,"./packageInfo.js":546,"./pbkdf2/index.js":548,"./random/index.js":551,"./scrypt/index.js":555,"./secp256k1/index.js":561,"./sha/index.js":568,"./signature/index.js":569,"./sr25519/index.js":576,"./xxhash/index.js":585}],488:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cryptoIsReady = void 0;
exports.cryptoWaitReady = cryptoWaitReady;

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const cryptoIsReady = _wasmCrypto.isReady;
exports.cryptoIsReady = cryptoIsReady;

function cryptoWaitReady() {
  return (0, _wasmCrypto.waitReady)().then(() => true).catch(error => {
    console.error('Unable to initialize @polkadot/util-crypto', error);
    return false;
  });
}

},{"@polkadot/wasm-crypto":721}],489:[function(require,module,exports){
"use strict";

require("@polkadot/x-bigint/shim");

var _secp256k = require("@noble/secp256k1");

var _util = require("@polkadot/util");

var _crypto = require("./crypto.js");

var _index = require("./hmac/index.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Set overrides on the secp256k1 utils
//   - hmacShaSync - This needs to be set, unset by default
_secp256k.utils.hmacSha256Sync = (key, ...messages) => (0, _index.hmacSha256AsU8a)(key, (0, _util.u8aConcat)(...messages)); // start init process immediately


(0, _crypto.cryptoWaitReady)().catch(() => {// shouldn't happen, logged above
});

},{"./crypto.js":488,"./hmac/index.js":511,"@noble/secp256k1":15,"@polkadot/util":640,"@polkadot/x-bigint/shim":725}],490:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _packageInfo = require("@polkadot/networks/packageInfo");

var _util = require("@polkadot/util");

var _xRandomvalues = require("@polkadot/x-randomvalues");

var _packageInfo2 = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _util.detectPackage)(_packageInfo2.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo.packageInfo, _util.packageInfo, _xRandomvalues.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/util-crypto")
},{"./packageInfo.js":546,"@polkadot/networks/packageInfo":181,"@polkadot/util":640,"@polkadot/x-randomvalues":730}],491:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.convertPublicKeyToCurve25519 = convertPublicKeyToCurve25519;
exports.convertSecretKeyToCurve25519 = convertSecretKeyToCurve25519;

var _ed2curve = _interopRequireDefault(require("ed2curve"));

var _util = require("@polkadot/util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function convertSecretKeyToCurve25519(secretKey) {
  return _ed2curve.default.convertSecretKey(secretKey);
}

function convertPublicKeyToCurve25519(publicKey) {
  return (0, _util.assertReturn)(_ed2curve.default.convertPublicKey(publicKey), 'Unable to convert publicKey to ed25519');
}

},{"@polkadot/util":640,"ed2curve":742}],492:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ed25519DeriveHard = ed25519DeriveHard;

var _util = require("@polkadot/util");

var _asU8a = require("../blake2/asU8a.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const HDKD = (0, _util.compactAddLength)((0, _util.stringToU8a)('Ed25519HDKD'));

function ed25519DeriveHard(seed, chainCode) {
  (0, _util.assert)((0, _util.isU8a)(chainCode) && chainCode.length === 32, 'Invalid chainCode passed to derive');
  return (0, _asU8a.blake2AsU8a)((0, _util.u8aConcat)(HDKD, seed, chainCode));
}

},{"../blake2/asU8a.js":484,"@polkadot/util":640}],493:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "convertPublicKeyToCurve25519", {
  enumerable: true,
  get: function () {
    return _convertKey.convertPublicKeyToCurve25519;
  }
});
Object.defineProperty(exports, "convertSecretKeyToCurve25519", {
  enumerable: true,
  get: function () {
    return _convertKey.convertSecretKeyToCurve25519;
  }
});
Object.defineProperty(exports, "ed25519DeriveHard", {
  enumerable: true,
  get: function () {
    return _deriveHard.ed25519DeriveHard;
  }
});
Object.defineProperty(exports, "ed25519PairFromRandom", {
  enumerable: true,
  get: function () {
    return _fromRandom.ed25519PairFromRandom;
  }
});
Object.defineProperty(exports, "ed25519PairFromSecret", {
  enumerable: true,
  get: function () {
    return _fromSecret.ed25519PairFromSecret;
  }
});
Object.defineProperty(exports, "ed25519PairFromSeed", {
  enumerable: true,
  get: function () {
    return _fromSeed.ed25519PairFromSeed;
  }
});
Object.defineProperty(exports, "ed25519PairFromString", {
  enumerable: true,
  get: function () {
    return _fromString.ed25519PairFromString;
  }
});
Object.defineProperty(exports, "ed25519Sign", {
  enumerable: true,
  get: function () {
    return _sign.ed25519Sign;
  }
});
Object.defineProperty(exports, "ed25519Verify", {
  enumerable: true,
  get: function () {
    return _verify.ed25519Verify;
  }
});

var _convertKey = require("./convertKey.js");

var _deriveHard = require("./deriveHard.js");

var _fromRandom = require("./pair/fromRandom.js");

var _fromSecret = require("./pair/fromSecret.js");

var _fromSeed = require("./pair/fromSeed.js");

var _fromString = require("./pair/fromString.js");

var _sign = require("./sign.js");

var _verify = require("./verify.js");

},{"./convertKey.js":491,"./deriveHard.js":492,"./pair/fromRandom.js":494,"./pair/fromSecret.js":495,"./pair/fromSeed.js":496,"./pair/fromString.js":497,"./sign.js":498,"./verify.js":499}],494:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ed25519PairFromRandom = ed25519PairFromRandom;

var _index = require("../../random/index.js");

var _fromSeed = require("./fromSeed.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name ed25519PairFromRandom
 * @summary Creates a new public/secret keypair.
 * @description
 * Returns a new generate object containing a `publicKey` & `secretKey`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { ed25519PairFromRandom } from '@polkadot/util-crypto';
 *
 * ed25519PairFromRandom(); // => { secretKey: [...], publicKey: [...] }
 * ```
 */
function ed25519PairFromRandom() {
  return (0, _fromSeed.ed25519PairFromSeed)((0, _index.randomAsU8a)());
}

},{"../../random/index.js":551,"./fromSeed.js":496}],495:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ed25519PairFromSecret = ed25519PairFromSecret;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name ed25519PairFromSecret
 * @summary Creates a new public/secret keypair from a secret.
 * @description
 * Returns a object containing a `publicKey` & `secretKey` generated from the supplied secret.
 * @example
 * <BR>
 *
 * ```javascript
 * import { ed25519PairFromSecret } from '@polkadot/util-crypto';
 *
 * ed25519PairFromSecret(...); // => { secretKey: [...], publicKey: [...] }
 * ```
 */
function ed25519PairFromSecret(secret) {
  return _tweetnacl.default.sign.keyPair.fromSecretKey(secret);
}

},{"tweetnacl":970}],496:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ed25519PairFromSeed = ed25519PairFromSeed;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _wasmCrypto = require("@polkadot/wasm-crypto");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name ed25519PairFromSeed
 * @summary Creates a new public/secret keypair from a seed.
 * @description
 * Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
 * @example
 * <BR>
 *
 * ```javascript
 * import { ed25519PairFromSeed } from '@polkadot/util-crypto';
 *
 * ed25519PairFromSeed(...); // => { secretKey: [...], publicKey: [...] }
 * ```
 */
function ed25519PairFromSeed(seed, onlyJs) {
  if (!onlyJs && (0, _wasmCrypto.isReady)()) {
    const full = (0, _wasmCrypto.ed25519KeypairFromSeed)(seed);
    return {
      publicKey: full.slice(32),
      secretKey: full.slice(0, 64)
    };
  }

  return _tweetnacl.default.sign.keyPair.fromSeed(seed);
}

},{"@polkadot/wasm-crypto":721,"tweetnacl":970}],497:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ed25519PairFromString = ed25519PairFromString;

var _util = require("@polkadot/util");

var _asU8a = require("../../blake2/asU8a.js");

var _fromSeed = require("./fromSeed.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name ed25519PairFromString
 * @summary Creates a new public/secret keypair from a string.
 * @description
 * Returns a object containing a `publicKey` & `secretKey` generated from the supplied string. The string is hashed and the value used as the input seed.
 * @example
 * <BR>
 *
 * ```javascript
 * import { ed25519PairFromString } from '@polkadot/util-crypto';
 *
 * ed25519PairFromString('test'); // => { secretKey: [...], publicKey: [...] }
 * ```
 */
function ed25519PairFromString(value) {
  return (0, _fromSeed.ed25519PairFromSeed)((0, _asU8a.blake2AsU8a)((0, _util.stringToU8a)(value)));
}

},{"../../blake2/asU8a.js":484,"./fromSeed.js":496,"@polkadot/util":640}],498:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ed25519Sign = ed25519Sign;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name ed25519Sign
 * @summary Signs a message using the supplied secretKey
 * @description
 * Returns message signature of `message`, using the `secretKey`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { ed25519Sign } from '@polkadot/util-crypto';
 *
 * ed25519Sign([...], [...]); // => [...]
 * ```
 */
function ed25519Sign(message, {
  publicKey,
  secretKey
}, onlyJs) {
  (0, _util.assert)(secretKey, 'Expected a valid secretKey');
  const messageU8a = (0, _util.u8aToU8a)(message);
  return !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.ed25519Sign)(publicKey, secretKey.subarray(0, 32), messageU8a) : _tweetnacl.default.sign.detached(messageU8a, secretKey);
}

},{"@polkadot/util":640,"@polkadot/wasm-crypto":721,"tweetnacl":970}],499:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ed25519Verify = ed25519Verify;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name ed25519Sign
 * @summary Verifies the signature on the supplied message.
 * @description
 * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.
 * @example
 * <BR>
 *
 * ```javascript
 * import { ed25519Verify } from '@polkadot/util-crypto';
 *
 * ed25519Verify([...], [...], [...]); // => true/false
 * ```
 */
function ed25519Verify(message, signature, publicKey, onlyJs) {
  const messageU8a = (0, _util.u8aToU8a)(message);
  const publicKeyU8a = (0, _util.u8aToU8a)(publicKey);
  const signatureU8a = (0, _util.u8aToU8a)(signature);
  (0, _util.assert)(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
  (0, _util.assert)(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  return !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.ed25519Verify)(signatureU8a, messageU8a, publicKeyU8a) : _tweetnacl.default.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);
}

},{"@polkadot/util":640,"@polkadot/wasm-crypto":721,"tweetnacl":970}],500:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ethereumEncode = ethereumEncode;

var _util = require("@polkadot/util");

var _index = require("../keccak/index.js");

var _index2 = require("../secp256k1/index.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function getH160(u8a) {
  if ([33, 65].includes(u8a.length)) {
    u8a = (0, _index.keccakAsU8a)((0, _index2.secp256k1Expand)(u8a));
  }

  return u8a.slice(-20);
}

function ethereumEncode(addressOrPublic) {
  if (!addressOrPublic) {
    return '0x';
  }

  const u8aAddress = (0, _util.u8aToU8a)(addressOrPublic);
  (0, _util.assert)([20, 32, 33, 65].includes(u8aAddress.length), 'Invalid address or publicKey passed');
  const address = (0, _util.u8aToHex)(getH160(u8aAddress), -1, false);
  const hash = (0, _util.u8aToHex)((0, _index.keccakAsU8a)(address), -1, false);
  let result = '';

  for (let i = 0; i < 40; i++) {
    result = `${result}${parseInt(hash[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
  }

  return `0x${result}`;
}

},{"../keccak/index.js":521,"../secp256k1/index.js":561,"@polkadot/util":640}],501:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ethereumEncode", {
  enumerable: true,
  get: function () {
    return _encode.ethereumEncode;
  }
});
Object.defineProperty(exports, "isEthereumAddress", {
  enumerable: true,
  get: function () {
    return _isAddress.isEthereumAddress;
  }
});
Object.defineProperty(exports, "isEthereumChecksum", {
  enumerable: true,
  get: function () {
    return _isChecksum.isEthereumChecksum;
  }
});

var _encode = require("./encode.js");

var _isAddress = require("./isAddress.js");

var _isChecksum = require("./isChecksum.js");

},{"./encode.js":500,"./isAddress.js":502,"./isChecksum.js":503}],502:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEthereumAddress = isEthereumAddress;

var _util = require("@polkadot/util");

var _isChecksum = require("./isChecksum.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function isEthereumAddress(address) {
  if (!address || address.length !== 42 || !(0, _util.isHex)(address)) {
    return false;
  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
    return true;
  }

  return (0, _isChecksum.isEthereumChecksum)(address);
}

},{"./isChecksum.js":503,"@polkadot/util":640}],503:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEthereumChecksum = isEthereumChecksum;

var _util = require("@polkadot/util");

var _index = require("../keccak/index.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function isInvalidChar(char, byte) {
  return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
}

function isEthereumChecksum(_address) {
  const address = _address.replace('0x', '');

  const hash = (0, _util.u8aToHex)((0, _index.keccakAsU8a)(address.toLowerCase()), -1, false);

  for (let i = 0; i < 40; i++) {
    if (isInvalidChar(address[i], parseInt(hash[i], 16))) {
      return false;
    }
  }

  return true;
}

},{"../keccak/index.js":521,"@polkadot/util":640}],504:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hdEthereum = hdEthereum;

var _util = require("@polkadot/util");

var _bn = require("../../bn.js");

var _index = require("../../hmac/index.js");

var _index2 = require("../../secp256k1/index.js");

var _validatePath = require("../validatePath.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const MASTER_SECRET = (0, _util.stringToU8a)('Bitcoin seed');

function createCoded(secretKey, chainCode) {
  return {
    chainCode,
    publicKey: (0, _index2.secp256k1PairFromSeed)(secretKey).publicKey,
    secretKey
  };
}

function deriveChild(hd, index) {
  const indexBuffer = (0, _util.bnToU8a)(index, _bn.BN_BE_32_OPTS);
  const data = index >= _validatePath.HARDENED ? (0, _util.u8aConcat)(new Uint8Array(1), hd.secretKey, indexBuffer) : (0, _util.u8aConcat)(hd.publicKey, indexBuffer);

  try {
    const I = (0, _index.hmacShaAsU8a)(hd.chainCode, data, 512);
    return createCoded((0, _index2.secp256k1PrivateKeyTweakAdd)(hd.secretKey, I.slice(0, 32)), I.slice(32));
  } catch (err) {
    // In case parse256(IL) >= n or ki == 0, proceed with the next value for i
    return deriveChild(hd, index + 1);
  }
}

function hdEthereum(seed, path = '') {
  const I = (0, _index.hmacShaAsU8a)(MASTER_SECRET, seed, 512);
  let hd = createCoded(I.slice(0, 32), I.slice(32));

  if (!path || path === 'm' || path === 'M' || path === "m'" || path === "M'") {
    return hd;
  }

  (0, _util.assert)((0, _validatePath.hdValidatePath)(path), 'Invalid derivation path');
  const parts = path.split('/').slice(1);

  for (const p of parts) {
    hd = deriveChild(hd, parseInt(p, 10) + (p.length > 1 && p.endsWith("'") ? _validatePath.HARDENED : 0));
  }

  return hd;
}

},{"../../bn.js":486,"../../hmac/index.js":511,"../../secp256k1/index.js":561,"../validatePath.js":509,"@polkadot/util":640}],505:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "hdEthereum", {
  enumerable: true,
  get: function () {
    return _index.hdEthereum;
  }
});
Object.defineProperty(exports, "hdLedger", {
  enumerable: true,
  get: function () {
    return _index2.hdLedger;
  }
});
Object.defineProperty(exports, "hdValidatePath", {
  enumerable: true,
  get: function () {
    return _validatePath.hdValidatePath;
  }
});

var _index = require("./ethereum/index.js");

var _index2 = require("./ledger/index.js");

var _validatePath = require("./validatePath.js");

},{"./ethereum/index.js":504,"./ledger/index.js":507,"./validatePath.js":509}],506:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ledgerDerivePrivate = ledgerDerivePrivate;

var _util = require("@polkadot/util");

var _bn = require("../../bn.js");

var _index = require("../../hmac/index.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// performs hard-only derivation on the xprv
function ledgerDerivePrivate(xprv, index) {
  const kl = xprv.subarray(0, 32);
  const kr = xprv.subarray(32, 64);
  const cc = xprv.subarray(64, 96);
  const data = (0, _util.u8aConcat)([0], kl, kr, (0, _util.bnToU8a)(index, _bn.BN_LE_32_OPTS));
  const z = (0, _index.hmacShaAsU8a)(cc, data, 512);
  data[0] = 0x01;
  return (0, _util.u8aConcat)((0, _util.bnToU8a)((0, _util.u8aToBn)(kl, _bn.BN_LE_OPTS).iadd((0, _util.u8aToBn)(z.subarray(0, 28), _bn.BN_LE_OPTS).imul(_util.BN_EIGHT)), _bn.BN_LE_512_OPTS).subarray(0, 32), (0, _util.bnToU8a)((0, _util.u8aToBn)(kr, _bn.BN_LE_OPTS).iadd((0, _util.u8aToBn)(z.subarray(32, 64), _bn.BN_LE_OPTS)), _bn.BN_LE_512_OPTS).subarray(0, 32), (0, _index.hmacShaAsU8a)(cc, data, 512).subarray(32, 64));
}

},{"../../bn.js":486,"../../hmac/index.js":511,"@polkadot/util":640}],507:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hdLedger = hdLedger;

var _util = require("@polkadot/util");

var _index = require("../../ed25519/index.js");

var _index2 = require("../../mnemonic/index.js");

var _validatePath = require("../validatePath.js");

var _derivePrivate = require("./derivePrivate.js");

var _master = require("./master.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function hdLedger(_mnemonic, path) {
  const words = _mnemonic.split(' ').map(s => s.trim()).filter(s => s);

  (0, _util.assert)([12, 24, 25].includes(words.length), 'Expected a mnemonic with 24 words (or 25 including a password)');
  const [mnemonic, password] = words.length === 25 ? [words.slice(0, 24).join(' '), words[24]] : [words.join(' '), ''];
  (0, _util.assert)((0, _index2.mnemonicValidate)(mnemonic), 'Invalid mnemonic passed to ledger derivation');
  (0, _util.assert)((0, _validatePath.hdValidatePath)(path), 'Invalid derivation path');
  const parts = path.split('/').slice(1);
  let seed = (0, _master.ledgerMaster)(mnemonic, password);

  for (const p of parts) {
    const n = parseInt(p.replace(/'$/, ''), 10);
    seed = (0, _derivePrivate.ledgerDerivePrivate)(seed, n < _validatePath.HARDENED ? n + _validatePath.HARDENED : n);
  }

  return (0, _index.ed25519PairFromSeed)(seed.slice(0, 32));
}

},{"../../ed25519/index.js":493,"../../mnemonic/index.js":534,"../validatePath.js":509,"./derivePrivate.js":506,"./master.js":508,"@polkadot/util":640}],508:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ledgerMaster = ledgerMaster;

var _util = require("@polkadot/util");

var _index = require("../../hmac/index.js");

var _bip = require("../../mnemonic/bip39.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const ED25519_CRYPTO = 'ed25519 seed'; // gets an xprv from a mnemonic

function ledgerMaster(mnemonic, password) {
  const seed = (0, _bip.mnemonicToSeedSync)(mnemonic, password);
  const chainCode = (0, _index.hmacShaAsU8a)(ED25519_CRYPTO, new Uint8Array([1, ...seed]), 256);
  let priv;

  while (!priv || priv[31] & 0b00100000) {
    priv = (0, _index.hmacShaAsU8a)(ED25519_CRYPTO, priv || seed, 512);
  }

  priv[0] &= 0b11111000;
  priv[31] &= 0b01111111;
  priv[31] |= 0b01000000;
  return (0, _util.u8aConcat)(priv, chainCode);
}

},{"../../hmac/index.js":511,"../../mnemonic/bip39.js":532,"@polkadot/util":640}],509:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HARDENED = void 0;
exports.hdValidatePath = hdValidatePath;
// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const HARDENED = 0x80000000;
exports.HARDENED = HARDENED;

function hdValidatePath(path) {
  if (!path.startsWith('m/')) {
    return false;
  }

  const parts = path.split('/').slice(1);

  for (const p of parts) {
    const n = /^\d+'?$/.test(p) ? parseInt(p.replace(/'$/, ''), 10) : Number.NaN;

    if (isNaN(n) || n >= HARDENED || n < 0) {
      return false;
    }
  }

  return true;
}

},{}],510:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAsHex = createAsHex;
exports.createBitHasher = createBitHasher;
exports.createDualHasher = createDualHasher;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// re-export so TS *.d.ts generation is correct
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function createAsHex(fn) {
  return (...args) => (0, _util.u8aToHex)(fn(...args));
}

function createBitHasher(bitLength, fn) {
  return (data, onlyJs) => fn(data, bitLength, onlyJs);
}

function createDualHasher(wa, js) {
  return (value, bitLength = 256, onlyJs) => {
    const u8a = (0, _util.u8aToU8a)(value);
    return !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? wa[bitLength](u8a) : js[bitLength](u8a);
  };
}

},{"@polkadot/util":640,"@polkadot/wasm-crypto":721}],511:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "hmacSha256AsU8a", {
  enumerable: true,
  get: function () {
    return _shaAsU8a.hmacSha256AsU8a;
  }
});
Object.defineProperty(exports, "hmacSha512AsU8a", {
  enumerable: true,
  get: function () {
    return _shaAsU8a.hmacSha512AsU8a;
  }
});
Object.defineProperty(exports, "hmacShaAsU8a", {
  enumerable: true,
  get: function () {
    return _shaAsU8a.hmacShaAsU8a;
  }
});

var _shaAsU8a = require("./shaAsU8a.js");

},{"./shaAsU8a.js":512}],512:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hmacSha512AsU8a = exports.hmacSha256AsU8a = void 0;
exports.hmacShaAsU8a = hmacShaAsU8a;

var _hmac = require("@noble/hashes/lib/hmac");

var _sha = require("@noble/hashes/lib/sha256");

var _sha2 = require("@noble/hashes/lib/sha512");

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const JS_HASH = {
  256: _sha.sha256,
  512: _sha2.sha512
};
const WA_MHAC = {
  256: _wasmCrypto.hmacSha256,
  512: _wasmCrypto.hmacSha512
};

function createSha(bitLength) {
  return (key, data, onlyJs) => hmacShaAsU8a(key, data, bitLength, onlyJs);
}
/**
 * @name hmacShaAsU8a
 * @description creates a Hmac Sha (256/512) Uint8Array from the key & data
 */


function hmacShaAsU8a(key, data, bitLength = 256, onlyJs) {
  const u8aKey = (0, _util.u8aToU8a)(key);
  return !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? WA_MHAC[bitLength](u8aKey, data) : (0, _hmac.hmac)(JS_HASH[bitLength], u8aKey, data);
}
/**
 * @name hmacSha256AsU8a
 * @description creates a Hmac Sha256 Uint8Array from the key & data
 */


const hmacSha256AsU8a = createSha(256);
/**
 * @name hmacSha512AsU8a
 * @description creates a Hmac Sha512 Uint8Array from the key & data
 */

exports.hmacSha256AsU8a = hmacSha256AsU8a;
const hmacSha512AsU8a = createSha(512);
exports.hmacSha512AsU8a = hmacSha512AsU8a;

},{"@noble/hashes/lib/hmac":8,"@noble/hashes/lib/sha256":11,"@noble/hashes/lib/sha512":13,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],513:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});

},{"./bundle.js":487,"./detectPackage.js":490}],514:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SCRYPT_LENGTH = exports.NONCE_LENGTH = exports.ENCODING_VERSION = exports.ENCODING_NONE = exports.ENCODING = void 0;
// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const ENCODING = ['scrypt', 'xsalsa20-poly1305'];
exports.ENCODING = ENCODING;
const ENCODING_NONE = ['none'];
exports.ENCODING_NONE = ENCODING_NONE;
const ENCODING_VERSION = '3';
exports.ENCODING_VERSION = ENCODING_VERSION;
const NONCE_LENGTH = 24;
exports.NONCE_LENGTH = NONCE_LENGTH;
const SCRYPT_LENGTH = 32 + 3 * 4;
exports.SCRYPT_LENGTH = SCRYPT_LENGTH;

},{}],515:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jsonDecrypt = jsonDecrypt;

var _util = require("@polkadot/util");

var _index = require("../base64/index.js");

var _decryptData = require("./decryptData.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function jsonDecrypt({
  encoded,
  encoding
}, passphrase) {
  (0, _util.assert)(encoded, 'No encrypted data available to decode');
  return (0, _decryptData.jsonDecryptData)((0, _util.isHex)(encoded) ? (0, _util.hexToU8a)(encoded) : (0, _index.base64Decode)(encoded), passphrase, Array.isArray(encoding.type) ? encoding.type : [encoding.type]);
}

},{"../base64/index.js":481,"./decryptData.js":516,"@polkadot/util":640}],516:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jsonDecryptData = jsonDecryptData;

var _util = require("@polkadot/util");

var _index = require("../nacl/index.js");

var _index2 = require("../scrypt/index.js");

var _constants = require("./constants.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function jsonDecryptData(encrypted, passphrase, encType = _constants.ENCODING) {
  (0, _util.assert)(encrypted, 'No encrypted data available to decode');
  (0, _util.assert)(passphrase || !encType.includes('xsalsa20-poly1305'), 'Password required to decode encrypted data');
  let encoded = encrypted;

  if (passphrase) {
    let password;

    if (encType.includes('scrypt')) {
      const {
        params,
        salt
      } = (0, _index2.scryptFromU8a)(encrypted);
      password = (0, _index2.scryptEncode)(passphrase, salt, params).password;
      encrypted = encrypted.subarray(_constants.SCRYPT_LENGTH);
    } else {
      password = (0, _util.stringToU8a)(passphrase);
    }

    encoded = (0, _index.naclDecrypt)(encrypted.subarray(_constants.NONCE_LENGTH), encrypted.subarray(0, _constants.NONCE_LENGTH), (0, _util.u8aFixLength)(password, 256, true));
  }

  (0, _util.assert)(encoded, 'Unable to decode using the supplied passphrase');
  return encoded;
}

},{"../nacl/index.js":542,"../scrypt/index.js":555,"./constants.js":514,"@polkadot/util":640}],517:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jsonEncrypt = jsonEncrypt;

var _util = require("@polkadot/util");

var _index = require("../nacl/index.js");

var _index2 = require("../scrypt/index.js");

var _encryptFormat = require("./encryptFormat.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function jsonEncrypt(data, contentType, passphrase) {
  let isEncrypted = false;
  let encoded = data;

  if (passphrase) {
    const {
      params,
      password,
      salt
    } = (0, _index2.scryptEncode)(passphrase);
    const {
      encrypted,
      nonce
    } = (0, _index.naclEncrypt)(encoded, password.subarray(0, 32));
    isEncrypted = true;
    encoded = (0, _util.u8aConcat)((0, _index2.scryptToU8a)(salt, params), nonce, encrypted);
  }

  return (0, _encryptFormat.jsonEncryptFormat)(encoded, contentType, isEncrypted);
}

},{"../nacl/index.js":542,"../scrypt/index.js":555,"./encryptFormat.js":518,"@polkadot/util":640}],518:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jsonEncryptFormat = jsonEncryptFormat;

var _index = require("../base64/index.js");

var _constants = require("./constants.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function jsonEncryptFormat(encoded, contentType, isEncrypted) {
  return {
    encoded: (0, _index.base64Encode)(encoded),
    encoding: {
      content: contentType,
      type: isEncrypted ? _constants.ENCODING : _constants.ENCODING_NONE,
      version: _constants.ENCODING_VERSION
    }
  };
}

},{"../base64/index.js":481,"./constants.js":514}],519:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "jsonDecrypt", {
  enumerable: true,
  get: function () {
    return _decrypt.jsonDecrypt;
  }
});
Object.defineProperty(exports, "jsonDecryptData", {
  enumerable: true,
  get: function () {
    return _decryptData.jsonDecryptData;
  }
});
Object.defineProperty(exports, "jsonEncrypt", {
  enumerable: true,
  get: function () {
    return _encrypt.jsonEncrypt;
  }
});
Object.defineProperty(exports, "jsonEncryptFormat", {
  enumerable: true,
  get: function () {
    return _encryptFormat.jsonEncryptFormat;
  }
});

var _decrypt = require("./decrypt.js");

var _decryptData = require("./decryptData.js");

var _encrypt = require("./encrypt.js");

var _encryptFormat = require("./encryptFormat.js");

},{"./decrypt.js":515,"./decryptData.js":516,"./encrypt.js":517,"./encryptFormat.js":518}],520:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keccakAsU8a = exports.keccakAsHex = exports.keccak512AsU8a = exports.keccak256AsU8a = void 0;

var _sha = require("@noble/hashes/lib/sha3");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _helpers = require("../helpers.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name keccakAsU8a
 * @summary Creates a keccak Uint8Array from the input.
 * @description
 * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { keccakAsU8a } from '@polkadot/util-crypto';
 *
 * keccakAsU8a('123'); // => Uint8Array
 * ```
 */
const keccakAsU8a = (0, _helpers.createDualHasher)({
  256: _wasmCrypto.keccak256,
  512: _wasmCrypto.keccak512
}, {
  256: _sha.keccak_256,
  512: _sha.keccak_512
});
/**
 * @name keccak256AsU8a
 * @description Creates a keccak256 Uint8Array from the input.
 */

exports.keccakAsU8a = keccakAsU8a;
const keccak256AsU8a = (0, _helpers.createBitHasher)(256, keccakAsU8a);
/**
 * @name keccak512AsU8a
 * @description Creates a keccak512 Uint8Array from the input.
 */

exports.keccak256AsU8a = keccak256AsU8a;
const keccak512AsU8a = (0, _helpers.createBitHasher)(512, keccakAsU8a);
/**
 * @name keccakAsHex
 * @description Creates a keccak hex string from the input.
 */

exports.keccak512AsU8a = keccak512AsU8a;
const keccakAsHex = (0, _helpers.createAsHex)(keccakAsU8a);
exports.keccakAsHex = keccakAsHex;

},{"../helpers.js":510,"@noble/hashes/lib/sha3":12,"@polkadot/wasm-crypto":721}],521:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "keccak256AsU8a", {
  enumerable: true,
  get: function () {
    return _asU8a.keccak256AsU8a;
  }
});
Object.defineProperty(exports, "keccak512AsU8a", {
  enumerable: true,
  get: function () {
    return _asU8a.keccak512AsU8a;
  }
});
Object.defineProperty(exports, "keccakAsHex", {
  enumerable: true,
  get: function () {
    return _asU8a.keccakAsHex;
  }
});
Object.defineProperty(exports, "keccakAsU8a", {
  enumerable: true,
  get: function () {
    return _asU8a.keccakAsU8a;
  }
});

var _asU8a = require("./asU8a.js");

},{"./asU8a.js":520}],522:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeriveJunction = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/esm/classPrivateFieldLooseKey"));

var _util = require("@polkadot/util");

var _asU8a = require("../blake2/asU8a.js");

var _bn = require("../bn.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const RE_NUMBER = /^\d+$/;
const JUNCTION_ID_LEN = 32;

var _chainCode = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("chainCode");

var _isHard = /*#__PURE__*/(0, _classPrivateFieldLooseKey2.default)("isHard");

class DeriveJunction {
  constructor() {
    Object.defineProperty(this, _chainCode, {
      writable: true,
      value: new Uint8Array(32)
    });
    Object.defineProperty(this, _isHard, {
      writable: true,
      value: false
    });
  }

  static from(value) {
    const result = new DeriveJunction();
    const [code, isHard] = value.startsWith('/') ? [value.substr(1), true] : [value, false];
    result.soft(RE_NUMBER.test(code) ? new _util.BN(code, 10) : code);
    return isHard ? result.harden() : result;
  }

  get chainCode() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _chainCode)[_chainCode];
  }

  get isHard() {
    return (0, _classPrivateFieldLooseBase2.default)(this, _isHard)[_isHard];
  }

  get isSoft() {
    return !(0, _classPrivateFieldLooseBase2.default)(this, _isHard)[_isHard];
  }

  hard(value) {
    return this.soft(value).harden();
  }

  harden() {
    (0, _classPrivateFieldLooseBase2.default)(this, _isHard)[_isHard] = true;
    return this;
  }

  soft(value) {
    if ((0, _util.isNumber)(value) || (0, _util.isBn)(value) || (0, _util.isBigInt)(value)) {
      return this.soft((0, _util.bnToU8a)(value, _bn.BN_LE_256_OPTS));
    } else if ((0, _util.isHex)(value)) {
      return this.soft((0, _util.hexToU8a)(value));
    } else if ((0, _util.isString)(value)) {
      return this.soft((0, _util.compactAddLength)((0, _util.stringToU8a)(value)));
    } else if (value.length > JUNCTION_ID_LEN) {
      return this.soft((0, _asU8a.blake2AsU8a)(value));
    }

    (0, _classPrivateFieldLooseBase2.default)(this, _chainCode)[_chainCode].fill(0);

    (0, _classPrivateFieldLooseBase2.default)(this, _chainCode)[_chainCode].set(value, 0);

    return this;
  }

  soften() {
    (0, _classPrivateFieldLooseBase2.default)(this, _isHard)[_isHard] = false;
    return this;
  }

}

exports.DeriveJunction = DeriveJunction;

},{"../blake2/asU8a.js":484,"../bn.js":486,"@babel/runtime/helpers/esm/classPrivateFieldLooseBase":1,"@babel/runtime/helpers/esm/classPrivateFieldLooseKey":2,"@polkadot/util":640}],523:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyExtractPath = keyExtractPath;

var _util = require("@polkadot/util");

var _DeriveJunction = require("./DeriveJunction.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const RE_JUNCTION = /\/(\/?)([^/]+)/g;
/**
 * @description Extract derivation junctions from the supplied path
 */

function keyExtractPath(derivePath) {
  const parts = derivePath.match(RE_JUNCTION);
  const path = [];
  let constructed = '';

  if (parts) {
    constructed = parts.join('');

    for (const p of parts) {
      path.push(_DeriveJunction.DeriveJunction.from(p.substr(1)));
    }
  }

  (0, _util.assert)(constructed === derivePath, () => `Re-constructed path "${constructed}" does not match input`);
  return {
    parts,
    path
  };
}

},{"./DeriveJunction.js":522,"@polkadot/util":640}],524:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyExtractSuri = keyExtractSuri;

var _util = require("@polkadot/util");

var _extractPath = require("./extractPath.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const RE_CAPTURE = /^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;
/**
 * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed).
 */

function keyExtractSuri(suri) {
  // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
  const matches = suri.match(RE_CAPTURE);
  (0, _util.assert)(!(0, _util.isNull)(matches), 'Unable to match provided value to a secret URI');
  const [, phrase,, derivePath,,, password] = matches;
  const {
    path
  } = (0, _extractPath.keyExtractPath)(derivePath);
  return {
    derivePath,
    password,
    path,
    phrase
  };
}

},{"./extractPath.js":523,"@polkadot/util":640}],525:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyFromPath = keyFromPath;

var _hdkdEcdsa = require("./hdkdEcdsa.js");

var _hdkdEd = require("./hdkdEd25519.js");

var _hdkdSr = require("./hdkdSr25519.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const generators = {
  ecdsa: _hdkdEcdsa.keyHdkdEcdsa,
  ed25519: _hdkdEd.keyHdkdEd25519,
  // FIXME This is Substrate-compatible, not Ethereum-compatible
  ethereum: _hdkdEcdsa.keyHdkdEcdsa,
  sr25519: _hdkdSr.keyHdkdSr25519
};

function keyFromPath(pair, path, type) {
  const keyHdkd = generators[type];
  let result = pair;

  for (const junction of path) {
    result = keyHdkd(result, junction);
  }

  return result;
}

},{"./hdkdEcdsa.js":527,"./hdkdEd25519.js":528,"./hdkdSr25519.js":529}],526:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSeedDeriveFn = createSeedDeriveFn;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function createSeedDeriveFn(fromSeed, derive) {
  return (keypair, {
    chainCode,
    isHard
  }) => {
    (0, _util.assert)(isHard, 'A soft key was found in the path and is not supported');
    return fromSeed(derive(keypair.secretKey.subarray(0, 32), chainCode));
  };
}

},{"@polkadot/util":640}],527:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyHdkdEcdsa = void 0;

var _deriveHard = require("../secp256k1/deriveHard.js");

var _fromSeed = require("../secp256k1/pair/fromSeed.js");

var _hdkdDerive = require("./hdkdDerive.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const keyHdkdEcdsa = (0, _hdkdDerive.createSeedDeriveFn)(_fromSeed.secp256k1PairFromSeed, _deriveHard.secp256k1DeriveHard);
exports.keyHdkdEcdsa = keyHdkdEcdsa;

},{"../secp256k1/deriveHard.js":558,"../secp256k1/pair/fromSeed.js":562,"./hdkdDerive.js":526}],528:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyHdkdEd25519 = void 0;

var _index = require("../ed25519/index.js");

var _hdkdDerive = require("./hdkdDerive.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const keyHdkdEd25519 = (0, _hdkdDerive.createSeedDeriveFn)(_index.ed25519PairFromSeed, _index.ed25519DeriveHard);
exports.keyHdkdEd25519 = keyHdkdEd25519;

},{"../ed25519/index.js":493,"./hdkdDerive.js":526}],529:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keyHdkdSr25519 = keyHdkdSr25519;

var _deriveHard = require("../sr25519/deriveHard.js");

var _deriveSoft = require("../sr25519/deriveSoft.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function keyHdkdSr25519(keypair, {
  chainCode,
  isSoft
}) {
  return isSoft ? (0, _deriveSoft.sr25519DeriveSoft)(keypair, chainCode) : (0, _deriveHard.sr25519DeriveHard)(keypair, chainCode);
}

},{"../sr25519/deriveHard.js":573,"../sr25519/deriveSoft.js":575}],530:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "keyExtractPath", {
  enumerable: true,
  get: function () {
    return _extractPath.keyExtractPath;
  }
});
Object.defineProperty(exports, "keyExtractSuri", {
  enumerable: true,
  get: function () {
    return _extractSuri.keyExtractSuri;
  }
});
Object.defineProperty(exports, "keyFromPath", {
  enumerable: true,
  get: function () {
    return _fromPath.keyFromPath;
  }
});
Object.defineProperty(exports, "keyHdkdEcdsa", {
  enumerable: true,
  get: function () {
    return _hdkdEcdsa.keyHdkdEcdsa;
  }
});
Object.defineProperty(exports, "keyHdkdEd25519", {
  enumerable: true,
  get: function () {
    return _hdkdEd.keyHdkdEd25519;
  }
});
Object.defineProperty(exports, "keyHdkdSr25519", {
  enumerable: true,
  get: function () {
    return _hdkdSr.keyHdkdSr25519;
  }
});

var _extractPath = require("./extractPath.js");

var _extractSuri = require("./extractSuri.js");

var _fromPath = require("./fromPath.js");

var _hdkdEd = require("./hdkdEd25519.js");

var _hdkdSr = require("./hdkdSr25519.js");

var _hdkdEcdsa = require("./hdkdEcdsa.js");

},{"./extractPath.js":523,"./extractSuri.js":524,"./fromPath.js":525,"./hdkdEcdsa.js":527,"./hdkdEd25519.js":528,"./hdkdSr25519.js":529}],531:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Adapted from the bitcoinjs/bip39 source
// https://github.com/bitcoinjs/bip39/blob/1d063b6a6aee4145b34d701037cd3e67f5446ff9/ts_src/
var _default = 'abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo'.split('|');

exports.default = _default;

},{}],532:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.entropyToMnemonic = entropyToMnemonic;
exports.generateMnemonic = generateMnemonic;
exports.mnemonicToEntropy = mnemonicToEntropy;
exports.mnemonicToSeedSync = mnemonicToSeedSync;
exports.validateMnemonic = validateMnemonic;

var _util = require("@polkadot/util");

var _index = require("../pbkdf2/index.js");

var _index2 = require("../random/index.js");

var _index3 = require("../sha/index.js");

var _bip39En = _interopRequireDefault(require("./bip39-en.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Adapted from the bitcoinjs/bip39 source
// https://github.com/bitcoinjs/bip39/blob/1d063b6a6aee4145b34d701037cd3e67f5446ff9/ts_src/index.ts
// Copyright (c) 2014, Wei Lu <luwei.here@gmail.com> and Daniel Cousens <email@dcousens.com>
// ISC Licence
//
// Change made in this version -
//   - Adjust formatting (just eslint differences)
//   - Only English wordlist (this aligns with the wasm-crypto implementation)
//   - Use util-crypto randomAsU8a (instead of randombytes)
//   - Remove setting of wordlist passing of wordlist in functions
//   - Remove mnemonicToSeed (we only use the sync variant)
const INVALID_MNEMONIC = 'Invalid mnemonic';
const INVALID_ENTROPY = 'Invalid entropy';
const INVALID_CHECKSUM = 'Invalid mnemonic checksum';

function normalize(str) {
  return (str || '').normalize('NFKD');
}

function binaryToByte(bin) {
  return parseInt(bin, 2);
}

function bytesToBinary(bytes) {
  return bytes.map(x => x.toString(2).padStart(8, '0')).join('');
}

function deriveChecksumBits(entropyBuffer) {
  return bytesToBinary(Array.from((0, _index3.sha256AsU8a)(entropyBuffer))).slice(0, entropyBuffer.length * 8 / 32);
}

function mnemonicToSeedSync(mnemonic, password) {
  return (0, _index.pbkdf2Encode)((0, _util.stringToU8a)(normalize(mnemonic)), (0, _util.stringToU8a)(`mnemonic${normalize(password)}`)).password;
}

function mnemonicToEntropy(mnemonic) {
  var _entropyBits$match;

  const words = normalize(mnemonic).split(' ');
  (0, _util.assert)(words.length % 3 === 0, INVALID_MNEMONIC); // convert word indices to 11 bit binary strings

  const bits = words.map(word => {
    const index = _bip39En.default.indexOf(word);

    (0, _util.assert)(index !== -1, INVALID_MNEMONIC);
    return index.toString(2).padStart(11, '0');
  }).join(''); // split the binary string into ENT/CS

  const dividerIndex = Math.floor(bits.length / 33) * 32;
  const entropyBits = bits.slice(0, dividerIndex);
  const checksumBits = bits.slice(dividerIndex); // calculate the checksum and compare

  const entropyBytes = (_entropyBits$match = entropyBits.match(/(.{1,8})/g)) === null || _entropyBits$match === void 0 ? void 0 : _entropyBits$match.map(binaryToByte);
  (0, _util.assert)(entropyBytes && entropyBytes.length % 4 === 0 && entropyBytes.length >= 16 && entropyBytes.length <= 32, INVALID_ENTROPY);
  const entropy = (0, _util.u8aToU8a)(entropyBytes);
  const newChecksum = deriveChecksumBits(entropy);
  (0, _util.assert)(newChecksum === checksumBits, INVALID_CHECKSUM);
  return entropy;
}

function entropyToMnemonic(entropy) {
  // 128 <= ENT <= 256
  (0, _util.assert)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, INVALID_ENTROPY);
  const entropyBits = bytesToBinary(Array.from(entropy));
  const checksumBits = deriveChecksumBits(entropy); // we just set it prior, so this is a safe check
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

  return (entropyBits + checksumBits).match(/(.{1,11})/g).map(binary => _bip39En.default[binaryToByte(binary)]).join(' ');
}

function generateMnemonic(strength) {
  strength = strength || 128;
  (0, _util.assert)(strength % 32 === 0, INVALID_ENTROPY);
  return entropyToMnemonic((0, _index2.randomAsU8a)(strength / 8));
}

function validateMnemonic(mnemonic) {
  try {
    mnemonicToEntropy(mnemonic);
  } catch (e) {
    return false;
  }

  return true;
}

},{"../pbkdf2/index.js":548,"../random/index.js":551,"../sha/index.js":568,"./bip39-en.js":531,"@polkadot/util":640}],533:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mnemonicGenerate = mnemonicGenerate;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _bip = require("./bip39.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// mapping of words to the actual strength (as expected)
const STRENGTH_MAP = {
  12: 16 * 8,
  15: 20 * 8,
  18: 24 * 8,
  21: 28 * 8,
  24: 32 * 8
};
/**
 * @name mnemonicGenerate
 * @summary Creates a valid mnemonic string using using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).
 * @example
 * <BR>
 *
 * ```javascript
 * import { mnemonicGenerate } from '@polkadot/util-crypto';
 *
 * const mnemonic = mnemonicGenerate(); // => string
 * ```
 */

function mnemonicGenerate(numWords = 12, onlyJs) {
  return !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.bip39Generate)(numWords) : (0, _bip.generateMnemonic)(STRENGTH_MAP[numWords]);
}

},{"./bip39.js":532,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],534:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "mnemonicGenerate", {
  enumerable: true,
  get: function () {
    return _generate.mnemonicGenerate;
  }
});
Object.defineProperty(exports, "mnemonicToEntropy", {
  enumerable: true,
  get: function () {
    return _toEntropy.mnemonicToEntropy;
  }
});
Object.defineProperty(exports, "mnemonicToLegacySeed", {
  enumerable: true,
  get: function () {
    return _toLegacySeed.mnemonicToLegacySeed;
  }
});
Object.defineProperty(exports, "mnemonicToMiniSecret", {
  enumerable: true,
  get: function () {
    return _toMiniSecret.mnemonicToMiniSecret;
  }
});
Object.defineProperty(exports, "mnemonicValidate", {
  enumerable: true,
  get: function () {
    return _validate.mnemonicValidate;
  }
});

var _generate = require("./generate.js");

var _toEntropy = require("./toEntropy.js");

var _toLegacySeed = require("./toLegacySeed.js");

var _toMiniSecret = require("./toMiniSecret.js");

var _validate = require("./validate.js");

},{"./generate.js":533,"./toEntropy.js":535,"./toLegacySeed.js":536,"./toMiniSecret.js":537,"./validate.js":538}],535:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mnemonicToEntropy = mnemonicToEntropy;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _bip = require("./bip39.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function mnemonicToEntropy(mnemonic, onlyJs) {
  return !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.bip39ToEntropy)(mnemonic) : (0, _bip.mnemonicToEntropy)(mnemonic);
}

},{"./bip39.js":532,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],536:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mnemonicToLegacySeed = mnemonicToLegacySeed;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _bip = require("./bip39.js");

var _validate = require("./validate.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name mnemonicToLegacySeed
 * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input
 * @example
 * <BR>
 *
 * ```javascript
 * import { mnemonicGenerate, mnemonicToLegacySeed, mnemonicValidate } from '@polkadot/util-crypto';
 *
 * const mnemonic = mnemonicGenerate(); // => string
 * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean
 *
 * if (isValidMnemonic) {
 *   console.log(`Seed generated from mnemonic: ${mnemonicToLegacySeed(mnemonic)}`); => u8a
 * }
 * ```
 */
function mnemonicToLegacySeed(mnemonic, password = '', onlyJs, byteLength = 32) {
  (0, _util.assert)((0, _validate.mnemonicValidate)(mnemonic), 'Invalid bip39 mnemonic specified');
  (0, _util.assert)([32, 64].includes(byteLength), () => `Invalid seed length ${byteLength}, expected 32 or 64`);
  return byteLength === 32 ? !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.bip39ToSeed)(mnemonic, password) : (0, _bip.mnemonicToSeedSync)(mnemonic, password).subarray(0, 32) : (0, _bip.mnemonicToSeedSync)(mnemonic, password);
}

},{"./bip39.js":532,"./validate.js":538,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],537:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mnemonicToMiniSecret = mnemonicToMiniSecret;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _index = require("../pbkdf2/index.js");

var _toEntropy = require("./toEntropy.js");

var _validate = require("./validate.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function mnemonicToMiniSecret(mnemonic, password = '', onlyJs) {
  (0, _util.assert)((0, _validate.mnemonicValidate)(mnemonic), 'Invalid bip39 mnemonic specified');

  if (!onlyJs && (0, _wasmCrypto.isReady)()) {
    return (0, _wasmCrypto.bip39ToMiniSecret)(mnemonic, password);
  }

  const entropy = (0, _toEntropy.mnemonicToEntropy)(mnemonic);
  const salt = (0, _util.stringToU8a)(`mnemonic${password}`); // return the first 32 bytes as the seed

  return (0, _index.pbkdf2Encode)(entropy, salt).password.slice(0, 32);
}

},{"../pbkdf2/index.js":548,"./toEntropy.js":535,"./validate.js":538,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],538:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mnemonicValidate = mnemonicValidate;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _bip = require("./bip39.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name mnemonicValidate
 * @summary Validates a mnemonic input using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).
 * @example
 * <BR>
 *
 * ```javascript
 * import { mnemonicGenerate, mnemonicValidate } from '@polkadot/util-crypto';
 *
 * const mnemonic = mnemonicGenerate(); // => string
 * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean
 * ```
 */
function mnemonicValidate(mnemonic, onlyJs) {
  return !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.bip39Validate)(mnemonic) : (0, _bip.validateMnemonic)(mnemonic);
}

},{"./bip39.js":532,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],539:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naclBoxPairFromSecret = naclBoxPairFromSecret;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name naclBoxPairFromSecret
 * @summary Creates a new public/secret box keypair from a secret.
 * @description
 * Returns a object containing a box `publicKey` & `secretKey` generated from the supplied secret.
 * @example
 * <BR>
 *
 * ```javascript
 * import { naclBoxPairFromSecret } from '@polkadot/util-crypto';
 *
 * naclBoxPairFromSecret(...); // => { secretKey: [...], publicKey: [...] }
 * ```
 */
function naclBoxPairFromSecret(secret) {
  return _tweetnacl.default.box.keyPair.fromSecretKey(secret.slice(0, 32));
}

},{"tweetnacl":970}],540:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naclDecrypt = naclDecrypt;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name naclDecrypt
 * @summary Decrypts a message using the supplied secretKey and nonce
 * @description
 * Returns an decrypted message, using the `secret` and `nonce`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { naclDecrypt } from '@polkadot/util-crypto';
 *
 * naclDecrypt([...], [...], [...]); // => [...]
 * ```
 */
function naclDecrypt(encrypted, nonce, secret) {
  return _tweetnacl.default.secretbox.open(encrypted, nonce, secret) || null;
}

},{"tweetnacl":970}],541:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naclEncrypt = naclEncrypt;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _asU8a = require("../random/asU8a.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name naclEncrypt
 * @summary Encrypts a message using the supplied secretKey and nonce
 * @description
 * Returns an encrypted message, using the `secretKey` and `nonce`. If the `nonce` was not supplied, a random value is generated.
 * @example
 * <BR>
 *
 * ```javascript
 * import { naclEncrypt } from '@polkadot/util-crypto';
 *
 * naclEncrypt([...], [...]); // => [...]
 * ```
 */
function naclEncrypt(message, secret, nonce = (0, _asU8a.randomAsU8a)(24)) {
  return {
    encrypted: _tweetnacl.default.secretbox(message, nonce, secret),
    nonce
  };
}

},{"../random/asU8a.js":550,"tweetnacl":970}],542:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "naclBoxPairFromSecret", {
  enumerable: true,
  get: function () {
    return _fromSecret.naclBoxPairFromSecret;
  }
});
Object.defineProperty(exports, "naclDecrypt", {
  enumerable: true,
  get: function () {
    return _decrypt.naclDecrypt;
  }
});
Object.defineProperty(exports, "naclEncrypt", {
  enumerable: true,
  get: function () {
    return _encrypt.naclEncrypt;
  }
});
Object.defineProperty(exports, "naclOpen", {
  enumerable: true,
  get: function () {
    return _open.naclOpen;
  }
});
Object.defineProperty(exports, "naclSeal", {
  enumerable: true,
  get: function () {
    return _seal.naclSeal;
  }
});

var _decrypt = require("./decrypt.js");

var _encrypt = require("./encrypt.js");

var _fromSecret = require("./box/fromSecret.js");

var _open = require("./open.js");

var _seal = require("./seal.js");

},{"./box/fromSecret.js":539,"./decrypt.js":540,"./encrypt.js":541,"./open.js":543,"./seal.js":544}],543:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naclOpen = naclOpen;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name naclOpen
 * @summary Opens a message using the receiver's secretKey and nonce
 * @description
 * Returns a message sealed by the sender, using the receiver's `secret` and `nonce`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { naclOpen } from '@polkadot/util-crypto';
 *
 * naclOpen([...], [...], [...]); // => [...]
 * ```
 */
function naclOpen(sealed, nonce, senderBoxPublic, receiverBoxSecret) {
  return _tweetnacl.default.box.open(sealed, nonce, senderBoxPublic, receiverBoxSecret) || null;
}

},{"tweetnacl":970}],544:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.naclSeal = naclSeal;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

var _asU8a = require("../random/asU8a.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name naclSeal
 * @summary Seals a message using the sender's encrypting secretKey, receiver's public key, and nonce
 * @description
 * Returns an encrypted message which can be open only by receiver's secretKey. If the `nonce` was not supplied, a random value is generated.
 * @example
 * <BR>
 *
 * ```javascript
 * import { naclSeal } from '@polkadot/util-crypto';
 *
 * naclSeal([...], [...], [...], [...]); // => [...]
 * ```
 */
function naclSeal(message, senderBoxSecret, receiverBoxPublic, nonce = (0, _asU8a.randomAsU8a)(24)) {
  return {
    nonce,
    sealed: _tweetnacl.default.box(message, nonce, receiverBoxPublic, senderBoxSecret)
  };
}

},{"../random/asU8a.js":550,"tweetnacl":970}],545:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _interfaces = require("@polkadot/networks/interfaces");

Object.keys(_interfaces).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _interfaces[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _interfaces[key];
    }
  });
});

},{"@polkadot/networks/interfaces":180}],546:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/util-crypto',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],547:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pbkdf2Encode = pbkdf2Encode;

var _pbkdf = require("@noble/hashes/lib/pbkdf2");

var _sha = require("@noble/hashes/lib/sha512");

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _asU8a = require("../random/asU8a.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function pbkdf2Encode(passphrase, salt = (0, _asU8a.randomAsU8a)(), rounds = 2048, onlyJs) {
  const u8aPass = (0, _util.u8aToU8a)(passphrase);
  const u8aSalt = (0, _util.u8aToU8a)(salt);
  return {
    password: !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.pbkdf2)(u8aPass, u8aSalt, rounds) : (0, _pbkdf.pbkdf2)(_sha.sha512, u8aPass, u8aSalt, {
      c: rounds,
      dkLen: 64
    }),
    rounds,
    salt
  };
}

},{"../random/asU8a.js":550,"@noble/hashes/lib/pbkdf2":9,"@noble/hashes/lib/sha512":13,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],548:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "pbkdf2Encode", {
  enumerable: true,
  get: function () {
    return _encode.pbkdf2Encode;
  }
});

var _encode = require("./encode.js");

},{"./encode.js":547}],549:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomAsNumber = randomAsNumber;

var _util = require("@polkadot/util");

var _asU8a = require("./asU8a.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const BN_53 = new _util.BN(0b11111111111111111111111111111111111111111111111111111);
/**
 * @name randomAsNumber
 * @summary Creates a random number from random bytes.
 * @description
 * Returns a random number generated from the secure bytes.
 * @example
 * <BR>
 *
 * ```javascript
 * import { randomAsNumber } from '@polkadot/util-crypto';
 *
 * randomAsNumber(); // => <random number>
 * ```
 */

function randomAsNumber() {
  return (0, _util.hexToBn)((0, _asU8a.randomAsHex)(8)).and(BN_53).toNumber();
}

},{"./asU8a.js":550,"@polkadot/util":640}],550:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomAsHex = void 0;
exports.randomAsU8a = randomAsU8a;

var _xRandomvalues = require("@polkadot/x-randomvalues");

var _helpers = require("../helpers.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name randomAsU8a
 * @summary Creates a Uint8Array filled with random bytes.
 * @description
 * Returns a `Uint8Array` with the specified (optional) length filled with random bytes.
 * @example
 * <BR>
 *
 * ```javascript
 * import { randomAsU8a } from '@polkadot/util-crypto';
 *
 * randomAsU8a(); // => Uint8Array([...])
 * ```
 */
function randomAsU8a(length = 32) {
  return (0, _xRandomvalues.getRandomValues)(new Uint8Array(length));
}
/**
 * @name randomAsHex
 * @description Creates a hex string filled with random bytes.
 */


const randomAsHex = (0, _helpers.createAsHex)(randomAsU8a);
exports.randomAsHex = randomAsHex;

},{"../helpers.js":510,"@polkadot/x-randomvalues":730}],551:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "randomAsHex", {
  enumerable: true,
  get: function () {
    return _asU8a.randomAsHex;
  }
});
Object.defineProperty(exports, "randomAsNumber", {
  enumerable: true,
  get: function () {
    return _asNumber.randomAsNumber;
  }
});
Object.defineProperty(exports, "randomAsU8a", {
  enumerable: true,
  get: function () {
    return _asU8a.randomAsU8a;
  }
});

var _asNumber = require("./asNumber.js");

var _asU8a = require("./asU8a.js");

},{"./asNumber.js":549,"./asU8a.js":550}],552:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_PARAMS = void 0;
// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_PARAMS = {
  N: 1 << 15,
  p: 1,
  r: 8
};
exports.DEFAULT_PARAMS = DEFAULT_PARAMS;

},{}],553:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scryptEncode = scryptEncode;

var _scrypt = require("@noble/hashes/lib/scrypt");

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _asU8a = require("../random/asU8a.js");

var _defaults = require("./defaults.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function scryptEncode(passphrase, salt = (0, _asU8a.randomAsU8a)(), params = _defaults.DEFAULT_PARAMS, onlyJs) {
  const u8a = (0, _util.u8aToU8a)(passphrase);
  return {
    params,
    password: !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.scrypt)(u8a, salt, Math.log2(params.N), params.r, params.p) : (0, _scrypt.scrypt)(u8a, salt, (0, _util.objectSpread)({
      dkLen: 64
    }, params)),
    salt
  };
}

},{"../random/asU8a.js":550,"./defaults.js":552,"@noble/hashes/lib/scrypt":10,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],554:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scryptFromU8a = scryptFromU8a;

var _util = require("@polkadot/util");

var _bn = require("../bn.js");

var _defaults = require("./defaults.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function scryptFromU8a(data) {
  const salt = data.subarray(0, 32);
  const N = (0, _util.u8aToBn)(data.subarray(32 + 0, 32 + 4), _bn.BN_LE_OPTS).toNumber();
  const p = (0, _util.u8aToBn)(data.subarray(32 + 4, 32 + 8), _bn.BN_LE_OPTS).toNumber();
  const r = (0, _util.u8aToBn)(data.subarray(32 + 8, 32 + 12), _bn.BN_LE_OPTS).toNumber(); // FIXME At this moment we assume these to be fixed params, this is not a great idea since we lose flexibility
  // and updates for greater security. However we need some protection against carefully-crafted params that can
  // eat up CPU since these are user inputs. So we need to get very clever here, but atm we only allow the defaults
  // and if no match, bail out

  (0, _util.assert)(N === _defaults.DEFAULT_PARAMS.N && p === _defaults.DEFAULT_PARAMS.p && r === _defaults.DEFAULT_PARAMS.r, 'Invalid injected scrypt params found');
  return {
    params: {
      N,
      p,
      r
    },
    salt
  };
}

},{"../bn.js":486,"./defaults.js":552,"@polkadot/util":640}],555:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "scryptEncode", {
  enumerable: true,
  get: function () {
    return _encode.scryptEncode;
  }
});
Object.defineProperty(exports, "scryptFromU8a", {
  enumerable: true,
  get: function () {
    return _fromU8a.scryptFromU8a;
  }
});
Object.defineProperty(exports, "scryptToU8a", {
  enumerable: true,
  get: function () {
    return _toU8a.scryptToU8a;
  }
});

var _encode = require("./encode.js");

var _fromU8a = require("./fromU8a.js");

var _toU8a = require("./toU8a.js");

},{"./encode.js":553,"./fromU8a.js":554,"./toU8a.js":556}],556:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scryptToU8a = scryptToU8a;

var _util = require("@polkadot/util");

var _bn = require("../bn.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function scryptToU8a(salt, {
  N,
  p,
  r
}) {
  return (0, _util.u8aConcat)(salt, (0, _util.bnToU8a)(N, _bn.BN_LE_32_OPTS), (0, _util.bnToU8a)(p, _bn.BN_LE_32_OPTS), (0, _util.bnToU8a)(r, _bn.BN_LE_32_OPTS));
}

},{"../bn.js":486,"@polkadot/util":640}],557:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1Compress = secp256k1Compress;

var _secp256k = require("@noble/secp256k1");

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function secp256k1Compress(publicKey, onlyJs) {
  if (publicKey.length === 33) {
    return publicKey;
  }

  (0, _util.assert)(publicKey.length === 65, 'Invalid publicKey provided');
  return !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.secp256k1Compress)(publicKey) : _secp256k.Point.fromHex(publicKey).toRawBytes(true);
}

},{"@noble/secp256k1":15,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],558:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1DeriveHard = secp256k1DeriveHard;

var _util = require("@polkadot/util");

var _asU8a = require("../blake2/asU8a.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const HDKD = (0, _util.compactAddLength)((0, _util.stringToU8a)('Secp256k1HDKD'));

function secp256k1DeriveHard(seed, chainCode) {
  (0, _util.assert)((0, _util.isU8a)(chainCode) && chainCode.length === 32, 'Invalid chainCode passed to derive'); // NOTE This is specific to the Substrate HDD derivation, so always use the blake2 hasher

  return (0, _asU8a.blake2AsU8a)((0, _util.u8aConcat)(HDKD, seed, chainCode), 256);
}

},{"../blake2/asU8a.js":484,"@polkadot/util":640}],559:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1Expand = secp256k1Expand;

var _secp256k = require("@noble/secp256k1");

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _bn = require("../bn.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function secp256k1Expand(publicKey, onlyJs) {
  if (publicKey.length === 65) {
    return publicKey.subarray(1);
  }

  (0, _util.assert)(publicKey.length === 33, 'Invalid publicKey provided');

  if (!_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)()) {
    return (0, _wasmCrypto.secp256k1Expand)(publicKey).subarray(1);
  }

  const {
    x,
    y
  } = _secp256k.Point.fromHex(publicKey);

  return (0, _util.u8aConcat)((0, _util.bnToU8a)(x, _bn.BN_BE_256_OPTS), (0, _util.bnToU8a)(y, _bn.BN_BE_256_OPTS));
}

},{"../bn.js":486,"@noble/secp256k1":15,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],560:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasher = hasher;

var _index = require("../blake2/index.js");

var _index2 = require("../keccak/index.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function hasher(hashType, data, onlyJs) {
  return hashType === 'keccak' ? (0, _index2.keccakAsU8a)(data, undefined, onlyJs) : (0, _index.blake2AsU8a)(data, undefined, undefined, onlyJs);
}

},{"../blake2/index.js":485,"../keccak/index.js":521}],561:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "secp256k1Compress", {
  enumerable: true,
  get: function () {
    return _compress.secp256k1Compress;
  }
});
Object.defineProperty(exports, "secp256k1Expand", {
  enumerable: true,
  get: function () {
    return _expand.secp256k1Expand;
  }
});
Object.defineProperty(exports, "secp256k1PairFromSeed", {
  enumerable: true,
  get: function () {
    return _fromSeed.secp256k1PairFromSeed;
  }
});
Object.defineProperty(exports, "secp256k1PrivateKeyTweakAdd", {
  enumerable: true,
  get: function () {
    return _tweakAdd.secp256k1PrivateKeyTweakAdd;
  }
});
Object.defineProperty(exports, "secp256k1Recover", {
  enumerable: true,
  get: function () {
    return _recover.secp256k1Recover;
  }
});
Object.defineProperty(exports, "secp256k1Sign", {
  enumerable: true,
  get: function () {
    return _sign.secp256k1Sign;
  }
});
Object.defineProperty(exports, "secp256k1Verify", {
  enumerable: true,
  get: function () {
    return _verify.secp256k1Verify;
  }
});

var _compress = require("./compress.js");

var _expand = require("./expand.js");

var _fromSeed = require("./pair/fromSeed.js");

var _recover = require("./recover.js");

var _sign = require("./sign.js");

var _tweakAdd = require("./tweakAdd.js");

var _verify = require("./verify.js");

},{"./compress.js":557,"./expand.js":559,"./pair/fromSeed.js":562,"./recover.js":563,"./sign.js":564,"./tweakAdd.js":565,"./verify.js":566}],562:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1PairFromSeed = secp256k1PairFromSeed;

var _secp256k = require("@noble/secp256k1");

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name secp256k1PairFromSeed
 * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
 */
function secp256k1PairFromSeed(seed, onlyJs) {
  (0, _util.assert)(seed.length === 32, 'Expected valid 32-byte private key as a seed');

  if (!_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)()) {
    const full = (0, _wasmCrypto.secp256k1FromSeed)(seed);
    return {
      publicKey: full.slice(32),
      secretKey: full.slice(0, 32)
    };
  }

  return {
    publicKey: (0, _secp256k.getPublicKey)(seed, true),
    secretKey: seed
  };
}

},{"@noble/secp256k1":15,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],563:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1Recover = secp256k1Recover;

var _secp256k = require("@noble/secp256k1");

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _compress = require("./compress.js");

var _expand = require("./expand.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name secp256k1Recover
 * @description Recovers a publicKey from the supplied signature
 */
function secp256k1Recover(msgHash, signature, recovery, hashType = 'blake2', onlyJs) {
  const sig = (0, _util.u8aToU8a)(signature).subarray(0, 64);
  const msg = (0, _util.u8aToU8a)(msgHash);
  const publicKey = !_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)() ? (0, _wasmCrypto.secp256k1Recover)(msg, sig, recovery) : (0, _secp256k.recoverPublicKey)(msg, _secp256k.Signature.fromCompact(sig).toRawBytes(), recovery);
  (0, _util.assert)(publicKey, 'Unable to recover publicKey from signature');
  return hashType === 'keccak' ? (0, _expand.secp256k1Expand)(publicKey, onlyJs) : (0, _compress.secp256k1Compress)(publicKey, onlyJs);
}

},{"./compress.js":557,"./expand.js":559,"@noble/secp256k1":15,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],564:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1Sign = secp256k1Sign;

var _secp256k = require("@noble/secp256k1");

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _bn = require("../bn.js");

var _hasher = require("./hasher.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name secp256k1Sign
 * @description Returns message signature of `message`, using the supplied pair
 */
function secp256k1Sign(message, {
  secretKey
}, hashType = 'blake2', onlyJs) {
  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');
  const data = (0, _hasher.hasher)(hashType, message, onlyJs);

  if (!_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)()) {
    return (0, _wasmCrypto.secp256k1Sign)(data, secretKey);
  }

  const [sigBytes, recoveryParam] = (0, _secp256k.signSync)(data, secretKey, {
    canonical: true,
    recovered: true
  });

  const {
    r,
    s
  } = _secp256k.Signature.fromHex(sigBytes);

  return (0, _util.u8aConcat)((0, _util.bnToU8a)(r, _bn.BN_BE_256_OPTS), (0, _util.bnToU8a)(s, _bn.BN_BE_256_OPTS), new Uint8Array([recoveryParam || 0]));
}

},{"../bn.js":486,"./hasher.js":560,"@noble/secp256k1":15,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],565:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1PrivateKeyTweakAdd = secp256k1PrivateKeyTweakAdd;

var _util = require("@polkadot/util");

var _xBigint = require("@polkadot/x-bigint");

var _bn = require("../bn.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// pre-defined curve param as lifted form elliptic
// https://github.com/indutny/elliptic/blob/e71b2d9359c5fe9437fbf46f1f05096de447de57/lib/elliptic/curves.js#L182
const N = 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141'.replace(/ /g, '');
const N_BI = (0, _xBigint.BigInt)(`0x${N}`);
const N_BN = new _util.BN(N, 'hex');

function addBi(seckey, tweak) {
  let res = (0, _util.u8aToBigInt)(tweak, _bn.BN_BE_OPTS);
  (0, _util.assert)(res < N_BI, 'Tweak parameter is out of range');
  res += (0, _util.u8aToBigInt)(seckey, _bn.BN_BE_OPTS);

  if (res >= N_BI) {
    res -= N_BI;
  }

  (0, _util.assert)(res !== _util._0n, 'Invalid resulting private key');
  return (0, _util.nToU8a)(res, _bn.BN_BE_256_OPTS);
}

function addBn(seckey, tweak) {
  const res = new _util.BN(tweak);
  (0, _util.assert)(res.cmp(N_BN) < 0, 'Tweak parameter is out of range');
  res.iadd(new _util.BN(seckey));

  if (res.cmp(N_BN) >= 0) {
    res.isub(N_BN);
  }

  (0, _util.assert)(!res.isZero(), 'Invalid resulting private key');
  return (0, _util.bnToU8a)(res, _bn.BN_BE_256_OPTS);
}

function secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {
  (0, _util.assert)((0, _util.isU8a)(seckey) && seckey.length === 32, 'Expected seckey to be an Uint8Array with length 32');
  (0, _util.assert)((0, _util.isU8a)(tweak) && tweak.length === 32, 'Expected tweak to be an Uint8Array with length 32');
  return !_util.hasBigInt || onlyBn ? addBn(seckey, tweak) : addBi(seckey, tweak);
}

},{"../bn.js":486,"@polkadot/util":640,"@polkadot/x-bigint":723}],566:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.secp256k1Verify = secp256k1Verify;

var _util = require("@polkadot/util");

var _hasher = require("./hasher.js");

var _recover = require("./recover.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name secp256k1Verify
 * @description Verifies the signature of `message`, using the supplied pair
 */
function secp256k1Verify(msgHash, signature, address, hashType = 'blake2', onlyJs) {
  const sig = (0, _util.u8aToU8a)(signature);
  (0, _util.assert)(sig.length === 65, `Expected signature with 65 bytes, ${sig.length} found instead`);
  const publicKey = (0, _recover.secp256k1Recover)((0, _hasher.hasher)(hashType, msgHash), sig, sig[64], hashType, onlyJs);
  const signerAddr = (0, _hasher.hasher)(hashType, publicKey, onlyJs);
  const inputAddr = (0, _util.u8aToU8a)(address); // for Ethereum (keccak) the last 20 bytes is the address

  return (0, _util.u8aEq)(publicKey, inputAddr) || (hashType === 'keccak' ? (0, _util.u8aEq)(signerAddr.slice(-20), inputAddr.slice(-20)) : (0, _util.u8aEq)(signerAddr, inputAddr));
}

},{"./hasher.js":560,"./recover.js":563,"@polkadot/util":640}],567:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shaAsU8a = exports.sha512AsU8a = exports.sha256AsU8a = void 0;

var _sha = require("@noble/hashes/lib/sha256");

var _sha2 = require("@noble/hashes/lib/sha512");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _helpers = require("../helpers.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name shaAsU8a
 * @summary Creates a sha Uint8Array from the input.
 */
const shaAsU8a = (0, _helpers.createDualHasher)({
  256: _wasmCrypto.sha256,
  512: _wasmCrypto.sha512
}, {
  256: _sha.sha256,
  512: _sha2.sha512
});
/**
 * @name sha256AsU8a
 * @summary Creates a sha256 Uint8Array from the input.
 */

exports.shaAsU8a = shaAsU8a;
const sha256AsU8a = (0, _helpers.createBitHasher)(256, shaAsU8a);
/**
 * @name sha512AsU8a
 * @summary Creates a sha512 Uint8Array from the input.
 */

exports.sha256AsU8a = sha256AsU8a;
const sha512AsU8a = (0, _helpers.createBitHasher)(512, shaAsU8a);
exports.sha512AsU8a = sha512AsU8a;

},{"../helpers.js":510,"@noble/hashes/lib/sha256":11,"@noble/hashes/lib/sha512":13,"@polkadot/wasm-crypto":721}],568:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "sha256AsU8a", {
  enumerable: true,
  get: function () {
    return _asU8a.sha256AsU8a;
  }
});
Object.defineProperty(exports, "sha512AsU8a", {
  enumerable: true,
  get: function () {
    return _asU8a.sha512AsU8a;
  }
});
Object.defineProperty(exports, "shaAsU8a", {
  enumerable: true,
  get: function () {
    return _asU8a.shaAsU8a;
  }
});

var _asU8a = require("./asU8a.js");

},{"./asU8a.js":567}],569:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "signatureVerify", {
  enumerable: true,
  get: function () {
    return _verify.signatureVerify;
  }
});

var _verify = require("./verify.js");

},{"./verify.js":570}],570:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signatureVerify = signatureVerify;

var _util = require("@polkadot/util");

var _decode = require("../address/decode.js");

var _verify = require("../ed25519/verify.js");

var _verify2 = require("../secp256k1/verify.js");

var _verify3 = require("../sr25519/verify.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const secp256k1VerifyHasher = hashType => (message, signature, publicKey) => (0, _verify2.secp256k1Verify)(message, signature, publicKey, hashType);

const VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];
const VERIFIERS = [['ed25519', _verify.ed25519Verify], ['sr25519', _verify3.sr25519Verify], ...VERIFIERS_ECDSA];
const CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];

function verifyDetect(result, {
  message,
  publicKey,
  signature
}, verifiers = VERIFIERS) {
  result.isValid = verifiers.some(([crypto, verify]) => {
    try {
      if (verify(message, signature, publicKey)) {
        result.crypto = crypto;
        return true;
      }
    } catch (error) {// do nothing, result.isValid still set to false
    }

    return false;
  });
  return result;
}

function verifyMultisig(result, {
  message,
  publicKey,
  signature
}) {
  (0, _util.assert)([0, 1, 2].includes(signature[0]), () => `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
  const type = CRYPTO_TYPES[signature[0]] || 'none';
  result.crypto = type;

  try {
    result.isValid = {
      ecdsa: () => verifyDetect(result, {
        message,
        publicKey,
        signature: signature.subarray(1)
      }, VERIFIERS_ECDSA).isValid,
      ed25519: () => (0, _verify.ed25519Verify)(message, signature.subarray(1), publicKey),
      none: () => {
        throw Error('no verify for `none` crypto type');
      },
      sr25519: () => (0, _verify3.sr25519Verify)(message, signature.subarray(1), publicKey)
    }[type]();
  } catch (error) {// ignore, result.isValid still set to false
  }

  return result;
}

function getVerifyFn(signature) {
  return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;
}

function signatureVerify(message, signature, addressOrPublicKey) {
  const signatureU8a = (0, _util.u8aToU8a)(signature);
  (0, _util.assert)([64, 65, 66].includes(signatureU8a.length), () => `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
  const publicKey = (0, _decode.decodeAddress)(addressOrPublicKey);
  const input = {
    message: (0, _util.u8aToU8a)(message),
    publicKey,
    signature: signatureU8a
  };
  const result = {
    crypto: 'none',
    isValid: false,
    isWrapped: (0, _util.u8aIsWrapped)(input.message, true),
    publicKey
  };
  const isWrappedBytes = (0, _util.u8aIsWrapped)(input.message, false);
  const verifyFn = getVerifyFn(signatureU8a);
  verifyFn(result, input);

  if (result.crypto !== 'none' || result.isWrapped && !isWrappedBytes) {
    return result;
  }

  input.message = isWrappedBytes ? (0, _util.u8aUnwrapBytes)(input.message) : (0, _util.u8aWrapBytes)(input.message);
  return verifyFn(result, input);
}

},{"../address/decode.js":458,"../ed25519/verify.js":499,"../secp256k1/verify.js":566,"../sr25519/verify.js":581,"@polkadot/util":640}],571:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519Agreement = sr25519Agreement;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name sr25519Agreement
 * @description Key agreement between other's public key and self secret key
 */
function sr25519Agreement(secretKey, publicKey) {
  const secretKeyU8a = (0, _util.u8aToU8a)(secretKey);
  const publicKeyU8a = (0, _util.u8aToU8a)(publicKey);
  (0, _util.assert)(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  (0, _util.assert)(secretKeyU8a.length === 64, () => `Invalid secretKey, received ${secretKeyU8a.length} bytes, expected 64`);
  return (0, _wasmCrypto.sr25519Agree)(publicKeyU8a, secretKeyU8a);
}

},{"@polkadot/util":640,"@polkadot/wasm-crypto":721}],572:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDeriveFn = createDeriveFn;

var _util = require("@polkadot/util");

var _fromU8a = require("./pair/fromU8a.js");

var _toU8a = require("./pair/toU8a.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function createDeriveFn(derive) {
  return (keypair, chainCode) => {
    (0, _util.assert)((0, _util.isU8a)(chainCode) && chainCode.length === 32, 'Invalid chainCode passed to derive');
    return (0, _fromU8a.sr25519PairFromU8a)(derive((0, _toU8a.sr25519KeypairToU8a)(keypair), chainCode));
  };
}

},{"./pair/fromU8a.js":578,"./pair/toU8a.js":579,"@polkadot/util":640}],573:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519DeriveHard = void 0;

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _derive = require("./derive.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const sr25519DeriveHard = (0, _derive.createDeriveFn)(_wasmCrypto.sr25519DeriveKeypairHard);
exports.sr25519DeriveHard = sr25519DeriveHard;

},{"./derive.js":572,"@polkadot/wasm-crypto":721}],574:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519DerivePublic = sr25519DerivePublic;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function sr25519DerivePublic(publicKey, chainCode) {
  const publicKeyU8a = (0, _util.u8aToU8a)(publicKey);
  (0, _util.assert)((0, _util.isU8a)(chainCode) && chainCode.length === 32, 'Invalid chainCode passed to derive');
  (0, _util.assert)(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  return (0, _wasmCrypto.sr25519DerivePublicSoft)(publicKeyU8a, chainCode);
}

},{"@polkadot/util":640,"@polkadot/wasm-crypto":721}],575:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519DeriveSoft = void 0;

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _derive = require("./derive.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const sr25519DeriveSoft = (0, _derive.createDeriveFn)(_wasmCrypto.sr25519DeriveKeypairSoft);
exports.sr25519DeriveSoft = sr25519DeriveSoft;

},{"./derive.js":572,"@polkadot/wasm-crypto":721}],576:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "sr25519Agreement", {
  enumerable: true,
  get: function () {
    return _agreement.sr25519Agreement;
  }
});
Object.defineProperty(exports, "sr25519DeriveHard", {
  enumerable: true,
  get: function () {
    return _deriveHard.sr25519DeriveHard;
  }
});
Object.defineProperty(exports, "sr25519DerivePublic", {
  enumerable: true,
  get: function () {
    return _derivePublic.sr25519DerivePublic;
  }
});
Object.defineProperty(exports, "sr25519DeriveSoft", {
  enumerable: true,
  get: function () {
    return _deriveSoft.sr25519DeriveSoft;
  }
});
Object.defineProperty(exports, "sr25519PairFromSeed", {
  enumerable: true,
  get: function () {
    return _fromSeed.sr25519PairFromSeed;
  }
});
Object.defineProperty(exports, "sr25519Sign", {
  enumerable: true,
  get: function () {
    return _sign.sr25519Sign;
  }
});
Object.defineProperty(exports, "sr25519Verify", {
  enumerable: true,
  get: function () {
    return _verify.sr25519Verify;
  }
});
Object.defineProperty(exports, "sr25519VrfSign", {
  enumerable: true,
  get: function () {
    return _vrfSign.sr25519VrfSign;
  }
});
Object.defineProperty(exports, "sr25519VrfVerify", {
  enumerable: true,
  get: function () {
    return _vrfVerify.sr25519VrfVerify;
  }
});

var _agreement = require("./agreement.js");

var _deriveHard = require("./deriveHard.js");

var _derivePublic = require("./derivePublic.js");

var _deriveSoft = require("./deriveSoft.js");

var _fromSeed = require("./pair/fromSeed.js");

var _sign = require("./sign.js");

var _verify = require("./verify.js");

var _vrfSign = require("./vrfSign.js");

var _vrfVerify = require("./vrfVerify.js");

},{"./agreement.js":571,"./deriveHard.js":573,"./derivePublic.js":574,"./deriveSoft.js":575,"./pair/fromSeed.js":577,"./sign.js":580,"./verify.js":581,"./vrfSign.js":582,"./vrfVerify.js":583}],577:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519PairFromSeed = sr25519PairFromSeed;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _fromU8a = require("./fromU8a.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name sr25519PairFromSeed
 * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
 */
function sr25519PairFromSeed(seed) {
  const seedU8a = (0, _util.u8aToU8a)(seed);
  (0, _util.assert)(seedU8a.length === 32, () => `Expected a seed matching 32 bytes, found ${seedU8a.length}`);
  return (0, _fromU8a.sr25519PairFromU8a)((0, _wasmCrypto.sr25519KeypairFromSeed)(seedU8a));
}

},{"./fromU8a.js":578,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],578:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519PairFromU8a = sr25519PairFromU8a;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const SEC_LEN = 64;
const PUB_LEN = 32;
const TOT_LEN = SEC_LEN + PUB_LEN;

function sr25519PairFromU8a(full) {
  const fullU8a = (0, _util.u8aToU8a)(full);
  (0, _util.assert)(fullU8a.length === TOT_LEN, () => `Expected keypair with ${TOT_LEN} bytes, found ${fullU8a.length}`);
  return {
    publicKey: fullU8a.slice(SEC_LEN, TOT_LEN),
    secretKey: fullU8a.slice(0, SEC_LEN)
  };
}

},{"@polkadot/util":640}],579:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519KeypairToU8a = sr25519KeypairToU8a;

var _util = require("@polkadot/util");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
function sr25519KeypairToU8a({
  publicKey,
  secretKey
}) {
  return (0, _util.u8aConcat)(secretKey, publicKey).slice();
}

},{"@polkadot/util":640}],580:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519Sign = sr25519Sign;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name sr25519Sign
 * @description Returns message signature of `message`, using the supplied pair
 */
function sr25519Sign(message, {
  publicKey,
  secretKey
}) {
  (0, _util.assert)((publicKey === null || publicKey === void 0 ? void 0 : publicKey.length) === 32, 'Expected a valid publicKey, 32-bytes');
  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Expected a valid secretKey, 64-bytes');
  return (0, _wasmCrypto.sr25519Sign)(publicKey, secretKey, (0, _util.u8aToU8a)(message));
}

},{"@polkadot/util":640,"@polkadot/wasm-crypto":721}],581:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519Verify = sr25519Verify;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name sr25519Verify
 * @description Verifies the signature of `message`, using the supplied pair
 */
function sr25519Verify(message, signature, publicKey) {
  const publicKeyU8a = (0, _util.u8aToU8a)(publicKey);
  const signatureU8a = (0, _util.u8aToU8a)(signature);
  (0, _util.assert)(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
  (0, _util.assert)(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
  return (0, _wasmCrypto.sr25519Verify)(signatureU8a, (0, _util.u8aToU8a)(message), publicKeyU8a);
}

},{"@polkadot/util":640,"@polkadot/wasm-crypto":721}],582:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519VrfSign = sr25519VrfSign;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const EMPTY_U8A = new Uint8Array();
/**
 * @name sr25519VrfSign
 * @description Sign with sr25519 vrf signing (deterministic)
 */

function sr25519VrfSign(message, {
  secretKey
}, context = EMPTY_U8A, extra = EMPTY_U8A) {
  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 64, 'Invalid secretKey, expected 64-bytes');
  return (0, _wasmCrypto.vrfSign)(secretKey, (0, _util.u8aToU8a)(context), (0, _util.u8aToU8a)(message), (0, _util.u8aToU8a)(extra));
}

},{"@polkadot/util":640,"@polkadot/wasm-crypto":721}],583:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sr25519VrfVerify = sr25519VrfVerify;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const EMPTY_U8A = new Uint8Array();
/**
 * @name sr25519VrfVerify
 * @description Verify with sr25519 vrf verification
 */

function sr25519VrfVerify(message, signOutput, publicKey, context = EMPTY_U8A, extra = EMPTY_U8A) {
  const publicKeyU8a = (0, _util.u8aToU8a)(publicKey);
  const proofU8a = (0, _util.u8aToU8a)(signOutput);
  (0, _util.assert)(publicKeyU8a.length === 32, 'Invalid publicKey, expected 32-bytes');
  (0, _util.assert)(proofU8a.length === 96, 'Invalid vrfSign output, expected 96 bytes');
  return (0, _wasmCrypto.vrfVerify)(publicKeyU8a, (0, _util.u8aToU8a)(context), (0, _util.u8aToU8a)(message), (0, _util.u8aToU8a)(extra), proofU8a);
}

},{"@polkadot/util":640,"@polkadot/wasm-crypto":721}],584:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xxhashAsHex = void 0;
exports.xxhashAsU8a = xxhashAsU8a;

var _util = require("@polkadot/util");

var _wasmCrypto = require("@polkadot/wasm-crypto");

var _helpers = require("../helpers.js");

var _xxhash = require("./xxhash64.js");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name xxhashAsU8a
 * @summary Creates a xxhash64 u8a from the input.
 * @description
 * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { xxhashAsU8a } from '@polkadot/util-crypto';
 *
 * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999
 * ```
 */
function xxhashAsU8a(data, bitLength = 64, onlyJs) {
  const rounds = Math.ceil(bitLength / 64);
  const u8a = (0, _util.u8aToU8a)(data);

  if (!_util.hasBigInt || !onlyJs && (0, _wasmCrypto.isReady)()) {
    return (0, _wasmCrypto.twox)(u8a, rounds);
  }

  const result = new Uint8Array(rounds * 8);

  for (let seed = 0; seed < rounds; seed++) {
    result.set((0, _xxhash.xxhash64)(u8a, seed).reverse(), seed * 8);
  }

  return result;
}
/**
 * @name xxhashAsHex
 * @description Creates a xxhash64 hex from the input.
 */


const xxhashAsHex = (0, _helpers.createAsHex)(xxhashAsU8a);
exports.xxhashAsHex = xxhashAsHex;

},{"../helpers.js":510,"./xxhash64.js":586,"@polkadot/util":640,"@polkadot/wasm-crypto":721}],585:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "xxhashAsHex", {
  enumerable: true,
  get: function () {
    return _asU8a.xxhashAsHex;
  }
});
Object.defineProperty(exports, "xxhashAsU8a", {
  enumerable: true,
  get: function () {
    return _asU8a.xxhashAsU8a;
  }
});

var _asU8a = require("./asU8a.js");

},{"./asU8a.js":584}],586:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xxhash64 = xxhash64;

var _util = require("@polkadot/util");

var _xBigint = require("@polkadot/x-bigint");

// Copyright 2017-2021 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Adapted from https://github.com/pierrec/js-xxhash/blob/0504e76f3d31a21ae8528a7f590c7289c9e431d2/lib/xxhash64.js
//
// xxHash64 implementation in pure Javascript
// Copyright (C) 2016, Pierre Curto
// MIT license
//
// Changes made:
//   - converted to TypeScript
//   - uses native JS BigInt (no external dependencies)
//   - support only for Uint8Array inputs
//   - no constructor function, straight fill & digest
//   - update code removed, only called once, no streams
const P64_1 = (0, _xBigint.BigInt)('11400714785074694791');
const P64_2 = (0, _xBigint.BigInt)('14029467366897019727');
const P64_3 = (0, _xBigint.BigInt)('1609587929392839161');
const P64_4 = (0, _xBigint.BigInt)('9650029242287828579');
const P64_5 = (0, _xBigint.BigInt)('2870177450012600261'); // mask for a u64, all bits set

const U64 = (0, _xBigint.BigInt)('0xffffffffffffffff'); // various constants

const _7n = (0, _xBigint.BigInt)(7);

const _11n = (0, _xBigint.BigInt)(11);

const _12n = (0, _xBigint.BigInt)(12);

const _16n = (0, _xBigint.BigInt)(16);

const _18n = (0, _xBigint.BigInt)(18);

const _23n = (0, _xBigint.BigInt)(23);

const _27n = (0, _xBigint.BigInt)(27);

const _29n = (0, _xBigint.BigInt)(29);

const _31n = (0, _xBigint.BigInt)(31);

const _32n = (0, _xBigint.BigInt)(32);

const _33n = (0, _xBigint.BigInt)(33);

const _64n = (0, _xBigint.BigInt)(64);

const _256n = (0, _xBigint.BigInt)(256);

function rotl(a, b) {
  const c = a & U64;
  return (c << b | c >> _64n - b) & U64;
}

function fromU8a(u8a, p, count) {
  const bigints = new Array(count);
  let offset = 0;

  for (let i = 0; i < count; i++, offset += 2) {
    bigints[i] = (0, _xBigint.BigInt)(u8a[p + offset] | u8a[p + 1 + offset] << 8);
  }

  let result = _util._0n;

  for (let i = count - 1; i >= 0; i--) {
    result = (result << _16n) + bigints[i];
  }

  return result;
}

function toU8a(h64) {
  const result = new Uint8Array(8);

  for (let i = 7; i >= 0; i--) {
    result[i] = Number(h64 % _256n);
    h64 = h64 / _256n;
  }

  return result;
}

function state(initSeed) {
  const seed = (0, _xBigint.BigInt)(initSeed);
  return {
    seed,
    u8a: new Uint8Array(32),
    u8asize: 0,
    v1: seed + P64_1 + P64_2,
    v2: seed + P64_2,
    v3: seed,
    v4: seed - P64_1
  };
}

function init(state, input) {
  if (input.length < 32) {
    state.u8a.set(input);
    state.u8asize = input.length;
    return state;
  }

  const limit = input.length - 32;
  let p = 0;

  if (limit >= 0) {
    const adjustV = v => P64_1 * rotl(v + P64_2 * fromU8a(input, p, 4), _31n);

    do {
      state.v1 = adjustV(state.v1);
      p += 8;
      state.v2 = adjustV(state.v2);
      p += 8;
      state.v3 = adjustV(state.v3);
      p += 8;
      state.v4 = adjustV(state.v4);
      p += 8;
    } while (p <= limit);
  }

  if (p < input.length) {
    state.u8a.set(input.subarray(p, input.length));
    state.u8asize = input.length - p;
  }

  return state;
}

function xxhash64(input, initSeed) {
  const {
    seed,
    u8a,
    u8asize,
    v1,
    v2,
    v3,
    v4
  } = init(state(initSeed), input);
  let p = 0;
  let h64 = U64 & (0, _xBigint.BigInt)(input.length) + (input.length >= 32 ? ((((rotl(v1, _util._1n) + rotl(v2, _7n) + rotl(v3, _12n) + rotl(v4, _18n) ^ P64_1 * rotl(v1 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v2 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl(v4 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);

  while (p <= u8asize - 8) {
    h64 = U64 & P64_4 + P64_1 * rotl(h64 ^ P64_1 * rotl(P64_2 * fromU8a(u8a, p, 4), _31n), _27n);
    p += 8;
  }

  if (p + 4 <= u8asize) {
    h64 = U64 & P64_3 + P64_2 * rotl(h64 ^ P64_1 * fromU8a(u8a, p, 2), _23n);
    p += 4;
  }

  while (p < u8asize) {
    h64 = U64 & P64_1 * rotl(h64 ^ P64_5 * (0, _xBigint.BigInt)(u8a[p++]), _11n);
  }

  h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
  h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
  return toU8a(U64 & (h64 ^ h64 >> _32n));
}

},{"@polkadot/util":640,"@polkadot/x-bigint":723}],587:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayChunk = arrayChunk;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name arrayChunk
 * @summary Split T[] into T[][] based on the defind size
 * @description
 * Returns a set ao arrays based on the chunksize
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayChunk } from '@polkadot/util';
 *
 * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
 * ```
 */
function arrayChunk(array, chunkSize) {
  const outputSize = Math.ceil(array.length / chunkSize);
  const output = Array(outputSize);

  for (let i = 0; i < outputSize; i++) {
    const offset = i * chunkSize;
    output[i] = array.slice(offset, offset + chunkSize);
  }

  return output;
}

},{}],588:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayFilter = arrayFilter;

var _null = require("../is/null.js");

var _undefined = require("../is/undefined.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name arrayFilter
 * @summary Filters undefined and (optionally) null values from an array
 * @description
 * Returns a new array with all `undefined` values removed. Optionally, when `allowNulls = false`, it removes the `null` values as well
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayFilter } from '@polkadot/util';
 *
 * arrayFilter([0, void 0, true, null, false, '']); // [0, true, null, false, '']
 * arrayFilter([0, void 0, true, null, false, ''], false); // [0, true, false, '']
 * ```
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function arrayFilter(array, allowNulls = true) {
  return array.filter(value => !(0, _undefined.isUndefined)(value) && (allowNulls || !(0, _null.isNull)(value)));
}

},{"../is/null.js":658,"../is/undefined.js":668}],589:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayFlatten = arrayFlatten;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// This is supposed to be a faster concat...
// https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki

/**
 * @name arrayFlatten
 * @summary Merge T[][] into T[]
 * @description
 * Returns a new array with all arrays merged into one
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayFlatten } from '@polkadot/util';
 *
 * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
 * ```
 */
function arrayFlatten(arrays) {
  // pre-allocate based on the combined size
  let size = 0;

  for (let i = 0; i < arrays.length; i++) {
    size += arrays[i].length;
  }

  const output = new Array(size);
  let i = -1;

  for (let j = 0; j < arrays.length; j++) {
    const a = arrays[j]; // instead of pushing, we just set the entries

    for (let e = 0; e < a.length; e++) {
      output[++i] = a[e];
    }
  }

  return output;
}

},{}],590:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "arrayChunk", {
  enumerable: true,
  get: function () {
    return _chunk.arrayChunk;
  }
});
Object.defineProperty(exports, "arrayFilter", {
  enumerable: true,
  get: function () {
    return _filter.arrayFilter;
  }
});
Object.defineProperty(exports, "arrayFlatten", {
  enumerable: true,
  get: function () {
    return _flatten.arrayFlatten;
  }
});
Object.defineProperty(exports, "arrayRange", {
  enumerable: true,
  get: function () {
    return _range.arrayRange;
  }
});
Object.defineProperty(exports, "arrayShuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.arrayShuffle;
  }
});
Object.defineProperty(exports, "arrayZip", {
  enumerable: true,
  get: function () {
    return _zip.arrayZip;
  }
});

var _chunk = require("./chunk.js");

var _filter = require("./filter.js");

var _flatten = require("./flatten.js");

var _range = require("./range.js");

var _shuffle = require("./shuffle.js");

var _zip = require("./zip.js");

},{"./chunk.js":587,"./filter.js":588,"./flatten.js":589,"./range.js":591,"./shuffle.js":592,"./zip.js":593}],591:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayRange = arrayRange;

var _assert = require("../assert.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name arrayRange
 * @summary Returns a range of numbers ith the size and the specified offset
 * @description
 * Returns a new array of numbers with the specific size. Optionally, when `startAt`, is provided, it generates the range to start at a specific value.
 * @example
 * <BR>
 *
 * ```javascript
 * import { arrayRange } from '@polkadot/util';
 *
 * arrayRange(5); // [0, 1, 2, 3, 4]
 * arrayRange(3, 5); // [5, 6, 7]
 * ```
 */
function arrayRange(size, startAt = 0) {
  (0, _assert.assert)(size > 0, 'Expected non-zero, positive number as a range size');
  const result = new Array(size);

  for (let i = 0; i < size; i++) {
    result[i] = i + startAt;
  }

  return result;
}

},{"../assert.js":594}],592:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayShuffle = arrayShuffle;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function arrayShuffle(input) {
  const result = input.slice();
  let curr = result.length;

  if (curr === 1) {
    return result;
  }

  while (curr !== 0) {
    const rand = Math.floor(Math.random() * curr);
    curr--;
    [result[curr], result[rand]] = [result[rand], result[curr]];
  }

  return result;
}

},{}],593:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayZip = arrayZip;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function arrayZip(keys, values) {
  const result = new Array(keys.length);

  for (let i = 0; i < keys.length; i++) {
    result[i] = [keys[i], values[i]];
  }

  return result;
}

},{}],594:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assert = assert;
exports.assertReturn = assertReturn;
exports.assertUnreachable = assertUnreachable;

var _function = require("./is/function.js");

var _null = require("./is/null.js");

var _undefined = require("./is/undefined.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name assert
 * @summary Checks for a valid test, if not Error is thrown.
 * @description
 * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.
 * @example
 * <BR>
 *
 * ```javascript
 * const { assert } from '@polkadot/util';
 *
 * assert(true, 'True should be true'); // passes
 * assert(false, 'False should not be true'); // Error thrown
 * assert(false, () => 'message'); // Error with 'message'
 * ```
 */
function assert(condition, message) {
  if (!condition) {
    throw new Error((0, _function.isFunction)(message) ? message() : message);
  }
}
/**
 * @name assertReturn
 * @description Returns when the value is not undefined/null, otherwise throws assertion error
 */


function assertReturn(value, message) {
  assert(!(0, _undefined.isUndefined)(value) && !(0, _null.isNull)(value), message);
  return value;
}
/**
 * @name assertUnreachable
 * @description An assertion helper that ensures all codepaths are followed
 */


function assertUnreachable(x) {
  throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
}

},{"./is/function.js":651,"./is/null.js":658,"./is/undefined.js":668}],595:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._2pow53n = exports._1n = exports._1Qn = exports._1Mn = exports._1Bn = exports._0n = void 0;

var _xBigint = require("@polkadot/x-bigint");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name _0n
 * @summary BigInt constant for 0.
 */
const _0n = (0, _xBigint.BigInt)(0);
/**
 * @name _1n
 * @summary BigInt constant for 1.
 */


exports._0n = _0n;

const _1n = (0, _xBigint.BigInt)(1);
/**
 * @name _1Mn
 * @summary BigInt constant for 1,000,000.
 */


exports._1n = _1n;

const _1Mn = (0, _xBigint.BigInt)(1000000);
/**
* @name _1Bn
* @summary BigInt constant for 1,000,000,000.
*/


exports._1Mn = _1Mn;

const _1Bn = (0, _xBigint.BigInt)(1000000000);
/**
* @name _1Qn
* @summary BigInt constant for 1,000,000,000,000,000,000.
*/


exports._1Bn = _1Bn;

const _1Qn = _1Bn * _1Bn;
/**
* @name _2pow53n
* @summary BigInt constant for MAX_SAFE_INTEGER
*/


exports._1Qn = _1Qn;

const _2pow53n = (0, _xBigint.BigInt)(Number.MAX_SAFE_INTEGER);

exports._2pow53n = _2pow53n;

},{"@polkadot/x-bigint":723}],596:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  nSqrt: true,
  nToBigInt: true,
  nMax: true,
  nMin: true,
  nToHex: true,
  nToU8a: true
};
Object.defineProperty(exports, "nMax", {
  enumerable: true,
  get: function () {
    return _min.nMax;
  }
});
Object.defineProperty(exports, "nMin", {
  enumerable: true,
  get: function () {
    return _min.nMin;
  }
});
Object.defineProperty(exports, "nSqrt", {
  enumerable: true,
  get: function () {
    return _sqrt.nSqrt;
  }
});
Object.defineProperty(exports, "nToBigInt", {
  enumerable: true,
  get: function () {
    return _toBigInt.nToBigInt;
  }
});
Object.defineProperty(exports, "nToHex", {
  enumerable: true,
  get: function () {
    return _toHex.nToHex;
  }
});
Object.defineProperty(exports, "nToU8a", {
  enumerable: true,
  get: function () {
    return _toU8a.nToU8a;
  }
});

var _consts = require("./consts.js");

Object.keys(_consts).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _consts[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _consts[key];
    }
  });
});

var _sqrt = require("./sqrt.js");

var _toBigInt = require("./toBigInt.js");

var _min = require("./min.js");

var _toHex = require("./toHex.js");

var _toU8a = require("./toU8a.js");

},{"./consts.js":595,"./min.js":597,"./sqrt.js":598,"./toBigInt.js":599,"./toHex.js":600,"./toU8a.js":601}],597:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nMax = nMax;
exports.nMin = nMin;

var _assert = require("../assert.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function gt(a, b) {
  return a > b;
}

function lt(a, b) {
  return a < b;
}

function find(items, cmp) {
  (0, _assert.assert)(items.length >= 1, 'Must provide one or more bigint arguments');
  let result = items[0];

  for (let i = 1; i < items.length; i++) {
    if (cmp(items[i], result)) {
      result = items[i];
    }
  }

  return result;
}
/**
 * @name nMax
 * @summary Finds and returns the highest value in an array of bigint.
 */


function nMax(...items) {
  return find(items, gt);
}
/**
 * @name nMin
 * @summary Finds and returns the lowest value in an array of bigint.
 */


function nMin(...items) {
  return find(items, lt);
}

},{"../assert.js":594}],598:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nSqrt = nSqrt;

var _xBigint = require("@polkadot/x-bigint");

var _assert = require("../assert.js");

var _consts = require("./consts.js");

var _toBigInt = require("./toBigInt.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const _sqrt2pow53n = (0, _xBigint.BigInt)(94906265);
/**
 * @name nSqrt
 * @summary Calculates the integer square root of a bigint
 */


function nSqrt(value) {
  const n = (0, _toBigInt.nToBigInt)(value);
  (0, _assert.assert)(n >= _consts._0n, 'square root of negative numbers is not supported'); // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
  // shortcut <= 2^53 - 1 to use the JS utils

  if (n <= _consts._2pow53n) {
    return (0, _xBigint.BigInt)(Math.floor(Math.sqrt(Number(n))));
  } // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
  // output will be larger than this, we expect this to be a safe start


  let x0 = _sqrt2pow53n;

  while (true) {
    const x1 = n / x0 + x0 >> _consts._1n;

    if (x0 === x1 || x0 === x1 - _consts._1n) {
      return x0;
    }

    x0 = x1;
  }
}

},{"../assert.js":594,"./consts.js":595,"./toBigInt.js":599,"@polkadot/x-bigint":723}],599:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nToBigInt = nToBigInt;

var _xBigint = require("@polkadot/x-bigint");

var _toBigInt = require("../hex/toBigInt.js");

var _bn = require("../is/bn.js");

var _hex = require("../is/hex.js");

var _toBigInt2 = require("../is/toBigInt.js");

var _toBn = require("../is/toBn.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name nToBigInt
 * @summary Creates a bigInt value from a BN, bigint, string (base 10 or hex) or number input.
 */
function nToBigInt(value) {
  return typeof value === 'bigint' ? value : !value ? (0, _xBigint.BigInt)(0) : (0, _hex.isHex)(value) ? (0, _toBigInt.hexToBigInt)(value.toString()) : (0, _bn.isBn)(value) ? (0, _xBigint.BigInt)(value.toString()) : (0, _toBigInt2.isToBigInt)(value) ? value.toBigInt() : (0, _toBn.isToBn)(value) ? (0, _xBigint.BigInt)(value.toBn().toString()) : (0, _xBigint.BigInt)(value);
}

},{"../hex/toBigInt.js":635,"../is/bn.js":644,"../is/hex.js":653,"../is/toBigInt.js":665,"../is/toBn.js":666,"@polkadot/x-bigint":723}],600:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nToHex = nToHex;

var _spread = require("../object/spread.js");

var _index = require("../u8a/index.js");

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const ZERO_STR = '0x00';
/**
 * @name nToHex
 * @summary Creates a hex value from a bigint object.
 */

function nToHex(value, options) {
  if (!value) {
    return ZERO_STR;
  }

  return (0, _index.u8aToHex)((0, _toU8a.nToU8a)(value, (0, _spread.objectSpread)( // We spread here, the default for hex values is BE (JSONRPC via substrate)
  {
    isLe: false,
    isNegative: false
  }, options)));
}

},{"../object/spread.js":683,"../u8a/index.js":699,"./toU8a.js":601}],601:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nToU8a = nToU8a;

var _xBigint = require("@polkadot/x-bigint");

var _spread = require("../object/spread.js");

var _consts = require("./consts.js");

var _toBigInt = require("./toBigInt.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DIV = (0, _xBigint.BigInt)(256);
const NEG_MASK = (0, _xBigint.BigInt)(0xff);

function createEmpty({
  bitLength = 0
}) {
  return bitLength === -1 ? new Uint8Array() : new Uint8Array(Math.ceil(bitLength / 8));
}

function toU8a(value, {
  isLe,
  isNegative
}) {
  const arr = [];

  if (isNegative) {
    value = (value + _consts._1n) * -_consts._1n;
  }

  while (value !== _consts._0n) {
    const mod = value % DIV;
    const val = Number(isNegative ? mod ^ NEG_MASK : mod);

    if (isLe) {
      arr.push(val);
    } else {
      arr.unshift(val);
    }

    value = (value - mod) / DIV;
  }

  return Uint8Array.from(arr);
}
/**
 * @name nToU8a
 * @summary Creates a Uint8Array object from a bigint.
 */


function nToU8a(value, options) {
  const opts = (0, _spread.objectSpread)({
    bitLength: -1,
    isLe: true,
    isNegative: false
  }, options);
  const valueBi = (0, _toBigInt.nToBigInt)(value);

  if (valueBi === _consts._0n) {
    return createEmpty(opts);
  }

  const u8a = toU8a(valueBi, opts);

  if (opts.bitLength === -1) {
    return u8a;
  }

  const byteLength = Math.ceil((opts.bitLength || 0) / 8);
  const output = new Uint8Array(byteLength);

  if (opts.isNegative) {
    output.fill(0xff);
  }

  output.set(u8a, opts.isLe ? 0 : byteLength - u8a.length);
  return output;
}

},{"../object/spread.js":683,"./consts.js":595,"./toBigInt.js":599,"@polkadot/x-bigint":723}],602:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BN", {
  enumerable: true,
  get: function () {
    return _bn.default;
  }
});

var _bn = _interopRequireDefault(require("bn.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

},{"bn.js":740}],603:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BN_ZERO = exports.BN_TWO = exports.BN_THREE = exports.BN_THOUSAND = exports.BN_TEN = exports.BN_SIX = exports.BN_SEVEN = exports.BN_QUINTILL = exports.BN_ONE = exports.BN_NINE = exports.BN_MILLION = exports.BN_MAX_INTEGER = exports.BN_HUNDRED = exports.BN_FOUR = exports.BN_FIVE = exports.BN_EIGHT = exports.BN_BILLION = void 0;

var _bn = require("./bn.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name BN_ZERO
 * @summary BN constant for 0.
 */
const BN_ZERO = new _bn.BN(0);
/**
 * @name BN_ONE
 * @summary BN constant for 1.
 */

exports.BN_ZERO = BN_ZERO;
const BN_ONE = new _bn.BN(1);
/**
 * @name BN_TWO
 * @summary BN constant for 2.
 */

exports.BN_ONE = BN_ONE;
const BN_TWO = new _bn.BN(2);
/**
 * @name BN_THREE
 * @summary BN constant for 3.
 */

exports.BN_TWO = BN_TWO;
const BN_THREE = new _bn.BN(3);
/**
 * @name BN_FOUR
 * @summary BN constant for 4.
 */

exports.BN_THREE = BN_THREE;
const BN_FOUR = new _bn.BN(4);
/**
 * @name BN_FIVE
 * @summary BN constant for 5.
 */

exports.BN_FOUR = BN_FOUR;
const BN_FIVE = new _bn.BN(5);
/**
 * @name BN_SIX
 * @summary BN constant for 6.
 */

exports.BN_FIVE = BN_FIVE;
const BN_SIX = new _bn.BN(6);
/**
 * @name BN_SEVEN
 * @summary BN constant for 7.
 */

exports.BN_SIX = BN_SIX;
const BN_SEVEN = new _bn.BN(7);
/**
 * @name BN_EIGHT
 * @summary BN constant for 8.
 */

exports.BN_SEVEN = BN_SEVEN;
const BN_EIGHT = new _bn.BN(8);
/**
 * @name BN_NINE
 * @summary BN constant for 9.
 */

exports.BN_EIGHT = BN_EIGHT;
const BN_NINE = new _bn.BN(9);
/**
 * @name BN_TEN
 * @summary BN constant for 10.
 */

exports.BN_NINE = BN_NINE;
const BN_TEN = new _bn.BN(10);
/**
 * @name BN_HUNDRED
 * @summary BN constant for 100.
 */

exports.BN_TEN = BN_TEN;
const BN_HUNDRED = new _bn.BN(100);
/**
 * @name BN_THOUSAND
 * @summary BN constant for 1,000.
 */

exports.BN_HUNDRED = BN_HUNDRED;
const BN_THOUSAND = new _bn.BN(1000);
/**
 * @name BN_MILLION
 * @summary BN constant for 1,000,000.
 */

exports.BN_THOUSAND = BN_THOUSAND;
const BN_MILLION = new _bn.BN(1000000);
/**
 * @name BN_BILLION
 * @summary BN constant for 1,000,000,000.
 */

exports.BN_MILLION = BN_MILLION;
const BN_BILLION = new _bn.BN(1000000000);
/**
 * @name BN_QUINTILL
 * @summary BN constant for 1,000,000,000,000,000,000.
 */

exports.BN_BILLION = BN_BILLION;
const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
/**
 * @name BN_MAX_INTEGER
 * @summary BN constant for MAX_SAFE_INTEGER
 */

exports.BN_QUINTILL = BN_QUINTILL;
const BN_MAX_INTEGER = new _bn.BN(Number.MAX_SAFE_INTEGER);
exports.BN_MAX_INTEGER = BN_MAX_INTEGER;

},{"./bn.js":602}],604:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bnFromHex", {
  enumerable: true,
  get: function () {
    return _toBn.hexToBn;
  }
});

var _toBn = require("../hex/toBn.js");

},{"../hex/toBn.js":636}],605:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  BN: true,
  bnFromHex: true,
  bnMax: true,
  bnMin: true,
  bnSqrt: true,
  bnToBn: true,
  bnToHex: true,
  bnToU8a: true
};
Object.defineProperty(exports, "BN", {
  enumerable: true,
  get: function () {
    return _bn.BN;
  }
});
Object.defineProperty(exports, "bnFromHex", {
  enumerable: true,
  get: function () {
    return _fromHex.bnFromHex;
  }
});
Object.defineProperty(exports, "bnMax", {
  enumerable: true,
  get: function () {
    return _min.bnMax;
  }
});
Object.defineProperty(exports, "bnMin", {
  enumerable: true,
  get: function () {
    return _min.bnMin;
  }
});
Object.defineProperty(exports, "bnSqrt", {
  enumerable: true,
  get: function () {
    return _sqrt.bnSqrt;
  }
});
Object.defineProperty(exports, "bnToBn", {
  enumerable: true,
  get: function () {
    return _toBn.bnToBn;
  }
});
Object.defineProperty(exports, "bnToHex", {
  enumerable: true,
  get: function () {
    return _toHex.bnToHex;
  }
});
Object.defineProperty(exports, "bnToU8a", {
  enumerable: true,
  get: function () {
    return _toU8a.bnToU8a;
  }
});

var _consts = require("./consts.js");

Object.keys(_consts).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _consts[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _consts[key];
    }
  });
});

var _bn = require("./bn.js");

var _fromHex = require("./fromHex.js");

var _min = require("./min.js");

var _sqrt = require("./sqrt.js");

var _toBn = require("./toBn.js");

var _toHex = require("./toHex.js");

var _toU8a = require("./toU8a.js");

},{"./bn.js":602,"./consts.js":603,"./fromHex.js":604,"./min.js":606,"./sqrt.js":607,"./toBn.js":608,"./toHex.js":609,"./toU8a.js":610}],606:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bnMax = bnMax;
exports.bnMin = bnMin;
exports.find = find;

var _assert = require("../assert.js");

var _bn = require("./bn.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function find(items, cmp) {
  (0, _assert.assert)(items.length >= 1, 'Must provide one or more BN arguments');
  let result = items[0];

  for (let i = 1; i < items.length; i++) {
    result = cmp(result, items[i]);
  }

  return result;
}
/**
 * @name bnMax
 * @summary Finds and returns the highest value in an array of BNs.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnMax } from '@polkadot/util';
 *
 * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'
 * ```
 */


function bnMax(...items) {
  return find(items, _bn.BN.max);
}
/**
 * @name bnMin
 * @summary Finds and returns the smallest value in an array of BNs.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnMin } from '@polkadot/util';
 *
 * bnMin([new BN(1), new BN(3), new BN(2)]).toString(); // => '1'
 * ```
 */


function bnMin(...items) {
  return find(items, _bn.BN.min);
}

},{"../assert.js":594,"./bn.js":602}],607:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bnSqrt = bnSqrt;

var _assert = require("../assert.js");

var _bn = require("./bn.js");

var _consts = require("./consts.js");

var _toBn = require("./toBn.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const SQRT_MAX_SAFE_INTEGER = new _bn.BN(94906265);
/**
 * @name bnSqrt
 * @summary Calculates the integer square root of a BN
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnSqrt } from '@polkadot/util';
 *
 * bnSqrt(new BN(16)).toString(); // => '4'
 * ```
 */

function bnSqrt(value) {
  const n = (0, _toBn.bnToBn)(value);
  (0, _assert.assert)(n.gte(_consts.BN_ZERO), 'square root of negative numbers is not supported'); // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
  // shortcut <= 2^53 - 1 to use the JS utils

  if (n.lte(_consts.BN_MAX_INTEGER)) {
    return new _bn.BN(Math.floor(Math.sqrt(n.toNumber())));
  } // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
  // output will be larger than this, we expect this to be a safe start


  let x0 = SQRT_MAX_SAFE_INTEGER.clone();

  while (true) {
    const x1 = n.div(x0).iadd(x0).ishrn(1);

    if (x0.eq(x1) || x0.eq(x1.sub(_consts.BN_ONE))) {
      return x0;
    }

    x0 = x1;
  }
}

},{"../assert.js":594,"./bn.js":602,"./consts.js":603,"./toBn.js":608}],608:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bnToBn = bnToBn;

var _toBn = require("../hex/toBn.js");

var _bigInt = require("../is/bigInt.js");

var _hex = require("../is/hex.js");

var _toBigInt = require("../is/toBigInt.js");

var _toBn2 = require("../is/toBn.js");

var _bn = require("./bn.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name bnToBn
 * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.
 * @description
 * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToBn } from '@polkadot/util';
 *
 * bnToBn(0x1234); // => BN(0x1234)
 * bnToBn(new BN(0x1234)); // => BN(0x1234)
 * ```
 */
function bnToBn(value) {
  return _bn.BN.isBN(value) ? value : !value ? new _bn.BN(0) : (0, _hex.isHex)(value) ? (0, _toBn.hexToBn)(value.toString()) : (0, _bigInt.isBigInt)(value) ? new _bn.BN(value.toString()) : (0, _toBn2.isToBn)(value) ? value.toBn() : (0, _toBigInt.isToBigInt)(value) ? new _bn.BN(value.toBigInt().toString()) : new _bn.BN(value);
}

},{"../hex/toBn.js":636,"../is/bigInt.js":643,"../is/hex.js":653,"../is/toBigInt.js":665,"../is/toBn.js":666,"./bn.js":602}],609:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bnToHex = bnToHex;

var _number = require("../is/number.js");

var _spread = require("../object/spread.js");

var _index = require("../u8a/index.js");

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const ZERO_STR = '0x00';
const DEFAULT_OPTS = {
  bitLength: -1,
  isLe: false,
  isNegative: false
};
/**
 * @name bnToHex
 * @summary Creates a hex value from a BN.js bignumber object.
 * @description
 * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { bnToHex } from '@polkadot/util';
 *
 * bnToHex(new BN(0x123456)); // => '0x123456'
 * ```
 */

function bnToHex(value, arg1 = DEFAULT_OPTS, arg2) {
  if (!value) {
    return ZERO_STR;
  }

  return (0, _index.u8aToHex)((0, _toU8a.bnToU8a)(value, (0, _spread.objectSpread)( // We spread here, the default for hex values is BE (JSONRPC via substrate)
  {
    isLe: false,
    isNegative: false
  }, (0, _number.isNumber)(arg1) ? {
    bitLength: arg1,
    isLe: arg2
  } : arg1)));
}

},{"../is/number.js":659,"../object/spread.js":683,"../u8a/index.js":699,"./toU8a.js":610}],610:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bnToU8a = bnToU8a;

var _number = require("../is/number.js");

var _spread = require("../object/spread.js");

var _toBn = require("./toBn.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_OPTS = {
  bitLength: -1,
  isLe: true,
  isNegative: false
};

function createEmpty(byteLength, options) {
  return options.bitLength === -1 ? new Uint8Array() : new Uint8Array(byteLength);
}

function createValue(valueBn, byteLength, {
  isLe,
  isNegative
}) {
  const output = new Uint8Array(byteLength);
  const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
  output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
  return output;
}
/**
 * @name bnToU8a
 * @summary Creates a Uint8Array object from a BN.
 * @description
 * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.
 * @example
 * <BR>
 *
 * ```javascript
 * import { bnToU8a } from '@polkadot/util';
 *
 * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]
 * ```
 */


function bnToU8a(value, arg1 = DEFAULT_OPTS, arg2) {
  const options = (0, _spread.objectSpread)({
    bitLength: -1,
    isLe: true,
    isNegative: false
  }, (0, _number.isNumber)(arg1) ? {
    bitLength: arg1,
    isLe: arg2
  } : arg1);
  const valueBn = (0, _toBn.bnToBn)(value);
  const byteLength = options.bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((options.bitLength || 0) / 8);
  return value ? createValue(valueBn, byteLength, options) : createEmpty(byteLength, options);
}

},{"../is/number.js":659,"../object/spread.js":683,"./toBn.js":608}],611:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "bufferToU8a", {
  enumerable: true,
  get: function () {
    return _toU8a.bufferToU8a;
  }
});

var _toU8a = require("./toU8a.js");

},{"./toU8a.js":612}],612:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bufferToU8a = bufferToU8a;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name bufferToU8a
 * @summary Creates a Uint8Array value from a Buffer object.
 * @description
 * `null` inputs returns an empty result, `Buffer` values return the actual value as a `Uint8Array`. Anything that is not a `Buffer` object throws an error.
 * @example
 * <BR>
 *
 * ```javascript
 * import { bufferToU8a } from '@polkadot/util';
 *
 * bufferToU8a(Buffer.from([1, 2, 3]));
 * ```
 */
function bufferToU8a(buffer) {
  return new Uint8Array(buffer || []);
}

},{}],613:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  packageInfo: true
};
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _packageInfo = require("./packageInfo.js");

var _index = require("./array/index.js");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _assert = require("./assert.js");

Object.keys(_assert).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _assert[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _assert[key];
    }
  });
});

var _index2 = require("./bi/index.js");

Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index2[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    }
  });
});

var _index3 = require("./bn/index.js");

Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index3[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    }
  });
});

var _index4 = require("./buffer/index.js");

Object.keys(_index4).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index4[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index4[key];
    }
  });
});

var _index5 = require("./compact/index.js");

Object.keys(_index5).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index5[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index5[key];
    }
  });
});

var _extractTime = require("./extractTime.js");

Object.keys(_extractTime).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _extractTime[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _extractTime[key];
    }
  });
});

var _index6 = require("./format/index.js");

Object.keys(_index6).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index6[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index6[key];
    }
  });
});

var _has = require("./has.js");

Object.keys(_has).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _has[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _has[key];
    }
  });
});

var _index7 = require("./hex/index.js");

Object.keys(_index7).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index7[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index7[key];
    }
  });
});

var _index8 = require("./is/index.js");

Object.keys(_index8).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index8[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index8[key];
    }
  });
});

var _lazy = require("./lazy.js");

Object.keys(_lazy).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _lazy[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _lazy[key];
    }
  });
});

var _logger = require("./logger.js");

Object.keys(_logger).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _logger[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _logger[key];
    }
  });
});

var _memoize = require("./memoize.js");

Object.keys(_memoize).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _memoize[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _memoize[key];
    }
  });
});

var _index9 = require("./number/index.js");

Object.keys(_index9).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index9[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index9[key];
    }
  });
});

var _index10 = require("./object/index.js");

Object.keys(_index10).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index10[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index10[key];
    }
  });
});

var _promisify = require("./promisify.js");

Object.keys(_promisify).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _promisify[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _promisify[key];
    }
  });
});

var _index11 = require("./string/index.js");

Object.keys(_index11).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index11[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index11[key];
    }
  });
});

var _stringify = require("./stringify.js");

Object.keys(_stringify).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _stringify[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stringify[key];
    }
  });
});

var _index12 = require("./u8a/index.js");

Object.keys(_index12).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _index12[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index12[key];
    }
  });
});

var _versionDetect = require("./versionDetect.js");

Object.keys(_versionDetect).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _versionDetect[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _versionDetect[key];
    }
  });
});

},{"./array/index.js":590,"./assert.js":594,"./bi/index.js":596,"./bn/index.js":605,"./buffer/index.js":611,"./compact/index.js":616,"./extractTime.js":620,"./format/index.js":626,"./has.js":628,"./hex/index.js":633,"./is/index.js":654,"./lazy.js":671,"./logger.js":672,"./memoize.js":673,"./number/index.js":674,"./object/index.js":680,"./packageInfo.js":685,"./promisify.js":686,"./string/index.js":688,"./stringify.js":693,"./u8a/index.js":699,"./versionDetect.js":708}],614:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compactAddLength = compactAddLength;

var _index = require("../u8a/index.js");

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name compactAddLength
 * @description Adds a length prefix to the input value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactAddLength } from '@polkadot/util';
 *
 * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])
 * ```
 */
function compactAddLength(input) {
  return (0, _index.u8aConcat)((0, _toU8a.compactToU8a)(input.length), input);
}

},{"../u8a/index.js":699,"./toU8a.js":618}],615:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compactFromU8a = compactFromU8a;

var _index = require("../bn/index.js");

var _index2 = require("../u8a/index.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name compactFromU8a
 * @description Retrievs the offset and encoded length from a compact-prefixed value
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactFromU8a } from '@polkadot/util';
 *
 * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));
 *
 * console.log('value offset=', offset, 'length=', length); // 4, 0xffff
 * ```
 */
function compactFromU8a(input) {
  const u8a = (0, _index2.u8aToU8a)(input);
  const flag = u8a[0] & 0b11;

  if (flag === 0b00) {
    return [1, new _index.BN(u8a[0]).ishrn(2)];
  } else if (flag === 0b01) {
    return [2, (0, _index2.u8aToBn)(u8a.subarray(0, 2), true).ishrn(2)];
  } else if (flag === 0b10) {
    return [4, (0, _index2.u8aToBn)(u8a.subarray(0, 4), true).ishrn(2)];
  }

  const offset = 1 + new _index.BN(u8a[0]).ishrn(2) // clear flag
  .iadd(_index.BN_FOUR) // add 4 for base length
  .toNumber();
  return [offset, (0, _index2.u8aToBn)(u8a.subarray(1, offset), true)];
}

},{"../bn/index.js":605,"../u8a/index.js":699}],616:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "compactAddLength", {
  enumerable: true,
  get: function () {
    return _addLength.compactAddLength;
  }
});
Object.defineProperty(exports, "compactFromU8a", {
  enumerable: true,
  get: function () {
    return _fromU8a.compactFromU8a;
  }
});
Object.defineProperty(exports, "compactStripLength", {
  enumerable: true,
  get: function () {
    return _stripLength.compactStripLength;
  }
});
Object.defineProperty(exports, "compactToU8a", {
  enumerable: true,
  get: function () {
    return _toU8a.compactToU8a;
  }
});

var _addLength = require("./addLength.js");

var _stripLength = require("./stripLength.js");

var _fromU8a = require("./fromU8a.js");

var _toU8a = require("./toU8a.js");

},{"./addLength.js":614,"./fromU8a.js":615,"./stripLength.js":617,"./toU8a.js":618}],617:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compactStripLength = compactStripLength;

var _fromU8a = require("./fromU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name compactStripLength
 * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactStripLength } from '@polkadot/util';
 *
 * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]
 * ```
 */
function compactStripLength(input) {
  const [offset, length] = (0, _fromU8a.compactFromU8a)(input);
  const total = offset + length.toNumber();
  return [total, input.subarray(offset, total)];
}

},{"./fromU8a.js":615}],618:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compactToU8a = compactToU8a;

var _assert = require("../assert.js");

var _index = require("../bn/index.js");

var _index2 = require("../u8a/index.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const MAX_U8 = _index.BN_TWO.pow(new _index.BN(8 - 2)).isub(_index.BN_ONE);

const MAX_U16 = _index.BN_TWO.pow(new _index.BN(16 - 2)).isub(_index.BN_ONE);

const MAX_U32 = _index.BN_TWO.pow(new _index.BN(32 - 2)).isub(_index.BN_ONE);
/**
 * @name compactToU8a
 * @description Encodes a number into a compact representation
 * @example
 * <BR>
 *
 * ```javascript
 * import { compactToU8a } from '@polkadot/util';
 *
 * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])
 * ```
 */


function compactToU8a(value) {
  const bn = (0, _index.bnToBn)(value);

  if (bn.lte(MAX_U8)) {
    return new Uint8Array([bn.toNumber() << 2]);
  } else if (bn.lte(MAX_U16)) {
    return (0, _index.bnToU8a)(bn.shln(2).iadd(_index.BN_ONE), 16, true);
  } else if (bn.lte(MAX_U32)) {
    return (0, _index.bnToU8a)(bn.shln(2).iadd(_index.BN_TWO), 32, true);
  }

  const u8a = (0, _index.bnToU8a)(bn);
  let length = u8a.length; // adjust to the minimum number of bytes

  while (u8a[length - 1] === 0) {
    length--;
  }

  (0, _assert.assert)(length >= 4, 'Invalid length, previous checks match anything less than 2^30');
  return (0, _index2.u8aConcat)( // subtract 4 as minimum (also catered for in decoding)
  [(length - 4 << 2) + 0b11], u8a.subarray(0, length));
}

},{"../assert.js":594,"../bn/index.js":605,"../u8a/index.js":699}],619:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _xTextdecoder = require("@polkadot/x-textdecoder");

var _xTextencoder = require("@polkadot/x-textencoder");

var _packageInfo = require("./packageInfo.js");

var _versionDetect = require("./versionDetect.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// For esm, this should be import.meta.url or to get the same behavior as __dirname, we can use
//
//   new URL(import.meta.url).pathname)
//
// The issue is the WP4 has "some" issues with import.meta.url. So because of bundlers, we can't have
// nice things... In this case it is even worse since import.meta.url won't even make it compile, so
// there is a complete dead end with usage thereof
//
// When that is fixed, a solution is to have both .js & .mjs files, with the following content -
//
// cjs: util.detectPackage(packageInfo, () => __dirname);
// esm: detectPackage(packageInfo, () => import.meta.url);
//
// With the above we additionally need a .d.ts to just export the packageInfo
(0, _versionDetect.detectPackage)(_packageInfo.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_xTextdecoder.packageInfo, _xTextencoder.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/util")
},{"./packageInfo.js":685,"./versionDetect.js":708,"@polkadot/x-textdecoder":732,"@polkadot/x-textencoder":735}],620:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractTime = extractTime;

var _spread = require("./object/spread.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const HRS = 60 * 60;
const DAY = HRS * 24;
/**
 * @name addTime
 * @summary Add together two Time arrays
 */

function addTime(a, b) {
  return {
    days: a.days + b.days,
    hours: a.hours + b.hours,
    milliseconds: a.milliseconds + b.milliseconds,
    minutes: a.minutes + b.minutes,
    seconds: a.seconds + b.seconds
  };
}

const ZERO = {
  days: 0,
  hours: 0,
  milliseconds: 0,
  minutes: 0,
  seconds: 0
};

function extractDays(milliseconds, hrs) {
  const days = Math.floor(hrs / 24);
  return addTime((0, _spread.objectSpread)({}, ZERO, {
    days
  }), extractTime(milliseconds - days * DAY * 1000));
}

function extractHrs(milliseconds, mins) {
  const hrs = mins / 60;

  if (hrs < 24) {
    const hours = Math.floor(hrs);
    return addTime((0, _spread.objectSpread)({}, ZERO, {
      hours
    }), extractTime(milliseconds - hours * HRS * 1000));
  }

  return extractDays(milliseconds, hrs);
}

function extractMins(milliseconds, secs) {
  const mins = secs / 60;

  if (mins < 60) {
    const minutes = Math.floor(mins);
    return addTime((0, _spread.objectSpread)({}, ZERO, {
      minutes
    }), extractTime(milliseconds - minutes * 60 * 1000));
  }

  return extractHrs(milliseconds, mins);
}

function extractSecs(milliseconds) {
  const secs = milliseconds / 1000;

  if (secs < 60) {
    const seconds = Math.floor(secs);
    return addTime((0, _spread.objectSpread)({}, ZERO, {
      seconds
    }), extractTime(milliseconds - seconds * 1000));
  }

  return extractMins(milliseconds, secs);
}
/**
 * @name extractTime
 * @summary Convert a quantity of seconds to Time array representing accumulated {days, minutes, hours, seconds, milliseconds}
 * @example
 * <BR>
 *
 * ```javascript
 * import { extractTime } from '@polkadot/util';
 *
 * const { days, minutes, hours, seconds, milliseconds } = extractTime(6000); // 0, 0, 10, 0, 0
 * ```
 */


function extractTime(milliseconds) {
  if (!milliseconds) {
    return ZERO;
  } else if (milliseconds < 1000) {
    return (0, _spread.objectSpread)({}, ZERO, {
      milliseconds
    });
  }

  return extractSecs(milliseconds);
}

},{"./object/spread.js":683}],621:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatBalance = void 0;

var _toBn = require("../bn/toBn.js");

var _boolean = require("../is/boolean.js");

var _undefined = require("../is/undefined.js");

var _formatDecimal = require("./formatDecimal.js");

var _si = require("./si.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_DECIMALS = 0;
const DEFAULT_UNIT = _si.SI[_si.SI_MID].text;
let defaultDecimals = DEFAULT_DECIMALS;
let defaultUnit = DEFAULT_UNIT;

function getUnits(si, withSi, withSiFull, withUnit) {
  const unit = (0, _boolean.isBoolean)(withUnit) ? _si.SI[_si.SI_MID].text : withUnit;
  return withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${unit}` : '' : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}` : '';
}

function getPrePost(text, decimals, forceUnit) {
  // NOTE We start at midpoint (8) minus 1 - this means that values display as
  // 123.456 instead of 0.123k (so always 6 relevant). Additionally we use ceil
  // so there are at most 3 decimal before the decimal separator
  const si = (0, _si.calcSi)(text, decimals, forceUnit);
  const mid = text.length - (decimals + si.power);
  const prefix = text.substring(0, mid);
  const padding = mid < 0 ? 0 - mid : 0;
  const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substring(mid < 0 ? 0 : mid)}0000`.substring(0, 4);
  return [si, prefix || '0', postfix];
} // Formats a string/number with <prefix>.<postfix><type> notation


function _formatBalance(input, options = true, optDecimals = defaultDecimals) {
  let text = (0, _toBn.bnToBn)(input).toString();

  if (text.length === 0 || text === '0') {
    return '0';
  } // extract options - the boolean case is for backwards-compat


  const {
    decimals = optDecimals,
    forceUnit = undefined,
    withSi = true,
    withSiFull = false,
    withUnit = true
  } = (0, _boolean.isBoolean)(options) ? {
    withSi: options
  } : options; // strip the negative sign so we can work with clean groupings, re-add this in the
  // end when we return the result (from here on we work with positive numbers)

  let sign = '';

  if (text[0].startsWith('-')) {
    sign = '-';
    text = text.substring(1);
  }

  const [si, prefix, postfix] = getPrePost(text, decimals, forceUnit);
  const units = getUnits(si, withSi, withSiFull, withUnit);
  return `${sign}${(0, _formatDecimal.formatDecimal)(prefix)}.${postfix}${units}`;
}

const formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method

exports.formatBalance = formatBalance;

formatBalance.calcSi = (text, decimals = defaultDecimals) => (0, _si.calcSi)(text, decimals); // eslint-disable-next-line @typescript-eslint/unbound-method


formatBalance.findSi = _si.findSi; // eslint-disable-next-line @typescript-eslint/unbound-method

formatBalance.getDefaults = () => {
  return {
    decimals: defaultDecimals,
    unit: defaultUnit
  };
}; // get allowable options to display in a dropdown
// eslint-disable-next-line @typescript-eslint/unbound-method


formatBalance.getOptions = (decimals = defaultDecimals) => {
  return _si.SI.filter(({
    power
  }) => power < 0 ? decimals + power >= 0 : true);
}; // Sets the default decimals to use for formatting (ui-wide)
// eslint-disable-next-line @typescript-eslint/unbound-method


formatBalance.setDefaults = ({
  decimals,
  unit
}) => {
  defaultDecimals = (0, _undefined.isUndefined)(decimals) ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;
  defaultUnit = (0, _undefined.isUndefined)(unit) ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;
  _si.SI[_si.SI_MID].text = defaultUnit;
};

},{"../bn/toBn.js":608,"../is/boolean.js":645,"../is/undefined.js":668,"./formatDecimal.js":623,"./si.js":627}],622:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatDate = formatDate;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function zeroPad(value) {
  return value.toString().padStart(2, '0');
}

function formatDate(date) {
  const year = date.getFullYear().toString();
  const month = zeroPad(date.getMonth() + 1);
  const day = zeroPad(date.getDate());
  const hour = zeroPad(date.getHours());
  const minute = zeroPad(date.getMinutes());
  const second = zeroPad(date.getSeconds());
  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
}

},{}],623:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatDecimal = formatDecimal;
// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// eslint-disable-next-line prefer-regex-literals
const NUMBER_REGEX = new RegExp('(\\d+?)(?=(\\d{3})+(?!\\d)|$)', 'g');

function formatDecimal(value) {
  // We can do this by adjusting the regx, however for the sake of clarity
  // we rather strip and re-add the negative sign in the output
  const isNegative = value[0].startsWith('-');
  const matched = isNegative ? value.substr(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
  return matched ? `${isNegative ? '-' : ''}${matched.join(',')}` : value;
}

},{}],624:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatElapsed = formatElapsed;

var _toBn = require("../bn/toBn.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function formatValue(elapsed) {
  if (elapsed < 15) {
    return `${elapsed.toFixed(1)}s`;
  } else if (elapsed < 60) {
    return `${elapsed | 0}s`;
  } else if (elapsed < 3600) {
    return `${elapsed / 60 | 0}m`;
  }

  return `${elapsed / 3600 | 0}h`;
}

function formatElapsed(now, value) {
  const tsNow = now && now.getTime() || 0;
  const tsValue = value instanceof Date ? value.getTime() : (0, _toBn.bnToBn)(value).toNumber();
  return tsNow && tsValue ? formatValue(Math.max(Math.abs(tsNow - tsValue), 0) / 1000) : '0.0s';
}

},{"../bn/toBn.js":608}],625:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatNumber = formatNumber;

var _toBn = require("../bn/toBn.js");

var _formatDecimal = require("./formatDecimal.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function formatNumber(value) {
  return (0, _formatDecimal.formatDecimal)((0, _toBn.bnToBn)(value).toString());
}

},{"../bn/toBn.js":608,"./formatDecimal.js":623}],626:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "calcSi", {
  enumerable: true,
  get: function () {
    return _si.calcSi;
  }
});
Object.defineProperty(exports, "findSi", {
  enumerable: true,
  get: function () {
    return _si.findSi;
  }
});
Object.defineProperty(exports, "formatBalance", {
  enumerable: true,
  get: function () {
    return _formatBalance.formatBalance;
  }
});
Object.defineProperty(exports, "formatDate", {
  enumerable: true,
  get: function () {
    return _formatDate.formatDate;
  }
});
Object.defineProperty(exports, "formatDecimal", {
  enumerable: true,
  get: function () {
    return _formatDecimal.formatDecimal;
  }
});
Object.defineProperty(exports, "formatElapsed", {
  enumerable: true,
  get: function () {
    return _formatElapsed.formatElapsed;
  }
});
Object.defineProperty(exports, "formatNumber", {
  enumerable: true,
  get: function () {
    return _formatNumber.formatNumber;
  }
});

var _formatBalance = require("./formatBalance.js");

var _formatDate = require("./formatDate.js");

var _formatDecimal = require("./formatDecimal.js");

var _formatElapsed = require("./formatElapsed.js");

var _formatNumber = require("./formatNumber.js");

var _si = require("./si.js");

},{"./formatBalance.js":621,"./formatDate.js":622,"./formatDecimal.js":623,"./formatElapsed.js":624,"./formatNumber.js":625,"./si.js":627}],627:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SI_MID = exports.SI = void 0;
exports.calcSi = calcSi;
exports.findSi = findSi;
// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const SI_MID = 8;
exports.SI_MID = SI_MID;
const SI = [{
  power: -24,
  text: 'yocto',
  value: 'y'
}, {
  power: -21,
  text: 'zepto',
  value: 'z'
}, {
  power: -18,
  text: 'atto',
  value: 'a'
}, {
  power: -15,
  text: 'femto',
  value: 'f'
}, {
  power: -12,
  text: 'pico',
  value: 'p'
}, {
  power: -9,
  text: 'nano',
  value: 'n'
}, {
  power: -6,
  text: 'micro',
  value: 'µ'
}, {
  power: -3,
  text: 'milli',
  value: 'm'
}, {
  power: 0,
  text: 'Unit',
  value: '-'
}, // position 8
{
  power: 3,
  text: 'Kilo',
  value: 'k'
}, {
  power: 6,
  text: 'Mill',
  value: 'M'
}, // Mega, M
{
  power: 9,
  text: 'Bill',
  value: 'B'
}, // Giga, G
{
  power: 12,
  text: 'Tril',
  value: 'T'
}, // Tera, T
{
  power: 15,
  text: 'Peta',
  value: 'P'
}, {
  power: 18,
  text: 'Exa',
  value: 'E'
}, {
  power: 21,
  text: 'Zeta',
  value: 'Z'
}, {
  power: 24,
  text: 'Yotta',
  value: 'Y'
}]; // Given a SI type (e.g. k, m, Y) find the SI definition

exports.SI = SI;

function findSi(type) {
  // use a loop here, better RN support (which doesn't have [].find)
  for (let i = 0; i < SI.length; i++) {
    if (SI[i].value === type) {
      return SI[i];
    }
  }

  return SI[SI_MID];
}

function calcSi(text, decimals, forceUnit) {
  if (forceUnit) {
    return findSi(forceUnit);
  }

  const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
  return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
}

},{}],628:[function(require,module,exports){
(function (process,Buffer,__dirname){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasWasm = exports.hasProcess = exports.hasDirname = exports.hasBuffer = exports.hasBigInt = void 0;

var _xBigint = require("@polkadot/x-bigint");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const hasBigInt = typeof _xBigint.BigInt === 'function' && typeof _xBigint.BigInt.asIntN === 'function';
exports.hasBigInt = hasBigInt;
const hasBuffer = typeof Buffer !== 'undefined';
exports.hasBuffer = hasBuffer;
const hasDirname = typeof __dirname !== 'undefined';
exports.hasDirname = hasDirname;
const hasProcess = typeof process === 'object';
exports.hasProcess = hasProcess;
const hasWasm = typeof WebAssembly !== 'undefined';
exports.hasWasm = hasWasm;

}).call(this)}).call(this,require('_process'),require("buffer").Buffer,"/node_modules/@polkadot/util")
},{"@polkadot/x-bigint":723,"_process":976,"buffer":973}],629:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexAddPrefix = hexAddPrefix;

var _hasPrefix = require("./hasPrefix.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name hexAddPrefix
 * @summary Adds the `0x` prefix to string values.
 * @description
 * Returns a `0x` prefixed string from the input value. If the input is already prefixed, it is returned unchanged.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexAddPrefix } from '@polkadot/util';
 *
 * console.log('With prefix', hexAddPrefix('0a0b12')); // => 0x0a0b12
 * ```
 */
function hexAddPrefix(value) {
  if (value && (0, _hasPrefix.hexHasPrefix)(value)) {
    return value;
  }

  return `0x${value && value.length % 2 === 1 ? '0' : ''}${value || ''}`;
}

},{"./hasPrefix.js":632}],630:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.U8_TO_HEX = exports.U16_TO_HEX = exports.HEX_TO_U8 = exports.HEX_TO_U16 = void 0;
// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const U8_TO_HEX = new Array(256);
exports.U8_TO_HEX = U8_TO_HEX;
const U16_TO_HEX = new Array(256 * 256);
exports.U16_TO_HEX = U16_TO_HEX;
const HEX_TO_U8 = {};
exports.HEX_TO_U8 = HEX_TO_U8;
const HEX_TO_U16 = {};
exports.HEX_TO_U16 = HEX_TO_U16;

for (let n = 0; n < 256; n++) {
  const hex = n.toString(16).padStart(2, '0');
  U8_TO_HEX[n] = hex;
  HEX_TO_U8[hex] = n;
}

for (let i = 0; i < 256; i++) {
  for (let j = 0; j < 256; j++) {
    const hex = U8_TO_HEX[i] + U8_TO_HEX[j];
    const n = i << 8 | j;
    U16_TO_HEX[n] = hex;
    HEX_TO_U16[hex] = n;
  }
}

},{}],631:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexFixLength = hexFixLength;

var _addPrefix = require("./addPrefix.js");

var _stripPrefix = require("./stripPrefix.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name hexFixLength
 * @summary Shifts a hex string to a specific bitLength
 * @description
 * Returns a `0x` prefixed string with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length. Input values with less bits are returned as-is by default. When `withPadding` is set, shorter values are padded with `0`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexFixLength } from '@polkadot/util';
 *
 * console.log('fixed', hexFixLength('0x12', 16)); // => 0x12
 * console.log('fixed', hexFixLength('0x12', 16, true)); // => 0x0012
 * console.log('fixed', hexFixLength('0x0012', 8)); // => 0x12
 * ```
 */
function hexFixLength(value, bitLength = -1, withPadding = false) {
  const strLength = Math.ceil(bitLength / 4);
  const hexLength = strLength + 2;
  return (0, _addPrefix.hexAddPrefix)(bitLength === -1 || value.length === hexLength || !withPadding && value.length < hexLength ? (0, _stripPrefix.hexStripPrefix)(value) : value.length > hexLength ? (0, _stripPrefix.hexStripPrefix)(value).slice(-1 * strLength) : `${'0'.repeat(strLength)}${(0, _stripPrefix.hexStripPrefix)(value)}`.slice(-1 * strLength));
}

},{"./addPrefix.js":629,"./stripPrefix.js":634}],632:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexHasPrefix = hexHasPrefix;

var _hex = require("../is/hex.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name hexHasPrefix
 * @summary Tests for the existence of a `0x` prefix.
 * @description
 * Checks for a valid hex input value and if the start matched `0x`
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexHasPrefix } from '@polkadot/util';
 *
 * console.log('has prefix', hexHasPrefix('0x1234')); // => true
 * ```
 */
function hexHasPrefix(value) {
  return !!value && (0, _hex.isHex)(value, -1);
}

},{"../is/hex.js":653}],633:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "hexAddPrefix", {
  enumerable: true,
  get: function () {
    return _addPrefix.hexAddPrefix;
  }
});
Object.defineProperty(exports, "hexFixLength", {
  enumerable: true,
  get: function () {
    return _fixLength.hexFixLength;
  }
});
Object.defineProperty(exports, "hexHasPrefix", {
  enumerable: true,
  get: function () {
    return _hasPrefix.hexHasPrefix;
  }
});
Object.defineProperty(exports, "hexStripPrefix", {
  enumerable: true,
  get: function () {
    return _stripPrefix.hexStripPrefix;
  }
});
Object.defineProperty(exports, "hexToBigInt", {
  enumerable: true,
  get: function () {
    return _toBigInt.hexToBigInt;
  }
});
Object.defineProperty(exports, "hexToBn", {
  enumerable: true,
  get: function () {
    return _toBn.hexToBn;
  }
});
Object.defineProperty(exports, "hexToNumber", {
  enumerable: true,
  get: function () {
    return _toNumber.hexToNumber;
  }
});
Object.defineProperty(exports, "hexToString", {
  enumerable: true,
  get: function () {
    return _toString.hexToString;
  }
});
Object.defineProperty(exports, "hexToU8a", {
  enumerable: true,
  get: function () {
    return _toU8a.hexToU8a;
  }
});

var _addPrefix = require("./addPrefix.js");

var _fixLength = require("./fixLength.js");

var _hasPrefix = require("./hasPrefix.js");

var _stripPrefix = require("./stripPrefix.js");

var _toBigInt = require("./toBigInt.js");

var _toBn = require("./toBn.js");

var _toNumber = require("./toNumber.js");

var _toString = require("./toString.js");

var _toU8a = require("./toU8a.js");

},{"./addPrefix.js":629,"./fixLength.js":631,"./hasPrefix.js":632,"./stripPrefix.js":634,"./toBigInt.js":635,"./toBn.js":636,"./toNumber.js":637,"./toString.js":638,"./toU8a.js":639}],634:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexStripPrefix = hexStripPrefix;

var _hex = require("../is/hex.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name hexStripPrefix
 * @summary Strips any leading `0x` prefix.
 * @description
 * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexStripPrefix } from '@polkadot/util';
 *
 * console.log('stripped', hexStripPrefix('0x1234')); // => 1234
 * ```
 */
function hexStripPrefix(value) {
  if (!value || value === '0x') {
    return '';
  } else if (_hex.REGEX_HEX_PREFIXED.test(value)) {
    return value.substr(2);
  } else if (_hex.REGEX_HEX_NOPREFIX.test(value)) {
    return value;
  }

  throw new Error(`Expected hex value to convert, found '${value}'`);
}

},{"../is/hex.js":653}],635:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexToBigInt = hexToBigInt;

var _xBigint = require("@polkadot/x-bigint");

var _spread = require("../object/spread.js");

var _toBigInt = require("../u8a/toBigInt.js");

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name hexToBigInt
 * @summary Creates a BigInt instance object from a hex string.
 */
function hexToBigInt(value, options = {}) {
  if (!value || value === '0x') {
    return (0, _xBigint.BigInt)(0);
  }

  return (0, _toBigInt.u8aToBigInt)((0, _toU8a.hexToU8a)(value), (0, _spread.objectSpread)({
    isLe: false,
    isNegative: false
  }, options));
}

},{"../object/spread.js":683,"../u8a/toBigInt.js":701,"./toU8a.js":639,"@polkadot/x-bigint":723}],636:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexToBn = hexToBn;

var _bn = require("../bn/bn.js");

var _boolean = require("../is/boolean.js");

var _spread = require("../object/spread.js");

var _stripPrefix = require("./stripPrefix.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_OPTS = {
  isLe: false,
  isNegative: false
};
/**
 * @name hexToBn
 * @summary Creates a BN.js object from a hex string.
 * @description
 * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @param _value The value to convert
 * @param _options Options to pass while converting
 * @param _options.isLe Convert using Little Endian
 * @param _options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToBn } from '@polkadot/util';
 *
 * hexToBn('0x123480001f'); // => BN(0x123480001f)
 * ```
 */

function hexToBn(value, options = DEFAULT_OPTS) {
  if (!value || value === '0x') {
    return new _bn.BN(0);
  }

  const {
    isLe,
    isNegative
  } = (0, _spread.objectSpread)({
    isLe: false,
    isNegative: false
  }, (0, _boolean.isBoolean)(options) ? {
    isLe: options
  } : options);
  const stripped = (0, _stripPrefix.hexStripPrefix)(value);
  const bn = new _bn.BN(stripped, 16, isLe ? 'le' : 'be'); // fromTwos takes as parameter the number of bits, which is the hex length
  // multiplied by 4.

  return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
}

},{"../bn/bn.js":602,"../is/boolean.js":645,"../object/spread.js":683,"./stripPrefix.js":634}],637:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexToNumber = hexToNumber;

var _toBn = require("./toBn.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name hexToNumber
 * @summary Creates a Number value from a Buffer object.
 * @description
 * `null` inputs returns an NaN result, `hex` values return the actual value as a `Number`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToNumber } from '@polkadot/util';
 *
 * hexToNumber('0x1234'); // => 0x1234
 * ```
 */
function hexToNumber(value) {
  return value ? (0, _toBn.hexToBn)(value).toNumber() : NaN;
}

},{"./toBn.js":636}],638:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexToString = hexToString;

var _toString = require("../u8a/toString.js");

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name hexToU8a
 * @summary Creates a Uint8Array object from a hex string.
 * @description
 * Hex input values return the actual bytes value converted to a string. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToString } from '@polkadot/util';
 *
 * hexToU8a('0x68656c6c6f'); // hello
 * ```
 */
function hexToString(_value) {
  return (0, _toString.u8aToString)((0, _toU8a.hexToU8a)(_value));
}

},{"../u8a/toString.js":705,"./toU8a.js":639}],639:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hexToU8a = hexToU8a;

var _alphabet = require("./alphabet.js");

var _stripPrefix = require("./stripPrefix.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name hexToU8a
 * @summary Creates a Uint8Array object from a hex string.
 * @description
 * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.
 * @example
 * <BR>
 *
 * ```javascript
 * import { hexToU8a } from '@polkadot/util';
 *
 * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])
 * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])
 * ```
 */
function hexToU8a(_value, bitLength = -1) {
  if (!_value) {
    return new Uint8Array();
  }

  const value = (0, _stripPrefix.hexStripPrefix)(_value).toLowerCase();
  const valLength = value.length / 2;
  const endLength = Math.ceil(bitLength === -1 ? valLength : bitLength / 8);
  const result = new Uint8Array(endLength);
  const offset = endLength > valLength ? endLength - valLength : 0;
  const dv = new DataView(result.buffer, offset);
  const mod = (endLength - offset) % 2;
  const length = endLength - offset - mod;

  for (let i = 0; i < length; i += 2) {
    dv.setUint16(i, _alphabet.HEX_TO_U16[value.substr(i * 2, 4)]);
  }

  if (mod) {
    dv.setUint8(length, _alphabet.HEX_TO_U8[value.substr(value.length - 2, 2)]);
  }

  return result;
}

},{"./alphabet.js":630,"./stripPrefix.js":634}],640:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});

},{"./bundle.js":613,"./detectPackage.js":619}],641:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArray = isArray;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isArray
 * @summary Tests for a Array instance.
 */
function isArray(value) {
  return Array.isArray(value);
}

},{}],642:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAscii = isAscii;

var _toU8a = require("../u8a/toU8a.js");

var _hex = require("./hex.js");

var _string = require("./string.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const FORMAT = [9, 10, 13];
/** @internal */

function isAsciiByte(b) {
  return b < 127 && (b >= 32 || FORMAT.includes(b));
}

function isAsciiChar(s) {
  return isAsciiByte(s.charCodeAt(0));
}
/**
 * @name isAscii
 * @summary Tests if the input is printable ASCII
 * @description
 * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters
 */


function isAscii(value) {
  const isStringIn = (0, _string.isString)(value);

  if (value) {
    return isStringIn && !(0, _hex.isHex)(value) ? value.toString().split('').every(isAsciiChar) : (0, _toU8a.u8aToU8a)(value).every(isAsciiByte);
  }

  return isStringIn;
}

},{"../u8a/toU8a.js":706,"./hex.js":653,"./string.js":663}],643:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBigInt = isBigInt;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isBigInt
 * @summary Tests for a `BigInt` object instance.
 * @description
 * Checks to see if the input object is an instance of `BigInt`
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBigInt } from '@polkadot/util';
 *
 * console.log('isBigInt', isBigInt(123_456n)); // => true
 * ```
 */
function isBigInt(value) {
  return typeof value === 'bigint';
}

},{}],644:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBn = isBn;

var _bn = require("../bn/bn.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isBn
 * @summary Tests for a `BN` object instance.
 * @description
 * Checks to see if the input object is an instance of `BN` (bn.js).
 * @example
 * <BR>
 *
 * ```javascript
 * import BN from 'bn.js';
 * import { isBn } from '@polkadot/util';
 *
 * console.log('isBn', isBn(new BN(1))); // => true
 * ```
 */
function isBn(value) {
  return _bn.BN.isBN(value);
}

},{"../bn/bn.js":602}],645:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBoolean = isBoolean;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isBoolean
 * @summary Tests for a boolean value.
 * @description
 * Checks to see if the input value is a JavaScript boolean.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBoolean } from '@polkadot/util';
 *
 * isBoolean(false); // => true
 * ```
 */
function isBoolean(value) {
  return typeof value === 'boolean';
}

},{}],646:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isBuffer = isBuffer;

var _has = require("../has.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isBuffer
 * @summary Tests for a `Buffer` object instance.
 * @description
 * Checks to see if the input object is an instance of `Buffer`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isBuffer } from '@polkadot/util';
 *
 * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true
 * ```
 */
function isBuffer(value) {
  return _has.hasBuffer && Buffer.isBuffer(value);
}

}).call(this)}).call(this,{"isBuffer":require("../../../../../../../../opt/homebrew/lib/node_modules/browserify/node_modules/is-buffer/index.js")})
},{"../../../../../../../../opt/homebrew/lib/node_modules/browserify/node_modules/is-buffer/index.js":975,"../has.js":628}],647:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isChildClass = isChildClass;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isChildClass
 * @summary Tests if the child extends the parent Class
 * @description
 * Checks to see if the child Class extends the parent Class
 * @example
 * <BR>
 *
 * ```javascript
 * import { isChildClass } from '@polkadot/util';
 *
 * console.log('isChildClass', isChildClass(BN, BN); // => true
 * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false
 * ```
 */
function isChildClass(Parent, Child) {
  // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664
  return Child // eslint-disable-next-line no-prototype-builtins
  ? Parent === Child || Parent.isPrototypeOf(Child) : false;
}

},{}],648:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCodec = isCodec;

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const checkCodec = (0, _helpers.isOnObject)('toHex', 'toU8a');
const checkRegistry = (0, _helpers.isOnObject)('get');

function isCodec(value) {
  return checkCodec(value) && checkRegistry(value.registry);
}

},{"./helpers.js":652}],649:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isCompact = isCompact;

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const checker = (0, _helpers.isOnObject)('toBigInt', 'toBn', 'toNumber', 'unwrap');
/**
 * @name isCompact
 * @summary Tests for SCALE-Compact-like object instance.
 */

function isCompact(value) {
  return checker(value);
}

},{"./helpers.js":652}],650:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isError = isError;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isError
 * @summary Tests for a `Error` object instance.
 * @description
 * Checks to see if the input object is an instance of `Error`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isError } from '@polkadot/util';
 *
 * console.log('isError', isError(new Error('message'))); // => true
 * ```
 */
function isError(value) {
  return value instanceof Error;
}

},{}],651:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFunction = isFunction;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// eslint-disable-next-line @typescript-eslint/ban-types

/**
 * @name isFunction
 * @summary Tests for a `function`.
 * @description
 * Checks to see if the input value is a JavaScript function.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isFunction } from '@polkadot/util';
 *
 * isFunction(() => false); // => true
 * ```
 */
function isFunction(value) {
  return typeof value === 'function';
}

},{}],652:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isOn = isOn;
exports.isOnObject = isOnObject;

var _function = require("./function.js");

var _object = require("./object.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function isOn(...fns) {
  return value => ((0, _object.isObject)(value) || (0, _function.isFunction)(value)) && fns.every(f => (0, _function.isFunction)(value[f]));
}

function isOnObject(...fns) {
  return value => (0, _object.isObject)(value) && fns.every(f => (0, _function.isFunction)(value[f]));
}

},{"./function.js":651,"./object.js":660}],653:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.REGEX_HEX_PREFIXED = exports.REGEX_HEX_NOPREFIX = void 0;
exports.isHex = isHex;
// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
exports.REGEX_HEX_PREFIXED = REGEX_HEX_PREFIXED;
const REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
/**
 * @name isHex
 * @summary Tests for a hex string.
 * @description
 * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isHex } from '@polkadot/util';
 *
 * isHex('0x1234'); // => true
 * isHex('0x1234', 8); // => false
 * ```
 */

exports.REGEX_HEX_NOPREFIX = REGEX_HEX_NOPREFIX;

function isHex(value, bitLength = -1, ignoreLength) {
  return typeof value === 'string' && (value === '0x' || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
}

},{}],654:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "isArray", {
  enumerable: true,
  get: function () {
    return _array.isArray;
  }
});
Object.defineProperty(exports, "isAscii", {
  enumerable: true,
  get: function () {
    return _ascii.isAscii;
  }
});
Object.defineProperty(exports, "isBigInt", {
  enumerable: true,
  get: function () {
    return _bigInt.isBigInt;
  }
});
Object.defineProperty(exports, "isBn", {
  enumerable: true,
  get: function () {
    return _bn.isBn;
  }
});
Object.defineProperty(exports, "isBoolean", {
  enumerable: true,
  get: function () {
    return _boolean.isBoolean;
  }
});
Object.defineProperty(exports, "isBuffer", {
  enumerable: true,
  get: function () {
    return _buffer.isBuffer;
  }
});
Object.defineProperty(exports, "isChildClass", {
  enumerable: true,
  get: function () {
    return _childClass.isChildClass;
  }
});
Object.defineProperty(exports, "isCodec", {
  enumerable: true,
  get: function () {
    return _codec.isCodec;
  }
});
Object.defineProperty(exports, "isCompact", {
  enumerable: true,
  get: function () {
    return _compact.isCompact;
  }
});
Object.defineProperty(exports, "isError", {
  enumerable: true,
  get: function () {
    return _error.isError;
  }
});
Object.defineProperty(exports, "isFunction", {
  enumerable: true,
  get: function () {
    return _function.isFunction;
  }
});
Object.defineProperty(exports, "isHex", {
  enumerable: true,
  get: function () {
    return _hex.isHex;
  }
});
Object.defineProperty(exports, "isInstanceOf", {
  enumerable: true,
  get: function () {
    return _instanceOf.isInstanceOf;
  }
});
Object.defineProperty(exports, "isIp", {
  enumerable: true,
  get: function () {
    return _ip.isIp;
  }
});
Object.defineProperty(exports, "isJsonObject", {
  enumerable: true,
  get: function () {
    return _jsonObject.isJsonObject;
  }
});
Object.defineProperty(exports, "isNull", {
  enumerable: true,
  get: function () {
    return _null.isNull;
  }
});
Object.defineProperty(exports, "isNumber", {
  enumerable: true,
  get: function () {
    return _number.isNumber;
  }
});
Object.defineProperty(exports, "isObject", {
  enumerable: true,
  get: function () {
    return _object.isObject;
  }
});
Object.defineProperty(exports, "isObservable", {
  enumerable: true,
  get: function () {
    return _observable.isObservable;
  }
});
Object.defineProperty(exports, "isPromise", {
  enumerable: true,
  get: function () {
    return _promise.isPromise;
  }
});
Object.defineProperty(exports, "isString", {
  enumerable: true,
  get: function () {
    return _string.isString;
  }
});
Object.defineProperty(exports, "isTestChain", {
  enumerable: true,
  get: function () {
    return _testChain.isTestChain;
  }
});
Object.defineProperty(exports, "isToBigInt", {
  enumerable: true,
  get: function () {
    return _toBigInt.isToBigInt;
  }
});
Object.defineProperty(exports, "isToBn", {
  enumerable: true,
  get: function () {
    return _toBn.isToBn;
  }
});
Object.defineProperty(exports, "isU8a", {
  enumerable: true,
  get: function () {
    return _u8a.isU8a;
  }
});
Object.defineProperty(exports, "isUndefined", {
  enumerable: true,
  get: function () {
    return _undefined.isUndefined;
  }
});
Object.defineProperty(exports, "isUtf8", {
  enumerable: true,
  get: function () {
    return _utf.isUtf8;
  }
});
Object.defineProperty(exports, "isWasm", {
  enumerable: true,
  get: function () {
    return _wasm.isWasm;
  }
});

var _array = require("./array.js");

var _ascii = require("./ascii.js");

var _bigInt = require("./bigInt.js");

var _bn = require("./bn.js");

var _buffer = require("./buffer.js");

var _boolean = require("./boolean.js");

var _childClass = require("./childClass.js");

var _codec = require("./codec.js");

var _compact = require("./compact.js");

var _error = require("./error.js");

var _function = require("./function.js");

var _hex = require("./hex.js");

var _instanceOf = require("./instanceOf.js");

var _ip = require("./ip.js");

var _jsonObject = require("./jsonObject.js");

var _null = require("./null.js");

var _number = require("./number.js");

var _object = require("./object.js");

var _observable = require("./observable.js");

var _promise = require("./promise.js");

var _string = require("./string.js");

var _testChain = require("./testChain.js");

var _toBigInt = require("./toBigInt.js");

var _toBn = require("./toBn.js");

var _u8a = require("./u8a.js");

var _undefined = require("./undefined.js");

var _utf = require("./utf8.js");

var _wasm = require("./wasm.js");

},{"./array.js":641,"./ascii.js":642,"./bigInt.js":643,"./bn.js":644,"./boolean.js":645,"./buffer.js":646,"./childClass.js":647,"./codec.js":648,"./compact.js":649,"./error.js":650,"./function.js":651,"./hex.js":653,"./instanceOf.js":655,"./ip.js":656,"./jsonObject.js":657,"./null.js":658,"./number.js":659,"./object.js":660,"./observable.js":661,"./promise.js":662,"./string.js":663,"./testChain.js":664,"./toBigInt.js":665,"./toBn.js":666,"./u8a.js":667,"./undefined.js":668,"./utf8.js":669,"./wasm.js":670}],655:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInstanceOf = isInstanceOf;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isInstanceOf
 * @summary Tests for a instance of a class.
 * @description
 * Checks to see if the input value is an instance of the test class.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isInstanceOf } from '@polkadot/util';
 *
 * console.log('isInstanceOf', isInstanceOf(new Array(0), Array)); // => true
 * ```
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function isInstanceOf(value, clazz) {
  return value instanceof clazz;
}

},{}],656:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIp = isIp;

var _ipRegex = _interopRequireDefault(require("ip-regex"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isIp
 * @summary Tests if the value is a valid IP address
 * @description
 * Checks to see if the value is a valid IP address. Optionally check for either v4/v6
 * @example
 * <BR>
 *
 * ```javascript
 * import { isIp } from '@polkadot/util';
 *
 * isIp('192.168.0.1')); // => true
 * isIp('1:2:3:4:5:6:7:8'); // => true
 * isIp('192.168.0.1', 'v6')); // => false
 * isIp('1:2:3:4:5:6:7:8', 'v4'); // => false
 * ```
 */
function isIp(value, type) {
  if (type === 'v4') {
    return _ipRegex.default.v4({
      exact: true
    }).test(value);
  } else if (type === 'v6') {
    return _ipRegex.default.v6({
      exact: true
    }).test(value);
  }

  return (0, _ipRegex.default)({
    exact: true
  }).test(value);
}

},{"ip-regex":744}],657:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isJsonObject = isJsonObject;

var _stringify = require("../stringify.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isJsonObject
 * @summary Tests for a valid JSON `object`.
 * @description
 * Checks to see if the input value is a valid JSON object.
 * It returns false if the input is JSON parsable, but not an Javascript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isJsonObject } from '@polkadot/util';
 *
 * isJsonObject({}); // => true
 * isJsonObject({
 *  "Test": "1234",
 *  "NestedTest": {
 *   "Test": "5678"
 *  }
 * }); // => true
 * isJsonObject(1234); // JSON parsable, but not an object =>  false
 * isJsonObject(null); // JSON parsable, but not an object => false
 * isJsonObject('not an object'); // => false
 * ```
 */
function isJsonObject(value) {
  const str = typeof value !== 'string' ? (0, _stringify.stringify)(value) : value;

  try {
    const obj = JSON.parse(str);
    return typeof obj === 'object' && obj !== null;
  } catch (e) {
    return false;
  }
}

},{"../stringify.js":693}],658:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNull = isNull;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isNull
 * @summary Tests for a `null` values.
 * @description
 * Checks to see if the input value is `null`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNull } from '@polkadot/util';
 *
 * console.log('isNull', isNull(null)); // => true
 * ```
 */
function isNull(value) {
  return value === null;
}

},{}],659:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNumber = isNumber;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isNumber
 * @summary Tests for a JavaScript number.
 * @description
 * Checks to see if the input value is a valid number.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isNumber } from '@polkadot/util';
 *
 * console.log('isNumber', isNumber(1234)); // => true
 * ```
 */
function isNumber(value) {
  return typeof value === 'number';
}

},{}],660:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isObject = isObject;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isObject
 * @summary Tests for an `object`.
 * @description
 * Checks to see if the input value is a JavaScript object.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObject } from '@polkadot/util';
 *
 * isObject({}); // => true
 * isObject('something'); // => false
 * ```
 */
function isObject(value) {
  return !!value && typeof value === 'object';
}

},{}],661:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isObservable = void 0;

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isBObservable
 * @summary Tests for a `Observable` object instance.
 * @description
 * Checks to see if the input object is an instance of `BN` (bn.js).
 * @example
 * <BR>
 *
 * ```javascript
 * import { isObservable } from '@polkadot/util';
 *
 * console.log('isObservable', isObservable(...));
 * ```
 */
const isObservable = (0, _helpers.isOn)('next');
exports.isObservable = isObservable;

},{"./helpers.js":652}],662:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPromise = void 0;

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const isPromise = (0, _helpers.isOnObject)('catch', 'then');
exports.isPromise = isPromise;

},{"./helpers.js":652}],663:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isString = isString;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isString
 * @summary Tests for a string.
 * @description
 * Checks to see if the input value is a JavaScript string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isString } from '@polkadot/util';
 *
 * console.log('isString', isString('test')); // => true
 * ```
 */
function isString(value) {
  return typeof value === 'string' || value instanceof String;
}

},{}],664:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isTestChain = isTestChain;
// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const REGEX_DEV = /(Development|Local Testnet)$/;

function isTestChain(chain) {
  if (!chain) {
    return false;
  }

  return !!REGEX_DEV.test(chain.toString());
}

},{}],665:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isToBigInt = void 0;

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const isToBigInt = (0, _helpers.isOn)('toBigInt');
exports.isToBigInt = isToBigInt;

},{"./helpers.js":652}],666:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isToBn = void 0;

var _helpers = require("./helpers.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const isToBn = (0, _helpers.isOn)('toBn');
exports.isToBn = isToBn;

},{"./helpers.js":652}],667:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isU8a = isU8a;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isU8a
 * @summary Tests for a `Uint8Array` object instance.
 * @description
 * Checks to see if the input object is an instance of `Uint8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUint8Array } from '@polkadot/util';
 *
 * console.log('isU8a', isU8a([])); // => false
 * ```
 */
function isU8a(value) {
  return value instanceof Uint8Array;
}

},{}],668:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUndefined = isUndefined;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name isUndefined
 * @summary Tests for a `undefined` values.
 * @description
 * Checks to see if the input value is `undefined`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { isUndefined } from '@polkadot/util';
 *
 * console.log('isUndefined', isUndefined(void(0))); // => true
 * ```
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isUndefined(value) {
  return typeof value === 'undefined';
}

},{}],669:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUtf8 = isUtf8;

var _toU8a = require("../u8a/toU8a.js");

var _string = require("./string.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Adapted from https://github.com/JulienPalard/is_utf8/blob/master/is_utf8.c

/**
 * @name isUtf8
 * @summary Tests if the input is valid Utf8
 * @description
 * Checks to see if the input string or Uint8Array is valid Utf8
 */
function isUtf8(value) {
  if (!value) {
    return (0, _string.isString)(value);
  }

  const u8a = (0, _toU8a.u8aToU8a)(value);
  const len = u8a.length;
  let i = 0;

  while (i < len) {
    if (u8a[i] <= 0x7F)
      /* 00..7F */
      {
        i += 1;
      } else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF)
      /* C2..DF 80..BF */
      {
        if (i + 1 < len)
          /* Expect a 2nd byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF";
              // *faulty_bytes = 2;
              return false;
            }
          } else {
          // *message = "After a first byte between C2 and DF, expecting a 2nd byte.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 2;
      } else if (u8a[i] === 0xE0)
      /* E0 A0..BF 80..BF */
      {
        if (i + 2 < len)
          /* Expect a 2nd and 3rd byte */
          {
            if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte of E0, expecting a 2nd byte between A0 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of E0, expecting a 3nd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }
          } else {
          // *message = "After a first byte of E0, expecting two following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 3;
      } else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC)
      /* E1..EC 80..BF 80..BF */
      {
        if (i + 2 < len)
          /* Expect a 2nd and 3rd byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }
          } else {
          // *message = "After a first byte between E1 and EC, expecting two following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 3;
      } else if (u8a[i] === 0xED)
      /* ED 80..9F 80..BF */
      {
        if (i + 2 < len)
          /* Expect a 2nd and 3rd byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {
              // *message = "After a first byte of ED, expecting 2nd byte between 80 and 9F.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of ED, expecting 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }
          } else {
          // *message = "After a first byte of ED, expecting two following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 3;
      } else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF)
      /* EE..EF 80..BF 80..BF */
      {
        if (i + 2 < len)
          /* Expect a 2nd and 3rd byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte between EE and EF, expecting 2nd byte between 80 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte between EE and EF, expecting 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }
          } else {
          // *message = "After a first byte between EE and EF, two following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 3;
      } else if (u8a[i] === 0xF0)
      /* F0 90..BF 80..BF 80..BF */
      {
        if (i + 3 < len)
          /* Expect a 2nd, 3rd 3th byte */
          {
            if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte of F0, expecting 2nd byte between 90 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of F0, expecting 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }

            if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
              // *message = "After a first byte of F0, expecting 4th byte between 80 and BF.";
              // *faulty_bytes = 4;
              return false;
            }
          } else {
          // *message = "After a first byte of F0, expecting three following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 4;
      } else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3)
      /* F1..F3 80..BF 80..BF 80..BF */
      {
        if (i + 3 < len)
          /* Expect a 2nd, 3rd 3th byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
              // *message = "After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }

            if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
              // *message = "After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.";
              // *faulty_bytes = 4;
              return false;
            }
          } else {
          // *message = "After a first byte of F1, F2, or F3, expecting three following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 4;
      } else if (u8a[i] === 0xF4)
      /* F4 80..8F 80..BF 80..BF */
      {
        if (i + 3 < len)
          /* Expect a 2nd, 3rd 3th byte */
          {
            if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {
              // *message = "After a first byte of F4, expecting 2nd byte between 80 and 8F.";
              // *faulty_bytes = 2;
              return false;
            }

            if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
              // *message = "After a first byte of F4, expecting 3rd byte between 80 and BF.";
              // *faulty_bytes = 3;
              return false;
            }

            if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
              // *message = "After a first byte of F4, expecting 4th byte between 80 and BF.";
              // *faulty_bytes = 4;
              return false;
            }
          } else {
          // *message = "After a first byte of F4, expecting three following bytes.";
          // *faulty_bytes = 1;
          return false;
        }

        i += 4;
      } else {
      // *message = "Expecting bytes in the following ranges: 00..7F C2..F4.";
      // *faulty_bytes = 1;
      return false;
    }
  }

  return true;
}

},{"../u8a/toU8a.js":706,"./string.js":663}],670:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isWasm = isWasm;

var _eq = require("../u8a/eq.js");

var _u8a = require("./u8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const WASM_MAGIC = new Uint8Array([0, 97, 115, 109]); // \0asm

/**
 * @name isWasm
 * @summary Tests if the input has a WASM header
 * @description
 * Checks to see if the input Uint8Array contains a valid WASM header
 */

function isWasm(value) {
  return (0, _u8a.isU8a)(value) && (0, _eq.u8aEq)(value.subarray(0, 4), WASM_MAGIC);
}

},{"../u8a/eq.js":697,"./u8a.js":667}],671:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lazyMethod = lazyMethod;
exports.lazyMethods = lazyMethods;

var _undefined = require("./is/undefined.js");

// Copyright 2017-2021 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
function lazyMethod(result, item, creator, getName) {
  const name = getName ? getName(item) : item.toString();
  let value;
  Object.defineProperty(result, name, {
    // This allows for re-configuration with the embedded defineProperty below
    // and ensures that on tested browsers and Node, it _will_ be redefined
    // and thus short-circuited for future access
    configurable: true,
    enumerable: true,
    // Use a function here, we don't want to capture the outer this, i.e.
    // don't use arrow functions in this context since we have a this inside
    get: function () {
      // This check should _always_ be false and unneeded, since we override
      // with a value below ... however we ensure we are quire vigilant against
      // all environment failures, so we are rather be safe than sorry
      if ((0, _undefined.isUndefined)(value)) {
        value = creator(item);

        try {
          // re-define the property as a value, next time around this
          // getter will only return the computed value
          Object.defineProperty(this, name, {
            value
          });
        } catch {// ignore any errors, since this _should_ not happen due to
          // the "configurable" property above. But if it ever does
          // from here-on we will be the cached value the next time
          // around (with a very slight dip in performance)
        }
      }

      return value;
    }
  });
}

function lazyMethods(result, items, creator, getName) {
  for (let i = 0; i < items.length; i++) {
    lazyMethod(result, items[i], creator, getName);
  }

  return result;
}

},{"./is/undefined.js":668}],672:[function(require,module,exports){
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = logger;
exports.loggerFormat = loggerFormat;

var _formatDate = require("./format/formatDate.js");

var _bn = require("./is/bn.js");

var _buffer = require("./is/buffer.js");

var _function = require("./is/function.js");

var _object = require("./is/object.js");

var _u8a = require("./is/u8a.js");

var _toHex = require("./u8a/toHex.js");

var _toU8a = require("./u8a/toU8a.js");

var _has = require("./has.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const logTo = {
  debug: 'log',
  error: 'error',
  log: 'log',
  warn: 'warn'
};

function formatOther(value) {
  if (value && (0, _object.isObject)(value) && value.constructor === Object) {
    const result = {};

    for (const k of Object.keys(value)) {
      result[k] = loggerFormat(value[k]);
    }

    return result;
  }

  return value;
}

function loggerFormat(value) {
  if (Array.isArray(value)) {
    return value.map(loggerFormat);
  } else if ((0, _bn.isBn)(value)) {
    return value.toString();
  } else if ((0, _u8a.isU8a)(value) || (0, _buffer.isBuffer)(value)) {
    return (0, _toHex.u8aToHex)((0, _toU8a.u8aToU8a)(value));
  }

  return formatOther(value);
}

function formatWithLength(maxLength) {
  return v => {
    if (maxLength <= 0) {
      return v;
    }

    const r = `${v}`;
    return r.length < maxLength ? v : `${r.substr(0, maxLength)} ...`;
  };
}

function apply(log, type, values, maxSize = -1) {
  if (values.length === 1 && (0, _function.isFunction)(values[0])) {
    const fnResult = values[0]();
    return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
  }

  console[logTo[log]]((0, _formatDate.formatDate)(new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
}

function noop() {// noop
}

function isDebugOn(e, type) {
  return !!e && (e === '*' || type === e || e.endsWith('*') && type.startsWith(e.slice(0, -1)));
}

function isDebugOff(e, type) {
  return !!e && e.startsWith('-') && (type === e.slice(1) || e.endsWith('*') && type.startsWith(e.slice(1, -1)));
}

function getDebugFlag(env, type) {
  let flag = false;

  for (const e of env) {
    if (isDebugOn(e, type)) {
      flag = true;
    } else if (isDebugOff(e, type)) {
      flag = false;
    }
  }

  return flag;
}

function parseEnv(type) {
  const env = (_has.hasProcess ? process : {}).env || {};
  const maxSize = parseInt(env.DEBUG_MAX || '-1', 10);
  return [getDebugFlag((env.DEBUG || '').toLowerCase().split(','), type), isNaN(maxSize) ? -1 : maxSize];
}
/**
 * @name Logger
 * @summary Creates a consistent log interface for messages
 * @description
 * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.
 * @example
 * <BR>
 *
 * ```javascript
 * import { logger } from '@polkadot';
 *
 * const l = logger('test');
 * ```
 */


function logger(_type) {
  const type = `${_type.toUpperCase()}:`.padStart(16);
  const [isDebug, maxSize] = parseEnv(_type.toLowerCase());
  return {
    debug: isDebug ? (...values) => apply('debug', type, values, maxSize) : noop,
    error: (...values) => apply('error', type, values),
    log: (...values) => apply('log', type, values),
    noop,
    warn: (...values) => apply('warn', type, values)
  };
}

}).call(this)}).call(this,require('_process'))
},{"./format/formatDate.js":622,"./has.js":628,"./is/bn.js":644,"./is/buffer.js":646,"./is/function.js":651,"./is/object.js":660,"./is/u8a.js":667,"./u8a/toHex.js":704,"./u8a/toU8a.js":706,"_process":976}],673:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.memoize = memoize;

var _undefined = require("./is/undefined.js");

var _stringify = require("./stringify.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function defaultGetId() {
  return 'none';
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function memoize(fn, {
  getInstanceId = defaultGetId
} = {}) {
  const cache = {};

  const memoized = (...args) => {
    const stringParams = (0, _stringify.stringify)(args);
    const instanceId = getInstanceId();

    if (!cache[instanceId]) {
      cache[instanceId] = {};
    }

    if ((0, _undefined.isUndefined)(cache[instanceId][stringParams])) {
      cache[instanceId][stringParams] = fn(...args);
    }

    return cache[instanceId][stringParams];
  };

  memoized.unmemoize = (...args) => {
    const stringParams = (0, _stringify.stringify)(args);
    const instanceId = getInstanceId();

    if (cache[instanceId] && !(0, _undefined.isUndefined)(cache[instanceId][stringParams])) {
      delete cache[instanceId][stringParams];
    }
  };

  return memoized;
}

},{"./is/undefined.js":668,"./stringify.js":693}],674:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "numberToHex", {
  enumerable: true,
  get: function () {
    return _toHex.numberToHex;
  }
});
Object.defineProperty(exports, "numberToU8a", {
  enumerable: true,
  get: function () {
    return _toU8a.numberToU8a;
  }
});

var _toHex = require("./toHex.js");

var _toU8a = require("./toU8a.js");

},{"./toHex.js":675,"./toU8a.js":676}],675:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numberToHex = numberToHex;

var _fixLength = require("../hex/fixLength.js");

var _null = require("../is/null.js");

var _undefined = require("../is/undefined.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name numberToHex
 * @summary Creates a hex value from a number.
 * @description
 * `null`/`undefined`/`NaN` inputs returns an empty `0x` result. `number` input values return the actual bytes value converted to a `hex`. With `bitLength` set, it converts the number to the equivalent size.
 * @example
 * <BR>
 *
 * ```javascript
 * import { numberToHex } from '@polkadot/util';
 *
 * numberToHex(0x1234); // => '0x1234'
 * numberToHex(0x1234, 32); // => 0x00001234
 * ```
 */
function numberToHex(value, bitLength = -1) {
  if ((0, _undefined.isUndefined)(value) || (0, _null.isNull)(value) || isNaN(value)) {
    return '0x';
  }

  const hex = value.toString(16);
  return (0, _fixLength.hexFixLength)(hex.length % 2 ? `0${hex}` : hex, bitLength, true);
}

},{"../hex/fixLength.js":631,"../is/null.js":658,"../is/undefined.js":668}],676:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.numberToU8a = numberToU8a;

var _toU8a = require("../hex/toU8a.js");

var _null = require("../is/null.js");

var _undefined = require("../is/undefined.js");

var _toHex = require("./toHex.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name numberToU8a
 * @summary Creates a Uint8Array object from a number.
 * @description
 * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `number` input values return the actual bytes value converted to a `Uint8Array`. With `bitLength`, it converts the value to the equivalent size.
 * @example
 * <BR>
 *
 * ```javascript
 * import { numberToU8a } from '@polkadot/util';
 *
 * numberToU8a(0x1234); // => [0x12, 0x34]
 * ```
 */
function numberToU8a(value, bitLength = -1) {
  if ((0, _undefined.isUndefined)(value) || (0, _null.isNull)(value) || isNaN(value)) {
    return new Uint8Array();
  }

  return (0, _toU8a.hexToU8a)((0, _toHex.numberToHex)(value, bitLength));
}

},{"../hex/toU8a.js":639,"../is/null.js":658,"../is/undefined.js":668,"./toHex.js":675}],677:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectClear = objectClear;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectClear
 * @summary Removes all the keys from the input object
 */
function objectClear(value) {
  const keys = Object.keys(value);

  for (let i = 0; i < keys.length; i++) {
    delete value[keys[i]];
  }

  return value;
}

},{}],678:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectCopy = objectCopy;

var _spread = require("./spread.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectCopy
 * @summary Creates a shallow clone of the input object
 */
function objectCopy(source) {
  return (0, _spread.objectSpread)({}, source);
}

},{"./spread.js":683}],679:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectEntries = objectEntries;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectEntries
 * @summary A version of Object.entries that is typed for TS
 */
function objectEntries(obj) {
  return Object.entries(obj);
}

},{}],680:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "objectClear", {
  enumerable: true,
  get: function () {
    return _clear.objectClear;
  }
});
Object.defineProperty(exports, "objectCopy", {
  enumerable: true,
  get: function () {
    return _copy.objectCopy;
  }
});
Object.defineProperty(exports, "objectEntries", {
  enumerable: true,
  get: function () {
    return _entries.objectEntries;
  }
});
Object.defineProperty(exports, "objectKeys", {
  enumerable: true,
  get: function () {
    return _keys.objectKeys;
  }
});
Object.defineProperty(exports, "objectProperties", {
  enumerable: true,
  get: function () {
    return _property.objectProperties;
  }
});
Object.defineProperty(exports, "objectProperty", {
  enumerable: true,
  get: function () {
    return _property.objectProperty;
  }
});
Object.defineProperty(exports, "objectSpread", {
  enumerable: true,
  get: function () {
    return _spread.objectSpread;
  }
});
Object.defineProperty(exports, "objectValues", {
  enumerable: true,
  get: function () {
    return _values.objectValues;
  }
});

var _clear = require("./clear.js");

var _copy = require("./copy.js");

var _entries = require("./entries.js");

var _keys = require("./keys.js");

var _property = require("./property.js");

var _spread = require("./spread.js");

var _values = require("./values.js");

},{"./clear.js":677,"./copy.js":678,"./entries.js":679,"./keys.js":681,"./property.js":682,"./spread.js":683,"./values.js":684}],681:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectKeys = objectKeys;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectKeys
 * @summary A version of Object.keys that is typed for TS
 */
function objectKeys(value) {
  return Object.keys(value);
}

},{}],682:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectProperties = objectProperties;
exports.objectProperty = objectProperty;

var _undefined = require("../is/undefined.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectProperty
 * @summary Assign a get property on the input object
 */
function objectProperty(that, key, getter) {
  // We use both the hasOwnProperty as well as isUndefined checks here, since it may be set
  // in inherited classes and _Own_ properties refers to the class only, not only parents
  if (!Object.prototype.hasOwnProperty.call(that, key) && (0, _undefined.isUndefined)(that[key])) {
    Object.defineProperty(that, key, {
      enumerable: true,
      // Since we don't use any additional this internally, we can use arrow (unlike lazy)
      // Unlike in lazy, we always call into the upper function, i.e. this method
      // does not cache old values (it is expected to be used for dynamic values)
      get: () => getter(key)
    });
  }
}
/**
 * @name objectProperties
 * @summary Assign get properties on the input object
 */


function objectProperties(that, keys, getter) {
  for (let i = 0; i < keys.length; i++) {
    objectProperty(that, keys[i], k => getter(k, i));
  }
}

},{"../is/undefined.js":668}],683:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectSpread = objectSpread;

var _keys = require("./keys.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectSpread
 * @summary Concats all sources into the destination
 */
function objectSpread(dest, ...sources) {
  for (let i = 0; i < sources.length; i++) {
    const src = sources[i];

    if (src) {
      const keys = (0, _keys.objectKeys)(src);

      for (let j = 0; j < keys.length; j++) {
        const key = keys[j];
        dest[key] = src[key];
      }
    }
  }

  return dest;
}

},{"./keys.js":681}],684:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.objectValues = objectValues;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name objectValues
 * @summary A version of Object.values that is typed for TS
 */
function objectValues(obj) {
  return Object.values(obj);
}

},{}],685:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/util',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],686:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promisify = promisify;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name promisify
 * @summary Wraps an async callback into a `Promise`
 * @description
 * Wraps the supplied async function `fn` that has a standard JS callback `(error: Error, result: any)` into a `Promise`, passing the supplied parameters. When `error` is set, the Promise is rejected, else the Promise resolves with the `result` value.
 * @example
 * <BR>
 *
 * ```javascript
 * const { promisify } from '@polkadot/util';
 *
 * await promisify(null, ((a, cb) => cb(null, a), true); // resolves with `true`
 * await promisify(null, (cb) => cb(new Error('error!'))); // rejects with `error!`
 * ```
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function promisify(self, fn, ...params) {
  return new Promise((resolve, reject) => {
    fn.apply(self, params.concat((error, result) => {
      if (error) {
        reject(error);
      } else {
        resolve(result);
      }
    }));
  });
}

},{}],687:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringPascalCase = exports.stringCamelCase = void 0;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Inspired from https://stackoverflow.com/a/2970667
//
// this is not as optimal as the original answer (we split into multiple),
// however it does pass the tests (which the original doesn't) and it is still
// a 10+x improvement over the original camelcase npm package (at running)
//
// original: 20.88 μs/op
//     this:  2.86 μs/op
//
// Caveat of this: only Ascii, but acceptable for the intended usecase
function converter(fn) {
  const format = (w, i) => fn(w[0], i) + w.slice(1);

  return value => value.toString() // replace all seperators (including consequtive) with spaces
  .replace(/[-_., ]+/g, ' ') // we don't want leading or trailing spaces
  .trim() // split into words
  .split(' ') // apply the formatting
  .map((w, i) => format(w.toUpperCase() === w // all full uppercase + letters are changed to lowercase
  ? w.toLowerCase() // all consecutive capitals + letters are changed to lowercase
  // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder
  : w.replace(/^[A-Z0-9]{2,}[^a-z]/, w => w.slice(0, w.length - 1).toLowerCase() + w.slice(-1).toUpperCase()), i)) // combine into a single word
  .join('');
}
/**
 * @name stringCamelCase
 * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase
 */


const stringCamelCase = converter((w, i) => i ? w.toUpperCase() : w.toLowerCase());
/**
 * @name stringPascalCase
 * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase
 */

exports.stringCamelCase = stringCamelCase;
const stringPascalCase = converter(w => w.toUpperCase());
exports.stringPascalCase = stringPascalCase;

},{}],688:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "stringCamelCase", {
  enumerable: true,
  get: function () {
    return _camelCase.stringCamelCase;
  }
});
Object.defineProperty(exports, "stringLowerFirst", {
  enumerable: true,
  get: function () {
    return _lowerFirst.stringLowerFirst;
  }
});
Object.defineProperty(exports, "stringPascalCase", {
  enumerable: true,
  get: function () {
    return _camelCase.stringPascalCase;
  }
});
Object.defineProperty(exports, "stringShorten", {
  enumerable: true,
  get: function () {
    return _shorten.stringShorten;
  }
});
Object.defineProperty(exports, "stringToHex", {
  enumerable: true,
  get: function () {
    return _toHex.stringToHex;
  }
});
Object.defineProperty(exports, "stringToU8a", {
  enumerable: true,
  get: function () {
    return _toU8a.stringToU8a;
  }
});
Object.defineProperty(exports, "stringUpperFirst", {
  enumerable: true,
  get: function () {
    return _lowerFirst.stringUpperFirst;
  }
});

var _camelCase = require("./camelCase.js");

var _lowerFirst = require("./lowerFirst.js");

var _shorten = require("./shorten.js");

var _toHex = require("./toHex.js");

var _toU8a = require("./toU8a.js");

},{"./camelCase.js":687,"./lowerFirst.js":689,"./shorten.js":690,"./toHex.js":691,"./toU8a.js":692}],689:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringUpperFirst = exports.stringLowerFirst = void 0;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
function converter(fn) {
  return value => value ? fn(value[0]) + value.slice(1) : '';
}
/**
 * @name stringLowerFirst
 * @summary Lowercase the first letter of a string
 * @description
 * Lowercase the first letter of a string
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringLowerFirst } from '@polkadot/util';
 *
 * stringLowerFirst('ABC'); // => 'aBC'
 * ```
 */


const stringLowerFirst = converter(s => s.toLowerCase());
/**
 * @name stringUpperFirst
 * @summary Uppercase the first letter of a string
 * @description
 * Lowercase the first letter of a string
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringUpperFirst } from '@polkadot/util';
 *
 * stringUpperFirst('abc'); // => 'Abc'
 * ```
 */

exports.stringLowerFirst = stringLowerFirst;
const stringUpperFirst = converter(s => s.toUpperCase());
exports.stringUpperFirst = stringUpperFirst;

},{}],690:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringShorten = stringShorten;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name stringShorten
 * @summary Returns a string with maximum length
 * @description
 * Checks the string against the `prefixLength`, if longer than double this, shortens it by placing `..` in the middle of it
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringShorten } from '@polkadot/util';
 *
 * stringShorten('1234567890', 2); // => 12..90
 * ```
 */
function stringShorten(value, prefixLength = 6) {
  return value.length <= 2 + 2 * prefixLength ? value.toString() : `${value.substr(0, prefixLength)}…${value.slice(-prefixLength)}`;
}

},{}],691:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringToHex = stringToHex;

var _toHex = require("../u8a/toHex.js");

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name stringToHex
 * @summary Creates a hex string from a utf-8 string
 * @description
 * String input values return the actual encoded hex value.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToHex } from '@polkadot/util';
 *
 * stringToU8a('hello'); // 0x68656c6c6f
 * ```
 */
function stringToHex(value) {
  return (0, _toHex.u8aToHex)((0, _toU8a.stringToU8a)(value));
}

},{"../u8a/toHex.js":704,"./toU8a.js":692}],692:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringToU8a = stringToU8a;

var _xTextencoder = require("@polkadot/x-textencoder");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const encoder = new _xTextencoder.TextEncoder();
/**
 * @name stringToU8a
 * @summary Creates a Uint8Array object from a utf-8 string.
 * @description
 * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.
 * @example
 * <BR>
 *
 * ```javascript
 * import { stringToU8a } from '@polkadot/util';
 *
 * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]
 * ```
 */
// eslint-disable-next-line @typescript-eslint/ban-types

function stringToU8a(value) {
  return value ? encoder.encode(value.toString()) : new Uint8Array();
}

},{"@polkadot/x-textencoder":735}],693:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringify = stringify;

var _bigInt = require("./is/bigInt.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function replacer(_, v) {
  return (0, _bigInt.isBigInt)(v) ? v.toString() : v;
}
/**
 * @name stringify
 * @summary Performs a JSON.stringify, with BigInt handling
 * @description A wrapper for JSON.stringify that handles BigInt values transparently, converting them to string. No differences from the native JSON.stringify function otherwise.
 */


function stringify(value, space) {
  return JSON.stringify(value, replacer, space);
}

},{"./is/bigInt.js":643}],694:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aCmp = u8aCmp;

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aCmp
 * @summary Compares two Uint8Arrays for sorting.
 * @description
 * For `UInt8Array` (or hex string) input values returning -1, 0 or +1
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aCmp } from '@polkadot/util';
 *
 * u8aCmp(new Uint8Array([0x67, 0x65]), new Uint8Array([0x68, 0x65])); // -1
 * u8aCmp(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // 0
 * u8aCmp(new Uint8Array([0x69, 0x65]), new Uint8Array([0x68, 0x65])); // +1
 * ```
 */
function u8aCmp(a, b) {
  const u8aa = (0, _toU8a.u8aToU8a)(a);
  const u8ab = (0, _toU8a.u8aToU8a)(b);
  let i = 0;

  while (true) {
    const overA = i >= u8aa.length;
    const overB = i >= u8ab.length;

    if (overA && overB) {
      // both ends reached
      return 0;
    } else if (overA) {
      // a has no more data, b has data
      return -1;
    } else if (overB) {
      // b has no more data, a has data
      return 1;
    } else if (u8aa[i] !== u8ab[i]) {
      // the number in this index doesn't match
      // (we don't use u8aa[i] - u8ab[i] since that doesn't match with localeCompare)
      return u8aa[i] > u8ab[i] ? 1 : -1;
    }

    i++;
  }
}

},{"./toU8a.js":706}],695:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aConcat = u8aConcat;

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aConcat
 * @summary Creates a concatenated Uint8Array from the inputs.
 * @description
 * Concatenates the input arrays into a single `UInt8Array`.
 * @example
 * <BR>
 *
 * ```javascript
 * import { { u8aConcat } from '@polkadot/util';
 *
 * u8aConcat(
 *   new Uint8Array([1, 2, 3]),
 *   new Uint8Array([4, 5, 6])
 * ); // [1, 2, 3, 4, 5, 6]
 * ```
 */
function u8aConcat(...list) {
  let length = 0;
  let offset = 0;
  const u8as = new Array(list.length);

  for (let i = 0; i < list.length; i++) {
    u8as[i] = (0, _toU8a.u8aToU8a)(list[i]);
    length += u8as[i].length;
  }

  const result = new Uint8Array(length);

  for (let i = 0; i < u8as.length; i++) {
    result.set(u8as[i], offset);
    offset += u8as[i].length;
  }

  return result;
}

},{"./toU8a.js":706}],696:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aEmpty = u8aEmpty;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aEmpty
 * @summary Tests for a `Uint8Array` for emptyness
 * @description
 * Checks to see if the input `Uint8Array` has zero length or contains all 0 values.
 */
function u8aEmpty(value) {
  for (let i = 0; i < value.length; i++) {
    if (value[i]) {
      return false;
    }
  }

  return true;
}

},{}],697:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aEq = u8aEq;

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aEq
 * @summary Compares two Uint8Arrays for equality.
 * @description
 * For `UInt8Array` (or hex string) input values true if there is a match.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aEq } from '@polkadot/util';
 *
 * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
 * ```
 */
function u8aEq(a, b) {
  const u8aa = (0, _toU8a.u8aToU8a)(a);
  const u8ab = (0, _toU8a.u8aToU8a)(b);

  if (u8aa.length === u8ab.length) {
    const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
    const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
    const mod = u8aa.length % 4;
    const length = u8aa.length - mod;

    for (let i = 0; i < length; i += 4) {
      if (dvA.getUint32(i) !== dvB.getUint32(i)) {
        return false;
      }
    }

    for (let i = length; i < u8aa.length; i++) {
      if (u8aa[i] !== u8ab[i]) {
        return false;
      }
    }

    return true;
  }

  return false;
}

},{"./toU8a.js":706}],698:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aFixLength = u8aFixLength;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aFixLength
 * @summary Shifts a Uint8Array to a specific bitLength
 * @description
 * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aFixLength } from '@polkadot/util';
 *
 * u8aFixLength('0x12') // => 0x12
 * u8aFixLength('0x12', 16) // => 0x0012
 * u8aFixLength('0x1234', 8) // => 0x12
 * ```
 */
function u8aFixLength(value, bitLength = -1, atStart = false) {
  const byteLength = Math.ceil(bitLength / 8);

  if (bitLength === -1 || value.length === byteLength) {
    return value;
  } else if (value.length > byteLength) {
    return value.subarray(0, byteLength);
  }

  const result = new Uint8Array(byteLength);
  result.set(value, atStart ? 0 : byteLength - value.length);
  return result;
}

},{}],699:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "U8A_WRAP_ETHEREUM", {
  enumerable: true,
  get: function () {
    return _wrap.U8A_WRAP_ETHEREUM;
  }
});
Object.defineProperty(exports, "U8A_WRAP_POSTFIX", {
  enumerable: true,
  get: function () {
    return _wrap.U8A_WRAP_POSTFIX;
  }
});
Object.defineProperty(exports, "U8A_WRAP_PREFIX", {
  enumerable: true,
  get: function () {
    return _wrap.U8A_WRAP_PREFIX;
  }
});
Object.defineProperty(exports, "u8aCmp", {
  enumerable: true,
  get: function () {
    return _cmp.u8aCmp;
  }
});
Object.defineProperty(exports, "u8aConcat", {
  enumerable: true,
  get: function () {
    return _concat.u8aConcat;
  }
});
Object.defineProperty(exports, "u8aEmpty", {
  enumerable: true,
  get: function () {
    return _empty.u8aEmpty;
  }
});
Object.defineProperty(exports, "u8aEq", {
  enumerable: true,
  get: function () {
    return _eq.u8aEq;
  }
});
Object.defineProperty(exports, "u8aFixLength", {
  enumerable: true,
  get: function () {
    return _fixLength.u8aFixLength;
  }
});
Object.defineProperty(exports, "u8aIsWrapped", {
  enumerable: true,
  get: function () {
    return _wrap.u8aIsWrapped;
  }
});
Object.defineProperty(exports, "u8aSorted", {
  enumerable: true,
  get: function () {
    return _sorted.u8aSorted;
  }
});
Object.defineProperty(exports, "u8aToBigInt", {
  enumerable: true,
  get: function () {
    return _toBigInt.u8aToBigInt;
  }
});
Object.defineProperty(exports, "u8aToBn", {
  enumerable: true,
  get: function () {
    return _toBn.u8aToBn;
  }
});
Object.defineProperty(exports, "u8aToBuffer", {
  enumerable: true,
  get: function () {
    return _toBuffer.u8aToBuffer;
  }
});
Object.defineProperty(exports, "u8aToHex", {
  enumerable: true,
  get: function () {
    return _toHex.u8aToHex;
  }
});
Object.defineProperty(exports, "u8aToString", {
  enumerable: true,
  get: function () {
    return _toString.u8aToString;
  }
});
Object.defineProperty(exports, "u8aToU8a", {
  enumerable: true,
  get: function () {
    return _toU8a.u8aToU8a;
  }
});
Object.defineProperty(exports, "u8aUnwrapBytes", {
  enumerable: true,
  get: function () {
    return _wrap.u8aUnwrapBytes;
  }
});
Object.defineProperty(exports, "u8aWrapBytes", {
  enumerable: true,
  get: function () {
    return _wrap.u8aWrapBytes;
  }
});

var _cmp = require("./cmp.js");

var _concat = require("./concat.js");

var _empty = require("./empty.js");

var _eq = require("./eq.js");

var _fixLength = require("./fixLength.js");

var _sorted = require("./sorted.js");

var _toBigInt = require("./toBigInt.js");

var _toBn = require("./toBn.js");

var _toBuffer = require("./toBuffer.js");

var _toHex = require("./toHex.js");

var _toString = require("./toString.js");

var _toU8a = require("./toU8a.js");

var _wrap = require("./wrap.js");

},{"./cmp.js":694,"./concat.js":695,"./empty.js":696,"./eq.js":697,"./fixLength.js":698,"./sorted.js":700,"./toBigInt.js":701,"./toBn.js":702,"./toBuffer.js":703,"./toHex.js":704,"./toString.js":705,"./toU8a.js":706,"./wrap.js":707}],700:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aSorted = u8aSorted;

var _cmp = require("./cmp.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aSorted
 * @summary Sorts an array of Uint8Arrays
 * @description
 * For input `UInt8Array[]` return the sorted result
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aSorted} from '@polkadot/util';
 *
 * u8aSorted([new Uint8Array([0x69]), new Uint8Array([0x68])]); // [0x68, 0x69]
 * ```
 */
function u8aSorted(u8as) {
  return u8as.sort(_cmp.u8aCmp);
}

},{"./cmp.js":694}],701:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aToBigInt = u8aToBigInt;

var _xBigint = require("@polkadot/x-bigint");

var _consts = require("../bi/consts.js");

var _spread = require("../object/spread.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const U8_MAX = (0, _xBigint.BigInt)(256);
const U16_MAX = (0, _xBigint.BigInt)(256 * 256);

function xor(input) {
  const result = new Uint8Array(input.length);
  const dvI = new DataView(input.buffer, input.byteOffset);
  const dvO = new DataView(result.buffer);
  const mod = input.length % 2;
  const length = input.length - mod;

  for (let i = 0; i < length; i += 2) {
    dvO.setUint16(i, dvI.getUint16(i) ^ 0xffff);
  }

  if (mod) {
    dvO.setUint8(length, dvI.getUint8(length) ^ 0xff);
  }

  return result;
}

function toBigInt(input) {
  const dvI = new DataView(input.buffer, input.byteOffset);
  const mod = input.length % 2;
  const length = input.length - mod;
  let result = (0, _xBigint.BigInt)(0);

  for (let i = 0; i < length; i += 2) {
    result = result * U16_MAX + (0, _xBigint.BigInt)(dvI.getUint16(i));
  }

  if (mod) {
    result = result * U8_MAX + (0, _xBigint.BigInt)(dvI.getUint8(length));
  }

  return result;
}
/**
 * @name u8aToBigInt
 * @summary Creates a BigInt from a Uint8Array object.
 */


function u8aToBigInt(value, options = {}) {
  if (!value || !value.length) {
    return (0, _xBigint.BigInt)(0);
  }

  const {
    isLe,
    isNegative
  } = (0, _spread.objectSpread)({
    isLe: true,
    isNegative: false
  }, options);
  const u8a = isLe ? value.reverse() : value;
  return isNegative ? toBigInt(xor(u8a)) * -_consts._1n - _consts._1n : toBigInt(u8a);
}

},{"../bi/consts.js":595,"../object/spread.js":683,"@polkadot/x-bigint":723}],702:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aToBn = u8aToBn;

var _toBn = require("../hex/toBn.js");

var _toHex = require("./toHex.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEFAULT_OPTS = {
  isLe: true,
  isNegative: false
};
/**
 * @name u8aToBn
 * @summary Creates a BN from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.
 * @param value The value to convert
 * @param options Options to pass while converting
 * @param options.isLe Convert using Little Endian
 * @param options.isNegative Convert using two's complement
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToBn } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */

function u8aToBn(value, options = DEFAULT_OPTS) {
  return (0, _toBn.hexToBn)((0, _toHex.u8aToHex)(value), options);
}

},{"../hex/toBn.js":636,"./toHex.js":704}],703:[function(require,module,exports){
(function (Buffer){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aToBuffer = u8aToBuffer;

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aToBuffer
 * @summary Creates a Buffer object from a hex string.
 * @description
 * `null` inputs returns an empty `Buffer` result. `UInt8Array` input values return the actual bytes value converted to a `Buffer`. Anything that is not a `UInt8Array` throws an error.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToBuffer } from '@polkadot/util';
 *
 * console.log('Buffer', u8aToBuffer('0x123480001f'));
 * ```
 */
function u8aToBuffer(value) {
  return Buffer.from(value || []);
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":973}],704:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aToHex = u8aToHex;

var _alphabet = require("../hex/alphabet.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/** @internal */
function hex(value) {
  const mod = value.length % 2;
  const length = value.length - mod;
  const dv = new DataView(value.buffer, value.byteOffset);
  let result = '';

  for (let i = 0; i < length; i += 2) {
    result += _alphabet.U16_TO_HEX[dv.getUint16(i)];
  }

  if (mod) {
    result += _alphabet.U8_TO_HEX[dv.getUint8(length)];
  }

  return result;
}
/**
 * @name u8aToHex
 * @summary Creates a hex string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToHex } from '@polkadot/util';
 *
 * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
 * ```
 */


function u8aToHex(value, bitLength = -1, isPrefixed = true) {
  const length = Math.ceil(bitLength / 8);
  return `${isPrefixed ? '0x' : ''}${!value || !value.length ? '' : length > 0 && value.length > length ? `${hex(value.subarray(0, length / 2))}…${hex(value.subarray(value.length - length / 2))}` : hex(value)}`;
}

},{"../hex/alphabet.js":630}],705:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aToString = u8aToString;

var _xTextdecoder = require("@polkadot/x-textdecoder");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const decoder = new _xTextdecoder.TextDecoder('utf-8');
/**
 * @name u8aToString
 * @summary Creates a utf-8 string from a Uint8Array object.
 * @description
 * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToString } from '@polkadot/util';
 *
 * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello
 * ```
 */

function u8aToString(value) {
  return !(value !== null && value !== void 0 && value.length) ? '' : decoder.decode(value);
}

},{"@polkadot/x-textdecoder":732}],706:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.u8aToU8a = u8aToU8a;

var _toU8a = require("../hex/toU8a.js");

var _buffer = require("../is/buffer.js");

var _hex = require("../is/hex.js");

var _u8a = require("../is/u8a.js");

var _toU8a2 = require("../string/toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0

/**
 * @name u8aToU8a
 * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.
 * @description
 * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.
 * @example
 * <BR>
 *
 * ```javascript
 * import { u8aToU8a } from '@polkadot/util';
 *
 * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])
 * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])
 * ```
 */
function u8aToU8a(value) {
  return !value ? new Uint8Array() : Array.isArray(value) || (0, _buffer.isBuffer)(value) ? new Uint8Array(value) : (0, _u8a.isU8a)(value) ? value : (0, _hex.isHex)(value) ? (0, _toU8a.hexToU8a)(value) : (0, _toU8a2.stringToU8a)(value);
}

},{"../hex/toU8a.js":639,"../is/buffer.js":646,"../is/hex.js":653,"../is/u8a.js":667,"../string/toU8a.js":692}],707:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.U8A_WRAP_PREFIX = exports.U8A_WRAP_POSTFIX = exports.U8A_WRAP_ETHEREUM = void 0;
exports.u8aIsWrapped = u8aIsWrapped;
exports.u8aUnwrapBytes = u8aUnwrapBytes;
exports.u8aWrapBytes = u8aWrapBytes;

var _concat = require("./concat.js");

var _eq = require("./eq.js");

var _toU8a = require("./toU8a.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Originally from https://github.com/polkadot-js/extension/pull/743
const U8A_WRAP_ETHEREUM = (0, _toU8a.u8aToU8a)('\x19Ethereum Signed Message:\n');
exports.U8A_WRAP_ETHEREUM = U8A_WRAP_ETHEREUM;
const U8A_WRAP_PREFIX = (0, _toU8a.u8aToU8a)('<Bytes>');
exports.U8A_WRAP_PREFIX = U8A_WRAP_PREFIX;
const U8A_WRAP_POSTFIX = (0, _toU8a.u8aToU8a)('</Bytes>');
exports.U8A_WRAP_POSTFIX = U8A_WRAP_POSTFIX;
const WRAP_LEN = U8A_WRAP_PREFIX.length + U8A_WRAP_POSTFIX.length;

function u8aIsWrapped(u8a, withEthereum) {
  return u8a.length >= WRAP_LEN && (0, _eq.u8aEq)(u8a.subarray(0, U8A_WRAP_PREFIX.length), U8A_WRAP_PREFIX) && (0, _eq.u8aEq)(u8a.slice(-U8A_WRAP_POSTFIX.length), U8A_WRAP_POSTFIX) || withEthereum && u8a.length >= U8A_WRAP_ETHEREUM.length && (0, _eq.u8aEq)(u8a.subarray(0, U8A_WRAP_ETHEREUM.length), U8A_WRAP_ETHEREUM);
}

function u8aUnwrapBytes(bytes) {
  const u8a = (0, _toU8a.u8aToU8a)(bytes); // we don't want to unwrap Ethereum-style wraps

  return u8aIsWrapped(u8a, false) ? u8a.subarray(U8A_WRAP_PREFIX.length, u8a.length - U8A_WRAP_POSTFIX.length) : u8a;
}

function u8aWrapBytes(bytes) {
  const u8a = (0, _toU8a.u8aToU8a)(bytes); // if Ethereum-wrapping, we don't add our wrapping bytes

  return u8aIsWrapped(u8a, true) ? u8a : (0, _concat.u8aConcat)(U8A_WRAP_PREFIX, u8a, U8A_WRAP_POSTFIX);
}

},{"./concat.js":695,"./eq.js":697,"./toU8a.js":706}],708:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectPackage = detectPackage;

var _xGlobal = require("@polkadot/x-global");

var _function = require("./is/function.js");

var _string = require("./is/string.js");

var _assert = require("./assert.js");

// Copyright 2017-2021 @polkadot/util authors & contributors
// SPDX-License-Identifier: Apache-2.0
const DEDUPE = 'Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:';
/** @internal */

function getEntry(name) {
  const _global = _xGlobal.xglobal;

  if (!_global.__polkadotjs) {
    _global.__polkadotjs = {};
  }

  if (!_global.__polkadotjs[name]) {
    _global.__polkadotjs[name] = [];
  }

  return _global.__polkadotjs[name];
}

function getVersionLength(all) {
  let length = 0;

  for (const {
    version
  } of all) {
    length = Math.max(length, version.length);
  }

  return length;
}
/** @internal */


function flattenInfos(all) {
  const verLength = getVersionLength(all);

  const stringify = ({
    name,
    version
  }) => `\t${version.padEnd(verLength)}\t${name}`;

  return all.map(stringify).join('\n');
}
/** @internal */


function flattenVersions(entry) {
  const toPath = version => (0, _string.isString)(version) ? {
    version
  } : version;

  const all = entry.map(toPath);
  const verLength = getVersionLength(all);

  const stringify = ({
    path,
    version
  }) => `\t${version.padEnd(verLength)}\t${!path || path.length < 5 ? '<unknown>' : path}`;

  return all.map(stringify).join('\n');
}
/** @internal */


function getPath(pathOrFn) {
  if ((0, _function.isFunction)(pathOrFn)) {
    try {
      return pathOrFn() || '';
    } catch (error) {
      return '';
    }
  }

  return pathOrFn || '';
}
/**
 * @name detectPackage
 * @summary Checks that a specific package is only imported once
 * @description A `@polkadot/*` version detection utility, checking for one occurence of a package in addition to checking for ddependency versions.
 */


function detectPackage({
  name,
  version
}, pathOrFn, deps = []) {
  (0, _assert.assert)(name.startsWith('@polkadot'), () => `Invalid package descriptor ${name}`);
  const entry = getEntry(name);
  entry.push({
    path: getPath(pathOrFn),
    version
  });

  if (entry.length !== 1) {
    console.warn(`${name} has multiple versions, ensure that there is only one installed.\n${DEDUPE}\n${flattenVersions(entry)}`);
  } else {
    const mismatches = deps.filter(d => d && d.version !== version);

    if (mismatches.length) {
      console.warn(`${name} requires direct dependencies exactly matching version ${version}.\n${DEDUPE}\n${flattenInfos(mismatches)}`);
    }
  }
}

},{"./assert.js":594,"./is/function.js":651,"./is/string.js":663,"@polkadot/x-global":728}],709:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asmJsInit = void 0;
// Copyright 2019-2021 @polkadot/wasm-crypto-asmjs authors & contributors
// SPDX-License-Identifier: Apache-2.0
const asmJsInit = null;
exports.asmJsInit = asmJsInit;

},{}],710:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/wasm-crypto-asmjs authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/wasm-crypto-asmjs',
  version: '4.5.1'
};
exports.packageInfo = packageInfo;

},{}],711:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.base64Decode = base64Decode;
// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

function base64Decode(data) {
  const bytes = [];
  let byte = 0;
  let bits = 0;

  for (let i = 0; i < data.length && data[i] !== '='; i++) {
    // each character represents 6 bits
    byte = byte << 6 | chars.indexOf(data[i]); // each byte needs to contain 8 bits

    if ((bits += 6) >= 8) {
      bytes.push(byte >>> (bits -= 8) & 0xff);
    }
  }

  return Uint8Array.from(bytes);
}

},{}],712:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sizeUncompressed = exports.sizeCompressed = exports.bytes = void 0;

var _bytes2 = require("./cjs/bytes.js");

// Copyright 2019-2021 @polkadot/wasm-crypto-wasm authors & contributors
// SPDX-License-Identifier: Apache-2.0
const bytes = _bytes2.bytes;
exports.bytes = bytes;
const sizeCompressed = _bytes2.sizeCompressed;
exports.sizeCompressed = sizeCompressed;
const sizeUncompressed = _bytes2.sizeUncompressed;
exports.sizeUncompressed = sizeUncompressed;

},{"./cjs/bytes.js":713}],713:[function(require,module,exports){
// Copyright 2019-2021 @polkadot/wasm-crypto-wasm authors & contributors
// SPDX-License-Identifier: Apache-2.0

// Generated as part of the build, do not edit

const sizeCompressed = 171007;
const sizeUncompressed = 349686;
const bytes = '';

module.exports = { bytes, sizeCompressed, sizeUncompressed };

},{}],714:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wasmBytes = void 0;

var _base = require("./base64.js");

var _bytes = require("./bytes.js");

var _fflate = require("./fflate.js");

// Copyright 2019-2021 @polkadot/wasm-crypto-wasm authors & contributors
// SPDX-License-Identifier: Apache-2.0
const wasmBytes = (0, _fflate.unzlibSync)((0, _base.base64Decode)(_bytes.bytes), new Uint8Array(_bytes.sizeUncompressed));
exports.wasmBytes = wasmBytes;

},{"./base64.js":711,"./bytes.js":712,"./fflate.js":715}],715:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.unzlibSync = unzlibSync;
// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// MIT License
//
// Copyright (c) 2020 Arjun Barrett
//
// Copied from https://github.com/101arrowz/fflate/blob/73c737941ec89d85cdf0ad39ee6f26c5fdc95fd7/src/index.ts
// This only contains the unzlibSync function, no compression, no async, no workers
//
// These 2 issues are addressed as a short-term, stop-gap solution
//   - https://github.com/polkadot-js/api/issues/2963
//   - https://github.com/101arrowz/fflate/issues/17
//
// Only tweaks make here are some TS adjustments (we use strict null checks), the code is otherwise as-is with
// only the single required function provided (compression is still being done in the build with fflate)

/* eslint-disable */
// inflate state
// aliases for shorter compressed code (most minifers don't do this)
const u8 = Uint8Array,
      u16 = Uint16Array,
      u32 = Uint32Array; // code length index map

const clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]); // fixed length extra bits

const fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
/* unused */
0, 0,
/* impossible */
0]); // fixed distance extra bits
// see fleb note

const fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
/* unused */
0, 0]); // get base, reverse index map from extra bits

const freb = (eb, start) => {
  const b = new u16(31);

  for (let i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  } // numbers here are at max 18 bits


  const r = new u32(b[30]);

  for (let i = 1; i < 30; ++i) {
    for (let j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }

  return [b, r];
};

const [fl, revfl] = freb(fleb, 2); // we can ignore the fact that the other numbers are wrong; they never happen anyway

fl[28] = 258, revfl[258] = 28;
const [fd] = freb(fdeb, 0); // map of value to reverse (assuming 16 bits)

const rev = new u16(32768);

for (let i = 0; i < 32768; ++i) {
  // reverse table algorithm from SO
  let x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
  x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
  x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
  rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
} // create huffman tree from u8 "map": index -> code length for code index
// mb (max bits) must be at most 15
// TODO: optimize/split up?


const hMap = (cd, mb, r) => {
  const s = cd.length; // index

  let i = 0; // u16 "map": index -> # of codes with bit length = index

  const l = new u16(mb); // length of cd must be 288 (total # of codes)

  for (; i < s; ++i) ++l[cd[i] - 1]; // u16 "map": index -> minimum code for bit length = index


  const le = new u16(mb);

  for (i = 0; i < mb; ++i) {
    le[i] = le[i - 1] + l[i - 1] << 1;
  }

  let co;

  if (r) {
    // u16 "map": index -> number of actual bits, symbol for code
    co = new u16(1 << mb); // bits to remove for reverser

    const rvb = 15 - mb;

    for (i = 0; i < s; ++i) {
      // ignore 0 lengths
      if (cd[i]) {
        // num encoding both symbol and bits read
        const sv = i << 4 | cd[i]; // free bits

        const r = mb - cd[i]; // start value

        let v = le[cd[i] - 1]++ << r; // m is end value

        for (const m = v | (1 << r) - 1; v <= m; ++v) {
          // every 16 bit value starting with the code yields the same result
          co[rev[v] >>> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);

    for (i = 0; i < s; ++i) co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
  }

  return co;
}; // fixed length tree


const flt = new u8(288);

for (let i = 0; i < 144; ++i) flt[i] = 8;

for (let i = 144; i < 256; ++i) flt[i] = 9;

for (let i = 256; i < 280; ++i) flt[i] = 7;

for (let i = 280; i < 288; ++i) flt[i] = 8; // fixed distance tree


const fdt = new u8(32);

for (let i = 0; i < 32; ++i) fdt[i] = 5; // fixed length map


const flrm = hMap(flt, 9, 1); // fixed distance map

const fdrm = hMap(fdt, 5, 1); // read d, starting at bit p and mask with m

const bits = (d, p, m) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
}; // read d, starting at bit p continuing for at least 16 bits


const bits16 = (d, p) => {
  const o = p >>> 3;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
}; // get end of byte


const shft = p => (p >>> 3) + (p & 7 && 1); // typed array slice - allows garbage collector to free original reference,
// while being more compatible than .slice


const slc = (v, s, e) => {
  if (s == null || s < 0) s = 0;
  if (e == null || e > v.length) e = v.length; // can't use .constructor in case user-supplied

  const n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
  n.set(v.subarray(s, e));
  return n;
}; // find max of array


const max = a => {
  let m = a[0];

  for (let i = 1; i < a.length; ++i) {
    if (a[i] > m) m = a[i];
  }

  return m;
}; // expands raw DEFLATE data


const inflt = (dat, buf, st) => {
  const noSt = !st || st.i;
  if (!st) st = {}; // source length

  const sl = dat.length; // have to estimate size

  const noBuf = !buf || !noSt; // Assumes roughly 33% compression ratio average

  if (!buf) buf = new u8(sl * 3); // ensure buffer can fit at least l elements

  const cbuf = l => {
    let bl = buf.length; // need to increase size to fit

    if (l > bl) {
      // Double or set to necessary, whichever is greater
      const nbuf = new u8(Math.max(bl << 1, l));
      nbuf.set(buf);
      buf = nbuf;
    }
  }; //  last chunk         bitpos           bytes


  let final = st.f || 0,
      pos = st.p || 0,
      bt = st.b || 0,
      lm = st.l,
      dm = st.d,
      lbt = st.m,
      dbt = st.n;
  if (final && !lm) return buf; // total bits

  const tbts = sl << 3;

  do {
    if (!lm) {
      // BFINAL - this is only 1 when last chunk is next
      st.f = final = bits(dat, pos, 1); // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman

      const type = bits(dat, pos + 1, 3);
      pos += 3;

      if (!type) {
        // go to end of byte boundary
        const s = shft(pos) + 4,
              l = dat[s - 4] | dat[s - 3] << 8,
              t = s + l;

        if (t > sl) {
          if (noSt) throw 'unexpected EOF';
          break;
        } // ensure size


        if (noBuf) cbuf(bt + l); // Copy over uncompressed data

        buf.set(dat.subarray(s, t), bt); // Get new bitpos, update byte count

        st.b = bt += l, st.p = pos = t << 3;
        continue;
      } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;else if (type == 2) {
        //  literal                            lengths
        const hLit = bits(dat, pos, 31) + 257,
              hcLen = bits(dat, pos + 10, 15) + 4;
        const tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14; // length+distance tree

        const ldt = new u8(tl); // code length tree

        const clt = new u8(19);

        for (let i = 0; i < hcLen; ++i) {
          // use index map to get real code
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }

        pos += hcLen * 3; // code lengths bits

        const clb = max(clt),
              clbmsk = (1 << clb) - 1;
        if (!noSt && pos + tl * (clb + 7) > tbts) break; // code lengths map

        const clm = hMap(clt, clb, 1);

        for (let i = 0; i < tl;) {
          const r = clm[bits(dat, pos, clbmsk)]; // bits read

          pos += r & 15; // symbol

          const s = r >>> 4; // code length to copy

          if (s < 16) {
            ldt[i++] = s;
          } else {
            //  copy   count
            let c = 0,
                n = 0;
            if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;

            while (n--) ldt[i++] = c;
          }
        } //    length tree                 distance tree


        const lt = ldt.subarray(0, hLit),
              dt = ldt.subarray(hLit); // max length bits

        lbt = max(lt); // max dist bits

        dbt = max(dt);
        lm = hMap(lt, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else throw 'invalid block type';

      if (pos > tbts) throw 'unexpected EOF';
    } // Make sure the buffer can hold this + the largest possible addition
    // maximum chunk size (practically, theoretically infinite) is 2^17;


    if (noBuf) cbuf(bt + 131072);
    const lms = (1 << lbt) - 1,
          dms = (1 << dbt) - 1;
    const mxa = lbt + dbt + 18;

    while (noSt || pos + mxa < tbts) {
      // bits read, code
      const c = lm[bits16(dat, pos) & lms],
            sym = c >>> 4;
      pos += c & 15;
      if (pos > tbts) throw 'unexpected EOF';
      if (!c) throw 'invalid length/literal';
      if (sym < 256) buf[bt++] = sym;else if (sym == 256) {
        lm = undefined;
        break;
      } else {
        let add = sym - 254; // no extra bits needed if less

        if (sym > 264) {
          // index
          const i = sym - 257,
                b = fleb[i];
          add = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        } // dist


        const d = dm[bits16(dat, pos) & dms],
              dsym = d >>> 4;
        if (!d) throw 'invalid distance';
        pos += d & 15;
        let dt = fd[dsym];

        if (dsym > 3) {
          const b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }

        if (pos > tbts) throw 'unexpected EOF';
        if (noBuf) cbuf(bt + 131072);
        const end = bt + add;

        for (; bt < end; bt += 4) {
          buf[bt] = buf[bt - dt];
          buf[bt + 1] = buf[bt + 1 - dt];
          buf[bt + 2] = buf[bt + 2 - dt];
          buf[bt + 3] = buf[bt + 3 - dt];
        }

        bt = end;
      }
    }

    st.l = lm, st.p = pos, st.b = bt;
    if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);

  return bt == buf.length ? buf : slc(buf, 0, bt);
}; // zlib valid


const zlv = d => {
  if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw 'invalid zlib data';
  if (d[1] & 32) throw 'invalid zlib data: preset dictionaries not supported';
};
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */


function unzlibSync(data, out) {
  return inflt((zlv(data), data.subarray(2, -4)), out);
}

},{}],716:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/wasm-crypto-wasm authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/wasm-crypto-wasm',
  version: '4.5.1'
};
exports.packageInfo = packageInfo;

},{}],717:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allocString = allocString;
exports.allocU8a = allocU8a;
exports.getInt32 = getInt32;
exports.getString = getString;
exports.getU8a = getU8a;
exports.getUint8 = getUint8;
exports.getWasm = getWasm;
exports.initWasm = initWasm;
exports.resultString = resultString;
exports.resultU8a = resultU8a;
exports.withWasm = withWasm;

var _util = require("@polkadot/util");

// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable @typescript-eslint/no-non-null-assertion */
let wasm = null;
let cachegetInt32 = null;
let cachegetUint8 = null;

async function initWasm(wasmBytes, asmFn, wbg) {
  try {
    (0, _util.assert)(typeof WebAssembly !== 'undefined' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');
    const source = await WebAssembly.instantiate(wasmBytes, {
      wbg
    });
    wasm = source.instance.exports;
  } catch (error) {
    // if we have a valid supplied asm.js, return that
    if (asmFn) {
      wasm = asmFn(wbg);
    } else {
      console.error('FATAL: Unable to initialize @polkadot/wasm-crypto');
      console.error(error);
      wasm = null;
    }
  }
}

function withWasm(fn) {
  return (...params) => {
    (0, _util.assert)(wasm, 'The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');
    return fn(wasm, ...params);
  };
}

function getWasm() {
  return wasm;
}

function getInt32() {
  if (cachegetInt32 === null || cachegetInt32.buffer !== wasm.memory.buffer) {
    cachegetInt32 = new Int32Array(wasm.memory.buffer);
  }

  return cachegetInt32;
}

function getUint8() {
  if (cachegetUint8 === null || cachegetUint8.buffer !== wasm.memory.buffer) {
    cachegetUint8 = new Uint8Array(wasm.memory.buffer);
  }

  return cachegetUint8;
}

function getU8a(ptr, len) {
  return getUint8().subarray(ptr / 1, ptr / 1 + len);
}

function getString(ptr, len) {
  return (0, _util.u8aToString)(getU8a(ptr, len));
}

function allocU8a(arg) {
  const ptr = wasm.__wbindgen_malloc(arg.length * 1);

  getUint8().set(arg, ptr / 1);
  return [ptr, arg.length];
}

function allocString(arg) {
  return allocU8a((0, _util.stringToU8a)(arg));
}

function resultU8a() {
  const r0 = getInt32()[8 / 4 + 0];
  const r1 = getInt32()[8 / 4 + 1];
  const ret = getU8a(r0, r1).slice();

  wasm.__wbindgen_free(r0, r1 * 1);

  return ret;
}

function resultString() {
  return (0, _util.u8aToString)(resultU8a());
}

},{"@polkadot/util":640}],718:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hmacSha512 = exports.hmacSha256 = exports.ed25519Verify = exports.ed25519Sign = exports.ed25519KeypairFromSeed = exports.blake2b = exports.bip39Validate = exports.bip39ToSeed = exports.bip39ToMiniSecret = exports.bip39ToEntropy = exports.bip39Generate = void 0;
exports.isReady = isReady;
exports.keccak512 = exports.keccak256 = void 0;
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});
exports.vrfVerify = exports.vrfSign = exports.twox = exports.sr25519Verify = exports.sr25519Sign = exports.sr25519KeypairFromSeed = exports.sr25519DerivePublicSoft = exports.sr25519DeriveKeypairSoft = exports.sr25519DeriveKeypairHard = exports.sr25519Agree = exports.sha512 = exports.sha256 = exports.secp256k1Sign = exports.secp256k1Recover = exports.secp256k1FromSeed = exports.secp256k1Expand = exports.secp256k1Compress = exports.scrypt = exports.pbkdf2 = void 0;
exports.waitReady = waitReady;

var _wasmCryptoAsmjs = require("@polkadot/wasm-crypto-asmjs");

var _wasmCryptoWasm = require("@polkadot/wasm-crypto-wasm");

var _bridge = require("./bridge.js");

var imports = _interopRequireWildcard(require("./imports.js"));

var _packageInfo = require("./packageInfo.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const wasmPromise = (0, _bridge.initWasm)(_wasmCryptoWasm.wasmBytes, _wasmCryptoAsmjs.asmJsInit, imports).catch(() => null);
const bip39Generate = (0, _bridge.withWasm)((wasm, words) => {
  wasm.ext_bip39_generate(8, words);
  return (0, _bridge.resultString)();
});
exports.bip39Generate = bip39Generate;
const bip39ToEntropy = (0, _bridge.withWasm)((wasm, phrase) => {
  wasm.ext_bip39_to_entropy(8, ...(0, _bridge.allocString)(phrase));
  return (0, _bridge.resultU8a)();
});
exports.bip39ToEntropy = bip39ToEntropy;
const bip39ToMiniSecret = (0, _bridge.withWasm)((wasm, phrase, password) => {
  wasm.ext_bip39_to_mini_secret(8, ...(0, _bridge.allocString)(phrase), ...(0, _bridge.allocString)(password));
  return (0, _bridge.resultU8a)();
});
exports.bip39ToMiniSecret = bip39ToMiniSecret;
const bip39ToSeed = (0, _bridge.withWasm)((wasm, phrase, password) => {
  wasm.ext_bip39_to_seed(8, ...(0, _bridge.allocString)(phrase), ...(0, _bridge.allocString)(password));
  return (0, _bridge.resultU8a)();
});
exports.bip39ToSeed = bip39ToSeed;
const bip39Validate = (0, _bridge.withWasm)((wasm, phrase) => {
  const ret = wasm.ext_bip39_validate(...(0, _bridge.allocString)(phrase));
  return ret !== 0;
});
exports.bip39Validate = bip39Validate;
const ed25519KeypairFromSeed = (0, _bridge.withWasm)((wasm, seed) => {
  wasm.ext_ed_from_seed(8, ...(0, _bridge.allocU8a)(seed));
  return (0, _bridge.resultU8a)();
});
exports.ed25519KeypairFromSeed = ed25519KeypairFromSeed;
const ed25519Sign = (0, _bridge.withWasm)((wasm, pubkey, seckey, message) => {
  wasm.ext_ed_sign(8, ...(0, _bridge.allocU8a)(pubkey), ...(0, _bridge.allocU8a)(seckey), ...(0, _bridge.allocU8a)(message));
  return (0, _bridge.resultU8a)();
});
exports.ed25519Sign = ed25519Sign;
const ed25519Verify = (0, _bridge.withWasm)((wasm, signature, message, pubkey) => {
  const ret = wasm.ext_ed_verify(...(0, _bridge.allocU8a)(signature), ...(0, _bridge.allocU8a)(message), ...(0, _bridge.allocU8a)(pubkey));
  return ret !== 0;
});
exports.ed25519Verify = ed25519Verify;
const secp256k1FromSeed = (0, _bridge.withWasm)((wasm, seckey) => {
  wasm.ext_secp_from_seed(8, ...(0, _bridge.allocU8a)(seckey));
  return (0, _bridge.resultU8a)();
});
exports.secp256k1FromSeed = secp256k1FromSeed;
const secp256k1Compress = (0, _bridge.withWasm)((wasm, pubkey) => {
  wasm.ext_secp_pub_compress(8, ...(0, _bridge.allocU8a)(pubkey));
  return (0, _bridge.resultU8a)();
});
exports.secp256k1Compress = secp256k1Compress;
const secp256k1Expand = (0, _bridge.withWasm)((wasm, pubkey) => {
  wasm.ext_secp_pub_expand(8, ...(0, _bridge.allocU8a)(pubkey));
  return (0, _bridge.resultU8a)();
});
exports.secp256k1Expand = secp256k1Expand;
const secp256k1Recover = (0, _bridge.withWasm)((wasm, msgHash, sig, recovery) => {
  wasm.ext_secp_recover(8, ...(0, _bridge.allocU8a)(msgHash), ...(0, _bridge.allocU8a)(sig), recovery);
  return (0, _bridge.resultU8a)();
});
exports.secp256k1Recover = secp256k1Recover;
const secp256k1Sign = (0, _bridge.withWasm)((wasm, msgHash, seckey) => {
  wasm.ext_secp_sign(8, ...(0, _bridge.allocU8a)(msgHash), ...(0, _bridge.allocU8a)(seckey));
  return (0, _bridge.resultU8a)();
});
exports.secp256k1Sign = secp256k1Sign;
const sr25519DeriveKeypairHard = (0, _bridge.withWasm)((wasm, pair, cc) => {
  wasm.ext_sr_derive_keypair_hard(8, ...(0, _bridge.allocU8a)(pair), ...(0, _bridge.allocU8a)(cc));
  return (0, _bridge.resultU8a)();
});
exports.sr25519DeriveKeypairHard = sr25519DeriveKeypairHard;
const sr25519DeriveKeypairSoft = (0, _bridge.withWasm)((wasm, pair, cc) => {
  wasm.ext_sr_derive_keypair_soft(8, ...(0, _bridge.allocU8a)(pair), ...(0, _bridge.allocU8a)(cc));
  return (0, _bridge.resultU8a)();
});
exports.sr25519DeriveKeypairSoft = sr25519DeriveKeypairSoft;
const sr25519DerivePublicSoft = (0, _bridge.withWasm)((wasm, pubkey, cc) => {
  wasm.ext_sr_derive_public_soft(8, ...(0, _bridge.allocU8a)(pubkey), ...(0, _bridge.allocU8a)(cc));
  return (0, _bridge.resultU8a)();
});
exports.sr25519DerivePublicSoft = sr25519DerivePublicSoft;
const sr25519KeypairFromSeed = (0, _bridge.withWasm)((wasm, seed) => {
  wasm.ext_sr_from_seed(8, ...(0, _bridge.allocU8a)(seed));
  return (0, _bridge.resultU8a)();
});
exports.sr25519KeypairFromSeed = sr25519KeypairFromSeed;
const sr25519Sign = (0, _bridge.withWasm)((wasm, pubkey, secret, message) => {
  wasm.ext_sr_sign(8, ...(0, _bridge.allocU8a)(pubkey), ...(0, _bridge.allocU8a)(secret), ...(0, _bridge.allocU8a)(message));
  return (0, _bridge.resultU8a)();
});
exports.sr25519Sign = sr25519Sign;
const sr25519Verify = (0, _bridge.withWasm)((wasm, signature, message, pubkey) => {
  const ret = wasm.ext_sr_verify(...(0, _bridge.allocU8a)(signature), ...(0, _bridge.allocU8a)(message), ...(0, _bridge.allocU8a)(pubkey));
  return ret !== 0;
});
exports.sr25519Verify = sr25519Verify;
const sr25519Agree = (0, _bridge.withWasm)((wasm, pubkey, secret) => {
  wasm.ext_sr_agree(8, ...(0, _bridge.allocU8a)(pubkey), ...(0, _bridge.allocU8a)(secret));
  return (0, _bridge.resultU8a)();
});
exports.sr25519Agree = sr25519Agree;
const vrfSign = (0, _bridge.withWasm)((wasm, secret, context, message, extra) => {
  wasm.ext_vrf_sign(8, ...(0, _bridge.allocU8a)(secret), ...(0, _bridge.allocU8a)(context), ...(0, _bridge.allocU8a)(message), ...(0, _bridge.allocU8a)(extra));
  return (0, _bridge.resultU8a)();
});
exports.vrfSign = vrfSign;
const vrfVerify = (0, _bridge.withWasm)((wasm, pubkey, context, message, extra, outAndProof) => {
  const ret = wasm.ext_vrf_verify(...(0, _bridge.allocU8a)(pubkey), ...(0, _bridge.allocU8a)(context), ...(0, _bridge.allocU8a)(message), ...(0, _bridge.allocU8a)(extra), ...(0, _bridge.allocU8a)(outAndProof));
  return ret !== 0;
});
exports.vrfVerify = vrfVerify;
const blake2b = (0, _bridge.withWasm)((wasm, data, key, size) => {
  wasm.ext_blake2b(8, ...(0, _bridge.allocU8a)(data), ...(0, _bridge.allocU8a)(key), size);
  return (0, _bridge.resultU8a)();
});
exports.blake2b = blake2b;
const hmacSha256 = (0, _bridge.withWasm)((wasm, key, data) => {
  wasm.ext_hmac_sha256(8, ...(0, _bridge.allocU8a)(key), ...(0, _bridge.allocU8a)(data));
  return (0, _bridge.resultU8a)();
});
exports.hmacSha256 = hmacSha256;
const hmacSha512 = (0, _bridge.withWasm)((wasm, key, data) => {
  wasm.ext_hmac_sha512(8, ...(0, _bridge.allocU8a)(key), ...(0, _bridge.allocU8a)(data));
  return (0, _bridge.resultU8a)();
});
exports.hmacSha512 = hmacSha512;
const keccak256 = (0, _bridge.withWasm)((wasm, data) => {
  wasm.ext_keccak256(8, ...(0, _bridge.allocU8a)(data));
  return (0, _bridge.resultU8a)();
});
exports.keccak256 = keccak256;
const keccak512 = (0, _bridge.withWasm)((wasm, data) => {
  wasm.ext_keccak512(8, ...(0, _bridge.allocU8a)(data));
  return (0, _bridge.resultU8a)();
});
exports.keccak512 = keccak512;
const pbkdf2 = (0, _bridge.withWasm)((wasm, data, salt, rounds) => {
  wasm.ext_pbkdf2(8, ...(0, _bridge.allocU8a)(data), ...(0, _bridge.allocU8a)(salt), rounds);
  return (0, _bridge.resultU8a)();
});
exports.pbkdf2 = pbkdf2;
const scrypt = (0, _bridge.withWasm)((wasm, password, salt, log2n, r, p) => {
  wasm.ext_scrypt(8, ...(0, _bridge.allocU8a)(password), ...(0, _bridge.allocU8a)(salt), log2n, r, p);
  return (0, _bridge.resultU8a)();
});
exports.scrypt = scrypt;
const sha256 = (0, _bridge.withWasm)((wasm, data) => {
  wasm.ext_sha256(8, ...(0, _bridge.allocU8a)(data));
  return (0, _bridge.resultU8a)();
});
exports.sha256 = sha256;
const sha512 = (0, _bridge.withWasm)((wasm, data) => {
  wasm.ext_sha512(8, ...(0, _bridge.allocU8a)(data));
  return (0, _bridge.resultU8a)();
});
exports.sha512 = sha512;
const twox = (0, _bridge.withWasm)((wasm, data, rounds) => {
  wasm.ext_twox(8, ...(0, _bridge.allocU8a)(data), rounds);
  return (0, _bridge.resultU8a)();
});
exports.twox = twox;

function isReady() {
  return !!(0, _bridge.getWasm)();
}

function waitReady() {
  return wasmPromise.then(() => isReady());
}

},{"./bridge.js":717,"./imports.js":720,"./packageInfo.js":722,"@polkadot/wasm-crypto-asmjs":709,"@polkadot/wasm-crypto-wasm":714}],719:[function(require,module,exports){
(function (__dirname){(function (){
"use strict";

var _util = require("@polkadot/util");

var _packageInfo = require("@polkadot/wasm-crypto-asmjs/packageInfo");

var _packageInfo2 = require("@polkadot/wasm-crypto-wasm/packageInfo");

var _packageInfo3 = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _util.detectPackage)(_packageInfo3.packageInfo, typeof __dirname !== 'undefined' && __dirname, [_packageInfo.packageInfo, _packageInfo2.packageInfo]);

}).call(this)}).call(this,"/node_modules/@polkadot/wasm-crypto")
},{"./packageInfo.js":722,"@polkadot/util":640,"@polkadot/wasm-crypto-asmjs/packageInfo":710,"@polkadot/wasm-crypto-wasm/packageInfo":716}],720:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__wbg_crypto_968f1772287e2df0 = __wbg_crypto_968f1772287e2df0;
exports.__wbg_getRandomValues_a3d34b4fee3c2869 = __wbg_getRandomValues_a3d34b4fee3c2869;
exports.__wbg_getRandomValues_f5e14ab7ac8e995d = __wbg_getRandomValues_f5e14ab7ac8e995d;
exports.__wbg_randomFillSync_d5bd2d655fdf256a = __wbg_randomFillSync_d5bd2d655fdf256a;
exports.__wbg_require_604837428532a733 = __wbg_require_604837428532a733;
exports.__wbg_self_1b7a39e3a92c949c = __wbg_self_1b7a39e3a92c949c;
exports.__wbindgen_is_undefined = __wbindgen_is_undefined;
exports.__wbindgen_object_drop_ref = __wbindgen_object_drop_ref;
exports.__wbindgen_throw = __wbindgen_throw;
exports.abort = abort;

var _xRandomvalues = require("@polkadot/x-randomvalues");

var _bridge = require("./bridge.js");

// Copyright 2019-2021 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable camelcase */
const DEFAULT_CRYPTO = {
  getRandomValues: _xRandomvalues.getRandomValues
};
const DEFAULT_SELF = {
  crypto: DEFAULT_CRYPTO
};
const heap = new Array(32).fill(undefined).concat(undefined, null, true, false);
let heapNext = heap.length;

function getObject(idx) {
  return heap[idx];
}

function dropObject(idx) {
  if (idx < 36) {
    return;
  }

  heap[idx] = heapNext;
  heapNext = idx;
}

function takeObject(idx) {
  const ret = getObject(idx);
  dropObject(idx);
  return ret;
}

function addObject(obj) {
  if (heapNext === heap.length) {
    heap.push(heap.length + 1);
  }

  const idx = heapNext;
  heapNext = heap[idx];
  heap[idx] = obj;
  return idx;
}

function __wbindgen_is_undefined(idx) {
  return getObject(idx) === undefined;
}

function __wbindgen_throw(ptr, len) {
  throw new Error((0, _bridge.getString)(ptr, len));
}

function __wbg_self_1b7a39e3a92c949c() {
  return addObject(DEFAULT_SELF);
}

function __wbg_require_604837428532a733(ptr, len) {
  throw new Error(`Unable to require ${(0, _bridge.getString)(ptr, len)}`);
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function __wbg_crypto_968f1772287e2df0(_idx) {
  return addObject(DEFAULT_CRYPTO);
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function __wbg_getRandomValues_a3d34b4fee3c2869(_idx) {
  return addObject(DEFAULT_CRYPTO.getRandomValues);
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function __wbg_getRandomValues_f5e14ab7ac8e995d(_arg0, ptr, len) {
  DEFAULT_CRYPTO.getRandomValues((0, _bridge.getU8a)(ptr, len));
} // eslint-disable-next-line @typescript-eslint/no-unused-vars


function __wbg_randomFillSync_d5bd2d655fdf256a(_idx, _ptr, _len) {
  throw new Error('randomFillsync is not available'); // getObject(idx).randomFillSync(getU8a(ptr, len));
}

function __wbindgen_object_drop_ref(idx) {
  takeObject(idx);
}

function abort() {
  throw new Error('abort');
}

},{"./bridge.js":717,"@polkadot/x-randomvalues":730}],721:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

require("./detectPackage.js");

var _bundle = require("./bundle.js");

Object.keys(_bundle).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (key in exports && exports[key] === _bundle[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _bundle[key];
    }
  });
});

},{"./bundle.js":718,"./detectPackage.js":719}],722:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/wasm-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/wasm-crypto',
  version: '4.5.1'
};
exports.packageInfo = packageInfo;

},{}],723:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BigInt = void 0;
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _xGlobal = require("@polkadot/x-global");

var _packageInfo = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/x-bigint authors & contributors
// SPDX-License-Identifier: Apache-2.0
const BigInt = typeof _xGlobal.xglobal.BigInt === 'function' && typeof _xGlobal.xglobal.BigInt.asIntN === 'function' ? _xGlobal.xglobal.BigInt : () => Number.NaN;
exports.BigInt = BigInt;

},{"./packageInfo.js":724,"@polkadot/x-global":728}],724:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/x-bigint authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/x-bigint',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],725:[function(require,module,exports){
"use strict";

var _xBigint = require("@polkadot/x-bigint");

var _xGlobal = require("@polkadot/x-global");

// Copyright 2017-2021 @polkadot/x-bigint authors & contributors
// SPDX-License-Identifier: Apache-2.0
(0, _xGlobal.exposeGlobal)('BigInt', _xBigint.BigInt);

},{"@polkadot/x-bigint":723,"@polkadot/x-global":728}],726:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetch = void 0;
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _xGlobal = require("@polkadot/x-global");

var _packageInfo = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/x-fetch authors & contributors
// SPDX-License-Identifier: Apache-2.0
const fetch = _xGlobal.xglobal.fetch;
exports.fetch = fetch;

},{"./packageInfo.js":727,"@polkadot/x-global":728}],727:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/x-fetch authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/x-fetch',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],728:[function(require,module,exports){
(function (global){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exposeGlobal = exposeGlobal;
exports.extractGlobal = extractGlobal;
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});
exports.xglobal = void 0;

var _packageInfo = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/x-global authors & contributors
// SPDX-License-Identifier: Apache-2.0
function evaluateThis(fn) {
  return fn('return this');
}

const xglobal = typeof globalThis !== 'undefined' ? globalThis : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : evaluateThis(Function);
exports.xglobal = xglobal;

function extractGlobal(name, fallback) {
  return typeof xglobal[name] === 'undefined' ? fallback : xglobal[name];
}

function exposeGlobal(name, fallback) {
  if (typeof xglobal[name] === 'undefined') {
    xglobal[name] = fallback;
  }
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./packageInfo.js":729}],729:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/x-global authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/x-global',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],730:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRandomValues = getRandomValues;
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _packageInfo = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/x-randomvalues authors & contributors
// SPDX-License-Identifier: Apache-2.0
function getRandomValues(arr) {
  return crypto.getRandomValues(arr);
}

},{"./packageInfo.js":731}],731:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/x-randomvalues authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/x-randomvalues',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],732:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextDecoder = void 0;
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _xGlobal = require("@polkadot/x-global");

var _fallback = require("./fallback.js");

var _packageInfo = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/x-textencoder authors & contributors
// SPDX-License-Identifier: Apache-2.0
const TextDecoder = (0, _xGlobal.extractGlobal)('TextDecoder', _fallback.TextDecoder);
exports.TextDecoder = TextDecoder;

},{"./fallback.js":733,"./packageInfo.js":734,"@polkadot/x-global":728}],733:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextDecoder = void 0;

// Copyright 2017-2021 @polkadot/x-textencoder authors & contributors
// SPDX-License-Identifier: Apache-2.0
// This is very limited, only handling Ascii values
class TextDecoder {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars,no-useless-constructor
  constructor(_) {// nothing
  }

  decode(value) {
    let result = '';

    for (let i = 0; i < value.length; i++) {
      result += String.fromCharCode(value[i]);
    }

    return result;
  }

}

exports.TextDecoder = TextDecoder;

},{}],734:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/x-textdecoder authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/x-textdecoder',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],735:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextEncoder = void 0;
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _xGlobal = require("@polkadot/x-global");

var _fallback = require("./fallback.js");

var _packageInfo = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/x-textencoder authors & contributors
// SPDX-License-Identifier: Apache-2.0
const TextEncoder = (0, _xGlobal.extractGlobal)('TextEncoder', _fallback.TextEncoder);
exports.TextEncoder = TextEncoder;

},{"./fallback.js":736,"./packageInfo.js":737,"@polkadot/x-global":728}],736:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextEncoder = void 0;

// Copyright 2017-2021 @polkadot/x-textencoder authors & contributors
// SPDX-License-Identifier: Apache-2.0
// This is very limited, only handling Ascii values
class TextEncoder {
  encode(value) {
    const u8a = new Uint8Array(value.length);

    for (let i = 0; i < value.length; i++) {
      u8a[i] = value.charCodeAt(i);
    }

    return u8a;
  }

}

exports.TextEncoder = TextEncoder;

},{}],737:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/x-textencoder authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/x-textencoder',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],738:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebSocket = void 0;
Object.defineProperty(exports, "packageInfo", {
  enumerable: true,
  get: function () {
    return _packageInfo.packageInfo;
  }
});

var _xGlobal = require("@polkadot/x-global");

var _packageInfo = require("./packageInfo.js");

// Copyright 2017-2021 @polkadot/x-ws authors & contributors
// SPDX-License-Identifier: Apache-2.0
const WebSocket = _xGlobal.xglobal.WebSocket;
exports.WebSocket = WebSocket;

},{"./packageInfo.js":739,"@polkadot/x-global":728}],739:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.packageInfo = void 0;
// Copyright 2017-2021 @polkadot/x-ws authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Auto-generated by @polkadot/dev, do not edit
const packageInfo = {
  name: '@polkadot/x-ws',
  version: '8.2.2'
};
exports.packageInfo = packageInfo;

},{}],740:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":741}],741:[function(require,module,exports){
arguments[4][225][0].apply(exports,arguments)
},{"dup":225}],742:[function(require,module,exports){
/*
 * ed2curve: convert Ed25519 signing key pair into Curve25519
 * key pair suitable for Diffie-Hellman key exchange.
 *
 * Written by Dmitry Chestnykh in 2014. Public domain.
 */
/* jshint newcap: false */
(function(root, f) {
  'use strict';
  if (typeof module !== 'undefined' && module.exports) module.exports = f(require('tweetnacl'));
  else root.ed2curve = f(root.nacl);
}(this, function(nacl) {
  'use strict';
  if (!nacl) throw new Error('tweetnacl not loaded');

  // -- Operations copied from TweetNaCl.js. --

  var gf = function(init) {
    var i, r = new Float64Array(16);
    if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
    return r;
  };

  var gf0 = gf(),
      gf1 = gf([1]),
      D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
      I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

  function car25519(o) {
    var c;
    var i;
    for (i = 0; i < 16; i++) {
      o[i] += 65536;
      c = Math.floor(o[i] / 65536);
      o[(i+1)*(i<15?1:0)] += c - 1 + 37 * (c-1) * (i===15?1:0);
      o[i] -= (c * 65536);
    }
  }

  function sel25519(p, q, b) {
    var t, c = ~(b-1);
    for (var i = 0; i < 16; i++) {
      t = c & (p[i] ^ q[i]);
      p[i] ^= t;
      q[i] ^= t;
    }
  }

  function unpack25519(o, n) {
    var i;
    for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
    o[15] &= 0x7fff;
  }

  // addition
  function A(o, a, b) {
    var i;
    for (i = 0; i < 16; i++) o[i] = (a[i] + b[i])|0;
  }

  // subtraction
  function Z(o, a, b) {
    var i;
    for (i = 0; i < 16; i++) o[i] = (a[i] - b[i])|0;
  }

  // multiplication
  function M(o, a, b) {
    var i, j, t = new Float64Array(31);
    for (i = 0; i < 31; i++) t[i] = 0;
    for (i = 0; i < 16; i++) {
      for (j = 0; j < 16; j++) {
        t[i+j] += a[i] * b[j];
      }
    }
    for (i = 0; i < 15; i++) {
      t[i] += 38 * t[i+16];
    }
    for (i = 0; i < 16; i++) o[i] = t[i];
    car25519(o);
    car25519(o);
  }

  // squaring
  function S(o, a) {
    M(o, a, a);
  }

  // inversion
  function inv25519(o, i) {
    var c = gf();
    var a;
    for (a = 0; a < 16; a++) c[a] = i[a];
    for (a = 253; a >= 0; a--) {
      S(c, c);
      if(a !== 2 && a !== 4) M(c, c, i);
    }
    for (a = 0; a < 16; a++) o[a] = c[a];
  }

  function pack25519(o, n) {
    var i, j, b;
    var m = gf(), t = gf();
    for (i = 0; i < 16; i++) t[i] = n[i];
    car25519(t);
    car25519(t);
    car25519(t);
    for (j = 0; j < 2; j++) {
      m[0] = t[0] - 0xffed;
      for (i = 1; i < 15; i++) {
        m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
        m[i-1] &= 0xffff;
      }
      m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
      b = (m[15]>>16) & 1;
      m[14] &= 0xffff;
      sel25519(t, m, 1-b);
    }
    for (i = 0; i < 16; i++) {
      o[2*i] = t[i] & 0xff;
      o[2*i+1] = t[i] >> 8;
    }
  }

  function par25519(a) {
    var d = new Uint8Array(32);
    pack25519(d, a);
    return d[0] & 1;
  }

  function vn(x, xi, y, yi, n) {
    var i, d = 0;
    for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
    return (1 & ((d - 1) >>> 8)) - 1;
  }

  function crypto_verify_32(x, xi, y, yi) {
    return vn(x, xi, y, yi, 32);
  }

  function neq25519(a, b) {
    var c = new Uint8Array(32), d = new Uint8Array(32);
    pack25519(c, a);
    pack25519(d, b);
    return crypto_verify_32(c, 0, d, 0);
  }

  function pow2523(o, i) {
    var c = gf();
    var a;
    for (a = 0; a < 16; a++) c[a] = i[a];
    for (a = 250; a >= 0; a--) {
      S(c, c);
      if (a !== 1) M(c, c, i);
    }
    for (a = 0; a < 16; a++) o[a] = c[a];
  }

  function set25519(r, a) {
    var i;
    for (i = 0; i < 16; i++) r[i] = a[i] | 0;
  }

  function unpackneg(r, p) {
    var t = gf(), chk = gf(), num = gf(),
      den = gf(), den2 = gf(), den4 = gf(),
      den6 = gf();

    set25519(r[2], gf1);
    unpack25519(r[1], p);
    S(num, r[1]);
    M(den, num, D);
    Z(num, num, r[2]);
    A(den, r[2], den);

    S(den2, den);
    S(den4, den2);
    M(den6, den4, den2);
    M(t, den6, num);
    M(t, t, den);

    pow2523(t, t);
    M(t, t, num);
    M(t, t, den);
    M(t, t, den);
    M(r[0], t, den);

    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) M(r[0], r[0], I);

    S(chk, r[0]);
    M(chk, chk, den);
    if (neq25519(chk, num)) return -1;

    if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0]);

    M(r[3], r[0], r[1]);
    return 0;
  }

  // ----

  // Converts Ed25519 public key to Curve25519 public key.
  // montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p
  function convertPublicKey(pk) {
    var z = new Uint8Array(32),
      q = [gf(), gf(), gf(), gf()],
      a = gf(), b = gf();

    if (unpackneg(q, pk)) return null; // reject invalid key

    var y = q[1];

    A(a, gf1, y);
    Z(b, gf1, y);
    inv25519(b, b);
    M(a, a, b);

    pack25519(z, a);
    return z;
  }

  // Converts Ed25519 secret key to Curve25519 secret key.
  function convertSecretKey(sk) {
    var d = new Uint8Array(64), o = new Uint8Array(32), i;
    nacl.lowlevel.crypto_hash(d, sk, 32);
    d[0] &= 248;
    d[31] &= 127;
    d[31] |= 64;
    for (i = 0; i < 32; i++) o[i] = d[i];
    for (i = 0; i < 64; i++) d[i] = 0;
    return o;
  }

  function convertKeyPair(edKeyPair) {
    var publicKey = convertPublicKey(edKeyPair.publicKey);
    if (!publicKey) return null;
    return {
      publicKey: publicKey,
      secretKey: convertSecretKey(edKeyPair.secretKey)
    };
  }

  return {
    convertPublicKey: convertPublicKey,
    convertSecretKey: convertSecretKey,
    convertKeyPair: convertKeyPair,
  };

}));

},{"tweetnacl":970}],743:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
  module.exports = EventEmitter;
}

},{}],744:[function(require,module,exports){
'use strict';

const word = '[a-fA-F\\d:]';
const b = options => options && options.includeBoundaries ?
	`(?:(?<=\\s|^)(?=${word})|(?<=${word})(?=\\s|$))` :
	'';

const v4 = '(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}';

const v6seg = '[a-fA-F\\d]{1,4}';
const v6 = `
(?:
(?:${v6seg}:){7}(?:${v6seg}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6seg}:){5}(?::${v4}|(?::${v6seg}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6seg}:){4}(?:(?::${v6seg}){0,1}:${v4}|(?::${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6seg}:){3}(?:(?::${v6seg}){0,2}:${v4}|(?::${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6seg}:){2}(?:(?::${v6seg}){0,3}:${v4}|(?::${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6seg}:){1}(?:(?::${v6seg}){0,4}:${v4}|(?::${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, '').replace(/\n/g, '').trim();

// Pre-compile only the exact regexes because adding a global flag make regexes stateful
const v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);
const v4exact = new RegExp(`^${v4}$`);
const v6exact = new RegExp(`^${v6}$`);

const ip = options => options && options.exact ?
	v46Exact :
	new RegExp(`(?:${b(options)}${v4}${b(options)})|(?:${b(options)}${v6}${b(options)})`, 'g');

ip.v4 = options => options && options.exact ? v4exact : new RegExp(`${b(options)}${v4}${b(options)}`, 'g');
ip.v6 = options => options && options.exact ? v6exact : new RegExp(`${b(options)}${v6}${b(options)}`, 'g');

module.exports = ip;

},{}],745:[function(require,module,exports){
"use strict";
/*! micro-base - MIT License (c) 2021 Paul Miller (paulmillr.com) */
Object.defineProperty(exports, "__esModule", { value: true });
exports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;
function assertNumber(n) {
    if (!Number.isSafeInteger(n))
        throw new Error(`Wrong integer: ${n}`);
}
exports.assertNumber = assertNumber;
function chain(...args) {
    const wrap = (a, b) => (c) => a(b(c));
    const encode = Array.from(args)
        .reverse()
        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);
    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);
    return { encode, decode };
}
function alphabet(alphabet) {
    return {
        encode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('alphabet.encode input should be an array of numbers');
            return digits.map((i) => {
                assertNumber(i);
                if (i < 0 || i >= alphabet.length)
                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);
                return alphabet[i];
            });
        },
        decode: (input) => {
            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                throw new Error('alphabet.decode input should be array of strings');
            return input.map((letter) => {
                const index = alphabet.indexOf(letter);
                if (index === -1)
                    throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet}`);
                return index;
            });
        },
    };
}
function join(separator = '') {
    if (typeof separator !== 'string')
        throw new Error('join separator should be string');
    return {
        encode: (from) => {
            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))
                throw new Error('join.encode input should be array of strings');
            return from.join(separator);
        },
        decode: (to) => {
            if (typeof to !== 'string')
                throw new Error('join.decode input should be string');
            return to.split(separator);
        },
    };
}
function padding(bits, chr = '=') {
    assertNumber(bits);
    if (typeof chr !== 'string')
        throw new Error('padding chr should be string');
    return {
        encode(data) {
            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))
                throw new Error('padding.encode input should be array of strings');
            while ((data.length * bits) % 8)
                data.push(chr);
            return data;
        },
        decode(input) {
            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                throw new Error('padding.encode input should be array of strings');
            let end = input.length;
            if ((end * bits) % 8)
                throw new Error('Invalid padding: string should have whole number of bytes');
            for (; end > 0 && input[end - 1] === chr; end--) {
                if (!(((end - 1) * bits) % 8))
                    throw new Error('Invalid padding: string has too much padding');
            }
            return input.slice(0, end);
        },
    };
}
function normalize(fn) {
    if (typeof fn !== 'function')
        throw new Error('normalize fn should be function');
    return { encode: (from) => from, decode: (to) => fn(to) };
}
function convertRadix(data, from, to) {
    if (from < 2)
        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
    if (to < 2)
        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
    if (!Array.isArray(data))
        throw new Error('convertRadix: data should be array');
    if (!data.length)
        return [];
    let pos = 0;
    const res = [];
    const digits = Array.from(data);
    while (true) {
        let carry = 0;
        let done = true;
        for (let i = pos; i < digits.length; i++) {
            const digit = digits[i];
            const digitBase = from * carry + digit;
            if (!Number.isSafeInteger(digitBase) ||
                (from * carry) / from !== carry ||
                digitBase - digit !== from * carry) {
                throw new Error('convertRadix: carry overflow');
            }
            carry = digitBase % to;
            digits[i] = Math.floor(digitBase / to);
            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)
                throw new Error('convertRadix: carry overflow');
            if (!done)
                continue;
            else if (!digits[i])
                pos = i;
            else
                done = false;
        }
        res.push(carry);
        if (done)
            break;
    }
    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
        res.push(0);
    return res.reverse();
}
const gcd = (a, b) => (!b ? a : gcd(b, a % b));
const radix2carry = (from, to) => from + (to - gcd(from, to));
function convertRadix2(data, from, to, padding) {
    if (!Array.isArray(data))
        throw new Error('convertRadix2: data should be array');
    if (from <= 0 || from > 32)
        throw new Error(`convertRadix2: wrong from=${from}`);
    if (to <= 0 || to > 32)
        throw new Error(`convertRadix2: wrong to=${to}`);
    if (radix2carry(from, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
    }
    let carry = 0;
    let pos = 0;
    const mask = 2 ** to - 1;
    const res = [];
    for (const n of data) {
        if (n >= 2 ** from)
            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = (carry << from) | n;
        if (pos + from > 32)
            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for (; pos >= to; pos -= to)
            res.push(((carry >> (pos - to)) & mask) >>> 0);
        carry &= 2 ** pos - 1;
    }
    carry = (carry << (to - pos)) & mask;
    if (!padding && pos >= from)
        throw new Error('Excess padding');
    if (!padding && carry)
        throw new Error(`Non-zero padding: ${carry}`);
    if (padding && pos > 0)
        res.push(carry >>> 0);
    return res;
}
function radix(num) {
    assertNumber(num);
    return {
        encode: (bytes) => {
            if (!(bytes instanceof Uint8Array))
                throw new Error('radix.encode input should be Uint8Array');
            return convertRadix(Array.from(bytes), 2 ** 8, num);
        },
        decode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('radix.decode input should be array of strings');
            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
        },
    };
}
function radix2(bits, revPadding = false) {
    assertNumber(bits);
    if (bits <= 0 || bits > 32)
        throw new Error('radix2: bits should be in (0..32]');
    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
        throw new Error('radix2: carry overflow');
    return {
        encode: (bytes) => {
            if (!(bytes instanceof Uint8Array))
                throw new Error('radix2.encode input should be Uint8Array');
            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
        },
        decode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('radix2.decode input should be array of strings');
            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
        },
    };
}
function unsafeWrapper(fn) {
    if (typeof fn !== 'function')
        throw new Error('unsafeWrapper fn should be function');
    return function (...args) {
        try {
            return fn.apply(null, args);
        }
        catch (e) { }
    };
}
function checksum(len, fn) {
    assertNumber(len);
    if (typeof fn !== 'function')
        throw new Error('checksum fn should be function');
    return {
        encode(data) {
            if (!(data instanceof Uint8Array))
                throw new Error('checksum.encode: input should be Uint8Array');
            const checksum = fn(data).slice(0, len);
            const res = new Uint8Array(data.length + len);
            res.set(data);
            res.set(checksum, data.length);
            return res;
        },
        decode(data) {
            if (!(data instanceof Uint8Array))
                throw new Error('checksum.decode: input should be Uint8Array');
            const payload = data.slice(0, -len);
            const newChecksum = fn(payload).slice(0, len);
            const oldChecksum = data.slice(-len);
            for (let i = 0; i < len; i++)
                if (newChecksum[i] !== oldChecksum[i])
                    throw new Error('Invalid checksum');
            return payload;
        },
    };
}
exports.utils = { alphabet, chain, checksum, radix, radix2 };
exports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));
exports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));
exports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));
exports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));
exports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));
exports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));
const genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));
exports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
exports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');
exports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');
const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
exports.base58xmr = {
    encode(data) {
        let res = '';
        for (let i = 0; i < data.length; i += 8) {
            const block = data.subarray(i, i + 8);
            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');
        }
        return res;
    },
    decode(str) {
        let res = [];
        for (let i = 0; i < str.length; i += 11) {
            const slice = str.slice(i, i + 11);
            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
            const block = exports.base58.decode(slice);
            for (let j = 0; j < block.length - blockLen; j++) {
                if (block[j] !== 0)
                    throw new Error('base58xmr: wrong padding');
            }
            res = res.concat(Array.from(block.slice(block.length - blockLen)));
        }
        return Uint8Array.from(res);
    },
};
const base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);
exports.base58check = base58check;
const BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));
const POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];
function bech32Polymod(pre) {
    const b = pre >> 25;
    let chk = (pre & 0x1ffffff) << 5;
    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
        if (((b >> i) & 1) === 1)
            chk ^= POLYMOD_GENERATORS[i];
    }
    return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
    const len = prefix.length;
    let chk = 1;
    for (let i = 0; i < len; i++) {
        const c = prefix.charCodeAt(i);
        if (c < 33 || c > 126)
            throw new Error(`Invalid prefix (${prefix})`);
        chk = bech32Polymod(chk) ^ (c >> 5);
    }
    chk = bech32Polymod(chk);
    for (let i = 0; i < len; i++)
        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);
    for (let v of words)
        chk = bech32Polymod(chk) ^ v;
    for (let i = 0; i < 6; i++)
        chk = bech32Polymod(chk);
    chk ^= encodingConst;
    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
}
function genBech32(encoding) {
    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;
    const _words = radix2(5);
    const fromWords = _words.decode;
    const toWords = _words.encode;
    const fromWordsUnsafe = unsafeWrapper(fromWords);
    function encode(prefix, words, limit = 90) {
        if (typeof prefix !== 'string')
            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))
            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
        const actualLength = prefix.length + 7 + words.length;
        if (limit !== false && actualLength > limit)
            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
        prefix = prefix.toLowerCase();
        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;
    }
    function decode(str, limit = 90) {
        if (typeof str !== 'string')
            throw new Error(`bech32.decode input should be string, not ${typeof str}`);
        if (str.length < 8 || (limit !== false && str.length > limit))
            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
        const lowered = str.toLowerCase();
        if (str !== lowered && str !== str.toUpperCase())
            throw new Error(`String must be lowercase or uppercase`);
        str = lowered;
        const sepIndex = str.lastIndexOf('1');
        if (sepIndex === 0 || sepIndex === -1)
            throw new Error(`Letter "1" must be present between prefix and data only`);
        const [prefix, _words] = [str.slice(0, sepIndex), str.slice(sepIndex + 1)];
        if (_words.length < 6)
            throw new Error('Data must be at least 6 characters long');
        const words = BECH_ALPHABET.decode(_words).slice(0, -6);
        const sum = bechChecksum(prefix, words, ENCODING_CONST);
        if (!_words.endsWith(sum))
            throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
        return { prefix, words };
    }
    const decodeUnsafe = unsafeWrapper(decode);
    function decodeToBytes(str) {
        const { prefix, words } = decode(str, false);
        return { prefix, words, bytes: fromWords(words) };
    }
    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
}
exports.bech32 = genBech32('bech32');
exports.bech32m = genBech32('bech32m');
exports.utf8 = {
    encode: (data) => new TextDecoder().decode(data),
    decode: (str) => new TextEncoder().encode(str),
};
exports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {
    if (typeof s !== 'string' || s.length % 2)
        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
    return s.toLowerCase();
}));
const CODERS = {
    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr
};
const coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;
const bytesToString = (type, bytes) => {
    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
    if (!(bytes instanceof Uint8Array))
        throw new TypeError('bytesToString() expects Uint8Array');
    return CODERS[type].encode(bytes);
};
exports.bytesToString = bytesToString;
exports.str = exports.bytesToString;
const stringToBytes = (type, str) => {
    if (!CODERS.hasOwnProperty(type))
        throw new TypeError(coderTypeError);
    if (typeof str !== 'string')
        throw new TypeError('stringToBytes() expects string');
    return CODERS[type].decode(str);
};
exports.stringToBytes = stringToBytes;
exports.bytes = exports.stringToBytes;

},{}],746:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  Observable: true,
  ConnectableObservable: true,
  observable: true,
  animationFrames: true,
  Subject: true,
  BehaviorSubject: true,
  ReplaySubject: true,
  AsyncSubject: true,
  asap: true,
  asapScheduler: true,
  async: true,
  asyncScheduler: true,
  queue: true,
  queueScheduler: true,
  animationFrame: true,
  animationFrameScheduler: true,
  VirtualTimeScheduler: true,
  VirtualAction: true,
  Scheduler: true,
  Subscription: true,
  Subscriber: true,
  Notification: true,
  NotificationKind: true,
  pipe: true,
  noop: true,
  identity: true,
  isObservable: true,
  lastValueFrom: true,
  firstValueFrom: true,
  ArgumentOutOfRangeError: true,
  EmptyError: true,
  NotFoundError: true,
  ObjectUnsubscribedError: true,
  SequenceError: true,
  TimeoutError: true,
  timeout: true,
  UnsubscriptionError: true,
  bindCallback: true,
  bindNodeCallback: true,
  combineLatest: true,
  concat: true,
  connectable: true,
  defer: true,
  empty: true,
  EMPTY: true,
  forkJoin: true,
  from: true,
  fromEvent: true,
  fromEventPattern: true,
  generate: true,
  iif: true,
  interval: true,
  merge: true,
  never: true,
  NEVER: true,
  of: true,
  onErrorResumeNext: true,
  pairs: true,
  partition: true,
  race: true,
  range: true,
  throwError: true,
  timer: true,
  using: true,
  zip: true,
  scheduled: true,
  config: true,
  audit: true,
  auditTime: true,
  buffer: true,
  bufferCount: true,
  bufferTime: true,
  bufferToggle: true,
  bufferWhen: true,
  catchError: true,
  combineAll: true,
  combineLatestAll: true,
  combineLatestWith: true,
  concatAll: true,
  concatMap: true,
  concatMapTo: true,
  concatWith: true,
  connect: true,
  count: true,
  debounce: true,
  debounceTime: true,
  defaultIfEmpty: true,
  delay: true,
  delayWhen: true,
  dematerialize: true,
  distinct: true,
  distinctUntilChanged: true,
  distinctUntilKeyChanged: true,
  elementAt: true,
  endWith: true,
  every: true,
  exhaust: true,
  exhaustAll: true,
  exhaustMap: true,
  expand: true,
  filter: true,
  finalize: true,
  find: true,
  findIndex: true,
  first: true,
  groupBy: true,
  ignoreElements: true,
  isEmpty: true,
  last: true,
  map: true,
  mapTo: true,
  materialize: true,
  max: true,
  mergeAll: true,
  flatMap: true,
  mergeMap: true,
  mergeMapTo: true,
  mergeScan: true,
  mergeWith: true,
  min: true,
  multicast: true,
  observeOn: true,
  pairwise: true,
  pluck: true,
  publish: true,
  publishBehavior: true,
  publishLast: true,
  publishReplay: true,
  raceWith: true,
  reduce: true,
  repeat: true,
  repeatWhen: true,
  retry: true,
  retryWhen: true,
  refCount: true,
  sample: true,
  sampleTime: true,
  scan: true,
  sequenceEqual: true,
  share: true,
  shareReplay: true,
  single: true,
  skip: true,
  skipLast: true,
  skipUntil: true,
  skipWhile: true,
  startWith: true,
  subscribeOn: true,
  switchAll: true,
  switchMap: true,
  switchMapTo: true,
  switchScan: true,
  take: true,
  takeLast: true,
  takeUntil: true,
  takeWhile: true,
  tap: true,
  throttle: true,
  throttleTime: true,
  throwIfEmpty: true,
  timeInterval: true,
  timeoutWith: true,
  timestamp: true,
  toArray: true,
  window: true,
  windowCount: true,
  windowTime: true,
  windowToggle: true,
  windowWhen: true,
  withLatestFrom: true,
  zipAll: true,
  zipWith: true
};
Object.defineProperty(exports, "ArgumentOutOfRangeError", {
  enumerable: true,
  get: function () {
    return _ArgumentOutOfRangeError.ArgumentOutOfRangeError;
  }
});
Object.defineProperty(exports, "AsyncSubject", {
  enumerable: true,
  get: function () {
    return _AsyncSubject.AsyncSubject;
  }
});
Object.defineProperty(exports, "BehaviorSubject", {
  enumerable: true,
  get: function () {
    return _BehaviorSubject.BehaviorSubject;
  }
});
Object.defineProperty(exports, "ConnectableObservable", {
  enumerable: true,
  get: function () {
    return _ConnectableObservable.ConnectableObservable;
  }
});
Object.defineProperty(exports, "EMPTY", {
  enumerable: true,
  get: function () {
    return _empty.EMPTY;
  }
});
Object.defineProperty(exports, "EmptyError", {
  enumerable: true,
  get: function () {
    return _EmptyError.EmptyError;
  }
});
Object.defineProperty(exports, "NEVER", {
  enumerable: true,
  get: function () {
    return _never.NEVER;
  }
});
Object.defineProperty(exports, "NotFoundError", {
  enumerable: true,
  get: function () {
    return _NotFoundError.NotFoundError;
  }
});
Object.defineProperty(exports, "Notification", {
  enumerable: true,
  get: function () {
    return _Notification.Notification;
  }
});
Object.defineProperty(exports, "NotificationKind", {
  enumerable: true,
  get: function () {
    return _Notification.NotificationKind;
  }
});
Object.defineProperty(exports, "ObjectUnsubscribedError", {
  enumerable: true,
  get: function () {
    return _ObjectUnsubscribedError.ObjectUnsubscribedError;
  }
});
Object.defineProperty(exports, "Observable", {
  enumerable: true,
  get: function () {
    return _Observable.Observable;
  }
});
Object.defineProperty(exports, "ReplaySubject", {
  enumerable: true,
  get: function () {
    return _ReplaySubject.ReplaySubject;
  }
});
Object.defineProperty(exports, "Scheduler", {
  enumerable: true,
  get: function () {
    return _Scheduler.Scheduler;
  }
});
Object.defineProperty(exports, "SequenceError", {
  enumerable: true,
  get: function () {
    return _SequenceError.SequenceError;
  }
});
Object.defineProperty(exports, "Subject", {
  enumerable: true,
  get: function () {
    return _Subject.Subject;
  }
});
Object.defineProperty(exports, "Subscriber", {
  enumerable: true,
  get: function () {
    return _Subscriber.Subscriber;
  }
});
Object.defineProperty(exports, "Subscription", {
  enumerable: true,
  get: function () {
    return _Subscription.Subscription;
  }
});
Object.defineProperty(exports, "TimeoutError", {
  enumerable: true,
  get: function () {
    return _timeout.TimeoutError;
  }
});
Object.defineProperty(exports, "UnsubscriptionError", {
  enumerable: true,
  get: function () {
    return _UnsubscriptionError.UnsubscriptionError;
  }
});
Object.defineProperty(exports, "VirtualAction", {
  enumerable: true,
  get: function () {
    return _VirtualTimeScheduler.VirtualAction;
  }
});
Object.defineProperty(exports, "VirtualTimeScheduler", {
  enumerable: true,
  get: function () {
    return _VirtualTimeScheduler.VirtualTimeScheduler;
  }
});
Object.defineProperty(exports, "animationFrame", {
  enumerable: true,
  get: function () {
    return _animationFrame.animationFrame;
  }
});
Object.defineProperty(exports, "animationFrameScheduler", {
  enumerable: true,
  get: function () {
    return _animationFrame.animationFrameScheduler;
  }
});
Object.defineProperty(exports, "animationFrames", {
  enumerable: true,
  get: function () {
    return _animationFrames.animationFrames;
  }
});
Object.defineProperty(exports, "asap", {
  enumerable: true,
  get: function () {
    return _asap.asap;
  }
});
Object.defineProperty(exports, "asapScheduler", {
  enumerable: true,
  get: function () {
    return _asap.asapScheduler;
  }
});
Object.defineProperty(exports, "async", {
  enumerable: true,
  get: function () {
    return _async.async;
  }
});
Object.defineProperty(exports, "asyncScheduler", {
  enumerable: true,
  get: function () {
    return _async.asyncScheduler;
  }
});
Object.defineProperty(exports, "audit", {
  enumerable: true,
  get: function () {
    return _audit.audit;
  }
});
Object.defineProperty(exports, "auditTime", {
  enumerable: true,
  get: function () {
    return _auditTime.auditTime;
  }
});
Object.defineProperty(exports, "bindCallback", {
  enumerable: true,
  get: function () {
    return _bindCallback.bindCallback;
  }
});
Object.defineProperty(exports, "bindNodeCallback", {
  enumerable: true,
  get: function () {
    return _bindNodeCallback.bindNodeCallback;
  }
});
Object.defineProperty(exports, "buffer", {
  enumerable: true,
  get: function () {
    return _buffer.buffer;
  }
});
Object.defineProperty(exports, "bufferCount", {
  enumerable: true,
  get: function () {
    return _bufferCount.bufferCount;
  }
});
Object.defineProperty(exports, "bufferTime", {
  enumerable: true,
  get: function () {
    return _bufferTime.bufferTime;
  }
});
Object.defineProperty(exports, "bufferToggle", {
  enumerable: true,
  get: function () {
    return _bufferToggle.bufferToggle;
  }
});
Object.defineProperty(exports, "bufferWhen", {
  enumerable: true,
  get: function () {
    return _bufferWhen.bufferWhen;
  }
});
Object.defineProperty(exports, "catchError", {
  enumerable: true,
  get: function () {
    return _catchError.catchError;
  }
});
Object.defineProperty(exports, "combineAll", {
  enumerable: true,
  get: function () {
    return _combineAll.combineAll;
  }
});
Object.defineProperty(exports, "combineLatest", {
  enumerable: true,
  get: function () {
    return _combineLatest.combineLatest;
  }
});
Object.defineProperty(exports, "combineLatestAll", {
  enumerable: true,
  get: function () {
    return _combineLatestAll.combineLatestAll;
  }
});
Object.defineProperty(exports, "combineLatestWith", {
  enumerable: true,
  get: function () {
    return _combineLatestWith.combineLatestWith;
  }
});
Object.defineProperty(exports, "concat", {
  enumerable: true,
  get: function () {
    return _concat.concat;
  }
});
Object.defineProperty(exports, "concatAll", {
  enumerable: true,
  get: function () {
    return _concatAll.concatAll;
  }
});
Object.defineProperty(exports, "concatMap", {
  enumerable: true,
  get: function () {
    return _concatMap.concatMap;
  }
});
Object.defineProperty(exports, "concatMapTo", {
  enumerable: true,
  get: function () {
    return _concatMapTo.concatMapTo;
  }
});
Object.defineProperty(exports, "concatWith", {
  enumerable: true,
  get: function () {
    return _concatWith.concatWith;
  }
});
Object.defineProperty(exports, "config", {
  enumerable: true,
  get: function () {
    return _config.config;
  }
});
Object.defineProperty(exports, "connect", {
  enumerable: true,
  get: function () {
    return _connect.connect;
  }
});
Object.defineProperty(exports, "connectable", {
  enumerable: true,
  get: function () {
    return _connectable.connectable;
  }
});
Object.defineProperty(exports, "count", {
  enumerable: true,
  get: function () {
    return _count.count;
  }
});
Object.defineProperty(exports, "debounce", {
  enumerable: true,
  get: function () {
    return _debounce.debounce;
  }
});
Object.defineProperty(exports, "debounceTime", {
  enumerable: true,
  get: function () {
    return _debounceTime.debounceTime;
  }
});
Object.defineProperty(exports, "defaultIfEmpty", {
  enumerable: true,
  get: function () {
    return _defaultIfEmpty.defaultIfEmpty;
  }
});
Object.defineProperty(exports, "defer", {
  enumerable: true,
  get: function () {
    return _defer.defer;
  }
});
Object.defineProperty(exports, "delay", {
  enumerable: true,
  get: function () {
    return _delay.delay;
  }
});
Object.defineProperty(exports, "delayWhen", {
  enumerable: true,
  get: function () {
    return _delayWhen.delayWhen;
  }
});
Object.defineProperty(exports, "dematerialize", {
  enumerable: true,
  get: function () {
    return _dematerialize.dematerialize;
  }
});
Object.defineProperty(exports, "distinct", {
  enumerable: true,
  get: function () {
    return _distinct.distinct;
  }
});
Object.defineProperty(exports, "distinctUntilChanged", {
  enumerable: true,
  get: function () {
    return _distinctUntilChanged.distinctUntilChanged;
  }
});
Object.defineProperty(exports, "distinctUntilKeyChanged", {
  enumerable: true,
  get: function () {
    return _distinctUntilKeyChanged.distinctUntilKeyChanged;
  }
});
Object.defineProperty(exports, "elementAt", {
  enumerable: true,
  get: function () {
    return _elementAt.elementAt;
  }
});
Object.defineProperty(exports, "empty", {
  enumerable: true,
  get: function () {
    return _empty.empty;
  }
});
Object.defineProperty(exports, "endWith", {
  enumerable: true,
  get: function () {
    return _endWith.endWith;
  }
});
Object.defineProperty(exports, "every", {
  enumerable: true,
  get: function () {
    return _every.every;
  }
});
Object.defineProperty(exports, "exhaust", {
  enumerable: true,
  get: function () {
    return _exhaust.exhaust;
  }
});
Object.defineProperty(exports, "exhaustAll", {
  enumerable: true,
  get: function () {
    return _exhaustAll.exhaustAll;
  }
});
Object.defineProperty(exports, "exhaustMap", {
  enumerable: true,
  get: function () {
    return _exhaustMap.exhaustMap;
  }
});
Object.defineProperty(exports, "expand", {
  enumerable: true,
  get: function () {
    return _expand.expand;
  }
});
Object.defineProperty(exports, "filter", {
  enumerable: true,
  get: function () {
    return _filter.filter;
  }
});
Object.defineProperty(exports, "finalize", {
  enumerable: true,
  get: function () {
    return _finalize.finalize;
  }
});
Object.defineProperty(exports, "find", {
  enumerable: true,
  get: function () {
    return _find.find;
  }
});
Object.defineProperty(exports, "findIndex", {
  enumerable: true,
  get: function () {
    return _findIndex.findIndex;
  }
});
Object.defineProperty(exports, "first", {
  enumerable: true,
  get: function () {
    return _first.first;
  }
});
Object.defineProperty(exports, "firstValueFrom", {
  enumerable: true,
  get: function () {
    return _firstValueFrom.firstValueFrom;
  }
});
Object.defineProperty(exports, "flatMap", {
  enumerable: true,
  get: function () {
    return _flatMap.flatMap;
  }
});
Object.defineProperty(exports, "forkJoin", {
  enumerable: true,
  get: function () {
    return _forkJoin.forkJoin;
  }
});
Object.defineProperty(exports, "from", {
  enumerable: true,
  get: function () {
    return _from.from;
  }
});
Object.defineProperty(exports, "fromEvent", {
  enumerable: true,
  get: function () {
    return _fromEvent.fromEvent;
  }
});
Object.defineProperty(exports, "fromEventPattern", {
  enumerable: true,
  get: function () {
    return _fromEventPattern.fromEventPattern;
  }
});
Object.defineProperty(exports, "generate", {
  enumerable: true,
  get: function () {
    return _generate.generate;
  }
});
Object.defineProperty(exports, "groupBy", {
  enumerable: true,
  get: function () {
    return _groupBy.groupBy;
  }
});
Object.defineProperty(exports, "identity", {
  enumerable: true,
  get: function () {
    return _identity.identity;
  }
});
Object.defineProperty(exports, "ignoreElements", {
  enumerable: true,
  get: function () {
    return _ignoreElements.ignoreElements;
  }
});
Object.defineProperty(exports, "iif", {
  enumerable: true,
  get: function () {
    return _iif.iif;
  }
});
Object.defineProperty(exports, "interval", {
  enumerable: true,
  get: function () {
    return _interval.interval;
  }
});
Object.defineProperty(exports, "isEmpty", {
  enumerable: true,
  get: function () {
    return _isEmpty.isEmpty;
  }
});
Object.defineProperty(exports, "isObservable", {
  enumerable: true,
  get: function () {
    return _isObservable.isObservable;
  }
});
Object.defineProperty(exports, "last", {
  enumerable: true,
  get: function () {
    return _last.last;
  }
});
Object.defineProperty(exports, "lastValueFrom", {
  enumerable: true,
  get: function () {
    return _lastValueFrom.lastValueFrom;
  }
});
Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function () {
    return _map.map;
  }
});
Object.defineProperty(exports, "mapTo", {
  enumerable: true,
  get: function () {
    return _mapTo.mapTo;
  }
});
Object.defineProperty(exports, "materialize", {
  enumerable: true,
  get: function () {
    return _materialize.materialize;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.max;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.merge;
  }
});
Object.defineProperty(exports, "mergeAll", {
  enumerable: true,
  get: function () {
    return _mergeAll.mergeAll;
  }
});
Object.defineProperty(exports, "mergeMap", {
  enumerable: true,
  get: function () {
    return _mergeMap.mergeMap;
  }
});
Object.defineProperty(exports, "mergeMapTo", {
  enumerable: true,
  get: function () {
    return _mergeMapTo.mergeMapTo;
  }
});
Object.defineProperty(exports, "mergeScan", {
  enumerable: true,
  get: function () {
    return _mergeScan.mergeScan;
  }
});
Object.defineProperty(exports, "mergeWith", {
  enumerable: true,
  get: function () {
    return _mergeWith.mergeWith;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.min;
  }
});
Object.defineProperty(exports, "multicast", {
  enumerable: true,
  get: function () {
    return _multicast.multicast;
  }
});
Object.defineProperty(exports, "never", {
  enumerable: true,
  get: function () {
    return _never.never;
  }
});
Object.defineProperty(exports, "noop", {
  enumerable: true,
  get: function () {
    return _noop.noop;
  }
});
Object.defineProperty(exports, "observable", {
  enumerable: true,
  get: function () {
    return _observable.observable;
  }
});
Object.defineProperty(exports, "observeOn", {
  enumerable: true,
  get: function () {
    return _observeOn.observeOn;
  }
});
Object.defineProperty(exports, "of", {
  enumerable: true,
  get: function () {
    return _of.of;
  }
});
Object.defineProperty(exports, "onErrorResumeNext", {
  enumerable: true,
  get: function () {
    return _onErrorResumeNext.onErrorResumeNext;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.pairs;
  }
});
Object.defineProperty(exports, "pairwise", {
  enumerable: true,
  get: function () {
    return _pairwise.pairwise;
  }
});
Object.defineProperty(exports, "partition", {
  enumerable: true,
  get: function () {
    return _partition.partition;
  }
});
Object.defineProperty(exports, "pipe", {
  enumerable: true,
  get: function () {
    return _pipe.pipe;
  }
});
Object.defineProperty(exports, "pluck", {
  enumerable: true,
  get: function () {
    return _pluck.pluck;
  }
});
Object.defineProperty(exports, "publish", {
  enumerable: true,
  get: function () {
    return _publish.publish;
  }
});
Object.defineProperty(exports, "publishBehavior", {
  enumerable: true,
  get: function () {
    return _publishBehavior.publishBehavior;
  }
});
Object.defineProperty(exports, "publishLast", {
  enumerable: true,
  get: function () {
    return _publishLast.publishLast;
  }
});
Object.defineProperty(exports, "publishReplay", {
  enumerable: true,
  get: function () {
    return _publishReplay.publishReplay;
  }
});
Object.defineProperty(exports, "queue", {
  enumerable: true,
  get: function () {
    return _queue.queue;
  }
});
Object.defineProperty(exports, "queueScheduler", {
  enumerable: true,
  get: function () {
    return _queue.queueScheduler;
  }
});
Object.defineProperty(exports, "race", {
  enumerable: true,
  get: function () {
    return _race.race;
  }
});
Object.defineProperty(exports, "raceWith", {
  enumerable: true,
  get: function () {
    return _raceWith.raceWith;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.range;
  }
});
Object.defineProperty(exports, "reduce", {
  enumerable: true,
  get: function () {
    return _reduce.reduce;
  }
});
Object.defineProperty(exports, "refCount", {
  enumerable: true,
  get: function () {
    return _refCount.refCount;
  }
});
Object.defineProperty(exports, "repeat", {
  enumerable: true,
  get: function () {
    return _repeat.repeat;
  }
});
Object.defineProperty(exports, "repeatWhen", {
  enumerable: true,
  get: function () {
    return _repeatWhen.repeatWhen;
  }
});
Object.defineProperty(exports, "retry", {
  enumerable: true,
  get: function () {
    return _retry.retry;
  }
});
Object.defineProperty(exports, "retryWhen", {
  enumerable: true,
  get: function () {
    return _retryWhen.retryWhen;
  }
});
Object.defineProperty(exports, "sample", {
  enumerable: true,
  get: function () {
    return _sample.sample;
  }
});
Object.defineProperty(exports, "sampleTime", {
  enumerable: true,
  get: function () {
    return _sampleTime.sampleTime;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.scan;
  }
});
Object.defineProperty(exports, "scheduled", {
  enumerable: true,
  get: function () {
    return _scheduled.scheduled;
  }
});
Object.defineProperty(exports, "sequenceEqual", {
  enumerable: true,
  get: function () {
    return _sequenceEqual.sequenceEqual;
  }
});
Object.defineProperty(exports, "share", {
  enumerable: true,
  get: function () {
    return _share.share;
  }
});
Object.defineProperty(exports, "shareReplay", {
  enumerable: true,
  get: function () {
    return _shareReplay.shareReplay;
  }
});
Object.defineProperty(exports, "single", {
  enumerable: true,
  get: function () {
    return _single.single;
  }
});
Object.defineProperty(exports, "skip", {
  enumerable: true,
  get: function () {
    return _skip.skip;
  }
});
Object.defineProperty(exports, "skipLast", {
  enumerable: true,
  get: function () {
    return _skipLast.skipLast;
  }
});
Object.defineProperty(exports, "skipUntil", {
  enumerable: true,
  get: function () {
    return _skipUntil.skipUntil;
  }
});
Object.defineProperty(exports, "skipWhile", {
  enumerable: true,
  get: function () {
    return _skipWhile.skipWhile;
  }
});
Object.defineProperty(exports, "startWith", {
  enumerable: true,
  get: function () {
    return _startWith.startWith;
  }
});
Object.defineProperty(exports, "subscribeOn", {
  enumerable: true,
  get: function () {
    return _subscribeOn.subscribeOn;
  }
});
Object.defineProperty(exports, "switchAll", {
  enumerable: true,
  get: function () {
    return _switchAll.switchAll;
  }
});
Object.defineProperty(exports, "switchMap", {
  enumerable: true,
  get: function () {
    return _switchMap.switchMap;
  }
});
Object.defineProperty(exports, "switchMapTo", {
  enumerable: true,
  get: function () {
    return _switchMapTo.switchMapTo;
  }
});
Object.defineProperty(exports, "switchScan", {
  enumerable: true,
  get: function () {
    return _switchScan.switchScan;
  }
});
Object.defineProperty(exports, "take", {
  enumerable: true,
  get: function () {
    return _take.take;
  }
});
Object.defineProperty(exports, "takeLast", {
  enumerable: true,
  get: function () {
    return _takeLast.takeLast;
  }
});
Object.defineProperty(exports, "takeUntil", {
  enumerable: true,
  get: function () {
    return _takeUntil.takeUntil;
  }
});
Object.defineProperty(exports, "takeWhile", {
  enumerable: true,
  get: function () {
    return _takeWhile.takeWhile;
  }
});
Object.defineProperty(exports, "tap", {
  enumerable: true,
  get: function () {
    return _tap.tap;
  }
});
Object.defineProperty(exports, "throttle", {
  enumerable: true,
  get: function () {
    return _throttle.throttle;
  }
});
Object.defineProperty(exports, "throttleTime", {
  enumerable: true,
  get: function () {
    return _throttleTime.throttleTime;
  }
});
Object.defineProperty(exports, "throwError", {
  enumerable: true,
  get: function () {
    return _throwError.throwError;
  }
});
Object.defineProperty(exports, "throwIfEmpty", {
  enumerable: true,
  get: function () {
    return _throwIfEmpty.throwIfEmpty;
  }
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _timeInterval.timeInterval;
  }
});
Object.defineProperty(exports, "timeout", {
  enumerable: true,
  get: function () {
    return _timeout.timeout;
  }
});
Object.defineProperty(exports, "timeoutWith", {
  enumerable: true,
  get: function () {
    return _timeoutWith.timeoutWith;
  }
});
Object.defineProperty(exports, "timer", {
  enumerable: true,
  get: function () {
    return _timer.timer;
  }
});
Object.defineProperty(exports, "timestamp", {
  enumerable: true,
  get: function () {
    return _timestamp.timestamp;
  }
});
Object.defineProperty(exports, "toArray", {
  enumerable: true,
  get: function () {
    return _toArray.toArray;
  }
});
Object.defineProperty(exports, "using", {
  enumerable: true,
  get: function () {
    return _using.using;
  }
});
Object.defineProperty(exports, "window", {
  enumerable: true,
  get: function () {
    return _window.window;
  }
});
Object.defineProperty(exports, "windowCount", {
  enumerable: true,
  get: function () {
    return _windowCount.windowCount;
  }
});
Object.defineProperty(exports, "windowTime", {
  enumerable: true,
  get: function () {
    return _windowTime.windowTime;
  }
});
Object.defineProperty(exports, "windowToggle", {
  enumerable: true,
  get: function () {
    return _windowToggle.windowToggle;
  }
});
Object.defineProperty(exports, "windowWhen", {
  enumerable: true,
  get: function () {
    return _windowWhen.windowWhen;
  }
});
Object.defineProperty(exports, "withLatestFrom", {
  enumerable: true,
  get: function () {
    return _withLatestFrom.withLatestFrom;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.zip;
  }
});
Object.defineProperty(exports, "zipAll", {
  enumerable: true,
  get: function () {
    return _zipAll.zipAll;
  }
});
Object.defineProperty(exports, "zipWith", {
  enumerable: true,
  get: function () {
    return _zipWith.zipWith;
  }
});

var _Observable = require("./internal/Observable");

var _ConnectableObservable = require("./internal/observable/ConnectableObservable");

var _observable = require("./internal/symbol/observable");

var _animationFrames = require("./internal/observable/dom/animationFrames");

var _Subject = require("./internal/Subject");

var _BehaviorSubject = require("./internal/BehaviorSubject");

var _ReplaySubject = require("./internal/ReplaySubject");

var _AsyncSubject = require("./internal/AsyncSubject");

var _asap = require("./internal/scheduler/asap");

var _async = require("./internal/scheduler/async");

var _queue = require("./internal/scheduler/queue");

var _animationFrame = require("./internal/scheduler/animationFrame");

var _VirtualTimeScheduler = require("./internal/scheduler/VirtualTimeScheduler");

var _Scheduler = require("./internal/Scheduler");

var _Subscription = require("./internal/Subscription");

var _Subscriber = require("./internal/Subscriber");

var _Notification = require("./internal/Notification");

var _pipe = require("./internal/util/pipe");

var _noop = require("./internal/util/noop");

var _identity = require("./internal/util/identity");

var _isObservable = require("./internal/util/isObservable");

var _lastValueFrom = require("./internal/lastValueFrom");

var _firstValueFrom = require("./internal/firstValueFrom");

var _ArgumentOutOfRangeError = require("./internal/util/ArgumentOutOfRangeError");

var _EmptyError = require("./internal/util/EmptyError");

var _NotFoundError = require("./internal/util/NotFoundError");

var _ObjectUnsubscribedError = require("./internal/util/ObjectUnsubscribedError");

var _SequenceError = require("./internal/util/SequenceError");

var _timeout = require("./internal/operators/timeout");

var _UnsubscriptionError = require("./internal/util/UnsubscriptionError");

var _bindCallback = require("./internal/observable/bindCallback");

var _bindNodeCallback = require("./internal/observable/bindNodeCallback");

var _combineLatest = require("./internal/observable/combineLatest");

var _concat = require("./internal/observable/concat");

var _connectable = require("./internal/observable/connectable");

var _defer = require("./internal/observable/defer");

var _empty = require("./internal/observable/empty");

var _forkJoin = require("./internal/observable/forkJoin");

var _from = require("./internal/observable/from");

var _fromEvent = require("./internal/observable/fromEvent");

var _fromEventPattern = require("./internal/observable/fromEventPattern");

var _generate = require("./internal/observable/generate");

var _iif = require("./internal/observable/iif");

var _interval = require("./internal/observable/interval");

var _merge = require("./internal/observable/merge");

var _never = require("./internal/observable/never");

var _of = require("./internal/observable/of");

var _onErrorResumeNext = require("./internal/observable/onErrorResumeNext");

var _pairs = require("./internal/observable/pairs");

var _partition = require("./internal/observable/partition");

var _race = require("./internal/observable/race");

var _range = require("./internal/observable/range");

var _throwError = require("./internal/observable/throwError");

var _timer = require("./internal/observable/timer");

var _using = require("./internal/observable/using");

var _zip = require("./internal/observable/zip");

var _scheduled = require("./internal/scheduled/scheduled");

var _types = require("./internal/types");

Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});

var _config = require("./internal/config");

var _audit = require("./internal/operators/audit");

var _auditTime = require("./internal/operators/auditTime");

var _buffer = require("./internal/operators/buffer");

var _bufferCount = require("./internal/operators/bufferCount");

var _bufferTime = require("./internal/operators/bufferTime");

var _bufferToggle = require("./internal/operators/bufferToggle");

var _bufferWhen = require("./internal/operators/bufferWhen");

var _catchError = require("./internal/operators/catchError");

var _combineAll = require("./internal/operators/combineAll");

var _combineLatestAll = require("./internal/operators/combineLatestAll");

var _combineLatestWith = require("./internal/operators/combineLatestWith");

var _concatAll = require("./internal/operators/concatAll");

var _concatMap = require("./internal/operators/concatMap");

var _concatMapTo = require("./internal/operators/concatMapTo");

var _concatWith = require("./internal/operators/concatWith");

var _connect = require("./internal/operators/connect");

var _count = require("./internal/operators/count");

var _debounce = require("./internal/operators/debounce");

var _debounceTime = require("./internal/operators/debounceTime");

var _defaultIfEmpty = require("./internal/operators/defaultIfEmpty");

var _delay = require("./internal/operators/delay");

var _delayWhen = require("./internal/operators/delayWhen");

var _dematerialize = require("./internal/operators/dematerialize");

var _distinct = require("./internal/operators/distinct");

var _distinctUntilChanged = require("./internal/operators/distinctUntilChanged");

var _distinctUntilKeyChanged = require("./internal/operators/distinctUntilKeyChanged");

var _elementAt = require("./internal/operators/elementAt");

var _endWith = require("./internal/operators/endWith");

var _every = require("./internal/operators/every");

var _exhaust = require("./internal/operators/exhaust");

var _exhaustAll = require("./internal/operators/exhaustAll");

var _exhaustMap = require("./internal/operators/exhaustMap");

var _expand = require("./internal/operators/expand");

var _filter = require("./internal/operators/filter");

var _finalize = require("./internal/operators/finalize");

var _find = require("./internal/operators/find");

var _findIndex = require("./internal/operators/findIndex");

var _first = require("./internal/operators/first");

var _groupBy = require("./internal/operators/groupBy");

var _ignoreElements = require("./internal/operators/ignoreElements");

var _isEmpty = require("./internal/operators/isEmpty");

var _last = require("./internal/operators/last");

var _map = require("./internal/operators/map");

var _mapTo = require("./internal/operators/mapTo");

var _materialize = require("./internal/operators/materialize");

var _max = require("./internal/operators/max");

var _mergeAll = require("./internal/operators/mergeAll");

var _flatMap = require("./internal/operators/flatMap");

var _mergeMap = require("./internal/operators/mergeMap");

var _mergeMapTo = require("./internal/operators/mergeMapTo");

var _mergeScan = require("./internal/operators/mergeScan");

var _mergeWith = require("./internal/operators/mergeWith");

var _min = require("./internal/operators/min");

var _multicast = require("./internal/operators/multicast");

var _observeOn = require("./internal/operators/observeOn");

var _pairwise = require("./internal/operators/pairwise");

var _pluck = require("./internal/operators/pluck");

var _publish = require("./internal/operators/publish");

var _publishBehavior = require("./internal/operators/publishBehavior");

var _publishLast = require("./internal/operators/publishLast");

var _publishReplay = require("./internal/operators/publishReplay");

var _raceWith = require("./internal/operators/raceWith");

var _reduce = require("./internal/operators/reduce");

var _repeat = require("./internal/operators/repeat");

var _repeatWhen = require("./internal/operators/repeatWhen");

var _retry = require("./internal/operators/retry");

var _retryWhen = require("./internal/operators/retryWhen");

var _refCount = require("./internal/operators/refCount");

var _sample = require("./internal/operators/sample");

var _sampleTime = require("./internal/operators/sampleTime");

var _scan = require("./internal/operators/scan");

var _sequenceEqual = require("./internal/operators/sequenceEqual");

var _share = require("./internal/operators/share");

var _shareReplay = require("./internal/operators/shareReplay");

var _single = require("./internal/operators/single");

var _skip = require("./internal/operators/skip");

var _skipLast = require("./internal/operators/skipLast");

var _skipUntil = require("./internal/operators/skipUntil");

var _skipWhile = require("./internal/operators/skipWhile");

var _startWith = require("./internal/operators/startWith");

var _subscribeOn = require("./internal/operators/subscribeOn");

var _switchAll = require("./internal/operators/switchAll");

var _switchMap = require("./internal/operators/switchMap");

var _switchMapTo = require("./internal/operators/switchMapTo");

var _switchScan = require("./internal/operators/switchScan");

var _take = require("./internal/operators/take");

var _takeLast = require("./internal/operators/takeLast");

var _takeUntil = require("./internal/operators/takeUntil");

var _takeWhile = require("./internal/operators/takeWhile");

var _tap = require("./internal/operators/tap");

var _throttle = require("./internal/operators/throttle");

var _throttleTime = require("./internal/operators/throttleTime");

var _throwIfEmpty = require("./internal/operators/throwIfEmpty");

var _timeInterval = require("./internal/operators/timeInterval");

var _timeoutWith = require("./internal/operators/timeoutWith");

var _timestamp = require("./internal/operators/timestamp");

var _toArray = require("./internal/operators/toArray");

var _window = require("./internal/operators/window");

var _windowCount = require("./internal/operators/windowCount");

var _windowTime = require("./internal/operators/windowTime");

var _windowToggle = require("./internal/operators/windowToggle");

var _windowWhen = require("./internal/operators/windowWhen");

var _withLatestFrom = require("./internal/operators/withLatestFrom");

var _zipAll = require("./internal/operators/zipAll");

var _zipWith = require("./internal/operators/zipWith");

},{"./internal/AsyncSubject":747,"./internal/BehaviorSubject":748,"./internal/Notification":749,"./internal/Observable":751,"./internal/ReplaySubject":752,"./internal/Scheduler":753,"./internal/Subject":754,"./internal/Subscriber":755,"./internal/Subscription":756,"./internal/config":757,"./internal/firstValueFrom":758,"./internal/lastValueFrom":759,"./internal/observable/ConnectableObservable":760,"./internal/observable/bindCallback":761,"./internal/observable/bindNodeCallback":763,"./internal/observable/combineLatest":764,"./internal/observable/concat":765,"./internal/observable/connectable":766,"./internal/observable/defer":767,"./internal/observable/dom/animationFrames":768,"./internal/observable/empty":769,"./internal/observable/forkJoin":770,"./internal/observable/from":771,"./internal/observable/fromEvent":772,"./internal/observable/fromEventPattern":773,"./internal/observable/generate":775,"./internal/observable/iif":776,"./internal/observable/interval":778,"./internal/observable/merge":779,"./internal/observable/never":780,"./internal/observable/of":781,"./internal/observable/onErrorResumeNext":782,"./internal/observable/pairs":783,"./internal/observable/partition":784,"./internal/observable/race":785,"./internal/observable/range":786,"./internal/observable/throwError":787,"./internal/observable/timer":788,"./internal/observable/using":789,"./internal/observable/zip":790,"./internal/operators/audit":792,"./internal/operators/auditTime":793,"./internal/operators/buffer":794,"./internal/operators/bufferCount":795,"./internal/operators/bufferTime":796,"./internal/operators/bufferToggle":797,"./internal/operators/bufferWhen":798,"./internal/operators/catchError":799,"./internal/operators/combineAll":800,"./internal/operators/combineLatestAll":802,"./internal/operators/combineLatestWith":803,"./internal/operators/concatAll":805,"./internal/operators/concatMap":806,"./internal/operators/concatMapTo":807,"./internal/operators/concatWith":808,"./internal/operators/connect":809,"./internal/operators/count":810,"./internal/operators/debounce":811,"./internal/operators/debounceTime":812,"./internal/operators/defaultIfEmpty":813,"./internal/operators/delay":814,"./internal/operators/delayWhen":815,"./internal/operators/dematerialize":816,"./internal/operators/distinct":817,"./internal/operators/distinctUntilChanged":818,"./internal/operators/distinctUntilKeyChanged":819,"./internal/operators/elementAt":820,"./internal/operators/endWith":821,"./internal/operators/every":822,"./internal/operators/exhaust":823,"./internal/operators/exhaustAll":824,"./internal/operators/exhaustMap":825,"./internal/operators/expand":826,"./internal/operators/filter":827,"./internal/operators/finalize":828,"./internal/operators/find":829,"./internal/operators/findIndex":830,"./internal/operators/first":831,"./internal/operators/flatMap":832,"./internal/operators/groupBy":833,"./internal/operators/ignoreElements":834,"./internal/operators/isEmpty":835,"./internal/operators/last":837,"./internal/operators/map":838,"./internal/operators/mapTo":839,"./internal/operators/materialize":840,"./internal/operators/max":841,"./internal/operators/mergeAll":843,"./internal/operators/mergeMap":845,"./internal/operators/mergeMapTo":846,"./internal/operators/mergeScan":847,"./internal/operators/mergeWith":848,"./internal/operators/min":849,"./internal/operators/multicast":850,"./internal/operators/observeOn":851,"./internal/operators/pairwise":853,"./internal/operators/pluck":854,"./internal/operators/publish":855,"./internal/operators/publishBehavior":856,"./internal/operators/publishLast":857,"./internal/operators/publishReplay":858,"./internal/operators/raceWith":859,"./internal/operators/reduce":860,"./internal/operators/refCount":861,"./internal/operators/repeat":862,"./internal/operators/repeatWhen":863,"./internal/operators/retry":864,"./internal/operators/retryWhen":865,"./internal/operators/sample":866,"./internal/operators/sampleTime":867,"./internal/operators/scan":868,"./internal/operators/sequenceEqual":870,"./internal/operators/share":871,"./internal/operators/shareReplay":872,"./internal/operators/single":873,"./internal/operators/skip":874,"./internal/operators/skipLast":875,"./internal/operators/skipUntil":876,"./internal/operators/skipWhile":877,"./internal/operators/startWith":878,"./internal/operators/subscribeOn":879,"./internal/operators/switchAll":880,"./internal/operators/switchMap":881,"./internal/operators/switchMapTo":882,"./internal/operators/switchScan":883,"./internal/operators/take":884,"./internal/operators/takeLast":885,"./internal/operators/takeUntil":886,"./internal/operators/takeWhile":887,"./internal/operators/tap":888,"./internal/operators/throttle":889,"./internal/operators/throttleTime":890,"./internal/operators/throwIfEmpty":891,"./internal/operators/timeInterval":892,"./internal/operators/timeout":893,"./internal/operators/timeoutWith":894,"./internal/operators/timestamp":895,"./internal/operators/toArray":896,"./internal/operators/window":897,"./internal/operators/windowCount":898,"./internal/operators/windowTime":899,"./internal/operators/windowToggle":900,"./internal/operators/windowWhen":901,"./internal/operators/withLatestFrom":902,"./internal/operators/zipAll":904,"./internal/operators/zipWith":905,"./internal/scheduled/scheduled":912,"./internal/scheduler/VirtualTimeScheduler":922,"./internal/scheduler/animationFrame":923,"./internal/scheduler/asap":925,"./internal/scheduler/async":926,"./internal/scheduler/queue":931,"./internal/symbol/observable":934,"./internal/types":935,"./internal/util/ArgumentOutOfRangeError":936,"./internal/util/EmptyError":937,"./internal/util/NotFoundError":939,"./internal/util/ObjectUnsubscribedError":940,"./internal/util/SequenceError":941,"./internal/util/UnsubscriptionError":942,"./internal/util/identity":951,"./internal/util/isObservable":958,"./internal/util/noop":964,"./internal/util/pipe":966}],747:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsyncSubject = void 0;

var _tslib = require("tslib");

var _Subject = require("./Subject");

var AsyncSubject = function (_super) {
  (0, _tslib.__extends)(AsyncSubject, _super);

  function AsyncSubject() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this._value = null;
    _this._hasValue = false;
    _this._isComplete = false;
    return _this;
  }

  AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {
    var _a = this,
        hasError = _a.hasError,
        _hasValue = _a._hasValue,
        _value = _a._value,
        thrownError = _a.thrownError,
        isStopped = _a.isStopped,
        _isComplete = _a._isComplete;

    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped || _isComplete) {
      _hasValue && subscriber.next(_value);
      subscriber.complete();
    }
  };

  AsyncSubject.prototype.next = function (value) {
    if (!this.isStopped) {
      this._value = value;
      this._hasValue = true;
    }
  };

  AsyncSubject.prototype.complete = function () {
    var _a = this,
        _hasValue = _a._hasValue,
        _value = _a._value,
        _isComplete = _a._isComplete;

    if (!_isComplete) {
      this._isComplete = true;
      _hasValue && _super.prototype.next.call(this, _value);

      _super.prototype.complete.call(this);
    }
  };

  return AsyncSubject;
}(_Subject.Subject);

exports.AsyncSubject = AsyncSubject;

},{"./Subject":754,"tslib":969}],748:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BehaviorSubject = void 0;

var _tslib = require("tslib");

var _Subject = require("./Subject");

var BehaviorSubject = function (_super) {
  (0, _tslib.__extends)(BehaviorSubject, _super);

  function BehaviorSubject(_value) {
    var _this = _super.call(this) || this;

    _this._value = _value;
    return _this;
  }

  Object.defineProperty(BehaviorSubject.prototype, "value", {
    get: function () {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });

  BehaviorSubject.prototype._subscribe = function (subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);

    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };

  BehaviorSubject.prototype.getValue = function () {
    var _a = this,
        hasError = _a.hasError,
        thrownError = _a.thrownError,
        _value = _a._value;

    if (hasError) {
      throw thrownError;
    }

    this._throwIfClosed();

    return _value;
  };

  BehaviorSubject.prototype.next = function (value) {
    _super.prototype.next.call(this, this._value = value);
  };

  return BehaviorSubject;
}(_Subject.Subject);

exports.BehaviorSubject = BehaviorSubject;

},{"./Subject":754,"tslib":969}],749:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotificationKind = exports.Notification = void 0;
exports.observeNotification = observeNotification;

var _empty = require("./observable/empty");

var _of = require("./observable/of");

var _throwError = require("./observable/throwError");

var _isFunction = require("./util/isFunction");

var NotificationKind;
exports.NotificationKind = NotificationKind;

(function (NotificationKind) {
  NotificationKind["NEXT"] = "N";
  NotificationKind["ERROR"] = "E";
  NotificationKind["COMPLETE"] = "C";
})(NotificationKind || (exports.NotificationKind = NotificationKind = {}));

var Notification = function () {
  function Notification(kind, value, error) {
    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === 'N';
  }

  Notification.prototype.observe = function (observer) {
    return observeNotification(this, observer);
  };

  Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {
    var _a = this,
        kind = _a.kind,
        value = _a.value,
        error = _a.error;

    return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
  };

  Notification.prototype.accept = function (nextOrObserver, error, complete) {
    var _a;

    return (0, _isFunction.isFunction)((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
  };

  Notification.prototype.toObservable = function () {
    var _a = this,
        kind = _a.kind,
        value = _a.value,
        error = _a.error;

    var result = kind === 'N' ? (0, _of.of)(value) : kind === 'E' ? (0, _throwError.throwError)(function () {
      return error;
    }) : kind === 'C' ? _empty.EMPTY : 0;

    if (!result) {
      throw new TypeError("Unexpected notification kind " + kind);
    }

    return result;
  };

  Notification.createNext = function (value) {
    return new Notification('N', value);
  };

  Notification.createError = function (err) {
    return new Notification('E', undefined, err);
  };

  Notification.createComplete = function () {
    return Notification.completeNotification;
  };

  Notification.completeNotification = new Notification('C');
  return Notification;
}();

exports.Notification = Notification;

function observeNotification(notification, observer) {
  var _a, _b, _c;

  var _d = notification,
      kind = _d.kind,
      value = _d.value,
      error = _d.error;

  if (typeof kind !== 'string') {
    throw new TypeError('Invalid notification, missing "kind"');
  }

  kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}

},{"./observable/empty":769,"./observable/of":781,"./observable/throwError":787,"./util/isFunction":955}],750:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.COMPLETE_NOTIFICATION = void 0;
exports.createNotification = createNotification;
exports.errorNotification = errorNotification;
exports.nextNotification = nextNotification;

var COMPLETE_NOTIFICATION = function () {
  return createNotification('C', undefined, undefined);
}();

exports.COMPLETE_NOTIFICATION = COMPLETE_NOTIFICATION;

function errorNotification(error) {
  return createNotification('E', undefined, error);
}

function nextNotification(value) {
  return createNotification('N', value, undefined);
}

function createNotification(kind, value, error) {
  return {
    kind: kind,
    value: value,
    error: error
  };
}

},{}],751:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Observable = void 0;

var _Subscriber = require("./Subscriber");

var _Subscription = require("./Subscription");

var _observable = require("./symbol/observable");

var _pipe = require("./util/pipe");

var _config = require("./config");

var _isFunction = require("./util/isFunction");

var _errorContext = require("./util/errorContext");

var Observable = function () {
  function Observable(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }

  Observable.prototype.lift = function (operator) {
    var observable = new Observable();
    observable.source = this;
    observable.operator = operator;
    return observable;
  };

  Observable.prototype.subscribe = function (observerOrNext, error, complete) {
    var _this = this;

    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new _Subscriber.SafeSubscriber(observerOrNext, error, complete);
    (0, _errorContext.errorContext)(function () {
      var _a = _this,
          operator = _a.operator,
          source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };

  Observable.prototype._trySubscribe = function (sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };

  Observable.prototype.forEach = function (next, promiseCtor) {
    var _this = this;

    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function (resolve, reject) {
      var subscription;
      subscription = _this.subscribe(function (value) {
        try {
          next(value);
        } catch (err) {
          reject(err);
          subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
        }
      }, reject, resolve);
    });
  };

  Observable.prototype._subscribe = function (subscriber) {
    var _a;

    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  };

  Observable.prototype[_observable.observable] = function () {
    return this;
  };

  Observable.prototype.pipe = function () {
    var operations = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }

    return (0, _pipe.pipeFromArray)(operations)(this);
  };

  Observable.prototype.toPromise = function (promiseCtor) {
    var _this = this;

    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function (resolve, reject) {
      var value;

      _this.subscribe(function (x) {
        return value = x;
      }, function (err) {
        return reject(err);
      }, function () {
        return resolve(value);
      });
    });
  };

  Observable.create = function (subscribe) {
    return new Observable(subscribe);
  };

  return Observable;
}();

exports.Observable = Observable;

function getPromiseCtor(promiseCtor) {
  var _a;

  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : _config.config.Promise) !== null && _a !== void 0 ? _a : Promise;
}

function isObserver(value) {
  return value && (0, _isFunction.isFunction)(value.next) && (0, _isFunction.isFunction)(value.error) && (0, _isFunction.isFunction)(value.complete);
}

function isSubscriber(value) {
  return value && value instanceof _Subscriber.Subscriber || isObserver(value) && (0, _Subscription.isSubscription)(value);
}

},{"./Subscriber":755,"./Subscription":756,"./config":757,"./symbol/observable":934,"./util/errorContext":949,"./util/isFunction":955,"./util/pipe":966}],752:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReplaySubject = void 0;

var _tslib = require("tslib");

var _Subject = require("./Subject");

var _dateTimestampProvider = require("./scheduler/dateTimestampProvider");

var ReplaySubject = function (_super) {
  (0, _tslib.__extends)(ReplaySubject, _super);

  function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }

    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }

    if (_timestampProvider === void 0) {
      _timestampProvider = _dateTimestampProvider.dateTimestampProvider;
    }

    var _this = _super.call(this) || this;

    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }

  ReplaySubject.prototype.next = function (value) {
    var _a = this,
        isStopped = _a.isStopped,
        _buffer = _a._buffer,
        _infiniteTimeWindow = _a._infiniteTimeWindow,
        _timestampProvider = _a._timestampProvider,
        _windowTime = _a._windowTime;

    if (!isStopped) {
      _buffer.push(value);

      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }

    this._trimBuffer();

    _super.prototype.next.call(this, value);
  };

  ReplaySubject.prototype._subscribe = function (subscriber) {
    this._throwIfClosed();

    this._trimBuffer();

    var subscription = this._innerSubscribe(subscriber);

    var _a = this,
        _infiniteTimeWindow = _a._infiniteTimeWindow,
        _buffer = _a._buffer;

    var copy = _buffer.slice();

    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }

    this._checkFinalizedStatuses(subscriber);

    return subscription;
  };

  ReplaySubject.prototype._trimBuffer = function () {
    var _a = this,
        _bufferSize = _a._bufferSize,
        _timestampProvider = _a._timestampProvider,
        _buffer = _a._buffer,
        _infiniteTimeWindow = _a._infiniteTimeWindow;

    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);

    if (!_infiniteTimeWindow) {
      var now = _timestampProvider.now();

      var last = 0;

      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last = i;
      }

      last && _buffer.splice(0, last + 1);
    }
  };

  return ReplaySubject;
}(_Subject.Subject);

exports.ReplaySubject = ReplaySubject;

},{"./Subject":754,"./scheduler/dateTimestampProvider":927,"tslib":969}],753:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Scheduler = void 0;

var _dateTimestampProvider = require("./scheduler/dateTimestampProvider");

var Scheduler = function () {
  function Scheduler(schedulerActionCtor, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }

    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }

  Scheduler.prototype.schedule = function (work, delay, state) {
    if (delay === void 0) {
      delay = 0;
    }

    return new this.schedulerActionCtor(this, work).schedule(state, delay);
  };

  Scheduler.now = _dateTimestampProvider.dateTimestampProvider.now;
  return Scheduler;
}();

exports.Scheduler = Scheduler;

},{"./scheduler/dateTimestampProvider":927}],754:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Subject = exports.AnonymousSubject = void 0;

var _tslib = require("tslib");

var _Observable = require("./Observable");

var _Subscription = require("./Subscription");

var _ObjectUnsubscribedError = require("./util/ObjectUnsubscribedError");

var _arrRemove = require("./util/arrRemove");

var _errorContext = require("./util/errorContext");

var Subject = function (_super) {
  (0, _tslib.__extends)(Subject, _super);

  function Subject() {
    var _this = _super.call(this) || this;

    _this.closed = false;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }

  Subject.prototype.lift = function (operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };

  Subject.prototype._throwIfClosed = function () {
    if (this.closed) {
      throw new _ObjectUnsubscribedError.ObjectUnsubscribedError();
    }
  };

  Subject.prototype.next = function (value) {
    var _this = this;

    (0, _errorContext.errorContext)(function () {
      var e_1, _a;

      _this._throwIfClosed();

      if (!_this.isStopped) {
        var copy = _this.observers.slice();

        try {
          for (var copy_1 = (0, _tslib.__values)(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {
            var observer = copy_1_1.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
    });
  };

  Subject.prototype.error = function (err) {
    var _this = this;

    (0, _errorContext.errorContext)(function () {
      _this._throwIfClosed();

      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;

        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };

  Subject.prototype.complete = function () {
    var _this = this;

    (0, _errorContext.errorContext)(function () {
      _this._throwIfClosed();

      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;

        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };

  Subject.prototype.unsubscribe = function () {
    this.isStopped = this.closed = true;
    this.observers = null;
  };

  Object.defineProperty(Subject.prototype, "observed", {
    get: function () {
      var _a;

      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    },
    enumerable: false,
    configurable: true
  });

  Subject.prototype._trySubscribe = function (subscriber) {
    this._throwIfClosed();

    return _super.prototype._trySubscribe.call(this, subscriber);
  };

  Subject.prototype._subscribe = function (subscriber) {
    this._throwIfClosed();

    this._checkFinalizedStatuses(subscriber);

    return this._innerSubscribe(subscriber);
  };

  Subject.prototype._innerSubscribe = function (subscriber) {
    var _a = this,
        hasError = _a.hasError,
        isStopped = _a.isStopped,
        observers = _a.observers;

    return hasError || isStopped ? _Subscription.EMPTY_SUBSCRIPTION : (observers.push(subscriber), new _Subscription.Subscription(function () {
      return (0, _arrRemove.arrRemove)(observers, subscriber);
    }));
  };

  Subject.prototype._checkFinalizedStatuses = function (subscriber) {
    var _a = this,
        hasError = _a.hasError,
        thrownError = _a.thrownError,
        isStopped = _a.isStopped;

    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };

  Subject.prototype.asObservable = function () {
    var observable = new _Observable.Observable();
    observable.source = this;
    return observable;
  };

  Subject.create = function (destination, source) {
    return new AnonymousSubject(destination, source);
  };

  return Subject;
}(_Observable.Observable);

exports.Subject = Subject;

var AnonymousSubject = function (_super) {
  (0, _tslib.__extends)(AnonymousSubject, _super);

  function AnonymousSubject(destination, source) {
    var _this = _super.call(this) || this;

    _this.destination = destination;
    _this.source = source;
    return _this;
  }

  AnonymousSubject.prototype.next = function (value) {
    var _a, _b;

    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  };

  AnonymousSubject.prototype.error = function (err) {
    var _a, _b;

    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };

  AnonymousSubject.prototype.complete = function () {
    var _a, _b;

    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  };

  AnonymousSubject.prototype._subscribe = function (subscriber) {
    var _a, _b;

    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : _Subscription.EMPTY_SUBSCRIPTION;
  };

  return AnonymousSubject;
}(Subject);

exports.AnonymousSubject = AnonymousSubject;

},{"./Observable":751,"./Subscription":756,"./util/ObjectUnsubscribedError":940,"./util/arrRemove":946,"./util/errorContext":949,"tslib":969}],755:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Subscriber = exports.SafeSubscriber = exports.EMPTY_OBSERVER = void 0;

var _tslib = require("tslib");

var _isFunction = require("./util/isFunction");

var _Subscription = require("./Subscription");

var _config = require("./config");

var _reportUnhandledError = require("./util/reportUnhandledError");

var _noop = require("./util/noop");

var _NotificationFactories = require("./NotificationFactories");

var _timeoutProvider = require("./scheduler/timeoutProvider");

var _errorContext = require("./util/errorContext");

var Subscriber = function (_super) {
  (0, _tslib.__extends)(Subscriber, _super);

  function Subscriber(destination) {
    var _this = _super.call(this) || this;

    _this.isStopped = false;

    if (destination) {
      _this.destination = destination;

      if ((0, _Subscription.isSubscription)(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }

    return _this;
  }

  Subscriber.create = function (next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };

  Subscriber.prototype.next = function (value) {
    if (this.isStopped) {
      handleStoppedNotification((0, _NotificationFactories.nextNotification)(value), this);
    } else {
      this._next(value);
    }
  };

  Subscriber.prototype.error = function (err) {
    if (this.isStopped) {
      handleStoppedNotification((0, _NotificationFactories.errorNotification)(err), this);
    } else {
      this.isStopped = true;

      this._error(err);
    }
  };

  Subscriber.prototype.complete = function () {
    if (this.isStopped) {
      handleStoppedNotification(_NotificationFactories.COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;

      this._complete();
    }
  };

  Subscriber.prototype.unsubscribe = function () {
    if (!this.closed) {
      this.isStopped = true;

      _super.prototype.unsubscribe.call(this);

      this.destination = null;
    }
  };

  Subscriber.prototype._next = function (value) {
    this.destination.next(value);
  };

  Subscriber.prototype._error = function (err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };

  Subscriber.prototype._complete = function () {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };

  return Subscriber;
}(_Subscription.Subscription);

exports.Subscriber = Subscriber;

var SafeSubscriber = function (_super) {
  (0, _tslib.__extends)(SafeSubscriber, _super);

  function SafeSubscriber(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;

    var next;

    if ((0, _isFunction.isFunction)(observerOrNext)) {
      next = observerOrNext;
    } else if (observerOrNext) {
      next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete;
      var context_1;

      if (_this && _config.config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);

        context_1.unsubscribe = function () {
          return _this.unsubscribe();
        };
      } else {
        context_1 = observerOrNext;
      }

      next = next === null || next === void 0 ? void 0 : next.bind(context_1);
      error = error === null || error === void 0 ? void 0 : error.bind(context_1);
      complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);
    }

    _this.destination = {
      next: next ? wrapForErrorHandling(next, _this) : _noop.noop,
      error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler, _this),
      complete: complete ? wrapForErrorHandling(complete, _this) : _noop.noop
    };
    return _this;
  }

  return SafeSubscriber;
}(Subscriber);

exports.SafeSubscriber = SafeSubscriber;

function wrapForErrorHandling(handler, instance) {
  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    try {
      handler.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args)));
    } catch (err) {
      if (_config.config.useDeprecatedSynchronousErrorHandling) {
        (0, _errorContext.captureError)(err);
      } else {
        (0, _reportUnhandledError.reportUnhandledError)(err);
      }
    }
  };
}

function defaultErrorHandler(err) {
  throw err;
}

function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = _config.config.onStoppedNotification;
  onStoppedNotification && _timeoutProvider.timeoutProvider.setTimeout(function () {
    return onStoppedNotification(notification, subscriber);
  });
}

var EMPTY_OBSERVER = {
  closed: true,
  next: _noop.noop,
  error: defaultErrorHandler,
  complete: _noop.noop
};
exports.EMPTY_OBSERVER = EMPTY_OBSERVER;

},{"./NotificationFactories":750,"./Subscription":756,"./config":757,"./scheduler/timeoutProvider":932,"./util/errorContext":949,"./util/isFunction":955,"./util/noop":964,"./util/reportUnhandledError":967,"tslib":969}],756:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Subscription = exports.EMPTY_SUBSCRIPTION = void 0;
exports.isSubscription = isSubscription;

var _tslib = require("tslib");

var _isFunction = require("./util/isFunction");

var _UnsubscriptionError = require("./util/UnsubscriptionError");

var _arrRemove = require("./util/arrRemove");

var Subscription = function () {
  function Subscription(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._teardowns = null;
  }

  Subscription.prototype.unsubscribe = function () {
    var e_1, _a, e_2, _b;

    var errors;

    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;

      if (_parentage) {
        this._parentage = null;

        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = (0, _tslib.__values)(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = {
              error: e_1_1
            };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }

      var initialTeardown = this.initialTeardown;

      if ((0, _isFunction.isFunction)(initialTeardown)) {
        try {
          initialTeardown();
        } catch (e) {
          errors = e instanceof _UnsubscriptionError.UnsubscriptionError ? e.errors : [e];
        }
      }

      var _teardowns = this._teardowns;

      if (_teardowns) {
        this._teardowns = null;

        try {
          for (var _teardowns_1 = (0, _tslib.__values)(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {
            var teardown_1 = _teardowns_1_1.value;

            try {
              execTeardown(teardown_1);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];

              if (err instanceof _UnsubscriptionError.UnsubscriptionError) {
                errors = (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], (0, _tslib.__read)(errors)), (0, _tslib.__read)(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }

      if (errors) {
        throw new _UnsubscriptionError.UnsubscriptionError(errors);
      }
    }
  };

  Subscription.prototype.add = function (teardown) {
    var _a;

    if (teardown && teardown !== this) {
      if (this.closed) {
        execTeardown(teardown);
      } else {
        if (teardown instanceof Subscription) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }

          teardown._addParent(this);
        }

        (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  };

  Subscription.prototype._hasParent = function (parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };

  Subscription.prototype._addParent = function (parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };

  Subscription.prototype._removeParent = function (parent) {
    var _parentage = this._parentage;

    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      (0, _arrRemove.arrRemove)(_parentage, parent);
    }
  };

  Subscription.prototype.remove = function (teardown) {
    var _teardowns = this._teardowns;
    _teardowns && (0, _arrRemove.arrRemove)(_teardowns, teardown);

    if (teardown instanceof Subscription) {
      teardown._removeParent(this);
    }
  };

  Subscription.EMPTY = function () {
    var empty = new Subscription();
    empty.closed = true;
    return empty;
  }();

  return Subscription;
}();

exports.Subscription = Subscription;
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
exports.EMPTY_SUBSCRIPTION = EMPTY_SUBSCRIPTION;

function isSubscription(value) {
  return value instanceof Subscription || value && 'closed' in value && (0, _isFunction.isFunction)(value.remove) && (0, _isFunction.isFunction)(value.add) && (0, _isFunction.isFunction)(value.unsubscribe);
}

function execTeardown(teardown) {
  if ((0, _isFunction.isFunction)(teardown)) {
    teardown();
  } else {
    teardown.unsubscribe();
  }
}

},{"./util/UnsubscriptionError":942,"./util/arrRemove":946,"./util/isFunction":955,"tslib":969}],757:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = void 0;
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: undefined,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};
exports.config = config;

},{}],758:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.firstValueFrom = firstValueFrom;

var _EmptyError = require("./util/EmptyError");

var _Subscriber = require("./Subscriber");

function firstValueFrom(source, config) {
  var hasConfig = typeof config === 'object';
  return new Promise(function (resolve, reject) {
    var subscriber = new _Subscriber.SafeSubscriber({
      next: function (value) {
        resolve(value);
        subscriber.unsubscribe();
      },
      error: reject,
      complete: function () {
        if (hasConfig) {
          resolve(config.defaultValue);
        } else {
          reject(new _EmptyError.EmptyError());
        }
      }
    });
    source.subscribe(subscriber);
  });
}

},{"./Subscriber":755,"./util/EmptyError":937}],759:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lastValueFrom = lastValueFrom;

var _EmptyError = require("./util/EmptyError");

function lastValueFrom(source, config) {
  var hasConfig = typeof config === 'object';
  return new Promise(function (resolve, reject) {
    var _hasValue = false;

    var _value;

    source.subscribe({
      next: function (value) {
        _value = value;
        _hasValue = true;
      },
      error: reject,
      complete: function () {
        if (_hasValue) {
          resolve(_value);
        } else if (hasConfig) {
          resolve(config.defaultValue);
        } else {
          reject(new _EmptyError.EmptyError());
        }
      }
    });
  });
}

},{"./util/EmptyError":937}],760:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectableObservable = void 0;

var _tslib = require("tslib");

var _Observable = require("../Observable");

var _Subscription = require("../Subscription");

var _refCount = require("../operators/refCount");

var _OperatorSubscriber = require("../operators/OperatorSubscriber");

var _lift = require("../util/lift");

var ConnectableObservable = function (_super) {
  (0, _tslib.__extends)(ConnectableObservable, _super);

  function ConnectableObservable(source, subjectFactory) {
    var _this = _super.call(this) || this;

    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;

    if ((0, _lift.hasLift)(source)) {
      _this.lift = source.lift;
    }

    return _this;
  }

  ConnectableObservable.prototype._subscribe = function (subscriber) {
    return this.getSubject().subscribe(subscriber);
  };

  ConnectableObservable.prototype.getSubject = function () {
    var subject = this._subject;

    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }

    return this._subject;
  };

  ConnectableObservable.prototype._teardown = function () {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };

  ConnectableObservable.prototype.connect = function () {
    var _this = this;

    var connection = this._connection;

    if (!connection) {
      connection = this._connection = new _Subscription.Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subject_1, undefined, function () {
        _this._teardown();

        subject_1.complete();
      }, function (err) {
        _this._teardown();

        subject_1.error(err);
      }, function () {
        return _this._teardown();
      })));

      if (connection.closed) {
        this._connection = null;
        connection = _Subscription.Subscription.EMPTY;
      }
    }

    return connection;
  };

  ConnectableObservable.prototype.refCount = function () {
    return (0, _refCount.refCount)()(this);
  };

  return ConnectableObservable;
}(_Observable.Observable);

exports.ConnectableObservable = ConnectableObservable;

},{"../Observable":751,"../Subscription":756,"../operators/OperatorSubscriber":791,"../operators/refCount":861,"../util/lift":962,"tslib":969}],761:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindCallback = bindCallback;

var _bindCallbackInternals = require("./bindCallbackInternals");

function bindCallback(callbackFunc, resultSelector, scheduler) {
  return (0, _bindCallbackInternals.bindCallbackInternals)(false, callbackFunc, resultSelector, scheduler);
}

},{"./bindCallbackInternals":762}],762:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindCallbackInternals = bindCallbackInternals;

var _tslib = require("tslib");

var _isScheduler = require("../util/isScheduler");

var _Observable = require("../Observable");

var _subscribeOn = require("../operators/subscribeOn");

var _mapOneOrManyArgs = require("../util/mapOneOrManyArgs");

var _observeOn = require("../operators/observeOn");

var _AsyncSubject = require("../AsyncSubject");

function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {
  if (resultSelector) {
    if ((0, _isScheduler.isScheduler)(resultSelector)) {
      scheduler = resultSelector;
    } else {
      return function () {
        var args = [];

        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }

        return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe((0, _mapOneOrManyArgs.mapOneOrManyArgs)(resultSelector));
      };
    }
  }

  if (scheduler) {
    return function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe((0, _subscribeOn.subscribeOn)(scheduler), (0, _observeOn.observeOn)(scheduler));
    };
  }

  return function () {
    var _this = this;

    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var subject = new _AsyncSubject.AsyncSubject();
    var uninitialized = true;
    return new _Observable.Observable(function (subscriber) {
      var subs = subject.subscribe(subscriber);

      if (uninitialized) {
        uninitialized = false;
        var isAsync_1 = false;
        var isComplete_1 = false;
        callbackFunc.apply(_this, (0, _tslib.__spreadArray)((0, _tslib.__spreadArray)([], (0, _tslib.__read)(args)), [function () {
          var results = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            results[_i] = arguments[_i];
          }

          if (isNodeStyle) {
            var err = results.shift();

            if (err != null) {
              subject.error(err);
              return;
            }
          }

          subject.next(1 < results.length ? results : results[0]);
          isComplete_1 = true;

          if (isAsync_1) {
            subject.complete();
          }
        }]));

        if (isComplete_1) {
          subject.complete();
        }

        isAsync_1 = true;
      }

      return subs;
    });
  };
}

},{"../AsyncSubject":747,"../Observable":751,"../operators/observeOn":851,"../operators/subscribeOn":879,"../util/isScheduler":961,"../util/mapOneOrManyArgs":963,"tslib":969}],763:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindNodeCallback = bindNodeCallback;

var _bindCallbackInternals = require("./bindCallbackInternals");

function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
  return (0, _bindCallbackInternals.bindCallbackInternals)(true, callbackFunc, resultSelector, scheduler);
}

},{"./bindCallbackInternals":762}],764:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineLatest = combineLatest;
exports.combineLatestInit = combineLatestInit;

var _Observable = require("../Observable");

var _argsArgArrayOrObject = require("../util/argsArgArrayOrObject");

var _from = require("./from");

var _identity = require("../util/identity");

var _mapOneOrManyArgs = require("../util/mapOneOrManyArgs");

var _args = require("../util/args");

var _createObject = require("../util/createObject");

var _OperatorSubscriber = require("../operators/OperatorSubscriber");

var _executeSchedule = require("../util/executeSchedule");

function combineLatest() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var scheduler = (0, _args.popScheduler)(args);
  var resultSelector = (0, _args.popResultSelector)(args);

  var _a = (0, _argsArgArrayOrObject.argsArgArrayOrObject)(args),
      observables = _a.args,
      keys = _a.keys;

  if (observables.length === 0) {
    return (0, _from.from)([], scheduler);
  }

  var result = new _Observable.Observable(combineLatestInit(observables, scheduler, keys ? function (values) {
    return (0, _createObject.createObject)(keys, values);
  } : _identity.identity));
  return resultSelector ? result.pipe((0, _mapOneOrManyArgs.mapOneOrManyArgs)(resultSelector)) : result;
}

function combineLatestInit(observables, scheduler, valueTransform) {
  if (valueTransform === void 0) {
    valueTransform = _identity.identity;
  }

  return function (subscriber) {
    maybeSchedule(scheduler, function () {
      var length = observables.length;
      var values = new Array(length);
      var active = length;
      var remainingFirstValues = length;

      var _loop_1 = function (i) {
        maybeSchedule(scheduler, function () {
          var source = (0, _from.from)(observables[i], scheduler);
          var hasFirstValue = false;
          source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
            values[i] = value;

            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }

            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, function () {
            if (! --active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      };

      for (var i = 0; i < length; i++) {
        _loop_1(i);
      }
    }, subscriber);
  };
}

function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    (0, _executeSchedule.executeSchedule)(subscription, scheduler, execute);
  } else {
    execute();
  }
}

},{"../Observable":751,"../operators/OperatorSubscriber":791,"../util/args":943,"../util/argsArgArrayOrObject":944,"../util/createObject":948,"../util/executeSchedule":950,"../util/identity":951,"../util/mapOneOrManyArgs":963,"./from":771}],765:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat = concat;

var _concatAll = require("../operators/concatAll");

var _args = require("../util/args");

var _from = require("./from");

function concat() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  return (0, _concatAll.concatAll)()((0, _from.from)(args, (0, _args.popScheduler)(args)));
}

},{"../operators/concatAll":805,"../util/args":943,"./from":771}],766:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectable = connectable;

var _Subject = require("../Subject");

var _Observable = require("../Observable");

var _defer = require("./defer");

var DEFAULT_CONFIG = {
  connector: function () {
    return new _Subject.Subject();
  },
  resetOnDisconnect: true
};

function connectable(source, config) {
  if (config === void 0) {
    config = DEFAULT_CONFIG;
  }

  var connection = null;
  var connector = config.connector,
      _a = config.resetOnDisconnect,
      resetOnDisconnect = _a === void 0 ? true : _a;
  var subject = connector();
  var result = new _Observable.Observable(function (subscriber) {
    return subject.subscribe(subscriber);
  });

  result.connect = function () {
    if (!connection || connection.closed) {
      connection = (0, _defer.defer)(function () {
        return source;
      }).subscribe(subject);

      if (resetOnDisconnect) {
        connection.add(function () {
          return subject = connector();
        });
      }
    }

    return connection;
  };

  return result;
}

},{"../Observable":751,"../Subject":754,"./defer":767}],767:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defer = defer;

var _Observable = require("../Observable");

var _innerFrom = require("./innerFrom");

function defer(observableFactory) {
  return new _Observable.Observable(function (subscriber) {
    (0, _innerFrom.innerFrom)(observableFactory()).subscribe(subscriber);
  });
}

},{"../Observable":751,"./innerFrom":777}],768:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.animationFrames = animationFrames;

var _Observable = require("../../Observable");

var _Subscription = require("../../Subscription");

var _performanceTimestampProvider = require("../../scheduler/performanceTimestampProvider");

var _animationFrameProvider = require("../../scheduler/animationFrameProvider");

function animationFrames(timestampProvider) {
  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;
}

function animationFramesFactory(timestampProvider) {
  var schedule = _animationFrameProvider.animationFrameProvider.schedule;
  return new _Observable.Observable(function (subscriber) {
    var subscription = new _Subscription.Subscription();
    var provider = timestampProvider || _performanceTimestampProvider.performanceTimestampProvider;
    var start = provider.now();

    var run = function (timestamp) {
      var now = provider.now();
      subscriber.next({
        timestamp: timestampProvider ? now : timestamp,
        elapsed: now - start
      });

      if (!subscriber.closed) {
        subscription.add(schedule(run));
      }
    };

    subscription.add(schedule(run));
    return subscription;
  });
}

var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

},{"../../Observable":751,"../../Subscription":756,"../../scheduler/animationFrameProvider":924,"../../scheduler/performanceTimestampProvider":930}],769:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EMPTY = void 0;
exports.empty = empty;

var _Observable = require("../Observable");

var EMPTY = new _Observable.Observable(function (subscriber) {
  return subscriber.complete();
});
exports.EMPTY = EMPTY;

function empty(scheduler) {
  return scheduler ? emptyScheduled(scheduler) : EMPTY;
}

function emptyScheduled(scheduler) {
  return new _Observable.Observable(function (subscriber) {
    return scheduler.schedule(function () {
      return subscriber.complete();
    });
  });
}

},{"../Observable":751}],770:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forkJoin = forkJoin;

var _Observable = require("../Observable");

var _argsArgArrayOrObject = require("../util/argsArgArrayOrObject");

var _innerFrom = require("./innerFrom");

var _args = require("../util/args");

var _OperatorSubscriber = require("../operators/OperatorSubscriber");

var _mapOneOrManyArgs = require("../util/mapOneOrManyArgs");

var _createObject = require("../util/createObject");

function forkJoin() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var resultSelector = (0, _args.popResultSelector)(args);

  var _a = (0, _argsArgArrayOrObject.argsArgArrayOrObject)(args),
      sources = _a.args,
      keys = _a.keys;

  var result = new _Observable.Observable(function (subscriber) {
    var length = sources.length;

    if (!length) {
      subscriber.complete();
      return;
    }

    var values = new Array(length);
    var remainingCompletions = length;
    var remainingEmissions = length;

    var _loop_1 = function (sourceIndex) {
      var hasValue = false;
      (0, _innerFrom.innerFrom)(sources[sourceIndex]).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
        if (!hasValue) {
          hasValue = true;
          remainingEmissions--;
        }

        values[sourceIndex] = value;
      }, function () {
        return remainingCompletions--;
      }, undefined, function () {
        if (!remainingCompletions || !hasValue) {
          if (!remainingEmissions) {
            subscriber.next(keys ? (0, _createObject.createObject)(keys, values) : values);
          }

          subscriber.complete();
        }
      }));
    };

    for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
      _loop_1(sourceIndex);
    }
  });
  return resultSelector ? result.pipe((0, _mapOneOrManyArgs.mapOneOrManyArgs)(resultSelector)) : result;
}

},{"../Observable":751,"../operators/OperatorSubscriber":791,"../util/args":943,"../util/argsArgArrayOrObject":944,"../util/createObject":948,"../util/mapOneOrManyArgs":963,"./innerFrom":777}],771:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.from = from;

var _scheduled = require("../scheduled/scheduled");

var _innerFrom = require("./innerFrom");

function from(input, scheduler) {
  return scheduler ? (0, _scheduled.scheduled)(input, scheduler) : (0, _innerFrom.innerFrom)(input);
}

},{"../scheduled/scheduled":912,"./innerFrom":777}],772:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromEvent = fromEvent;

var _tslib = require("tslib");

var _innerFrom = require("../observable/innerFrom");

var _Observable = require("../Observable");

var _mergeMap = require("../operators/mergeMap");

var _isArrayLike = require("../util/isArrayLike");

var _isFunction = require("../util/isFunction");

var _mapOneOrManyArgs = require("../util/mapOneOrManyArgs");

var nodeEventEmitterMethods = ['addListener', 'removeListener'];
var eventTargetMethods = ['addEventListener', 'removeEventListener'];
var jqueryMethods = ['on', 'off'];

function fromEvent(target, eventName, options, resultSelector) {
  if ((0, _isFunction.isFunction)(options)) {
    resultSelector = options;
    options = undefined;
  }

  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe((0, _mapOneOrManyArgs.mapOneOrManyArgs)(resultSelector));
  }

  var _a = (0, _tslib.__read)(isEventTarget(target) ? eventTargetMethods.map(function (methodName) {
    return function (handler) {
      return target[methodName](eventName, handler, options);
    };
  }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2),
      add = _a[0],
      remove = _a[1];

  if (!add) {
    if ((0, _isArrayLike.isArrayLike)(target)) {
      return (0, _mergeMap.mergeMap)(function (subTarget) {
        return fromEvent(subTarget, eventName, options);
      })((0, _innerFrom.innerFrom)(target));
    }
  }

  if (!add) {
    throw new TypeError('Invalid event target');
  }

  return new _Observable.Observable(function (subscriber) {
    var handler = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return subscriber.next(1 < args.length ? args : args[0]);
    };

    add(handler);
    return function () {
      return remove(handler);
    };
  });
}

function toCommonHandlerRegistry(target, eventName) {
  return function (methodName) {
    return function (handler) {
      return target[methodName](eventName, handler);
    };
  };
}

function isNodeStyleEventEmitter(target) {
  return (0, _isFunction.isFunction)(target.addListener) && (0, _isFunction.isFunction)(target.removeListener);
}

function isJQueryStyleEventEmitter(target) {
  return (0, _isFunction.isFunction)(target.on) && (0, _isFunction.isFunction)(target.off);
}

function isEventTarget(target) {
  return (0, _isFunction.isFunction)(target.addEventListener) && (0, _isFunction.isFunction)(target.removeEventListener);
}

},{"../Observable":751,"../observable/innerFrom":777,"../operators/mergeMap":845,"../util/isArrayLike":952,"../util/isFunction":955,"../util/mapOneOrManyArgs":963,"tslib":969}],773:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromEventPattern = fromEventPattern;

var _Observable = require("../Observable");

var _isFunction = require("../util/isFunction");

var _mapOneOrManyArgs = require("../util/mapOneOrManyArgs");

function fromEventPattern(addHandler, removeHandler, resultSelector) {
  if (resultSelector) {
    return fromEventPattern(addHandler, removeHandler).pipe((0, _mapOneOrManyArgs.mapOneOrManyArgs)(resultSelector));
  }

  return new _Observable.Observable(function (subscriber) {
    var handler = function () {
      var e = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        e[_i] = arguments[_i];
      }

      return subscriber.next(e.length === 1 ? e[0] : e);
    };

    var retValue = addHandler(handler);
    return (0, _isFunction.isFunction)(removeHandler) ? function () {
      return removeHandler(handler, retValue);
    } : undefined;
  });
}

},{"../Observable":751,"../util/isFunction":955,"../util/mapOneOrManyArgs":963}],774:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromSubscribable = fromSubscribable;

var _Observable = require("../Observable");

function fromSubscribable(subscribable) {
  return new _Observable.Observable(function (subscriber) {
    return subscribable.subscribe(subscriber);
  });
}

},{"../Observable":751}],775:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generate = generate;

var _tslib = require("tslib");

var _identity = require("../util/identity");

var _isScheduler = require("../util/isScheduler");

var _defer = require("./defer");

var _scheduleIterable = require("../scheduled/scheduleIterable");

function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
  var _a, _b;

  var resultSelector;
  var initialState;

  if (arguments.length === 1) {
    _a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? _identity.identity : _b, scheduler = _a.scheduler;
  } else {
    initialState = initialStateOrOptions;

    if (!resultSelectorOrScheduler || (0, _isScheduler.isScheduler)(resultSelectorOrScheduler)) {
      resultSelector = _identity.identity;
      scheduler = resultSelectorOrScheduler;
    } else {
      resultSelector = resultSelectorOrScheduler;
    }
  }

  function gen() {
    var state;
    return (0, _tslib.__generator)(this, function (_a) {
      switch (_a.label) {
        case 0:
          state = initialState;
          _a.label = 1;

        case 1:
          if (!(!condition || condition(state))) return [3, 4];
          return [4, resultSelector(state)];

        case 2:
          _a.sent();

          _a.label = 3;

        case 3:
          state = iterate(state);
          return [3, 1];

        case 4:
          return [2];
      }
    });
  }

  return (0, _defer.defer)(scheduler ? function () {
    return (0, _scheduleIterable.scheduleIterable)(gen(), scheduler);
  } : gen);
}

},{"../scheduled/scheduleIterable":908,"../util/identity":951,"../util/isScheduler":961,"./defer":767,"tslib":969}],776:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.iif = iif;

var _defer = require("./defer");

function iif(condition, trueResult, falseResult) {
  return (0, _defer.defer)(function () {
    return condition() ? trueResult : falseResult;
  });
}

},{"./defer":767}],777:[function(require,module,exports){
(function (process){(function (){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fromArrayLike = fromArrayLike;
exports.fromAsyncIterable = fromAsyncIterable;
exports.fromInteropObservable = fromInteropObservable;
exports.fromIterable = fromIterable;
exports.fromPromise = fromPromise;
exports.fromReadableStreamLike = fromReadableStreamLike;
exports.innerFrom = innerFrom;

var _tslib = require("tslib");

var _isArrayLike = require("../util/isArrayLike");

var _isPromise = require("../util/isPromise");

var _Observable = require("../Observable");

var _isInteropObservable = require("../util/isInteropObservable");

var _isAsyncIterable = require("../util/isAsyncIterable");

var _throwUnobservableError = require("../util/throwUnobservableError");

var _isIterable = require("../util/isIterable");

var _isReadableStreamLike = require("../util/isReadableStreamLike");

var _isFunction = require("../util/isFunction");

var _reportUnhandledError = require("../util/reportUnhandledError");

var _observable = require("../symbol/observable");

function innerFrom(input) {
  if (input instanceof _Observable.Observable) {
    return input;
  }

  if (input != null) {
    if ((0, _isInteropObservable.isInteropObservable)(input)) {
      return fromInteropObservable(input);
    }

    if ((0, _isArrayLike.isArrayLike)(input)) {
      return fromArrayLike(input);
    }

    if ((0, _isPromise.isPromise)(input)) {
      return fromPromise(input);
    }

    if ((0, _isAsyncIterable.isAsyncIterable)(input)) {
      return fromAsyncIterable(input);
    }

    if ((0, _isIterable.isIterable)(input)) {
      return fromIterable(input);
    }

    if ((0, _isReadableStreamLike.isReadableStreamLike)(input)) {
      return fromReadableStreamLike(input);
    }
  }

  throw (0, _throwUnobservableError.createInvalidObservableTypeError)(input);
}

function fromInteropObservable(obj) {
  return new _Observable.Observable(function (subscriber) {
    var obs = obj[_observable.observable]();

    if ((0, _isFunction.isFunction)(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }

    throw new TypeError('Provided object does not correctly implement Symbol.observable');
  });
}

function fromArrayLike(array) {
  return new _Observable.Observable(function (subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }

    subscriber.complete();
  });
}

function fromPromise(promise) {
  return new _Observable.Observable(function (subscriber) {
    promise.then(function (value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function (err) {
      return subscriber.error(err);
    }).then(null, _reportUnhandledError.reportUnhandledError);
  });
}

function fromIterable(iterable) {
  return new _Observable.Observable(function (subscriber) {
    var e_1, _a;

    try {
      for (var iterable_1 = (0, _tslib.__values)(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);

        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    subscriber.complete();
  });
}

function fromAsyncIterable(asyncIterable) {
  return new _Observable.Observable(function (subscriber) {
    process(asyncIterable, subscriber).catch(function (err) {
      return subscriber.error(err);
    });
  });
}

function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable((0, _isReadableStreamLike.readableStreamLikeToAsyncGenerator)(readableStream));
}

function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;

  var e_2, _a;

  return (0, _tslib.__awaiter)(this, void 0, void 0, function () {
    var value, e_2_1;
    return (0, _tslib.__generator)(this, function (_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);

          asyncIterable_1 = (0, _tslib.__asyncValues)(asyncIterable);
          _b.label = 1;

        case 1:
          return [4, asyncIterable_1.next()];

        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);

          if (subscriber.closed) {
            return [2];
          }

          _b.label = 3;

        case 3:
          return [3, 1];

        case 4:
          return [3, 11];

        case 5:
          e_2_1 = _b.sent();
          e_2 = {
            error: e_2_1
          };
          return [3, 11];

        case 6:
          _b.trys.push([6,, 9, 10]);

          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
          return [4, _a.call(asyncIterable_1)];

        case 7:
          _b.sent();

          _b.label = 8;

        case 8:
          return [3, 10];

        case 9:
          if (e_2) throw e_2.error;
          return [7];

        case 10:
          return [7];

        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}

}).call(this)}).call(this,require('_process'))
},{"../Observable":751,"../symbol/observable":934,"../util/isArrayLike":952,"../util/isAsyncIterable":953,"../util/isFunction":955,"../util/isInteropObservable":956,"../util/isIterable":957,"../util/isPromise":959,"../util/isReadableStreamLike":960,"../util/reportUnhandledError":967,"../util/throwUnobservableError":968,"_process":976,"tslib":969}],778:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interval = interval;

var _async = require("../scheduler/async");

var _timer = require("./timer");

function interval(period, scheduler) {
  if (period === void 0) {
    period = 0;
  }

  if (scheduler === void 0) {
    scheduler = _async.asyncScheduler;
  }

  if (period < 0) {
    period = 0;
  }

  return (0, _timer.timer)(period, period, scheduler);
}

},{"../scheduler/async":926,"./timer":788}],779:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.merge = merge;

var _mergeAll = require("../operators/mergeAll");

var _innerFrom = require("./innerFrom");

var _empty = require("./empty");

var _args = require("../util/args");

var _from = require("./from");

function merge() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var scheduler = (0, _args.popScheduler)(args);
  var concurrent = (0, _args.popNumber)(args, Infinity);
  var sources = args;
  return !sources.length ? _empty.EMPTY : sources.length === 1 ? (0, _innerFrom.innerFrom)(sources[0]) : (0, _mergeAll.mergeAll)(concurrent)((0, _from.from)(sources, scheduler));
}

},{"../operators/mergeAll":843,"../util/args":943,"./empty":769,"./from":771,"./innerFrom":777}],780:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NEVER = void 0;
exports.never = never;

var _Observable = require("../Observable");

var _noop = require("../util/noop");

var NEVER = new _Observable.Observable(_noop.noop);
exports.NEVER = NEVER;

function never() {
  return NEVER;
}

},{"../Observable":751,"../util/noop":964}],781:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.of = of;

var _args = require("../util/args");

var _from = require("./from");

function of() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var scheduler = (0, _args.popScheduler)(args);
  return (0, _from.from)(args, scheduler);
}

},{"../util/args":943,"./from":771}],782:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onErrorResumeNext = onErrorResumeNext;

var _empty = require("./empty");

var _onErrorResumeNext = require("../operators/onErrorResumeNext");

var _argsOrArgArray = require("../util/argsOrArgArray");

function onErrorResumeNext() {
  var sources = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }

  return (0, _onErrorResumeNext.onErrorResumeNext)((0, _argsOrArgArray.argsOrArgArray)(sources))(_empty.EMPTY);
}

},{"../operators/onErrorResumeNext":852,"../util/argsOrArgArray":945,"./empty":769}],783:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pairs = pairs;

var _from = require("./from");

function pairs(obj, scheduler) {
  return (0, _from.from)(Object.entries(obj), scheduler);
}

},{"./from":771}],784:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.partition = partition;

var _not = require("../util/not");

var _filter = require("../operators/filter");

var _innerFrom = require("./innerFrom");

function partition(source, predicate, thisArg) {
  return [(0, _filter.filter)(predicate, thisArg)((0, _innerFrom.innerFrom)(source)), (0, _filter.filter)((0, _not.not)(predicate, thisArg))((0, _innerFrom.innerFrom)(source))];
}

},{"../operators/filter":827,"../util/not":965,"./innerFrom":777}],785:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.race = race;
exports.raceInit = raceInit;

var _Observable = require("../Observable");

var _innerFrom = require("./innerFrom");

var _argsOrArgArray = require("../util/argsOrArgArray");

var _OperatorSubscriber = require("../operators/OperatorSubscriber");

function race() {
  var sources = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }

  sources = (0, _argsOrArgArray.argsOrArgArray)(sources);
  return sources.length === 1 ? (0, _innerFrom.innerFrom)(sources[0]) : new _Observable.Observable(raceInit(sources));
}

function raceInit(sources) {
  return function (subscriber) {
    var subscriptions = [];

    var _loop_1 = function (i) {
      subscriptions.push((0, _innerFrom.innerFrom)(sources[i]).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
        if (subscriptions) {
          for (var s = 0; s < subscriptions.length; s++) {
            s !== i && subscriptions[s].unsubscribe();
          }

          subscriptions = null;
        }

        subscriber.next(value);
      })));
    };

    for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
      _loop_1(i);
    }
  };
}

},{"../Observable":751,"../operators/OperatorSubscriber":791,"../util/argsOrArgArray":945,"./innerFrom":777}],786:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.range = range;

var _Observable = require("../Observable");

var _empty = require("./empty");

function range(start, count, scheduler) {
  if (count == null) {
    count = start;
    start = 0;
  }

  if (count <= 0) {
    return _empty.EMPTY;
  }

  var end = count + start;
  return new _Observable.Observable(scheduler ? function (subscriber) {
    var n = start;
    return scheduler.schedule(function () {
      if (n < end) {
        subscriber.next(n++);
        this.schedule();
      } else {
        subscriber.complete();
      }
    });
  } : function (subscriber) {
    var n = start;

    while (n < end && !subscriber.closed) {
      subscriber.next(n++);
    }

    subscriber.complete();
  });
}

},{"../Observable":751,"./empty":769}],787:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throwError = throwError;

var _Observable = require("../Observable");

var _isFunction = require("../util/isFunction");

function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = (0, _isFunction.isFunction)(errorOrErrorFactory) ? errorOrErrorFactory : function () {
    return errorOrErrorFactory;
  };

  var init = function (subscriber) {
    return subscriber.error(errorFactory());
  };

  return new _Observable.Observable(scheduler ? function (subscriber) {
    return scheduler.schedule(init, 0, subscriber);
  } : init);
}

},{"../Observable":751,"../util/isFunction":955}],788:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timer = timer;

var _Observable = require("../Observable");

var _async = require("../scheduler/async");

var _isScheduler = require("../util/isScheduler");

var _isDate = require("../util/isDate");

function timer(dueTime, intervalOrScheduler, scheduler) {
  if (dueTime === void 0) {
    dueTime = 0;
  }

  if (scheduler === void 0) {
    scheduler = _async.async;
  }

  var intervalDuration = -1;

  if (intervalOrScheduler != null) {
    if ((0, _isScheduler.isScheduler)(intervalOrScheduler)) {
      scheduler = intervalOrScheduler;
    } else {
      intervalDuration = intervalOrScheduler;
    }
  }

  return new _Observable.Observable(function (subscriber) {
    var due = (0, _isDate.isValidDate)(dueTime) ? +dueTime - scheduler.now() : dueTime;

    if (due < 0) {
      due = 0;
    }

    var n = 0;
    return scheduler.schedule(function () {
      if (!subscriber.closed) {
        subscriber.next(n++);

        if (0 <= intervalDuration) {
          this.schedule(undefined, intervalDuration);
        } else {
          subscriber.complete();
        }
      }
    }, due);
  });
}

},{"../Observable":751,"../scheduler/async":926,"../util/isDate":954,"../util/isScheduler":961}],789:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.using = using;

var _Observable = require("../Observable");

var _innerFrom = require("./innerFrom");

var _empty = require("./empty");

function using(resourceFactory, observableFactory) {
  return new _Observable.Observable(function (subscriber) {
    var resource = resourceFactory();
    var result = observableFactory(resource);
    var source = result ? (0, _innerFrom.innerFrom)(result) : _empty.EMPTY;
    source.subscribe(subscriber);
    return function () {
      if (resource) {
        resource.unsubscribe();
      }
    };
  });
}

},{"../Observable":751,"./empty":769,"./innerFrom":777}],790:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zip = zip;

var _tslib = require("tslib");

var _Observable = require("../Observable");

var _innerFrom = require("./innerFrom");

var _argsOrArgArray = require("../util/argsOrArgArray");

var _empty = require("./empty");

var _OperatorSubscriber = require("../operators/OperatorSubscriber");

var _args = require("../util/args");

function zip() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var resultSelector = (0, _args.popResultSelector)(args);
  var sources = (0, _argsOrArgArray.argsOrArgArray)(args);
  return sources.length ? new _Observable.Observable(function (subscriber) {
    var buffers = sources.map(function () {
      return [];
    });
    var completed = sources.map(function () {
      return false;
    });
    subscriber.add(function () {
      buffers = completed = null;
    });

    var _loop_1 = function (sourceIndex) {
      (0, _innerFrom.innerFrom)(sources[sourceIndex]).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
        buffers[sourceIndex].push(value);

        if (buffers.every(function (buffer) {
          return buffer.length;
        })) {
          var result = buffers.map(function (buffer) {
            return buffer.shift();
          });
          subscriber.next(resultSelector ? resultSelector.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(result))) : result);

          if (buffers.some(function (buffer, i) {
            return !buffer.length && completed[i];
          })) {
            subscriber.complete();
          }
        }
      }, function () {
        completed[sourceIndex] = true;
        !buffers[sourceIndex].length && subscriber.complete();
      }));
    };

    for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
      _loop_1(sourceIndex);
    }

    return function () {
      buffers = completed = null;
    };
  }) : _empty.EMPTY;
}

},{"../Observable":751,"../operators/OperatorSubscriber":791,"../util/args":943,"../util/argsOrArgArray":945,"./empty":769,"./innerFrom":777,"tslib":969}],791:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OperatorSubscriber = void 0;

var _tslib = require("tslib");

var _Subscriber = require("../Subscriber");

var OperatorSubscriber = function (_super) {
  (0, _tslib.__extends)(OperatorSubscriber, _super);

  function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    var _this = _super.call(this, destination) || this;

    _this.onFinalize = onFinalize;
    _this._next = onNext ? function (value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function (err) {
      try {
        onError(err);
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function () {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }

  OperatorSubscriber.prototype.unsubscribe = function () {
    var _a;

    var closed = this.closed;

    _super.prototype.unsubscribe.call(this);

    !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
  };

  return OperatorSubscriber;
}(_Subscriber.Subscriber);

exports.OperatorSubscriber = OperatorSubscriber;

},{"../Subscriber":755,"tslib":969}],792:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.audit = audit;

var _lift = require("../util/lift");

var _innerFrom = require("../observable/innerFrom");

var _OperatorSubscriber = require("./OperatorSubscriber");

function audit(durationSelector) {
  return (0, _lift.operate)(function (source, subscriber) {
    var hasValue = false;
    var lastValue = null;
    var durationSubscriber = null;
    var isComplete = false;

    var endDuration = function () {
      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
      durationSubscriber = null;

      if (hasValue) {
        hasValue = false;
        var value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }

      isComplete && subscriber.complete();
    };

    var cleanupDuration = function () {
      durationSubscriber = null;
      isComplete && subscriber.complete();
    };

    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      hasValue = true;
      lastValue = value;

      if (!durationSubscriber) {
        (0, _innerFrom.innerFrom)(durationSelector(value)).subscribe(durationSubscriber = new _OperatorSubscriber.OperatorSubscriber(subscriber, endDuration, cleanupDuration));
      }
    }, function () {
      isComplete = true;
      (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
    }));
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"./OperatorSubscriber":791}],793:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.auditTime = auditTime;

var _async = require("../scheduler/async");

var _audit = require("./audit");

var _timer = require("../observable/timer");

function auditTime(duration, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }

  return (0, _audit.audit)(function () {
    return (0, _timer.timer)(duration, scheduler);
  });
}

},{"../observable/timer":788,"../scheduler/async":926,"./audit":792}],794:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buffer = buffer;

var _lift = require("../util/lift");

var _noop = require("../util/noop");

var _OperatorSubscriber = require("./OperatorSubscriber");

function buffer(closingNotifier) {
  return (0, _lift.operate)(function (source, subscriber) {
    var currentBuffer = [];
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      return currentBuffer.push(value);
    }, function () {
      subscriber.next(currentBuffer);
      subscriber.complete();
    }));
    closingNotifier.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function () {
      var b = currentBuffer;
      currentBuffer = [];
      subscriber.next(b);
    }, _noop.noop));
    return function () {
      currentBuffer = null;
    };
  });
}

},{"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791}],795:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bufferCount = bufferCount;

var _tslib = require("tslib");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _arrRemove = require("../util/arrRemove");

function bufferCount(bufferSize, startBufferEvery) {
  if (startBufferEvery === void 0) {
    startBufferEvery = null;
  }

  startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
  return (0, _lift.operate)(function (source, subscriber) {
    var buffers = [];
    var count = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var e_1, _a, e_2, _b;

      var toEmit = null;

      if (count++ % startBufferEvery === 0) {
        buffers.push([]);
      }

      try {
        for (var buffers_1 = (0, _tslib.__values)(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
          var buffer = buffers_1_1.value;
          buffer.push(value);

          if (bufferSize <= buffer.length) {
            toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
            toEmit.push(buffer);
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      if (toEmit) {
        try {
          for (var toEmit_1 = (0, _tslib.__values)(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {
            var buffer = toEmit_1_1.value;
            (0, _arrRemove.arrRemove)(buffers, buffer);
            subscriber.next(buffer);
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
    }, function () {
      var e_3, _a;

      try {
        for (var buffers_2 = (0, _tslib.__values)(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {
          var buffer = buffers_2_1.value;
          subscriber.next(buffer);
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      subscriber.complete();
    }, undefined, function () {
      buffers = null;
    }));
  });
}

},{"../util/arrRemove":946,"../util/lift":962,"./OperatorSubscriber":791,"tslib":969}],796:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bufferTime = bufferTime;

var _tslib = require("tslib");

var _Subscription = require("../Subscription");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _arrRemove = require("../util/arrRemove");

var _async = require("../scheduler/async");

var _args = require("../util/args");

var _executeSchedule = require("../util/executeSchedule");

function bufferTime(bufferTimeSpan) {
  var _a, _b;

  var otherArgs = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    otherArgs[_i - 1] = arguments[_i];
  }

  var scheduler = (_a = (0, _args.popScheduler)(otherArgs)) !== null && _a !== void 0 ? _a : _async.asyncScheduler;
  var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
  var maxBufferSize = otherArgs[1] || Infinity;
  return (0, _lift.operate)(function (source, subscriber) {
    var bufferRecords = [];
    var restartOnEmit = false;

    var emit = function (record) {
      var buffer = record.buffer,
          subs = record.subs;
      subs.unsubscribe();
      (0, _arrRemove.arrRemove)(bufferRecords, record);
      subscriber.next(buffer);
      restartOnEmit && startBuffer();
    };

    var startBuffer = function () {
      if (bufferRecords) {
        var subs = new _Subscription.Subscription();
        subscriber.add(subs);
        var buffer = [];
        var record_1 = {
          buffer: buffer,
          subs: subs
        };
        bufferRecords.push(record_1);
        (0, _executeSchedule.executeSchedule)(subs, scheduler, function () {
          return emit(record_1);
        }, bufferTimeSpan);
      }
    };

    if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
      (0, _executeSchedule.executeSchedule)(subscriber, scheduler, startBuffer, bufferCreationInterval, true);
    } else {
      restartOnEmit = true;
    }

    startBuffer();
    var bufferTimeSubscriber = new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var e_1, _a;

      var recordsCopy = bufferRecords.slice();

      try {
        for (var recordsCopy_1 = (0, _tslib.__values)(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {
          var record = recordsCopy_1_1.value;
          var buffer = record.buffer;
          buffer.push(value);
          maxBufferSize <= buffer.length && emit(record);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a = recordsCopy_1.return)) _a.call(recordsCopy_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }, function () {
      while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {
        subscriber.next(bufferRecords.shift().buffer);
      }

      bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
      subscriber.complete();
      subscriber.unsubscribe();
    }, undefined, function () {
      return bufferRecords = null;
    });
    source.subscribe(bufferTimeSubscriber);
  });
}

},{"../Subscription":756,"../scheduler/async":926,"../util/args":943,"../util/arrRemove":946,"../util/executeSchedule":950,"../util/lift":962,"./OperatorSubscriber":791,"tslib":969}],797:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bufferToggle = bufferToggle;

var _tslib = require("tslib");

var _Subscription = require("../Subscription");

var _lift = require("../util/lift");

var _innerFrom = require("../observable/innerFrom");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _noop = require("../util/noop");

var _arrRemove = require("../util/arrRemove");

function bufferToggle(openings, closingSelector) {
  return (0, _lift.operate)(function (source, subscriber) {
    var buffers = [];
    (0, _innerFrom.innerFrom)(openings).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (openValue) {
      var buffer = [];
      buffers.push(buffer);
      var closingSubscription = new _Subscription.Subscription();

      var emitBuffer = function () {
        (0, _arrRemove.arrRemove)(buffers, buffer);
        subscriber.next(buffer);
        closingSubscription.unsubscribe();
      };

      closingSubscription.add((0, _innerFrom.innerFrom)(closingSelector(openValue)).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, emitBuffer, _noop.noop)));
    }, _noop.noop));
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var e_1, _a;

      try {
        for (var buffers_1 = (0, _tslib.__values)(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
          var buffer = buffers_1_1.value;
          buffer.push(value);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }, function () {
      while (buffers.length > 0) {
        subscriber.next(buffers.shift());
      }

      subscriber.complete();
    }));
  });
}

},{"../Subscription":756,"../observable/innerFrom":777,"../util/arrRemove":946,"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791,"tslib":969}],798:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bufferWhen = bufferWhen;

var _lift = require("../util/lift");

var _noop = require("../util/noop");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _innerFrom = require("../observable/innerFrom");

function bufferWhen(closingSelector) {
  return (0, _lift.operate)(function (source, subscriber) {
    var buffer = null;
    var closingSubscriber = null;

    var openBuffer = function () {
      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
      var b = buffer;
      buffer = [];
      b && subscriber.next(b);
      (0, _innerFrom.innerFrom)(closingSelector()).subscribe(closingSubscriber = new _OperatorSubscriber.OperatorSubscriber(subscriber, openBuffer, _noop.noop));
    };

    openBuffer();
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      return buffer === null || buffer === void 0 ? void 0 : buffer.push(value);
    }, function () {
      buffer && subscriber.next(buffer);
      subscriber.complete();
    }, undefined, function () {
      return buffer = closingSubscriber = null;
    }));
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791}],799:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.catchError = catchError;

var _innerFrom = require("../observable/innerFrom");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _lift = require("../util/lift");

function catchError(selector) {
  return (0, _lift.operate)(function (source, subscriber) {
    var innerSub = null;
    var syncUnsub = false;
    var handledResult;
    innerSub = source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, undefined, undefined, function (err) {
      handledResult = (0, _innerFrom.innerFrom)(selector(err, catchError(selector)(source)));

      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));

    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"./OperatorSubscriber":791}],800:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineAll = void 0;

var _combineLatestAll = require("./combineLatestAll");

var combineAll = _combineLatestAll.combineLatestAll;
exports.combineAll = combineAll;

},{"./combineLatestAll":802}],801:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineLatest = combineLatest;

var _tslib = require("tslib");

var _combineLatest = require("../observable/combineLatest");

var _lift = require("../util/lift");

var _argsOrArgArray = require("../util/argsOrArgArray");

var _mapOneOrManyArgs = require("../util/mapOneOrManyArgs");

var _pipe = require("../util/pipe");

var _args = require("../util/args");

function combineLatest() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var resultSelector = (0, _args.popResultSelector)(args);
  return resultSelector ? (0, _pipe.pipe)(combineLatest.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args))), (0, _mapOneOrManyArgs.mapOneOrManyArgs)(resultSelector)) : (0, _lift.operate)(function (source, subscriber) {
    (0, _combineLatest.combineLatestInit)((0, _tslib.__spreadArray)([source], (0, _tslib.__read)((0, _argsOrArgArray.argsOrArgArray)(args))))(subscriber);
  });
}

},{"../observable/combineLatest":764,"../util/args":943,"../util/argsOrArgArray":945,"../util/lift":962,"../util/mapOneOrManyArgs":963,"../util/pipe":966,"tslib":969}],802:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineLatestAll = combineLatestAll;

var _combineLatest = require("../observable/combineLatest");

var _joinAllInternals = require("./joinAllInternals");

function combineLatestAll(project) {
  return (0, _joinAllInternals.joinAllInternals)(_combineLatest.combineLatest, project);
}

},{"../observable/combineLatest":764,"./joinAllInternals":836}],803:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.combineLatestWith = combineLatestWith;

var _tslib = require("tslib");

var _combineLatest = require("./combineLatest");

function combineLatestWith() {
  var otherSources = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    otherSources[_i] = arguments[_i];
  }

  return _combineLatest.combineLatest.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(otherSources)));
}

},{"./combineLatest":801,"tslib":969}],804:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat = concat;

var _tslib = require("tslib");

var _lift = require("../util/lift");

var _concatAll = require("./concatAll");

var _args = require("../util/args");

var _from = require("../observable/from");

function concat() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var scheduler = (0, _args.popScheduler)(args);
  return (0, _lift.operate)(function (source, subscriber) {
    (0, _concatAll.concatAll)()((0, _from.from)((0, _tslib.__spreadArray)([source], (0, _tslib.__read)(args)), scheduler)).subscribe(subscriber);
  });
}

},{"../observable/from":771,"../util/args":943,"../util/lift":962,"./concatAll":805,"tslib":969}],805:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatAll = concatAll;

var _mergeAll = require("./mergeAll");

function concatAll() {
  return (0, _mergeAll.mergeAll)(1);
}

},{"./mergeAll":843}],806:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatMap = concatMap;

var _mergeMap = require("./mergeMap");

var _isFunction = require("../util/isFunction");

function concatMap(project, resultSelector) {
  return (0, _isFunction.isFunction)(resultSelector) ? (0, _mergeMap.mergeMap)(project, resultSelector, 1) : (0, _mergeMap.mergeMap)(project, 1);
}

},{"../util/isFunction":955,"./mergeMap":845}],807:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatMapTo = concatMapTo;

var _concatMap = require("./concatMap");

var _isFunction = require("../util/isFunction");

function concatMapTo(innerObservable, resultSelector) {
  return (0, _isFunction.isFunction)(resultSelector) ? (0, _concatMap.concatMap)(function () {
    return innerObservable;
  }, resultSelector) : (0, _concatMap.concatMap)(function () {
    return innerObservable;
  });
}

},{"../util/isFunction":955,"./concatMap":806}],808:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concatWith = concatWith;

var _tslib = require("tslib");

var _concat = require("./concat");

function concatWith() {
  var otherSources = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    otherSources[_i] = arguments[_i];
  }

  return _concat.concat.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(otherSources)));
}

},{"./concat":804,"tslib":969}],809:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connect = connect;

var _Subject = require("../Subject");

var _from = require("../observable/from");

var _lift = require("../util/lift");

var _fromSubscribable = require("../observable/fromSubscribable");

var DEFAULT_CONFIG = {
  connector: function () {
    return new _Subject.Subject();
  }
};

function connect(selector, config) {
  if (config === void 0) {
    config = DEFAULT_CONFIG;
  }

  var connector = config.connector;
  return (0, _lift.operate)(function (source, subscriber) {
    var subject = connector();
    (0, _from.from)(selector((0, _fromSubscribable.fromSubscribable)(subject))).subscribe(subscriber);
    subscriber.add(source.subscribe(subject));
  });
}

},{"../Subject":754,"../observable/from":771,"../observable/fromSubscribable":774,"../util/lift":962}],810:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.count = count;

var _reduce = require("./reduce");

function count(predicate) {
  return (0, _reduce.reduce)(function (total, value, i) {
    return !predicate || predicate(value, i) ? total + 1 : total;
  }, 0);
}

},{"./reduce":860}],811:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debounce = debounce;

var _lift = require("../util/lift");

var _noop = require("../util/noop");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _innerFrom = require("../observable/innerFrom");

function debounce(durationSelector) {
  return (0, _lift.operate)(function (source, subscriber) {
    var hasValue = false;
    var lastValue = null;
    var durationSubscriber = null;

    var emit = function () {
      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
      durationSubscriber = null;

      if (hasValue) {
        hasValue = false;
        var value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
    };

    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
      hasValue = true;
      lastValue = value;
      durationSubscriber = new _OperatorSubscriber.OperatorSubscriber(subscriber, emit, _noop.noop);
      (0, _innerFrom.innerFrom)(durationSelector(value)).subscribe(durationSubscriber);
    }, function () {
      emit();
      subscriber.complete();
    }, undefined, function () {
      lastValue = durationSubscriber = null;
    }));
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791}],812:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debounceTime = debounceTime;

var _async = require("../scheduler/async");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function debounceTime(dueTime, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.asyncScheduler;
  }

  return (0, _lift.operate)(function (source, subscriber) {
    var activeTask = null;
    var lastValue = null;
    var lastTime = null;

    var emit = function () {
      if (activeTask) {
        activeTask.unsubscribe();
        activeTask = null;
        var value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
    };

    function emitWhenIdle() {
      var targetTime = lastTime + dueTime;
      var now = scheduler.now();

      if (now < targetTime) {
        activeTask = this.schedule(undefined, targetTime - now);
        subscriber.add(activeTask);
        return;
      }

      emit();
    }

    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      lastValue = value;
      lastTime = scheduler.now();

      if (!activeTask) {
        activeTask = scheduler.schedule(emitWhenIdle, dueTime);
        subscriber.add(activeTask);
      }
    }, function () {
      emit();
      subscriber.complete();
    }, undefined, function () {
      lastValue = activeTask = null;
    }));
  });
}

},{"../scheduler/async":926,"../util/lift":962,"./OperatorSubscriber":791}],813:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultIfEmpty = defaultIfEmpty;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function defaultIfEmpty(defaultValue) {
  return (0, _lift.operate)(function (source, subscriber) {
    var hasValue = false;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      hasValue = true;
      subscriber.next(value);
    }, function () {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }

      subscriber.complete();
    }));
  });
}

},{"../util/lift":962,"./OperatorSubscriber":791}],814:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delay = delay;

var _async = require("../scheduler/async");

var _delayWhen = require("./delayWhen");

var _timer = require("../observable/timer");

function delay(due, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.asyncScheduler;
  }

  var duration = (0, _timer.timer)(due, scheduler);
  return (0, _delayWhen.delayWhen)(function () {
    return duration;
  });
}

},{"../observable/timer":788,"../scheduler/async":926,"./delayWhen":815}],815:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.delayWhen = delayWhen;

var _concat = require("../observable/concat");

var _take = require("./take");

var _ignoreElements = require("./ignoreElements");

var _mapTo = require("./mapTo");

var _mergeMap = require("./mergeMap");

function delayWhen(delayDurationSelector, subscriptionDelay) {
  if (subscriptionDelay) {
    return function (source) {
      return (0, _concat.concat)(subscriptionDelay.pipe((0, _take.take)(1), (0, _ignoreElements.ignoreElements)()), source.pipe(delayWhen(delayDurationSelector)));
    };
  }

  return (0, _mergeMap.mergeMap)(function (value, index) {
    return delayDurationSelector(value, index).pipe((0, _take.take)(1), (0, _mapTo.mapTo)(value));
  });
}

},{"../observable/concat":765,"./ignoreElements":834,"./mapTo":839,"./mergeMap":845,"./take":884}],816:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dematerialize = dematerialize;

var _Notification = require("../Notification");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function dematerialize() {
  return (0, _lift.operate)(function (source, subscriber) {
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (notification) {
      return (0, _Notification.observeNotification)(notification, subscriber);
    }));
  });
}

},{"../Notification":749,"../util/lift":962,"./OperatorSubscriber":791}],817:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.distinct = distinct;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _noop = require("../util/noop");

function distinct(keySelector, flushes) {
  return (0, _lift.operate)(function (source, subscriber) {
    var distinctKeys = new Set();
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var key = keySelector ? keySelector(value) : value;

      if (!distinctKeys.has(key)) {
        distinctKeys.add(key);
        subscriber.next(value);
      }
    }));
    flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function () {
      return distinctKeys.clear();
    }, _noop.noop));
  });
}

},{"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791}],818:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.distinctUntilChanged = distinctUntilChanged;

var _identity = require("../util/identity");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function distinctUntilChanged(comparator, keySelector) {
  if (keySelector === void 0) {
    keySelector = _identity.identity;
  }

  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return (0, _lift.operate)(function (source, subscriber) {
    var previousKey;
    var first = true;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var currentKey = keySelector(value);

      if (first || !comparator(previousKey, currentKey)) {
        first = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}

function defaultCompare(a, b) {
  return a === b;
}

},{"../util/identity":951,"../util/lift":962,"./OperatorSubscriber":791}],819:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.distinctUntilKeyChanged = distinctUntilKeyChanged;

var _distinctUntilChanged = require("./distinctUntilChanged");

function distinctUntilKeyChanged(key, compare) {
  return (0, _distinctUntilChanged.distinctUntilChanged)(function (x, y) {
    return compare ? compare(x[key], y[key]) : x[key] === y[key];
  });
}

},{"./distinctUntilChanged":818}],820:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elementAt = elementAt;

var _ArgumentOutOfRangeError = require("../util/ArgumentOutOfRangeError");

var _filter = require("./filter");

var _throwIfEmpty = require("./throwIfEmpty");

var _defaultIfEmpty = require("./defaultIfEmpty");

var _take = require("./take");

function elementAt(index, defaultValue) {
  if (index < 0) {
    throw new _ArgumentOutOfRangeError.ArgumentOutOfRangeError();
  }

  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe((0, _filter.filter)(function (v, i) {
      return i === index;
    }), (0, _take.take)(1), hasDefaultValue ? (0, _defaultIfEmpty.defaultIfEmpty)(defaultValue) : (0, _throwIfEmpty.throwIfEmpty)(function () {
      return new _ArgumentOutOfRangeError.ArgumentOutOfRangeError();
    }));
  };
}

},{"../util/ArgumentOutOfRangeError":936,"./defaultIfEmpty":813,"./filter":827,"./take":884,"./throwIfEmpty":891}],821:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.endWith = endWith;

var _tslib = require("tslib");

var _concat = require("../observable/concat");

var _of = require("../observable/of");

function endWith() {
  var values = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }

  return function (source) {
    return (0, _concat.concat)(source, _of.of.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(values))));
  };
}

},{"../observable/concat":765,"../observable/of":781,"tslib":969}],822:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.every = every;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function every(predicate, thisArg) {
  return (0, _lift.operate)(function (source, subscriber) {
    var index = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      if (!predicate.call(thisArg, value, index++, source)) {
        subscriber.next(false);
        subscriber.complete();
      }
    }, function () {
      subscriber.next(true);
      subscriber.complete();
    }));
  });
}

},{"../util/lift":962,"./OperatorSubscriber":791}],823:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exhaust = void 0;

var _exhaustAll = require("./exhaustAll");

var exhaust = _exhaustAll.exhaustAll;
exports.exhaust = exhaust;

},{"./exhaustAll":824}],824:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exhaustAll = exhaustAll;

var _lift = require("../util/lift");

var _innerFrom = require("../observable/innerFrom");

var _OperatorSubscriber = require("./OperatorSubscriber");

function exhaustAll() {
  return (0, _lift.operate)(function (source, subscriber) {
    var isComplete = false;
    var innerSub = null;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (inner) {
      if (!innerSub) {
        innerSub = (0, _innerFrom.innerFrom)(inner).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, undefined, function () {
          innerSub = null;
          isComplete && subscriber.complete();
        }));
      }
    }, function () {
      isComplete = true;
      !innerSub && subscriber.complete();
    }));
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"./OperatorSubscriber":791}],825:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.exhaustMap = exhaustMap;

var _map = require("./map");

var _innerFrom = require("../observable/innerFrom");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function exhaustMap(project, resultSelector) {
  if (resultSelector) {
    return function (source) {
      return source.pipe(exhaustMap(function (a, i) {
        return (0, _innerFrom.innerFrom)(project(a, i)).pipe((0, _map.map)(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }));
    };
  }

  return (0, _lift.operate)(function (source, subscriber) {
    var index = 0;
    var innerSub = null;
    var isComplete = false;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (outerValue) {
      if (!innerSub) {
        innerSub = new _OperatorSubscriber.OperatorSubscriber(subscriber, undefined, function () {
          innerSub = null;
          isComplete && subscriber.complete();
        });
        (0, _innerFrom.innerFrom)(project(outerValue, index++)).subscribe(innerSub);
      }
    }, function () {
      isComplete = true;
      !innerSub && subscriber.complete();
    }));
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"./OperatorSubscriber":791,"./map":838}],826:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expand = expand;

var _lift = require("../util/lift");

var _mergeInternals = require("./mergeInternals");

function expand(project, concurrent, scheduler) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }

  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
  return (0, _lift.operate)(function (source, subscriber) {
    return (0, _mergeInternals.mergeInternals)(source, subscriber, project, concurrent, undefined, true, scheduler);
  });
}

},{"../util/lift":962,"./mergeInternals":844}],827:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filter = filter;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function filter(predicate, thisArg) {
  return (0, _lift.operate)(function (source, subscriber) {
    var index = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      return predicate.call(thisArg, value, index++) && subscriber.next(value);
    }));
  });
}

},{"../util/lift":962,"./OperatorSubscriber":791}],828:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.finalize = finalize;

var _lift = require("../util/lift");

function finalize(callback) {
  return (0, _lift.operate)(function (source, subscriber) {
    try {
      source.subscribe(subscriber);
    } finally {
      subscriber.add(callback);
    }
  });
}

},{"../util/lift":962}],829:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFind = createFind;
exports.find = find;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function find(predicate, thisArg) {
  return (0, _lift.operate)(createFind(predicate, thisArg, 'value'));
}

function createFind(predicate, thisArg, emit) {
  var findIndex = emit === 'index';
  return function (source, subscriber) {
    var index = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var i = index++;

      if (predicate.call(thisArg, value, i, source)) {
        subscriber.next(findIndex ? i : value);
        subscriber.complete();
      }
    }, function () {
      subscriber.next(findIndex ? -1 : undefined);
      subscriber.complete();
    }));
  };
}

},{"../util/lift":962,"./OperatorSubscriber":791}],830:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findIndex = findIndex;

var _lift = require("../util/lift");

var _find = require("./find");

function findIndex(predicate, thisArg) {
  return (0, _lift.operate)((0, _find.createFind)(predicate, thisArg, 'index'));
}

},{"../util/lift":962,"./find":829}],831:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.first = first;

var _EmptyError = require("../util/EmptyError");

var _filter = require("./filter");

var _take = require("./take");

var _defaultIfEmpty = require("./defaultIfEmpty");

var _throwIfEmpty = require("./throwIfEmpty");

var _identity = require("../util/identity");

function first(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe(predicate ? (0, _filter.filter)(function (v, i) {
      return predicate(v, i, source);
    }) : _identity.identity, (0, _take.take)(1), hasDefaultValue ? (0, _defaultIfEmpty.defaultIfEmpty)(defaultValue) : (0, _throwIfEmpty.throwIfEmpty)(function () {
      return new _EmptyError.EmptyError();
    }));
  };
}

},{"../util/EmptyError":937,"../util/identity":951,"./defaultIfEmpty":813,"./filter":827,"./take":884,"./throwIfEmpty":891}],832:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flatMap = void 0;

var _mergeMap = require("./mergeMap");

var flatMap = _mergeMap.mergeMap;
exports.flatMap = flatMap;

},{"./mergeMap":845}],833:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.groupBy = groupBy;

var _tslib = require("tslib");

var _Observable = require("../Observable");

var _innerFrom = require("../observable/innerFrom");

var _Subject = require("../Subject");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function groupBy(keySelector, elementOrOptions, duration, connector) {
  return (0, _lift.operate)(function (source, subscriber) {
    var element;

    if (!elementOrOptions || typeof elementOrOptions === 'function') {
      element = elementOrOptions;
    } else {
      duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;
    }

    var groups = new Map();

    var notify = function (cb) {
      groups.forEach(cb);
      cb(subscriber);
    };

    var handleError = function (err) {
      return notify(function (consumer) {
        return consumer.error(err);
      });
    };

    var groupBySourceSubscriber = new GroupBySubscriber(subscriber, function (value) {
      try {
        var key_1 = keySelector(value);
        var group_1 = groups.get(key_1);

        if (!group_1) {
          groups.set(key_1, group_1 = connector ? connector() : new _Subject.Subject());
          var grouped = createGroupedObservable(key_1, group_1);
          subscriber.next(grouped);

          if (duration) {
            var durationSubscriber_1 = new _OperatorSubscriber.OperatorSubscriber(group_1, function () {
              group_1.complete();
              durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
            }, undefined, undefined, function () {
              return groups.delete(key_1);
            });
            groupBySourceSubscriber.add((0, _innerFrom.innerFrom)(duration(grouped)).subscribe(durationSubscriber_1));
          }
        }

        group_1.next(element ? element(value) : value);
      } catch (err) {
        handleError(err);
      }
    }, function () {
      return notify(function (consumer) {
        return consumer.complete();
      });
    }, handleError, function () {
      return groups.clear();
    });
    source.subscribe(groupBySourceSubscriber);

    function createGroupedObservable(key, groupSubject) {
      var result = new _Observable.Observable(function (groupSubscriber) {
        groupBySourceSubscriber.activeGroups++;
        var innerSub = groupSubject.subscribe(groupSubscriber);
        return function () {
          innerSub.unsubscribe();
          --groupBySourceSubscriber.activeGroups === 0 && groupBySourceSubscriber.teardownAttempted && groupBySourceSubscriber.unsubscribe();
        };
      });
      result.key = key;
      return result;
    }
  });
}

var GroupBySubscriber = function (_super) {
  (0, _tslib.__extends)(GroupBySubscriber, _super);

  function GroupBySubscriber() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.activeGroups = 0;
    _this.teardownAttempted = false;
    return _this;
  }

  GroupBySubscriber.prototype.unsubscribe = function () {
    this.teardownAttempted = true;
    this.activeGroups === 0 && _super.prototype.unsubscribe.call(this);
  };

  return GroupBySubscriber;
}(_OperatorSubscriber.OperatorSubscriber);

},{"../Observable":751,"../Subject":754,"../observable/innerFrom":777,"../util/lift":962,"./OperatorSubscriber":791,"tslib":969}],834:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ignoreElements = ignoreElements;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _noop = require("../util/noop");

function ignoreElements() {
  return (0, _lift.operate)(function (source, subscriber) {
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, _noop.noop));
  });
}

},{"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791}],835:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEmpty = isEmpty;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function isEmpty() {
  return (0, _lift.operate)(function (source, subscriber) {
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function () {
      subscriber.next(false);
      subscriber.complete();
    }, function () {
      subscriber.next(true);
      subscriber.complete();
    }));
  });
}

},{"../util/lift":962,"./OperatorSubscriber":791}],836:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.joinAllInternals = joinAllInternals;

var _identity = require("../util/identity");

var _mapOneOrManyArgs = require("../util/mapOneOrManyArgs");

var _pipe = require("../util/pipe");

var _mergeMap = require("./mergeMap");

var _toArray = require("./toArray");

function joinAllInternals(joinFn, project) {
  return (0, _pipe.pipe)((0, _toArray.toArray)(), (0, _mergeMap.mergeMap)(function (sources) {
    return joinFn(sources);
  }), project ? (0, _mapOneOrManyArgs.mapOneOrManyArgs)(project) : _identity.identity);
}

},{"../util/identity":951,"../util/mapOneOrManyArgs":963,"../util/pipe":966,"./mergeMap":845,"./toArray":896}],837:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.last = last;

var _EmptyError = require("../util/EmptyError");

var _filter = require("./filter");

var _takeLast = require("./takeLast");

var _throwIfEmpty = require("./throwIfEmpty");

var _defaultIfEmpty = require("./defaultIfEmpty");

var _identity = require("../util/identity");

function last(predicate, defaultValue) {
  var hasDefaultValue = arguments.length >= 2;
  return function (source) {
    return source.pipe(predicate ? (0, _filter.filter)(function (v, i) {
      return predicate(v, i, source);
    }) : _identity.identity, (0, _takeLast.takeLast)(1), hasDefaultValue ? (0, _defaultIfEmpty.defaultIfEmpty)(defaultValue) : (0, _throwIfEmpty.throwIfEmpty)(function () {
      return new _EmptyError.EmptyError();
    }));
  };
}

},{"../util/EmptyError":937,"../util/identity":951,"./defaultIfEmpty":813,"./filter":827,"./takeLast":885,"./throwIfEmpty":891}],838:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.map = map;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function map(project, thisArg) {
  return (0, _lift.operate)(function (source, subscriber) {
    var index = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}

},{"../util/lift":962,"./OperatorSubscriber":791}],839:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapTo = mapTo;

var _map = require("./map");

function mapTo(value) {
  return (0, _map.map)(function () {
    return value;
  });
}

},{"./map":838}],840:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.materialize = materialize;

var _Notification = require("../Notification");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function materialize() {
  return (0, _lift.operate)(function (source, subscriber) {
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      subscriber.next(_Notification.Notification.createNext(value));
    }, function () {
      subscriber.next(_Notification.Notification.createComplete());
      subscriber.complete();
    }, function (err) {
      subscriber.next(_Notification.Notification.createError(err));
      subscriber.complete();
    }));
  });
}

},{"../Notification":749,"../util/lift":962,"./OperatorSubscriber":791}],841:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.max = max;

var _reduce = require("./reduce");

var _isFunction = require("../util/isFunction");

function max(comparer) {
  return (0, _reduce.reduce)((0, _isFunction.isFunction)(comparer) ? function (x, y) {
    return comparer(x, y) > 0 ? x : y;
  } : function (x, y) {
    return x > y ? x : y;
  });
}

},{"../util/isFunction":955,"./reduce":860}],842:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.merge = merge;

var _tslib = require("tslib");

var _lift = require("../util/lift");

var _argsOrArgArray = require("../util/argsOrArgArray");

var _mergeAll = require("./mergeAll");

var _args = require("../util/args");

var _from = require("../observable/from");

function merge() {
  var args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }

  var scheduler = (0, _args.popScheduler)(args);
  var concurrent = (0, _args.popNumber)(args, Infinity);
  args = (0, _argsOrArgArray.argsOrArgArray)(args);
  return (0, _lift.operate)(function (source, subscriber) {
    (0, _mergeAll.mergeAll)(concurrent)((0, _from.from)((0, _tslib.__spreadArray)([source], (0, _tslib.__read)(args)), scheduler)).subscribe(subscriber);
  });
}

},{"../observable/from":771,"../util/args":943,"../util/argsOrArgArray":945,"../util/lift":962,"./mergeAll":843,"tslib":969}],843:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeAll = mergeAll;

var _mergeMap = require("./mergeMap");

var _identity = require("../util/identity");

function mergeAll(concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }

  return (0, _mergeMap.mergeMap)(_identity.identity, concurrent);
}

},{"../util/identity":951,"./mergeMap":845}],844:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeInternals = mergeInternals;

var _innerFrom = require("../observable/innerFrom");

var _executeSchedule = require("../util/executeSchedule");

var _OperatorSubscriber = require("./OperatorSubscriber");

function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalTeardown) {
  var buffer = [];
  var active = 0;
  var index = 0;
  var isComplete = false;

  var checkComplete = function () {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };

  var outerNext = function (value) {
    return active < concurrent ? doInnerSub(value) : buffer.push(value);
  };

  var doInnerSub = function (value) {
    expand && subscriber.next(value);
    active++;
    var innerComplete = false;
    (0, _innerFrom.innerFrom)(project(value, index++)).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (innerValue) {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);

      if (expand) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, function () {
      innerComplete = true;
    }, undefined, function () {
      if (innerComplete) {
        try {
          active--;

          var _loop_1 = function () {
            var bufferedValue = buffer.shift();

            if (innerSubScheduler) {
              (0, _executeSchedule.executeSchedule)(subscriber, innerSubScheduler, function () {
                return doInnerSub(bufferedValue);
              });
            } else {
              doInnerSub(bufferedValue);
            }
          };

          while (buffer.length && active < concurrent) {
            _loop_1();
          }

          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };

  source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, outerNext, function () {
    isComplete = true;
    checkComplete();
  }));
  return function () {
    additionalTeardown === null || additionalTeardown === void 0 ? void 0 : additionalTeardown();
  };
}

},{"../observable/innerFrom":777,"../util/executeSchedule":950,"./OperatorSubscriber":791}],845:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeMap = mergeMap;

var _map = require("./map");

var _innerFrom = require("../observable/innerFrom");

var _lift = require("../util/lift");

var _mergeInternals = require("./mergeInternals");

var _isFunction = require("../util/isFunction");

function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }

  if ((0, _isFunction.isFunction)(resultSelector)) {
    return mergeMap(function (a, i) {
      return (0, _map.map)(function (b, ii) {
        return resultSelector(a, b, i, ii);
      })((0, _innerFrom.innerFrom)(project(a, i)));
    }, concurrent);
  } else if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }

  return (0, _lift.operate)(function (source, subscriber) {
    return (0, _mergeInternals.mergeInternals)(source, subscriber, project, concurrent);
  });
}

},{"../observable/innerFrom":777,"../util/isFunction":955,"../util/lift":962,"./map":838,"./mergeInternals":844}],846:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeMapTo = mergeMapTo;

var _mergeMap = require("./mergeMap");

var _isFunction = require("../util/isFunction");

function mergeMapTo(innerObservable, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }

  if ((0, _isFunction.isFunction)(resultSelector)) {
    return (0, _mergeMap.mergeMap)(function () {
      return innerObservable;
    }, resultSelector, concurrent);
  }

  if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }

  return (0, _mergeMap.mergeMap)(function () {
    return innerObservable;
  }, concurrent);
}

},{"../util/isFunction":955,"./mergeMap":845}],847:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeScan = mergeScan;

var _lift = require("../util/lift");

var _mergeInternals = require("./mergeInternals");

function mergeScan(accumulator, seed, concurrent) {
  if (concurrent === void 0) {
    concurrent = Infinity;
  }

  return (0, _lift.operate)(function (source, subscriber) {
    var state = seed;
    return (0, _mergeInternals.mergeInternals)(source, subscriber, function (value, index) {
      return accumulator(state, value, index);
    }, concurrent, function (value) {
      state = value;
    }, false, undefined, function () {
      return state = null;
    });
  });
}

},{"../util/lift":962,"./mergeInternals":844}],848:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeWith = mergeWith;

var _tslib = require("tslib");

var _merge = require("./merge");

function mergeWith() {
  var otherSources = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    otherSources[_i] = arguments[_i];
  }

  return _merge.merge.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(otherSources)));
}

},{"./merge":842,"tslib":969}],849:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.min = min;

var _reduce = require("./reduce");

var _isFunction = require("../util/isFunction");

function min(comparer) {
  return (0, _reduce.reduce)((0, _isFunction.isFunction)(comparer) ? function (x, y) {
    return comparer(x, y) < 0 ? x : y;
  } : function (x, y) {
    return x < y ? x : y;
  });
}

},{"../util/isFunction":955,"./reduce":860}],850:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.multicast = multicast;

var _ConnectableObservable = require("../observable/ConnectableObservable");

var _isFunction = require("../util/isFunction");

var _connect = require("./connect");

function multicast(subjectOrSubjectFactory, selector) {
  var subjectFactory = (0, _isFunction.isFunction)(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () {
    return subjectOrSubjectFactory;
  };

  if ((0, _isFunction.isFunction)(selector)) {
    return (0, _connect.connect)(selector, {
      connector: subjectFactory
    });
  }

  return function (source) {
    return new _ConnectableObservable.ConnectableObservable(source, subjectFactory);
  };
}

},{"../observable/ConnectableObservable":760,"../util/isFunction":955,"./connect":809}],851:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observeOn = observeOn;

var _executeSchedule = require("../util/executeSchedule");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function observeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }

  return (0, _lift.operate)(function (source, subscriber) {
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      return (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function () {
        return subscriber.next(value);
      }, delay);
    }, function () {
      return (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function () {
        return subscriber.complete();
      }, delay);
    }, function (err) {
      return (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function () {
        return subscriber.error(err);
      }, delay);
    }));
  });
}

},{"../util/executeSchedule":950,"../util/lift":962,"./OperatorSubscriber":791}],852:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onErrorResumeNext = onErrorResumeNext;

var _tslib = require("tslib");

var _lift = require("../util/lift");

var _innerFrom = require("../observable/innerFrom");

var _argsOrArgArray = require("../util/argsOrArgArray");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _noop = require("../util/noop");

function onErrorResumeNext() {
  var sources = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }

  var nextSources = (0, _argsOrArgArray.argsOrArgArray)(sources);
  return (0, _lift.operate)(function (source, subscriber) {
    var remaining = (0, _tslib.__spreadArray)([source], (0, _tslib.__read)(nextSources));

    var subscribeNext = function () {
      if (!subscriber.closed) {
        if (remaining.length > 0) {
          var nextSource = void 0;

          try {
            nextSource = (0, _innerFrom.innerFrom)(remaining.shift());
          } catch (err) {
            subscribeNext();
            return;
          }

          var innerSub = new _OperatorSubscriber.OperatorSubscriber(subscriber, undefined, _noop.noop, _noop.noop);
          subscriber.add(nextSource.subscribe(innerSub));
          innerSub.add(subscribeNext);
        } else {
          subscriber.complete();
        }
      }
    };

    subscribeNext();
  });
}

},{"../observable/innerFrom":777,"../util/argsOrArgArray":945,"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791,"tslib":969}],853:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pairwise = pairwise;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function pairwise() {
  return (0, _lift.operate)(function (source, subscriber) {
    var prev;
    var hasPrev = false;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var p = prev;
      prev = value;
      hasPrev && subscriber.next([p, value]);
      hasPrev = true;
    }));
  });
}

},{"../util/lift":962,"./OperatorSubscriber":791}],854:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pluck = pluck;

var _map = require("./map");

function pluck() {
  var properties = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    properties[_i] = arguments[_i];
  }

  var length = properties.length;

  if (length === 0) {
    throw new Error('list of properties cannot be empty.');
  }

  return (0, _map.map)(function (x) {
    var currentProp = x;

    for (var i = 0; i < length; i++) {
      var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];

      if (typeof p !== 'undefined') {
        currentProp = p;
      } else {
        return undefined;
      }
    }

    return currentProp;
  });
}

},{"./map":838}],855:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publish = publish;

var _Subject = require("../Subject");

var _multicast = require("./multicast");

var _connect = require("./connect");

function publish(selector) {
  return selector ? function (source) {
    return (0, _connect.connect)(selector)(source);
  } : function (source) {
    return (0, _multicast.multicast)(new _Subject.Subject())(source);
  };
}

},{"../Subject":754,"./connect":809,"./multicast":850}],856:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publishBehavior = publishBehavior;

var _BehaviorSubject = require("../BehaviorSubject");

var _ConnectableObservable = require("../observable/ConnectableObservable");

function publishBehavior(initialValue) {
  return function (source) {
    var subject = new _BehaviorSubject.BehaviorSubject(initialValue);
    return new _ConnectableObservable.ConnectableObservable(source, function () {
      return subject;
    });
  };
}

},{"../BehaviorSubject":748,"../observable/ConnectableObservable":760}],857:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publishLast = publishLast;

var _AsyncSubject = require("../AsyncSubject");

var _ConnectableObservable = require("../observable/ConnectableObservable");

function publishLast() {
  return function (source) {
    var subject = new _AsyncSubject.AsyncSubject();
    return new _ConnectableObservable.ConnectableObservable(source, function () {
      return subject;
    });
  };
}

},{"../AsyncSubject":747,"../observable/ConnectableObservable":760}],858:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.publishReplay = publishReplay;

var _ReplaySubject = require("../ReplaySubject");

var _multicast = require("./multicast");

var _isFunction = require("../util/isFunction");

function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
  if (selectorOrScheduler && !(0, _isFunction.isFunction)(selectorOrScheduler)) {
    timestampProvider = selectorOrScheduler;
  }

  var selector = (0, _isFunction.isFunction)(selectorOrScheduler) ? selectorOrScheduler : undefined;
  return function (source) {
    return (0, _multicast.multicast)(new _ReplaySubject.ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);
  };
}

},{"../ReplaySubject":752,"../util/isFunction":955,"./multicast":850}],859:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.raceWith = raceWith;

var _tslib = require("tslib");

var _race = require("../observable/race");

var _lift = require("../util/lift");

var _identity = require("../util/identity");

function raceWith() {
  var otherSources = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    otherSources[_i] = arguments[_i];
  }

  return !otherSources.length ? _identity.identity : (0, _lift.operate)(function (source, subscriber) {
    (0, _race.raceInit)((0, _tslib.__spreadArray)([source], (0, _tslib.__read)(otherSources)))(subscriber);
  });
}

},{"../observable/race":785,"../util/identity":951,"../util/lift":962,"tslib":969}],860:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reduce = reduce;

var _scanInternals = require("./scanInternals");

var _lift = require("../util/lift");

function reduce(accumulator, seed) {
  return (0, _lift.operate)((0, _scanInternals.scanInternals)(accumulator, seed, arguments.length >= 2, false, true));
}

},{"../util/lift":962,"./scanInternals":869}],861:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.refCount = refCount;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function refCount() {
  return (0, _lift.operate)(function (source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = new _OperatorSubscriber.OperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }

      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;

      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }

      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);

    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

},{"../util/lift":962,"./OperatorSubscriber":791}],862:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.repeat = repeat;

var _empty = require("../observable/empty");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function repeat(count) {
  if (count === void 0) {
    count = Infinity;
  }

  return count <= 0 ? function () {
    return _empty.EMPTY;
  } : (0, _lift.operate)(function (source, subscriber) {
    var soFar = 0;
    var innerSub;

    var subscribeForRepeat = function () {
      var syncUnsub = false;
      innerSub = source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, undefined, function () {
        if (++soFar < count) {
          if (innerSub) {
            innerSub.unsubscribe();
            innerSub = null;
            subscribeForRepeat();
          } else {
            syncUnsub = true;
          }
        } else {
          subscriber.complete();
        }
      }));

      if (syncUnsub) {
        innerSub.unsubscribe();
        innerSub = null;
        subscribeForRepeat();
      }
    };

    subscribeForRepeat();
  });
}

},{"../observable/empty":769,"../util/lift":962,"./OperatorSubscriber":791}],863:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.repeatWhen = repeatWhen;

var _Subject = require("../Subject");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function repeatWhen(notifier) {
  return (0, _lift.operate)(function (source, subscriber) {
    var innerSub;
    var syncResub = false;
    var completions$;
    var isNotifierComplete = false;
    var isMainComplete = false;

    var checkComplete = function () {
      return isMainComplete && isNotifierComplete && (subscriber.complete(), true);
    };

    var getCompletionSubject = function () {
      if (!completions$) {
        completions$ = new _Subject.Subject();
        notifier(completions$).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function () {
          if (innerSub) {
            subscribeForRepeatWhen();
          } else {
            syncResub = true;
          }
        }, function () {
          isNotifierComplete = true;
          checkComplete();
        }));
      }

      return completions$;
    };

    var subscribeForRepeatWhen = function () {
      isMainComplete = false;
      innerSub = source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, undefined, function () {
        isMainComplete = true;
        !checkComplete() && getCompletionSubject().next();
      }));

      if (syncResub) {
        innerSub.unsubscribe();
        innerSub = null;
        syncResub = false;
        subscribeForRepeatWhen();
      }
    };

    subscribeForRepeatWhen();
  });
}

},{"../Subject":754,"../util/lift":962,"./OperatorSubscriber":791}],864:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.retry = retry;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _identity = require("../util/identity");

var _timer = require("../observable/timer");

var _innerFrom = require("../observable/innerFrom");

function retry(configOrCount) {
  if (configOrCount === void 0) {
    configOrCount = Infinity;
  }

  var config;

  if (configOrCount && typeof configOrCount === 'object') {
    config = configOrCount;
  } else {
    config = {
      count: configOrCount
    };
  }

  var _a = config.count,
      count = _a === void 0 ? Infinity : _a,
      delay = config.delay,
      _b = config.resetOnSuccess,
      resetOnSuccess = _b === void 0 ? false : _b;
  return count <= 0 ? _identity.identity : (0, _lift.operate)(function (source, subscriber) {
    var soFar = 0;
    var innerSub;

    var subscribeForRetry = function () {
      var syncUnsub = false;
      innerSub = source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
        if (resetOnSuccess) {
          soFar = 0;
        }

        subscriber.next(value);
      }, undefined, function (err) {
        if (soFar++ < count) {
          var resub_1 = function () {
            if (innerSub) {
              innerSub.unsubscribe();
              innerSub = null;
              subscribeForRetry();
            } else {
              syncUnsub = true;
            }
          };

          if (delay != null) {
            var notifier = typeof delay === 'number' ? (0, _timer.timer)(delay) : (0, _innerFrom.innerFrom)(delay(err, soFar));
            var notifierSubscriber_1 = new _OperatorSubscriber.OperatorSubscriber(subscriber, function () {
              notifierSubscriber_1.unsubscribe();
              resub_1();
            }, function () {
              subscriber.complete();
            });
            notifier.subscribe(notifierSubscriber_1);
          } else {
            resub_1();
          }
        } else {
          subscriber.error(err);
        }
      }));

      if (syncUnsub) {
        innerSub.unsubscribe();
        innerSub = null;
        subscribeForRetry();
      }
    };

    subscribeForRetry();
  });
}

},{"../observable/innerFrom":777,"../observable/timer":788,"../util/identity":951,"../util/lift":962,"./OperatorSubscriber":791}],865:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.retryWhen = retryWhen;

var _Subject = require("../Subject");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function retryWhen(notifier) {
  return (0, _lift.operate)(function (source, subscriber) {
    var innerSub;
    var syncResub = false;
    var errors$;

    var subscribeForRetryWhen = function () {
      innerSub = source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, undefined, undefined, function (err) {
        if (!errors$) {
          errors$ = new _Subject.Subject();
          notifier(errors$).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function () {
            return innerSub ? subscribeForRetryWhen() : syncResub = true;
          }));
        }

        if (errors$) {
          errors$.next(err);
        }
      }));

      if (syncResub) {
        innerSub.unsubscribe();
        innerSub = null;
        syncResub = false;
        subscribeForRetryWhen();
      }
    };

    subscribeForRetryWhen();
  });
}

},{"../Subject":754,"../util/lift":962,"./OperatorSubscriber":791}],866:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sample = sample;

var _lift = require("../util/lift");

var _noop = require("../util/noop");

var _OperatorSubscriber = require("./OperatorSubscriber");

function sample(notifier) {
  return (0, _lift.operate)(function (source, subscriber) {
    var hasValue = false;
    var lastValue = null;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      hasValue = true;
      lastValue = value;
    }));

    var emit = function () {
      if (hasValue) {
        hasValue = false;
        var value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
    };

    notifier.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, emit, _noop.noop));
  });
}

},{"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791}],867:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sampleTime = sampleTime;

var _async = require("../scheduler/async");

var _sample = require("./sample");

var _interval = require("../observable/interval");

function sampleTime(period, scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.asyncScheduler;
  }

  return (0, _sample.sample)((0, _interval.interval)(period, scheduler));
}

},{"../observable/interval":778,"../scheduler/async":926,"./sample":866}],868:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scan = scan;

var _lift = require("../util/lift");

var _scanInternals = require("./scanInternals");

function scan(accumulator, seed) {
  return (0, _lift.operate)((0, _scanInternals.scanInternals)(accumulator, seed, arguments.length >= 2, true));
}

},{"../util/lift":962,"./scanInternals":869}],869:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scanInternals = scanInternals;

var _OperatorSubscriber = require("./OperatorSubscriber");

function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return function (source, subscriber) {
    var hasState = hasSeed;
    var state = seed;
    var index = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var i = index++;
      state = hasState ? accumulator(state, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state);
    }, emitBeforeComplete && function () {
      hasState && subscriber.next(state);
      subscriber.complete();
    }));
  };
}

},{"./OperatorSubscriber":791}],870:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sequenceEqual = sequenceEqual;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function sequenceEqual(compareTo, comparator) {
  if (comparator === void 0) {
    comparator = function (a, b) {
      return a === b;
    };
  }

  return (0, _lift.operate)(function (source, subscriber) {
    var aState = createState();
    var bState = createState();

    var emit = function (isEqual) {
      subscriber.next(isEqual);
      subscriber.complete();
    };

    var createSubscriber = function (selfState, otherState) {
      var sequenceEqualSubscriber = new _OperatorSubscriber.OperatorSubscriber(subscriber, function (a) {
        var buffer = otherState.buffer,
            complete = otherState.complete;

        if (buffer.length === 0) {
          complete ? emit(false) : selfState.buffer.push(a);
        } else {
          !comparator(a, buffer.shift()) && emit(false);
        }
      }, function () {
        selfState.complete = true;
        var complete = otherState.complete,
            buffer = otherState.buffer;
        complete && emit(buffer.length === 0);
        sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
      });
      return sequenceEqualSubscriber;
    };

    source.subscribe(createSubscriber(aState, bState));
    compareTo.subscribe(createSubscriber(bState, aState));
  });
}

function createState() {
  return {
    buffer: [],
    complete: false
  };
}

},{"../util/lift":962,"./OperatorSubscriber":791}],871:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.share = share;

var _tslib = require("tslib");

var _from = require("../observable/from");

var _take = require("../operators/take");

var _Subject = require("../Subject");

var _Subscriber = require("../Subscriber");

var _lift = require("../util/lift");

function share(options) {
  if (options === void 0) {
    options = {};
  }

  var _a = options.connector,
      connector = _a === void 0 ? function () {
    return new _Subject.Subject();
  } : _a,
      _b = options.resetOnError,
      resetOnError = _b === void 0 ? true : _b,
      _c = options.resetOnComplete,
      resetOnComplete = _c === void 0 ? true : _c,
      _d = options.resetOnRefCountZero,
      resetOnRefCountZero = _d === void 0 ? true : _d;
  return function (wrapperSource) {
    var connection = null;
    var resetConnection = null;
    var subject = null;
    var refCount = 0;
    var hasCompleted = false;
    var hasErrored = false;

    var cancelReset = function () {
      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
      resetConnection = null;
    };

    var reset = function () {
      cancelReset();
      connection = subject = null;
      hasCompleted = hasErrored = false;
    };

    var resetAndUnsubscribe = function () {
      var conn = connection;
      reset();
      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
    };

    return (0, _lift.operate)(function (source, subscriber) {
      refCount++;

      if (!hasErrored && !hasCompleted) {
        cancelReset();
      }

      var dest = subject = subject !== null && subject !== void 0 ? subject : connector();
      subscriber.add(function () {
        refCount--;

        if (refCount === 0 && !hasErrored && !hasCompleted) {
          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
        }
      });
      dest.subscribe(subscriber);

      if (!connection) {
        connection = new _Subscriber.SafeSubscriber({
          next: function (value) {
            return dest.next(value);
          },
          error: function (err) {
            hasErrored = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnError, err);
            dest.error(err);
          },
          complete: function () {
            hasCompleted = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnComplete);
            dest.complete();
          }
        });
        (0, _from.from)(source).subscribe(connection);
      }
    })(wrapperSource);
  };
}

function handleReset(reset, on) {
  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  if (on === true) {
    reset();
    return null;
  }

  if (on === false) {
    return null;
  }

  return on.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args))).pipe((0, _take.take)(1)).subscribe(function () {
    return reset();
  });
}

},{"../Subject":754,"../Subscriber":755,"../observable/from":771,"../operators/take":884,"../util/lift":962,"tslib":969}],872:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shareReplay = shareReplay;

var _ReplaySubject = require("../ReplaySubject");

var _share = require("./share");

function shareReplay(configOrBufferSize, windowTime, scheduler) {
  var _a, _b;

  var bufferSize;
  var refCount = false;

  if (configOrBufferSize && typeof configOrBufferSize === 'object') {
    bufferSize = (_a = configOrBufferSize.bufferSize) !== null && _a !== void 0 ? _a : Infinity;
    windowTime = (_b = configOrBufferSize.windowTime) !== null && _b !== void 0 ? _b : Infinity;
    refCount = !!configOrBufferSize.refCount;
    scheduler = configOrBufferSize.scheduler;
  } else {
    bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
  }

  return (0, _share.share)({
    connector: function () {
      return new _ReplaySubject.ReplaySubject(bufferSize, windowTime, scheduler);
    },
    resetOnError: true,
    resetOnComplete: false,
    resetOnRefCountZero: refCount
  });
}

},{"../ReplaySubject":752,"./share":871}],873:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.single = single;

var _EmptyError = require("../util/EmptyError");

var _SequenceError = require("../util/SequenceError");

var _NotFoundError = require("../util/NotFoundError");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function single(predicate) {
  return (0, _lift.operate)(function (source, subscriber) {
    var hasValue = false;
    var singleValue;
    var seenValue = false;
    var index = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      seenValue = true;

      if (!predicate || predicate(value, index++, source)) {
        hasValue && subscriber.error(new _SequenceError.SequenceError('Too many matching values'));
        hasValue = true;
        singleValue = value;
      }
    }, function () {
      if (hasValue) {
        subscriber.next(singleValue);
        subscriber.complete();
      } else {
        subscriber.error(seenValue ? new _NotFoundError.NotFoundError('No matching values') : new _EmptyError.EmptyError());
      }
    }));
  });
}

},{"../util/EmptyError":937,"../util/NotFoundError":939,"../util/SequenceError":941,"../util/lift":962,"./OperatorSubscriber":791}],874:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.skip = skip;

var _filter = require("./filter");

function skip(count) {
  return (0, _filter.filter)(function (_, index) {
    return count <= index;
  });
}

},{"./filter":827}],875:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.skipLast = skipLast;

var _identity = require("../util/identity");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function skipLast(skipCount) {
  return skipCount <= 0 ? _identity.identity : (0, _lift.operate)(function (source, subscriber) {
    var ring = new Array(skipCount);
    var seen = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var valueIndex = seen++;

      if (valueIndex < skipCount) {
        ring[valueIndex] = value;
      } else {
        var index = valueIndex % skipCount;
        var oldValue = ring[index];
        ring[index] = value;
        subscriber.next(oldValue);
      }
    }));
    return function () {
      ring = null;
    };
  });
}

},{"../util/identity":951,"../util/lift":962,"./OperatorSubscriber":791}],876:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.skipUntil = skipUntil;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _innerFrom = require("../observable/innerFrom");

var _noop = require("../util/noop");

function skipUntil(notifier) {
  return (0, _lift.operate)(function (source, subscriber) {
    var taking = false;
    var skipSubscriber = new _OperatorSubscriber.OperatorSubscriber(subscriber, function () {
      skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
      taking = true;
    }, _noop.noop);
    (0, _innerFrom.innerFrom)(notifier).subscribe(skipSubscriber);
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      return taking && subscriber.next(value);
    }));
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791}],877:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.skipWhile = skipWhile;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function skipWhile(predicate) {
  return (0, _lift.operate)(function (source, subscriber) {
    var taking = false;
    var index = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      return (taking || (taking = !predicate(value, index++))) && subscriber.next(value);
    }));
  });
}

},{"../util/lift":962,"./OperatorSubscriber":791}],878:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startWith = startWith;

var _concat = require("../observable/concat");

var _args = require("../util/args");

var _lift = require("../util/lift");

function startWith() {
  var values = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    values[_i] = arguments[_i];
  }

  var scheduler = (0, _args.popScheduler)(values);
  return (0, _lift.operate)(function (source, subscriber) {
    (scheduler ? (0, _concat.concat)(values, source, scheduler) : (0, _concat.concat)(values, source)).subscribe(subscriber);
  });
}

},{"../observable/concat":765,"../util/args":943,"../util/lift":962}],879:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscribeOn = subscribeOn;

var _lift = require("../util/lift");

function subscribeOn(scheduler, delay) {
  if (delay === void 0) {
    delay = 0;
  }

  return (0, _lift.operate)(function (source, subscriber) {
    subscriber.add(scheduler.schedule(function () {
      return source.subscribe(subscriber);
    }, delay));
  });
}

},{"../util/lift":962}],880:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.switchAll = switchAll;

var _switchMap = require("./switchMap");

var _identity = require("../util/identity");

function switchAll() {
  return (0, _switchMap.switchMap)(_identity.identity);
}

},{"../util/identity":951,"./switchMap":881}],881:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.switchMap = switchMap;

var _innerFrom = require("../observable/innerFrom");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function switchMap(project, resultSelector) {
  return (0, _lift.operate)(function (source, subscriber) {
    var innerSubscriber = null;
    var index = 0;
    var isComplete = false;

    var checkComplete = function () {
      return isComplete && !innerSubscriber && subscriber.complete();
    };

    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      var innerIndex = 0;
      var outerIndex = index++;
      (0, _innerFrom.innerFrom)(project(value, outerIndex)).subscribe(innerSubscriber = new _OperatorSubscriber.OperatorSubscriber(subscriber, function (innerValue) {
        return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);
      }, function () {
        innerSubscriber = null;
        checkComplete();
      }));
    }, function () {
      isComplete = true;
      checkComplete();
    }));
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"./OperatorSubscriber":791}],882:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.switchMapTo = switchMapTo;

var _switchMap = require("./switchMap");

var _isFunction = require("../util/isFunction");

function switchMapTo(innerObservable, resultSelector) {
  return (0, _isFunction.isFunction)(resultSelector) ? (0, _switchMap.switchMap)(function () {
    return innerObservable;
  }, resultSelector) : (0, _switchMap.switchMap)(function () {
    return innerObservable;
  });
}

},{"../util/isFunction":955,"./switchMap":881}],883:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.switchScan = switchScan;

var _switchMap = require("./switchMap");

var _lift = require("../util/lift");

function switchScan(accumulator, seed) {
  return (0, _lift.operate)(function (source, subscriber) {
    var state = seed;
    (0, _switchMap.switchMap)(function (value, index) {
      return accumulator(state, value, index);
    }, function (_, innerValue) {
      return state = innerValue, innerValue;
    })(source).subscribe(subscriber);
    return function () {
      state = null;
    };
  });
}

},{"../util/lift":962,"./switchMap":881}],884:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.take = take;

var _empty = require("../observable/empty");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function take(count) {
  return count <= 0 ? function () {
    return _empty.EMPTY;
  } : (0, _lift.operate)(function (source, subscriber) {
    var seen = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      if (++seen <= count) {
        subscriber.next(value);

        if (count <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}

},{"../observable/empty":769,"../util/lift":962,"./OperatorSubscriber":791}],885:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.takeLast = takeLast;

var _tslib = require("tslib");

var _empty = require("../observable/empty");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function takeLast(count) {
  return count <= 0 ? function () {
    return _empty.EMPTY;
  } : (0, _lift.operate)(function (source, subscriber) {
    var buffer = [];
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      buffer.push(value);
      count < buffer.length && buffer.shift();
    }, function () {
      var e_1, _a;

      try {
        for (var buffer_1 = (0, _tslib.__values)(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
          var value = buffer_1_1.value;
          subscriber.next(value);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      subscriber.complete();
    }, undefined, function () {
      buffer = null;
    }));
  });
}

},{"../observable/empty":769,"../util/lift":962,"./OperatorSubscriber":791,"tslib":969}],886:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.takeUntil = takeUntil;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _innerFrom = require("../observable/innerFrom");

var _noop = require("../util/noop");

function takeUntil(notifier) {
  return (0, _lift.operate)(function (source, subscriber) {
    (0, _innerFrom.innerFrom)(notifier).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function () {
      return subscriber.complete();
    }, _noop.noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791}],887:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.takeWhile = takeWhile;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function takeWhile(predicate, inclusive) {
  if (inclusive === void 0) {
    inclusive = false;
  }

  return (0, _lift.operate)(function (source, subscriber) {
    var index = 0;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var result = predicate(value, index++);
      (result || inclusive) && subscriber.next(value);
      !result && subscriber.complete();
    }));
  });
}

},{"../util/lift":962,"./OperatorSubscriber":791}],888:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tap = tap;

var _isFunction = require("../util/isFunction");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _identity = require("../util/identity");

function tap(observerOrNext, error, complete) {
  var tapObserver = (0, _isFunction.isFunction)(observerOrNext) || error || complete ? {
    next: observerOrNext,
    error: error,
    complete: complete
  } : observerOrNext;
  return tapObserver ? (0, _lift.operate)(function (source, subscriber) {
    var _a;

    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
    var isUnsub = true;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var _a;

      (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
      subscriber.next(value);
    }, function () {
      var _a;

      isUnsub = false;
      (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
      subscriber.complete();
    }, function (err) {
      var _a;

      isUnsub = false;
      (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
      subscriber.error(err);
    }, function () {
      var _a, _b;

      if (isUnsub) {
        (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
      }

      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : _identity.identity;
}

},{"../util/identity":951,"../util/isFunction":955,"../util/lift":962,"./OperatorSubscriber":791}],889:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultThrottleConfig = void 0;
exports.throttle = throttle;

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _innerFrom = require("../observable/innerFrom");

var defaultThrottleConfig = {
  leading: true,
  trailing: false
};
exports.defaultThrottleConfig = defaultThrottleConfig;

function throttle(durationSelector, _a) {
  var _b = _a === void 0 ? defaultThrottleConfig : _a,
      leading = _b.leading,
      trailing = _b.trailing;

  return (0, _lift.operate)(function (source, subscriber) {
    var hasValue = false;
    var sendValue = null;
    var throttled = null;
    var isComplete = false;

    var endThrottling = function () {
      throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
      throttled = null;

      if (trailing) {
        send();
        isComplete && subscriber.complete();
      }
    };

    var cleanupThrottling = function () {
      throttled = null;
      isComplete && subscriber.complete();
    };

    var startThrottle = function (value) {
      return throttled = (0, _innerFrom.innerFrom)(durationSelector(value)).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, endThrottling, cleanupThrottling));
    };

    var send = function () {
      if (hasValue) {
        hasValue = false;
        var value = sendValue;
        sendValue = null;
        subscriber.next(value);
        !isComplete && startThrottle(value);
      }
    };

    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      hasValue = true;
      sendValue = value;
      !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
    }, function () {
      isComplete = true;
      !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
    }));
  });
}

},{"../observable/innerFrom":777,"../util/lift":962,"./OperatorSubscriber":791}],890:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throttleTime = throttleTime;

var _async = require("../scheduler/async");

var _throttle = require("./throttle");

var _timer = require("../observable/timer");

function throttleTime(duration, scheduler, config) {
  if (scheduler === void 0) {
    scheduler = _async.asyncScheduler;
  }

  if (config === void 0) {
    config = _throttle.defaultThrottleConfig;
  }

  var duration$ = (0, _timer.timer)(duration, scheduler);
  return (0, _throttle.throttle)(function () {
    return duration$;
  }, config);
}

},{"../observable/timer":788,"../scheduler/async":926,"./throttle":889}],891:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.throwIfEmpty = throwIfEmpty;

var _EmptyError = require("../util/EmptyError");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function throwIfEmpty(errorFactory) {
  if (errorFactory === void 0) {
    errorFactory = defaultErrorFactory;
  }

  return (0, _lift.operate)(function (source, subscriber) {
    var hasValue = false;
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      hasValue = true;
      subscriber.next(value);
    }, function () {
      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());
    }));
  });
}

function defaultErrorFactory() {
  return new _EmptyError.EmptyError();
}

},{"../util/EmptyError":937,"../util/lift":962,"./OperatorSubscriber":791}],892:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeInterval = void 0;
exports.timeInterval = timeInterval;

var _async = require("../scheduler/async");

var _scan = require("./scan");

var _defer = require("../observable/defer");

var _map = require("./map");

function timeInterval(scheduler) {
  if (scheduler === void 0) {
    scheduler = _async.async;
  }

  return function (source) {
    return (0, _defer.defer)(function () {
      return source.pipe((0, _scan.scan)(function (_a, value) {
        var current = _a.current;
        return {
          value: value,
          current: scheduler.now(),
          last: current
        };
      }, {
        current: scheduler.now(),
        value: undefined,
        last: undefined
      }), (0, _map.map)(function (_a) {
        var current = _a.current,
            last = _a.last,
            value = _a.value;
        return new TimeInterval(value, current - last);
      }));
    });
  };
}

var TimeInterval = function () {
  function TimeInterval(value, interval) {
    this.value = value;
    this.interval = interval;
  }

  return TimeInterval;
}();

exports.TimeInterval = TimeInterval;

},{"../observable/defer":767,"../scheduler/async":926,"./map":838,"./scan":868}],893:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeoutError = void 0;
exports.timeout = timeout;

var _async = require("../scheduler/async");

var _isDate = require("../util/isDate");

var _lift = require("../util/lift");

var _innerFrom = require("../observable/innerFrom");

var _createErrorClass = require("../util/createErrorClass");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _executeSchedule = require("../util/executeSchedule");

var TimeoutError = (0, _createErrorClass.createErrorClass)(function (_super) {
  return function TimeoutErrorImpl(info) {
    if (info === void 0) {
      info = null;
    }

    _super(this);

    this.message = 'Timeout has occurred';
    this.name = 'TimeoutError';
    this.info = info;
  };
});
exports.TimeoutError = TimeoutError;

function timeout(config, schedulerArg) {
  var _a = (0, _isDate.isValidDate)(config) ? {
    first: config
  } : typeof config === 'number' ? {
    each: config
  } : config,
      first = _a.first,
      each = _a.each,
      _b = _a.with,
      _with = _b === void 0 ? timeoutErrorFactory : _b,
      _c = _a.scheduler,
      scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : _async.asyncScheduler : _c,
      _d = _a.meta,
      meta = _d === void 0 ? null : _d;

  if (first == null && each == null) {
    throw new TypeError('No timeout provided.');
  }

  return (0, _lift.operate)(function (source, subscriber) {
    var originalSourceSubscription;
    var timerSubscription;
    var lastValue = null;
    var seen = 0;

    var startTimer = function (delay) {
      timerSubscription = (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function () {
        try {
          originalSourceSubscription.unsubscribe();
          (0, _innerFrom.innerFrom)(_with({
            meta: meta,
            lastValue: lastValue,
            seen: seen
          })).subscribe(subscriber);
        } catch (err) {
          subscriber.error(err);
        }
      }, delay);
    };

    originalSourceSubscription = source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
      seen++;
      subscriber.next(lastValue = value);
      each > 0 && startTimer(each);
    }, undefined, undefined, function () {
      if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
        timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
      }

      lastValue = null;
    }));
    startTimer(first != null ? typeof first === 'number' ? first : +first - scheduler.now() : each);
  });
}

function timeoutErrorFactory(info) {
  throw new TimeoutError(info);
}

},{"../observable/innerFrom":777,"../scheduler/async":926,"../util/createErrorClass":947,"../util/executeSchedule":950,"../util/isDate":954,"../util/lift":962,"./OperatorSubscriber":791}],894:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeoutWith = timeoutWith;

var _async = require("../scheduler/async");

var _isDate = require("../util/isDate");

var _timeout = require("./timeout");

function timeoutWith(due, withObservable, scheduler) {
  var first;
  var each;

  var _with;

  scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : _async.async;

  if ((0, _isDate.isValidDate)(due)) {
    first = due;
  } else if (typeof due === 'number') {
    each = due;
  }

  if (withObservable) {
    _with = function () {
      return withObservable;
    };
  } else {
    throw new TypeError('No observable provided to switch to');
  }

  if (first == null && each == null) {
    throw new TypeError('No timeout provided.');
  }

  return (0, _timeout.timeout)({
    first: first,
    each: each,
    scheduler: scheduler,
    with: _with
  });
}

},{"../scheduler/async":926,"../util/isDate":954,"./timeout":893}],895:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timestamp = timestamp;

var _dateTimestampProvider = require("../scheduler/dateTimestampProvider");

var _map = require("./map");

function timestamp(timestampProvider) {
  if (timestampProvider === void 0) {
    timestampProvider = _dateTimestampProvider.dateTimestampProvider;
  }

  return (0, _map.map)(function (value) {
    return {
      value: value,
      timestamp: timestampProvider.now()
    };
  });
}

},{"../scheduler/dateTimestampProvider":927,"./map":838}],896:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArray = toArray;

var _reduce = require("./reduce");

var _lift = require("../util/lift");

var arrReducer = function (arr, value) {
  return arr.push(value), arr;
};

function toArray() {
  return (0, _lift.operate)(function (source, subscriber) {
    (0, _reduce.reduce)(arrReducer, [])(source).subscribe(subscriber);
  });
}

},{"../util/lift":962,"./reduce":860}],897:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.window = window;

var _Subject = require("../Subject");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _noop = require("../util/noop");

function window(windowBoundaries) {
  return (0, _lift.operate)(function (source, subscriber) {
    var windowSubject = new _Subject.Subject();
    subscriber.next(windowSubject.asObservable());

    var errorHandler = function (err) {
      windowSubject.error(err);
      subscriber.error(err);
    };

    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value);
    }, function () {
      windowSubject.complete();
      subscriber.complete();
    }, errorHandler));
    windowBoundaries.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function () {
      windowSubject.complete();
      subscriber.next(windowSubject = new _Subject.Subject());
    }, _noop.noop, errorHandler));
    return function () {
      windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
      windowSubject = null;
    };
  });
}

},{"../Subject":754,"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791}],898:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.windowCount = windowCount;

var _tslib = require("tslib");

var _Subject = require("../Subject");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

function windowCount(windowSize, startWindowEvery) {
  if (startWindowEvery === void 0) {
    startWindowEvery = 0;
  }

  var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
  return (0, _lift.operate)(function (source, subscriber) {
    var windows = [new _Subject.Subject()];
    var starts = [];
    var count = 0;
    subscriber.next(windows[0].asObservable());
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var e_1, _a;

      try {
        for (var windows_1 = (0, _tslib.__values)(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {
          var window_1 = windows_1_1.value;
          window_1.next(value);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      var c = count - windowSize + 1;

      if (c >= 0 && c % startEvery === 0) {
        windows.shift().complete();
      }

      if (++count % startEvery === 0) {
        var window_2 = new _Subject.Subject();
        windows.push(window_2);
        subscriber.next(window_2.asObservable());
      }
    }, function () {
      while (windows.length > 0) {
        windows.shift().complete();
      }

      subscriber.complete();
    }, function (err) {
      while (windows.length > 0) {
        windows.shift().error(err);
      }

      subscriber.error(err);
    }, function () {
      starts = null;
      windows = null;
    }));
  });
}

},{"../Subject":754,"../util/lift":962,"./OperatorSubscriber":791,"tslib":969}],899:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.windowTime = windowTime;

var _Subject = require("../Subject");

var _async = require("../scheduler/async");

var _Subscription = require("../Subscription");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _arrRemove = require("../util/arrRemove");

var _args = require("../util/args");

var _executeSchedule = require("../util/executeSchedule");

function windowTime(windowTimeSpan) {
  var _a, _b;

  var otherArgs = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    otherArgs[_i - 1] = arguments[_i];
  }

  var scheduler = (_a = (0, _args.popScheduler)(otherArgs)) !== null && _a !== void 0 ? _a : _async.asyncScheduler;
  var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
  var maxWindowSize = otherArgs[1] || Infinity;
  return (0, _lift.operate)(function (source, subscriber) {
    var windowRecords = [];
    var restartOnClose = false;

    var closeWindow = function (record) {
      var window = record.window,
          subs = record.subs;
      window.complete();
      subs.unsubscribe();
      (0, _arrRemove.arrRemove)(windowRecords, record);
      restartOnClose && startWindow();
    };

    var startWindow = function () {
      if (windowRecords) {
        var subs = new _Subscription.Subscription();
        subscriber.add(subs);
        var window_1 = new _Subject.Subject();
        var record_1 = {
          window: window_1,
          subs: subs,
          seen: 0
        };
        windowRecords.push(record_1);
        subscriber.next(window_1.asObservable());
        (0, _executeSchedule.executeSchedule)(subs, scheduler, function () {
          return closeWindow(record_1);
        }, windowTimeSpan);
      }
    };

    if (windowCreationInterval !== null && windowCreationInterval >= 0) {
      (0, _executeSchedule.executeSchedule)(subscriber, scheduler, startWindow, windowCreationInterval, true);
    } else {
      restartOnClose = true;
    }

    startWindow();

    var loop = function (cb) {
      return windowRecords.slice().forEach(cb);
    };

    var terminate = function (cb) {
      loop(function (_a) {
        var window = _a.window;
        return cb(window);
      });
      cb(subscriber);
      subscriber.unsubscribe();
    };

    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      loop(function (record) {
        record.window.next(value);
        maxWindowSize <= ++record.seen && closeWindow(record);
      });
    }, function () {
      return terminate(function (consumer) {
        return consumer.complete();
      });
    }, function (err) {
      return terminate(function (consumer) {
        return consumer.error(err);
      });
    }));
    return function () {
      windowRecords = null;
    };
  });
}

},{"../Subject":754,"../Subscription":756,"../scheduler/async":926,"../util/args":943,"../util/arrRemove":946,"../util/executeSchedule":950,"../util/lift":962,"./OperatorSubscriber":791}],900:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.windowToggle = windowToggle;

var _tslib = require("tslib");

var _Subject = require("../Subject");

var _Subscription = require("../Subscription");

var _lift = require("../util/lift");

var _innerFrom = require("../observable/innerFrom");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _noop = require("../util/noop");

var _arrRemove = require("../util/arrRemove");

function windowToggle(openings, closingSelector) {
  return (0, _lift.operate)(function (source, subscriber) {
    var windows = [];

    var handleError = function (err) {
      while (0 < windows.length) {
        windows.shift().error(err);
      }

      subscriber.error(err);
    };

    (0, _innerFrom.innerFrom)(openings).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (openValue) {
      var window = new _Subject.Subject();
      windows.push(window);
      var closingSubscription = new _Subscription.Subscription();

      var closeWindow = function () {
        (0, _arrRemove.arrRemove)(windows, window);
        window.complete();
        closingSubscription.unsubscribe();
      };

      var closingNotifier;

      try {
        closingNotifier = (0, _innerFrom.innerFrom)(closingSelector(openValue));
      } catch (err) {
        handleError(err);
        return;
      }

      subscriber.next(window.asObservable());
      closingSubscription.add(closingNotifier.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, closeWindow, _noop.noop, handleError)));
    }, _noop.noop));
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      var e_1, _a;

      var windowsCopy = windows.slice();

      try {
        for (var windowsCopy_1 = (0, _tslib.__values)(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {
          var window_1 = windowsCopy_1_1.value;
          window_1.next(value);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    }, function () {
      while (0 < windows.length) {
        windows.shift().complete();
      }

      subscriber.complete();
    }, handleError, function () {
      while (0 < windows.length) {
        windows.shift().unsubscribe();
      }
    }));
  });
}

},{"../Subject":754,"../Subscription":756,"../observable/innerFrom":777,"../util/arrRemove":946,"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791,"tslib":969}],901:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.windowWhen = windowWhen;

var _Subject = require("../Subject");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _innerFrom = require("../observable/innerFrom");

function windowWhen(closingSelector) {
  return (0, _lift.operate)(function (source, subscriber) {
    var window;
    var closingSubscriber;

    var handleError = function (err) {
      window.error(err);
      subscriber.error(err);
    };

    var openWindow = function () {
      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
      window === null || window === void 0 ? void 0 : window.complete();
      window = new _Subject.Subject();
      subscriber.next(window.asObservable());
      var closingNotifier;

      try {
        closingNotifier = (0, _innerFrom.innerFrom)(closingSelector());
      } catch (err) {
        handleError(err);
        return;
      }

      closingNotifier.subscribe(closingSubscriber = new _OperatorSubscriber.OperatorSubscriber(subscriber, openWindow, openWindow, handleError));
    };

    openWindow();
    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      return window.next(value);
    }, function () {
      window.complete();
      subscriber.complete();
    }, handleError, function () {
      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
      window = null;
    }));
  });
}

},{"../Subject":754,"../observable/innerFrom":777,"../util/lift":962,"./OperatorSubscriber":791}],902:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withLatestFrom = withLatestFrom;

var _tslib = require("tslib");

var _lift = require("../util/lift");

var _OperatorSubscriber = require("./OperatorSubscriber");

var _innerFrom = require("../observable/innerFrom");

var _identity = require("../util/identity");

var _noop = require("../util/noop");

var _args = require("../util/args");

function withLatestFrom() {
  var inputs = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    inputs[_i] = arguments[_i];
  }

  var project = (0, _args.popResultSelector)(inputs);
  return (0, _lift.operate)(function (source, subscriber) {
    var len = inputs.length;
    var otherValues = new Array(len);
    var hasValue = inputs.map(function () {
      return false;
    });
    var ready = false;

    var _loop_1 = function (i) {
      (0, _innerFrom.innerFrom)(inputs[i]).subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
        otherValues[i] = value;

        if (!ready && !hasValue[i]) {
          hasValue[i] = true;
          (ready = hasValue.every(_identity.identity)) && (hasValue = null);
        }
      }, _noop.noop));
    };

    for (var i = 0; i < len; i++) {
      _loop_1(i);
    }

    source.subscribe(new _OperatorSubscriber.OperatorSubscriber(subscriber, function (value) {
      if (ready) {
        var values = (0, _tslib.__spreadArray)([value], (0, _tslib.__read)(otherValues));
        subscriber.next(project ? project.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(values))) : values);
      }
    }));
  });
}

},{"../observable/innerFrom":777,"../util/args":943,"../util/identity":951,"../util/lift":962,"../util/noop":964,"./OperatorSubscriber":791,"tslib":969}],903:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zip = zip;

var _tslib = require("tslib");

var _zip = require("../observable/zip");

var _lift = require("../util/lift");

function zip() {
  var sources = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    sources[_i] = arguments[_i];
  }

  return (0, _lift.operate)(function (source, subscriber) {
    _zip.zip.apply(void 0, (0, _tslib.__spreadArray)([source], (0, _tslib.__read)(sources))).subscribe(subscriber);
  });
}

},{"../observable/zip":790,"../util/lift":962,"tslib":969}],904:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zipAll = zipAll;

var _zip = require("../observable/zip");

var _joinAllInternals = require("./joinAllInternals");

function zipAll(project) {
  return (0, _joinAllInternals.joinAllInternals)(_zip.zip, project);
}

},{"../observable/zip":790,"./joinAllInternals":836}],905:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.zipWith = zipWith;

var _tslib = require("tslib");

var _zip = require("./zip");

function zipWith() {
  var otherInputs = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    otherInputs[_i] = arguments[_i];
  }

  return _zip.zip.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(otherInputs)));
}

},{"./zip":903,"tslib":969}],906:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scheduleArray = scheduleArray;

var _Observable = require("../Observable");

function scheduleArray(input, scheduler) {
  return new _Observable.Observable(function (subscriber) {
    var i = 0;
    return scheduler.schedule(function () {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);

        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

},{"../Observable":751}],907:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scheduleAsyncIterable = scheduleAsyncIterable;

var _Observable = require("../Observable");

var _executeSchedule = require("../util/executeSchedule");

function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error('Iterable cannot be null');
  }

  return new _Observable.Observable(function (subscriber) {
    (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function () {
      var iterator = input[Symbol.asyncIterator]();
      (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function () {
        iterator.next().then(function (result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

},{"../Observable":751,"../util/executeSchedule":950}],908:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scheduleIterable = scheduleIterable;

var _Observable = require("../Observable");

var _iterator = require("../symbol/iterator");

var _isFunction = require("../util/isFunction");

var _executeSchedule = require("../util/executeSchedule");

function scheduleIterable(input, scheduler) {
  return new _Observable.Observable(function (subscriber) {
    var iterator;
    (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function () {
      iterator = input[_iterator.iterator]();
      (0, _executeSchedule.executeSchedule)(subscriber, scheduler, function () {
        var _a;

        var value;
        var done;

        try {
          _a = iterator.next(), value = _a.value, done = _a.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }

        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function () {
      return (0, _isFunction.isFunction)(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();
    };
  });
}

},{"../Observable":751,"../symbol/iterator":933,"../util/executeSchedule":950,"../util/isFunction":955}],909:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scheduleObservable = scheduleObservable;

var _innerFrom = require("../observable/innerFrom");

var _observeOn = require("../operators/observeOn");

var _subscribeOn = require("../operators/subscribeOn");

function scheduleObservable(input, scheduler) {
  return (0, _innerFrom.innerFrom)(input).pipe((0, _subscribeOn.subscribeOn)(scheduler), (0, _observeOn.observeOn)(scheduler));
}

},{"../observable/innerFrom":777,"../operators/observeOn":851,"../operators/subscribeOn":879}],910:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.schedulePromise = schedulePromise;

var _innerFrom = require("../observable/innerFrom");

var _observeOn = require("../operators/observeOn");

var _subscribeOn = require("../operators/subscribeOn");

function schedulePromise(input, scheduler) {
  return (0, _innerFrom.innerFrom)(input).pipe((0, _subscribeOn.subscribeOn)(scheduler), (0, _observeOn.observeOn)(scheduler));
}

},{"../observable/innerFrom":777,"../operators/observeOn":851,"../operators/subscribeOn":879}],911:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scheduleReadableStreamLike = scheduleReadableStreamLike;

var _scheduleAsyncIterable = require("./scheduleAsyncIterable");

var _isReadableStreamLike = require("../util/isReadableStreamLike");

function scheduleReadableStreamLike(input, scheduler) {
  return (0, _scheduleAsyncIterable.scheduleAsyncIterable)((0, _isReadableStreamLike.readableStreamLikeToAsyncGenerator)(input), scheduler);
}

},{"../util/isReadableStreamLike":960,"./scheduleAsyncIterable":907}],912:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scheduled = scheduled;

var _scheduleObservable = require("./scheduleObservable");

var _schedulePromise = require("./schedulePromise");

var _scheduleArray = require("./scheduleArray");

var _scheduleIterable = require("./scheduleIterable");

var _scheduleAsyncIterable = require("./scheduleAsyncIterable");

var _isInteropObservable = require("../util/isInteropObservable");

var _isPromise = require("../util/isPromise");

var _isArrayLike = require("../util/isArrayLike");

var _isIterable = require("../util/isIterable");

var _isAsyncIterable = require("../util/isAsyncIterable");

var _throwUnobservableError = require("../util/throwUnobservableError");

var _isReadableStreamLike = require("../util/isReadableStreamLike");

var _scheduleReadableStreamLike = require("./scheduleReadableStreamLike");

function scheduled(input, scheduler) {
  if (input != null) {
    if ((0, _isInteropObservable.isInteropObservable)(input)) {
      return (0, _scheduleObservable.scheduleObservable)(input, scheduler);
    }

    if ((0, _isArrayLike.isArrayLike)(input)) {
      return (0, _scheduleArray.scheduleArray)(input, scheduler);
    }

    if ((0, _isPromise.isPromise)(input)) {
      return (0, _schedulePromise.schedulePromise)(input, scheduler);
    }

    if ((0, _isAsyncIterable.isAsyncIterable)(input)) {
      return (0, _scheduleAsyncIterable.scheduleAsyncIterable)(input, scheduler);
    }

    if ((0, _isIterable.isIterable)(input)) {
      return (0, _scheduleIterable.scheduleIterable)(input, scheduler);
    }

    if ((0, _isReadableStreamLike.isReadableStreamLike)(input)) {
      return (0, _scheduleReadableStreamLike.scheduleReadableStreamLike)(input, scheduler);
    }
  }

  throw (0, _throwUnobservableError.createInvalidObservableTypeError)(input);
}

},{"../util/isArrayLike":952,"../util/isAsyncIterable":953,"../util/isInteropObservable":956,"../util/isIterable":957,"../util/isPromise":959,"../util/isReadableStreamLike":960,"../util/throwUnobservableError":968,"./scheduleArray":906,"./scheduleAsyncIterable":907,"./scheduleIterable":908,"./scheduleObservable":909,"./schedulePromise":910,"./scheduleReadableStreamLike":911}],913:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Action = void 0;

var _tslib = require("tslib");

var _Subscription = require("../Subscription");

var Action = function (_super) {
  (0, _tslib.__extends)(Action, _super);

  function Action(scheduler, work) {
    return _super.call(this) || this;
  }

  Action.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    return this;
  };

  return Action;
}(_Subscription.Subscription);

exports.Action = Action;

},{"../Subscription":756,"tslib":969}],914:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimationFrameAction = void 0;

var _tslib = require("tslib");

var _AsyncAction = require("./AsyncAction");

var _animationFrameProvider = require("./animationFrameProvider");

var AnimationFrameAction = function (_super) {
  (0, _tslib.__extends)(AnimationFrameAction, _super);

  function AnimationFrameAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;

    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }

  AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }

    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = _animationFrameProvider.animationFrameProvider.requestAnimationFrame(function () {
      return scheduler.flush(undefined);
    }));
  };

  AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    if (delay != null && delay > 0 || delay == null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }

    if (scheduler.actions.length === 0) {
      _animationFrameProvider.animationFrameProvider.cancelAnimationFrame(id);

      scheduler._scheduled = undefined;
    }

    return undefined;
  };

  return AnimationFrameAction;
}(_AsyncAction.AsyncAction);

exports.AnimationFrameAction = AnimationFrameAction;

},{"./AsyncAction":918,"./animationFrameProvider":924,"tslib":969}],915:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimationFrameScheduler = void 0;

var _tslib = require("tslib");

var _AsyncScheduler = require("./AsyncScheduler");

var AnimationFrameScheduler = function (_super) {
  (0, _tslib.__extends)(AnimationFrameScheduler, _super);

  function AnimationFrameScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AnimationFrameScheduler.prototype.flush = function (action) {
    this._active = true;
    this._scheduled = undefined;
    var actions = this.actions;
    var error;
    var index = -1;
    action = action || actions.shift();
    var count = actions.length;

    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (++index < count && (action = actions.shift()));

    this._active = false;

    if (error) {
      while (++index < count && (action = actions.shift())) {
        action.unsubscribe();
      }

      throw error;
    }
  };

  return AnimationFrameScheduler;
}(_AsyncScheduler.AsyncScheduler);

exports.AnimationFrameScheduler = AnimationFrameScheduler;

},{"./AsyncScheduler":919,"tslib":969}],916:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsapAction = void 0;

var _tslib = require("tslib");

var _AsyncAction = require("./AsyncAction");

var _immediateProvider = require("./immediateProvider");

var AsapAction = function (_super) {
  (0, _tslib.__extends)(AsapAction, _super);

  function AsapAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;

    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }

  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    if (delay !== null && delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }

    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = _immediateProvider.immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
  };

  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    if (delay != null && delay > 0 || delay == null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
    }

    if (scheduler.actions.length === 0) {
      _immediateProvider.immediateProvider.clearImmediate(id);

      scheduler._scheduled = undefined;
    }

    return undefined;
  };

  return AsapAction;
}(_AsyncAction.AsyncAction);

exports.AsapAction = AsapAction;

},{"./AsyncAction":918,"./immediateProvider":928,"tslib":969}],917:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsapScheduler = void 0;

var _tslib = require("tslib");

var _AsyncScheduler = require("./AsyncScheduler");

var AsapScheduler = function (_super) {
  (0, _tslib.__extends)(AsapScheduler, _super);

  function AsapScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  AsapScheduler.prototype.flush = function (action) {
    this._active = true;
    this._scheduled = undefined;
    var actions = this.actions;
    var error;
    var index = -1;
    action = action || actions.shift();
    var count = actions.length;

    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (++index < count && (action = actions.shift()));

    this._active = false;

    if (error) {
      while (++index < count && (action = actions.shift())) {
        action.unsubscribe();
      }

      throw error;
    }
  };

  return AsapScheduler;
}(_AsyncScheduler.AsyncScheduler);

exports.AsapScheduler = AsapScheduler;

},{"./AsyncScheduler":919,"tslib":969}],918:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsyncAction = void 0;

var _tslib = require("tslib");

var _Action = require("./Action");

var _intervalProvider = require("./intervalProvider");

var _arrRemove = require("../util/arrRemove");

var AsyncAction = function (_super) {
  (0, _tslib.__extends)(AsyncAction, _super);

  function AsyncAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;

    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }

  AsyncAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    if (this.closed) {
      return this;
    }

    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;

    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }

    this.pending = true;
    this.delay = delay;
    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
    return this;
  };

  AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    return _intervalProvider.intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
  };

  AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    if (delay != null && this.delay === delay && this.pending === false) {
      return id;
    }

    _intervalProvider.intervalProvider.clearInterval(id);

    return undefined;
  };

  AsyncAction.prototype.execute = function (state, delay) {
    if (this.closed) {
      return new Error('executing a cancelled action');
    }

    this.pending = false;

    var error = this._execute(state, delay);

    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };

  AsyncAction.prototype._execute = function (state, _delay) {
    var errored = false;
    var errorValue;

    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error('Scheduled action threw falsy error');
    }

    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };

  AsyncAction.prototype.unsubscribe = function () {
    if (!this.closed) {
      var _a = this,
          id = _a.id,
          scheduler = _a.scheduler;

      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      (0, _arrRemove.arrRemove)(actions, this);

      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }

      this.delay = null;

      _super.prototype.unsubscribe.call(this);
    }
  };

  return AsyncAction;
}(_Action.Action);

exports.AsyncAction = AsyncAction;

},{"../util/arrRemove":946,"./Action":913,"./intervalProvider":929,"tslib":969}],919:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AsyncScheduler = void 0;

var _tslib = require("tslib");

var _Scheduler = require("../Scheduler");

var AsyncScheduler = function (_super) {
  (0, _tslib.__extends)(AsyncScheduler, _super);

  function AsyncScheduler(SchedulerAction, now) {
    if (now === void 0) {
      now = _Scheduler.Scheduler.now;
    }

    var _this = _super.call(this, SchedulerAction, now) || this;

    _this.actions = [];
    _this._active = false;
    _this._scheduled = undefined;
    return _this;
  }

  AsyncScheduler.prototype.flush = function (action) {
    var actions = this.actions;

    if (this._active) {
      actions.push(action);
      return;
    }

    var error;
    this._active = true;

    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());

    this._active = false;

    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }

      throw error;
    }
  };

  return AsyncScheduler;
}(_Scheduler.Scheduler);

exports.AsyncScheduler = AsyncScheduler;

},{"../Scheduler":753,"tslib":969}],920:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QueueAction = void 0;

var _tslib = require("tslib");

var _AsyncAction = require("./AsyncAction");

var QueueAction = function (_super) {
  (0, _tslib.__extends)(QueueAction, _super);

  function QueueAction(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;

    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }

  QueueAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    if (delay > 0) {
      return _super.prototype.schedule.call(this, state, delay);
    }

    this.delay = delay;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };

  QueueAction.prototype.execute = function (state, delay) {
    return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);
  };

  QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    if (delay != null && delay > 0 || delay == null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
    }

    return scheduler.flush(this);
  };

  return QueueAction;
}(_AsyncAction.AsyncAction);

exports.QueueAction = QueueAction;

},{"./AsyncAction":918,"tslib":969}],921:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.QueueScheduler = void 0;

var _tslib = require("tslib");

var _AsyncScheduler = require("./AsyncScheduler");

var QueueScheduler = function (_super) {
  (0, _tslib.__extends)(QueueScheduler, _super);

  function QueueScheduler() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return QueueScheduler;
}(_AsyncScheduler.AsyncScheduler);

exports.QueueScheduler = QueueScheduler;

},{"./AsyncScheduler":919,"tslib":969}],922:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VirtualTimeScheduler = exports.VirtualAction = void 0;

var _tslib = require("tslib");

var _AsyncAction = require("./AsyncAction");

var _Subscription = require("../Subscription");

var _AsyncScheduler = require("./AsyncScheduler");

var VirtualTimeScheduler = function (_super) {
  (0, _tslib.__extends)(VirtualTimeScheduler, _super);

  function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {
    if (schedulerActionCtor === void 0) {
      schedulerActionCtor = VirtualAction;
    }

    if (maxFrames === void 0) {
      maxFrames = Infinity;
    }

    var _this = _super.call(this, schedulerActionCtor, function () {
      return _this.frame;
    }) || this;

    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }

  VirtualTimeScheduler.prototype.flush = function () {
    var _a = this,
        actions = _a.actions,
        maxFrames = _a.maxFrames;

    var error;
    var action;

    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;

      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }

    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }

      throw error;
    }
  };

  VirtualTimeScheduler.frameTimeFactor = 10;
  return VirtualTimeScheduler;
}(_AsyncScheduler.AsyncScheduler);

exports.VirtualTimeScheduler = VirtualTimeScheduler;

var VirtualAction = function (_super) {
  (0, _tslib.__extends)(VirtualAction, _super);

  function VirtualAction(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }

    var _this = _super.call(this, scheduler, work) || this;

    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index;
    _this.active = true;
    _this.index = scheduler.index = index;
    return _this;
  }

  VirtualAction.prototype.schedule = function (state, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    if (Number.isFinite(delay)) {
      if (!this.id) {
        return _super.prototype.schedule.call(this, state, delay);
      }

      this.active = false;
      var action = new VirtualAction(this.scheduler, this.work);
      this.add(action);
      return action.schedule(state, delay);
    } else {
      return _Subscription.Subscription.EMPTY;
    }
  };

  VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    this.delay = scheduler.frame + delay;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction.sortActions);
    return true;
  };

  VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
    if (delay === void 0) {
      delay = 0;
    }

    return undefined;
  };

  VirtualAction.prototype._execute = function (state, delay) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay);
    }
  };

  VirtualAction.sortActions = function (a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };

  return VirtualAction;
}(_AsyncAction.AsyncAction);

exports.VirtualAction = VirtualAction;

},{"../Subscription":756,"./AsyncAction":918,"./AsyncScheduler":919,"tslib":969}],923:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.animationFrameScheduler = exports.animationFrame = void 0;

var _AnimationFrameAction = require("./AnimationFrameAction");

var _AnimationFrameScheduler = require("./AnimationFrameScheduler");

var animationFrameScheduler = new _AnimationFrameScheduler.AnimationFrameScheduler(_AnimationFrameAction.AnimationFrameAction);
exports.animationFrameScheduler = animationFrameScheduler;
var animationFrame = animationFrameScheduler;
exports.animationFrame = animationFrame;

},{"./AnimationFrameAction":914,"./AnimationFrameScheduler":915}],924:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.animationFrameProvider = void 0;

var _tslib = require("tslib");

var _Subscription = require("../Subscription");

var animationFrameProvider = {
  schedule: function (callback) {
    var request = requestAnimationFrame;
    var cancel = cancelAnimationFrame;
    var delegate = animationFrameProvider.delegate;

    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }

    var handle = request(function (timestamp) {
      cancel = undefined;
      callback(timestamp);
    });
    return new _Subscription.Subscription(function () {
      return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
    });
  },
  requestAnimationFrame: function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args)));
  },
  cancelAnimationFrame: function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args)));
  },
  delegate: undefined
};
exports.animationFrameProvider = animationFrameProvider;

},{"../Subscription":756,"tslib":969}],925:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asapScheduler = exports.asap = void 0;

var _AsapAction = require("./AsapAction");

var _AsapScheduler = require("./AsapScheduler");

var asapScheduler = new _AsapScheduler.AsapScheduler(_AsapAction.AsapAction);
exports.asapScheduler = asapScheduler;
var asap = asapScheduler;
exports.asap = asap;

},{"./AsapAction":916,"./AsapScheduler":917}],926:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.asyncScheduler = exports.async = void 0;

var _AsyncAction = require("./AsyncAction");

var _AsyncScheduler = require("./AsyncScheduler");

var asyncScheduler = new _AsyncScheduler.AsyncScheduler(_AsyncAction.AsyncAction);
exports.asyncScheduler = asyncScheduler;
var async = asyncScheduler;
exports.async = async;

},{"./AsyncAction":918,"./AsyncScheduler":919}],927:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dateTimestampProvider = void 0;
var dateTimestampProvider = {
  now: function () {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: undefined
};
exports.dateTimestampProvider = dateTimestampProvider;

},{}],928:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.immediateProvider = void 0;

var _tslib = require("tslib");

var _Immediate = require("../util/Immediate");

var setImmediate = _Immediate.Immediate.setImmediate,
    clearImmediate = _Immediate.Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args)));
  },
  clearImmediate: function (handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: undefined
};
exports.immediateProvider = immediateProvider;

},{"../util/Immediate":938,"tslib":969}],929:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.intervalProvider = void 0;

var _tslib = require("tslib");

var intervalProvider = {
  setInterval: function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) || setInterval).apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args)));
  },
  clearInterval: function (handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: undefined
};
exports.intervalProvider = intervalProvider;

},{"tslib":969}],930:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.performanceTimestampProvider = void 0;
var performanceTimestampProvider = {
  now: function () {
    return (performanceTimestampProvider.delegate || performance).now();
  },
  delegate: undefined
};
exports.performanceTimestampProvider = performanceTimestampProvider;

},{}],931:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queueScheduler = exports.queue = void 0;

var _QueueAction = require("./QueueAction");

var _QueueScheduler = require("./QueueScheduler");

var queueScheduler = new _QueueScheduler.QueueScheduler(_QueueAction.QueueAction);
exports.queueScheduler = queueScheduler;
var queue = queueScheduler;
exports.queue = queue;

},{"./QueueAction":920,"./QueueScheduler":921}],932:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.timeoutProvider = void 0;

var _tslib = require("tslib");

var timeoutProvider = {
  setTimeout: function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args)));
  },
  clearTimeout: function (handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: undefined
};
exports.timeoutProvider = timeoutProvider;

},{"tslib":969}],933:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSymbolIterator = getSymbolIterator;
exports.iterator = void 0;

function getSymbolIterator() {
  if (typeof Symbol !== 'function' || !Symbol.iterator) {
    return '@@iterator';
  }

  return Symbol.iterator;
}

var iterator = getSymbolIterator();
exports.iterator = iterator;

},{}],934:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observable = void 0;

var observable = function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}();

exports.observable = observable;

},{}],935:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

},{}],936:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArgumentOutOfRangeError = void 0;

var _createErrorClass = require("./createErrorClass");

var ArgumentOutOfRangeError = (0, _createErrorClass.createErrorClass)(function (_super) {
  return function ArgumentOutOfRangeErrorImpl() {
    _super(this);

    this.name = 'ArgumentOutOfRangeError';
    this.message = 'argument out of range';
  };
});
exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;

},{"./createErrorClass":947}],937:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EmptyError = void 0;

var _createErrorClass = require("./createErrorClass");

var EmptyError = (0, _createErrorClass.createErrorClass)(function (_super) {
  return function EmptyErrorImpl() {
    _super(this);

    this.name = 'EmptyError';
    this.message = 'no elements in sequence';
  };
});
exports.EmptyError = EmptyError;

},{"./createErrorClass":947}],938:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestTools = exports.Immediate = void 0;
var nextHandle = 1;
var resolved;
var activeHandles = {};

function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }

  return false;
}

var Immediate = {
  setImmediate: function (cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;

    if (!resolved) {
      resolved = Promise.resolve();
    }

    resolved.then(function () {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function (handle) {
    findAndClearHandle(handle);
  }
};
exports.Immediate = Immediate;
var TestTools = {
  pending: function () {
    return Object.keys(activeHandles).length;
  }
};
exports.TestTools = TestTools;

},{}],939:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotFoundError = void 0;

var _createErrorClass = require("./createErrorClass");

var NotFoundError = (0, _createErrorClass.createErrorClass)(function (_super) {
  return function NotFoundErrorImpl(message) {
    _super(this);

    this.name = 'NotFoundError';
    this.message = message;
  };
});
exports.NotFoundError = NotFoundError;

},{"./createErrorClass":947}],940:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ObjectUnsubscribedError = void 0;

var _createErrorClass = require("./createErrorClass");

var ObjectUnsubscribedError = (0, _createErrorClass.createErrorClass)(function (_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);

    this.name = 'ObjectUnsubscribedError';
    this.message = 'object unsubscribed';
  };
});
exports.ObjectUnsubscribedError = ObjectUnsubscribedError;

},{"./createErrorClass":947}],941:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SequenceError = void 0;

var _createErrorClass = require("./createErrorClass");

var SequenceError = (0, _createErrorClass.createErrorClass)(function (_super) {
  return function SequenceErrorImpl(message) {
    _super(this);

    this.name = 'SequenceError';
    this.message = message;
  };
});
exports.SequenceError = SequenceError;

},{"./createErrorClass":947}],942:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UnsubscriptionError = void 0;

var _createErrorClass = require("./createErrorClass");

var UnsubscriptionError = (0, _createErrorClass.createErrorClass)(function (_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);

    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) {
      return i + 1 + ") " + err.toString();
    }).join('\n  ') : '';
    this.name = 'UnsubscriptionError';
    this.errors = errors;
  };
});
exports.UnsubscriptionError = UnsubscriptionError;

},{"./createErrorClass":947}],943:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.popNumber = popNumber;
exports.popResultSelector = popResultSelector;
exports.popScheduler = popScheduler;

var _isFunction = require("./isFunction");

var _isScheduler = require("./isScheduler");

function last(arr) {
  return arr[arr.length - 1];
}

function popResultSelector(args) {
  return (0, _isFunction.isFunction)(last(args)) ? args.pop() : undefined;
}

function popScheduler(args) {
  return (0, _isScheduler.isScheduler)(last(args)) ? args.pop() : undefined;
}

function popNumber(args, defaultValue) {
  return typeof last(args) === 'number' ? args.pop() : defaultValue;
}

},{"./isFunction":955,"./isScheduler":961}],944:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argsArgArrayOrObject = argsArgArrayOrObject;
var isArray = Array.isArray;
var getPrototypeOf = Object.getPrototypeOf,
    objectProto = Object.prototype,
    getKeys = Object.keys;

function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    var first_1 = args[0];

    if (isArray(first_1)) {
      return {
        args: first_1,
        keys: null
      };
    }

    if (isPOJO(first_1)) {
      var keys = getKeys(first_1);
      return {
        args: keys.map(function (key) {
          return first_1[key];
        }),
        keys: keys
      };
    }
  }

  return {
    args: args,
    keys: null
  };
}

function isPOJO(obj) {
  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
}

},{}],945:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.argsOrArgArray = argsOrArgArray;
var isArray = Array.isArray;

function argsOrArgArray(args) {
  return args.length === 1 && isArray(args[0]) ? args[0] : args;
}

},{}],946:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrRemove = arrRemove;

function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

},{}],947:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createErrorClass = createErrorClass;

function createErrorClass(createImpl) {
  var _super = function (instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };

  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

},{}],948:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createObject = createObject;

function createObject(keys, values) {
  return keys.reduce(function (result, key, i) {
    return result[key] = values[i], result;
  }, {});
}

},{}],949:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.captureError = captureError;
exports.errorContext = errorContext;

var _config = require("../config");

var context = null;

function errorContext(cb) {
  if (_config.config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;

    if (isRoot) {
      context = {
        errorThrown: false,
        error: null
      };
    }

    cb();

    if (isRoot) {
      var _a = context,
          errorThrown = _a.errorThrown,
          error = _a.error;
      context = null;

      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}

function captureError(err) {
  if (_config.config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

},{"../config":757}],950:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.executeSchedule = executeSchedule;

function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
  if (delay === void 0) {
    delay = 0;
  }

  if (repeat === void 0) {
    repeat = false;
  }

  var scheduleSubscription = scheduler.schedule(function () {
    work();

    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);

  if (!repeat) {
    return scheduleSubscription;
  }
}

},{}],951:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.identity = identity;

function identity(x) {
  return x;
}

},{}],952:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isArrayLike = void 0;

var isArrayLike = function (x) {
  return x && typeof x.length === 'number' && typeof x !== 'function';
};

exports.isArrayLike = isArrayLike;

},{}],953:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAsyncIterable = isAsyncIterable;

var _isFunction = require("./isFunction");

function isAsyncIterable(obj) {
  return Symbol.asyncIterator && (0, _isFunction.isFunction)(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

},{"./isFunction":955}],954:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidDate = isValidDate;

function isValidDate(value) {
  return value instanceof Date && !isNaN(value);
}

},{}],955:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isFunction = isFunction;

function isFunction(value) {
  return typeof value === 'function';
}

},{}],956:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isInteropObservable = isInteropObservable;

var _observable = require("../symbol/observable");

var _isFunction = require("./isFunction");

function isInteropObservable(input) {
  return (0, _isFunction.isFunction)(input[_observable.observable]);
}

},{"../symbol/observable":934,"./isFunction":955}],957:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isIterable = isIterable;

var _iterator = require("../symbol/iterator");

var _isFunction = require("./isFunction");

function isIterable(input) {
  return (0, _isFunction.isFunction)(input === null || input === void 0 ? void 0 : input[_iterator.iterator]);
}

},{"../symbol/iterator":933,"./isFunction":955}],958:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isObservable = isObservable;

var _Observable = require("../Observable");

var _isFunction = require("./isFunction");

function isObservable(obj) {
  return !!obj && (obj instanceof _Observable.Observable || (0, _isFunction.isFunction)(obj.lift) && (0, _isFunction.isFunction)(obj.subscribe));
}

},{"../Observable":751,"./isFunction":955}],959:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPromise = isPromise;

var _isFunction = require("./isFunction");

function isPromise(value) {
  return (0, _isFunction.isFunction)(value === null || value === void 0 ? void 0 : value.then);
}

},{"./isFunction":955}],960:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isReadableStreamLike = isReadableStreamLike;
exports.readableStreamLikeToAsyncGenerator = readableStreamLikeToAsyncGenerator;

var _tslib = require("tslib");

var _isFunction = require("./isFunction");

function readableStreamLikeToAsyncGenerator(readableStream) {
  return (0, _tslib.__asyncGenerator)(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a, value, done;

    return (0, _tslib.__generator)(this, function (_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;

        case 1:
          _b.trys.push([1,, 9, 10]);

          _b.label = 2;

        case 2:
          if (!true) return [3, 8];
          return [4, (0, _tslib.__await)(reader.read())];

        case 3:
          _a = _b.sent(), value = _a.value, done = _a.done;
          if (!done) return [3, 5];
          return [4, (0, _tslib.__await)(void 0)];

        case 4:
          return [2, _b.sent()];

        case 5:
          return [4, (0, _tslib.__await)(value)];

        case 6:
          return [4, _b.sent()];

        case 7:
          _b.sent();

          return [3, 2];

        case 8:
          return [3, 10];

        case 9:
          reader.releaseLock();
          return [7];

        case 10:
          return [2];
      }
    });
  });
}

function isReadableStreamLike(obj) {
  return (0, _isFunction.isFunction)(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

},{"./isFunction":955,"tslib":969}],961:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isScheduler = isScheduler;

var _isFunction = require("./isFunction");

function isScheduler(value) {
  return value && (0, _isFunction.isFunction)(value.schedule);
}

},{"./isFunction":955}],962:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasLift = hasLift;
exports.operate = operate;

var _isFunction = require("./isFunction");

function hasLift(source) {
  return (0, _isFunction.isFunction)(source === null || source === void 0 ? void 0 : source.lift);
}

function operate(init) {
  return function (source) {
    if (hasLift(source)) {
      return source.lift(function (liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }

    throw new TypeError('Unable to lift unknown Observable type');
  };
}

},{"./isFunction":955}],963:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapOneOrManyArgs = mapOneOrManyArgs;

var _tslib = require("tslib");

var _map = require("../operators/map");

var isArray = Array.isArray;

function callOrApply(fn, args) {
  return isArray(args) ? fn.apply(void 0, (0, _tslib.__spreadArray)([], (0, _tslib.__read)(args))) : fn(args);
}

function mapOneOrManyArgs(fn) {
  return (0, _map.map)(function (args) {
    return callOrApply(fn, args);
  });
}

},{"../operators/map":838,"tslib":969}],964:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.noop = noop;

function noop() {}

},{}],965:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.not = not;

function not(pred, thisArg) {
  return function (value, index) {
    return !pred.call(thisArg, value, index);
  };
}

},{}],966:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pipe = pipe;
exports.pipeFromArray = pipeFromArray;

var _identity = require("./identity");

function pipe() {
  var fns = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    fns[_i] = arguments[_i];
  }

  return pipeFromArray(fns);
}

function pipeFromArray(fns) {
  if (fns.length === 0) {
    return _identity.identity;
  }

  if (fns.length === 1) {
    return fns[0];
  }

  return function piped(input) {
    return fns.reduce(function (prev, fn) {
      return fn(prev);
    }, input);
  };
}

},{"./identity":951}],967:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reportUnhandledError = reportUnhandledError;

var _config = require("../config");

var _timeoutProvider = require("../scheduler/timeoutProvider");

function reportUnhandledError(err) {
  _timeoutProvider.timeoutProvider.setTimeout(function () {
    var onUnhandledError = _config.config.onUnhandledError;

    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

},{"../config":757,"../scheduler/timeoutProvider":932}],968:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInvalidObservableTypeError = createInvalidObservableTypeError;

function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

},{}],969:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__assign = void 0;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncValues = __asyncValues;
exports.__await = __await;
exports.__awaiter = __awaiter;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__createBinding = void 0;
exports.__decorate = __decorate;
exports.__exportStar = __exportStar;
exports.__extends = __extends;
exports.__generator = __generator;
exports.__importDefault = __importDefault;
exports.__importStar = __importStar;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__metadata = __metadata;
exports.__param = __param;
exports.__read = __read;
exports.__rest = __rest;
exports.__spread = __spread;
exports.__spreadArray = __spreadArray;
exports.__spreadArrays = __spreadArrays;
exports.__values = __values;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

var __createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};

exports.__createBinding = __createBinding;

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
/** @deprecated */


function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
/** @deprecated */


function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

function __spreadArray(to, from) {
  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];

  return to;
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
}

},{}],970:[function(require,module,exports){
(function(nacl) {
'use strict';

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

var gf = function(init) {
  var i, r = new Float64Array(16);
  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
  return r;
};

//  Pluggable, initialized in high-level API below.
var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

var _0 = new Uint8Array(16);
var _9 = new Uint8Array(32); _9[0] = 9;

var gf0 = gf(),
    gf1 = gf([1]),
    _121665 = gf([0xdb41, 1]),
    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

function ts64(x, i, h, l) {
  x[i]   = (h >> 24) & 0xff;
  x[i+1] = (h >> 16) & 0xff;
  x[i+2] = (h >>  8) & 0xff;
  x[i+3] = h & 0xff;
  x[i+4] = (l >> 24)  & 0xff;
  x[i+5] = (l >> 16)  & 0xff;
  x[i+6] = (l >>  8)  & 0xff;
  x[i+7] = l & 0xff;
}

function vn(x, xi, y, yi, n) {
  var i,d = 0;
  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
  return (1 & ((d - 1) >>> 8)) - 1;
}

function crypto_verify_16(x, xi, y, yi) {
  return vn(x,xi,y,yi,16);
}

function crypto_verify_32(x, xi, y, yi) {
  return vn(x,xi,y,yi,32);
}

function core_salsa20(o, p, k, c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u;

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0;
    x4 ^= u<<7 | u>>>(32-7);
    u = x4 + x0 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x4 | 0;
    x12 ^= u<<13 | u>>>(32-13);
    u = x12 + x8 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x1 | 0;
    x9 ^= u<<7 | u>>>(32-7);
    u = x9 + x5 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x9 | 0;
    x1 ^= u<<13 | u>>>(32-13);
    u = x1 + x13 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x6 | 0;
    x14 ^= u<<7 | u>>>(32-7);
    u = x14 + x10 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x14 | 0;
    x6 ^= u<<13 | u>>>(32-13);
    u = x6 + x2 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x11 | 0;
    x3 ^= u<<7 | u>>>(32-7);
    u = x3 + x15 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x3 | 0;
    x11 ^= u<<13 | u>>>(32-13);
    u = x11 + x7 | 0;
    x15 ^= u<<18 | u>>>(32-18);

    u = x0 + x3 | 0;
    x1 ^= u<<7 | u>>>(32-7);
    u = x1 + x0 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x1 | 0;
    x3 ^= u<<13 | u>>>(32-13);
    u = x3 + x2 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x4 | 0;
    x6 ^= u<<7 | u>>>(32-7);
    u = x6 + x5 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x6 | 0;
    x4 ^= u<<13 | u>>>(32-13);
    u = x4 + x7 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x9 | 0;
    x11 ^= u<<7 | u>>>(32-7);
    u = x11 + x10 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x11 | 0;
    x9 ^= u<<13 | u>>>(32-13);
    u = x9 + x8 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x14 | 0;
    x12 ^= u<<7 | u>>>(32-7);
    u = x12 + x15 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x12 | 0;
    x14 ^= u<<13 | u>>>(32-13);
    u = x14 + x13 | 0;
    x15 ^= u<<18 | u>>>(32-18);
  }
   x0 =  x0 +  j0 | 0;
   x1 =  x1 +  j1 | 0;
   x2 =  x2 +  j2 | 0;
   x3 =  x3 +  j3 | 0;
   x4 =  x4 +  j4 | 0;
   x5 =  x5 +  j5 | 0;
   x6 =  x6 +  j6 | 0;
   x7 =  x7 +  j7 | 0;
   x8 =  x8 +  j8 | 0;
   x9 =  x9 +  j9 | 0;
  x10 = x10 + j10 | 0;
  x11 = x11 + j11 | 0;
  x12 = x12 + j12 | 0;
  x13 = x13 + j13 | 0;
  x14 = x14 + j14 | 0;
  x15 = x15 + j15 | 0;

  o[ 0] = x0 >>>  0 & 0xff;
  o[ 1] = x0 >>>  8 & 0xff;
  o[ 2] = x0 >>> 16 & 0xff;
  o[ 3] = x0 >>> 24 & 0xff;

  o[ 4] = x1 >>>  0 & 0xff;
  o[ 5] = x1 >>>  8 & 0xff;
  o[ 6] = x1 >>> 16 & 0xff;
  o[ 7] = x1 >>> 24 & 0xff;

  o[ 8] = x2 >>>  0 & 0xff;
  o[ 9] = x2 >>>  8 & 0xff;
  o[10] = x2 >>> 16 & 0xff;
  o[11] = x2 >>> 24 & 0xff;

  o[12] = x3 >>>  0 & 0xff;
  o[13] = x3 >>>  8 & 0xff;
  o[14] = x3 >>> 16 & 0xff;
  o[15] = x3 >>> 24 & 0xff;

  o[16] = x4 >>>  0 & 0xff;
  o[17] = x4 >>>  8 & 0xff;
  o[18] = x4 >>> 16 & 0xff;
  o[19] = x4 >>> 24 & 0xff;

  o[20] = x5 >>>  0 & 0xff;
  o[21] = x5 >>>  8 & 0xff;
  o[22] = x5 >>> 16 & 0xff;
  o[23] = x5 >>> 24 & 0xff;

  o[24] = x6 >>>  0 & 0xff;
  o[25] = x6 >>>  8 & 0xff;
  o[26] = x6 >>> 16 & 0xff;
  o[27] = x6 >>> 24 & 0xff;

  o[28] = x7 >>>  0 & 0xff;
  o[29] = x7 >>>  8 & 0xff;
  o[30] = x7 >>> 16 & 0xff;
  o[31] = x7 >>> 24 & 0xff;

  o[32] = x8 >>>  0 & 0xff;
  o[33] = x8 >>>  8 & 0xff;
  o[34] = x8 >>> 16 & 0xff;
  o[35] = x8 >>> 24 & 0xff;

  o[36] = x9 >>>  0 & 0xff;
  o[37] = x9 >>>  8 & 0xff;
  o[38] = x9 >>> 16 & 0xff;
  o[39] = x9 >>> 24 & 0xff;

  o[40] = x10 >>>  0 & 0xff;
  o[41] = x10 >>>  8 & 0xff;
  o[42] = x10 >>> 16 & 0xff;
  o[43] = x10 >>> 24 & 0xff;

  o[44] = x11 >>>  0 & 0xff;
  o[45] = x11 >>>  8 & 0xff;
  o[46] = x11 >>> 16 & 0xff;
  o[47] = x11 >>> 24 & 0xff;

  o[48] = x12 >>>  0 & 0xff;
  o[49] = x12 >>>  8 & 0xff;
  o[50] = x12 >>> 16 & 0xff;
  o[51] = x12 >>> 24 & 0xff;

  o[52] = x13 >>>  0 & 0xff;
  o[53] = x13 >>>  8 & 0xff;
  o[54] = x13 >>> 16 & 0xff;
  o[55] = x13 >>> 24 & 0xff;

  o[56] = x14 >>>  0 & 0xff;
  o[57] = x14 >>>  8 & 0xff;
  o[58] = x14 >>> 16 & 0xff;
  o[59] = x14 >>> 24 & 0xff;

  o[60] = x15 >>>  0 & 0xff;
  o[61] = x15 >>>  8 & 0xff;
  o[62] = x15 >>> 16 & 0xff;
  o[63] = x15 >>> 24 & 0xff;
}

function core_hsalsa20(o,p,k,c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u;

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0;
    x4 ^= u<<7 | u>>>(32-7);
    u = x4 + x0 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x4 | 0;
    x12 ^= u<<13 | u>>>(32-13);
    u = x12 + x8 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x1 | 0;
    x9 ^= u<<7 | u>>>(32-7);
    u = x9 + x5 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x9 | 0;
    x1 ^= u<<13 | u>>>(32-13);
    u = x1 + x13 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x6 | 0;
    x14 ^= u<<7 | u>>>(32-7);
    u = x14 + x10 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x14 | 0;
    x6 ^= u<<13 | u>>>(32-13);
    u = x6 + x2 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x11 | 0;
    x3 ^= u<<7 | u>>>(32-7);
    u = x3 + x15 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x3 | 0;
    x11 ^= u<<13 | u>>>(32-13);
    u = x11 + x7 | 0;
    x15 ^= u<<18 | u>>>(32-18);

    u = x0 + x3 | 0;
    x1 ^= u<<7 | u>>>(32-7);
    u = x1 + x0 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x1 | 0;
    x3 ^= u<<13 | u>>>(32-13);
    u = x3 + x2 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x4 | 0;
    x6 ^= u<<7 | u>>>(32-7);
    u = x6 + x5 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x6 | 0;
    x4 ^= u<<13 | u>>>(32-13);
    u = x4 + x7 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x9 | 0;
    x11 ^= u<<7 | u>>>(32-7);
    u = x11 + x10 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x11 | 0;
    x9 ^= u<<13 | u>>>(32-13);
    u = x9 + x8 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x14 | 0;
    x12 ^= u<<7 | u>>>(32-7);
    u = x12 + x15 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x12 | 0;
    x14 ^= u<<13 | u>>>(32-13);
    u = x14 + x13 | 0;
    x15 ^= u<<18 | u>>>(32-18);
  }

  o[ 0] = x0 >>>  0 & 0xff;
  o[ 1] = x0 >>>  8 & 0xff;
  o[ 2] = x0 >>> 16 & 0xff;
  o[ 3] = x0 >>> 24 & 0xff;

  o[ 4] = x5 >>>  0 & 0xff;
  o[ 5] = x5 >>>  8 & 0xff;
  o[ 6] = x5 >>> 16 & 0xff;
  o[ 7] = x5 >>> 24 & 0xff;

  o[ 8] = x10 >>>  0 & 0xff;
  o[ 9] = x10 >>>  8 & 0xff;
  o[10] = x10 >>> 16 & 0xff;
  o[11] = x10 >>> 24 & 0xff;

  o[12] = x15 >>>  0 & 0xff;
  o[13] = x15 >>>  8 & 0xff;
  o[14] = x15 >>> 16 & 0xff;
  o[15] = x15 >>> 24 & 0xff;

  o[16] = x6 >>>  0 & 0xff;
  o[17] = x6 >>>  8 & 0xff;
  o[18] = x6 >>> 16 & 0xff;
  o[19] = x6 >>> 24 & 0xff;

  o[20] = x7 >>>  0 & 0xff;
  o[21] = x7 >>>  8 & 0xff;
  o[22] = x7 >>> 16 & 0xff;
  o[23] = x7 >>> 24 & 0xff;

  o[24] = x8 >>>  0 & 0xff;
  o[25] = x8 >>>  8 & 0xff;
  o[26] = x8 >>> 16 & 0xff;
  o[27] = x8 >>> 24 & 0xff;

  o[28] = x9 >>>  0 & 0xff;
  o[29] = x9 >>>  8 & 0xff;
  o[30] = x9 >>> 16 & 0xff;
  o[31] = x9 >>> 24 & 0xff;
}

function crypto_core_salsa20(out,inp,k,c) {
  core_salsa20(out,inp,k,c);
}

function crypto_core_hsalsa20(out,inp,k,c) {
  core_hsalsa20(out,inp,k,c);
}

var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
            // "expand 32-byte k"

function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
  var z = new Uint8Array(16), x = new Uint8Array(64);
  var u, i;
  for (i = 0; i < 16; i++) z[i] = 0;
  for (i = 0; i < 8; i++) z[i] = n[i];
  while (b >= 64) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z[i] & 0xff) | 0;
      z[i] = u & 0xff;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
    mpos += 64;
  }
  if (b > 0) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
  }
  return 0;
}

function crypto_stream_salsa20(c,cpos,b,n,k) {
  var z = new Uint8Array(16), x = new Uint8Array(64);
  var u, i;
  for (i = 0; i < 16; i++) z[i] = 0;
  for (i = 0; i < 8; i++) z[i] = n[i];
  while (b >= 64) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z[i] & 0xff) | 0;
      z[i] = u & 0xff;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
  }
  if (b > 0) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < b; i++) c[cpos+i] = x[i];
  }
  return 0;
}

function crypto_stream(c,cpos,d,n,k) {
  var s = new Uint8Array(32);
  crypto_core_hsalsa20(s,n,k,sigma);
  var sn = new Uint8Array(8);
  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  return crypto_stream_salsa20(c,cpos,d,sn,s);
}

function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
  var s = new Uint8Array(32);
  crypto_core_hsalsa20(s,n,k,sigma);
  var sn = new Uint8Array(8);
  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
}

/*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/

var poly1305 = function(key) {
  this.buffer = new Uint8Array(16);
  this.r = new Uint16Array(10);
  this.h = new Uint16Array(10);
  this.pad = new Uint16Array(8);
  this.leftover = 0;
  this.fin = 0;

  var t0, t1, t2, t3, t4, t5, t6, t7;

  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
  this.r[9] = ((t7 >>>  5)) & 0x007f;

  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
};

poly1305.prototype.blocks = function(m, mpos, bytes) {
  var hibit = this.fin ? 0 : (1 << 11);
  var t0, t1, t2, t3, t4, t5, t6, t7, c;
  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

  var h0 = this.h[0],
      h1 = this.h[1],
      h2 = this.h[2],
      h3 = this.h[3],
      h4 = this.h[4],
      h5 = this.h[5],
      h6 = this.h[6],
      h7 = this.h[7],
      h8 = this.h[8],
      h9 = this.h[9];

  var r0 = this.r[0],
      r1 = this.r[1],
      r2 = this.r[2],
      r3 = this.r[3],
      r4 = this.r[4],
      r5 = this.r[5],
      r6 = this.r[6],
      r7 = this.r[7],
      r8 = this.r[8],
      r9 = this.r[9];

  while (bytes >= 16) {
    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
    h5 += ((t4 >>>  1)) & 0x1fff;
    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
    h9 += ((t7 >>> 5)) | hibit;

    c = 0;

    d0 = c;
    d0 += h0 * r0;
    d0 += h1 * (5 * r9);
    d0 += h2 * (5 * r8);
    d0 += h3 * (5 * r7);
    d0 += h4 * (5 * r6);
    c = (d0 >>> 13); d0 &= 0x1fff;
    d0 += h5 * (5 * r5);
    d0 += h6 * (5 * r4);
    d0 += h7 * (5 * r3);
    d0 += h8 * (5 * r2);
    d0 += h9 * (5 * r1);
    c += (d0 >>> 13); d0 &= 0x1fff;

    d1 = c;
    d1 += h0 * r1;
    d1 += h1 * r0;
    d1 += h2 * (5 * r9);
    d1 += h3 * (5 * r8);
    d1 += h4 * (5 * r7);
    c = (d1 >>> 13); d1 &= 0x1fff;
    d1 += h5 * (5 * r6);
    d1 += h6 * (5 * r5);
    d1 += h7 * (5 * r4);
    d1 += h8 * (5 * r3);
    d1 += h9 * (5 * r2);
    c += (d1 >>> 13); d1 &= 0x1fff;

    d2 = c;
    d2 += h0 * r2;
    d2 += h1 * r1;
    d2 += h2 * r0;
    d2 += h3 * (5 * r9);
    d2 += h4 * (5 * r8);
    c = (d2 >>> 13); d2 &= 0x1fff;
    d2 += h5 * (5 * r7);
    d2 += h6 * (5 * r6);
    d2 += h7 * (5 * r5);
    d2 += h8 * (5 * r4);
    d2 += h9 * (5 * r3);
    c += (d2 >>> 13); d2 &= 0x1fff;

    d3 = c;
    d3 += h0 * r3;
    d3 += h1 * r2;
    d3 += h2 * r1;
    d3 += h3 * r0;
    d3 += h4 * (5 * r9);
    c = (d3 >>> 13); d3 &= 0x1fff;
    d3 += h5 * (5 * r8);
    d3 += h6 * (5 * r7);
    d3 += h7 * (5 * r6);
    d3 += h8 * (5 * r5);
    d3 += h9 * (5 * r4);
    c += (d3 >>> 13); d3 &= 0x1fff;

    d4 = c;
    d4 += h0 * r4;
    d4 += h1 * r3;
    d4 += h2 * r2;
    d4 += h3 * r1;
    d4 += h4 * r0;
    c = (d4 >>> 13); d4 &= 0x1fff;
    d4 += h5 * (5 * r9);
    d4 += h6 * (5 * r8);
    d4 += h7 * (5 * r7);
    d4 += h8 * (5 * r6);
    d4 += h9 * (5 * r5);
    c += (d4 >>> 13); d4 &= 0x1fff;

    d5 = c;
    d5 += h0 * r5;
    d5 += h1 * r4;
    d5 += h2 * r3;
    d5 += h3 * r2;
    d5 += h4 * r1;
    c = (d5 >>> 13); d5 &= 0x1fff;
    d5 += h5 * r0;
    d5 += h6 * (5 * r9);
    d5 += h7 * (5 * r8);
    d5 += h8 * (5 * r7);
    d5 += h9 * (5 * r6);
    c += (d5 >>> 13); d5 &= 0x1fff;

    d6 = c;
    d6 += h0 * r6;
    d6 += h1 * r5;
    d6 += h2 * r4;
    d6 += h3 * r3;
    d6 += h4 * r2;
    c = (d6 >>> 13); d6 &= 0x1fff;
    d6 += h5 * r1;
    d6 += h6 * r0;
    d6 += h7 * (5 * r9);
    d6 += h8 * (5 * r8);
    d6 += h9 * (5 * r7);
    c += (d6 >>> 13); d6 &= 0x1fff;

    d7 = c;
    d7 += h0 * r7;
    d7 += h1 * r6;
    d7 += h2 * r5;
    d7 += h3 * r4;
    d7 += h4 * r3;
    c = (d7 >>> 13); d7 &= 0x1fff;
    d7 += h5 * r2;
    d7 += h6 * r1;
    d7 += h7 * r0;
    d7 += h8 * (5 * r9);
    d7 += h9 * (5 * r8);
    c += (d7 >>> 13); d7 &= 0x1fff;

    d8 = c;
    d8 += h0 * r8;
    d8 += h1 * r7;
    d8 += h2 * r6;
    d8 += h3 * r5;
    d8 += h4 * r4;
    c = (d8 >>> 13); d8 &= 0x1fff;
    d8 += h5 * r3;
    d8 += h6 * r2;
    d8 += h7 * r1;
    d8 += h8 * r0;
    d8 += h9 * (5 * r9);
    c += (d8 >>> 13); d8 &= 0x1fff;

    d9 = c;
    d9 += h0 * r9;
    d9 += h1 * r8;
    d9 += h2 * r7;
    d9 += h3 * r6;
    d9 += h4 * r5;
    c = (d9 >>> 13); d9 &= 0x1fff;
    d9 += h5 * r4;
    d9 += h6 * r3;
    d9 += h7 * r2;
    d9 += h8 * r1;
    d9 += h9 * r0;
    c += (d9 >>> 13); d9 &= 0x1fff;

    c = (((c << 2) + c)) | 0;
    c = (c + d0) | 0;
    d0 = c & 0x1fff;
    c = (c >>> 13);
    d1 += c;

    h0 = d0;
    h1 = d1;
    h2 = d2;
    h3 = d3;
    h4 = d4;
    h5 = d5;
    h6 = d6;
    h7 = d7;
    h8 = d8;
    h9 = d9;

    mpos += 16;
    bytes -= 16;
  }
  this.h[0] = h0;
  this.h[1] = h1;
  this.h[2] = h2;
  this.h[3] = h3;
  this.h[4] = h4;
  this.h[5] = h5;
  this.h[6] = h6;
  this.h[7] = h7;
  this.h[8] = h8;
  this.h[9] = h9;
};

poly1305.prototype.finish = function(mac, macpos) {
  var g = new Uint16Array(10);
  var c, mask, f, i;

  if (this.leftover) {
    i = this.leftover;
    this.buffer[i++] = 1;
    for (; i < 16; i++) this.buffer[i] = 0;
    this.fin = 1;
    this.blocks(this.buffer, 0, 16);
  }

  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  for (i = 2; i < 10; i++) {
    this.h[i] += c;
    c = this.h[i] >>> 13;
    this.h[i] &= 0x1fff;
  }
  this.h[0] += (c * 5);
  c = this.h[0] >>> 13;
  this.h[0] &= 0x1fff;
  this.h[1] += c;
  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  this.h[2] += c;

  g[0] = this.h[0] + 5;
  c = g[0] >>> 13;
  g[0] &= 0x1fff;
  for (i = 1; i < 10; i++) {
    g[i] = this.h[i] + c;
    c = g[i] >>> 13;
    g[i] &= 0x1fff;
  }
  g[9] -= (1 << 13);

  mask = (c ^ 1) - 1;
  for (i = 0; i < 10; i++) g[i] &= mask;
  mask = ~mask;
  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

  f = this.h[0] + this.pad[0];
  this.h[0] = f & 0xffff;
  for (i = 1; i < 8; i++) {
    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
    this.h[i] = f & 0xffff;
  }

  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
};

poly1305.prototype.update = function(m, mpos, bytes) {
  var i, want;

  if (this.leftover) {
    want = (16 - this.leftover);
    if (want > bytes)
      want = bytes;
    for (i = 0; i < want; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    bytes -= want;
    mpos += want;
    this.leftover += want;
    if (this.leftover < 16)
      return;
    this.blocks(this.buffer, 0, 16);
    this.leftover = 0;
  }

  if (bytes >= 16) {
    want = bytes - (bytes % 16);
    this.blocks(m, mpos, want);
    mpos += want;
    bytes -= want;
  }

  if (bytes) {
    for (i = 0; i < bytes; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    this.leftover += bytes;
  }
};

function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
  var s = new poly1305(k);
  s.update(m, mpos, n);
  s.finish(out, outpos);
  return 0;
}

function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
  var x = new Uint8Array(16);
  crypto_onetimeauth(x,0,m,mpos,n,k);
  return crypto_verify_16(h,hpos,x,0);
}

function crypto_secretbox(c,m,d,n,k) {
  var i;
  if (d < 32) return -1;
  crypto_stream_xor(c,0,m,0,d,n,k);
  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
  for (i = 0; i < 16; i++) c[i] = 0;
  return 0;
}

function crypto_secretbox_open(m,c,d,n,k) {
  var i;
  var x = new Uint8Array(32);
  if (d < 32) return -1;
  crypto_stream(x,0,32,n,k);
  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
  crypto_stream_xor(m,0,c,0,d,n,k);
  for (i = 0; i < 32; i++) m[i] = 0;
  return 0;
}

function set25519(r, a) {
  var i;
  for (i = 0; i < 16; i++) r[i] = a[i]|0;
}

function car25519(o) {
  var i, v, c = 1;
  for (i = 0; i < 16; i++) {
    v = o[i] + c + 65535;
    c = Math.floor(v / 65536);
    o[i] = v - c * 65536;
  }
  o[0] += c-1 + 37 * (c-1);
}

function sel25519(p, q, b) {
  var t, c = ~(b-1);
  for (var i = 0; i < 16; i++) {
    t = c & (p[i] ^ q[i]);
    p[i] ^= t;
    q[i] ^= t;
  }
}

function pack25519(o, n) {
  var i, j, b;
  var m = gf(), t = gf();
  for (i = 0; i < 16; i++) t[i] = n[i];
  car25519(t);
  car25519(t);
  car25519(t);
  for (j = 0; j < 2; j++) {
    m[0] = t[0] - 0xffed;
    for (i = 1; i < 15; i++) {
      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
      m[i-1] &= 0xffff;
    }
    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
    b = (m[15]>>16) & 1;
    m[14] &= 0xffff;
    sel25519(t, m, 1-b);
  }
  for (i = 0; i < 16; i++) {
    o[2*i] = t[i] & 0xff;
    o[2*i+1] = t[i]>>8;
  }
}

function neq25519(a, b) {
  var c = new Uint8Array(32), d = new Uint8Array(32);
  pack25519(c, a);
  pack25519(d, b);
  return crypto_verify_32(c, 0, d, 0);
}

function par25519(a) {
  var d = new Uint8Array(32);
  pack25519(d, a);
  return d[0] & 1;
}

function unpack25519(o, n) {
  var i;
  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
  o[15] &= 0x7fff;
}

function A(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
}

function Z(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
}

function M(o, a, b) {
  var v, c,
     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
    b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3],
    b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7],
    b8 = b[8],
    b9 = b[9],
    b10 = b[10],
    b11 = b[11],
    b12 = b[12],
    b13 = b[13],
    b14 = b[14],
    b15 = b[15];

  v = a[0];
  t0 += v * b0;
  t1 += v * b1;
  t2 += v * b2;
  t3 += v * b3;
  t4 += v * b4;
  t5 += v * b5;
  t6 += v * b6;
  t7 += v * b7;
  t8 += v * b8;
  t9 += v * b9;
  t10 += v * b10;
  t11 += v * b11;
  t12 += v * b12;
  t13 += v * b13;
  t14 += v * b14;
  t15 += v * b15;
  v = a[1];
  t1 += v * b0;
  t2 += v * b1;
  t3 += v * b2;
  t4 += v * b3;
  t5 += v * b4;
  t6 += v * b5;
  t7 += v * b6;
  t8 += v * b7;
  t9 += v * b8;
  t10 += v * b9;
  t11 += v * b10;
  t12 += v * b11;
  t13 += v * b12;
  t14 += v * b13;
  t15 += v * b14;
  t16 += v * b15;
  v = a[2];
  t2 += v * b0;
  t3 += v * b1;
  t4 += v * b2;
  t5 += v * b3;
  t6 += v * b4;
  t7 += v * b5;
  t8 += v * b6;
  t9 += v * b7;
  t10 += v * b8;
  t11 += v * b9;
  t12 += v * b10;
  t13 += v * b11;
  t14 += v * b12;
  t15 += v * b13;
  t16 += v * b14;
  t17 += v * b15;
  v = a[3];
  t3 += v * b0;
  t4 += v * b1;
  t5 += v * b2;
  t6 += v * b3;
  t7 += v * b4;
  t8 += v * b5;
  t9 += v * b6;
  t10 += v * b7;
  t11 += v * b8;
  t12 += v * b9;
  t13 += v * b10;
  t14 += v * b11;
  t15 += v * b12;
  t16 += v * b13;
  t17 += v * b14;
  t18 += v * b15;
  v = a[4];
  t4 += v * b0;
  t5 += v * b1;
  t6 += v * b2;
  t7 += v * b3;
  t8 += v * b4;
  t9 += v * b5;
  t10 += v * b6;
  t11 += v * b7;
  t12 += v * b8;
  t13 += v * b9;
  t14 += v * b10;
  t15 += v * b11;
  t16 += v * b12;
  t17 += v * b13;
  t18 += v * b14;
  t19 += v * b15;
  v = a[5];
  t5 += v * b0;
  t6 += v * b1;
  t7 += v * b2;
  t8 += v * b3;
  t9 += v * b4;
  t10 += v * b5;
  t11 += v * b6;
  t12 += v * b7;
  t13 += v * b8;
  t14 += v * b9;
  t15 += v * b10;
  t16 += v * b11;
  t17 += v * b12;
  t18 += v * b13;
  t19 += v * b14;
  t20 += v * b15;
  v = a[6];
  t6 += v * b0;
  t7 += v * b1;
  t8 += v * b2;
  t9 += v * b3;
  t10 += v * b4;
  t11 += v * b5;
  t12 += v * b6;
  t13 += v * b7;
  t14 += v * b8;
  t15 += v * b9;
  t16 += v * b10;
  t17 += v * b11;
  t18 += v * b12;
  t19 += v * b13;
  t20 += v * b14;
  t21 += v * b15;
  v = a[7];
  t7 += v * b0;
  t8 += v * b1;
  t9 += v * b2;
  t10 += v * b3;
  t11 += v * b4;
  t12 += v * b5;
  t13 += v * b6;
  t14 += v * b7;
  t15 += v * b8;
  t16 += v * b9;
  t17 += v * b10;
  t18 += v * b11;
  t19 += v * b12;
  t20 += v * b13;
  t21 += v * b14;
  t22 += v * b15;
  v = a[8];
  t8 += v * b0;
  t9 += v * b1;
  t10 += v * b2;
  t11 += v * b3;
  t12 += v * b4;
  t13 += v * b5;
  t14 += v * b6;
  t15 += v * b7;
  t16 += v * b8;
  t17 += v * b9;
  t18 += v * b10;
  t19 += v * b11;
  t20 += v * b12;
  t21 += v * b13;
  t22 += v * b14;
  t23 += v * b15;
  v = a[9];
  t9 += v * b0;
  t10 += v * b1;
  t11 += v * b2;
  t12 += v * b3;
  t13 += v * b4;
  t14 += v * b5;
  t15 += v * b6;
  t16 += v * b7;
  t17 += v * b8;
  t18 += v * b9;
  t19 += v * b10;
  t20 += v * b11;
  t21 += v * b12;
  t22 += v * b13;
  t23 += v * b14;
  t24 += v * b15;
  v = a[10];
  t10 += v * b0;
  t11 += v * b1;
  t12 += v * b2;
  t13 += v * b3;
  t14 += v * b4;
  t15 += v * b5;
  t16 += v * b6;
  t17 += v * b7;
  t18 += v * b8;
  t19 += v * b9;
  t20 += v * b10;
  t21 += v * b11;
  t22 += v * b12;
  t23 += v * b13;
  t24 += v * b14;
  t25 += v * b15;
  v = a[11];
  t11 += v * b0;
  t12 += v * b1;
  t13 += v * b2;
  t14 += v * b3;
  t15 += v * b4;
  t16 += v * b5;
  t17 += v * b6;
  t18 += v * b7;
  t19 += v * b8;
  t20 += v * b9;
  t21 += v * b10;
  t22 += v * b11;
  t23 += v * b12;
  t24 += v * b13;
  t25 += v * b14;
  t26 += v * b15;
  v = a[12];
  t12 += v * b0;
  t13 += v * b1;
  t14 += v * b2;
  t15 += v * b3;
  t16 += v * b4;
  t17 += v * b5;
  t18 += v * b6;
  t19 += v * b7;
  t20 += v * b8;
  t21 += v * b9;
  t22 += v * b10;
  t23 += v * b11;
  t24 += v * b12;
  t25 += v * b13;
  t26 += v * b14;
  t27 += v * b15;
  v = a[13];
  t13 += v * b0;
  t14 += v * b1;
  t15 += v * b2;
  t16 += v * b3;
  t17 += v * b4;
  t18 += v * b5;
  t19 += v * b6;
  t20 += v * b7;
  t21 += v * b8;
  t22 += v * b9;
  t23 += v * b10;
  t24 += v * b11;
  t25 += v * b12;
  t26 += v * b13;
  t27 += v * b14;
  t28 += v * b15;
  v = a[14];
  t14 += v * b0;
  t15 += v * b1;
  t16 += v * b2;
  t17 += v * b3;
  t18 += v * b4;
  t19 += v * b5;
  t20 += v * b6;
  t21 += v * b7;
  t22 += v * b8;
  t23 += v * b9;
  t24 += v * b10;
  t25 += v * b11;
  t26 += v * b12;
  t27 += v * b13;
  t28 += v * b14;
  t29 += v * b15;
  v = a[15];
  t15 += v * b0;
  t16 += v * b1;
  t17 += v * b2;
  t18 += v * b3;
  t19 += v * b4;
  t20 += v * b5;
  t21 += v * b6;
  t22 += v * b7;
  t23 += v * b8;
  t24 += v * b9;
  t25 += v * b10;
  t26 += v * b11;
  t27 += v * b12;
  t28 += v * b13;
  t29 += v * b14;
  t30 += v * b15;

  t0  += 38 * t16;
  t1  += 38 * t17;
  t2  += 38 * t18;
  t3  += 38 * t19;
  t4  += 38 * t20;
  t5  += 38 * t21;
  t6  += 38 * t22;
  t7  += 38 * t23;
  t8  += 38 * t24;
  t9  += 38 * t25;
  t10 += 38 * t26;
  t11 += 38 * t27;
  t12 += 38 * t28;
  t13 += 38 * t29;
  t14 += 38 * t30;
  // t15 left as is

  // first car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  // second car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  o[ 0] = t0;
  o[ 1] = t1;
  o[ 2] = t2;
  o[ 3] = t3;
  o[ 4] = t4;
  o[ 5] = t5;
  o[ 6] = t6;
  o[ 7] = t7;
  o[ 8] = t8;
  o[ 9] = t9;
  o[10] = t10;
  o[11] = t11;
  o[12] = t12;
  o[13] = t13;
  o[14] = t14;
  o[15] = t15;
}

function S(o, a) {
  M(o, a, a);
}

function inv25519(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 253; a >= 0; a--) {
    S(c, c);
    if(a !== 2 && a !== 4) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function pow2523(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 250; a >= 0; a--) {
      S(c, c);
      if(a !== 1) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function crypto_scalarmult(q, n, p) {
  var z = new Uint8Array(32);
  var x = new Float64Array(80), r, i;
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf();
  for (i = 0; i < 31; i++) z[i] = n[i];
  z[31]=(n[31]&127)|64;
  z[0]&=248;
  unpack25519(x,p);
  for (i = 0; i < 16; i++) {
    b[i]=x[i];
    d[i]=a[i]=c[i]=0;
  }
  a[0]=d[0]=1;
  for (i=254; i>=0; --i) {
    r=(z[i>>>3]>>>(i&7))&1;
    sel25519(a,b,r);
    sel25519(c,d,r);
    A(e,a,c);
    Z(a,a,c);
    A(c,b,d);
    Z(b,b,d);
    S(d,e);
    S(f,a);
    M(a,c,a);
    M(c,b,e);
    A(e,a,c);
    Z(a,a,c);
    S(b,a);
    Z(c,d,f);
    M(a,c,_121665);
    A(a,a,d);
    M(c,c,a);
    M(a,d,f);
    M(d,b,x);
    S(b,e);
    sel25519(a,b,r);
    sel25519(c,d,r);
  }
  for (i = 0; i < 16; i++) {
    x[i+16]=a[i];
    x[i+32]=c[i];
    x[i+48]=b[i];
    x[i+64]=d[i];
  }
  var x32 = x.subarray(32);
  var x16 = x.subarray(16);
  inv25519(x32,x32);
  M(x16,x16,x32);
  pack25519(q,x16);
  return 0;
}

function crypto_scalarmult_base(q, n) {
  return crypto_scalarmult(q, n, _9);
}

function crypto_box_keypair(y, x) {
  randombytes(x, 32);
  return crypto_scalarmult_base(y, x);
}

function crypto_box_beforenm(k, y, x) {
  var s = new Uint8Array(32);
  crypto_scalarmult(s, x, y);
  return crypto_core_hsalsa20(k, _0, s, sigma);
}

var crypto_box_afternm = crypto_secretbox;
var crypto_box_open_afternm = crypto_secretbox_open;

function crypto_box(c, m, d, n, y, x) {
  var k = new Uint8Array(32);
  crypto_box_beforenm(k, y, x);
  return crypto_box_afternm(c, m, d, n, k);
}

function crypto_box_open(m, c, d, n, y, x) {
  var k = new Uint8Array(32);
  crypto_box_beforenm(k, y, x);
  return crypto_box_open_afternm(m, c, d, n, k);
}

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function crypto_hashblocks_hl(hh, hl, m, n) {
  var wh = new Int32Array(16), wl = new Int32Array(16),
      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
      th, tl, i, j, h, l, a, b, c, d;

  var ah0 = hh[0],
      ah1 = hh[1],
      ah2 = hh[2],
      ah3 = hh[3],
      ah4 = hh[4],
      ah5 = hh[5],
      ah6 = hh[6],
      ah7 = hh[7],

      al0 = hl[0],
      al1 = hl[1],
      al2 = hl[2],
      al3 = hl[3],
      al4 = hl[4],
      al5 = hl[5],
      al6 = hl[6],
      al7 = hl[7];

  var pos = 0;
  while (n >= 128) {
    for (i = 0; i < 16; i++) {
      j = 8 * i + pos;
      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
    }
    for (i = 0; i < 80; i++) {
      bh0 = ah0;
      bh1 = ah1;
      bh2 = ah2;
      bh3 = ah3;
      bh4 = ah4;
      bh5 = ah5;
      bh6 = ah6;
      bh7 = ah7;

      bl0 = al0;
      bl1 = al1;
      bl2 = al2;
      bl3 = al3;
      bl4 = al4;
      bl5 = al5;
      bl6 = al6;
      bl7 = al7;

      // add
      h = ah7;
      l = al7;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma1
      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Ch
      h = (ah4 & ah5) ^ (~ah4 & ah6);
      l = (al4 & al5) ^ (~al4 & al6);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // K
      h = K[i*2];
      l = K[i*2+1];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // w
      h = wh[i%16];
      l = wl[i%16];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      th = c & 0xffff | d << 16;
      tl = a & 0xffff | b << 16;

      // add
      h = th;
      l = tl;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma0
      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Maj
      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh7 = (c & 0xffff) | (d << 16);
      bl7 = (a & 0xffff) | (b << 16);

      // add
      h = bh3;
      l = bl3;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = th;
      l = tl;

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh3 = (c & 0xffff) | (d << 16);
      bl3 = (a & 0xffff) | (b << 16);

      ah1 = bh0;
      ah2 = bh1;
      ah3 = bh2;
      ah4 = bh3;
      ah5 = bh4;
      ah6 = bh5;
      ah7 = bh6;
      ah0 = bh7;

      al1 = bl0;
      al2 = bl1;
      al3 = bl2;
      al4 = bl3;
      al5 = bl4;
      al6 = bl5;
      al7 = bl6;
      al0 = bl7;

      if (i%16 === 15) {
        for (j = 0; j < 16; j++) {
          // add
          h = wh[j];
          l = wl[j];

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = wh[(j+9)%16];
          l = wl[(j+9)%16];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma0
          th = wh[(j+1)%16];
          tl = wl[(j+1)%16];
          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma1
          th = wh[(j+14)%16];
          tl = wl[(j+14)%16];
          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          wh[j] = (c & 0xffff) | (d << 16);
          wl[j] = (a & 0xffff) | (b << 16);
        }
      }
    }

    // add
    h = ah0;
    l = al0;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[0];
    l = hl[0];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[0] = ah0 = (c & 0xffff) | (d << 16);
    hl[0] = al0 = (a & 0xffff) | (b << 16);

    h = ah1;
    l = al1;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[1];
    l = hl[1];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[1] = ah1 = (c & 0xffff) | (d << 16);
    hl[1] = al1 = (a & 0xffff) | (b << 16);

    h = ah2;
    l = al2;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[2];
    l = hl[2];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[2] = ah2 = (c & 0xffff) | (d << 16);
    hl[2] = al2 = (a & 0xffff) | (b << 16);

    h = ah3;
    l = al3;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[3];
    l = hl[3];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[3] = ah3 = (c & 0xffff) | (d << 16);
    hl[3] = al3 = (a & 0xffff) | (b << 16);

    h = ah4;
    l = al4;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[4];
    l = hl[4];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[4] = ah4 = (c & 0xffff) | (d << 16);
    hl[4] = al4 = (a & 0xffff) | (b << 16);

    h = ah5;
    l = al5;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[5];
    l = hl[5];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[5] = ah5 = (c & 0xffff) | (d << 16);
    hl[5] = al5 = (a & 0xffff) | (b << 16);

    h = ah6;
    l = al6;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[6];
    l = hl[6];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[6] = ah6 = (c & 0xffff) | (d << 16);
    hl[6] = al6 = (a & 0xffff) | (b << 16);

    h = ah7;
    l = al7;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[7];
    l = hl[7];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[7] = ah7 = (c & 0xffff) | (d << 16);
    hl[7] = al7 = (a & 0xffff) | (b << 16);

    pos += 128;
    n -= 128;
  }

  return n;
}

function crypto_hash(out, m, n) {
  var hh = new Int32Array(8),
      hl = new Int32Array(8),
      x = new Uint8Array(256),
      i, b = n;

  hh[0] = 0x6a09e667;
  hh[1] = 0xbb67ae85;
  hh[2] = 0x3c6ef372;
  hh[3] = 0xa54ff53a;
  hh[4] = 0x510e527f;
  hh[5] = 0x9b05688c;
  hh[6] = 0x1f83d9ab;
  hh[7] = 0x5be0cd19;

  hl[0] = 0xf3bcc908;
  hl[1] = 0x84caa73b;
  hl[2] = 0xfe94f82b;
  hl[3] = 0x5f1d36f1;
  hl[4] = 0xade682d1;
  hl[5] = 0x2b3e6c1f;
  hl[6] = 0xfb41bd6b;
  hl[7] = 0x137e2179;

  crypto_hashblocks_hl(hh, hl, m, n);
  n %= 128;

  for (i = 0; i < n; i++) x[i] = m[b-n+i];
  x[n] = 128;

  n = 256-128*(n<112?1:0);
  x[n-9] = 0;
  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
  crypto_hashblocks_hl(hh, hl, x, n);

  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

  return 0;
}

function add(p, q) {
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf(),
      g = gf(), h = gf(), t = gf();

  Z(a, p[1], p[0]);
  Z(t, q[1], q[0]);
  M(a, a, t);
  A(b, p[0], p[1]);
  A(t, q[0], q[1]);
  M(b, b, t);
  M(c, p[3], q[3]);
  M(c, c, D2);
  M(d, p[2], q[2]);
  A(d, d, d);
  Z(e, b, a);
  Z(f, d, c);
  A(g, d, c);
  A(h, b, a);

  M(p[0], e, f);
  M(p[1], h, g);
  M(p[2], g, f);
  M(p[3], e, h);
}

function cswap(p, q, b) {
  var i;
  for (i = 0; i < 4; i++) {
    sel25519(p[i], q[i], b);
  }
}

function pack(r, p) {
  var tx = gf(), ty = gf(), zi = gf();
  inv25519(zi, p[2]);
  M(tx, p[0], zi);
  M(ty, p[1], zi);
  pack25519(r, ty);
  r[31] ^= par25519(tx) << 7;
}

function scalarmult(p, q, s) {
  var b, i;
  set25519(p[0], gf0);
  set25519(p[1], gf1);
  set25519(p[2], gf1);
  set25519(p[3], gf0);
  for (i = 255; i >= 0; --i) {
    b = (s[(i/8)|0] >> (i&7)) & 1;
    cswap(p, q, b);
    add(q, p);
    add(p, p);
    cswap(p, q, b);
  }
}

function scalarbase(p, s) {
  var q = [gf(), gf(), gf(), gf()];
  set25519(q[0], X);
  set25519(q[1], Y);
  set25519(q[2], gf1);
  M(q[3], X, Y);
  scalarmult(p, q, s);
}

function crypto_sign_keypair(pk, sk, seeded) {
  var d = new Uint8Array(64);
  var p = [gf(), gf(), gf(), gf()];
  var i;

  if (!seeded) randombytes(sk, 32);
  crypto_hash(d, sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  scalarbase(p, d);
  pack(pk, p);

  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
  return 0;
}

var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

function modL(r, x) {
  var carry, i, j, k;
  for (i = 63; i >= 32; --i) {
    carry = 0;
    for (j = i - 32, k = i - 12; j < k; ++j) {
      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
      carry = Math.floor((x[j] + 128) / 256);
      x[j] -= carry * 256;
    }
    x[j] += carry;
    x[i] = 0;
  }
  carry = 0;
  for (j = 0; j < 32; j++) {
    x[j] += carry - (x[31] >> 4) * L[j];
    carry = x[j] >> 8;
    x[j] &= 255;
  }
  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
  for (i = 0; i < 32; i++) {
    x[i+1] += x[i] >> 8;
    r[i] = x[i] & 255;
  }
}

function reduce(r) {
  var x = new Float64Array(64), i;
  for (i = 0; i < 64; i++) x[i] = r[i];
  for (i = 0; i < 64; i++) r[i] = 0;
  modL(r, x);
}

// Note: difference from C - smlen returned, not passed as argument.
function crypto_sign(sm, m, n, sk) {
  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
  var i, j, x = new Float64Array(64);
  var p = [gf(), gf(), gf(), gf()];

  crypto_hash(d, sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  var smlen = n + 64;
  for (i = 0; i < n; i++) sm[64 + i] = m[i];
  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

  crypto_hash(r, sm.subarray(32), n+32);
  reduce(r);
  scalarbase(p, r);
  pack(sm, p);

  for (i = 32; i < 64; i++) sm[i] = sk[i];
  crypto_hash(h, sm, n + 64);
  reduce(h);

  for (i = 0; i < 64; i++) x[i] = 0;
  for (i = 0; i < 32; i++) x[i] = r[i];
  for (i = 0; i < 32; i++) {
    for (j = 0; j < 32; j++) {
      x[i+j] += h[i] * d[j];
    }
  }

  modL(sm.subarray(32), x);
  return smlen;
}

function unpackneg(r, p) {
  var t = gf(), chk = gf(), num = gf(),
      den = gf(), den2 = gf(), den4 = gf(),
      den6 = gf();

  set25519(r[2], gf1);
  unpack25519(r[1], p);
  S(num, r[1]);
  M(den, num, D);
  Z(num, num, r[2]);
  A(den, r[2], den);

  S(den2, den);
  S(den4, den2);
  M(den6, den4, den2);
  M(t, den6, num);
  M(t, t, den);

  pow2523(t, t);
  M(t, t, num);
  M(t, t, den);
  M(t, t, den);
  M(r[0], t, den);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) M(r[0], r[0], I);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) return -1;

  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

  M(r[3], r[0], r[1]);
  return 0;
}

function crypto_sign_open(m, sm, n, pk) {
  var i;
  var t = new Uint8Array(32), h = new Uint8Array(64);
  var p = [gf(), gf(), gf(), gf()],
      q = [gf(), gf(), gf(), gf()];

  if (n < 64) return -1;

  if (unpackneg(q, pk)) return -1;

  for (i = 0; i < n; i++) m[i] = sm[i];
  for (i = 0; i < 32; i++) m[i+32] = pk[i];
  crypto_hash(h, m, n);
  reduce(h);
  scalarmult(p, q, h);

  scalarbase(q, sm.subarray(32));
  add(p, q);
  pack(t, p);

  n -= 64;
  if (crypto_verify_32(sm, 0, t, 0)) {
    for (i = 0; i < n; i++) m[i] = 0;
    return -1;
  }

  for (i = 0; i < n; i++) m[i] = sm[i + 64];
  return n;
}

var crypto_secretbox_KEYBYTES = 32,
    crypto_secretbox_NONCEBYTES = 24,
    crypto_secretbox_ZEROBYTES = 32,
    crypto_secretbox_BOXZEROBYTES = 16,
    crypto_scalarmult_BYTES = 32,
    crypto_scalarmult_SCALARBYTES = 32,
    crypto_box_PUBLICKEYBYTES = 32,
    crypto_box_SECRETKEYBYTES = 32,
    crypto_box_BEFORENMBYTES = 32,
    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
    crypto_sign_BYTES = 64,
    crypto_sign_PUBLICKEYBYTES = 32,
    crypto_sign_SECRETKEYBYTES = 64,
    crypto_sign_SEEDBYTES = 32,
    crypto_hash_BYTES = 64;

nacl.lowlevel = {
  crypto_core_hsalsa20: crypto_core_hsalsa20,
  crypto_stream_xor: crypto_stream_xor,
  crypto_stream: crypto_stream,
  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
  crypto_stream_salsa20: crypto_stream_salsa20,
  crypto_onetimeauth: crypto_onetimeauth,
  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
  crypto_verify_16: crypto_verify_16,
  crypto_verify_32: crypto_verify_32,
  crypto_secretbox: crypto_secretbox,
  crypto_secretbox_open: crypto_secretbox_open,
  crypto_scalarmult: crypto_scalarmult,
  crypto_scalarmult_base: crypto_scalarmult_base,
  crypto_box_beforenm: crypto_box_beforenm,
  crypto_box_afternm: crypto_box_afternm,
  crypto_box: crypto_box,
  crypto_box_open: crypto_box_open,
  crypto_box_keypair: crypto_box_keypair,
  crypto_hash: crypto_hash,
  crypto_sign: crypto_sign,
  crypto_sign_keypair: crypto_sign_keypair,
  crypto_sign_open: crypto_sign_open,

  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
  crypto_sign_BYTES: crypto_sign_BYTES,
  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
  crypto_hash_BYTES: crypto_hash_BYTES,

  gf: gf,
  D: D,
  L: L,
  pack25519: pack25519,
  unpack25519: unpack25519,
  M: M,
  A: A,
  S: S,
  Z: Z,
  pow2523: pow2523,
  add: add,
  set25519: set25519,
  modL: modL,
  scalarmult: scalarmult,
  scalarbase: scalarbase,
};

/* High-level API */

function checkLengths(k, n) {
  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
}

function checkBoxLengths(pk, sk) {
  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
}

function checkArrayTypes() {
  for (var i = 0; i < arguments.length; i++) {
    if (!(arguments[i] instanceof Uint8Array))
      throw new TypeError('unexpected type, use Uint8Array');
  }
}

function cleanup(arr) {
  for (var i = 0; i < arr.length; i++) arr[i] = 0;
}

nacl.randomBytes = function(n) {
  var b = new Uint8Array(n);
  randombytes(b, n);
  return b;
};

nacl.secretbox = function(msg, nonce, key) {
  checkArrayTypes(msg, nonce, key);
  checkLengths(key, nonce);
  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
  var c = new Uint8Array(m.length);
  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
  crypto_secretbox(c, m, m.length, nonce, key);
  return c.subarray(crypto_secretbox_BOXZEROBYTES);
};

nacl.secretbox.open = function(box, nonce, key) {
  checkArrayTypes(box, nonce, key);
  checkLengths(key, nonce);
  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
  var m = new Uint8Array(c.length);
  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
  if (c.length < 32) return null;
  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
  return m.subarray(crypto_secretbox_ZEROBYTES);
};

nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

nacl.scalarMult = function(n, p) {
  checkArrayTypes(n, p);
  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
  var q = new Uint8Array(crypto_scalarmult_BYTES);
  crypto_scalarmult(q, n, p);
  return q;
};

nacl.scalarMult.base = function(n) {
  checkArrayTypes(n);
  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  var q = new Uint8Array(crypto_scalarmult_BYTES);
  crypto_scalarmult_base(q, n);
  return q;
};

nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

nacl.box = function(msg, nonce, publicKey, secretKey) {
  var k = nacl.box.before(publicKey, secretKey);
  return nacl.secretbox(msg, nonce, k);
};

nacl.box.before = function(publicKey, secretKey) {
  checkArrayTypes(publicKey, secretKey);
  checkBoxLengths(publicKey, secretKey);
  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
  crypto_box_beforenm(k, publicKey, secretKey);
  return k;
};

nacl.box.after = nacl.secretbox;

nacl.box.open = function(msg, nonce, publicKey, secretKey) {
  var k = nacl.box.before(publicKey, secretKey);
  return nacl.secretbox.open(msg, nonce, k);
};

nacl.box.open.after = nacl.secretbox.open;

nacl.box.keyPair = function() {
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
  crypto_box_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.box.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  crypto_scalarmult_base(pk, secretKey);
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
nacl.box.nonceLength = crypto_box_NONCEBYTES;
nacl.box.overheadLength = nacl.secretbox.overheadLength;

nacl.sign = function(msg, secretKey) {
  checkArrayTypes(msg, secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
  crypto_sign(signedMsg, msg, msg.length, secretKey);
  return signedMsg;
};

nacl.sign.open = function(signedMsg, publicKey) {
  checkArrayTypes(signedMsg, publicKey);
  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    throw new Error('bad public key size');
  var tmp = new Uint8Array(signedMsg.length);
  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
  if (mlen < 0) return null;
  var m = new Uint8Array(mlen);
  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
  return m;
};

nacl.sign.detached = function(msg, secretKey) {
  var signedMsg = nacl.sign(msg, secretKey);
  var sig = new Uint8Array(crypto_sign_BYTES);
  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
  return sig;
};

nacl.sign.detached.verify = function(msg, sig, publicKey) {
  checkArrayTypes(msg, sig, publicKey);
  if (sig.length !== crypto_sign_BYTES)
    throw new Error('bad signature size');
  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    throw new Error('bad public key size');
  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
  var i;
  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
};

nacl.sign.keyPair = function() {
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  crypto_sign_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.sign.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.sign.keyPair.fromSeed = function(seed) {
  checkArrayTypes(seed);
  if (seed.length !== crypto_sign_SEEDBYTES)
    throw new Error('bad seed size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  for (var i = 0; i < 32; i++) sk[i] = seed[i];
  crypto_sign_keypair(pk, sk, true);
  return {publicKey: pk, secretKey: sk};
};

nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
nacl.sign.seedLength = crypto_sign_SEEDBYTES;
nacl.sign.signatureLength = crypto_sign_BYTES;

nacl.hash = function(msg) {
  checkArrayTypes(msg);
  var h = new Uint8Array(crypto_hash_BYTES);
  crypto_hash(h, msg, msg.length);
  return h;
};

nacl.hash.hashLength = crypto_hash_BYTES;

nacl.verify = function(x, y) {
  checkArrayTypes(x, y);
  // Zero length arguments are considered not equal.
  if (x.length === 0 || y.length === 0) return false;
  if (x.length !== y.length) return false;
  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
};

nacl.setPRNG = function(fn) {
  randombytes = fn;
};

(function() {
  // Initialize PRNG if environment provides CSPRNG.
  // If not, methods calling randombytes will throw.
  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
  if (crypto && crypto.getRandomValues) {
    // Browsers.
    var QUOTA = 65536;
    nacl.setPRNG(function(x, n) {
      var i, v = new Uint8Array(n);
      for (i = 0; i < n; i += QUOTA) {
        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
      }
      for (i = 0; i < n; i++) x[i] = v[i];
      cleanup(v);
    });
  } else if (typeof require !== 'undefined') {
    // Node.js.
    crypto = require('crypto');
    if (crypto && crypto.randomBytes) {
      nacl.setPRNG(function(x, n) {
        var i, v = crypto.randomBytes(n);
        for (i = 0; i < n; i++) x[i] = v[i];
        cleanup(v);
      });
    }
  }
})();

})(typeof module !== 'undefined' && module.exports ? module.exports : (self.nacl = self.nacl || {}));

},{"crypto":741}],971:[function(require,module,exports){
"use strict";

var _api = require("@polkadot/api");

var _keyring = require("@polkadot/keyring");

var _utilCrypto = require("@polkadot/util-crypto");

let initialized = false,
    provider,
    api,
    keyring,
    votServer; //'wss://kusama-rpc.polkadot.io'
//ss58Format: 2 (for kusama)

window.initializeVeilOfTimeNft = async (wsProvider, veilOfTimeServerHttpApiAddress, ss58Format) => {
  try {
    console.log('initializing');
    await (0, _utilCrypto.cryptoWaitReady)();
    provider = new _api.WsProvider(wsProvider);
    api = await new _api.ApiPromise({
      provider
    }).isReady;
    keyring = new _keyring.Keyring({
      type: 'sr25519',
      ss58Format
    });
    votServer = veilOfTimeServerHttpApiAddress;
    initialized = true;
    console.log('initizliaed');
    return {
      result: 'success'
    };
  } catch (error) {
    console.error(error);
    return {
      result: 'error',
      error
    };
  }
};

window.buyNft = async (sender, nftId, sellerAddress, price) => {
  try {
    if (!initialized) {
      throw new Error("Not Initialized");
    }

    let isBeingBought = await isNftBeingBought(nftId);

    if (isBeingBought) {
      return false;
    }

    let remarks = [];
    let formattedPrice = BigInt(price) * BigInt(1000000);
    formattedPrice = formattedPrice.toString(); //console.log(`Listing Item For Sale: RMRK::LIST::2.0.0::${nftId}::${formattedPrice}`)

    remarks.push(api.tx.system.remark(`RMRK::BUY::2.0.0::${nftId}`));
    remarks.push(api.tx.balances.transfer(sellerAddress, formattedPrice));
    const tx = api.tx.utility.batchAll(remarks);
    console.log('making batchAll buy for nft: ');
    await tx.signAndSend(sender, {
      signer: sender.sign
    }, async result => {
      if (result.status.isInBlock) {
        console.log(`pending...`);
      } else if (result.status.isFinalized) {
        console.log(result);
        return {
          result: 'success'
        };
      }
    });
    return true;
  } catch (error) {
    console.error(`Error sending : ${error}`);
    return {
      result: 'error',
      error
    };
  }
};

window.listNft = async (sender, nftId, price) => {
  try {
    if (!initialized) {
      throw new Error("Not Initialized");
    }

    let remarks = [];
    let formattedPrice = BigInt(price) * BigInt(1000000);
    formattedPrice = formattedPrice.toString(); //console.log(`Listing Item For Sale: RMRK::LIST::2.0.0::${nftId}::${formattedPrice}`)

    remarks.push(api.tx.system.remark(`RMRK::LIST::2.0.0::${nftId}::${formattedPrice}`));
    const tx = api.tx.utility.batchAll(remarks);
    await tx.signAndSend(sender, {
      signer: sender.sign
    }, async result => {
      if (result.status.isInBlock) {
        console.log(`pending...`);
      } else if (result.status.isFinalized) {
        console.log(result);
        writeToScreen(JSON.stringify(result), null);
        return {
          result: 'success'
        };
      }
    });
  } catch (error) {
    console.error(`Error sending : ${error}`);
    return {
      result: 'error',
      error
    };
  }
};

window.isNftBeingBought = nftId => {
  return new Promise(res => {
    let xmlHttp = new XMLHttpRequest();

    xmlHttp.onreadystatechange = function () {
      if (xmlHttp.readyState === 4 && xmlHttp.status === 200) return res(xmlHttp.responseText);
    };

    console.log(votServer + "/is_nft_being_bought/" + nftId);
    xmlHttp.open("GET", votServer + "/is_nft_being_bought/" + nftId, true); // true for asynchronous

    xmlHttp.send(null);
  });
};

window.getNftsForSale = collection => {
  return new Promise(res => {
    let xmlHttp = new XMLHttpRequest();

    xmlHttp.onreadystatechange = function () {
      if (xmlHttp.readyState === 4 && xmlHttp.status === 200) return res(xmlHttp.responseText);
    };

    console.log(votServer + "/get_nfts_for_sale_in_collection/" + collection);
    xmlHttp.open("GET", votServer + "/get_nfts_for_sale_in_collection/" + collection, true); // true for asynchronous

    xmlHttp.send(null);
  });
};

window.getMyNfts = address => {
  return new Promise(res => {
    let xmlHttp = new XMLHttpRequest();

    xmlHttp.onreadystatechange = function () {
      if (xmlHttp.readyState === 4 && xmlHttp.status === 200) return res(xmlHttp.responseText);
    };

    console.log(votServer + "/get_nfts_owned_by/" + address);
    xmlHttp.open("GET", votServer + "/get_nfts_owned_by/" + address, true); // true for asynchronous

    xmlHttp.send(null);
  });
};

window.getNft = nftId => {
  return new Promise(res => {
    let xmlHttp = new XMLHttpRequest();

    xmlHttp.onreadystatechange = function () {
      if (xmlHttp.readyState === 4 && xmlHttp.status === 200) return res(xmlHttp.responseText);
    };

    xmlHttp.open("GET", votServer + "/get_nft_by_id/" + nftId, true); // true for asynchronous

    xmlHttp.send(null);
  });
};

window.sendNft = async (sender, nftId, recipient) => {
  try {
    if (!initialized) {
      throw new Error("Not Initialized");
    }

    let remarks = [];
    remarks.push(api.tx.system.remark(`RMRK::SEND::2.0.0::${nftId}::${recipient}`));
    const tx = api.tx.utility.batchAll(remarks);
    await tx.signAndSend(sender, {
      signer: sender.sign
    }, async result => {
      if (result.status.isInBlock) {
        console.log(`pending...`);
      } else if (result.status.isFinalized) {
        console.log(result);
        writeToScreen(JSON.stringify(result), null);
        return {
          result: 'success'
        };
      }
    });
  } catch (error) {
    console.error(`Error sending : ${error}`);
    return {
      result: 'error',
      error
    };
  }
};

window.getNewAddress = async () => {
  try {
    if (!initialized) {
      throw new Error("Not Initialized");
    }

    const mnemonic = (0, _utilCrypto.mnemonicGenerate)();
    const keypair = keyring.addFromUri(mnemonic, {
      name: 'sr25519'
    });
    return {
      mnemonic,
      address: keypair.address
    };
  } catch (error) {
    console.error(`Error getting New Address : ${error}`);
    return {
      result: 'error',
      error
    };
  }
};

window.getNewAddressFromMnemonic = async mnemonic => {
  try {
    if (!initialized) {
      throw new Error("Not Initialized");
    }

    const res = keyring.addFromUri(mnemonic, {
      name: 'sr25519'
    });
    return res;
  } catch (error) {
    console.error(`Error getting New Address From Mnemonic : ${error}`);
    return {
      result: 'error',
      error
    };
  }
};

window.getMyBalance = async address => {
  try {
    if (!initialized) {
      throw new Error("Not Initialized");
    }

    const {
      data: {
        free: previousFree
      },
      nonce: previousNonce
    } = await api.query.system.account(address);
    let balance = (BigInt(previousFree.toHuman().split(",").join('')) / BigInt(1000000)).toString();
    let balanceString = balance;
    let phraseIndex = 0;
    let phrases = ["", " K", " M", " B", " T"];

    while (balanceString >= BigInt(1000000)) {
      balanceString /= 1000000;
      phraseIndex++;
    }

    balanceString = balanceString.toString().split(".");

    if (balanceString.length > 1) {
      balanceString[1] = balanceString[1].substr(0, 2);
    }

    balanceString = balanceString.join('.');
    balanceString += phrases[phraseIndex];
    return {
      b: previousFree,
      balanceHuman: previousFree.toHuman(),
      balance: balanceString,
      n: previousNonce,
      nonce: previousNonce.toHuman()
    };
  } catch (error) {
    console.error(`Error getting Balance : ${error}`);
    return {
      result: 'error',
      error
    };
  }
};
/*
    Add functions to Query VoT server:
        /get_my_nfts
        /get_my_nfts_by_collection
        /get_specific_nft

        /list_nft_for_sale (handled by singular)
*/

/*
export default {
    sendNft,
    initializeVeilOfTimeNft,
    getMyBalance,
    getNewAddress,
    getNewAddressFromMnemonic
}


await initializeVeilOfTimeNft('wss://kusama-rpc.polkadot.io', 1, 2)
let addr = await getNewAddress()
console.log(addr.mnemonic, " ", addr.address)
//addr = await getNewAddressFromMnemonic(addr.mnemonic)
console.log(addr.address)
let {balance, nonce} = await getMyBalance(addr.address)
//console.log(balance.toString() + " " + nonce.toString())


*/

/*
const data = await getNewAddressFromMnemonic(
    "decrease avoid burden ask sight pull bubble faculty galaxy false economy dress",
    keyring)
keyring.pairs.map(x => console.log(x.address))
await sendNft(data, "xxxxx", "D33Zpitb24GDnqa1KvP3C7hEziAazMu9Ey1KcLjULLDiitu")
// make a call to retrieve the current network head

api.rpc.chain.subscribeNewHeads((header) => {
    console.log(`Chain is at #${header.number}`);
});
*/
//const rmrkAddress = "HeyRMRK7L7APFpBrBqeY62dNhFKVGP4JgwQpcog2VTb3RMU";
//const data  = await api.query.system.account(rmrkAddress);

/*
const scanExtrinsics = () => {

    api.rpc.chain.getBlock('0xc8def2aa2f1ae6b3e60b63896d21520db3225601d130733ff430c29a2750e406', data => {
        let extrinsics = data.toHuman()
        console.log(extrinsics.block.extrinsics)
        extrinsics.block.extrinsics.forEach(e => {
            let { args, method, section} = JSON.parse(JSON.stringify(e.method))
            if(section === 'utility' && method === 'batchAll') {
                args.calls.map(call => {
                    console.log(call)
                })
            }
        })

    //    extrinsics.map(e => {
    //        console.log(e.toHuman())
    //    })
       // console.log(data)
    })
    api.rpc.author.pendingExtrinsics(data => {
        console.log('extrinsics')
        if(data.length > 0) {
            data.map(ext => {
                let { signer, method } = ext.toHuman()
                let id = signer.Id
             //   console.log(id)
              //  console.log(method)
              //  console.log(ext.toHuman())
            })
        }
      //  return setTimeout(scanExtrinsics, 1000)
    })
}

scanExtrinsics()
*/

},{"@polkadot/api":143,"@polkadot/keyring":166,"@polkadot/util-crypto":513}],972:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],973:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":972,"buffer":973,"ieee754":974}],974:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],975:[function(require,module,exports){
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}

},{}],976:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[971]);
