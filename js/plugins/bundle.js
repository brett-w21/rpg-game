(function () {
  'use strict';

  var global$1 = (typeof global !== "undefined" ? global :
    typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window : {});

  // Copyright 2017-2022 @polkadot/x-global authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  ({
    name: '@polkadot/x-global',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  });

  function evaluateThis(fn) {
    return fn('return this');
  }

  const xglobal = typeof globalThis !== 'undefined' ? globalThis : typeof global$1 !== 'undefined' ? global$1 : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : evaluateThis(Function);
  function extractGlobal(name, fallback) {
    // Not quite sure why this is here - snuck in with TS 4.7.2 with no real idea
    // (as of now) as to why this looks like an "any" when we do cast it to a T
    //
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return typeof xglobal[name] === 'undefined' ? fallback : xglobal[name];
  }
  function exposeGlobal(name, fallback) {
    if (typeof xglobal[name] === 'undefined') {
      xglobal[name] = fallback;
    }
  }

  // Copyright 2017-2022 @polkadot/x-textencoder authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // This is very limited, only handling Ascii values
  class TextDecoder$2 {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars,no-useless-constructor
    constructor(_) {// nothing
    }

    decode(value) {
      let result = '';

      for (let i = 0; i < value.length; i++) {
        result += String.fromCharCode(value[i]);
      }

      return result;
    }

  }

  // Copyright 2017-2022 @polkadot/x-textdecoder authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$l = {
    name: '@polkadot/x-textdecoder',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  };

  // Copyright 2017-2022 @polkadot/x-textencoder authors & contributors
  const TextDecoder$1 = extractGlobal('TextDecoder', TextDecoder$2);

  // Copyright 2017-2022 @polkadot/x-textencoder authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // This is very limited, only handling Ascii values
  class TextEncoder$2 {
    encode(value) {
      const u8a = new Uint8Array(value.length);

      for (let i = 0; i < value.length; i++) {
        u8a[i] = value.charCodeAt(i);
      }

      return u8a;
    }

  }

  // Copyright 2017-2022 @polkadot/x-textencoder authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$k = {
    name: '@polkadot/x-textencoder',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  };

  // Copyright 2017-2022 @polkadot/x-textencoder authors & contributors
  const TextEncoder$1 = extractGlobal('TextEncoder', TextEncoder$2);

  // Copyright 2017-2022 @polkadot/util authors & contributors
  var others$f = [packageInfo$l, packageInfo$k];

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$j = {
    name: '@polkadot/util',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  };

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // eslint-disable-next-line @typescript-eslint/ban-types

  /**
   * @name isFunction
   * @summary Tests for a `function`.
   * @description
   * Checks to see if the input value is a JavaScript function.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isFunction } from '@polkadot/util';
   *
   * isFunction(() => false); // => true
   * ```
   */
  function isFunction$2(value) {
    return typeof value === 'function';
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const DEDUPE = 'Either remove and explicitly install matching versions or dedupe using your package manager.\nThe following conflicting packages were found:';
  /** @internal */

  function getEntry(name) {
    const _global = xglobal;

    if (!_global.__polkadotjs) {
      _global.__polkadotjs = {};
    }

    if (!_global.__polkadotjs[name]) {
      _global.__polkadotjs[name] = [];
    }

    return _global.__polkadotjs[name];
  }
  /** @internal */


  function formatDisplay(all, fmt) {
    let max = 0;

    for (let i = 0; i < all.length; i++) {
      max = Math.max(max, all[i].version.length);
    }

    return all.map(d => `\t${fmt(d.version.padEnd(max), d).join('\t')}`).join('\n');
  }
  /** @internal */


  function formatInfo(version, {
    name
  }) {
    return [version, name];
  }
  /** @internal */


  function formatVersion(version, {
    path,
    type
  }) {
    let extracted;

    if (path && path.length >= 5) {
      const nmIndex = path.indexOf('node_modules');
      extracted = nmIndex === -1 ? path : path.substring(nmIndex);
    } else {
      extracted = '<unknown>';
    }

    return [`${`${type || ''}`.padStart(3)} ${version}`, extracted];
  }
  /** @internal */


  function getPath(infoPath, pathOrFn) {
    if (infoPath) {
      return infoPath;
    } else if (isFunction$2(pathOrFn)) {
      try {
        return pathOrFn() || '';
      } catch (error) {
        return '';
      }
    }

    return pathOrFn || '';
  }
  /** @internal */


  function warn$1(pre, all, fmt) {
    console.warn(`${pre}\n${DEDUPE}\n${formatDisplay(all, fmt)}`);
  }
  /**
   * @name detectPackage
   * @summary Checks that a specific package is only imported once
   * @description A `@polkadot/*` version detection utility, checking for one occurence of a package in addition to checking for ddependency versions.
   */


  function detectPackage({
    name,
    path,
    type,
    version
  }, pathOrFn, deps = []) {
    if (!name.startsWith('@polkadot')) {
      throw new Error(`Invalid package descriptor ${name}`);
    }

    const entry = getEntry(name);
    entry.push({
      path: getPath(path, pathOrFn),
      type,
      version
    });

    if (entry.length !== 1) {
      warn$1(`${name} has multiple versions, ensure that there is only one installed.`, entry, formatVersion);
    } else {
      const mismatches = deps.filter(d => d && d.version !== version);

      if (mismatches.length) {
        warn$1(`${name} requires direct dependencies exactly matching version ${version}.`, mismatches, formatInfo);
      }
    }
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  detectPackage(packageInfo$j, null, others$f);

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name arrayChunk
   * @summary Split T[] into T[][] based on the defind size
   * @description
   * Returns a set ao arrays based on the chunksize
   * @example
   * <BR>
   *
   * ```javascript
   * import { arrayChunk } from '@polkadot/util';
   *
   * arrayChunk([1, 2, 3, 4, 5]); // [[1, 2], [3, 4], [5]]
   * ```
   */
  function arrayChunk(array, chunkSize) {
    const outputSize = Math.ceil(array.length / chunkSize); // noop for the single-split case

    if (outputSize === 1) {
      return [array];
    }

    const output = Array(outputSize);

    for (let i = 0; i < outputSize; i++) {
      const offset = i * chunkSize;
      output[i] = array.slice(offset, offset + chunkSize);
    }

    return output;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // This is supposed to be a faster concat...
  // https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki

  /**
   * @name arrayFlatten
   * @summary Merge T[][] into T[]
   * @description
   * Returns a new array with all arrays merged into one
   * @example
   * <BR>
   *
   * ```javascript
   * import { arrayFlatten } from '@polkadot/util';
   *
   * arrayFlatten([[1, 2], [3, 4], [5]]); // [1, 2, 3, 4, 5]
   * ```
   */
  function arrayFlatten(arrays) {
    // noop for the single-entry case
    if (arrays.length === 1) {
      return arrays[0];
    } // pre-allocate based on the combined size


    let size = 0;

    for (let i = 0; i < arrays.length; i++) {
      size += arrays[i].length;
    }

    const output = new Array(size);
    let i = -1;

    for (let j = 0; j < arrays.length; j++) {
      const a = arrays[j]; // instead of pushing, we just set the entries

      for (let e = 0; e < a.length; e++) {
        output[++i] = a[e];
      }
    }

    return output;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors

  /**
   * @name assert
   * @summary Checks for a valid test, if not Error is thrown.
   * @description
   * Checks that `test` is a truthy value. If value is falsy (`null`, `undefined`, `false`, ...), it throws an Error with the supplied `message`. When `test` passes, `true` is returned.
   * @example
   * <BR>
   *
   * ```javascript
   * const { assert } from '@polkadot/util';
   *
   * assert(true, 'True should be true'); // passes
   * assert(false, 'False should not be true'); // Error thrown
   * assert(false, () => 'message'); // Error with 'message'
   * ```
   */
  function assert$1(condition, message) {
    if (!condition) {
      throw new Error(isFunction$2(message) ? message() : message);
    }
  }
  /**
   * @name assertReturn
   * @description Returns when the value is not undefined/null, otherwise throws assertion error
   */

  function assertReturn(value, message) {
    assert$1(value !== undefined && value !== null, message);
    return value;
  }
  /**
   * @name assertUnreachable
   * @description An assertion helper that ensures all codepaths are followed
   */

  function assertUnreachable(x) {
    throw new Error(`This codepath should be unreachable. Unhandled input: ${x}`);
  }

  // Copyright 2017-2022 @polkadot/x-bigint authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  ({
    name: '@polkadot/x-bigint',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  });

  // Copyright 2017-2022 @polkadot/x-bigint authors & contributors
  const BigInt$1 = typeof xglobal.BigInt === 'function' && typeof xglobal.BigInt.asIntN === 'function' ? xglobal.BigInt : () => Number.NaN;

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name _0n
   * @summary BigInt constant for 0.
   */

  const _0n$2 = BigInt$1(0);
  /**
   * @name _1n
   * @summary BigInt constant for 1.
   */

  const _1n$2 = BigInt$1(1);
  /**
   * @name _1Mn
   * @summary BigInt constant for 1,000,000.
   */

  BigInt$1(1000000);
  /**
  * @name _1Bn
  * @summary BigInt constant for 1,000,000,000.
  */

  BigInt$1(1000000000);
  /**
  * @name _2pow53n
  * @summary BigInt constant for MAX_SAFE_INTEGER
  */

  BigInt$1(Number.MAX_SAFE_INTEGER);

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name objectSpread
   * @summary Concats all sources into the destination
   */
  function objectSpread(dest, ...sources) {
    for (let i = 0; i < sources.length; i++) {
      const src = sources[i];

      if (src) {
        Object.assign(dest, src);
      }
    }

    return dest;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const U8_MAX = BigInt$1(256);
  const U16_MAX = BigInt$1(256 * 256);
  /**
   * @name u8aToBigInt
   * @summary Creates a BigInt from a Uint8Array object.
   */

  function u8aToBigInt(value, {
    isLe = true,
    isNegative = false
  } = {}) {
    if (!value || !value.length) {
      return BigInt$1(0);
    }

    const u8a = isLe ? value : value.reverse();
    const dvI = new DataView(u8a.buffer, u8a.byteOffset);
    const mod = u8a.length % 2;
    let result = BigInt$1(0); // This is mostly written for readability (with the single isNegative shortcut),
    // as opposed to performance, e.g. `u8aToBn` does loop unrolling, etc.

    if (isNegative) {
      for (let i = u8a.length - 2; i >= mod; i -= 2) {
        result = result * U16_MAX + BigInt$1(dvI.getUint16(i, true) ^ 0xffff);
      }

      if (mod) {
        result = result * U8_MAX + BigInt$1(dvI.getUint8(0) ^ 0xff);
      }
    } else {
      for (let i = u8a.length - 2; i >= mod; i -= 2) {
        result = result * U16_MAX + BigInt$1(dvI.getUint16(i, true));
      }

      if (mod) {
        result = result * U8_MAX + BigInt$1(dvI.getUint8(0));
      }
    }

    return isNegative ? result * -_1n$2 - _1n$2 : result;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const REGEX_HEX_PREFIXED = /^0x[\da-fA-F]+$/;
  const REGEX_HEX_NOPREFIX = /^[\da-fA-F]+$/;
  /**
   * @name isHex
   * @summary Tests for a hex string.
   * @description
   * Checks to see if the input value is a `0x` prefixed hex string. Optionally (`bitLength` !== -1) checks to see if the bitLength is correct.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isHex } from '@polkadot/util';
   *
   * isHex('0x1234'); // => true
   * isHex('0x1234', 8); // => false
   * ```
   */

  function isHex(value, bitLength = -1, ignoreLength) {
    return typeof value === 'string' && (value === '0x' || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const CHARS = '0123456789abcdef';
  const UNHEX = new Array(256);

  for (let i = 0; i < CHARS.length; i++) {
    UNHEX[CHARS[i].charCodeAt(0)] = i;

    if (i > 9) {
      UNHEX[CHARS[i].toUpperCase().charCodeAt(0)] = i;
    }
  }
  /**
   * @name hexToU8a
   * @summary Creates a Uint8Array object from a hex string.
   * @description
   * `null` inputs returns an empty `Uint8Array` result. Hex input values return the actual bytes value converted to a Uint8Array. Anything that is not a hex string (including the `0x` prefix) throws an error.
   * @example
   * <BR>
   *
   * ```javascript
   * import { hexToU8a } from '@polkadot/util';
   *
   * hexToU8a('0x80001f'); // Uint8Array([0x80, 0x00, 0x1f])
   * hexToU8a('0x80001f', 32); // Uint8Array([0x00, 0x80, 0x00, 0x1f])
   * ```
   */


  function hexToU8a(value, bitLength = -1) {
    if (!value || value === '0x') {
      return new Uint8Array();
    }

    let s = 0; // we don't use hexStringPrefix here - that has substring which adds
    // additional overhead. Instead we duplicate the logic, just incrementing
    // the sactual string pointer, ignoring the prefix as required

    if (REGEX_HEX_PREFIXED.test(value)) {
      s = 2;
    } else if (!REGEX_HEX_NOPREFIX.test(value)) {
      throw new Error(`Expected hex value to convert, found '${value}'`);
    }

    const strLength = (value.length - s) / 2;
    const endLength = Math.ceil(bitLength === -1 ? strLength : bitLength / 8);
    const result = new Uint8Array(endLength);
    const offset = endLength > strLength ? endLength - strLength : 0;

    for (let i = offset; i < endLength; i++, s += 2) {
      // The big factor here is actually the string lookups. If we do
      // HEX_TO_U16[value.substring()] we get an 10x slowdown. In the
      // same vein using charCodeAt (as opposed to value[s] or value.charAt(s)) is
      // also the faster operation by at least 2x with the character map above
      result[i] = (UNHEX[value.charCodeAt(s)] << 4) + UNHEX[value.charCodeAt(s + 1)];
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name hexToBigInt
   * @summary Creates a BigInt instance object from a hex string.
   */

  function hexToBigInt(value, options = {}) {
    return !value || value === '0x' ? BigInt$1(0) : u8aToBigInt(hexToU8a(value), objectSpread({
      isLe: false,
      isNegative: false
    }, options));
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getAugmentedNamespace(n) {
    var f = n.default;
  	if (typeof f == "function") {
  		var a = function () {
  			return f.apply(this, arguments);
  		};
  		a.prototype = f.prototype;
    } else a = {};
    Object.defineProperty(a, '__esModule', {value: true});
  	Object.keys(n).forEach(function (k) {
  		var d = Object.getOwnPropertyDescriptor(n, k);
  		Object.defineProperty(a, k, d.get ? d : {
  			enumerable: true,
  			get: function () {
  				return n[k];
  			}
  		});
  	});
  	return a;
  }

  var bn = {exports: {}};

  var _nodeResolve_empty = {};

  var nodeCrypto = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': _nodeResolve_empty
  });

  var require$$3 = /*@__PURE__*/getAugmentedNamespace(nodeCrypto);

  (function (module) {
  	(function (module, exports) {

  	  // Utils
  	  function assert (val, msg) {
  	    if (!val) throw new Error(msg || 'Assertion failed');
  	  }

  	  // Could use `inherits` module, but don't want to move from single file
  	  // architecture yet.
  	  function inherits (ctor, superCtor) {
  	    ctor.super_ = superCtor;
  	    var TempCtor = function () {};
  	    TempCtor.prototype = superCtor.prototype;
  	    ctor.prototype = new TempCtor();
  	    ctor.prototype.constructor = ctor;
  	  }

  	  // BN

  	  function BN (number, base, endian) {
  	    if (BN.isBN(number)) {
  	      return number;
  	    }

  	    this.negative = 0;
  	    this.words = null;
  	    this.length = 0;

  	    // Reduction context
  	    this.red = null;

  	    if (number !== null) {
  	      if (base === 'le' || base === 'be') {
  	        endian = base;
  	        base = 10;
  	      }

  	      this._init(number || 0, base || 10, endian || 'be');
  	    }
  	  }
  	  if (typeof module === 'object') {
  	    module.exports = BN;
  	  } else {
  	    exports.BN = BN;
  	  }

  	  BN.BN = BN;
  	  BN.wordSize = 26;

  	  var Buffer;
  	  try {
  	    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
  	      Buffer = window.Buffer;
  	    } else {
  	      Buffer = require$$3.Buffer;
  	    }
  	  } catch (e) {
  	  }

  	  BN.isBN = function isBN (num) {
  	    if (num instanceof BN) {
  	      return true;
  	    }

  	    return num !== null && typeof num === 'object' &&
  	      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  	  };

  	  BN.max = function max (left, right) {
  	    if (left.cmp(right) > 0) return left;
  	    return right;
  	  };

  	  BN.min = function min (left, right) {
  	    if (left.cmp(right) < 0) return left;
  	    return right;
  	  };

  	  BN.prototype._init = function init (number, base, endian) {
  	    if (typeof number === 'number') {
  	      return this._initNumber(number, base, endian);
  	    }

  	    if (typeof number === 'object') {
  	      return this._initArray(number, base, endian);
  	    }

  	    if (base === 'hex') {
  	      base = 16;
  	    }
  	    assert(base === (base | 0) && base >= 2 && base <= 36);

  	    number = number.toString().replace(/\s+/g, '');
  	    var start = 0;
  	    if (number[0] === '-') {
  	      start++;
  	      this.negative = 1;
  	    }

  	    if (start < number.length) {
  	      if (base === 16) {
  	        this._parseHex(number, start, endian);
  	      } else {
  	        this._parseBase(number, base, start);
  	        if (endian === 'le') {
  	          this._initArray(this.toArray(), base, endian);
  	        }
  	      }
  	    }
  	  };

  	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
  	    if (number < 0) {
  	      this.negative = 1;
  	      number = -number;
  	    }
  	    if (number < 0x4000000) {
  	      this.words = [number & 0x3ffffff];
  	      this.length = 1;
  	    } else if (number < 0x10000000000000) {
  	      this.words = [
  	        number & 0x3ffffff,
  	        (number / 0x4000000) & 0x3ffffff
  	      ];
  	      this.length = 2;
  	    } else {
  	      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
  	      this.words = [
  	        number & 0x3ffffff,
  	        (number / 0x4000000) & 0x3ffffff,
  	        1
  	      ];
  	      this.length = 3;
  	    }

  	    if (endian !== 'le') return;

  	    // Reverse the bytes
  	    this._initArray(this.toArray(), base, endian);
  	  };

  	  BN.prototype._initArray = function _initArray (number, base, endian) {
  	    // Perhaps a Uint8Array
  	    assert(typeof number.length === 'number');
  	    if (number.length <= 0) {
  	      this.words = [0];
  	      this.length = 1;
  	      return this;
  	    }

  	    this.length = Math.ceil(number.length / 3);
  	    this.words = new Array(this.length);
  	    for (var i = 0; i < this.length; i++) {
  	      this.words[i] = 0;
  	    }

  	    var j, w;
  	    var off = 0;
  	    if (endian === 'be') {
  	      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
  	        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
  	        this.words[j] |= (w << off) & 0x3ffffff;
  	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
  	        off += 24;
  	        if (off >= 26) {
  	          off -= 26;
  	          j++;
  	        }
  	      }
  	    } else if (endian === 'le') {
  	      for (i = 0, j = 0; i < number.length; i += 3) {
  	        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
  	        this.words[j] |= (w << off) & 0x3ffffff;
  	        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
  	        off += 24;
  	        if (off >= 26) {
  	          off -= 26;
  	          j++;
  	        }
  	      }
  	    }
  	    return this._strip();
  	  };

  	  function parseHex4Bits (string, index) {
  	    var c = string.charCodeAt(index);
  	    // '0' - '9'
  	    if (c >= 48 && c <= 57) {
  	      return c - 48;
  	    // 'A' - 'F'
  	    } else if (c >= 65 && c <= 70) {
  	      return c - 55;
  	    // 'a' - 'f'
  	    } else if (c >= 97 && c <= 102) {
  	      return c - 87;
  	    } else {
  	      assert(false, 'Invalid character in ' + string);
  	    }
  	  }

  	  function parseHexByte (string, lowerBound, index) {
  	    var r = parseHex4Bits(string, index);
  	    if (index - 1 >= lowerBound) {
  	      r |= parseHex4Bits(string, index - 1) << 4;
  	    }
  	    return r;
  	  }

  	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
  	    // Create possibly bigger array to ensure that it fits the number
  	    this.length = Math.ceil((number.length - start) / 6);
  	    this.words = new Array(this.length);
  	    for (var i = 0; i < this.length; i++) {
  	      this.words[i] = 0;
  	    }

  	    // 24-bits chunks
  	    var off = 0;
  	    var j = 0;

  	    var w;
  	    if (endian === 'be') {
  	      for (i = number.length - 1; i >= start; i -= 2) {
  	        w = parseHexByte(number, start, i) << off;
  	        this.words[j] |= w & 0x3ffffff;
  	        if (off >= 18) {
  	          off -= 18;
  	          j += 1;
  	          this.words[j] |= w >>> 26;
  	        } else {
  	          off += 8;
  	        }
  	      }
  	    } else {
  	      var parseLength = number.length - start;
  	      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
  	        w = parseHexByte(number, start, i) << off;
  	        this.words[j] |= w & 0x3ffffff;
  	        if (off >= 18) {
  	          off -= 18;
  	          j += 1;
  	          this.words[j] |= w >>> 26;
  	        } else {
  	          off += 8;
  	        }
  	      }
  	    }

  	    this._strip();
  	  };

  	  function parseBase (str, start, end, mul) {
  	    var r = 0;
  	    var b = 0;
  	    var len = Math.min(str.length, end);
  	    for (var i = start; i < len; i++) {
  	      var c = str.charCodeAt(i) - 48;

  	      r *= mul;

  	      // 'a'
  	      if (c >= 49) {
  	        b = c - 49 + 0xa;

  	      // 'A'
  	      } else if (c >= 17) {
  	        b = c - 17 + 0xa;

  	      // '0' - '9'
  	      } else {
  	        b = c;
  	      }
  	      assert(c >= 0 && b < mul, 'Invalid character');
  	      r += b;
  	    }
  	    return r;
  	  }

  	  BN.prototype._parseBase = function _parseBase (number, base, start) {
  	    // Initialize as zero
  	    this.words = [0];
  	    this.length = 1;

  	    // Find length of limb in base
  	    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
  	      limbLen++;
  	    }
  	    limbLen--;
  	    limbPow = (limbPow / base) | 0;

  	    var total = number.length - start;
  	    var mod = total % limbLen;
  	    var end = Math.min(total, total - mod) + start;

  	    var word = 0;
  	    for (var i = start; i < end; i += limbLen) {
  	      word = parseBase(number, i, i + limbLen, base);

  	      this.imuln(limbPow);
  	      if (this.words[0] + word < 0x4000000) {
  	        this.words[0] += word;
  	      } else {
  	        this._iaddn(word);
  	      }
  	    }

  	    if (mod !== 0) {
  	      var pow = 1;
  	      word = parseBase(number, i, number.length, base);

  	      for (i = 0; i < mod; i++) {
  	        pow *= base;
  	      }

  	      this.imuln(pow);
  	      if (this.words[0] + word < 0x4000000) {
  	        this.words[0] += word;
  	      } else {
  	        this._iaddn(word);
  	      }
  	    }

  	    this._strip();
  	  };

  	  BN.prototype.copy = function copy (dest) {
  	    dest.words = new Array(this.length);
  	    for (var i = 0; i < this.length; i++) {
  	      dest.words[i] = this.words[i];
  	    }
  	    dest.length = this.length;
  	    dest.negative = this.negative;
  	    dest.red = this.red;
  	  };

  	  function move (dest, src) {
  	    dest.words = src.words;
  	    dest.length = src.length;
  	    dest.negative = src.negative;
  	    dest.red = src.red;
  	  }

  	  BN.prototype._move = function _move (dest) {
  	    move(dest, this);
  	  };

  	  BN.prototype.clone = function clone () {
  	    var r = new BN(null);
  	    this.copy(r);
  	    return r;
  	  };

  	  BN.prototype._expand = function _expand (size) {
  	    while (this.length < size) {
  	      this.words[this.length++] = 0;
  	    }
  	    return this;
  	  };

  	  // Remove leading `0` from `this`
  	  BN.prototype._strip = function strip () {
  	    while (this.length > 1 && this.words[this.length - 1] === 0) {
  	      this.length--;
  	    }
  	    return this._normSign();
  	  };

  	  BN.prototype._normSign = function _normSign () {
  	    // -0 = 0
  	    if (this.length === 1 && this.words[0] === 0) {
  	      this.negative = 0;
  	    }
  	    return this;
  	  };

  	  // Check Symbol.for because not everywhere where Symbol defined
  	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  	  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
  	    try {
  	      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
  	    } catch (e) {
  	      BN.prototype.inspect = inspect;
  	    }
  	  } else {
  	    BN.prototype.inspect = inspect;
  	  }

  	  function inspect () {
  	    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  	  }

  	  /*

  	  var zeros = [];
  	  var groupSizes = [];
  	  var groupBases = [];

  	  var s = '';
  	  var i = -1;
  	  while (++i < BN.wordSize) {
  	    zeros[i] = s;
  	    s += '0';
  	  }
  	  groupSizes[0] = 0;
  	  groupSizes[1] = 0;
  	  groupBases[0] = 0;
  	  groupBases[1] = 0;
  	  var base = 2 - 1;
  	  while (++base < 36 + 1) {
  	    var groupSize = 0;
  	    var groupBase = 1;
  	    while (groupBase < (1 << BN.wordSize) / base) {
  	      groupBase *= base;
  	      groupSize += 1;
  	    }
  	    groupSizes[base] = groupSize;
  	    groupBases[base] = groupBase;
  	  }

  	  */

  	  var zeros = [
  	    '',
  	    '0',
  	    '00',
  	    '000',
  	    '0000',
  	    '00000',
  	    '000000',
  	    '0000000',
  	    '00000000',
  	    '000000000',
  	    '0000000000',
  	    '00000000000',
  	    '000000000000',
  	    '0000000000000',
  	    '00000000000000',
  	    '000000000000000',
  	    '0000000000000000',
  	    '00000000000000000',
  	    '000000000000000000',
  	    '0000000000000000000',
  	    '00000000000000000000',
  	    '000000000000000000000',
  	    '0000000000000000000000',
  	    '00000000000000000000000',
  	    '000000000000000000000000',
  	    '0000000000000000000000000'
  	  ];

  	  var groupSizes = [
  	    0, 0,
  	    25, 16, 12, 11, 10, 9, 8,
  	    8, 7, 7, 7, 7, 6, 6,
  	    6, 6, 6, 6, 6, 5, 5,
  	    5, 5, 5, 5, 5, 5, 5,
  	    5, 5, 5, 5, 5, 5, 5
  	  ];

  	  var groupBases = [
  	    0, 0,
  	    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
  	    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
  	    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
  	    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
  	    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  	  ];

  	  BN.prototype.toString = function toString (base, padding) {
  	    base = base || 10;
  	    padding = padding | 0 || 1;

  	    var out;
  	    if (base === 16 || base === 'hex') {
  	      out = '';
  	      var off = 0;
  	      var carry = 0;
  	      for (var i = 0; i < this.length; i++) {
  	        var w = this.words[i];
  	        var word = (((w << off) | carry) & 0xffffff).toString(16);
  	        carry = (w >>> (24 - off)) & 0xffffff;
  	        off += 2;
  	        if (off >= 26) {
  	          off -= 26;
  	          i--;
  	        }
  	        if (carry !== 0 || i !== this.length - 1) {
  	          out = zeros[6 - word.length] + word + out;
  	        } else {
  	          out = word + out;
  	        }
  	      }
  	      if (carry !== 0) {
  	        out = carry.toString(16) + out;
  	      }
  	      while (out.length % padding !== 0) {
  	        out = '0' + out;
  	      }
  	      if (this.negative !== 0) {
  	        out = '-' + out;
  	      }
  	      return out;
  	    }

  	    if (base === (base | 0) && base >= 2 && base <= 36) {
  	      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
  	      var groupSize = groupSizes[base];
  	      // var groupBase = Math.pow(base, groupSize);
  	      var groupBase = groupBases[base];
  	      out = '';
  	      var c = this.clone();
  	      c.negative = 0;
  	      while (!c.isZero()) {
  	        var r = c.modrn(groupBase).toString(base);
  	        c = c.idivn(groupBase);

  	        if (!c.isZero()) {
  	          out = zeros[groupSize - r.length] + r + out;
  	        } else {
  	          out = r + out;
  	        }
  	      }
  	      if (this.isZero()) {
  	        out = '0' + out;
  	      }
  	      while (out.length % padding !== 0) {
  	        out = '0' + out;
  	      }
  	      if (this.negative !== 0) {
  	        out = '-' + out;
  	      }
  	      return out;
  	    }

  	    assert(false, 'Base should be between 2 and 36');
  	  };

  	  BN.prototype.toNumber = function toNumber () {
  	    var ret = this.words[0];
  	    if (this.length === 2) {
  	      ret += this.words[1] * 0x4000000;
  	    } else if (this.length === 3 && this.words[2] === 0x01) {
  	      // NOTE: at this stage it is known that the top bit is set
  	      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
  	    } else if (this.length > 2) {
  	      assert(false, 'Number can only safely store up to 53 bits');
  	    }
  	    return (this.negative !== 0) ? -ret : ret;
  	  };

  	  BN.prototype.toJSON = function toJSON () {
  	    return this.toString(16, 2);
  	  };

  	  if (Buffer) {
  	    BN.prototype.toBuffer = function toBuffer (endian, length) {
  	      return this.toArrayLike(Buffer, endian, length);
  	    };
  	  }

  	  BN.prototype.toArray = function toArray (endian, length) {
  	    return this.toArrayLike(Array, endian, length);
  	  };

  	  var allocate = function allocate (ArrayType, size) {
  	    if (ArrayType.allocUnsafe) {
  	      return ArrayType.allocUnsafe(size);
  	    }
  	    return new ArrayType(size);
  	  };

  	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
  	    this._strip();

  	    var byteLength = this.byteLength();
  	    var reqLength = length || Math.max(1, byteLength);
  	    assert(byteLength <= reqLength, 'byte array longer than desired length');
  	    assert(reqLength > 0, 'Requested array length <= 0');

  	    var res = allocate(ArrayType, reqLength);
  	    var postfix = endian === 'le' ? 'LE' : 'BE';
  	    this['_toArrayLike' + postfix](res, byteLength);
  	    return res;
  	  };

  	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
  	    var position = 0;
  	    var carry = 0;

  	    for (var i = 0, shift = 0; i < this.length; i++) {
  	      var word = (this.words[i] << shift) | carry;

  	      res[position++] = word & 0xff;
  	      if (position < res.length) {
  	        res[position++] = (word >> 8) & 0xff;
  	      }
  	      if (position < res.length) {
  	        res[position++] = (word >> 16) & 0xff;
  	      }

  	      if (shift === 6) {
  	        if (position < res.length) {
  	          res[position++] = (word >> 24) & 0xff;
  	        }
  	        carry = 0;
  	        shift = 0;
  	      } else {
  	        carry = word >>> 24;
  	        shift += 2;
  	      }
  	    }

  	    if (position < res.length) {
  	      res[position++] = carry;

  	      while (position < res.length) {
  	        res[position++] = 0;
  	      }
  	    }
  	  };

  	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
  	    var position = res.length - 1;
  	    var carry = 0;

  	    for (var i = 0, shift = 0; i < this.length; i++) {
  	      var word = (this.words[i] << shift) | carry;

  	      res[position--] = word & 0xff;
  	      if (position >= 0) {
  	        res[position--] = (word >> 8) & 0xff;
  	      }
  	      if (position >= 0) {
  	        res[position--] = (word >> 16) & 0xff;
  	      }

  	      if (shift === 6) {
  	        if (position >= 0) {
  	          res[position--] = (word >> 24) & 0xff;
  	        }
  	        carry = 0;
  	        shift = 0;
  	      } else {
  	        carry = word >>> 24;
  	        shift += 2;
  	      }
  	    }

  	    if (position >= 0) {
  	      res[position--] = carry;

  	      while (position >= 0) {
  	        res[position--] = 0;
  	      }
  	    }
  	  };

  	  if (Math.clz32) {
  	    BN.prototype._countBits = function _countBits (w) {
  	      return 32 - Math.clz32(w);
  	    };
  	  } else {
  	    BN.prototype._countBits = function _countBits (w) {
  	      var t = w;
  	      var r = 0;
  	      if (t >= 0x1000) {
  	        r += 13;
  	        t >>>= 13;
  	      }
  	      if (t >= 0x40) {
  	        r += 7;
  	        t >>>= 7;
  	      }
  	      if (t >= 0x8) {
  	        r += 4;
  	        t >>>= 4;
  	      }
  	      if (t >= 0x02) {
  	        r += 2;
  	        t >>>= 2;
  	      }
  	      return r + t;
  	    };
  	  }

  	  BN.prototype._zeroBits = function _zeroBits (w) {
  	    // Short-cut
  	    if (w === 0) return 26;

  	    var t = w;
  	    var r = 0;
  	    if ((t & 0x1fff) === 0) {
  	      r += 13;
  	      t >>>= 13;
  	    }
  	    if ((t & 0x7f) === 0) {
  	      r += 7;
  	      t >>>= 7;
  	    }
  	    if ((t & 0xf) === 0) {
  	      r += 4;
  	      t >>>= 4;
  	    }
  	    if ((t & 0x3) === 0) {
  	      r += 2;
  	      t >>>= 2;
  	    }
  	    if ((t & 0x1) === 0) {
  	      r++;
  	    }
  	    return r;
  	  };

  	  // Return number of used bits in a BN
  	  BN.prototype.bitLength = function bitLength () {
  	    var w = this.words[this.length - 1];
  	    var hi = this._countBits(w);
  	    return (this.length - 1) * 26 + hi;
  	  };

  	  function toBitArray (num) {
  	    var w = new Array(num.bitLength());

  	    for (var bit = 0; bit < w.length; bit++) {
  	      var off = (bit / 26) | 0;
  	      var wbit = bit % 26;

  	      w[bit] = (num.words[off] >>> wbit) & 0x01;
  	    }

  	    return w;
  	  }

  	  // Number of trailing zero bits
  	  BN.prototype.zeroBits = function zeroBits () {
  	    if (this.isZero()) return 0;

  	    var r = 0;
  	    for (var i = 0; i < this.length; i++) {
  	      var b = this._zeroBits(this.words[i]);
  	      r += b;
  	      if (b !== 26) break;
  	    }
  	    return r;
  	  };

  	  BN.prototype.byteLength = function byteLength () {
  	    return Math.ceil(this.bitLength() / 8);
  	  };

  	  BN.prototype.toTwos = function toTwos (width) {
  	    if (this.negative !== 0) {
  	      return this.abs().inotn(width).iaddn(1);
  	    }
  	    return this.clone();
  	  };

  	  BN.prototype.fromTwos = function fromTwos (width) {
  	    if (this.testn(width - 1)) {
  	      return this.notn(width).iaddn(1).ineg();
  	    }
  	    return this.clone();
  	  };

  	  BN.prototype.isNeg = function isNeg () {
  	    return this.negative !== 0;
  	  };

  	  // Return negative clone of `this`
  	  BN.prototype.neg = function neg () {
  	    return this.clone().ineg();
  	  };

  	  BN.prototype.ineg = function ineg () {
  	    if (!this.isZero()) {
  	      this.negative ^= 1;
  	    }

  	    return this;
  	  };

  	  // Or `num` with `this` in-place
  	  BN.prototype.iuor = function iuor (num) {
  	    while (this.length < num.length) {
  	      this.words[this.length++] = 0;
  	    }

  	    for (var i = 0; i < num.length; i++) {
  	      this.words[i] = this.words[i] | num.words[i];
  	    }

  	    return this._strip();
  	  };

  	  BN.prototype.ior = function ior (num) {
  	    assert((this.negative | num.negative) === 0);
  	    return this.iuor(num);
  	  };

  	  // Or `num` with `this`
  	  BN.prototype.or = function or (num) {
  	    if (this.length > num.length) return this.clone().ior(num);
  	    return num.clone().ior(this);
  	  };

  	  BN.prototype.uor = function uor (num) {
  	    if (this.length > num.length) return this.clone().iuor(num);
  	    return num.clone().iuor(this);
  	  };

  	  // And `num` with `this` in-place
  	  BN.prototype.iuand = function iuand (num) {
  	    // b = min-length(num, this)
  	    var b;
  	    if (this.length > num.length) {
  	      b = num;
  	    } else {
  	      b = this;
  	    }

  	    for (var i = 0; i < b.length; i++) {
  	      this.words[i] = this.words[i] & num.words[i];
  	    }

  	    this.length = b.length;

  	    return this._strip();
  	  };

  	  BN.prototype.iand = function iand (num) {
  	    assert((this.negative | num.negative) === 0);
  	    return this.iuand(num);
  	  };

  	  // And `num` with `this`
  	  BN.prototype.and = function and (num) {
  	    if (this.length > num.length) return this.clone().iand(num);
  	    return num.clone().iand(this);
  	  };

  	  BN.prototype.uand = function uand (num) {
  	    if (this.length > num.length) return this.clone().iuand(num);
  	    return num.clone().iuand(this);
  	  };

  	  // Xor `num` with `this` in-place
  	  BN.prototype.iuxor = function iuxor (num) {
  	    // a.length > b.length
  	    var a;
  	    var b;
  	    if (this.length > num.length) {
  	      a = this;
  	      b = num;
  	    } else {
  	      a = num;
  	      b = this;
  	    }

  	    for (var i = 0; i < b.length; i++) {
  	      this.words[i] = a.words[i] ^ b.words[i];
  	    }

  	    if (this !== a) {
  	      for (; i < a.length; i++) {
  	        this.words[i] = a.words[i];
  	      }
  	    }

  	    this.length = a.length;

  	    return this._strip();
  	  };

  	  BN.prototype.ixor = function ixor (num) {
  	    assert((this.negative | num.negative) === 0);
  	    return this.iuxor(num);
  	  };

  	  // Xor `num` with `this`
  	  BN.prototype.xor = function xor (num) {
  	    if (this.length > num.length) return this.clone().ixor(num);
  	    return num.clone().ixor(this);
  	  };

  	  BN.prototype.uxor = function uxor (num) {
  	    if (this.length > num.length) return this.clone().iuxor(num);
  	    return num.clone().iuxor(this);
  	  };

  	  // Not ``this`` with ``width`` bitwidth
  	  BN.prototype.inotn = function inotn (width) {
  	    assert(typeof width === 'number' && width >= 0);

  	    var bytesNeeded = Math.ceil(width / 26) | 0;
  	    var bitsLeft = width % 26;

  	    // Extend the buffer with leading zeroes
  	    this._expand(bytesNeeded);

  	    if (bitsLeft > 0) {
  	      bytesNeeded--;
  	    }

  	    // Handle complete words
  	    for (var i = 0; i < bytesNeeded; i++) {
  	      this.words[i] = ~this.words[i] & 0x3ffffff;
  	    }

  	    // Handle the residue
  	    if (bitsLeft > 0) {
  	      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
  	    }

  	    // And remove leading zeroes
  	    return this._strip();
  	  };

  	  BN.prototype.notn = function notn (width) {
  	    return this.clone().inotn(width);
  	  };

  	  // Set `bit` of `this`
  	  BN.prototype.setn = function setn (bit, val) {
  	    assert(typeof bit === 'number' && bit >= 0);

  	    var off = (bit / 26) | 0;
  	    var wbit = bit % 26;

  	    this._expand(off + 1);

  	    if (val) {
  	      this.words[off] = this.words[off] | (1 << wbit);
  	    } else {
  	      this.words[off] = this.words[off] & ~(1 << wbit);
  	    }

  	    return this._strip();
  	  };

  	  // Add `num` to `this` in-place
  	  BN.prototype.iadd = function iadd (num) {
  	    var r;

  	    // negative + positive
  	    if (this.negative !== 0 && num.negative === 0) {
  	      this.negative = 0;
  	      r = this.isub(num);
  	      this.negative ^= 1;
  	      return this._normSign();

  	    // positive + negative
  	    } else if (this.negative === 0 && num.negative !== 0) {
  	      num.negative = 0;
  	      r = this.isub(num);
  	      num.negative = 1;
  	      return r._normSign();
  	    }

  	    // a.length > b.length
  	    var a, b;
  	    if (this.length > num.length) {
  	      a = this;
  	      b = num;
  	    } else {
  	      a = num;
  	      b = this;
  	    }

  	    var carry = 0;
  	    for (var i = 0; i < b.length; i++) {
  	      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
  	      this.words[i] = r & 0x3ffffff;
  	      carry = r >>> 26;
  	    }
  	    for (; carry !== 0 && i < a.length; i++) {
  	      r = (a.words[i] | 0) + carry;
  	      this.words[i] = r & 0x3ffffff;
  	      carry = r >>> 26;
  	    }

  	    this.length = a.length;
  	    if (carry !== 0) {
  	      this.words[this.length] = carry;
  	      this.length++;
  	    // Copy the rest of the words
  	    } else if (a !== this) {
  	      for (; i < a.length; i++) {
  	        this.words[i] = a.words[i];
  	      }
  	    }

  	    return this;
  	  };

  	  // Add `num` to `this`
  	  BN.prototype.add = function add (num) {
  	    var res;
  	    if (num.negative !== 0 && this.negative === 0) {
  	      num.negative = 0;
  	      res = this.sub(num);
  	      num.negative ^= 1;
  	      return res;
  	    } else if (num.negative === 0 && this.negative !== 0) {
  	      this.negative = 0;
  	      res = num.sub(this);
  	      this.negative = 1;
  	      return res;
  	    }

  	    if (this.length > num.length) return this.clone().iadd(num);

  	    return num.clone().iadd(this);
  	  };

  	  // Subtract `num` from `this` in-place
  	  BN.prototype.isub = function isub (num) {
  	    // this - (-num) = this + num
  	    if (num.negative !== 0) {
  	      num.negative = 0;
  	      var r = this.iadd(num);
  	      num.negative = 1;
  	      return r._normSign();

  	    // -this - num = -(this + num)
  	    } else if (this.negative !== 0) {
  	      this.negative = 0;
  	      this.iadd(num);
  	      this.negative = 1;
  	      return this._normSign();
  	    }

  	    // At this point both numbers are positive
  	    var cmp = this.cmp(num);

  	    // Optimization - zeroify
  	    if (cmp === 0) {
  	      this.negative = 0;
  	      this.length = 1;
  	      this.words[0] = 0;
  	      return this;
  	    }

  	    // a > b
  	    var a, b;
  	    if (cmp > 0) {
  	      a = this;
  	      b = num;
  	    } else {
  	      a = num;
  	      b = this;
  	    }

  	    var carry = 0;
  	    for (var i = 0; i < b.length; i++) {
  	      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
  	      carry = r >> 26;
  	      this.words[i] = r & 0x3ffffff;
  	    }
  	    for (; carry !== 0 && i < a.length; i++) {
  	      r = (a.words[i] | 0) + carry;
  	      carry = r >> 26;
  	      this.words[i] = r & 0x3ffffff;
  	    }

  	    // Copy rest of the words
  	    if (carry === 0 && i < a.length && a !== this) {
  	      for (; i < a.length; i++) {
  	        this.words[i] = a.words[i];
  	      }
  	    }

  	    this.length = Math.max(this.length, i);

  	    if (a !== this) {
  	      this.negative = 1;
  	    }

  	    return this._strip();
  	  };

  	  // Subtract `num` from `this`
  	  BN.prototype.sub = function sub (num) {
  	    return this.clone().isub(num);
  	  };

  	  function smallMulTo (self, num, out) {
  	    out.negative = num.negative ^ self.negative;
  	    var len = (self.length + num.length) | 0;
  	    out.length = len;
  	    len = (len - 1) | 0;

  	    // Peel one iteration (compiler can't do it, because of code complexity)
  	    var a = self.words[0] | 0;
  	    var b = num.words[0] | 0;
  	    var r = a * b;

  	    var lo = r & 0x3ffffff;
  	    var carry = (r / 0x4000000) | 0;
  	    out.words[0] = lo;

  	    for (var k = 1; k < len; k++) {
  	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
  	      // note that ncarry could be >= 0x3ffffff
  	      var ncarry = carry >>> 26;
  	      var rword = carry & 0x3ffffff;
  	      var maxJ = Math.min(k, num.length - 1);
  	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
  	        var i = (k - j) | 0;
  	        a = self.words[i] | 0;
  	        b = num.words[j] | 0;
  	        r = a * b + rword;
  	        ncarry += (r / 0x4000000) | 0;
  	        rword = r & 0x3ffffff;
  	      }
  	      out.words[k] = rword | 0;
  	      carry = ncarry | 0;
  	    }
  	    if (carry !== 0) {
  	      out.words[k] = carry | 0;
  	    } else {
  	      out.length--;
  	    }

  	    return out._strip();
  	  }

  	  // TODO(indutny): it may be reasonable to omit it for users who don't need
  	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  	  // multiplication (like elliptic secp256k1).
  	  var comb10MulTo = function comb10MulTo (self, num, out) {
  	    var a = self.words;
  	    var b = num.words;
  	    var o = out.words;
  	    var c = 0;
  	    var lo;
  	    var mid;
  	    var hi;
  	    var a0 = a[0] | 0;
  	    var al0 = a0 & 0x1fff;
  	    var ah0 = a0 >>> 13;
  	    var a1 = a[1] | 0;
  	    var al1 = a1 & 0x1fff;
  	    var ah1 = a1 >>> 13;
  	    var a2 = a[2] | 0;
  	    var al2 = a2 & 0x1fff;
  	    var ah2 = a2 >>> 13;
  	    var a3 = a[3] | 0;
  	    var al3 = a3 & 0x1fff;
  	    var ah3 = a3 >>> 13;
  	    var a4 = a[4] | 0;
  	    var al4 = a4 & 0x1fff;
  	    var ah4 = a4 >>> 13;
  	    var a5 = a[5] | 0;
  	    var al5 = a5 & 0x1fff;
  	    var ah5 = a5 >>> 13;
  	    var a6 = a[6] | 0;
  	    var al6 = a6 & 0x1fff;
  	    var ah6 = a6 >>> 13;
  	    var a7 = a[7] | 0;
  	    var al7 = a7 & 0x1fff;
  	    var ah7 = a7 >>> 13;
  	    var a8 = a[8] | 0;
  	    var al8 = a8 & 0x1fff;
  	    var ah8 = a8 >>> 13;
  	    var a9 = a[9] | 0;
  	    var al9 = a9 & 0x1fff;
  	    var ah9 = a9 >>> 13;
  	    var b0 = b[0] | 0;
  	    var bl0 = b0 & 0x1fff;
  	    var bh0 = b0 >>> 13;
  	    var b1 = b[1] | 0;
  	    var bl1 = b1 & 0x1fff;
  	    var bh1 = b1 >>> 13;
  	    var b2 = b[2] | 0;
  	    var bl2 = b2 & 0x1fff;
  	    var bh2 = b2 >>> 13;
  	    var b3 = b[3] | 0;
  	    var bl3 = b3 & 0x1fff;
  	    var bh3 = b3 >>> 13;
  	    var b4 = b[4] | 0;
  	    var bl4 = b4 & 0x1fff;
  	    var bh4 = b4 >>> 13;
  	    var b5 = b[5] | 0;
  	    var bl5 = b5 & 0x1fff;
  	    var bh5 = b5 >>> 13;
  	    var b6 = b[6] | 0;
  	    var bl6 = b6 & 0x1fff;
  	    var bh6 = b6 >>> 13;
  	    var b7 = b[7] | 0;
  	    var bl7 = b7 & 0x1fff;
  	    var bh7 = b7 >>> 13;
  	    var b8 = b[8] | 0;
  	    var bl8 = b8 & 0x1fff;
  	    var bh8 = b8 >>> 13;
  	    var b9 = b[9] | 0;
  	    var bl9 = b9 & 0x1fff;
  	    var bh9 = b9 >>> 13;

  	    out.negative = self.negative ^ num.negative;
  	    out.length = 19;
  	    /* k = 0 */
  	    lo = Math.imul(al0, bl0);
  	    mid = Math.imul(al0, bh0);
  	    mid = (mid + Math.imul(ah0, bl0)) | 0;
  	    hi = Math.imul(ah0, bh0);
  	    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
  	    w0 &= 0x3ffffff;
  	    /* k = 1 */
  	    lo = Math.imul(al1, bl0);
  	    mid = Math.imul(al1, bh0);
  	    mid = (mid + Math.imul(ah1, bl0)) | 0;
  	    hi = Math.imul(ah1, bh0);
  	    lo = (lo + Math.imul(al0, bl1)) | 0;
  	    mid = (mid + Math.imul(al0, bh1)) | 0;
  	    mid = (mid + Math.imul(ah0, bl1)) | 0;
  	    hi = (hi + Math.imul(ah0, bh1)) | 0;
  	    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
  	    w1 &= 0x3ffffff;
  	    /* k = 2 */
  	    lo = Math.imul(al2, bl0);
  	    mid = Math.imul(al2, bh0);
  	    mid = (mid + Math.imul(ah2, bl0)) | 0;
  	    hi = Math.imul(ah2, bh0);
  	    lo = (lo + Math.imul(al1, bl1)) | 0;
  	    mid = (mid + Math.imul(al1, bh1)) | 0;
  	    mid = (mid + Math.imul(ah1, bl1)) | 0;
  	    hi = (hi + Math.imul(ah1, bh1)) | 0;
  	    lo = (lo + Math.imul(al0, bl2)) | 0;
  	    mid = (mid + Math.imul(al0, bh2)) | 0;
  	    mid = (mid + Math.imul(ah0, bl2)) | 0;
  	    hi = (hi + Math.imul(ah0, bh2)) | 0;
  	    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
  	    w2 &= 0x3ffffff;
  	    /* k = 3 */
  	    lo = Math.imul(al3, bl0);
  	    mid = Math.imul(al3, bh0);
  	    mid = (mid + Math.imul(ah3, bl0)) | 0;
  	    hi = Math.imul(ah3, bh0);
  	    lo = (lo + Math.imul(al2, bl1)) | 0;
  	    mid = (mid + Math.imul(al2, bh1)) | 0;
  	    mid = (mid + Math.imul(ah2, bl1)) | 0;
  	    hi = (hi + Math.imul(ah2, bh1)) | 0;
  	    lo = (lo + Math.imul(al1, bl2)) | 0;
  	    mid = (mid + Math.imul(al1, bh2)) | 0;
  	    mid = (mid + Math.imul(ah1, bl2)) | 0;
  	    hi = (hi + Math.imul(ah1, bh2)) | 0;
  	    lo = (lo + Math.imul(al0, bl3)) | 0;
  	    mid = (mid + Math.imul(al0, bh3)) | 0;
  	    mid = (mid + Math.imul(ah0, bl3)) | 0;
  	    hi = (hi + Math.imul(ah0, bh3)) | 0;
  	    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
  	    w3 &= 0x3ffffff;
  	    /* k = 4 */
  	    lo = Math.imul(al4, bl0);
  	    mid = Math.imul(al4, bh0);
  	    mid = (mid + Math.imul(ah4, bl0)) | 0;
  	    hi = Math.imul(ah4, bh0);
  	    lo = (lo + Math.imul(al3, bl1)) | 0;
  	    mid = (mid + Math.imul(al3, bh1)) | 0;
  	    mid = (mid + Math.imul(ah3, bl1)) | 0;
  	    hi = (hi + Math.imul(ah3, bh1)) | 0;
  	    lo = (lo + Math.imul(al2, bl2)) | 0;
  	    mid = (mid + Math.imul(al2, bh2)) | 0;
  	    mid = (mid + Math.imul(ah2, bl2)) | 0;
  	    hi = (hi + Math.imul(ah2, bh2)) | 0;
  	    lo = (lo + Math.imul(al1, bl3)) | 0;
  	    mid = (mid + Math.imul(al1, bh3)) | 0;
  	    mid = (mid + Math.imul(ah1, bl3)) | 0;
  	    hi = (hi + Math.imul(ah1, bh3)) | 0;
  	    lo = (lo + Math.imul(al0, bl4)) | 0;
  	    mid = (mid + Math.imul(al0, bh4)) | 0;
  	    mid = (mid + Math.imul(ah0, bl4)) | 0;
  	    hi = (hi + Math.imul(ah0, bh4)) | 0;
  	    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
  	    w4 &= 0x3ffffff;
  	    /* k = 5 */
  	    lo = Math.imul(al5, bl0);
  	    mid = Math.imul(al5, bh0);
  	    mid = (mid + Math.imul(ah5, bl0)) | 0;
  	    hi = Math.imul(ah5, bh0);
  	    lo = (lo + Math.imul(al4, bl1)) | 0;
  	    mid = (mid + Math.imul(al4, bh1)) | 0;
  	    mid = (mid + Math.imul(ah4, bl1)) | 0;
  	    hi = (hi + Math.imul(ah4, bh1)) | 0;
  	    lo = (lo + Math.imul(al3, bl2)) | 0;
  	    mid = (mid + Math.imul(al3, bh2)) | 0;
  	    mid = (mid + Math.imul(ah3, bl2)) | 0;
  	    hi = (hi + Math.imul(ah3, bh2)) | 0;
  	    lo = (lo + Math.imul(al2, bl3)) | 0;
  	    mid = (mid + Math.imul(al2, bh3)) | 0;
  	    mid = (mid + Math.imul(ah2, bl3)) | 0;
  	    hi = (hi + Math.imul(ah2, bh3)) | 0;
  	    lo = (lo + Math.imul(al1, bl4)) | 0;
  	    mid = (mid + Math.imul(al1, bh4)) | 0;
  	    mid = (mid + Math.imul(ah1, bl4)) | 0;
  	    hi = (hi + Math.imul(ah1, bh4)) | 0;
  	    lo = (lo + Math.imul(al0, bl5)) | 0;
  	    mid = (mid + Math.imul(al0, bh5)) | 0;
  	    mid = (mid + Math.imul(ah0, bl5)) | 0;
  	    hi = (hi + Math.imul(ah0, bh5)) | 0;
  	    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
  	    w5 &= 0x3ffffff;
  	    /* k = 6 */
  	    lo = Math.imul(al6, bl0);
  	    mid = Math.imul(al6, bh0);
  	    mid = (mid + Math.imul(ah6, bl0)) | 0;
  	    hi = Math.imul(ah6, bh0);
  	    lo = (lo + Math.imul(al5, bl1)) | 0;
  	    mid = (mid + Math.imul(al5, bh1)) | 0;
  	    mid = (mid + Math.imul(ah5, bl1)) | 0;
  	    hi = (hi + Math.imul(ah5, bh1)) | 0;
  	    lo = (lo + Math.imul(al4, bl2)) | 0;
  	    mid = (mid + Math.imul(al4, bh2)) | 0;
  	    mid = (mid + Math.imul(ah4, bl2)) | 0;
  	    hi = (hi + Math.imul(ah4, bh2)) | 0;
  	    lo = (lo + Math.imul(al3, bl3)) | 0;
  	    mid = (mid + Math.imul(al3, bh3)) | 0;
  	    mid = (mid + Math.imul(ah3, bl3)) | 0;
  	    hi = (hi + Math.imul(ah3, bh3)) | 0;
  	    lo = (lo + Math.imul(al2, bl4)) | 0;
  	    mid = (mid + Math.imul(al2, bh4)) | 0;
  	    mid = (mid + Math.imul(ah2, bl4)) | 0;
  	    hi = (hi + Math.imul(ah2, bh4)) | 0;
  	    lo = (lo + Math.imul(al1, bl5)) | 0;
  	    mid = (mid + Math.imul(al1, bh5)) | 0;
  	    mid = (mid + Math.imul(ah1, bl5)) | 0;
  	    hi = (hi + Math.imul(ah1, bh5)) | 0;
  	    lo = (lo + Math.imul(al0, bl6)) | 0;
  	    mid = (mid + Math.imul(al0, bh6)) | 0;
  	    mid = (mid + Math.imul(ah0, bl6)) | 0;
  	    hi = (hi + Math.imul(ah0, bh6)) | 0;
  	    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
  	    w6 &= 0x3ffffff;
  	    /* k = 7 */
  	    lo = Math.imul(al7, bl0);
  	    mid = Math.imul(al7, bh0);
  	    mid = (mid + Math.imul(ah7, bl0)) | 0;
  	    hi = Math.imul(ah7, bh0);
  	    lo = (lo + Math.imul(al6, bl1)) | 0;
  	    mid = (mid + Math.imul(al6, bh1)) | 0;
  	    mid = (mid + Math.imul(ah6, bl1)) | 0;
  	    hi = (hi + Math.imul(ah6, bh1)) | 0;
  	    lo = (lo + Math.imul(al5, bl2)) | 0;
  	    mid = (mid + Math.imul(al5, bh2)) | 0;
  	    mid = (mid + Math.imul(ah5, bl2)) | 0;
  	    hi = (hi + Math.imul(ah5, bh2)) | 0;
  	    lo = (lo + Math.imul(al4, bl3)) | 0;
  	    mid = (mid + Math.imul(al4, bh3)) | 0;
  	    mid = (mid + Math.imul(ah4, bl3)) | 0;
  	    hi = (hi + Math.imul(ah4, bh3)) | 0;
  	    lo = (lo + Math.imul(al3, bl4)) | 0;
  	    mid = (mid + Math.imul(al3, bh4)) | 0;
  	    mid = (mid + Math.imul(ah3, bl4)) | 0;
  	    hi = (hi + Math.imul(ah3, bh4)) | 0;
  	    lo = (lo + Math.imul(al2, bl5)) | 0;
  	    mid = (mid + Math.imul(al2, bh5)) | 0;
  	    mid = (mid + Math.imul(ah2, bl5)) | 0;
  	    hi = (hi + Math.imul(ah2, bh5)) | 0;
  	    lo = (lo + Math.imul(al1, bl6)) | 0;
  	    mid = (mid + Math.imul(al1, bh6)) | 0;
  	    mid = (mid + Math.imul(ah1, bl6)) | 0;
  	    hi = (hi + Math.imul(ah1, bh6)) | 0;
  	    lo = (lo + Math.imul(al0, bl7)) | 0;
  	    mid = (mid + Math.imul(al0, bh7)) | 0;
  	    mid = (mid + Math.imul(ah0, bl7)) | 0;
  	    hi = (hi + Math.imul(ah0, bh7)) | 0;
  	    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
  	    w7 &= 0x3ffffff;
  	    /* k = 8 */
  	    lo = Math.imul(al8, bl0);
  	    mid = Math.imul(al8, bh0);
  	    mid = (mid + Math.imul(ah8, bl0)) | 0;
  	    hi = Math.imul(ah8, bh0);
  	    lo = (lo + Math.imul(al7, bl1)) | 0;
  	    mid = (mid + Math.imul(al7, bh1)) | 0;
  	    mid = (mid + Math.imul(ah7, bl1)) | 0;
  	    hi = (hi + Math.imul(ah7, bh1)) | 0;
  	    lo = (lo + Math.imul(al6, bl2)) | 0;
  	    mid = (mid + Math.imul(al6, bh2)) | 0;
  	    mid = (mid + Math.imul(ah6, bl2)) | 0;
  	    hi = (hi + Math.imul(ah6, bh2)) | 0;
  	    lo = (lo + Math.imul(al5, bl3)) | 0;
  	    mid = (mid + Math.imul(al5, bh3)) | 0;
  	    mid = (mid + Math.imul(ah5, bl3)) | 0;
  	    hi = (hi + Math.imul(ah5, bh3)) | 0;
  	    lo = (lo + Math.imul(al4, bl4)) | 0;
  	    mid = (mid + Math.imul(al4, bh4)) | 0;
  	    mid = (mid + Math.imul(ah4, bl4)) | 0;
  	    hi = (hi + Math.imul(ah4, bh4)) | 0;
  	    lo = (lo + Math.imul(al3, bl5)) | 0;
  	    mid = (mid + Math.imul(al3, bh5)) | 0;
  	    mid = (mid + Math.imul(ah3, bl5)) | 0;
  	    hi = (hi + Math.imul(ah3, bh5)) | 0;
  	    lo = (lo + Math.imul(al2, bl6)) | 0;
  	    mid = (mid + Math.imul(al2, bh6)) | 0;
  	    mid = (mid + Math.imul(ah2, bl6)) | 0;
  	    hi = (hi + Math.imul(ah2, bh6)) | 0;
  	    lo = (lo + Math.imul(al1, bl7)) | 0;
  	    mid = (mid + Math.imul(al1, bh7)) | 0;
  	    mid = (mid + Math.imul(ah1, bl7)) | 0;
  	    hi = (hi + Math.imul(ah1, bh7)) | 0;
  	    lo = (lo + Math.imul(al0, bl8)) | 0;
  	    mid = (mid + Math.imul(al0, bh8)) | 0;
  	    mid = (mid + Math.imul(ah0, bl8)) | 0;
  	    hi = (hi + Math.imul(ah0, bh8)) | 0;
  	    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
  	    w8 &= 0x3ffffff;
  	    /* k = 9 */
  	    lo = Math.imul(al9, bl0);
  	    mid = Math.imul(al9, bh0);
  	    mid = (mid + Math.imul(ah9, bl0)) | 0;
  	    hi = Math.imul(ah9, bh0);
  	    lo = (lo + Math.imul(al8, bl1)) | 0;
  	    mid = (mid + Math.imul(al8, bh1)) | 0;
  	    mid = (mid + Math.imul(ah8, bl1)) | 0;
  	    hi = (hi + Math.imul(ah8, bh1)) | 0;
  	    lo = (lo + Math.imul(al7, bl2)) | 0;
  	    mid = (mid + Math.imul(al7, bh2)) | 0;
  	    mid = (mid + Math.imul(ah7, bl2)) | 0;
  	    hi = (hi + Math.imul(ah7, bh2)) | 0;
  	    lo = (lo + Math.imul(al6, bl3)) | 0;
  	    mid = (mid + Math.imul(al6, bh3)) | 0;
  	    mid = (mid + Math.imul(ah6, bl3)) | 0;
  	    hi = (hi + Math.imul(ah6, bh3)) | 0;
  	    lo = (lo + Math.imul(al5, bl4)) | 0;
  	    mid = (mid + Math.imul(al5, bh4)) | 0;
  	    mid = (mid + Math.imul(ah5, bl4)) | 0;
  	    hi = (hi + Math.imul(ah5, bh4)) | 0;
  	    lo = (lo + Math.imul(al4, bl5)) | 0;
  	    mid = (mid + Math.imul(al4, bh5)) | 0;
  	    mid = (mid + Math.imul(ah4, bl5)) | 0;
  	    hi = (hi + Math.imul(ah4, bh5)) | 0;
  	    lo = (lo + Math.imul(al3, bl6)) | 0;
  	    mid = (mid + Math.imul(al3, bh6)) | 0;
  	    mid = (mid + Math.imul(ah3, bl6)) | 0;
  	    hi = (hi + Math.imul(ah3, bh6)) | 0;
  	    lo = (lo + Math.imul(al2, bl7)) | 0;
  	    mid = (mid + Math.imul(al2, bh7)) | 0;
  	    mid = (mid + Math.imul(ah2, bl7)) | 0;
  	    hi = (hi + Math.imul(ah2, bh7)) | 0;
  	    lo = (lo + Math.imul(al1, bl8)) | 0;
  	    mid = (mid + Math.imul(al1, bh8)) | 0;
  	    mid = (mid + Math.imul(ah1, bl8)) | 0;
  	    hi = (hi + Math.imul(ah1, bh8)) | 0;
  	    lo = (lo + Math.imul(al0, bl9)) | 0;
  	    mid = (mid + Math.imul(al0, bh9)) | 0;
  	    mid = (mid + Math.imul(ah0, bl9)) | 0;
  	    hi = (hi + Math.imul(ah0, bh9)) | 0;
  	    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
  	    w9 &= 0x3ffffff;
  	    /* k = 10 */
  	    lo = Math.imul(al9, bl1);
  	    mid = Math.imul(al9, bh1);
  	    mid = (mid + Math.imul(ah9, bl1)) | 0;
  	    hi = Math.imul(ah9, bh1);
  	    lo = (lo + Math.imul(al8, bl2)) | 0;
  	    mid = (mid + Math.imul(al8, bh2)) | 0;
  	    mid = (mid + Math.imul(ah8, bl2)) | 0;
  	    hi = (hi + Math.imul(ah8, bh2)) | 0;
  	    lo = (lo + Math.imul(al7, bl3)) | 0;
  	    mid = (mid + Math.imul(al7, bh3)) | 0;
  	    mid = (mid + Math.imul(ah7, bl3)) | 0;
  	    hi = (hi + Math.imul(ah7, bh3)) | 0;
  	    lo = (lo + Math.imul(al6, bl4)) | 0;
  	    mid = (mid + Math.imul(al6, bh4)) | 0;
  	    mid = (mid + Math.imul(ah6, bl4)) | 0;
  	    hi = (hi + Math.imul(ah6, bh4)) | 0;
  	    lo = (lo + Math.imul(al5, bl5)) | 0;
  	    mid = (mid + Math.imul(al5, bh5)) | 0;
  	    mid = (mid + Math.imul(ah5, bl5)) | 0;
  	    hi = (hi + Math.imul(ah5, bh5)) | 0;
  	    lo = (lo + Math.imul(al4, bl6)) | 0;
  	    mid = (mid + Math.imul(al4, bh6)) | 0;
  	    mid = (mid + Math.imul(ah4, bl6)) | 0;
  	    hi = (hi + Math.imul(ah4, bh6)) | 0;
  	    lo = (lo + Math.imul(al3, bl7)) | 0;
  	    mid = (mid + Math.imul(al3, bh7)) | 0;
  	    mid = (mid + Math.imul(ah3, bl7)) | 0;
  	    hi = (hi + Math.imul(ah3, bh7)) | 0;
  	    lo = (lo + Math.imul(al2, bl8)) | 0;
  	    mid = (mid + Math.imul(al2, bh8)) | 0;
  	    mid = (mid + Math.imul(ah2, bl8)) | 0;
  	    hi = (hi + Math.imul(ah2, bh8)) | 0;
  	    lo = (lo + Math.imul(al1, bl9)) | 0;
  	    mid = (mid + Math.imul(al1, bh9)) | 0;
  	    mid = (mid + Math.imul(ah1, bl9)) | 0;
  	    hi = (hi + Math.imul(ah1, bh9)) | 0;
  	    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
  	    w10 &= 0x3ffffff;
  	    /* k = 11 */
  	    lo = Math.imul(al9, bl2);
  	    mid = Math.imul(al9, bh2);
  	    mid = (mid + Math.imul(ah9, bl2)) | 0;
  	    hi = Math.imul(ah9, bh2);
  	    lo = (lo + Math.imul(al8, bl3)) | 0;
  	    mid = (mid + Math.imul(al8, bh3)) | 0;
  	    mid = (mid + Math.imul(ah8, bl3)) | 0;
  	    hi = (hi + Math.imul(ah8, bh3)) | 0;
  	    lo = (lo + Math.imul(al7, bl4)) | 0;
  	    mid = (mid + Math.imul(al7, bh4)) | 0;
  	    mid = (mid + Math.imul(ah7, bl4)) | 0;
  	    hi = (hi + Math.imul(ah7, bh4)) | 0;
  	    lo = (lo + Math.imul(al6, bl5)) | 0;
  	    mid = (mid + Math.imul(al6, bh5)) | 0;
  	    mid = (mid + Math.imul(ah6, bl5)) | 0;
  	    hi = (hi + Math.imul(ah6, bh5)) | 0;
  	    lo = (lo + Math.imul(al5, bl6)) | 0;
  	    mid = (mid + Math.imul(al5, bh6)) | 0;
  	    mid = (mid + Math.imul(ah5, bl6)) | 0;
  	    hi = (hi + Math.imul(ah5, bh6)) | 0;
  	    lo = (lo + Math.imul(al4, bl7)) | 0;
  	    mid = (mid + Math.imul(al4, bh7)) | 0;
  	    mid = (mid + Math.imul(ah4, bl7)) | 0;
  	    hi = (hi + Math.imul(ah4, bh7)) | 0;
  	    lo = (lo + Math.imul(al3, bl8)) | 0;
  	    mid = (mid + Math.imul(al3, bh8)) | 0;
  	    mid = (mid + Math.imul(ah3, bl8)) | 0;
  	    hi = (hi + Math.imul(ah3, bh8)) | 0;
  	    lo = (lo + Math.imul(al2, bl9)) | 0;
  	    mid = (mid + Math.imul(al2, bh9)) | 0;
  	    mid = (mid + Math.imul(ah2, bl9)) | 0;
  	    hi = (hi + Math.imul(ah2, bh9)) | 0;
  	    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
  	    w11 &= 0x3ffffff;
  	    /* k = 12 */
  	    lo = Math.imul(al9, bl3);
  	    mid = Math.imul(al9, bh3);
  	    mid = (mid + Math.imul(ah9, bl3)) | 0;
  	    hi = Math.imul(ah9, bh3);
  	    lo = (lo + Math.imul(al8, bl4)) | 0;
  	    mid = (mid + Math.imul(al8, bh4)) | 0;
  	    mid = (mid + Math.imul(ah8, bl4)) | 0;
  	    hi = (hi + Math.imul(ah8, bh4)) | 0;
  	    lo = (lo + Math.imul(al7, bl5)) | 0;
  	    mid = (mid + Math.imul(al7, bh5)) | 0;
  	    mid = (mid + Math.imul(ah7, bl5)) | 0;
  	    hi = (hi + Math.imul(ah7, bh5)) | 0;
  	    lo = (lo + Math.imul(al6, bl6)) | 0;
  	    mid = (mid + Math.imul(al6, bh6)) | 0;
  	    mid = (mid + Math.imul(ah6, bl6)) | 0;
  	    hi = (hi + Math.imul(ah6, bh6)) | 0;
  	    lo = (lo + Math.imul(al5, bl7)) | 0;
  	    mid = (mid + Math.imul(al5, bh7)) | 0;
  	    mid = (mid + Math.imul(ah5, bl7)) | 0;
  	    hi = (hi + Math.imul(ah5, bh7)) | 0;
  	    lo = (lo + Math.imul(al4, bl8)) | 0;
  	    mid = (mid + Math.imul(al4, bh8)) | 0;
  	    mid = (mid + Math.imul(ah4, bl8)) | 0;
  	    hi = (hi + Math.imul(ah4, bh8)) | 0;
  	    lo = (lo + Math.imul(al3, bl9)) | 0;
  	    mid = (mid + Math.imul(al3, bh9)) | 0;
  	    mid = (mid + Math.imul(ah3, bl9)) | 0;
  	    hi = (hi + Math.imul(ah3, bh9)) | 0;
  	    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
  	    w12 &= 0x3ffffff;
  	    /* k = 13 */
  	    lo = Math.imul(al9, bl4);
  	    mid = Math.imul(al9, bh4);
  	    mid = (mid + Math.imul(ah9, bl4)) | 0;
  	    hi = Math.imul(ah9, bh4);
  	    lo = (lo + Math.imul(al8, bl5)) | 0;
  	    mid = (mid + Math.imul(al8, bh5)) | 0;
  	    mid = (mid + Math.imul(ah8, bl5)) | 0;
  	    hi = (hi + Math.imul(ah8, bh5)) | 0;
  	    lo = (lo + Math.imul(al7, bl6)) | 0;
  	    mid = (mid + Math.imul(al7, bh6)) | 0;
  	    mid = (mid + Math.imul(ah7, bl6)) | 0;
  	    hi = (hi + Math.imul(ah7, bh6)) | 0;
  	    lo = (lo + Math.imul(al6, bl7)) | 0;
  	    mid = (mid + Math.imul(al6, bh7)) | 0;
  	    mid = (mid + Math.imul(ah6, bl7)) | 0;
  	    hi = (hi + Math.imul(ah6, bh7)) | 0;
  	    lo = (lo + Math.imul(al5, bl8)) | 0;
  	    mid = (mid + Math.imul(al5, bh8)) | 0;
  	    mid = (mid + Math.imul(ah5, bl8)) | 0;
  	    hi = (hi + Math.imul(ah5, bh8)) | 0;
  	    lo = (lo + Math.imul(al4, bl9)) | 0;
  	    mid = (mid + Math.imul(al4, bh9)) | 0;
  	    mid = (mid + Math.imul(ah4, bl9)) | 0;
  	    hi = (hi + Math.imul(ah4, bh9)) | 0;
  	    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
  	    w13 &= 0x3ffffff;
  	    /* k = 14 */
  	    lo = Math.imul(al9, bl5);
  	    mid = Math.imul(al9, bh5);
  	    mid = (mid + Math.imul(ah9, bl5)) | 0;
  	    hi = Math.imul(ah9, bh5);
  	    lo = (lo + Math.imul(al8, bl6)) | 0;
  	    mid = (mid + Math.imul(al8, bh6)) | 0;
  	    mid = (mid + Math.imul(ah8, bl6)) | 0;
  	    hi = (hi + Math.imul(ah8, bh6)) | 0;
  	    lo = (lo + Math.imul(al7, bl7)) | 0;
  	    mid = (mid + Math.imul(al7, bh7)) | 0;
  	    mid = (mid + Math.imul(ah7, bl7)) | 0;
  	    hi = (hi + Math.imul(ah7, bh7)) | 0;
  	    lo = (lo + Math.imul(al6, bl8)) | 0;
  	    mid = (mid + Math.imul(al6, bh8)) | 0;
  	    mid = (mid + Math.imul(ah6, bl8)) | 0;
  	    hi = (hi + Math.imul(ah6, bh8)) | 0;
  	    lo = (lo + Math.imul(al5, bl9)) | 0;
  	    mid = (mid + Math.imul(al5, bh9)) | 0;
  	    mid = (mid + Math.imul(ah5, bl9)) | 0;
  	    hi = (hi + Math.imul(ah5, bh9)) | 0;
  	    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
  	    w14 &= 0x3ffffff;
  	    /* k = 15 */
  	    lo = Math.imul(al9, bl6);
  	    mid = Math.imul(al9, bh6);
  	    mid = (mid + Math.imul(ah9, bl6)) | 0;
  	    hi = Math.imul(ah9, bh6);
  	    lo = (lo + Math.imul(al8, bl7)) | 0;
  	    mid = (mid + Math.imul(al8, bh7)) | 0;
  	    mid = (mid + Math.imul(ah8, bl7)) | 0;
  	    hi = (hi + Math.imul(ah8, bh7)) | 0;
  	    lo = (lo + Math.imul(al7, bl8)) | 0;
  	    mid = (mid + Math.imul(al7, bh8)) | 0;
  	    mid = (mid + Math.imul(ah7, bl8)) | 0;
  	    hi = (hi + Math.imul(ah7, bh8)) | 0;
  	    lo = (lo + Math.imul(al6, bl9)) | 0;
  	    mid = (mid + Math.imul(al6, bh9)) | 0;
  	    mid = (mid + Math.imul(ah6, bl9)) | 0;
  	    hi = (hi + Math.imul(ah6, bh9)) | 0;
  	    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
  	    w15 &= 0x3ffffff;
  	    /* k = 16 */
  	    lo = Math.imul(al9, bl7);
  	    mid = Math.imul(al9, bh7);
  	    mid = (mid + Math.imul(ah9, bl7)) | 0;
  	    hi = Math.imul(ah9, bh7);
  	    lo = (lo + Math.imul(al8, bl8)) | 0;
  	    mid = (mid + Math.imul(al8, bh8)) | 0;
  	    mid = (mid + Math.imul(ah8, bl8)) | 0;
  	    hi = (hi + Math.imul(ah8, bh8)) | 0;
  	    lo = (lo + Math.imul(al7, bl9)) | 0;
  	    mid = (mid + Math.imul(al7, bh9)) | 0;
  	    mid = (mid + Math.imul(ah7, bl9)) | 0;
  	    hi = (hi + Math.imul(ah7, bh9)) | 0;
  	    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
  	    w16 &= 0x3ffffff;
  	    /* k = 17 */
  	    lo = Math.imul(al9, bl8);
  	    mid = Math.imul(al9, bh8);
  	    mid = (mid + Math.imul(ah9, bl8)) | 0;
  	    hi = Math.imul(ah9, bh8);
  	    lo = (lo + Math.imul(al8, bl9)) | 0;
  	    mid = (mid + Math.imul(al8, bh9)) | 0;
  	    mid = (mid + Math.imul(ah8, bl9)) | 0;
  	    hi = (hi + Math.imul(ah8, bh9)) | 0;
  	    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
  	    w17 &= 0x3ffffff;
  	    /* k = 18 */
  	    lo = Math.imul(al9, bl9);
  	    mid = Math.imul(al9, bh9);
  	    mid = (mid + Math.imul(ah9, bl9)) | 0;
  	    hi = Math.imul(ah9, bh9);
  	    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
  	    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
  	    w18 &= 0x3ffffff;
  	    o[0] = w0;
  	    o[1] = w1;
  	    o[2] = w2;
  	    o[3] = w3;
  	    o[4] = w4;
  	    o[5] = w5;
  	    o[6] = w6;
  	    o[7] = w7;
  	    o[8] = w8;
  	    o[9] = w9;
  	    o[10] = w10;
  	    o[11] = w11;
  	    o[12] = w12;
  	    o[13] = w13;
  	    o[14] = w14;
  	    o[15] = w15;
  	    o[16] = w16;
  	    o[17] = w17;
  	    o[18] = w18;
  	    if (c !== 0) {
  	      o[19] = c;
  	      out.length++;
  	    }
  	    return out;
  	  };

  	  // Polyfill comb
  	  if (!Math.imul) {
  	    comb10MulTo = smallMulTo;
  	  }

  	  function bigMulTo (self, num, out) {
  	    out.negative = num.negative ^ self.negative;
  	    out.length = self.length + num.length;

  	    var carry = 0;
  	    var hncarry = 0;
  	    for (var k = 0; k < out.length - 1; k++) {
  	      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
  	      // note that ncarry could be >= 0x3ffffff
  	      var ncarry = hncarry;
  	      hncarry = 0;
  	      var rword = carry & 0x3ffffff;
  	      var maxJ = Math.min(k, num.length - 1);
  	      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
  	        var i = k - j;
  	        var a = self.words[i] | 0;
  	        var b = num.words[j] | 0;
  	        var r = a * b;

  	        var lo = r & 0x3ffffff;
  	        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
  	        lo = (lo + rword) | 0;
  	        rword = lo & 0x3ffffff;
  	        ncarry = (ncarry + (lo >>> 26)) | 0;

  	        hncarry += ncarry >>> 26;
  	        ncarry &= 0x3ffffff;
  	      }
  	      out.words[k] = rword;
  	      carry = ncarry;
  	      ncarry = hncarry;
  	    }
  	    if (carry !== 0) {
  	      out.words[k] = carry;
  	    } else {
  	      out.length--;
  	    }

  	    return out._strip();
  	  }

  	  function jumboMulTo (self, num, out) {
  	    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
  	    // var fftm = new FFTM();
  	    // return fftm.mulp(self, num, out);
  	    return bigMulTo(self, num, out);
  	  }

  	  BN.prototype.mulTo = function mulTo (num, out) {
  	    var res;
  	    var len = this.length + num.length;
  	    if (this.length === 10 && num.length === 10) {
  	      res = comb10MulTo(this, num, out);
  	    } else if (len < 63) {
  	      res = smallMulTo(this, num, out);
  	    } else if (len < 1024) {
  	      res = bigMulTo(this, num, out);
  	    } else {
  	      res = jumboMulTo(this, num, out);
  	    }

  	    return res;
  	  };

  	  // Multiply `this` by `num`
  	  BN.prototype.mul = function mul (num) {
  	    var out = new BN(null);
  	    out.words = new Array(this.length + num.length);
  	    return this.mulTo(num, out);
  	  };

  	  // Multiply employing FFT
  	  BN.prototype.mulf = function mulf (num) {
  	    var out = new BN(null);
  	    out.words = new Array(this.length + num.length);
  	    return jumboMulTo(this, num, out);
  	  };

  	  // In-place Multiplication
  	  BN.prototype.imul = function imul (num) {
  	    return this.clone().mulTo(num, this);
  	  };

  	  BN.prototype.imuln = function imuln (num) {
  	    var isNegNum = num < 0;
  	    if (isNegNum) num = -num;

  	    assert(typeof num === 'number');
  	    assert(num < 0x4000000);

  	    // Carry
  	    var carry = 0;
  	    for (var i = 0; i < this.length; i++) {
  	      var w = (this.words[i] | 0) * num;
  	      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
  	      carry >>= 26;
  	      carry += (w / 0x4000000) | 0;
  	      // NOTE: lo is 27bit maximum
  	      carry += lo >>> 26;
  	      this.words[i] = lo & 0x3ffffff;
  	    }

  	    if (carry !== 0) {
  	      this.words[i] = carry;
  	      this.length++;
  	    }

  	    return isNegNum ? this.ineg() : this;
  	  };

  	  BN.prototype.muln = function muln (num) {
  	    return this.clone().imuln(num);
  	  };

  	  // `this` * `this`
  	  BN.prototype.sqr = function sqr () {
  	    return this.mul(this);
  	  };

  	  // `this` * `this` in-place
  	  BN.prototype.isqr = function isqr () {
  	    return this.imul(this.clone());
  	  };

  	  // Math.pow(`this`, `num`)
  	  BN.prototype.pow = function pow (num) {
  	    var w = toBitArray(num);
  	    if (w.length === 0) return new BN(1);

  	    // Skip leading zeroes
  	    var res = this;
  	    for (var i = 0; i < w.length; i++, res = res.sqr()) {
  	      if (w[i] !== 0) break;
  	    }

  	    if (++i < w.length) {
  	      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
  	        if (w[i] === 0) continue;

  	        res = res.mul(q);
  	      }
  	    }

  	    return res;
  	  };

  	  // Shift-left in-place
  	  BN.prototype.iushln = function iushln (bits) {
  	    assert(typeof bits === 'number' && bits >= 0);
  	    var r = bits % 26;
  	    var s = (bits - r) / 26;
  	    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
  	    var i;

  	    if (r !== 0) {
  	      var carry = 0;

  	      for (i = 0; i < this.length; i++) {
  	        var newCarry = this.words[i] & carryMask;
  	        var c = ((this.words[i] | 0) - newCarry) << r;
  	        this.words[i] = c | carry;
  	        carry = newCarry >>> (26 - r);
  	      }

  	      if (carry) {
  	        this.words[i] = carry;
  	        this.length++;
  	      }
  	    }

  	    if (s !== 0) {
  	      for (i = this.length - 1; i >= 0; i--) {
  	        this.words[i + s] = this.words[i];
  	      }

  	      for (i = 0; i < s; i++) {
  	        this.words[i] = 0;
  	      }

  	      this.length += s;
  	    }

  	    return this._strip();
  	  };

  	  BN.prototype.ishln = function ishln (bits) {
  	    // TODO(indutny): implement me
  	    assert(this.negative === 0);
  	    return this.iushln(bits);
  	  };

  	  // Shift-right in-place
  	  // NOTE: `hint` is a lowest bit before trailing zeroes
  	  // NOTE: if `extended` is present - it will be filled with destroyed bits
  	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
  	    assert(typeof bits === 'number' && bits >= 0);
  	    var h;
  	    if (hint) {
  	      h = (hint - (hint % 26)) / 26;
  	    } else {
  	      h = 0;
  	    }

  	    var r = bits % 26;
  	    var s = Math.min((bits - r) / 26, this.length);
  	    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  	    var maskedWords = extended;

  	    h -= s;
  	    h = Math.max(0, h);

  	    // Extended mode, copy masked part
  	    if (maskedWords) {
  	      for (var i = 0; i < s; i++) {
  	        maskedWords.words[i] = this.words[i];
  	      }
  	      maskedWords.length = s;
  	    }

  	    if (s === 0) ; else if (this.length > s) {
  	      this.length -= s;
  	      for (i = 0; i < this.length; i++) {
  	        this.words[i] = this.words[i + s];
  	      }
  	    } else {
  	      this.words[0] = 0;
  	      this.length = 1;
  	    }

  	    var carry = 0;
  	    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
  	      var word = this.words[i] | 0;
  	      this.words[i] = (carry << (26 - r)) | (word >>> r);
  	      carry = word & mask;
  	    }

  	    // Push carried bits as a mask
  	    if (maskedWords && carry !== 0) {
  	      maskedWords.words[maskedWords.length++] = carry;
  	    }

  	    if (this.length === 0) {
  	      this.words[0] = 0;
  	      this.length = 1;
  	    }

  	    return this._strip();
  	  };

  	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
  	    // TODO(indutny): implement me
  	    assert(this.negative === 0);
  	    return this.iushrn(bits, hint, extended);
  	  };

  	  // Shift-left
  	  BN.prototype.shln = function shln (bits) {
  	    return this.clone().ishln(bits);
  	  };

  	  BN.prototype.ushln = function ushln (bits) {
  	    return this.clone().iushln(bits);
  	  };

  	  // Shift-right
  	  BN.prototype.shrn = function shrn (bits) {
  	    return this.clone().ishrn(bits);
  	  };

  	  BN.prototype.ushrn = function ushrn (bits) {
  	    return this.clone().iushrn(bits);
  	  };

  	  // Test if n bit is set
  	  BN.prototype.testn = function testn (bit) {
  	    assert(typeof bit === 'number' && bit >= 0);
  	    var r = bit % 26;
  	    var s = (bit - r) / 26;
  	    var q = 1 << r;

  	    // Fast case: bit is much higher than all existing words
  	    if (this.length <= s) return false;

  	    // Check bit and return
  	    var w = this.words[s];

  	    return !!(w & q);
  	  };

  	  // Return only lowers bits of number (in-place)
  	  BN.prototype.imaskn = function imaskn (bits) {
  	    assert(typeof bits === 'number' && bits >= 0);
  	    var r = bits % 26;
  	    var s = (bits - r) / 26;

  	    assert(this.negative === 0, 'imaskn works only with positive numbers');

  	    if (this.length <= s) {
  	      return this;
  	    }

  	    if (r !== 0) {
  	      s++;
  	    }
  	    this.length = Math.min(s, this.length);

  	    if (r !== 0) {
  	      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
  	      this.words[this.length - 1] &= mask;
  	    }

  	    return this._strip();
  	  };

  	  // Return only lowers bits of number
  	  BN.prototype.maskn = function maskn (bits) {
  	    return this.clone().imaskn(bits);
  	  };

  	  // Add plain number `num` to `this`
  	  BN.prototype.iaddn = function iaddn (num) {
  	    assert(typeof num === 'number');
  	    assert(num < 0x4000000);
  	    if (num < 0) return this.isubn(-num);

  	    // Possible sign change
  	    if (this.negative !== 0) {
  	      if (this.length === 1 && (this.words[0] | 0) <= num) {
  	        this.words[0] = num - (this.words[0] | 0);
  	        this.negative = 0;
  	        return this;
  	      }

  	      this.negative = 0;
  	      this.isubn(num);
  	      this.negative = 1;
  	      return this;
  	    }

  	    // Add without checks
  	    return this._iaddn(num);
  	  };

  	  BN.prototype._iaddn = function _iaddn (num) {
  	    this.words[0] += num;

  	    // Carry
  	    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
  	      this.words[i] -= 0x4000000;
  	      if (i === this.length - 1) {
  	        this.words[i + 1] = 1;
  	      } else {
  	        this.words[i + 1]++;
  	      }
  	    }
  	    this.length = Math.max(this.length, i + 1);

  	    return this;
  	  };

  	  // Subtract plain number `num` from `this`
  	  BN.prototype.isubn = function isubn (num) {
  	    assert(typeof num === 'number');
  	    assert(num < 0x4000000);
  	    if (num < 0) return this.iaddn(-num);

  	    if (this.negative !== 0) {
  	      this.negative = 0;
  	      this.iaddn(num);
  	      this.negative = 1;
  	      return this;
  	    }

  	    this.words[0] -= num;

  	    if (this.length === 1 && this.words[0] < 0) {
  	      this.words[0] = -this.words[0];
  	      this.negative = 1;
  	    } else {
  	      // Carry
  	      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
  	        this.words[i] += 0x4000000;
  	        this.words[i + 1] -= 1;
  	      }
  	    }

  	    return this._strip();
  	  };

  	  BN.prototype.addn = function addn (num) {
  	    return this.clone().iaddn(num);
  	  };

  	  BN.prototype.subn = function subn (num) {
  	    return this.clone().isubn(num);
  	  };

  	  BN.prototype.iabs = function iabs () {
  	    this.negative = 0;

  	    return this;
  	  };

  	  BN.prototype.abs = function abs () {
  	    return this.clone().iabs();
  	  };

  	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
  	    var len = num.length + shift;
  	    var i;

  	    this._expand(len);

  	    var w;
  	    var carry = 0;
  	    for (i = 0; i < num.length; i++) {
  	      w = (this.words[i + shift] | 0) + carry;
  	      var right = (num.words[i] | 0) * mul;
  	      w -= right & 0x3ffffff;
  	      carry = (w >> 26) - ((right / 0x4000000) | 0);
  	      this.words[i + shift] = w & 0x3ffffff;
  	    }
  	    for (; i < this.length - shift; i++) {
  	      w = (this.words[i + shift] | 0) + carry;
  	      carry = w >> 26;
  	      this.words[i + shift] = w & 0x3ffffff;
  	    }

  	    if (carry === 0) return this._strip();

  	    // Subtraction overflow
  	    assert(carry === -1);
  	    carry = 0;
  	    for (i = 0; i < this.length; i++) {
  	      w = -(this.words[i] | 0) + carry;
  	      carry = w >> 26;
  	      this.words[i] = w & 0x3ffffff;
  	    }
  	    this.negative = 1;

  	    return this._strip();
  	  };

  	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
  	    var shift = this.length - num.length;

  	    var a = this.clone();
  	    var b = num;

  	    // Normalize
  	    var bhi = b.words[b.length - 1] | 0;
  	    var bhiBits = this._countBits(bhi);
  	    shift = 26 - bhiBits;
  	    if (shift !== 0) {
  	      b = b.ushln(shift);
  	      a.iushln(shift);
  	      bhi = b.words[b.length - 1] | 0;
  	    }

  	    // Initialize quotient
  	    var m = a.length - b.length;
  	    var q;

  	    if (mode !== 'mod') {
  	      q = new BN(null);
  	      q.length = m + 1;
  	      q.words = new Array(q.length);
  	      for (var i = 0; i < q.length; i++) {
  	        q.words[i] = 0;
  	      }
  	    }

  	    var diff = a.clone()._ishlnsubmul(b, 1, m);
  	    if (diff.negative === 0) {
  	      a = diff;
  	      if (q) {
  	        q.words[m] = 1;
  	      }
  	    }

  	    for (var j = m - 1; j >= 0; j--) {
  	      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
  	        (a.words[b.length + j - 1] | 0);

  	      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
  	      // (0x7ffffff)
  	      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

  	      a._ishlnsubmul(b, qj, j);
  	      while (a.negative !== 0) {
  	        qj--;
  	        a.negative = 0;
  	        a._ishlnsubmul(b, 1, j);
  	        if (!a.isZero()) {
  	          a.negative ^= 1;
  	        }
  	      }
  	      if (q) {
  	        q.words[j] = qj;
  	      }
  	    }
  	    if (q) {
  	      q._strip();
  	    }
  	    a._strip();

  	    // Denormalize
  	    if (mode !== 'div' && shift !== 0) {
  	      a.iushrn(shift);
  	    }

  	    return {
  	      div: q || null,
  	      mod: a
  	    };
  	  };

  	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  	  //       to `div` to request div only, or be absent to
  	  //       request both div & mod
  	  //       2) `positive` is true if unsigned mod is requested
  	  BN.prototype.divmod = function divmod (num, mode, positive) {
  	    assert(!num.isZero());

  	    if (this.isZero()) {
  	      return {
  	        div: new BN(0),
  	        mod: new BN(0)
  	      };
  	    }

  	    var div, mod, res;
  	    if (this.negative !== 0 && num.negative === 0) {
  	      res = this.neg().divmod(num, mode);

  	      if (mode !== 'mod') {
  	        div = res.div.neg();
  	      }

  	      if (mode !== 'div') {
  	        mod = res.mod.neg();
  	        if (positive && mod.negative !== 0) {
  	          mod.iadd(num);
  	        }
  	      }

  	      return {
  	        div: div,
  	        mod: mod
  	      };
  	    }

  	    if (this.negative === 0 && num.negative !== 0) {
  	      res = this.divmod(num.neg(), mode);

  	      if (mode !== 'mod') {
  	        div = res.div.neg();
  	      }

  	      return {
  	        div: div,
  	        mod: res.mod
  	      };
  	    }

  	    if ((this.negative & num.negative) !== 0) {
  	      res = this.neg().divmod(num.neg(), mode);

  	      if (mode !== 'div') {
  	        mod = res.mod.neg();
  	        if (positive && mod.negative !== 0) {
  	          mod.isub(num);
  	        }
  	      }

  	      return {
  	        div: res.div,
  	        mod: mod
  	      };
  	    }

  	    // Both numbers are positive at this point

  	    // Strip both numbers to approximate shift value
  	    if (num.length > this.length || this.cmp(num) < 0) {
  	      return {
  	        div: new BN(0),
  	        mod: this
  	      };
  	    }

  	    // Very short reduction
  	    if (num.length === 1) {
  	      if (mode === 'div') {
  	        return {
  	          div: this.divn(num.words[0]),
  	          mod: null
  	        };
  	      }

  	      if (mode === 'mod') {
  	        return {
  	          div: null,
  	          mod: new BN(this.modrn(num.words[0]))
  	        };
  	      }

  	      return {
  	        div: this.divn(num.words[0]),
  	        mod: new BN(this.modrn(num.words[0]))
  	      };
  	    }

  	    return this._wordDiv(num, mode);
  	  };

  	  // Find `this` / `num`
  	  BN.prototype.div = function div (num) {
  	    return this.divmod(num, 'div', false).div;
  	  };

  	  // Find `this` % `num`
  	  BN.prototype.mod = function mod (num) {
  	    return this.divmod(num, 'mod', false).mod;
  	  };

  	  BN.prototype.umod = function umod (num) {
  	    return this.divmod(num, 'mod', true).mod;
  	  };

  	  // Find Round(`this` / `num`)
  	  BN.prototype.divRound = function divRound (num) {
  	    var dm = this.divmod(num);

  	    // Fast case - exact division
  	    if (dm.mod.isZero()) return dm.div;

  	    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

  	    var half = num.ushrn(1);
  	    var r2 = num.andln(1);
  	    var cmp = mod.cmp(half);

  	    // Round down
  	    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

  	    // Round up
  	    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  	  };

  	  BN.prototype.modrn = function modrn (num) {
  	    var isNegNum = num < 0;
  	    if (isNegNum) num = -num;

  	    assert(num <= 0x3ffffff);
  	    var p = (1 << 26) % num;

  	    var acc = 0;
  	    for (var i = this.length - 1; i >= 0; i--) {
  	      acc = (p * acc + (this.words[i] | 0)) % num;
  	    }

  	    return isNegNum ? -acc : acc;
  	  };

  	  // WARNING: DEPRECATED
  	  BN.prototype.modn = function modn (num) {
  	    return this.modrn(num);
  	  };

  	  // In-place division by number
  	  BN.prototype.idivn = function idivn (num) {
  	    var isNegNum = num < 0;
  	    if (isNegNum) num = -num;

  	    assert(num <= 0x3ffffff);

  	    var carry = 0;
  	    for (var i = this.length - 1; i >= 0; i--) {
  	      var w = (this.words[i] | 0) + carry * 0x4000000;
  	      this.words[i] = (w / num) | 0;
  	      carry = w % num;
  	    }

  	    this._strip();
  	    return isNegNum ? this.ineg() : this;
  	  };

  	  BN.prototype.divn = function divn (num) {
  	    return this.clone().idivn(num);
  	  };

  	  BN.prototype.egcd = function egcd (p) {
  	    assert(p.negative === 0);
  	    assert(!p.isZero());

  	    var x = this;
  	    var y = p.clone();

  	    if (x.negative !== 0) {
  	      x = x.umod(p);
  	    } else {
  	      x = x.clone();
  	    }

  	    // A * x + B * y = x
  	    var A = new BN(1);
  	    var B = new BN(0);

  	    // C * x + D * y = y
  	    var C = new BN(0);
  	    var D = new BN(1);

  	    var g = 0;

  	    while (x.isEven() && y.isEven()) {
  	      x.iushrn(1);
  	      y.iushrn(1);
  	      ++g;
  	    }

  	    var yp = y.clone();
  	    var xp = x.clone();

  	    while (!x.isZero()) {
  	      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
  	      if (i > 0) {
  	        x.iushrn(i);
  	        while (i-- > 0) {
  	          if (A.isOdd() || B.isOdd()) {
  	            A.iadd(yp);
  	            B.isub(xp);
  	          }

  	          A.iushrn(1);
  	          B.iushrn(1);
  	        }
  	      }

  	      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
  	      if (j > 0) {
  	        y.iushrn(j);
  	        while (j-- > 0) {
  	          if (C.isOdd() || D.isOdd()) {
  	            C.iadd(yp);
  	            D.isub(xp);
  	          }

  	          C.iushrn(1);
  	          D.iushrn(1);
  	        }
  	      }

  	      if (x.cmp(y) >= 0) {
  	        x.isub(y);
  	        A.isub(C);
  	        B.isub(D);
  	      } else {
  	        y.isub(x);
  	        C.isub(A);
  	        D.isub(B);
  	      }
  	    }

  	    return {
  	      a: C,
  	      b: D,
  	      gcd: y.iushln(g)
  	    };
  	  };

  	  // This is reduced incarnation of the binary EEA
  	  // above, designated to invert members of the
  	  // _prime_ fields F(p) at a maximal speed
  	  BN.prototype._invmp = function _invmp (p) {
  	    assert(p.negative === 0);
  	    assert(!p.isZero());

  	    var a = this;
  	    var b = p.clone();

  	    if (a.negative !== 0) {
  	      a = a.umod(p);
  	    } else {
  	      a = a.clone();
  	    }

  	    var x1 = new BN(1);
  	    var x2 = new BN(0);

  	    var delta = b.clone();

  	    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
  	      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
  	      if (i > 0) {
  	        a.iushrn(i);
  	        while (i-- > 0) {
  	          if (x1.isOdd()) {
  	            x1.iadd(delta);
  	          }

  	          x1.iushrn(1);
  	        }
  	      }

  	      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
  	      if (j > 0) {
  	        b.iushrn(j);
  	        while (j-- > 0) {
  	          if (x2.isOdd()) {
  	            x2.iadd(delta);
  	          }

  	          x2.iushrn(1);
  	        }
  	      }

  	      if (a.cmp(b) >= 0) {
  	        a.isub(b);
  	        x1.isub(x2);
  	      } else {
  	        b.isub(a);
  	        x2.isub(x1);
  	      }
  	    }

  	    var res;
  	    if (a.cmpn(1) === 0) {
  	      res = x1;
  	    } else {
  	      res = x2;
  	    }

  	    if (res.cmpn(0) < 0) {
  	      res.iadd(p);
  	    }

  	    return res;
  	  };

  	  BN.prototype.gcd = function gcd (num) {
  	    if (this.isZero()) return num.abs();
  	    if (num.isZero()) return this.abs();

  	    var a = this.clone();
  	    var b = num.clone();
  	    a.negative = 0;
  	    b.negative = 0;

  	    // Remove common factor of two
  	    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
  	      a.iushrn(1);
  	      b.iushrn(1);
  	    }

  	    do {
  	      while (a.isEven()) {
  	        a.iushrn(1);
  	      }
  	      while (b.isEven()) {
  	        b.iushrn(1);
  	      }

  	      var r = a.cmp(b);
  	      if (r < 0) {
  	        // Swap `a` and `b` to make `a` always bigger than `b`
  	        var t = a;
  	        a = b;
  	        b = t;
  	      } else if (r === 0 || b.cmpn(1) === 0) {
  	        break;
  	      }

  	      a.isub(b);
  	    } while (true);

  	    return b.iushln(shift);
  	  };

  	  // Invert number in the field F(num)
  	  BN.prototype.invm = function invm (num) {
  	    return this.egcd(num).a.umod(num);
  	  };

  	  BN.prototype.isEven = function isEven () {
  	    return (this.words[0] & 1) === 0;
  	  };

  	  BN.prototype.isOdd = function isOdd () {
  	    return (this.words[0] & 1) === 1;
  	  };

  	  // And first word and num
  	  BN.prototype.andln = function andln (num) {
  	    return this.words[0] & num;
  	  };

  	  // Increment at the bit position in-line
  	  BN.prototype.bincn = function bincn (bit) {
  	    assert(typeof bit === 'number');
  	    var r = bit % 26;
  	    var s = (bit - r) / 26;
  	    var q = 1 << r;

  	    // Fast case: bit is much higher than all existing words
  	    if (this.length <= s) {
  	      this._expand(s + 1);
  	      this.words[s] |= q;
  	      return this;
  	    }

  	    // Add bit and propagate, if needed
  	    var carry = q;
  	    for (var i = s; carry !== 0 && i < this.length; i++) {
  	      var w = this.words[i] | 0;
  	      w += carry;
  	      carry = w >>> 26;
  	      w &= 0x3ffffff;
  	      this.words[i] = w;
  	    }
  	    if (carry !== 0) {
  	      this.words[i] = carry;
  	      this.length++;
  	    }
  	    return this;
  	  };

  	  BN.prototype.isZero = function isZero () {
  	    return this.length === 1 && this.words[0] === 0;
  	  };

  	  BN.prototype.cmpn = function cmpn (num) {
  	    var negative = num < 0;

  	    if (this.negative !== 0 && !negative) return -1;
  	    if (this.negative === 0 && negative) return 1;

  	    this._strip();

  	    var res;
  	    if (this.length > 1) {
  	      res = 1;
  	    } else {
  	      if (negative) {
  	        num = -num;
  	      }

  	      assert(num <= 0x3ffffff, 'Number is too big');

  	      var w = this.words[0] | 0;
  	      res = w === num ? 0 : w < num ? -1 : 1;
  	    }
  	    if (this.negative !== 0) return -res | 0;
  	    return res;
  	  };

  	  // Compare two numbers and return:
  	  // 1 - if `this` > `num`
  	  // 0 - if `this` == `num`
  	  // -1 - if `this` < `num`
  	  BN.prototype.cmp = function cmp (num) {
  	    if (this.negative !== 0 && num.negative === 0) return -1;
  	    if (this.negative === 0 && num.negative !== 0) return 1;

  	    var res = this.ucmp(num);
  	    if (this.negative !== 0) return -res | 0;
  	    return res;
  	  };

  	  // Unsigned comparison
  	  BN.prototype.ucmp = function ucmp (num) {
  	    // At this point both numbers have the same sign
  	    if (this.length > num.length) return 1;
  	    if (this.length < num.length) return -1;

  	    var res = 0;
  	    for (var i = this.length - 1; i >= 0; i--) {
  	      var a = this.words[i] | 0;
  	      var b = num.words[i] | 0;

  	      if (a === b) continue;
  	      if (a < b) {
  	        res = -1;
  	      } else if (a > b) {
  	        res = 1;
  	      }
  	      break;
  	    }
  	    return res;
  	  };

  	  BN.prototype.gtn = function gtn (num) {
  	    return this.cmpn(num) === 1;
  	  };

  	  BN.prototype.gt = function gt (num) {
  	    return this.cmp(num) === 1;
  	  };

  	  BN.prototype.gten = function gten (num) {
  	    return this.cmpn(num) >= 0;
  	  };

  	  BN.prototype.gte = function gte (num) {
  	    return this.cmp(num) >= 0;
  	  };

  	  BN.prototype.ltn = function ltn (num) {
  	    return this.cmpn(num) === -1;
  	  };

  	  BN.prototype.lt = function lt (num) {
  	    return this.cmp(num) === -1;
  	  };

  	  BN.prototype.lten = function lten (num) {
  	    return this.cmpn(num) <= 0;
  	  };

  	  BN.prototype.lte = function lte (num) {
  	    return this.cmp(num) <= 0;
  	  };

  	  BN.prototype.eqn = function eqn (num) {
  	    return this.cmpn(num) === 0;
  	  };

  	  BN.prototype.eq = function eq (num) {
  	    return this.cmp(num) === 0;
  	  };

  	  //
  	  // A reduce context, could be using montgomery or something better, depending
  	  // on the `m` itself.
  	  //
  	  BN.red = function red (num) {
  	    return new Red(num);
  	  };

  	  BN.prototype.toRed = function toRed (ctx) {
  	    assert(!this.red, 'Already a number in reduction context');
  	    assert(this.negative === 0, 'red works only with positives');
  	    return ctx.convertTo(this)._forceRed(ctx);
  	  };

  	  BN.prototype.fromRed = function fromRed () {
  	    assert(this.red, 'fromRed works only with numbers in reduction context');
  	    return this.red.convertFrom(this);
  	  };

  	  BN.prototype._forceRed = function _forceRed (ctx) {
  	    this.red = ctx;
  	    return this;
  	  };

  	  BN.prototype.forceRed = function forceRed (ctx) {
  	    assert(!this.red, 'Already a number in reduction context');
  	    return this._forceRed(ctx);
  	  };

  	  BN.prototype.redAdd = function redAdd (num) {
  	    assert(this.red, 'redAdd works only with red numbers');
  	    return this.red.add(this, num);
  	  };

  	  BN.prototype.redIAdd = function redIAdd (num) {
  	    assert(this.red, 'redIAdd works only with red numbers');
  	    return this.red.iadd(this, num);
  	  };

  	  BN.prototype.redSub = function redSub (num) {
  	    assert(this.red, 'redSub works only with red numbers');
  	    return this.red.sub(this, num);
  	  };

  	  BN.prototype.redISub = function redISub (num) {
  	    assert(this.red, 'redISub works only with red numbers');
  	    return this.red.isub(this, num);
  	  };

  	  BN.prototype.redShl = function redShl (num) {
  	    assert(this.red, 'redShl works only with red numbers');
  	    return this.red.shl(this, num);
  	  };

  	  BN.prototype.redMul = function redMul (num) {
  	    assert(this.red, 'redMul works only with red numbers');
  	    this.red._verify2(this, num);
  	    return this.red.mul(this, num);
  	  };

  	  BN.prototype.redIMul = function redIMul (num) {
  	    assert(this.red, 'redMul works only with red numbers');
  	    this.red._verify2(this, num);
  	    return this.red.imul(this, num);
  	  };

  	  BN.prototype.redSqr = function redSqr () {
  	    assert(this.red, 'redSqr works only with red numbers');
  	    this.red._verify1(this);
  	    return this.red.sqr(this);
  	  };

  	  BN.prototype.redISqr = function redISqr () {
  	    assert(this.red, 'redISqr works only with red numbers');
  	    this.red._verify1(this);
  	    return this.red.isqr(this);
  	  };

  	  // Square root over p
  	  BN.prototype.redSqrt = function redSqrt () {
  	    assert(this.red, 'redSqrt works only with red numbers');
  	    this.red._verify1(this);
  	    return this.red.sqrt(this);
  	  };

  	  BN.prototype.redInvm = function redInvm () {
  	    assert(this.red, 'redInvm works only with red numbers');
  	    this.red._verify1(this);
  	    return this.red.invm(this);
  	  };

  	  // Return negative clone of `this` % `red modulo`
  	  BN.prototype.redNeg = function redNeg () {
  	    assert(this.red, 'redNeg works only with red numbers');
  	    this.red._verify1(this);
  	    return this.red.neg(this);
  	  };

  	  BN.prototype.redPow = function redPow (num) {
  	    assert(this.red && !num.red, 'redPow(normalNum)');
  	    this.red._verify1(this);
  	    return this.red.pow(this, num);
  	  };

  	  // Prime numbers with efficient reduction
  	  var primes = {
  	    k256: null,
  	    p224: null,
  	    p192: null,
  	    p25519: null
  	  };

  	  // Pseudo-Mersenne prime
  	  function MPrime (name, p) {
  	    // P = 2 ^ N - K
  	    this.name = name;
  	    this.p = new BN(p, 16);
  	    this.n = this.p.bitLength();
  	    this.k = new BN(1).iushln(this.n).isub(this.p);

  	    this.tmp = this._tmp();
  	  }

  	  MPrime.prototype._tmp = function _tmp () {
  	    var tmp = new BN(null);
  	    tmp.words = new Array(Math.ceil(this.n / 13));
  	    return tmp;
  	  };

  	  MPrime.prototype.ireduce = function ireduce (num) {
  	    // Assumes that `num` is less than `P^2`
  	    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
  	    var r = num;
  	    var rlen;

  	    do {
  	      this.split(r, this.tmp);
  	      r = this.imulK(r);
  	      r = r.iadd(this.tmp);
  	      rlen = r.bitLength();
  	    } while (rlen > this.n);

  	    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
  	    if (cmp === 0) {
  	      r.words[0] = 0;
  	      r.length = 1;
  	    } else if (cmp > 0) {
  	      r.isub(this.p);
  	    } else {
  	      if (r.strip !== undefined) {
  	        // r is a BN v4 instance
  	        r.strip();
  	      } else {
  	        // r is a BN v5 instance
  	        r._strip();
  	      }
  	    }

  	    return r;
  	  };

  	  MPrime.prototype.split = function split (input, out) {
  	    input.iushrn(this.n, 0, out);
  	  };

  	  MPrime.prototype.imulK = function imulK (num) {
  	    return num.imul(this.k);
  	  };

  	  function K256 () {
  	    MPrime.call(
  	      this,
  	      'k256',
  	      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  	  }
  	  inherits(K256, MPrime);

  	  K256.prototype.split = function split (input, output) {
  	    // 256 = 9 * 26 + 22
  	    var mask = 0x3fffff;

  	    var outLen = Math.min(input.length, 9);
  	    for (var i = 0; i < outLen; i++) {
  	      output.words[i] = input.words[i];
  	    }
  	    output.length = outLen;

  	    if (input.length <= 9) {
  	      input.words[0] = 0;
  	      input.length = 1;
  	      return;
  	    }

  	    // Shift by 9 limbs
  	    var prev = input.words[9];
  	    output.words[output.length++] = prev & mask;

  	    for (i = 10; i < input.length; i++) {
  	      var next = input.words[i] | 0;
  	      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
  	      prev = next;
  	    }
  	    prev >>>= 22;
  	    input.words[i - 10] = prev;
  	    if (prev === 0 && input.length > 10) {
  	      input.length -= 10;
  	    } else {
  	      input.length -= 9;
  	    }
  	  };

  	  K256.prototype.imulK = function imulK (num) {
  	    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
  	    num.words[num.length] = 0;
  	    num.words[num.length + 1] = 0;
  	    num.length += 2;

  	    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
  	    var lo = 0;
  	    for (var i = 0; i < num.length; i++) {
  	      var w = num.words[i] | 0;
  	      lo += w * 0x3d1;
  	      num.words[i] = lo & 0x3ffffff;
  	      lo = w * 0x40 + ((lo / 0x4000000) | 0);
  	    }

  	    // Fast length reduction
  	    if (num.words[num.length - 1] === 0) {
  	      num.length--;
  	      if (num.words[num.length - 1] === 0) {
  	        num.length--;
  	      }
  	    }
  	    return num;
  	  };

  	  function P224 () {
  	    MPrime.call(
  	      this,
  	      'p224',
  	      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  	  }
  	  inherits(P224, MPrime);

  	  function P192 () {
  	    MPrime.call(
  	      this,
  	      'p192',
  	      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  	  }
  	  inherits(P192, MPrime);

  	  function P25519 () {
  	    // 2 ^ 255 - 19
  	    MPrime.call(
  	      this,
  	      '25519',
  	      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  	  }
  	  inherits(P25519, MPrime);

  	  P25519.prototype.imulK = function imulK (num) {
  	    // K = 0x13
  	    var carry = 0;
  	    for (var i = 0; i < num.length; i++) {
  	      var hi = (num.words[i] | 0) * 0x13 + carry;
  	      var lo = hi & 0x3ffffff;
  	      hi >>>= 26;

  	      num.words[i] = lo;
  	      carry = hi;
  	    }
  	    if (carry !== 0) {
  	      num.words[num.length++] = carry;
  	    }
  	    return num;
  	  };

  	  // Exported mostly for testing purposes, use plain name instead
  	  BN._prime = function prime (name) {
  	    // Cached version of prime
  	    if (primes[name]) return primes[name];

  	    var prime;
  	    if (name === 'k256') {
  	      prime = new K256();
  	    } else if (name === 'p224') {
  	      prime = new P224();
  	    } else if (name === 'p192') {
  	      prime = new P192();
  	    } else if (name === 'p25519') {
  	      prime = new P25519();
  	    } else {
  	      throw new Error('Unknown prime ' + name);
  	    }
  	    primes[name] = prime;

  	    return prime;
  	  };

  	  //
  	  // Base reduction engine
  	  //
  	  function Red (m) {
  	    if (typeof m === 'string') {
  	      var prime = BN._prime(m);
  	      this.m = prime.p;
  	      this.prime = prime;
  	    } else {
  	      assert(m.gtn(1), 'modulus must be greater than 1');
  	      this.m = m;
  	      this.prime = null;
  	    }
  	  }

  	  Red.prototype._verify1 = function _verify1 (a) {
  	    assert(a.negative === 0, 'red works only with positives');
  	    assert(a.red, 'red works only with red numbers');
  	  };

  	  Red.prototype._verify2 = function _verify2 (a, b) {
  	    assert((a.negative | b.negative) === 0, 'red works only with positives');
  	    assert(a.red && a.red === b.red,
  	      'red works only with red numbers');
  	  };

  	  Red.prototype.imod = function imod (a) {
  	    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

  	    move(a, a.umod(this.m)._forceRed(this));
  	    return a;
  	  };

  	  Red.prototype.neg = function neg (a) {
  	    if (a.isZero()) {
  	      return a.clone();
  	    }

  	    return this.m.sub(a)._forceRed(this);
  	  };

  	  Red.prototype.add = function add (a, b) {
  	    this._verify2(a, b);

  	    var res = a.add(b);
  	    if (res.cmp(this.m) >= 0) {
  	      res.isub(this.m);
  	    }
  	    return res._forceRed(this);
  	  };

  	  Red.prototype.iadd = function iadd (a, b) {
  	    this._verify2(a, b);

  	    var res = a.iadd(b);
  	    if (res.cmp(this.m) >= 0) {
  	      res.isub(this.m);
  	    }
  	    return res;
  	  };

  	  Red.prototype.sub = function sub (a, b) {
  	    this._verify2(a, b);

  	    var res = a.sub(b);
  	    if (res.cmpn(0) < 0) {
  	      res.iadd(this.m);
  	    }
  	    return res._forceRed(this);
  	  };

  	  Red.prototype.isub = function isub (a, b) {
  	    this._verify2(a, b);

  	    var res = a.isub(b);
  	    if (res.cmpn(0) < 0) {
  	      res.iadd(this.m);
  	    }
  	    return res;
  	  };

  	  Red.prototype.shl = function shl (a, num) {
  	    this._verify1(a);
  	    return this.imod(a.ushln(num));
  	  };

  	  Red.prototype.imul = function imul (a, b) {
  	    this._verify2(a, b);
  	    return this.imod(a.imul(b));
  	  };

  	  Red.prototype.mul = function mul (a, b) {
  	    this._verify2(a, b);
  	    return this.imod(a.mul(b));
  	  };

  	  Red.prototype.isqr = function isqr (a) {
  	    return this.imul(a, a.clone());
  	  };

  	  Red.prototype.sqr = function sqr (a) {
  	    return this.mul(a, a);
  	  };

  	  Red.prototype.sqrt = function sqrt (a) {
  	    if (a.isZero()) return a.clone();

  	    var mod3 = this.m.andln(3);
  	    assert(mod3 % 2 === 1);

  	    // Fast case
  	    if (mod3 === 3) {
  	      var pow = this.m.add(new BN(1)).iushrn(2);
  	      return this.pow(a, pow);
  	    }

  	    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
  	    //
  	    // Find Q and S, that Q * 2 ^ S = (P - 1)
  	    var q = this.m.subn(1);
  	    var s = 0;
  	    while (!q.isZero() && q.andln(1) === 0) {
  	      s++;
  	      q.iushrn(1);
  	    }
  	    assert(!q.isZero());

  	    var one = new BN(1).toRed(this);
  	    var nOne = one.redNeg();

  	    // Find quadratic non-residue
  	    // NOTE: Max is such because of generalized Riemann hypothesis.
  	    var lpow = this.m.subn(1).iushrn(1);
  	    var z = this.m.bitLength();
  	    z = new BN(2 * z * z).toRed(this);

  	    while (this.pow(z, lpow).cmp(nOne) !== 0) {
  	      z.redIAdd(nOne);
  	    }

  	    var c = this.pow(z, q);
  	    var r = this.pow(a, q.addn(1).iushrn(1));
  	    var t = this.pow(a, q);
  	    var m = s;
  	    while (t.cmp(one) !== 0) {
  	      var tmp = t;
  	      for (var i = 0; tmp.cmp(one) !== 0; i++) {
  	        tmp = tmp.redSqr();
  	      }
  	      assert(i < m);
  	      var b = this.pow(c, new BN(1).iushln(m - i - 1));

  	      r = r.redMul(b);
  	      c = b.redSqr();
  	      t = t.redMul(c);
  	      m = i;
  	    }

  	    return r;
  	  };

  	  Red.prototype.invm = function invm (a) {
  	    var inv = a._invmp(this.m);
  	    if (inv.negative !== 0) {
  	      inv.negative = 0;
  	      return this.imod(inv).redNeg();
  	    } else {
  	      return this.imod(inv);
  	    }
  	  };

  	  Red.prototype.pow = function pow (a, num) {
  	    if (num.isZero()) return new BN(1).toRed(this);
  	    if (num.cmpn(1) === 0) return a.clone();

  	    var windowSize = 4;
  	    var wnd = new Array(1 << windowSize);
  	    wnd[0] = new BN(1).toRed(this);
  	    wnd[1] = a;
  	    for (var i = 2; i < wnd.length; i++) {
  	      wnd[i] = this.mul(wnd[i - 1], a);
  	    }

  	    var res = wnd[0];
  	    var current = 0;
  	    var currentLen = 0;
  	    var start = num.bitLength() % 26;
  	    if (start === 0) {
  	      start = 26;
  	    }

  	    for (i = num.length - 1; i >= 0; i--) {
  	      var word = num.words[i];
  	      for (var j = start - 1; j >= 0; j--) {
  	        var bit = (word >> j) & 1;
  	        if (res !== wnd[0]) {
  	          res = this.sqr(res);
  	        }

  	        if (bit === 0 && current === 0) {
  	          currentLen = 0;
  	          continue;
  	        }

  	        current <<= 1;
  	        current |= bit;
  	        currentLen++;
  	        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

  	        res = this.mul(res, wnd[current]);
  	        currentLen = 0;
  	        current = 0;
  	      }
  	      start = 26;
  	    }

  	    return res;
  	  };

  	  Red.prototype.convertTo = function convertTo (num) {
  	    var r = num.umod(this.m);

  	    return r === num ? r.clone() : r;
  	  };

  	  Red.prototype.convertFrom = function convertFrom (num) {
  	    var res = num.clone();
  	    res.red = null;
  	    return res;
  	  };

  	  //
  	  // Montgomery method engine
  	  //

  	  BN.mont = function mont (num) {
  	    return new Mont(num);
  	  };

  	  function Mont (m) {
  	    Red.call(this, m);

  	    this.shift = this.m.bitLength();
  	    if (this.shift % 26 !== 0) {
  	      this.shift += 26 - (this.shift % 26);
  	    }

  	    this.r = new BN(1).iushln(this.shift);
  	    this.r2 = this.imod(this.r.sqr());
  	    this.rinv = this.r._invmp(this.m);

  	    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
  	    this.minv = this.minv.umod(this.r);
  	    this.minv = this.r.sub(this.minv);
  	  }
  	  inherits(Mont, Red);

  	  Mont.prototype.convertTo = function convertTo (num) {
  	    return this.imod(num.ushln(this.shift));
  	  };

  	  Mont.prototype.convertFrom = function convertFrom (num) {
  	    var r = this.imod(num.mul(this.rinv));
  	    r.red = null;
  	    return r;
  	  };

  	  Mont.prototype.imul = function imul (a, b) {
  	    if (a.isZero() || b.isZero()) {
  	      a.words[0] = 0;
  	      a.length = 1;
  	      return a;
  	    }

  	    var t = a.imul(b);
  	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  	    var u = t.isub(c).iushrn(this.shift);
  	    var res = u;

  	    if (u.cmp(this.m) >= 0) {
  	      res = u.isub(this.m);
  	    } else if (u.cmpn(0) < 0) {
  	      res = u.iadd(this.m);
  	    }

  	    return res._forceRed(this);
  	  };

  	  Mont.prototype.mul = function mul (a, b) {
  	    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

  	    var t = a.mul(b);
  	    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
  	    var u = t.isub(c).iushrn(this.shift);
  	    var res = u;
  	    if (u.cmp(this.m) >= 0) {
  	      res = u.isub(this.m);
  	    } else if (u.cmpn(0) < 0) {
  	      res = u.iadd(this.m);
  	    }

  	    return res._forceRed(this);
  	  };

  	  Mont.prototype.invm = function invm (a) {
  	    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
  	    var res = this.imod(a._invmp(this.m).mul(this.r2));
  	    return res._forceRed(this);
  	  };
  	})(module, commonjsGlobal);
  } (bn));

  var BN = bn.exports;

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name isBn
   * @summary Tests for a `BN` object instance.
   * @description
   * Checks to see if the input object is an instance of `BN` (bn.js).
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { isBn } from '@polkadot/util';
   *
   * console.log('isBn', isBn(new BN(1))); // => true
   * ```
   */

  function isBn(value) {
    return BN.isBN(value);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isObject
   * @summary Tests for an `object`.
   * @description
   * Checks to see if the input value is a JavaScript object.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isObject } from '@polkadot/util';
   *
   * isObject({}); // => true
   * isObject('something'); // => false
   * ```
   */
  function isObject$1(value) {
    return !!value && typeof value === 'object';
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  function isOn(...fns) {
    return value => (isObject$1(value) || isFunction$2(value)) && fns.every(f => isFunction$2(value[f]));
  }
  function isOnObject(...fns) {
    return value => isObject$1(value) && fns.every(f => isFunction$2(value[f]));
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const isToBigInt = isOn('toBigInt');

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const isToBn = isOn('toBn');

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name nToBigInt
   * @summary Creates a bigInt value from a BN, bigint, string (base 10 or hex) or number input.
   */

  function nToBigInt(value) {
    return typeof value === 'bigint' ? value : !value ? BigInt$1(0) : isHex(value) ? hexToBigInt(value.toString()) : isBn(value) ? BigInt$1(value.toString()) : isToBigInt(value) ? value.toBigInt() : isToBn(value) ? BigInt$1(value.toBn().toString()) : BigInt$1(value);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /** @internal */

  BigInt$1(94906265);

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /** @internal */
  function createCmp(cmp) {
    return (...items) => {
      if (items.length === 0) {
        throw new Error('Must provide one or more arguments');
      }

      let result = items[0];

      for (let i = 1; i < items.length; i++) {
        if (cmp(items[i], result)) {
          result = items[i];
        }
      }

      return result;
    };
  }

  var lookup$1 = [];
  var revLookup$1 = [];
  var Arr$1 = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
  var inited = false;
  function init$1 () {
    inited = true;
    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    for (var i = 0, len = code.length; i < len; ++i) {
      lookup$1[i] = code[i];
      revLookup$1[code.charCodeAt(i)] = i;
    }

    revLookup$1['-'.charCodeAt(0)] = 62;
    revLookup$1['_'.charCodeAt(0)] = 63;
  }

  function toByteArray$1 (b64) {
    if (!inited) {
      init$1();
    }
    var i, j, l, tmp, placeHolders, arr;
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr$1(len * 3 / 4 - placeHolders);

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? len - 4 : len;

    var L = 0;

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (revLookup$1[b64.charCodeAt(i)] << 18) | (revLookup$1[b64.charCodeAt(i + 1)] << 12) | (revLookup$1[b64.charCodeAt(i + 2)] << 6) | revLookup$1[b64.charCodeAt(i + 3)];
      arr[L++] = (tmp >> 16) & 0xFF;
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    if (placeHolders === 2) {
      tmp = (revLookup$1[b64.charCodeAt(i)] << 2) | (revLookup$1[b64.charCodeAt(i + 1)] >> 4);
      arr[L++] = tmp & 0xFF;
    } else if (placeHolders === 1) {
      tmp = (revLookup$1[b64.charCodeAt(i)] << 10) | (revLookup$1[b64.charCodeAt(i + 1)] << 4) | (revLookup$1[b64.charCodeAt(i + 2)] >> 2);
      arr[L++] = (tmp >> 8) & 0xFF;
      arr[L++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64$1 (num) {
    return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F]
  }

  function encodeChunk$1 (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
      output.push(tripletToBase64$1(tmp));
    }
    return output.join('')
  }

  function fromByteArray$1 (uint8) {
    if (!inited) {
      init$1();
    }
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk$1(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      output += lookup$1[tmp >> 2];
      output += lookup$1[(tmp << 4) & 0x3F];
      output += '==';
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
      output += lookup$1[tmp >> 10];
      output += lookup$1[(tmp >> 4) & 0x3F];
      output += lookup$1[(tmp << 2) & 0x3F];
      output += '=';
    }

    parts.push(output);

    return parts.join('')
  }

  function read (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }

  function write (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  }

  var toString = {}.toString;

  var isArray$3 = Array.isArray || function (arr) {
    return toString.call(arr) == '[object Array]';
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */

  var INSPECT_MAX_BYTES = 50;

  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Use Object implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * Due to various browser bugs, sometimes the Object implementation will be used even
   * when the browser supports typed arrays.
   *
   * Note:
   *
   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
   *
   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
   *
   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
   *     incorrect length in some situations.

   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
   * get the Object implementation, which is slower but behaves correctly.
   */
  Buffer$f.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
    ? global$1.TYPED_ARRAY_SUPPORT
    : true;

  /*
   * Export kMaxLength after typed array support is determined.
   */
  kMaxLength();

  function kMaxLength () {
    return Buffer$f.TYPED_ARRAY_SUPPORT
      ? 0x7fffffff
      : 0x3fffffff
  }

  function createBuffer (that, length) {
    if (kMaxLength() < length) {
      throw new RangeError('Invalid typed array length')
    }
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = new Uint8Array(length);
      that.__proto__ = Buffer$f.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      if (that === null) {
        that = new Buffer$f(length);
      }
      that.length = length;
    }

    return that
  }

  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */

  function Buffer$f (arg, encodingOrOffset, length) {
    if (!Buffer$f.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$f)) {
      return new Buffer$f(arg, encodingOrOffset, length)
    }

    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new Error(
          'If encoding is specified then the first argument must be a string'
        )
      }
      return allocUnsafe(this, arg)
    }
    return from$1(this, arg, encodingOrOffset, length)
  }

  Buffer$f.poolSize = 8192; // not used by this implementation

  // TODO: Legacy, not needed anymore. Remove in next major version.
  Buffer$f._augment = function (arr) {
    arr.__proto__ = Buffer$f.prototype;
    return arr
  };

  function from$1 (that, value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('"value" argument must not be a number')
    }

    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
      return fromArrayBuffer(that, value, encodingOrOffset, length)
    }

    if (typeof value === 'string') {
      return fromString(that, value, encodingOrOffset)
    }

    return fromObject(that, value)
  }

  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer$f.from = function (value, encodingOrOffset, length) {
    return from$1(null, value, encodingOrOffset, length)
  };

  if (Buffer$f.TYPED_ARRAY_SUPPORT) {
    Buffer$f.prototype.__proto__ = Uint8Array.prototype;
    Buffer$f.__proto__ = Uint8Array;
  }

  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be a number')
    } else if (size < 0) {
      throw new RangeError('"size" argument must not be negative')
    }
  }

  function alloc (that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) {
      return createBuffer(that, size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(that, size).fill(fill, encoding)
        : createBuffer(that, size).fill(fill)
    }
    return createBuffer(that, size)
  }

  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer$f.alloc = function (size, fill, encoding) {
    return alloc(null, size, fill, encoding)
  };

  function allocUnsafe (that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer$f.TYPED_ARRAY_SUPPORT) {
      for (var i = 0; i < size; ++i) {
        that[i] = 0;
      }
    }
    return that
  }

  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer$f.allocUnsafe = function (size) {
    return allocUnsafe(null, size)
  };
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer$f.allocUnsafeSlow = function (size) {
    return allocUnsafe(null, size)
  };

  function fromString (that, string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8';
    }

    if (!Buffer$f.isEncoding(encoding)) {
      throw new TypeError('"encoding" must be a valid string encoding')
    }

    var length = byteLength$1(string, encoding) | 0;
    that = createBuffer(that, length);

    var actual = that.write(string, encoding);

    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      that = that.slice(0, actual);
    }

    return that
  }

  function fromArrayLike$1 (that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for (var i = 0; i < length; i += 1) {
      that[i] = array[i] & 255;
    }
    return that
  }

  function fromArrayBuffer (that, array, byteOffset, length) {
    array.byteLength; // this throws if `array` is not a valid ArrayBuffer

    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('\'offset\' is out of bounds')
    }

    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('\'length\' is out of bounds')
    }

    if (byteOffset === undefined && length === undefined) {
      array = new Uint8Array(array);
    } else if (length === undefined) {
      array = new Uint8Array(array, byteOffset);
    } else {
      array = new Uint8Array(array, byteOffset, length);
    }

    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      // Return an augmented `Uint8Array` instance, for best performance
      that = array;
      that.__proto__ = Buffer$f.prototype;
    } else {
      // Fallback: Return an object instance of the Buffer class
      that = fromArrayLike$1(that, array);
    }
    return that
  }

  function fromObject (that, obj) {
    if (internalIsBuffer(obj)) {
      var len = checked(obj.length) | 0;
      that = createBuffer(that, len);

      if (that.length === 0) {
        return that
      }

      obj.copy(that, 0, 0, len);
      return that
    }

    if (obj) {
      if ((typeof ArrayBuffer !== 'undefined' &&
          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
        if (typeof obj.length !== 'number' || isnan(obj.length)) {
          return createBuffer(that, 0)
        }
        return fromArrayLike$1(that, obj)
      }

      if (obj.type === 'Buffer' && isArray$3(obj.data)) {
        return fromArrayLike$1(that, obj.data)
      }
    }

    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
  }

  function checked (length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + kMaxLength().toString(16) + ' bytes')
    }
    return length | 0
  }
  Buffer$f.isBuffer = isBuffer$1;
  function internalIsBuffer (b) {
    return !!(b != null && b._isBuffer)
  }

  Buffer$f.compare = function compare (a, b) {
    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
      throw new TypeError('Arguments must be Buffers')
    }

    if (a === b) return 0

    var x = a.length;
    var y = b.length;

    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  Buffer$f.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  };

  Buffer$f.concat = function concat (list, length) {
    if (!isArray$3(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }

    if (list.length === 0) {
      return Buffer$f.alloc(0)
    }

    var i;
    if (length === undefined) {
      length = 0;
      for (i = 0; i < list.length; ++i) {
        length += list[i].length;
      }
    }

    var buffer = Buffer$f.allocUnsafe(length);
    var pos = 0;
    for (i = 0; i < list.length; ++i) {
      var buf = list[i];
      if (!internalIsBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos);
      pos += buf.length;
    }
    return buffer
  };

  function byteLength$1 (string, encoding) {
    if (internalIsBuffer(string)) {
      return string.length
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      string = '' + string;
    }

    var len = string.length;
    if (len === 0) return 0

    // Use a for loop to avoid recursion
    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
        case undefined:
          return utf8ToBytes$1(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) return utf8ToBytes$1(string).length // assume utf8
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  }
  Buffer$f.byteLength = byteLength$1;

  function slowToString (encoding, start, end) {
    var loweredCase = false;

    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.

    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0;
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }

    if (end === undefined || end > this.length) {
      end = this.length;
    }

    if (end <= 0) {
      return ''
    }

    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;

    if (end <= start) {
      return ''
    }

    if (!encoding) encoding = 'utf8';

    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)

        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)

        case 'ascii':
          return asciiSlice(this, start, end)

        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)

        case 'base64':
          return base64Slice(this, start, end)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase();
          loweredCase = true;
      }
    }
  }

  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
  // Buffer instances.
  Buffer$f.prototype._isBuffer = true;

  function swap (b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
  }

  Buffer$f.prototype.swap16 = function swap16 () {
    var len = this.length;
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1);
    }
    return this
  };

  Buffer$f.prototype.swap32 = function swap32 () {
    var len = this.length;
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3);
      swap(this, i + 1, i + 2);
    }
    return this
  };

  Buffer$f.prototype.swap64 = function swap64 () {
    var len = this.length;
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7);
      swap(this, i + 1, i + 6);
      swap(this, i + 2, i + 5);
      swap(this, i + 3, i + 4);
    }
    return this
  };

  Buffer$f.prototype.toString = function toString () {
    var length = this.length | 0;
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  };

  Buffer$f.prototype.equals = function equals (b) {
    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer$f.compare(this, b) === 0
  };

  Buffer$f.prototype.inspect = function inspect () {
    var str = '';
    var max = INSPECT_MAX_BYTES;
    if (this.length > 0) {
      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
      if (this.length > max) str += ' ... ';
    }
    return '<Buffer ' + str + '>'
  };

  Buffer$f.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (!internalIsBuffer(target)) {
      throw new TypeError('Argument must be a Buffer')
    }

    if (start === undefined) {
      start = 0;
    }
    if (end === undefined) {
      end = target ? target.length : 0;
    }
    if (thisStart === undefined) {
      thisStart = 0;
    }
    if (thisEnd === undefined) {
      thisEnd = this.length;
    }

    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }

    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }

    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;

    if (this === target) return 0

    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);

    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);

    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break
      }
    }

    if (x < y) return -1
    if (y < x) return 1
    return 0
  };

  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1

    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset;
      byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff;
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000;
    }
    byteOffset = +byteOffset;  // Coerce to Number.
    if (isNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1);
    }

    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0;
      else return -1
    }

    // Normalize val
    if (typeof val === 'string') {
      val = Buffer$f.from(val, encoding);
    }

    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (internalIsBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF; // Search for a byte value [0-255]
      if (Buffer$f.TYPED_ARRAY_SUPPORT &&
          typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }

    throw new TypeError('val must be string, number or Buffer')
  }

  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;

    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase();
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2;
        arrLength /= 2;
        valLength /= 2;
        byteOffset /= 2;
      }
    }

    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }

    var i;
    if (dir) {
      var foundIndex = -1;
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i;
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex;
          foundIndex = -1;
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
      for (i = byteOffset; i >= 0; i--) {
        var found = true;
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false;
            break
          }
        }
        if (found) return i
      }
    }

    return -1
  }

  Buffer$f.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  };

  Buffer$f.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  };

  Buffer$f.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  };

  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) {
      length = remaining;
    } else {
      length = Number(length);
      if (length > remaining) {
        length = remaining;
      }
    }

    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

    if (length > strLen / 2) {
      length = strLen / 2;
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16);
      if (isNaN(parsed)) return i
      buf[offset + i] = parsed;
    }
    return i
  }

  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes$1(string, buf.length - offset), buf, offset, length)
  }

  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }

  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }

  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }

  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }

  Buffer$f.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8';
      length = this.length;
      offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset;
      length = this.length;
      offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset | 0;
      if (isFinite(length)) {
        length = length | 0;
        if (encoding === undefined) encoding = 'utf8';
      } else {
        encoding = length;
        length = undefined;
      }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }

    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;

    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }

    if (!encoding) encoding = 'utf8';

    var loweredCase = false;
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)

        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)

        case 'ascii':
          return asciiWrite(this, string, offset, length)

        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)

        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)

        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)

        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase();
          loweredCase = true;
      }
    }
  };

  Buffer$f.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  };

  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return fromByteArray$1(buf)
    } else {
      return fromByteArray$1(buf.slice(start, end))
    }
  }

  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];

    var i = start;
    while (i < end) {
      var firstByte = buf[i];
      var codePoint = null;
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
        : 1;

      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint;

        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte;
            }
            break
          case 2:
            secondByte = buf[i + 1];
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 3:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint;
              }
            }
            break
          case 4:
            secondByte = buf[i + 1];
            thirdByte = buf[i + 2];
            fourthByte = buf[i + 3];
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint;
              }
            }
        }
      }

      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD;
        bytesPerSequence = 1;
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000;
        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
        codePoint = 0xDC00 | codePoint & 0x3FF;
      }

      res.push(codePoint);
      i += bytesPerSequence;
    }

    return decodeCodePointsArray(res)
  }

  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000;

  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }

    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      );
    }
    return res
  }

  function asciiSlice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F);
    }
    return ret
  }

  function latin1Slice (buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);

    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i]);
    }
    return ret
  }

  function hexSlice (buf, start, end) {
    var len = buf.length;

    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;

    var out = '';
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i]);
    }
    return out
  }

  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    }
    return res
  }

  Buffer$f.prototype.slice = function slice (start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;

    if (start < 0) {
      start += len;
      if (start < 0) start = 0;
    } else if (start > len) {
      start = len;
    }

    if (end < 0) {
      end += len;
      if (end < 0) end = 0;
    } else if (end > len) {
      end = len;
    }

    if (end < start) end = start;

    var newBuf;
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      newBuf = this.subarray(start, end);
      newBuf.__proto__ = Buffer$f.prototype;
    } else {
      var sliceLen = end - start;
      newBuf = new Buffer$f(sliceLen, undefined);
      for (var i = 0; i < sliceLen; ++i) {
        newBuf[i] = this[i + start];
      }
    }

    return newBuf
  };

  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }

  Buffer$f.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }

    return val
  };

  Buffer$f.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length);
    }

    var val = this[offset + --byteLength];
    var mul = 1;
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul;
    }

    return val
  };

  Buffer$f.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset]
  };

  Buffer$f.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | (this[offset + 1] << 8)
  };

  Buffer$f.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return (this[offset] << 8) | this[offset + 1]
  };

  Buffer$f.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  };

  Buffer$f.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  };

  Buffer$f.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var val = this[offset];
    var mul = 1;
    var i = 0;
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$f.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);

    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul;
    }
    mul *= 0x80;

    if (val >= mul) val -= Math.pow(2, 8 * byteLength);

    return val
  };

  Buffer$f.prototype.readInt8 = function readInt8 (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  };

  Buffer$f.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | (this[offset + 1] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$f.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | (this[offset] << 8);
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  };

  Buffer$f.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  };

  Buffer$f.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);

    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  };

  Buffer$f.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, true, 23, 4)
  };

  Buffer$f.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return read(this, offset, false, 23, 4)
  };

  Buffer$f.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, true, 52, 8)
  };

  Buffer$f.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return read(this, offset, false, 52, 8)
  };

  function checkInt (buf, value, offset, ext, max, min) {
    if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }

  Buffer$f.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$f.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1;
      checkInt(this, value, offset, byteLength, maxBytes, 0);
    }

    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$f.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer$f.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = (value & 0xff);
    return offset + 1
  };

  function objectWriteUInt16 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
        (littleEndian ? i : 1 - i) * 8;
    }
  }

  Buffer$f.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$f.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  function objectWriteUInt32 (buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
    }
  }

  Buffer$f.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      this[offset + 3] = (value >>> 24);
      this[offset + 2] = (value >>> 16);
      this[offset + 1] = (value >>> 8);
      this[offset] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$f.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  Buffer$f.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$f.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
      var limit = Math.pow(2, 8 * byteLength - 1);

      checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }

    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1;
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
    }

    return offset + byteLength
  };

  Buffer$f.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
    if (!Buffer$f.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = (value & 0xff);
    return offset + 1
  };

  Buffer$f.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
    } else {
      objectWriteUInt16(this, value, offset, true);
    }
    return offset + 2
  };

  Buffer$f.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 8);
      this[offset + 1] = (value & 0xff);
    } else {
      objectWriteUInt16(this, value, offset, false);
    }
    return offset + 2
  };

  Buffer$f.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value & 0xff);
      this[offset + 1] = (value >>> 8);
      this[offset + 2] = (value >>> 16);
      this[offset + 3] = (value >>> 24);
    } else {
      objectWriteUInt32(this, value, offset, true);
    }
    return offset + 4
  };

  Buffer$f.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer$f.TYPED_ARRAY_SUPPORT) {
      this[offset] = (value >>> 24);
      this[offset + 1] = (value >>> 16);
      this[offset + 2] = (value >>> 8);
      this[offset + 3] = (value & 0xff);
    } else {
      objectWriteUInt32(this, value, offset, false);
    }
    return offset + 4
  };

  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }

  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4);
    }
    write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4
  }

  Buffer$f.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  };

  Buffer$f.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  };

  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8);
    }
    write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8
  }

  Buffer$f.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  };

  Buffer$f.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  };

  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer$f.prototype.copy = function copy (target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;

    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0

    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')

    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start;
    }

    var len = end - start;
    var i;

    if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start];
      }
    } else if (len < 1000 || !Buffer$f.TYPED_ARRAY_SUPPORT) {
      // ascending copy from start
      for (i = 0; i < len; ++i) {
        target[i + targetStart] = this[i + start];
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, start + len),
        targetStart
      );
    }

    return len
  };

  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer$f.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start;
        start = 0;
        end = this.length;
      } else if (typeof end === 'string') {
        encoding = end;
        end = this.length;
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0);
        if (code < 256) {
          val = code;
        }
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer$f.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
    } else if (typeof val === 'number') {
      val = val & 255;
    }

    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }

    if (end <= start) {
      return this
    }

    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;

    if (!val) val = 0;

    var i;
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val;
      }
    } else {
      var bytes = internalIsBuffer(val)
        ? val
        : utf8ToBytes$1(new Buffer$f(val, encoding).toString());
      var len = bytes.length;
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len];
      }
    }

    return this
  };

  // HELPER FUNCTIONS
  // ================

  var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

  function base64clean (str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '=';
    }
    return str
  }

  function stringtrim (str) {
    if (str.trim) return str.trim()
    return str.replace(/^\s+|\s+$/g, '')
  }

  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }

  function utf8ToBytes$1 (string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];

    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i);

      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            continue
          }

          // valid lead
          leadSurrogate = codePoint;

          continue
        }

        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          leadSurrogate = codePoint;
          continue
        }

        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
      }

      leadSurrogate = null;

      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint);
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        );
      } else {
        throw new Error('Invalid code point')
      }
    }

    return bytes
  }

  function asciiToBytes (str) {
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF);
    }
    return byteArray
  }

  function utf16leToBytes (str, units) {
    var c, hi, lo;
    var byteArray = [];
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break

      c = str.charCodeAt(i);
      hi = c >> 8;
      lo = c % 256;
      byteArray.push(lo);
      byteArray.push(hi);
    }

    return byteArray
  }


  function base64ToBytes (str) {
    return toByteArray$1(base64clean(str))
  }

  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i];
    }
    return i
  }

  function isnan (val) {
    return val !== val // eslint-disable-line no-self-compare
  }


  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
  // The _isBuffer check is for Safari 5-7 support, because it's missing
  // Object.prototype.constructor. Remove this eventually
  function isBuffer$1(obj) {
    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
  }

  function isFastBuffer (obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  }

  // For Node v0.10 support. Remove this eventually.
  function isSlowBuffer (obj) {
    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
  }

  // shim for using process in browser
  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  var cachedSetTimeout = defaultSetTimout;
  var cachedClearTimeout = defaultClearTimeout;
  if (typeof global$1.setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
  }
  if (typeof global$1.clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
  }

  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }


  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }



  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;

  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }

  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;

      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  function nextTick$1(fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  }
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  var title = 'browser';
  var platform = 'browser';
  var browser$1 = true;
  var env = {};
  var argv = [];
  var version = ''; // empty string to avoid regexp issues
  var versions = {};
  var release = {};
  var config$4 = {};

  function noop$4() {}

  var on = noop$4;
  var addListener = noop$4;
  var once$2 = noop$4;
  var off = noop$4;
  var removeListener = noop$4;
  var removeAllListeners = noop$4;
  var emit = noop$4;

  function binding(name) {
      throw new Error('process.binding is not supported');
  }

  function cwd () { return '/' }
  function chdir (dir) {
      throw new Error('process.chdir is not supported');
  }function umask() { return 0; }

  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
  var performance$1 = global$1.performance || {};
  var performanceNow =
    performance$1.now        ||
    performance$1.mozNow     ||
    performance$1.msNow      ||
    performance$1.oNow       ||
    performance$1.webkitNow  ||
    function(){ return (new Date()).getTime() };

  // generate timestamp or delta
  // see http://nodejs.org/api/process.html#process_process_hrtime
  function hrtime(previousTimestamp){
    var clocktime = performanceNow.call(performance$1)*1e-3;
    var seconds = Math.floor(clocktime);
    var nanoseconds = Math.floor((clocktime%1)*1e9);
    if (previousTimestamp) {
      seconds = seconds - previousTimestamp[0];
      nanoseconds = nanoseconds - previousTimestamp[1];
      if (nanoseconds<0) {
        seconds--;
        nanoseconds += 1e9;
      }
    }
    return [seconds,nanoseconds]
  }

  var startTime = new Date();
  function uptime() {
    var currentTime = new Date();
    var dif = currentTime - startTime;
    return dif / 1000;
  }

  var browser$1$1 = {
    nextTick: nextTick$1,
    title: title,
    browser: browser$1,
    env: env,
    argv: argv,
    version: version,
    versions: versions,
    on: on,
    addListener: addListener,
    once: once$2,
    off: off,
    removeListener: removeListener,
    removeAllListeners: removeAllListeners,
    emit: emit,
    binding: binding,
    cwd: cwd,
    chdir: chdir,
    umask: umask,
    hrtime: hrtime,
    platform: platform,
    release: release,
    config: config$4,
    uptime: uptime
  };

  /** true if the environment has proper BigInt support */

  const hasBigInt = typeof BigInt$1 === 'function' && typeof BigInt$1.asIntN === 'function';
  /** true if the environment has support for Buffer */

  const hasBuffer = typeof Buffer$f !== 'undefined';
  /** true if the environment has process available (typically Node.js) */

  const hasProcess = typeof browser$1$1 === 'object';

  /**
   * @name isBuffer
   * @summary Tests for a `Buffer` object instance.
   * @description
   * Checks to see if the input object is an instance of `Buffer`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isBuffer } from '@polkadot/util';
   *
   * console.log('isBuffer', isBuffer(Buffer.from([]))); // => true
   * ```
   */

  function isBuffer(value) {
    // we do check a function first, since it is slightly faster than isBuffer itself
    return hasBuffer && isFunction$2(value && value.readDoubleLE) && Buffer$f.isBuffer(value);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isU8a
   * @summary Tests for a `Uint8Array` object instance.
   * @description
   * Checks to see if the input object is an instance of `Uint8Array`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isUint8Array } from '@polkadot/util';
   *
   * console.log('isU8a', isU8a([])); // => false
   * ```
   */
  function isU8a(value) {
    // here we defer the instanceof check which is actually slightly
    // slower than just checking the constrctor (direct instances)
    return (value && value.constructor) === Uint8Array || value instanceof Uint8Array;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const encoder = new TextEncoder$1();
  /**
   * @name stringToU8a
   * @summary Creates a Uint8Array object from a utf-8 string.
   * @description
   * String input values return the actual encoded `UInt8Array`. `null` or `undefined` values returns an empty encoded array.
   * @example
   * <BR>
   *
   * ```javascript
   * import { stringToU8a } from '@polkadot/util';
   *
   * stringToU8a('hello'); // [0x68, 0x65, 0x6c, 0x6c, 0x6f]
   * ```
   */

  function stringToU8a(value) {
    return value ? encoder.encode(value.toString()) : new Uint8Array();
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name u8aToU8a
   * @summary Creates a Uint8Array value from a Uint8Array, Buffer, string or hex input.
   * @description
   * `null` or `undefined` inputs returns a `[]` result, Uint8Array values returns the value, hex strings returns a Uint8Array representation.
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aToU8a } from '@polkadot/util';
   *
   * u8aToU8a(new Uint8Array([0x12, 0x34]); // => Uint8Array([0x12, 0x34])
   * u8aToU8a(0x1234); // => Uint8Array([0x12, 0x34])
   * ```
   */

  function u8aToU8a(value) {
    return isU8a(value) ? value : isHex(value) ? hexToU8a(value) : isBuffer(value) || Array.isArray(value) ? new Uint8Array(value) : stringToU8a(value);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name u8aConcat
   * @summary Creates a concatenated Uint8Array from the inputs.
   * @description
   * Concatenates the input arrays into a single `UInt8Array`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { { u8aConcat } from '@polkadot/util';
   *
   * u8aConcat(
   *   new Uint8Array([1, 2, 3]),
   *   new Uint8Array([4, 5, 6])
   * ); // [1, 2, 3, 4, 5, 6]
   * ```
   */

  function u8aConcat(...list) {
    const u8as = new Array(list.length);
    let length = 0;

    for (let i = 0; i < list.length; i++) {
      u8as[i] = u8aToU8a(list[i]);
      length += u8as[i].length;
    }

    return u8aConcatStrict(u8as, length);
  }
  /**
   * @name u8aConcatStrict
   * @description A strict version of [[u8aConcat]], accepting only Uint8Array inputs
   */

  function u8aConcatStrict(u8as, length = 0) {
    let offset = 0;

    if (!length) {
      for (let i = 0; i < u8as.length; i++) {
        length += u8as[i].length;
      }
    }

    const result = new Uint8Array(length);

    for (let i = 0; i < u8as.length; i++) {
      result.set(u8as[i], offset);
      offset += u8as[i].length;
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name u8aEmpty
   * @summary Tests for a `Uint8Array` for emptyness
   * @description
   * Checks to see if the input `Uint8Array` has zero length or contains all 0 values.
   */
  function u8aEmpty(value) {
    // on smaller values < 64 bytes, the byte-by-byte compare is faster than
    // allocating yet another object for DataView (on large buffers the DataView
    // is much faster)
    for (let i = 0; i < value.length; i++) {
      if (value[i]) {
        return false;
      }
    }

    return true;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name u8aEq
   * @summary Compares two Uint8Arrays for equality.
   * @description
   * For `UInt8Array` (or hex string) input values true if there is a match.
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aEq } from '@polkadot/util';
   *
   * u8aEq(new Uint8Array([0x68, 0x65]), new Uint8Array([0x68, 0x65])); // true
   * ```
   */

  function u8aEq(a, b) {
    const u8aa = u8aToU8a(a);
    const u8ab = u8aToU8a(b);

    if (u8aa.length === u8ab.length) {
      const dvA = new DataView(u8aa.buffer, u8aa.byteOffset);
      const dvB = new DataView(u8ab.buffer, u8ab.byteOffset);
      const mod = u8aa.length % 4;
      const length = u8aa.length - mod;

      for (let i = 0; i < length; i += 4) {
        if (dvA.getUint32(i) !== dvB.getUint32(i)) {
          return false;
        }
      }

      for (let i = length; i < u8aa.length; i++) {
        if (u8aa[i] !== u8ab[i]) {
          return false;
        }
      }

      return true;
    }

    return false;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name u8aFixLength
   * @summary Shifts a Uint8Array to a specific bitLength
   * @description
   * Returns a uint8Array with the specified number of bits contained in the return value. (If bitLength is -1, length checking is not done). Values with more bits are trimmed to the specified length.
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aFixLength } from '@polkadot/util';
   *
   * u8aFixLength('0x12') // => 0x12
   * u8aFixLength('0x12', 16) // => 0x0012
   * u8aFixLength('0x1234', 8) // => 0x12
   * ```
   */
  function u8aFixLength(value, bitLength = -1, atStart = false) {
    const byteLength = Math.ceil(bitLength / 8);

    if (bitLength === -1 || value.length === byteLength) {
      return value;
    } else if (value.length > byteLength) {
      return value.subarray(0, byteLength);
    }

    const result = new Uint8Array(byteLength);
    result.set(value, atStart ? 0 : byteLength - value.length);
    return result;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name u8aToFloat
   * @description Converts a Uint8Array value into the float (either 32 or 64-bit)
   * representation.
   */
  function u8aToFloat(value, {
    bitLength = 32,
    isLe = true
  } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
      throw new Error('Invalid bitLength provided, expected 32 or 64');
    } else if (value.length < bitLength / 8) {
      throw new Error(`Invalid input buffer provided, expected at least ${bitLength / 8} bytes, found ${value.length}`);
    }

    const dv = new DataView(value.buffer, value.byteOffset);
    return bitLength === 32 ? dv.getFloat32(0, isLe) : dv.getFloat64(0, isLe);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isBoolean
   * @summary Tests for a boolean value.
   * @description
   * Checks to see if the input value is a JavaScript boolean.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isBoolean } from '@polkadot/util';
   *
   * isBoolean(false); // => true
   * ```
   */
  function isBoolean$1(value) {
    return typeof value === 'boolean';
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name u8aToBn
   * @summary Creates a BN from a Uint8Array object.
   * @description
   * `UInt8Array` input values return the actual BN. `null` or `undefined` values returns an `0x0` value.
   * @param value The value to convert
   * @param options Options to pass while converting
   * @param options.isLe Convert using Little Endian (default)
   * @param options.isNegative Convert using two's complement
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aToBn } from '@polkadot/util';
   *
   * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
   * ```
   */

  /** @deprecated Use u8aToBn (value?: string | null, options?: ToBnOptions) */
  function u8aToBn(value, options = {}) {
    // NOTE: This is the same process as followed in the hexToBn conversion
    // For Uint8Array, default to LE
    const {
      isLe = true,
      isNegative = false
    } = isBoolean$1(options) ? {
      isLe: options
    } : options;
    const count = value.length; // shortcut for <= u48 values - in this case the manual conversion
    // here seems to be more efficient than passing the full array

    if (count <= 6) {
      if (isNegative) {
        let result = 0;

        if (isLe) {
          // Most common case i{8, 16, 32} default LE SCALE-encoded
          // For <= 32, we also optimize the xor to a single op
          // (see the comments around unrolling in the next section)
          switch (count) {
            case 0:
              return new BN(0);

            case 1:
              result = value[0] ^ 0x000000ff;
              break;

            case 2:
              result = value[0] + (value[1] << 8) ^ 0x0000ffff;
              break;

            case 3:
              result = value[0] + (value[1] << 8) + (value[2] << 16) ^ 0x00ffffff;
              break;

            case 4:
              // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
              // 32-bit, in the case where the top-most bit is set this yields a negative value
              result = value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000 ^ 0xffffffff;
              break;

            case 5:
              result = (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000 ^ 0xffffffff) + (value[4] ^ 0xff) * 0x100000000;
              break;

            default:
              // 6
              result = (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000 ^ 0xffffffff) + (value[4] + (value[5] << 8) ^ 0x0000ffff) * 0x100000000;
              break;
          }
        } else {
          for (let i = 0; i < count; i++) {
            result = result * 0x100 + (value[i] ^ 0xff);
          }
        }

        return count ? new BN(result * -1 - 1) : new BN(0);
      } else if (isLe) {
        // Most common case - u{8, 16, 32} default LE SCALE-encoded
        //
        // There are some slight benefits in unrolling this specific loop,
        // however it comes with diminishing returns since here the actual
        // `new BN` does seem to take up the bulk of the time
        switch (count) {
          case 0:
            return new BN(0);

          case 1:
            return new BN(value[0]);

          case 2:
            return new BN(value[0] + (value[1] << 8));

          case 3:
            return new BN(value[0] + (value[1] << 8) + (value[2] << 16));

          case 4:
            // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
            // 32-bit, in the case where the top-most bit is set this yields a negative value
            return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000);

          case 5:
            return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 0x1000000);

          default:
            // 6
            return new BN(value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 0x1000000);
        }
      } else {
        let result = 0;

        for (let i = 0; i < count; i++) {
          result = result * 0x100 + value[i];
        }

        return new BN(result);
      }
    }

    return isNegative ? new BN(value, isLe ? 'le' : 'be').fromTwos(value.length * 8) : new BN(value, isLe ? 'le' : 'be');
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const U8 = new Array(256);
  const U16 = new Array(256 * 256);

  for (let n = 0; n < 256; n++) {
    U8[n] = n.toString(16).padStart(2, '0');
  }

  for (let i = 0; i < 256; i++) {
    const s = i << 8;

    for (let j = 0; j < 256; j++) {
      U16[s | j] = U8[i] + U8[j];
    }
  }
  /** @internal */


  function hex$1(value) {
    const mod = value.length % 2;
    const length = value.length - mod;
    const dv = new DataView(value.buffer, value.byteOffset);
    let result = '';

    for (let i = 0; i < length; i += 2) {
      // we only use getUint16 here instead of getUint32 - at least in our
      // tests this is faster to execute (both long & short strings tested)
      result += U16[dv.getUint16(i)];
    }

    if (mod) {
      result += U8[dv.getUint8(length)];
    }

    return result;
  }
  /**
   * @name u8aToHex
   * @summary Creates a hex string from a Uint8Array object.
   * @description
   * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aToHex } from '@polkadot/util';
   *
   * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f
   * ```
   */


  function u8aToHex(value, bitLength = -1, isPrefixed = true) {
    const length = Math.ceil(bitLength / 8);
    return `${isPrefixed ? '0x' : ''}${!value || !value.length ? '' : bitLength > 0 && value.length > length ? `${hex$1(value.subarray(0, length / 2))}…${hex$1(value.subarray(value.length - length / 2))}` : hex$1(value)}`;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name u8aToNumber
   * @summary Creates a number from a Uint8Array object.
   */
  function u8aToNumber(value, {
    isNegative = false
  } = {}) {
    const count = value.length;

    if (isNegative) {
      let result = 0;

      switch (count) {
        case 0:
          return 0;

        case 1:
          result = value[0] ^ 0x000000ff;
          break;

        case 2:
          result = value[0] + (value[1] << 8) ^ 0x0000ffff;
          break;

        case 3:
          result = value[0] + (value[1] << 8) + (value[2] << 16) ^ 0x00ffffff;
          break;

        case 4:
          // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
          // 32-bit, in the case where the top-most bit is set this yields a negative value
          result = value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000 ^ 0xffffffff;
          break;

        case 5:
          result = (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000 ^ 0xffffffff) + (value[4] ^ 0xff) * 0x100000000;
          break;

        case 6:
          result = (value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000 ^ 0xffffffff) + (value[4] + (value[5] << 8) ^ 0x0000ffff) * 0x100000000;
          break;

        default:
          throw new Error('Value more than 48-bits cannot be reliably converted');
      }

      return result * -1 - 1;
    }

    switch (count) {
      case 0:
        return 0;

      case 1:
        return value[0];

      case 2:
        return value[0] + (value[1] << 8);

      case 3:
        return value[0] + (value[1] << 8) + (value[2] << 16);

      case 4:
        // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
        // 32-bit, in the case where the top-most bit is set this yields a negative value
        return value[0] + (value[1] << 8) + (value[2] << 16) + value[3] * 0x1000000;

      case 5:
        return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8)) * 0x1000000;

      case 6:
        return value[0] + (value[1] << 8) + (value[2] << 16) + (value[3] + (value[4] << 8) + (value[5] << 16)) * 0x1000000;

      default:
        throw new Error('Value more than 48-bits cannot be reliably converted');
    }
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const decoder = new TextDecoder$1('utf-8');
  /**
   * @name u8aToString
   * @summary Creates a utf-8 string from a Uint8Array object.
   * @description
   * `UInt8Array` input values return the actual decoded utf-8 string. `null` or `undefined` values returns an empty string.
   * @example
   * <BR>
   *
   * ```javascript
   * import { u8aToString } from '@polkadot/util';
   *
   * u8aToString(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f])); // hello
   * ```
   */

  function u8aToString(value) {
    return value ? decoder.decode(value) : '';
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /** @internal */

  const U8A_WRAP_ETHEREUM = u8aToU8a('\x19Ethereum Signed Message:\n');
  /** @internal */

  const U8A_WRAP_PREFIX = u8aToU8a('<Bytes>');
  /** @internal */

  const U8A_WRAP_POSTFIX = u8aToU8a('</Bytes>');
  const WRAP_LEN = U8A_WRAP_PREFIX.length + U8A_WRAP_POSTFIX.length;
  /** @internal */

  function u8aIsWrapped(u8a, withEthereum) {
    return u8a.length >= WRAP_LEN && u8aEq(u8a.subarray(0, U8A_WRAP_PREFIX.length), U8A_WRAP_PREFIX) && u8aEq(u8a.slice(-U8A_WRAP_POSTFIX.length), U8A_WRAP_POSTFIX) || withEthereum && u8a.length >= U8A_WRAP_ETHEREUM.length && u8aEq(u8a.subarray(0, U8A_WRAP_ETHEREUM.length), U8A_WRAP_ETHEREUM);
  }
  /**
   * @name u8aUnwrapBytes
   * @description Removes all <Bytes>...</Bytes> wrappers from the supplied value
   */

  function u8aUnwrapBytes(bytes) {
    const u8a = u8aToU8a(bytes); // we don't want to unwrap Ethereum-style wraps

    return u8aIsWrapped(u8a, false) ? u8a.subarray(U8A_WRAP_PREFIX.length, u8a.length - U8A_WRAP_POSTFIX.length) : u8a;
  }
  /**
   * @name u8aWrapBytes
   * @description Adds a <Bytes>...</Bytes> wrapper to the supplied value (if not already existing)
   */

  function u8aWrapBytes(bytes) {
    const u8a = u8aToU8a(bytes); // if Ethereum-wrapping, we don't add our wrapping bytes

    return u8aIsWrapped(u8a, true) ? u8a : u8aConcatStrict([U8A_WRAP_PREFIX, u8a, U8A_WRAP_POSTFIX]);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const DIV = BigInt$1(256);
  const NEG_MASK = BigInt$1(0xff);

  function toU8a$1(value, {
    isLe,
    isNegative
  }) {
    const arr = [];

    if (isNegative) {
      value = (value + _1n$2) * -_1n$2;
    }

    while (value !== _0n$2) {
      const mod = value % DIV;
      const val = Number(isNegative ? mod ^ NEG_MASK : mod);

      if (isLe) {
        arr.push(val);
      } else {
        arr.unshift(val);
      }

      value = (value - mod) / DIV;
    }

    return Uint8Array.from(arr);
  }
  /**
   * @name nToU8a
   * @summary Creates a Uint8Array object from a bigint.
   */


  function nToU8a(value, options) {
    const opts = objectSpread({
      bitLength: -1,
      isLe: true,
      isNegative: false
    }, options);
    const valueBi = nToBigInt(value);

    if (valueBi === _0n$2) {
      return opts.bitLength === -1 ? new Uint8Array() : new Uint8Array(Math.ceil((opts.bitLength || 0) / 8));
    }

    const u8a = toU8a$1(valueBi, opts);

    if (opts.bitLength === -1) {
      return u8a;
    }

    const byteLength = Math.ceil((opts.bitLength || 0) / 8);
    const output = new Uint8Array(byteLength);

    if (opts.isNegative) {
      output.fill(0xff);
    }

    output.set(u8a, opts.isLe ? 0 : byteLength - u8a.length);
    return output;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name BN_ZERO
   * @summary BN constant for 0.
   */

  const BN_ZERO = new BN(0);
  /**
   * @name BN_ONE
   * @summary BN constant for 1.
   */

  const BN_ONE = new BN(1);
  /**
   * @name BN_TWO
   * @summary BN constant for 2.
   */

  const BN_TWO = new BN(2);
  /**
   * @name BN_THREE
   * @summary BN constant for 3.
   */

  new BN(3);
  /**
   * @name BN_FOUR
   * @summary BN constant for 4.
   */

  new BN(4);
  /**
   * @name BN_FIVE
   * @summary BN constant for 5.
   */

  new BN(5);
  /**
   * @name BN_SIX
   * @summary BN constant for 6.
   */

  new BN(6);
  /**
   * @name BN_SEVEN
   * @summary BN constant for 7.
   */

  new BN(7);
  /**
   * @name BN_EIGHT
   * @summary BN constant for 8.
   */

  new BN(8);
  /**
   * @name BN_NINE
   * @summary BN constant for 9.
   */

  new BN(9);
  /**
   * @name BN_TEN
   * @summary BN constant for 10.
   */

  new BN(10);
  /**
   * @name BN_HUNDRED
   * @summary BN constant for 100.
   */

  const BN_HUNDRED = new BN(100);
  /**
   * @name BN_THOUSAND
   * @summary BN constant for 1,000.
   */

  new BN(1000);
  /**
   * @name BN_MILLION
   * @summary BN constant for 1,000,000.
   */

  const BN_MILLION = new BN(1000000);
  /**
   * @name BN_BILLION
   * @summary BN constant for 1,000,000,000.
   */

  const BN_BILLION = new BN(1000000000);
  /**
   * @name BN_QUINTILL
   * @summary BN constant for 1,000,000,000,000,000,000.
   */

  const BN_QUINTILL = BN_BILLION.mul(BN_BILLION);
  /**
   * @name BN_MAX_INTEGER
   * @summary BN constant for MAX_SAFE_INTEGER
   */

  const BN_MAX_INTEGER = new BN(Number.MAX_SAFE_INTEGER);

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name hexStripPrefix
   * @summary Strips any leading `0x` prefix.
   * @description
   * Tests for the existence of a `0x` prefix, and returns the value without the prefix. Un-prefixed values are returned as-is.
   * @example
   * <BR>
   *
   * ```javascript
   * import { hexStripPrefix } from '@polkadot/util';
   *
   * console.log('stripped', hexStripPrefix('0x1234')); // => 1234
   * ```
   */

  function hexStripPrefix(value) {
    if (!value || value === '0x') {
      return '';
    } else if (REGEX_HEX_PREFIXED.test(value)) {
      return value.substring(2);
    } else if (REGEX_HEX_NOPREFIX.test(value)) {
      return value;
    }

    throw new Error(`Expected hex value to convert, found '${value}'`);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name hexToBn
   * @summary Creates a BN.js object from a hex string.
   * @description
   * `null` inputs returns a `BN(0)` result. Hex input values return the actual value converted to a BN. Anything that is not a hex string (including the `0x` prefix) throws an error.
   * @param _value The value to convert
   * @param _options Options to pass while converting
   * @param _options.isLe Convert using Little Endian
   * @param _options.isNegative Convert using two's complement
   * @example
   * <BR>
   *
   * ```javascript
   * import { hexToBn } from '@polkadot/util';
   *
   * hexToBn('0x123480001f'); // => BN(0x123480001f)
   * ```
   */

  /** @deprecated Use hexToBn (value?: string | null, options?: ToBnOptions) */
  function hexToBn(value, options = {}) {
    if (!value || value === '0x') {
      return new BN(0);
    } // For hex, default to BE


    const {
      isLe = false,
      isNegative = false
    } = isBoolean$1(options) ? {
      isLe: options
    } : options;
    const stripped = hexStripPrefix(value);
    const bn = new BN(stripped, 16, isLe ? 'le' : 'be'); // fromTwos takes as parameter the number of bits, which is the hex length
    // multiplied by 4 (2 bytes being 8 bits)

    return isNegative ? bn.fromTwos(stripped.length * 4) : bn;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors

  /**
   * @name bnMax
   * @summary Finds and returns the highest value in an array of BNs.
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { bnMax } from '@polkadot/util';
   *
   * bnMax([new BN(1), new BN(3), new BN(2)]).toString(); // => '3'
   * ```
   */
  const bnMax = createCmp((a, b) => a.gt(b));
  /**
   * @name bnMin
   * @summary Finds and returns the smallest value in an array of BNs.
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { bnMin } from '@polkadot/util';
   *
   * bnMin([new BN(1), new BN(3), new BN(2)]).toString(); // => '1'
   * ```
   */

  const bnMin = createCmp((a, b) => a.lt(b));

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isBigInt
   * @summary Tests for a `BigInt` object instance.
   * @description
   * Checks to see if the input object is an instance of `BigInt`
   * @example
   * <BR>
   *
   * ```javascript
   * import { isBigInt } from '@polkadot/util';
   *
   * console.log('isBigInt', isBigInt(123_456n)); // => true
   * ```
   */
  function isBigInt(value) {
    return typeof value === 'bigint';
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name bnToBn
   * @summary Creates a BN value from a BN, bigint, string (base 10 or hex) or number input.
   * @description
   * `null` inputs returns a `0x0` result, BN values returns the value, numbers returns a BN representation.
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { bnToBn } from '@polkadot/util';
   *
   * bnToBn(0x1234); // => BN(0x1234)
   * bnToBn(new BN(0x1234)); // => BN(0x1234)
   * ```
   */

  function bnToBn(value) {
    return value ? BN.isBN(value) ? value : isHex(value) ? hexToBn(value.toString()) : isBigInt(value) ? new BN(value.toString()) : isToBn(value) ? value.toBn() : isToBigInt(value) ? new BN(value.toBigInt().toString()) : new BN(value) : new BN(0);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /** @internal */

  const SQRT_MAX_SAFE_INTEGER = new BN(94906265);
  /**
   * @name bnSqrt
   * @summary Calculates the integer square root of a BN
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { bnSqrt } from '@polkadot/util';
   *
   * bnSqrt(new BN(16)).toString(); // => '4'
   * ```
   */

  function bnSqrt(value) {
    const n = bnToBn(value);

    if (n.isNeg()) {
      throw new Error('square root of negative numbers is not supported');
    } // https://stackoverflow.com/questions/53683995/javascript-big-integer-square-root/
    // shortcut <= 2^53 - 1 to use the JS utils


    if (n.lte(BN_MAX_INTEGER)) {
      // ~~ More performant version of Math.floor
      return new BN(~~Math.sqrt(n.toNumber()));
    } // Use sqrt(MAX_SAFE_INTEGER) as starting point. since we already know the
    // output will be larger than this, we expect this to be a safe start


    let x0 = SQRT_MAX_SAFE_INTEGER.clone();

    while (true) {
      const x1 = n.div(x0).iadd(x0).ishrn(1);

      if (x0.eq(x1) || x0.eq(x1.sub(BN_ONE))) {
        return x0;
      }

      x0 = x1;
    }
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isNumber
   * @summary Tests for a JavaScript number.
   * @description
   * Checks to see if the input value is a valid number.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isNumber } from '@polkadot/util';
   *
   * console.log('isNumber', isNumber(1234)); // => true
   * ```
   */
  function isNumber$1(value) {
    return typeof value === 'number';
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const DEFAULT_OPTS$1 = {
    bitLength: -1,
    isLe: true,
    isNegative: false
  };
  /**
   * @name bnToU8a
   * @summary Creates a Uint8Array object from a BN.
   * @description
   * `null`/`undefined`/`NaN` inputs returns an empty `Uint8Array` result. `BN` input values return the actual bytes value converted to a `Uint8Array`. Optionally convert using little-endian format if `isLE` is set.
   * @example
   * <BR>
   *
   * ```javascript
   * import { bnToU8a } from '@polkadot/util';
   *
   * bnToU8a(new BN(0x1234)); // => [0x12, 0x34]
   * ```
   */

  /** @deprecated Use bnToU8a(value?: ExtToBn | BN | bigint | number | null, options?: NumberOptions) */
  function bnToU8a(value, arg1 = DEFAULT_OPTS$1, arg2 = true) {
    const {
      bitLength = -1,
      isLe = true,
      isNegative = false
    } = isNumber$1(arg1) ? {
      bitLength: arg1,
      isLe: arg2
    } : arg1;
    const valueBn = bnToBn(value);
    const byteLength = bitLength === -1 ? Math.ceil(valueBn.bitLength() / 8) : Math.ceil((bitLength || 0) / 8);

    if (!value) {
      return bitLength === -1 ? new Uint8Array() : new Uint8Array(byteLength);
    }

    const output = new Uint8Array(byteLength);
    const bn = isNegative ? valueBn.toTwos(byteLength * 8) : valueBn;
    output.set(bn.toArray(isLe ? 'le' : 'be', byteLength), 0);
    return output;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const ZERO_STR = '0x00';
  const DEFAULT_OPTS = {
    bitLength: -1,
    isLe: false,
    isNegative: false
  };
  /**
   * @name bnToHex
   * @summary Creates a hex value from a BN.js bignumber object.
   * @description
   * `null` inputs returns a `0x` result, BN values return the actual value as a `0x` prefixed hex value. Anything that is not a BN object throws an error. With `bitLength` set, it fixes the number to the specified length.
   * @example
   * <BR>
   *
   * ```javascript
   * import BN from 'bn.js';
   * import { bnToHex } from '@polkadot/util';
   *
   * bnToHex(new BN(0x123456)); // => '0x123456'
   * ```
   */

  /** @deprecated Use bnToHex (value?: ExtToBn | BN | bigint | number | null, options?: NumberOptions) */
  function bnToHex(value, arg1 = DEFAULT_OPTS, arg2 = false) {
    return !value ? ZERO_STR : u8aToHex(bnToU8a(value, objectSpread( // We spread here, the default for hex values is BE (JSONRPC via substrate)
    {
      isLe: false,
      isNegative: false
    }, isNumber$1(arg1) ? {
      bitLength: arg1,
      isLe: arg2
    } : arg1)));
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const MAX_U8 = BN_TWO.pow(new BN(8 - 2)).isub(BN_ONE);
  const MAX_U16 = BN_TWO.pow(new BN(16 - 2)).isub(BN_ONE);
  const MAX_U32 = BN_TWO.pow(new BN(32 - 2)).isub(BN_ONE);
  const BL_16 = {
    bitLength: 16
  };
  const BL_32 = {
    bitLength: 32
  };
  /**
   * @name compactToU8a
   * @description Encodes a number into a compact representation
   * @example
   * <BR>
   *
   * ```javascript
   * import { compactToU8a } from '@polkadot/util';
   *
   * console.log(compactToU8a(511, 32)); // Uint8Array([0b11111101, 0b00000111])
   * ```
   */

  function compactToU8a(value) {
    const bn = bnToBn(value);

    if (bn.lte(MAX_U8)) {
      return new Uint8Array([bn.toNumber() << 2]);
    } else if (bn.lte(MAX_U16)) {
      return bnToU8a(bn.shln(2).iadd(BN_ONE), BL_16);
    } else if (bn.lte(MAX_U32)) {
      return bnToU8a(bn.shln(2).iadd(BN_TWO), BL_32);
    }

    const u8a = bnToU8a(bn);
    let length = u8a.length; // adjust to the minimum number of bytes

    while (u8a[length - 1] === 0) {
      length--;
    }

    if (length < 4) {
      throw new Error('Invalid length, previous checks match anything less than 2^30');
    }

    return u8aConcatStrict([// subtract 4 as minimum (also catered for in decoding)
    new Uint8Array([(length - 4 << 2) + 0b11]), u8a.subarray(0, length)]);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name compactAddLength
   * @description Adds a length prefix to the input value
   * @example
   * <BR>
   *
   * ```javascript
   * import { compactAddLength } from '@polkadot/util';
   *
   * console.log(compactAddLength(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))); // Uint8Array([4 << 2, 0xde, 0xad, 0xbe, 0xef])
   * ```
   */

  function compactAddLength(input) {
    return u8aConcatStrict([compactToU8a(input.length), input]);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name compactFromU8a
   * @description Retrives the offset and encoded length from a compact-prefixed value
   * @example
   * <BR>
   *
   * ```javascript
   * import { compactFromU8a } from '@polkadot/util';
   *
   * const [offset, length] = compactFromU8a(new Uint8Array([254, 255, 3, 0]));
   *
   * console.log('value offset=', offset, 'length=', length); // 4, 0xffff
   * ```
   */

  function compactFromU8a(input) {
    const u8a = u8aToU8a(input); // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
    // than doing an additional call to u8aToBn (as with variable length)

    switch (u8a[0] & 0b11) {
      case 0b00:
        return [1, new BN(u8a[0] >>> 2)];

      case 0b01:
        return [2, new BN(u8a[0] + (u8a[1] << 8) >>> 2)];

      case 0b10:
        // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
        // 32-bit, in the case where the top-most bit is set this yields a negative value
        return [4, new BN(u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 0x1000000 >>> 2)];
      // 0b11

      default:
        {
          // add 5 to shifted (4 for base length, 1 for this byte)
          const offset = (u8a[0] >>> 2) + 5; // we unroll the loop

          switch (offset) {
            // there still could be 4 bytes data, similar to 0b10 above (with offsets)
            case 5:
              // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
              // 32-bit, in the case where the top-most bit is set this yields a negative value
              return [5, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 0x1000000)];

            case 6:
              return [6, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 0x1000000)];
            // 6 bytes data is the maximum, 48 bits (56 would overflow)

            case 7:
              return [7, new BN(u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 0x1000000)];
            // for anything else, use the non-unrolled version

            default:
              return [offset, u8aToBn(u8a.subarray(1, offset))];
          }
        }
    }
  }
  /**
   * @name compactFromU8aLim
   * @description A limited version of [[compactFromU8a]], accepting only Uint8Array inputs for values <= 48 bits
   */

  function compactFromU8aLim(u8a) {
    // The u8a is manually converted here for 1, 2 & 4 lengths, it is 2x faster
    // than doing an additional call to u8aToBn (as with variable length)
    switch (u8a[0] & 0b11) {
      case 0b00:
        return [1, u8a[0] >>> 2];

      case 0b01:
        return [2, u8a[0] + (u8a[1] << 8) >>> 2];

      case 0b10:
        // for the 3rd byte, we don't << 24 - since JS converts all bitwise operators to
        // 32-bit, in the case where the top-most bit is set this yields a negative value
        return [4, u8a[0] + (u8a[1] << 8) + (u8a[2] << 16) + u8a[3] * 0x1000000 >>> 2];
      // 0b11

      default:
        {
          // add 5 to shifted (4 for base length, 1 for this byte)
          // we unroll the loop
          switch ((u8a[0] >>> 2) + 5) {
            // there still could be 4 bytes data, similar to 0b10 above (with offsets)
            case 5:
              return [5, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + u8a[4] * 0x1000000];

            case 6:
              return [6, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8)) * 0x1000000];
            // 6 bytes data is the maximum, 48 bits (56 would overflow)

            case 7:
              return [7, u8a[1] + (u8a[2] << 8) + (u8a[3] << 16) + (u8a[4] + (u8a[5] << 8) + (u8a[6] << 16)) * 0x1000000];
            // for anything else, we are above the actual MAX_SAFE_INTEGER - bail out

            default:
              throw new Error('Compact input is > Number.MAX_SAFE_INTEGER');
          }
        }
    }
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name compactStripLength
   * @description Removes the length prefix, returning both the total length (including the value + compact encoding) and the decoded value with the correct length
   * @example
   * <BR>
   *
   * ```javascript
   * import { compactStripLength } from '@polkadot/util';
   *
   * console.log(compactStripLength(new Uint8Array([2 << 2, 0xde, 0xad]))); // [2, Uint8Array[0xde, 0xad]]
   * ```
   */

  function compactStripLength(input) {
    const [offset, length] = compactFromU8a(input);
    const total = offset + length.toNumber();
    return [total, input.subarray(offset, total)];
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // eslint-disable-next-line @typescript-eslint/ban-types

  /**
   * @name floatToU8a
   * @description Converts a float into a U8a representation (While we don't use BE in SCALE
   * we still allow for either representation, although, as elsewhere, isLe is default)
   */
  function floatToU8a(value = 0.0, {
    bitLength = 32,
    isLe = true
  } = {}) {
    if (bitLength !== 32 && bitLength !== 64) {
      throw new Error('Invalid bitLength provided, expected 32 or 64');
    }

    const result = new Uint8Array(bitLength / 8);
    const dv = new DataView(result.buffer, result.byteOffset);

    if (bitLength === 32) {
      dv.setFloat32(0, Number(value), isLe);
    } else {
      dv.setFloat64(0, Number(value), isLe);
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // eslint-disable-next-line prefer-regex-literals
  const NUMBER_REGEX = new RegExp('(\\d+?)(?=(\\d{3})+(?!\\d)|$)', 'g');
  /**
   * @name formatDecimal
   * @description Formats a number into string format with thousand seperators
   */

  function formatDecimal(value) {
    // We can do this by adjusting the regx, however for the sake of clarity
    // we rather strip and re-add the negative sign in the output
    const isNegative = value[0].startsWith('-');
    const matched = isNegative ? value.substring(1).match(NUMBER_REGEX) : value.match(NUMBER_REGEX);
    return matched ? `${isNegative ? '-' : ''}${matched.join(',')}` : value;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /** @internal */
  const SI_MID = 8;
  /** @internal */

  const SI = [{
    power: -24,
    text: 'yocto',
    value: 'y'
  }, {
    power: -21,
    text: 'zepto',
    value: 'z'
  }, {
    power: -18,
    text: 'atto',
    value: 'a'
  }, {
    power: -15,
    text: 'femto',
    value: 'f'
  }, {
    power: -12,
    text: 'pico',
    value: 'p'
  }, {
    power: -9,
    text: 'nano',
    value: 'n'
  }, {
    power: -6,
    text: 'micro',
    value: 'µ'
  }, {
    power: -3,
    text: 'milli',
    value: 'm'
  }, {
    power: 0,
    text: 'Unit',
    value: '-'
  }, // position 8
  {
    power: 3,
    text: 'Kilo',
    value: 'k'
  }, {
    power: 6,
    text: 'Mill',
    value: 'M'
  }, // Mega, M
  {
    power: 9,
    text: 'Bill',
    value: 'B'
  }, // Giga, G
  {
    power: 12,
    text: 'Tril',
    value: 'T'
  }, // Tera, T
  {
    power: 15,
    text: 'Peta',
    value: 'P'
  }, {
    power: 18,
    text: 'Exa',
    value: 'E'
  }, {
    power: 21,
    text: 'Zeta',
    value: 'Z'
  }, {
    power: 24,
    text: 'Yotta',
    value: 'Y'
  }]; // Given a SI type (e.g. k, m, Y) find the SI definition

  /** @internal */

  function findSi(type) {
    // use a loop here, better RN support (which doesn't have [].find)
    for (let i = 0; i < SI.length; i++) {
      if (SI[i].value === type) {
        return SI[i];
      }
    }

    return SI[SI_MID];
  }
  /** @internal */

  function calcSi(text, decimals, forceUnit) {
    if (forceUnit) {
      return findSi(forceUnit);
    }

    const siDefIndex = SI_MID - 1 + Math.ceil((text.length - decimals) / 3);
    return SI[siDefIndex] || SI[siDefIndex < 0 ? 0 : SI.length - 1];
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const DEFAULT_DECIMALS = 0;
  const DEFAULT_UNIT = SI[SI_MID].text;
  let defaultDecimals = DEFAULT_DECIMALS;
  let defaultUnit = DEFAULT_UNIT;

  function getUnits(si, withSi, withSiFull, withUnit) {
    const unit = isBoolean$1(withUnit) ? SI[SI_MID].text : withUnit;
    return withSi || withSiFull ? si.value === '-' ? withUnit ? ` ${unit}` : '' : ` ${withSiFull ? `${si.text}${withUnit ? ' ' : ''}` : si.value}${withUnit ? unit : ''}` : '';
  }

  function getPrePost(text, decimals, forceUnit) {
    // NOTE We start at midpoint (8) minus 1 - this means that values display as
    // 123.456 instead of 0.123k (so always 6 relevant). Additionally we use ceil
    // so there are at most 3 decimal before the decimal separator
    const si = calcSi(text, decimals, forceUnit);
    const mid = text.length - (decimals + si.power);
    const prefix = text.substring(0, mid);
    const padding = mid < 0 ? 0 - mid : 0;
    const postfix = `${`${new Array(padding + 1).join('0')}${text}`.substring(mid < 0 ? 0 : mid)}0000`.substring(0, 4);
    return [si, prefix || '0', postfix];
  } // Formats a string/number with <prefix>.<postfix><type> notation


  function _formatBalance(input, options = true, optDecimals = defaultDecimals) {
    let text = bnToBn(input).toString();

    if (text.length === 0 || text === '0') {
      return '0';
    } // extract options - the boolean case is for backwards-compat


    const {
      decimals = optDecimals,
      forceUnit = undefined,
      withSi = true,
      withSiFull = false,
      withUnit = true
    } = isBoolean$1(options) ? {
      withSi: options
    } : options; // strip the negative sign so we can work with clean groupings, re-add this in the
    // end when we return the result (from here on we work with positive numbers)

    let sign = '';

    if (text[0].startsWith('-')) {
      sign = '-';
      text = text.substring(1);
    }

    const [si, prefix, postfix] = getPrePost(text, decimals, forceUnit);
    const units = getUnits(si, withSi, withSiFull, withUnit);
    return `${sign}${formatDecimal(prefix)}.${postfix}${units}`;
  }

  const formatBalance = _formatBalance; // eslint-disable-next-line @typescript-eslint/unbound-method

  formatBalance.calcSi = (text, decimals = defaultDecimals) => calcSi(text, decimals); // eslint-disable-next-line @typescript-eslint/unbound-method


  formatBalance.findSi = findSi; // eslint-disable-next-line @typescript-eslint/unbound-method

  formatBalance.getDefaults = () => {
    return {
      decimals: defaultDecimals,
      unit: defaultUnit
    };
  }; // get allowable options to display in a dropdown
  // eslint-disable-next-line @typescript-eslint/unbound-method


  formatBalance.getOptions = (decimals = defaultDecimals) => {
    return SI.filter(({
      power
    }) => power < 0 ? decimals + power >= 0 : true);
  }; // Sets the default decimals to use for formatting (ui-wide)
  // eslint-disable-next-line @typescript-eslint/unbound-method


  formatBalance.setDefaults = ({
    decimals,
    unit
  }) => {
    defaultDecimals = decimals === undefined ? defaultDecimals : Array.isArray(decimals) ? decimals[0] : decimals;
    defaultUnit = unit === undefined ? defaultUnit : Array.isArray(unit) ? unit[0] : unit;
    SI[SI_MID].text = defaultUnit;
  };

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /** @internal */
  function zeroPad(value) {
    return value.toString().padStart(2, '0');
  }
  /**
   * @name formatDate
   * @description Formats a date in CCYY-MM-DD HH:MM:SS format
   */


  function formatDate(date) {
    const year = date.getFullYear().toString();
    const month = zeroPad(date.getMonth() + 1);
    const day = zeroPad(date.getDate());
    const hour = zeroPad(date.getHours());
    const minute = zeroPad(date.getMinutes());
    const second = zeroPad(date.getSeconds());
    return `${year}-${month}-${day} ${hour}:${minute}:${second}`;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name formatNumber
   * @description Formats a number into string format with thousand seperators
   */

  function formatNumber(value) {
    return formatDecimal(bnToBn(value).toString());
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isString
   * @summary Tests for a string.
   * @description
   * Checks to see if the input value is a JavaScript string.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isString } from '@polkadot/util';
   *
   * console.log('isString', isString('test')); // => true
   * ```
   */
  function isString$1(value) {
    return typeof value === 'string' || value instanceof String;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /** @internal */

  function isAsciiStr(str) {
    const count = str.length;

    for (let i = 0; i < count; i++) {
      const b = str.charCodeAt(i); // check is inlined here, it is faster than making a call

      if (!(b < 127 && (b >= 32 || b === 10 || b === 9 || b === 13))) {
        return false;
      }
    }

    return true;
  }
  /** @internal */


  function isAsciiBytes(u8a) {
    const count = u8a.length;

    for (let i = 0; i < count; i++) {
      const b = u8a[i]; // check is inlined here, it is faster than making a call

      if (!(b < 127 && (b >= 32 || b === 10 || b === 9 || b === 13))) {
        return false;
      }
    }

    return true;
  }
  /**
   * @name isAscii
   * @summary Tests if the input is printable ASCII
   * @description
   * Checks to see if the input string or Uint8Array is printable ASCII, 32-127 + formatters
   */


  function isAscii(value) {
    return isString$1(value) ? isHex(value) ? isAsciiBytes(u8aToU8a(value)) : isAsciiStr(value) : value ? isAsciiBytes(value) : false;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isChildClass
   * @summary Tests if the child extends the parent Class
   * @description
   * Checks to see if the child Class extends the parent Class
   * @example
   * <BR>
   *
   * ```javascript
   * import { isChildClass } from '@polkadot/util';
   *
   * console.log('isChildClass', isChildClass(BN, BN); // => true
   * console.log('isChildClass', isChildClass(BN, Uint8Array); // => false
   * ```
   */
  function isChildClass(Parent, Child) {
    // https://stackoverflow.com/questions/30993434/check-if-a-constructor-inherits-another-in-es6/30993664
    return Child // eslint-disable-next-line no-prototype-builtins
    ? Parent === Child || Parent.isPrototypeOf(Child) : false;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  const checkCodec = isOnObject('toHex', 'toU8a');
  const checkRegistry = isOnObject('get');
  function isCodec$1(value) {
    return checkCodec(value) && checkRegistry(value.registry);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /** @internal */

  function replacer(_, v) {
    return isBigInt(v) ? v.toString() : v;
  }
  /**
   * @name stringify
   * @summary Performs a JSON.stringify, with BigInt handling
   * @description A wrapper for JSON.stringify that handles BigInt values transparently, converting them to string. No differences from the native JSON.stringify function otherwise.
   */


  function stringify(value, space) {
    return JSON.stringify(value, replacer, space);
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isNull
   * @summary Tests for a `null` values.
   * @description
   * Checks to see if the input value is `null`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isNull } from '@polkadot/util';
   *
   * console.log('isNull', isNull(null)); // => true
   * ```
   */
  function isNull$1(value) {
    return value === null;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name isUndefined
   * @summary Tests for a `undefined` values.
   * @description
   * Checks to see if the input value is `undefined`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { isUndefined } from '@polkadot/util';
   *
   * console.log('isUndefined', isUndefined(void(0))); // => true
   * ```
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function isUndefined$1(value) {
    return value === undefined;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name isUtf8
   * @summary Tests if the input is valid Utf8
   * @description
   * Checks to see if the input string or Uint8Array is valid Utf8
   */

  function isUtf8(value) {
    if (!value) {
      return isString$1(value);
    }

    const u8a = u8aToU8a(value);
    const len = u8a.length;
    let i = 0;

    while (i < len) {
      if (u8a[i] <= 0x7F)
        /* 00..7F */
        {
          i += 1;
        } else if (u8a[i] >= 0xC2 && u8a[i] <= 0xDF)
        /* C2..DF 80..BF */
        {
          if (i + 1 < len)
            /* Expect a 2nd byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte between C2 and DF, expecting a 2nd byte between 80 and BF";
                // *faulty_bytes = 2;
                return false;
              }
            } else {
            // *message = "After a first byte between C2 and DF, expecting a 2nd byte.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 2;
        } else if (u8a[i] === 0xE0)
        /* E0 A0..BF 80..BF */
        {
          if (i + 2 < len)
            /* Expect a 2nd and 3rd byte */
            {
              if (u8a[i + 1] < 0xA0 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte of E0, expecting a 2nd byte between A0 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of E0, expecting a 3nd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }
            } else {
            // *message = "After a first byte of E0, expecting two following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 3;
        } else if (u8a[i] >= 0xE1 && u8a[i] <= 0xEC)
        /* E1..EC 80..BF 80..BF */
        {
          if (i + 2 < len)
            /* Expect a 2nd and 3rd byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte between E1 and EC, expecting the 2nd byte between 80 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte between E1 and EC, expecting the 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }
            } else {
            // *message = "After a first byte between E1 and EC, expecting two following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 3;
        } else if (u8a[i] === 0xED)
        /* ED 80..9F 80..BF */
        {
          if (i + 2 < len)
            /* Expect a 2nd and 3rd byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x9F) {
                // *message = "After a first byte of ED, expecting 2nd byte between 80 and 9F.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of ED, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }
            } else {
            // *message = "After a first byte of ED, expecting two following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 3;
        } else if (u8a[i] >= 0xEE && u8a[i] <= 0xEF)
        /* EE..EF 80..BF 80..BF */
        {
          if (i + 2 < len)
            /* Expect a 2nd and 3rd byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte between EE and EF, expecting 2nd byte between 80 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte between EE and EF, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }
            } else {
            // *message = "After a first byte between EE and EF, two following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 3;
        } else if (u8a[i] === 0xF0)
        /* F0 90..BF 80..BF 80..BF */
        {
          if (i + 3 < len)
            /* Expect a 2nd, 3rd 3th byte */
            {
              if (u8a[i + 1] < 0x90 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte of F0, expecting 2nd byte between 90 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of F0, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }

              if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                // *message = "After a first byte of F0, expecting 4th byte between 80 and BF.";
                // *faulty_bytes = 4;
                return false;
              }
            } else {
            // *message = "After a first byte of F0, expecting three following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 4;
        } else if (u8a[i] >= 0xF1 && u8a[i] <= 0xF3)
        /* F1..F3 80..BF 80..BF 80..BF */
        {
          if (i + 3 < len)
            /* Expect a 2nd, 3rd 3th byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0xBF) {
                // *message = "After a first byte of F1, F2, or F3, expecting a 2nd byte between 80 and BF.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of F1, F2, or F3, expecting a 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }

              if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                // *message = "After a first byte of F1, F2, or F3, expecting a 4th byte between 80 and BF.";
                // *faulty_bytes = 4;
                return false;
              }
            } else {
            // *message = "After a first byte of F1, F2, or F3, expecting three following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 4;
        } else if (u8a[i] === 0xF4)
        /* F4 80..8F 80..BF 80..BF */
        {
          if (i + 3 < len)
            /* Expect a 2nd, 3rd 3th byte */
            {
              if (u8a[i + 1] < 0x80 || u8a[i + 1] > 0x8F) {
                // *message = "After a first byte of F4, expecting 2nd byte between 80 and 8F.";
                // *faulty_bytes = 2;
                return false;
              }

              if (u8a[i + 2] < 0x80 || u8a[i + 2] > 0xBF) {
                // *message = "After a first byte of F4, expecting 3rd byte between 80 and BF.";
                // *faulty_bytes = 3;
                return false;
              }

              if (u8a[i + 3] < 0x80 || u8a[i + 3] > 0xBF) {
                // *message = "After a first byte of F4, expecting 4th byte between 80 and BF.";
                // *faulty_bytes = 4;
                return false;
              }
            } else {
            // *message = "After a first byte of F4, expecting three following bytes.";
            // *faulty_bytes = 1;
            return false;
          }

          i += 4;
        } else {
        // *message = "Expecting bytes in the following ranges: 00..7F C2..F4.";
        // *faulty_bytes = 1;
        return false;
      }
    }

    return true;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name lazyMethod
   * @description
   * Creates a lazy, on-demand getter for the specific value. Upon get the value will be evaluated.
   */
  function lazyMethod(result, item, creator, getName) {
    const name = getName ? getName(item) : item.toString();
    let value;
    Object.defineProperty(result, name, {
      // This allows for re-configuration with the embedded defineProperty below
      // and ensures that on tested browsers and Node, it _will_ be redefined
      // and thus short-circuited for future access
      configurable: true,
      enumerable: true,
      // Use a function here, we don't want to capture the outer this, i.e.
      // don't use arrow functions in this context since we have a this inside
      get: function () {
        // This check should _always_ be false and unneeded, since we override
        // with a value below ... however we ensure we are quire vigilant against
        // all environment failures, so we are rather be safe than sorry
        if (value === undefined) {
          value = creator(item);

          try {
            // re-define the property as a value, next time around this
            // getter will only return the computed value
            Object.defineProperty(this, name, {
              value
            });
          } catch {// ignore any errors, since this _should_ not happen due to
            // the "configurable" property above. But if it ever does
            // from here-on we will be the cached value the next time
            // around (with a very slight dip in performance)
          }
        }

        return value;
      }
    });
  }
  /**
   * @name lazyMethods
   * @description
   * Creates lazy, on-demand getters for the specific values.
   */

  function lazyMethods(result, items, creator, getName) {
    for (let i = 0; i < items.length; i++) {
      lazyMethod(result, items[i], creator, getName);
    }

    return result;
  }

  const logTo = {
    debug: 'log',
    error: 'error',
    log: 'log',
    warn: 'warn'
  };

  function formatOther(value) {
    if (value && isObject$1(value) && value.constructor === Object) {
      const result = {};

      for (const k of Object.keys(value)) {
        result[k] = loggerFormat(value[k]);
      }

      return result;
    }

    return value;
  }

  function loggerFormat(value) {
    if (Array.isArray(value)) {
      return value.map(loggerFormat);
    } else if (isBn(value)) {
      return value.toString();
    } else if (isU8a(value) || isBuffer(value)) {
      return u8aToHex(u8aToU8a(value));
    }

    return formatOther(value);
  }

  function formatWithLength(maxLength) {
    return v => {
      if (maxLength <= 0) {
        return v;
      }

      const r = `${v}`;
      return r.length < maxLength ? v : `${r.substring(0, maxLength)} ...`;
    };
  }

  function apply(log, type, values, maxSize = -1) {
    if (values.length === 1 && isFunction$2(values[0])) {
      const fnResult = values[0]();
      return apply(log, type, Array.isArray(fnResult) ? fnResult : [fnResult], maxSize);
    }

    console[logTo[log]](formatDate(new Date()), type, ...values.map(loggerFormat).map(formatWithLength(maxSize)));
  }

  function noop$3() {// noop
  }

  function isDebugOn(e, type) {
    return !!e && (e === '*' || type === e || e.endsWith('*') && type.startsWith(e.slice(0, -1)));
  }

  function isDebugOff(e, type) {
    return !!e && e.startsWith('-') && (type === e.slice(1) || e.endsWith('*') && type.startsWith(e.slice(1, -1)));
  }

  function getDebugFlag(env, type) {
    let flag = false;

    for (const e of env) {
      if (isDebugOn(e, type)) {
        flag = true;
      } else if (isDebugOff(e, type)) {
        flag = false;
      }
    }

    return flag;
  }

  function parseEnv(type) {
    const env = (hasProcess ? browser$1$1 : {}).env || {};
    const maxSize = parseInt(env.DEBUG_MAX || '-1', 10);
    return [getDebugFlag((env.DEBUG || '').toLowerCase().split(','), type), isNaN(maxSize) ? -1 : maxSize];
  }
  /**
   * @name Logger
   * @summary Creates a consistent log interface for messages
   * @description
   * Returns a `Logger` that has `.log`, `.error`, `.warn` and `.debug` (controlled with environment `DEBUG=typeA,typeB`) methods. Logging is done with a consistent prefix (type of logger, date) followed by the actual message using the underlying console.
   * @example
   * <BR>
   *
   * ```javascript
   * import { logger } from '@polkadot/util';
   *
   * const l = logger('test');
   * ```
   */


  function logger(_type) {
    const type = `${_type.toUpperCase()}:`.padStart(16);
    const [isDebug, maxSize] = parseEnv(_type.toLowerCase());
    return {
      debug: isDebug ? (...values) => apply('debug', type, values, maxSize) : noop$3,
      error: (...values) => apply('error', type, values),
      log: (...values) => apply('log', type, values),
      noop: noop$3,
      warn: (...values) => apply('warn', type, values)
    };
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors

  function defaultGetId() {
    return 'none';
  }
  /**
   * @name memoize
   * @description Memomize the function with a specific instanceId
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  function memoize(fn, {
    getInstanceId = defaultGetId
  } = {}) {
    const cache = {};

    const memoized = (...args) => {
      const stringParams = stringify(args);
      const instanceId = getInstanceId();

      if (!cache[instanceId]) {
        cache[instanceId] = {};
      }

      if (cache[instanceId][stringParams] === undefined) {
        cache[instanceId][stringParams] = fn(...args);
      }

      return cache[instanceId][stringParams];
    };

    memoized.unmemoize = (...args) => {
      const stringParams = stringify(args);
      const instanceId = getInstanceId();

      if (cache[instanceId] && cache[instanceId][stringParams] !== undefined) {
        delete cache[instanceId][stringParams];
      }
    };

    return memoized;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name nextTick
   * @description Defer the operation to the queue for evaluation on the next tick
   */
  function nextTick(onExec, onError) {
    Promise.resolve().then(() => {
      onExec();
    }).catch(error => {
      if (onError) {
        onError(error);
      } else {
        console.error(error);
      }
    });
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name objectClear
   * @summary Removes all the keys from the input object
   */
  function objectClear(value) {
    const keys = Object.keys(value);

    for (let i = 0; i < keys.length; i++) {
      delete value[keys[i]];
    }

    return value;
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name objectProperty
   * @summary Assign a get property on the input object
   */
  function objectProperty(that, key, getter) {
    // There are 3 approaches here -
    //  - Object.prototype.hasOwnProperty.call(that, key) - this only checks the current class, i.e
    //    will retuirn false if the property is set in the parent class
    //  - isUndefined(...) - this may yield a false positive when the property is there, but not set.
    //    Additionally, on pre-defined getters it may make a call
    //  - key in that - Does not need to be combined with either of the above and checks the full chain
    if (!(key in that)) {
      Object.defineProperty(that, key, {
        enumerable: true,
        // Unlike in lazy, we always call into the upper function, i.e. this method
        // does not cache old values (it is expected to be used for dynamic values)
        get: () => getter(key)
      });
    }
  }
  /**
   * @name objectProperties
   * @summary Assign get properties on the input object
   */

  function objectProperties(that, keys, getter) {
    for (let i = 0; i < keys.length; i++) {
      objectProperty(that, keys[i], k => getter(k, i));
    }
  }

  // Copyright 2017-2022 @polkadot/util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const CC_TO_UP = new Array(256);
  const CC_TO_LO = new Array(256);

  for (let i = 0; i < CC_TO_UP.length; i++) {
    CC_TO_LO[i] = String.fromCharCode(i).toLowerCase();
    CC_TO_UP[i] = String.fromCharCode(i).toUpperCase();
  }
  /** @internal */


  function formatAllCaps(w) {
    return w.slice(0, w.length - 1).toLowerCase() + CC_TO_UP[w.charCodeAt(w.length - 1)];
  }
  /**
   * @internal
   *
   * Inspired by https://stackoverflow.com/a/2970667
   *
   * This is not as optimal as the original SO answer (we split into per-word),
   * however it does pass the tests (which the SO version doesn't) and is still
   * a major improvement over the original camelcase npm package -
   *
   *   camelcase: 20.88 μs/op
   *        this:  1.00 μs/op
   *
   * Caveat of this: only Ascii, but acceptable for the intended usecase
   */


  function converter(format) {
    return value => {
      const parts = value // replace all seperators (including consequtive) with spaces
      .replace(/[-_., ]+/g, ' ') // we don't want leading or trailing spaces
      .trim() // split into words
      .split(' ');
      const count = parts.length;
      let result = '';

      for (let i = 0; i < count; i++) {
        const w = parts[i]; // apply the formatting

        result += format(/^[\dA-Z]+$/.test(w) // all full uppercase + letters are changed to lowercase
        ? w.toLowerCase() // all consecutive capitals + letters are changed to lowercase
        // e.g. UUID64 -> uuid64, while preserving splits, eg. NFTOrder -> nftOrder
        : w.replace(/^[\dA-Z]{2,}[^a-z]/, formatAllCaps), i);
      }

      return result;
    };
  }
  /**
   * @name stringCamelCase
   * @summary Convert a dash/dot/underscore/space separated Ascii string/String to camelCase
   */


  const stringCamelCase = converter((w, i) => // lowercase for first letter/first word, else uppercase first, rest unchanged
  (i ? CC_TO_UP[w.charCodeAt(0)] : CC_TO_LO[w.charCodeAt(0)]) + w.slice(1));
  /**
   * @name stringPascalCase
   * @summary Convert a dash/dot/underscore/space separated Ascii string/String to PascalCase
   */

  const stringPascalCase = converter(w => // uppercase the first character, leave the rest unchanged
  CC_TO_UP[w.charCodeAt(0)] + w.slice(1));

  // Copyright 2017-2022 @polkadot/util authors & contributors
  /**
   * @name stringToHex
   * @summary Creates a hex string from a utf-8 string
   * @description
   * String input values return the actual encoded hex value.
   * @example
   * <BR>
   *
   * ```javascript
   * import { stringToHex } from '@polkadot/util';
   *
   * stringToU8a('hello'); // 0x68656c6c6f
   * ```
   */

  function stringToHex(value) {
    return u8aToHex(stringToU8a(value));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$i = {
    name: '@polkadot/util-crypto',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  };

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  var others$e = [packageInfo$j, packageInfo$i];

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$h = {
    name: '@polkadot/keyring',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  };

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  detectPackage(packageInfo$h, null, others$e);

  // Copyright 2017-2022 @polkadot/networks authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$g = {
    name: '@polkadot/networks',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  };

  // Copyright 2017-2022 @polkadot/x-randomvalues authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$f = {
    name: '@polkadot/x-randomvalues',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  };

  // Copyright 2017-2022 @polkadot/x-randomvalues authors & contributors
  function getRandomValues(arr) {
    // We use x-global here - this prevents packagers such as rollup
    // confusing this with the "normal" Node.js import and stubbing it
    // (and also aligns with eg. x-fetch, where x-global is used)
    return xglobal.crypto.getRandomValues(arr);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  var others$d = [packageInfo$g, packageInfo$j, packageInfo$f];

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  detectPackage(packageInfo$i, null, others$d);

  // Copyright 2017-2022 @polkadot/x-bigint authors & contributors
  exposeGlobal('BigInt', BigInt$1);

  /*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
  const _0n$1 = BigInt(0);
  const _1n$1 = BigInt(1);
  const _2n$1 = BigInt(2);
  const _3n = BigInt(3);
  const _8n = BigInt(8);
  const POW_2_256 = _2n$1 ** BigInt(256);
  const CURVE = {
      a: _0n$1,
      b: BigInt(7),
      P: POW_2_256 - _2n$1 ** BigInt(32) - BigInt(977),
      n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),
      h: _1n$1,
      Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
      Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
  };
  function weistrass(x) {
      const { a, b } = CURVE;
      const x2 = mod(x * x);
      const x3 = mod(x2 * x);
      return mod(x3 + a * x + b);
  }
  const USE_ENDOMORPHISM = CURVE.a === _0n$1;
  class JacobianPoint {
      constructor(x, y, z) {
          this.x = x;
          this.y = y;
          this.z = z;
      }
      static fromAffine(p) {
          if (!(p instanceof Point)) {
              throw new TypeError('JacobianPoint#fromAffine: expected Point');
          }
          return new JacobianPoint(p.x, p.y, _1n$1);
      }
      static toAffineBatch(points) {
          const toInv = invertBatch(points.map((p) => p.z));
          return points.map((p, i) => p.toAffine(toInv[i]));
      }
      static normalizeZ(points) {
          return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
      }
      equals(other) {
          if (!(other instanceof JacobianPoint))
              throw new TypeError('JacobianPoint expected');
          const { x: X1, y: Y1, z: Z1 } = this;
          const { x: X2, y: Y2, z: Z2 } = other;
          const Z1Z1 = mod(Z1 ** _2n$1);
          const Z2Z2 = mod(Z2 ** _2n$1);
          const U1 = mod(X1 * Z2Z2);
          const U2 = mod(X2 * Z1Z1);
          const S1 = mod(mod(Y1 * Z2) * Z2Z2);
          const S2 = mod(mod(Y2 * Z1) * Z1Z1);
          return U1 === U2 && S1 === S2;
      }
      negate() {
          return new JacobianPoint(this.x, mod(-this.y), this.z);
      }
      double() {
          const { x: X1, y: Y1, z: Z1 } = this;
          const A = mod(X1 ** _2n$1);
          const B = mod(Y1 ** _2n$1);
          const C = mod(B ** _2n$1);
          const D = mod(_2n$1 * (mod((X1 + B) ** _2n$1) - A - C));
          const E = mod(_3n * A);
          const F = mod(E ** _2n$1);
          const X3 = mod(F - _2n$1 * D);
          const Y3 = mod(E * (D - X3) - _8n * C);
          const Z3 = mod(_2n$1 * Y1 * Z1);
          return new JacobianPoint(X3, Y3, Z3);
      }
      add(other) {
          if (!(other instanceof JacobianPoint))
              throw new TypeError('JacobianPoint expected');
          const { x: X1, y: Y1, z: Z1 } = this;
          const { x: X2, y: Y2, z: Z2 } = other;
          if (X2 === _0n$1 || Y2 === _0n$1)
              return this;
          if (X1 === _0n$1 || Y1 === _0n$1)
              return other;
          const Z1Z1 = mod(Z1 ** _2n$1);
          const Z2Z2 = mod(Z2 ** _2n$1);
          const U1 = mod(X1 * Z2Z2);
          const U2 = mod(X2 * Z1Z1);
          const S1 = mod(mod(Y1 * Z2) * Z2Z2);
          const S2 = mod(mod(Y2 * Z1) * Z1Z1);
          const H = mod(U2 - U1);
          const r = mod(S2 - S1);
          if (H === _0n$1) {
              if (r === _0n$1) {
                  return this.double();
              }
              else {
                  return JacobianPoint.ZERO;
              }
          }
          const HH = mod(H ** _2n$1);
          const HHH = mod(H * HH);
          const V = mod(U1 * HH);
          const X3 = mod(r ** _2n$1 - HHH - _2n$1 * V);
          const Y3 = mod(r * (V - X3) - S1 * HHH);
          const Z3 = mod(Z1 * Z2 * H);
          return new JacobianPoint(X3, Y3, Z3);
      }
      subtract(other) {
          return this.add(other.negate());
      }
      multiplyUnsafe(scalar) {
          let n = normalizeScalar(scalar);
          JacobianPoint.BASE;
          const P0 = JacobianPoint.ZERO;
          if (n === _0n$1)
              return P0;
          if (n === _1n$1)
              return this;
          if (!USE_ENDOMORPHISM) {
              let p = P0;
              let d = this;
              while (n > _0n$1) {
                  if (n & _1n$1)
                      p = p.add(d);
                  d = d.double();
                  n >>= _1n$1;
              }
              return p;
          }
          let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);
          let k1p = P0;
          let k2p = P0;
          let d = this;
          while (k1 > _0n$1 || k2 > _0n$1) {
              if (k1 & _1n$1)
                  k1p = k1p.add(d);
              if (k2 & _1n$1)
                  k2p = k2p.add(d);
              d = d.double();
              k1 >>= _1n$1;
              k2 >>= _1n$1;
          }
          if (k1neg)
              k1p = k1p.negate();
          if (k2neg)
              k2p = k2p.negate();
          k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
          return k1p.add(k2p);
      }
      precomputeWindow(W) {
          const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
          const points = [];
          let p = this;
          let base = p;
          for (let window = 0; window < windows; window++) {
              base = p;
              points.push(base);
              for (let i = 1; i < 2 ** (W - 1); i++) {
                  base = base.add(p);
                  points.push(base);
              }
              p = base.double();
          }
          return points;
      }
      wNAF(n, affinePoint) {
          if (!affinePoint && this.equals(JacobianPoint.BASE))
              affinePoint = Point.BASE;
          const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;
          if (256 % W) {
              throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');
          }
          let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
          if (!precomputes) {
              precomputes = this.precomputeWindow(W);
              if (affinePoint && W !== 1) {
                  precomputes = JacobianPoint.normalizeZ(precomputes);
                  pointPrecomputes.set(affinePoint, precomputes);
              }
          }
          let p = JacobianPoint.ZERO;
          let f = JacobianPoint.ZERO;
          const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);
          const windowSize = 2 ** (W - 1);
          const mask = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window = 0; window < windows; window++) {
              const offset = window * windowSize;
              let wbits = Number(n & mask);
              n >>= shiftBy;
              if (wbits > windowSize) {
                  wbits -= maxNumber;
                  n += _1n$1;
              }
              if (wbits === 0) {
                  let pr = precomputes[offset];
                  if (window % 2)
                      pr = pr.negate();
                  f = f.add(pr);
              }
              else {
                  let cached = precomputes[offset + Math.abs(wbits) - 1];
                  if (wbits < 0)
                      cached = cached.negate();
                  p = p.add(cached);
              }
          }
          return { p, f };
      }
      multiply(scalar, affinePoint) {
          let n = normalizeScalar(scalar);
          let point;
          let fake;
          if (USE_ENDOMORPHISM) {
              const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);
              let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);
              let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);
              if (k1neg)
                  k1p = k1p.negate();
              if (k2neg)
                  k2p = k2p.negate();
              k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
              point = k1p.add(k2p);
              fake = f1p.add(f2p);
          }
          else {
              const { p, f } = this.wNAF(n, affinePoint);
              point = p;
              fake = f;
          }
          return JacobianPoint.normalizeZ([point, fake])[0];
      }
      toAffine(invZ = invert(this.z)) {
          const { x, y, z } = this;
          const iz1 = invZ;
          const iz2 = mod(iz1 * iz1);
          const iz3 = mod(iz2 * iz1);
          const ax = mod(x * iz2);
          const ay = mod(y * iz3);
          const zz = mod(z * iz1);
          if (zz !== _1n$1)
              throw new Error('invZ was invalid');
          return new Point(ax, ay);
      }
  }
  JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n$1);
  JacobianPoint.ZERO = new JacobianPoint(_0n$1, _1n$1, _0n$1);
  const pointPrecomputes = new WeakMap();
  class Point {
      constructor(x, y) {
          this.x = x;
          this.y = y;
      }
      _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
      }
      static fromCompressedHex(bytes) {
          const isShort = bytes.length === 32;
          const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));
          if (!isValidFieldElement(x))
              throw new Error('Point is not on curve');
          const y2 = weistrass(x);
          let y = sqrtMod(y2);
          const isYOdd = (y & _1n$1) === _1n$1;
          if (isShort) {
              if (isYOdd)
                  y = mod(-y);
          }
          else {
              const isFirstByteOdd = (bytes[0] & 1) === 1;
              if (isFirstByteOdd !== isYOdd)
                  y = mod(-y);
          }
          const point = new Point(x, y);
          point.assertValidity();
          return point;
      }
      static fromUncompressedHex(bytes) {
          const x = bytesToNumber(bytes.subarray(1, 33));
          const y = bytesToNumber(bytes.subarray(33, 65));
          const point = new Point(x, y);
          point.assertValidity();
          return point;
      }
      static fromHex(hex) {
          const bytes = ensureBytes(hex);
          const len = bytes.length;
          const header = bytes[0];
          if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {
              return this.fromCompressedHex(bytes);
          }
          if (len === 65 && header === 0x04)
              return this.fromUncompressedHex(bytes);
          throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);
      }
      static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normalizePrivateKey(privateKey));
      }
      static fromSignature(msgHash, signature, recovery) {
          msgHash = ensureBytes(msgHash);
          const h = truncateHash(msgHash);
          const { r, s } = normalizeSignature(signature);
          if (recovery !== 0 && recovery !== 1) {
              throw new Error('Cannot recover signature: invalid recovery bit');
          }
          if (h === _0n$1)
              throw new Error('Cannot recover signature: msgHash cannot be 0');
          const prefix = recovery & 1 ? '03' : '02';
          const R = Point.fromHex(prefix + numTo32bStr(r));
          const { n } = CURVE;
          const rinv = invert(r, n);
          const u1 = mod(-h * rinv, n);
          const u2 = mod(s * rinv, n);
          const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
              throw new Error('Cannot recover signature: point at infinify');
          Q.assertValidity();
          return Q;
      }
      toRawBytes(isCompressed = false) {
          return hexToBytes(this.toHex(isCompressed));
      }
      toHex(isCompressed = false) {
          const x = numTo32bStr(this.x);
          if (isCompressed) {
              const prefix = this.y & _1n$1 ? '03' : '02';
              return `${prefix}${x}`;
          }
          else {
              return `04${x}${numTo32bStr(this.y)}`;
          }
      }
      toHexX() {
          return this.toHex(true).slice(2);
      }
      toRawX() {
          return this.toRawBytes(true).slice(1);
      }
      assertValidity() {
          const msg = 'Point is not on elliptic curve';
          const { x, y } = this;
          if (!isValidFieldElement(x) || !isValidFieldElement(y))
              throw new Error(msg);
          const left = mod(y * y);
          const right = weistrass(x);
          if (mod(left - right) !== _0n$1)
              throw new Error(msg);
      }
      equals(other) {
          return this.x === other.x && this.y === other.y;
      }
      negate() {
          return new Point(this.x, mod(-this.y));
      }
      double() {
          return JacobianPoint.fromAffine(this).double().toAffine();
      }
      add(other) {
          return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
      }
      subtract(other) {
          return this.add(other.negate());
      }
      multiply(scalar) {
          return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
      }
      multiplyAndAddUnsafe(Q, a, b) {
          const P = JacobianPoint.fromAffine(this);
          const aP = a === _0n$1 || a === _1n$1 || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);
          const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);
          const sum = aP.add(bQ);
          return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();
      }
  }
  Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
  Point.ZERO = new Point(_0n$1, _0n$1);
  function sliceDER(s) {
      return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;
  }
  function parseDERInt(data) {
      if (data.length < 2 || data[0] !== 0x02) {
          throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);
      }
      const len = data[1];
      const res = data.subarray(2, len + 2);
      if (!len || res.length !== len) {
          throw new Error(`Invalid signature integer: wrong length`);
      }
      if (res[0] === 0x00 && res[1] <= 0x7f) {
          throw new Error('Invalid signature integer: trailing length');
      }
      return { data: bytesToNumber(res), left: data.subarray(len + 2) };
  }
  function parseDERSignature(data) {
      if (data.length < 2 || data[0] != 0x30) {
          throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);
      }
      if (data[1] !== data.length - 2) {
          throw new Error('Invalid signature: incorrect length');
      }
      const { data: r, left: sBytes } = parseDERInt(data.subarray(2));
      const { data: s, left: rBytesLeft } = parseDERInt(sBytes);
      if (rBytesLeft.length) {
          throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);
      }
      return { r, s };
  }
  class Signature {
      constructor(r, s) {
          this.r = r;
          this.s = s;
          this.assertValidity();
      }
      static fromCompact(hex) {
          const arr = isUint8a(hex);
          const name = 'Signature.fromCompact';
          if (typeof hex !== 'string' && !arr)
              throw new TypeError(`${name}: Expected string or Uint8Array`);
          const str = arr ? bytesToHex(hex) : hex;
          if (str.length !== 128)
              throw new Error(`${name}: Expected 64-byte hex`);
          return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
      }
      static fromDER(hex) {
          const arr = isUint8a(hex);
          if (typeof hex !== 'string' && !arr)
              throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);
          const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));
          return new Signature(r, s);
      }
      static fromHex(hex) {
          return this.fromDER(hex);
      }
      assertValidity() {
          const { r, s } = this;
          if (!isWithinCurveOrder(r))
              throw new Error('Invalid Signature: r must be 0 < r < n');
          if (!isWithinCurveOrder(s))
              throw new Error('Invalid Signature: s must be 0 < s < n');
      }
      hasHighS() {
          const HALF = CURVE.n >> _1n$1;
          return this.s > HALF;
      }
      normalizeS() {
          return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;
      }
      toDERRawBytes(isCompressed = false) {
          return hexToBytes(this.toDERHex(isCompressed));
      }
      toDERHex(isCompressed = false) {
          const sHex = sliceDER(numberToHexUnpadded(this.s));
          if (isCompressed)
              return sHex;
          const rHex = sliceDER(numberToHexUnpadded(this.r));
          const rLen = numberToHexUnpadded(rHex.length / 2);
          const sLen = numberToHexUnpadded(sHex.length / 2);
          const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);
          return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
      }
      toRawBytes() {
          return this.toDERRawBytes();
      }
      toHex() {
          return this.toDERHex();
      }
      toCompactRawBytes() {
          return hexToBytes(this.toCompactHex());
      }
      toCompactHex() {
          return numTo32bStr(this.r) + numTo32bStr(this.s);
      }
  }
  function concatBytes(...arrays) {
      if (!arrays.every(isUint8a))
          throw new Error('Uint8Array list expected');
      if (arrays.length === 1)
          return arrays[0];
      const length = arrays.reduce((a, arr) => a + arr.length, 0);
      const result = new Uint8Array(length);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
          const arr = arrays[i];
          result.set(arr, pad);
          pad += arr.length;
      }
      return result;
  }
  function isUint8a(bytes) {
      return bytes instanceof Uint8Array;
  }
  const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
  function bytesToHex(uint8a) {
      if (!(uint8a instanceof Uint8Array))
          throw new Error('Expected Uint8Array');
      let hex = '';
      for (let i = 0; i < uint8a.length; i++) {
          hex += hexes[uint8a[i]];
      }
      return hex;
  }
  function numTo32bStr(num) {
      if (num > POW_2_256)
          throw new Error('Expected number < 2^256');
      return num.toString(16).padStart(64, '0');
  }
  function numTo32b(num) {
      return hexToBytes(numTo32bStr(num));
  }
  function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
  }
  function hexToNumber(hex) {
      if (typeof hex !== 'string') {
          throw new TypeError('hexToNumber: expected string, got ' + typeof hex);
      }
      return BigInt(`0x${hex}`);
  }
  function hexToBytes(hex) {
      if (typeof hex !== 'string') {
          throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
      }
      if (hex.length % 2)
          throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);
      const array = new Uint8Array(hex.length / 2);
      for (let i = 0; i < array.length; i++) {
          const j = i * 2;
          const hexByte = hex.slice(j, j + 2);
          const byte = Number.parseInt(hexByte, 16);
          if (Number.isNaN(byte) || byte < 0)
              throw new Error('Invalid byte sequence');
          array[i] = byte;
      }
      return array;
  }
  function bytesToNumber(bytes) {
      return hexToNumber(bytesToHex(bytes));
  }
  function ensureBytes(hex) {
      return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);
  }
  function normalizeScalar(num) {
      if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)
          return BigInt(num);
      if (typeof num === 'bigint' && isWithinCurveOrder(num))
          return num;
      throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');
  }
  function mod(a, b = CURVE.P) {
      const result = a % b;
      return result >= _0n$1 ? result : b + result;
  }
  function pow2(x, power) {
      const { P } = CURVE;
      let res = x;
      while (power-- > _0n$1) {
          res *= res;
          res %= P;
      }
      return res;
  }
  function sqrtMod(x) {
      const { P } = CURVE;
      const _6n = BigInt(6);
      const _11n = BigInt(11);
      const _22n = BigInt(22);
      const _23n = BigInt(23);
      const _44n = BigInt(44);
      const _88n = BigInt(88);
      const b2 = (x * x * x) % P;
      const b3 = (b2 * b2 * x) % P;
      const b6 = (pow2(b3, _3n) * b3) % P;
      const b9 = (pow2(b6, _3n) * b3) % P;
      const b11 = (pow2(b9, _2n$1) * b2) % P;
      const b22 = (pow2(b11, _11n) * b11) % P;
      const b44 = (pow2(b22, _22n) * b22) % P;
      const b88 = (pow2(b44, _44n) * b44) % P;
      const b176 = (pow2(b88, _88n) * b88) % P;
      const b220 = (pow2(b176, _44n) * b44) % P;
      const b223 = (pow2(b220, _3n) * b3) % P;
      const t1 = (pow2(b223, _23n) * b22) % P;
      const t2 = (pow2(t1, _6n) * b2) % P;
      return pow2(t2, _2n$1);
  }
  function invert(number, modulo = CURVE.P) {
      if (number === _0n$1 || modulo <= _0n$1) {
          throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
      }
      let a = mod(number, modulo);
      let b = modulo;
      let x = _0n$1, u = _1n$1;
      while (a !== _0n$1) {
          const q = b / a;
          const r = b % a;
          const m = x - u * q;
          b = a, a = r, x = u, u = m;
      }
      const gcd = b;
      if (gcd !== _1n$1)
          throw new Error('invert: does not exist');
      return mod(x, modulo);
  }
  function invertBatch(nums, p = CURVE.P) {
      const scratch = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
          if (num === _0n$1)
              return acc;
          scratch[i] = acc;
          return mod(acc * num, p);
      }, _1n$1);
      const inverted = invert(lastMultiplied, p);
      nums.reduceRight((acc, num, i) => {
          if (num === _0n$1)
              return acc;
          scratch[i] = mod(acc * scratch[i], p);
          return mod(acc * num, p);
      }, inverted);
      return scratch;
  }
  const divNearest = (a, b) => (a + b / _2n$1) / b;
  const POW_2_128 = _2n$1 ** BigInt(128);
  function splitScalarEndo(k) {
      const { n } = CURVE;
      const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
      const b1 = -_1n$1 * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
      const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
      const b2 = a1;
      const c1 = divNearest(b2 * k, n);
      const c2 = divNearest(-b1 * k, n);
      let k1 = mod(k - c1 * a1 - c2 * a2, n);
      let k2 = mod(-c1 * b1 - c2 * b2, n);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
          k1 = n - k1;
      if (k2neg)
          k2 = n - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
          throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);
      }
      return { k1neg, k1, k2neg, k2 };
  }
  function truncateHash(hash) {
      const { n } = CURVE;
      const byteLength = hash.length;
      const delta = byteLength * 8 - 256;
      let h = bytesToNumber(hash);
      if (delta > 0)
          h = h >> BigInt(delta);
      if (h >= n)
          h -= n;
      return h;
  }
  class HmacDrbg {
      constructor() {
          this.v = new Uint8Array(32).fill(1);
          this.k = new Uint8Array(32).fill(0);
          this.counter = 0;
      }
      hmac(...values) {
          return utils$1.hmacSha256(this.k, ...values);
      }
      hmacSync(...values) {
          if (typeof utils$1.hmacSha256Sync !== 'function')
              throw new Error('utils.hmacSha256Sync is undefined, you need to set it');
          const res = utils$1.hmacSha256Sync(this.k, ...values);
          if (res instanceof Promise)
              throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');
          return res;
      }
      incr() {
          if (this.counter >= 1000) {
              throw new Error('Tried 1,000 k values for sign(), all were invalid');
          }
          this.counter += 1;
      }
      async reseed(seed = new Uint8Array()) {
          this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);
          this.v = await this.hmac(this.v);
          if (seed.length === 0)
              return;
          this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);
          this.v = await this.hmac(this.v);
      }
      reseedSync(seed = new Uint8Array()) {
          this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);
          this.v = this.hmacSync(this.v);
          if (seed.length === 0)
              return;
          this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);
          this.v = this.hmacSync(this.v);
      }
      async generate() {
          this.incr();
          this.v = await this.hmac(this.v);
          return this.v;
      }
      generateSync() {
          this.incr();
          this.v = this.hmacSync(this.v);
          return this.v;
      }
  }
  function isWithinCurveOrder(num) {
      return _0n$1 < num && num < CURVE.n;
  }
  function isValidFieldElement(num) {
      return _0n$1 < num && num < CURVE.P;
  }
  function kmdToSig(kBytes, m, d) {
      const k = bytesToNumber(kBytes);
      if (!isWithinCurveOrder(k))
          return;
      const { n } = CURVE;
      const q = Point.BASE.multiply(k);
      const r = mod(q.x, n);
      if (r === _0n$1)
          return;
      const s = mod(invert(k, n) * mod(m + d * r, n), n);
      if (s === _0n$1)
          return;
      const sig = new Signature(r, s);
      const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n$1);
      return { sig, recovery };
  }
  function normalizePrivateKey(key) {
      let num;
      if (typeof key === 'bigint') {
          num = key;
      }
      else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {
          num = BigInt(key);
      }
      else if (typeof key === 'string') {
          if (key.length !== 64)
              throw new Error('Expected 32 bytes of private key');
          num = hexToNumber(key);
      }
      else if (isUint8a(key)) {
          if (key.length !== 32)
              throw new Error('Expected 32 bytes of private key');
          num = bytesToNumber(key);
      }
      else {
          throw new TypeError('Expected valid private key');
      }
      if (!isWithinCurveOrder(num))
          throw new Error('Expected private key: 0 < key < n');
      return num;
  }
  function normalizeSignature(signature) {
      if (signature instanceof Signature) {
          signature.assertValidity();
          return signature;
      }
      try {
          return Signature.fromDER(signature);
      }
      catch (error) {
          return Signature.fromCompact(signature);
      }
  }
  function getPublicKey(privateKey, isCompressed = false) {
      return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {
      return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);
  }
  function bits2int(bytes) {
      const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;
      return bytesToNumber(slice);
  }
  function bits2octets(bytes) {
      const z1 = bits2int(bytes);
      const z2 = mod(z1, CURVE.n);
      return int2octets(z2 < _0n$1 ? z1 : z2);
  }
  function int2octets(num) {
      if (typeof num !== 'bigint')
          throw new Error('Expected bigint');
      const hex = numTo32bStr(num);
      return hexToBytes(hex);
  }
  function initSigArgs(msgHash, privateKey, extraEntropy) {
      if (msgHash == null)
          throw new Error(`sign: expected valid message hash, not "${msgHash}"`);
      const h1 = ensureBytes(msgHash);
      const d = normalizePrivateKey(privateKey);
      const seedArgs = [int2octets(d), bits2octets(h1)];
      if (extraEntropy != null) {
          if (extraEntropy === true)
              extraEntropy = utils$1.randomBytes(32);
          const e = ensureBytes(extraEntropy);
          if (e.length !== 32)
              throw new Error('sign: Expected 32 bytes of extra data');
          seedArgs.push(e);
      }
      const seed = concatBytes(...seedArgs);
      const m = bits2int(h1);
      return { seed, m, d };
  }
  function finalizeSig(recSig, opts) {
      let { sig, recovery } = recSig;
      const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);
      if (canonical && sig.hasHighS()) {
          sig = sig.normalizeS();
          recovery ^= 1;
      }
      const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();
      return recovered ? [hashed, recovery] : hashed;
  }
  function signSync(msgHash, privKey, opts = {}) {
      const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);
      let sig;
      const drbg = new HmacDrbg();
      drbg.reseedSync(seed);
      while (!(sig = kmdToSig(drbg.generateSync(), m, d)))
          drbg.reseedSync();
      return finalizeSig(sig, opts);
  }
  Point.BASE._setWindowSize(8);
  const crypto = {
      node: nodeCrypto,
      web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
  };
  const TAGGED_HASH_PREFIXES = {};
  const utils$1 = {
      isValidPrivateKey(privateKey) {
          try {
              normalizePrivateKey(privateKey);
              return true;
          }
          catch (error) {
              return false;
          }
      },
      privateAdd: (privateKey, tweak) => {
          const p = normalizePrivateKey(privateKey);
          const t = bytesToNumber(ensureBytes(tweak));
          return numTo32b(mod(p + t, CURVE.n));
      },
      privateNegate: (privateKey) => {
          const p = normalizePrivateKey(privateKey);
          return numTo32b(CURVE.n - p);
      },
      pointAddScalar: (p, tweak, isCompressed) => {
          const P = Point.fromHex(p);
          const t = bytesToNumber(ensureBytes(tweak));
          const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n$1);
          if (!Q)
              throw new Error('Tweaked point at infinity');
          return Q.toRawBytes(isCompressed);
      },
      pointMultiply: (p, tweak, isCompressed) => {
          const P = Point.fromHex(p);
          const t = bytesToNumber(ensureBytes(tweak));
          return P.multiply(t).toRawBytes(isCompressed);
      },
      hashToPrivateKey: (hash) => {
          hash = ensureBytes(hash);
          if (hash.length < 40 || hash.length > 1024)
              throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');
          const num = mod(bytesToNumber(hash), CURVE.n - _1n$1) + _1n$1;
          return numTo32b(num);
      },
      randomBytes: (bytesLength = 32) => {
          if (crypto.web) {
              return crypto.web.getRandomValues(new Uint8Array(bytesLength));
          }
          else if (crypto.node) {
              const { randomBytes } = crypto.node;
              return Uint8Array.from(randomBytes(bytesLength));
          }
          else {
              throw new Error("The environment doesn't have randomBytes function");
          }
      },
      randomPrivateKey: () => {
          return utils$1.hashToPrivateKey(utils$1.randomBytes(40));
      },
      bytesToHex,
      hexToBytes,
      concatBytes,
      mod,
      invert,
      sha256: async (...messages) => {
          if (crypto.web) {
              const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));
              return new Uint8Array(buffer);
          }
          else if (crypto.node) {
              const { createHash } = crypto.node;
              const hash = createHash('sha256');
              messages.forEach((m) => hash.update(m));
              return Uint8Array.from(hash.digest());
          }
          else {
              throw new Error("The environment doesn't have sha256 function");
          }
      },
      hmacSha256: async (key, ...messages) => {
          if (crypto.web) {
              const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);
              const message = concatBytes(...messages);
              const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);
              return new Uint8Array(buffer);
          }
          else if (crypto.node) {
              const { createHmac } = crypto.node;
              const hash = createHmac('sha256', key);
              messages.forEach((m) => hash.update(m));
              return Uint8Array.from(hash.digest());
          }
          else {
              throw new Error("The environment doesn't have hmac-sha256 function");
          }
      },
      sha256Sync: undefined,
      hmacSha256Sync: undefined,
      taggedHash: async (tag, ...messages) => {
          let tagP = TAGGED_HASH_PREFIXES[tag];
          if (tagP === undefined) {
              const tagH = await utils$1.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
              tagP = concatBytes(tagH, tagH);
              TAGGED_HASH_PREFIXES[tag] = tagP;
          }
          return utils$1.sha256(tagP, ...messages);
      },
      taggedHashSync: (tag, ...messages) => {
          if (typeof utils$1.sha256Sync !== 'function')
              throw new Error('utils.sha256Sync is undefined, you need to set it');
          let tagP = TAGGED_HASH_PREFIXES[tag];
          if (tagP === undefined) {
              const tagH = utils$1.sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
              tagP = concatBytes(tagH, tagH);
              TAGGED_HASH_PREFIXES[tag] = tagP;
          }
          return utils$1.sha256Sync(tagP, ...messages);
      },
      precompute(windowSize = 8, point = Point.BASE) {
          const cached = point === Point.BASE ? point : new Point(point.x, point.y);
          cached._setWindowSize(windowSize);
          cached.multiply(_3n);
          return cached;
      },
  };

  // Copyright 2017-2022 @polkadot/wasm-bridge authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$e = {
    name: '@polkadot/wasm-bridge',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '6.1.5'
  };

  // Copyright 2017-2022 @polkadot/wasm-crypto-asmjs authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$d = {
    name: '@polkadot/wasm-crypto-asmjs',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '6.1.5'
  };

  // Copyright 2017-2022 @polkadot/wasm-crypto-init authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$c = {
    name: '@polkadot/wasm-crypto-init',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '6.1.5'
  };

  // Copyright 2017-2022 @polkadot/wasm-crypto-wasm authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$b = {
    name: '@polkadot/wasm-crypto-wasm',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '6.1.5'
  };

  // Copyright 2017-2022 @polkadot/wasm-util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$a = {
    name: '@polkadot/wasm-util',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '6.1.5'
  };

  // Copyright 2017-2022 @polkadot/wasm-crypto authors & contributors
  var others$c = [packageInfo$e, packageInfo$d, packageInfo$c, packageInfo$b, packageInfo$a];

  // Copyright 2017-2022 @polkadot/wasm-crypto authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$9 = {
    name: '@polkadot/wasm-crypto',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '6.1.5'
  };

  // Copyright 2017-2022 @polkadot/wasm-crypto authors & contributors
  detectPackage(packageInfo$9, null, others$c);

  // Copyright 2017-2022 @polkadot/wasm-bridge authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  var others$b = [];

  // Copyright 2017-2022 @polkadot/wasm-bridge authors & contributors
  detectPackage(packageInfo$e, null, others$b);

  // Copyright 2019-2022 @polkadot/wasm-bridge authors & contributors
  const DEFAULT_CRYPTO = {
    getRandomValues
  };
  const DEFAULT_SELF = {
    crypto: DEFAULT_CRYPTO
  };
  /**
   * @name Wbg
   * @description
   * This defines the internal interfaces that wasm-bindgen used to communicate
   * with the host layer. None of these functions are available to the user, rather
   * they are called internally from the WASM code itself.
   *
   * The interfaces here are exposed in the imports on the created WASM interfaces.
   *
   * Internally the implementation does a thin layer into the supplied bridge.
   */

  class Wbg {
    #bridge;

    constructor(bridge) {
      this.#bridge = bridge;
    }
    /** @internal */


    abort = () => {
      throw new Error('abort');
    };
    /** @internal */

    __wbindgen_is_undefined = idx => {
      return this.#bridge.getObject(idx) === undefined;
    };
    /** @internal */

    __wbindgen_throw = (ptr, len) => {
      throw new Error(this.#bridge.getString(ptr, len));
    };
    /** @internal */

    __wbg_self_1b7a39e3a92c949c = () => {
      return this.#bridge.addObject(DEFAULT_SELF);
    };
    /** @internal */

    __wbg_require_604837428532a733 = (ptr, len) => {
      throw new Error(`Unable to require ${this.#bridge.getString(ptr, len)}`);
    };
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars

    __wbg_crypto_968f1772287e2df0 = _idx => {
      return this.#bridge.addObject(DEFAULT_CRYPTO);
    };
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars

    __wbg_getRandomValues_a3d34b4fee3c2869 = _idx => {
      return this.#bridge.addObject(DEFAULT_CRYPTO.getRandomValues);
    };
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars

    __wbg_getRandomValues_f5e14ab7ac8e995d = (_arg0, ptr, len) => {
      DEFAULT_CRYPTO.getRandomValues(this.#bridge.getU8a(ptr, len));
    };
    /** @internal */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars

    __wbg_randomFillSync_d5bd2d655fdf256a = (_idx, _ptr, _len) => {
      throw new Error('randomFillsync is not available'); // getObject(idx).randomFillSync(getU8a(ptr, len));
    };
    /** @internal */

    __wbindgen_object_drop_ref = idx => {
      this.#bridge.takeObject(idx);
    };
  }

  // Copyright 2019-2022 @polkadot/wasm-bridge authors & contributors
  /**
   * @name Bridge
   * @description
   * Creates a bridge between the JS and WASM environments.
   *
   * For any bridge it is passed an function white is then called internally at the
   * time of initialization. This affectively implements the layer between WASM and
   * the native environment, providing all the plumbing needed for the Wbg classes.
   */

  class Bridge {
    #cachegetInt32;
    #cachegetUint8;
    #createWasm;
    #heap;
    #heapNext;
    #wasm;
    #wasmError;
    #wasmPromise;
    #wbg;
    #type;

    constructor(createWasm) {
      this.#createWasm = createWasm;
      this.#cachegetInt32 = null;
      this.#cachegetUint8 = null;
      this.#heap = new Array(32).fill(undefined).concat(undefined, null, true, false);
      this.#heapNext = this.#heap.length;
      this.#type = 'none';
      this.#wasm = null;
      this.#wasmError = null;
      this.#wasmPromise = null;
      this.#wbg = { ...new Wbg(this)
      };
    }
    /** @description Returns the init error */


    get error() {
      return this.#wasmError;
    }
    /** @description Returns the init type */


    get type() {
      return this.#type;
    }
    /** @description Returns the created wbg interface */


    get wbg() {
      return this.#wbg;
    }
    /** @description Returns the created wasm interface */


    get wasm() {
      return this.#wasm;
    }
    /** @description Performs the wasm initialization */


    async init(createWasm) {
      if (!this.#wasmPromise || createWasm) {
        this.#wasmPromise = (createWasm || this.#createWasm)(this.#wbg);
      }

      const {
        error,
        type,
        wasm
      } = await this.#wasmPromise;
      this.#type = type;
      this.#wasm = wasm;
      this.#wasmError = error;
      return this.#wasm;
    }
    /**
     * @internal
     * @description Gets an object from the heap
     */


    getObject(idx) {
      return this.#heap[idx];
    }
    /**
     * @internal
     * @description Removes an object from the heap
     */


    dropObject(idx) {
      if (idx < 36) {
        return;
      }

      this.#heap[idx] = this.#heapNext;
      this.#heapNext = idx;
    }
    /**
     * @internal
     * @description Retrieves and removes an object to the heap
     */


    takeObject(idx) {
      const ret = this.getObject(idx);
      this.dropObject(idx);
      return ret;
    }
    /**
     * @internal
     * @description Adds an object to the heap
     */


    addObject(obj) {
      if (this.#heapNext === this.#heap.length) {
        this.#heap.push(this.#heap.length + 1);
      }

      const idx = this.#heapNext;
      this.#heapNext = this.#heap[idx];
      this.#heap[idx] = obj;
      return idx;
    }
    /**
     * @internal
     * @description Retrieve an Int32 in the WASM interface
     */


    getInt32() {
      if (this.#cachegetInt32 === null || this.#cachegetInt32.buffer !== this.#wasm.memory.buffer) {
        this.#cachegetInt32 = new Int32Array(this.#wasm.memory.buffer);
      }

      return this.#cachegetInt32;
    }
    /**
     * @internal
     * @description Retrieve an Uint8Array in the WASM interface
     */


    getUint8() {
      if (this.#cachegetUint8 === null || this.#cachegetUint8.buffer !== this.#wasm.memory.buffer) {
        this.#cachegetUint8 = new Uint8Array(this.#wasm.memory.buffer);
      }

      return this.#cachegetUint8;
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array in the WASM interface
     */


    getU8a(ptr, len) {
      return this.getUint8().subarray(ptr / 1, ptr / 1 + len);
    }
    /**
     * @internal
     * @description Retrieves a string in the WASM interface
     */


    getString(ptr, len) {
      return u8aToString(this.getU8a(ptr, len));
    }
    /**
     * @internal
     * @description Allocates an Uint8Array in the WASM interface
     */


    allocU8a(arg) {
      const ptr = this.#wasm.__wbindgen_malloc(arg.length * 1);

      this.getUint8().set(arg, ptr / 1);
      return [ptr, arg.length];
    }
    /**
     * @internal
     * @description Allocates a string in the WASM interface
     */


    allocString(arg) {
      return this.allocU8a(stringToU8a(arg));
    }
    /**
     * @internal
     * @description Retrieves an Uint8Array from the WASM interface
     */


    resultU8a() {
      const r0 = this.getInt32()[8 / 4 + 0];
      const r1 = this.getInt32()[8 / 4 + 1];
      const ret = this.getU8a(r0, r1).slice();

      this.#wasm.__wbindgen_free(r0, r1 * 1);

      return ret;
    }
    /**
     * @internal
     * @description Retrieve a string from the WASM interface
     */


    resultString() {
      return u8aToString(this.resultU8a());
    }

  }

  // Copyright 2019-2022 @polkadot/wasm-bundle authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name createWasmFn
   * @description
   * Create a WASM (or ASM.js) creator interface based on the supplied information.
   *
   * It will attempt to create a WASM interface first and if this fails or is not available in
   * the environment, will fallback to attempting to create an ASM.js interface.
   */
  function createWasmFn(root, wasmBytes, asmFn) {
    return async wbg => {
      const result = {
        error: null,
        type: 'none',
        wasm: null
      };

      try {
        if (!wasmBytes || !wasmBytes.length) {
          throw new Error('No WebAssembly provided for initialization');
        } else if (typeof WebAssembly !== 'object' || typeof WebAssembly.instantiate !== 'function') {
          throw new Error('WebAssembly is not available in your environment');
        }

        const source = await WebAssembly.instantiate(wasmBytes, {
          wbg
        });
        result.wasm = source.instance.exports;
        result.type = 'wasm';
      } catch (error) {
        // if we have a valid supplied asm.js, return that
        if (typeof asmFn === 'function') {
          result.wasm = asmFn(wbg);
          result.type = 'asm';
        } else {
          result.error = `FATAL: Unable to initialize @polkadot/wasm-${root}:: ${error.message}`;
          console.error(result.error);
        }
      }

      return result;
    };
  }

  // Copyright 2019-2022 @polkadot/wasm-crypto-wasm authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  var others$a = [];

  // Copyright 2017-2022 @polkadot/wasm-crypto-wasm authors & contributors
  detectPackage(packageInfo$b, null, others$a);

  // Copyright 2019-2022 @polkadot/wasm-util authors & contributors
  var others$9 = [packageInfo$a];

  // Copyright 2017-2022 @polkadot/wasm-util authors & contributors
  detectPackage(packageInfo$a, null, others$9);

  // Copyright 2019-2022 @polkadot/wasm-util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const chars$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  /**
   * @name base64Decode
   * @description
   * A fail-safe base64Decoding function that operates in all environments. Unlike
   * decoding from Buffer (Node.js only) or atob (browser-only) this implementation
   * is slightly slower, but it is platform independent.
   */

  function base64Decode$1(data) {
    // TODO: For Node.js speedups, we could add an explicit base64Node.ts implementation
    // that would be (via export maps) be available in that environment only
    const bytes = [];
    let byte = 0;
    let bits = 0;

    for (let i = 0; i < data.length && data[i] !== '='; i++) {
      // each character represents 6 bits
      byte = byte << 6 | chars$1.indexOf(data[i]); // each byte needs to contain 8 bits

      if ((bits += 6) >= 8) {
        bytes.push(byte >>> (bits -= 8) & 0xff);
      }
    }

    return Uint8Array.from(bytes);
  }

  // Copyright 2019-2022 @polkadot/wasm-util authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // MIT License
  //
  // Copyright (c) 2020 Arjun Barrett
  //
  // Copied from https://github.com/101arrowz/fflate/blob/73c737941ec89d85cdf0ad39ee6f26c5fdc95fd7/src/index.ts
  // This only contains the unzlibSync function, no compression, no async, no workers
  //
  // These 2 issues are addressed as a short-term, stop-gap solution
  //   - https://github.com/polkadot-js/api/issues/2963
  //   - https://github.com/101arrowz/fflate/issues/17
  //
  // Only tweaks make here are some TS adjustments (we use strict null checks), the code is otherwise as-is with
  // only the single required function provided (compression is still being done in the build with fflate)

  /* eslint-disable */
  // inflate state
  // aliases for shorter compressed code (most minifers don't do this)
  const u8$1 = Uint8Array,
        u16$1 = Uint16Array,
        u32$2 = Uint32Array; // code length index map

  const clim = new u8$1([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]); // fixed length extra bits

  const fleb = new u8$1([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0,
  /* unused */
  0, 0,
  /* impossible */
  0]); // fixed distance extra bits
  // see fleb note

  const fdeb = new u8$1([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13,
  /* unused */
  0, 0]); // get base, reverse index map from extra bits

  const freb = (eb, start) => {
    const b = new u16$1(31);

    for (let i = 0; i < 31; ++i) {
      b[i] = start += 1 << eb[i - 1];
    } // numbers here are at max 18 bits


    const r = new u32$2(b[30]);

    for (let i = 1; i < 30; ++i) {
      for (let j = b[i]; j < b[i + 1]; ++j) {
        r[j] = j - b[i] << 5 | i;
      }
    }

    return [b, r];
  };

  const [fl, revfl] = freb(fleb, 2); // we can ignore the fact that the other numbers are wrong; they never happen anyway

  fl[28] = 258, revfl[258] = 28;
  const [fd] = freb(fdeb, 0); // map of value to reverse (assuming 16 bits)

  const rev = new u16$1(32768);

  for (let i = 0; i < 32768; ++i) {
    // reverse table algorithm from SO
    let x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
    x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
    x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
    rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
  } // create huffman tree from u8 "map": index -> code length for code index
  // mb (max bits) must be at most 15
  // TODO: optimize/split up?


  const hMap = (cd, mb, r) => {
    const s = cd.length; // index

    let i = 0; // u16 "map": index -> # of codes with bit length = index

    const l = new u16$1(mb); // length of cd must be 288 (total # of codes)

    for (; i < s; ++i) ++l[cd[i] - 1]; // u16 "map": index -> minimum code for bit length = index


    const le = new u16$1(mb);

    for (i = 0; i < mb; ++i) {
      le[i] = le[i - 1] + l[i - 1] << 1;
    }

    let co;

    if (r) {
      // u16 "map": index -> number of actual bits, symbol for code
      co = new u16$1(1 << mb); // bits to remove for reverser

      const rvb = 15 - mb;

      for (i = 0; i < s; ++i) {
        // ignore 0 lengths
        if (cd[i]) {
          // num encoding both symbol and bits read
          const sv = i << 4 | cd[i]; // free bits

          const r = mb - cd[i]; // start value

          let v = le[cd[i] - 1]++ << r; // m is end value

          for (const m = v | (1 << r) - 1; v <= m; ++v) {
            // every 16 bit value starting with the code yields the same result
            co[rev[v] >>> rvb] = sv;
          }
        }
      }
    } else {
      co = new u16$1(s);

      for (i = 0; i < s; ++i) co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
    }

    return co;
  }; // fixed length tree


  const flt = new u8$1(288);

  for (let i = 0; i < 144; ++i) flt[i] = 8;

  for (let i = 144; i < 256; ++i) flt[i] = 9;

  for (let i = 256; i < 280; ++i) flt[i] = 7;

  for (let i = 280; i < 288; ++i) flt[i] = 8; // fixed distance tree


  const fdt = new u8$1(32);

  for (let i = 0; i < 32; ++i) fdt[i] = 5; // fixed length map


  const flrm = hMap(flt, 9, 1); // fixed distance map

  const fdrm = hMap(fdt, 5, 1); // read d, starting at bit p and mask with m

  const bits = (d, p, m) => {
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
  }; // read d, starting at bit p continuing for at least 16 bits


  const bits16 = (d, p) => {
    const o = p >>> 3;
    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
  }; // get end of byte


  const shft = p => (p >>> 3) + (p & 7 && 1); // typed array slice - allows garbage collector to free original reference,
  // while being more compatible than .slice


  const slc = (v, s, e) => {
    if (s == null || s < 0) s = 0;
    if (e == null || e > v.length) e = v.length; // can't use .constructor in case user-supplied

    const n = new (v instanceof u16$1 ? u16$1 : v instanceof u32$2 ? u32$2 : u8$1)(e - s);
    n.set(v.subarray(s, e));
    return n;
  }; // find max of array


  const max = a => {
    let m = a[0];

    for (let i = 1; i < a.length; ++i) {
      if (a[i] > m) m = a[i];
    }

    return m;
  }; // expands raw DEFLATE data


  const inflt = (dat, buf, st) => {
    const noSt = !st || st.i;
    if (!st) st = {}; // source length

    const sl = dat.length; // have to estimate size

    const noBuf = !buf || !noSt; // Assumes roughly 33% compression ratio average

    if (!buf) buf = new u8$1(sl * 3); // ensure buffer can fit at least l elements

    const cbuf = l => {
      let bl = buf.length; // need to increase size to fit

      if (l > bl) {
        // Double or set to necessary, whichever is greater
        const nbuf = new u8$1(Math.max(bl << 1, l));
        nbuf.set(buf);
        buf = nbuf;
      }
    }; //  last chunk         bitpos           bytes


    let final = st.f || 0,
        pos = st.p || 0,
        bt = st.b || 0,
        lm = st.l,
        dm = st.d,
        lbt = st.m,
        dbt = st.n;
    if (final && !lm) return buf; // total bits

    const tbts = sl << 3;

    do {
      if (!lm) {
        // BFINAL - this is only 1 when last chunk is next
        st.f = final = bits(dat, pos, 1); // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman

        const type = bits(dat, pos + 1, 3);
        pos += 3;

        if (!type) {
          // go to end of byte boundary
          const s = shft(pos) + 4,
                l = dat[s - 4] | dat[s - 3] << 8,
                t = s + l;

          if (t > sl) {
            if (noSt) throw 'unexpected EOF';
            break;
          } // ensure size


          if (noBuf) cbuf(bt + l); // Copy over uncompressed data

          buf.set(dat.subarray(s, t), bt); // Get new bitpos, update byte count

          st.b = bt += l, st.p = pos = t << 3;
          continue;
        } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;else if (type == 2) {
          //  literal                            lengths
          const hLit = bits(dat, pos, 31) + 257,
                hcLen = bits(dat, pos + 10, 15) + 4;
          const tl = hLit + bits(dat, pos + 5, 31) + 1;
          pos += 14; // length+distance tree

          const ldt = new u8$1(tl); // code length tree

          const clt = new u8$1(19);

          for (let i = 0; i < hcLen; ++i) {
            // use index map to get real code
            clt[clim[i]] = bits(dat, pos + i * 3, 7);
          }

          pos += hcLen * 3; // code lengths bits

          const clb = max(clt),
                clbmsk = (1 << clb) - 1;
          if (!noSt && pos + tl * (clb + 7) > tbts) break; // code lengths map

          const clm = hMap(clt, clb, 1);

          for (let i = 0; i < tl;) {
            const r = clm[bits(dat, pos, clbmsk)]; // bits read

            pos += r & 15; // symbol

            const s = r >>> 4; // code length to copy

            if (s < 16) {
              ldt[i++] = s;
            } else {
              //  copy   count
              let c = 0,
                  n = 0;
              if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;

              while (n--) ldt[i++] = c;
            }
          } //    length tree                 distance tree


          const lt = ldt.subarray(0, hLit),
                dt = ldt.subarray(hLit); // max length bits

          lbt = max(lt); // max dist bits

          dbt = max(dt);
          lm = hMap(lt, lbt, 1);
          dm = hMap(dt, dbt, 1);
        } else throw 'invalid block type';

        if (pos > tbts) throw 'unexpected EOF';
      } // Make sure the buffer can hold this + the largest possible addition
      // maximum chunk size (practically, theoretically infinite) is 2^17;


      if (noBuf) cbuf(bt + 131072);
      const lms = (1 << lbt) - 1,
            dms = (1 << dbt) - 1;
      const mxa = lbt + dbt + 18;

      while (noSt || pos + mxa < tbts) {
        // bits read, code
        const c = lm[bits16(dat, pos) & lms],
              sym = c >>> 4;
        pos += c & 15;
        if (pos > tbts) throw 'unexpected EOF';
        if (!c) throw 'invalid length/literal';
        if (sym < 256) buf[bt++] = sym;else if (sym == 256) {
          lm = undefined;
          break;
        } else {
          let add = sym - 254; // no extra bits needed if less

          if (sym > 264) {
            // index
            const i = sym - 257,
                  b = fleb[i];
            add = bits(dat, pos, (1 << b) - 1) + fl[i];
            pos += b;
          } // dist


          const d = dm[bits16(dat, pos) & dms],
                dsym = d >>> 4;
          if (!d) throw 'invalid distance';
          pos += d & 15;
          let dt = fd[dsym];

          if (dsym > 3) {
            const b = fdeb[dsym];
            dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
          }

          if (pos > tbts) throw 'unexpected EOF';
          if (noBuf) cbuf(bt + 131072);
          const end = bt + add;

          for (; bt < end; bt += 4) {
            buf[bt] = buf[bt - dt];
            buf[bt + 1] = buf[bt + 1 - dt];
            buf[bt + 2] = buf[bt + 2 - dt];
            buf[bt + 3] = buf[bt + 3 - dt];
          }

          bt = end;
        }
      }

      st.l = lm, st.p = pos, st.b = bt;
      if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
    } while (!final);

    return bt == buf.length ? buf : slc(buf, 0, bt);
  }; // zlib valid


  const zlv = d => {
    if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw 'invalid zlib data';
    if (d[1] & 32) throw 'invalid zlib data: preset dictionaries not supported';
  };
  /**
   * Expands Zlib data
   * @param data The data to decompress
   * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
   * @returns The decompressed version of the data
   */


  function unzlibSync(data, out) {
    return inflt((zlv(data), data.subarray(2, -4)), out);
  }

  // Copyright 2019-2022 @polkadot/wasm-crypto-wasm authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  // Generated as part of the build, do not edit

  const sizeCompressed = 171464;
  const sizeUncompressed = 340174;
  const bytes$1 = '';

  var bytes_1 = { bytes: bytes$1, sizeCompressed, sizeUncompressed };

  // Copyright 2019-2022 @polkadot/wasm-crypto-wasm authors & contributors
  /**
   * @name wasmBytes
   * @description
   * The decoded WASM interface as exposed by this package.
   *
   * The build process will output into cjs/* into a compressed base64 format.
   * Upon loading the exposed bytes will be decoded and decompressed form this
   * specific format and returned.
   */

  const wasmBytes = unzlibSync(base64Decode$1(bytes_1.bytes), new Uint8Array(bytes_1.sizeUncompressed));

  // Copyright 2019-2022 @polkadot/wasm-crypto-init authors & contributors
  /**
   * @name createWasm
   * @description
   * Creates an interface using only WASM
   */

  const createWasm = createWasmFn('crypto', wasmBytes, null);

  // Copyright 2019-2022 @polkadot/wasm-crypto authors & contributors
  /**
   * @name bridge
   * @description
   * The JS <-> WASM bridge that is in operation. For the specific package
   * it is a global, i.e. all operations happens on this specific bridge
   */

  const bridge = new Bridge(createWasm);
  /**
   * @name initBridge
   * @description
   * Creates a new bridge interface with the (optional) initialization function
   */

  async function initBridge(createWasm) {
    return bridge.init(createWasm);
  }

  // Copyright 2019-2022 @polkadot/wasm-crypto authors & contributors
  // rest of the parameters in-tack. This allows us to dynamically create a function
  // return from the withWasm helper

  /**
   * @internal
   * @description
   * This create an extenal interface function from the signature, all the while checking
   * the actual bridge wasm interface to ensure it has been initialized.
   *
   * This means that we can call it
   *
   *   withWasm(wasm: WasmCryptoInstance, a: number, b: string) => Uint8Array
   *
   * and in this case it will create an interface function with the signarure
   *
   *   (a: number, b: string) => Uint8Array
   */
  function withWasm(fn) {
    return (...params) => {
      if (!bridge.wasm) {
        throw new Error('The WASM interface has not been initialized. Ensure that you wait for the initialization Promise with waitReady() from @polkadot/wasm-crypto (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');
      }

      return fn(bridge.wasm, ...params);
    };
  }

  const bip39Generate = withWasm((wasm, words) => {
    wasm.ext_bip39_generate(8, words);
    return bridge.resultString();
  });
  const bip39ToEntropy = withWasm((wasm, phrase) => {
    wasm.ext_bip39_to_entropy(8, ...bridge.allocString(phrase));
    return bridge.resultU8a();
  });
  const bip39ToMiniSecret = withWasm((wasm, phrase, password) => {
    wasm.ext_bip39_to_mini_secret(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
    return bridge.resultU8a();
  });
  const bip39ToSeed = withWasm((wasm, phrase, password) => {
    wasm.ext_bip39_to_seed(8, ...bridge.allocString(phrase), ...bridge.allocString(password));
    return bridge.resultU8a();
  });
  const bip39Validate = withWasm((wasm, phrase) => {
    const ret = wasm.ext_bip39_validate(...bridge.allocString(phrase));
    return ret !== 0;
  });
  const ed25519KeypairFromSeed = withWasm((wasm, seed) => {
    wasm.ext_ed_from_seed(8, ...bridge.allocU8a(seed));
    return bridge.resultU8a();
  });
  const ed25519Sign$1 = withWasm((wasm, pubkey, seckey, message) => {
    wasm.ext_ed_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(seckey), ...bridge.allocU8a(message));
    return bridge.resultU8a();
  });
  const ed25519Verify$1 = withWasm((wasm, signature, message, pubkey) => {
    const ret = wasm.ext_ed_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
    return ret !== 0;
  });
  const secp256k1FromSeed = withWasm((wasm, seckey) => {
    wasm.ext_secp_from_seed(8, ...bridge.allocU8a(seckey));
    return bridge.resultU8a();
  });
  const secp256k1Compress$1 = withWasm((wasm, pubkey) => {
    wasm.ext_secp_pub_compress(8, ...bridge.allocU8a(pubkey));
    return bridge.resultU8a();
  });
  const secp256k1Expand$1 = withWasm((wasm, pubkey) => {
    wasm.ext_secp_pub_expand(8, ...bridge.allocU8a(pubkey));
    return bridge.resultU8a();
  });
  const secp256k1Recover$1 = withWasm((wasm, msgHash, sig, recovery) => {
    wasm.ext_secp_recover(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(sig), recovery);
    return bridge.resultU8a();
  });
  const secp256k1Sign$1 = withWasm((wasm, msgHash, seckey) => {
    wasm.ext_secp_sign(8, ...bridge.allocU8a(msgHash), ...bridge.allocU8a(seckey));
    return bridge.resultU8a();
  });
  const sr25519DeriveKeypairHard = withWasm((wasm, pair, cc) => {
    wasm.ext_sr_derive_keypair_hard(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
    return bridge.resultU8a();
  });
  const sr25519DeriveKeypairSoft = withWasm((wasm, pair, cc) => {
    wasm.ext_sr_derive_keypair_soft(8, ...bridge.allocU8a(pair), ...bridge.allocU8a(cc));
    return bridge.resultU8a();
  });
  const sr25519KeypairFromSeed = withWasm((wasm, seed) => {
    wasm.ext_sr_from_seed(8, ...bridge.allocU8a(seed));
    return bridge.resultU8a();
  });
  const sr25519Sign$1 = withWasm((wasm, pubkey, secret, message) => {
    wasm.ext_sr_sign(8, ...bridge.allocU8a(pubkey), ...bridge.allocU8a(secret), ...bridge.allocU8a(message));
    return bridge.resultU8a();
  });
  const sr25519Verify$1 = withWasm((wasm, signature, message, pubkey) => {
    const ret = wasm.ext_sr_verify(...bridge.allocU8a(signature), ...bridge.allocU8a(message), ...bridge.allocU8a(pubkey));
    return ret !== 0;
  });
  const vrfSign = withWasm((wasm, secret, context, message, extra) => {
    wasm.ext_vrf_sign(8, ...bridge.allocU8a(secret), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra));
    return bridge.resultU8a();
  });
  const vrfVerify = withWasm((wasm, pubkey, context, message, extra, outAndProof) => {
    const ret = wasm.ext_vrf_verify(...bridge.allocU8a(pubkey), ...bridge.allocU8a(context), ...bridge.allocU8a(message), ...bridge.allocU8a(extra), ...bridge.allocU8a(outAndProof));
    return ret !== 0;
  });
  const blake2b$1 = withWasm((wasm, data, key, size) => {
    wasm.ext_blake2b(8, ...bridge.allocU8a(data), ...bridge.allocU8a(key), size);
    return bridge.resultU8a();
  });
  const hmacSha256 = withWasm((wasm, key, data) => {
    wasm.ext_hmac_sha256(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
    return bridge.resultU8a();
  });
  const hmacSha512 = withWasm((wasm, key, data) => {
    wasm.ext_hmac_sha512(8, ...bridge.allocU8a(key), ...bridge.allocU8a(data));
    return bridge.resultU8a();
  });
  const keccak256 = withWasm((wasm, data) => {
    wasm.ext_keccak256(8, ...bridge.allocU8a(data));
    return bridge.resultU8a();
  });
  const keccak512 = withWasm((wasm, data) => {
    wasm.ext_keccak512(8, ...bridge.allocU8a(data));
    return bridge.resultU8a();
  });
  const pbkdf2$1 = withWasm((wasm, data, salt, rounds) => {
    wasm.ext_pbkdf2(8, ...bridge.allocU8a(data), ...bridge.allocU8a(salt), rounds);
    return bridge.resultU8a();
  });
  const scrypt$1 = withWasm((wasm, password, salt, log2n, r, p) => {
    wasm.ext_scrypt(8, ...bridge.allocU8a(password), ...bridge.allocU8a(salt), log2n, r, p);
    return bridge.resultU8a();
  });
  const sha256$1 = withWasm((wasm, data) => {
    wasm.ext_sha256(8, ...bridge.allocU8a(data));
    return bridge.resultU8a();
  });
  const sha512$1 = withWasm((wasm, data) => {
    wasm.ext_sha512(8, ...bridge.allocU8a(data));
    return bridge.resultU8a();
  });
  const twox = withWasm((wasm, data, rounds) => {
    wasm.ext_twox(8, ...bridge.allocU8a(data), rounds);
    return bridge.resultU8a();
  });
  function isReady() {
    return !!bridge.wasm;
  }
  async function waitReady() {
    try {
      const wasm = await initBridge();
      return !!wasm;
    } catch {
      return false;
    }
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function cryptoWaitReady() {
    return waitReady().then(() => {
      assert$1(isReady(), 'Unable to initialize @polkadot/util-crypto');
      return true;
    }).catch(() => false);
  }

  function number(n) {
      if (!Number.isSafeInteger(n) || n < 0)
          throw new Error(`Wrong positive integer: ${n}`);
  }
  function bool$1(b) {
      if (typeof b !== 'boolean')
          throw new Error(`Expected boolean, not ${b}`);
  }
  function bytes(b, ...lengths) {
      if (!(b instanceof Uint8Array))
          throw new TypeError('Expected Uint8Array');
      if (lengths.length > 0 && !lengths.includes(b.length))
          throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
  }
  function hash(hash) {
      if (typeof hash !== 'function' || typeof hash.create !== 'function')
          throw new Error('Hash should be wrapped by utils.wrapConstructor');
      number(hash.outputLen);
      number(hash.blockLen);
  }
  function exists(instance, checkFinished = true) {
      if (instance.destroyed)
          throw new Error('Hash instance has been destroyed');
      if (checkFinished && instance.finished)
          throw new Error('Hash#digest() has already been called');
  }
  function output(out, instance) {
      bytes(out);
      const min = instance.outputLen;
      if (out.length < min) {
          throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
  }
  const assert = {
      number,
      bool: bool$1,
      bytes,
      hash,
      exists,
      output,
  };

  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  const u32$1 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  // Cast array to view
  const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  // The rotate right (circular right shift) operation for uint32
  const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
  const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
  // There is almost no big endian hardware, but js typed arrays uses platform specific endianness.
  // So, just to be sure not to corrupt anything.
  if (!isLE)
      throw new Error('Non little-endian hardware is not supported');
  Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
  function utf8ToBytes(str) {
      if (typeof str !== 'string') {
          throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);
      }
      return new TextEncoder().encode(str);
  }
  function toBytes(data) {
      if (typeof data === 'string')
          data = utf8ToBytes(data);
      if (!(data instanceof Uint8Array))
          throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);
      return data;
  }
  // For runtime check if class implements interface
  class Hash {
      // Safe version that clones internal state
      clone() {
          return this._cloneInto();
      }
  }
  // Check if object doens't have custom constructor (like Uint8Array/Array)
  const isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;
  function checkOpts(defaults, opts) {
      if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))
          throw new TypeError('Options should be object or undefined');
      const merged = Object.assign(defaults, opts);
      return merged;
  }
  function wrapConstructor(hashConstructor) {
      const hashC = (message) => hashConstructor().update(toBytes(message)).digest();
      const tmp = hashConstructor();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashConstructor();
      return hashC;
  }
  function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
  }

  // HMAC (RFC 2104)
  class HMAC extends Hash {
      constructor(hash, _key) {
          super();
          this.finished = false;
          this.destroyed = false;
          assert.hash(hash);
          const key = toBytes(_key);
          this.iHash = hash.create();
          if (!(this.iHash instanceof Hash))
              throw new TypeError('Expected instance of class which extends utils.Hash');
          const blockLen = (this.blockLen = this.iHash.blockLen);
          this.outputLen = this.iHash.outputLen;
          const pad = new Uint8Array(blockLen);
          // blockLen can be bigger than outputLen
          pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);
          for (let i = 0; i < pad.length; i++)
              pad[i] ^= 0x36;
          this.iHash.update(pad);
          // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
          this.oHash = hash.create();
          // Undo internal XOR && apply outer XOR
          for (let i = 0; i < pad.length; i++)
              pad[i] ^= 0x36 ^ 0x5c;
          this.oHash.update(pad);
          pad.fill(0);
      }
      update(buf) {
          assert.exists(this);
          this.iHash.update(buf);
          return this;
      }
      digestInto(out) {
          assert.exists(this);
          assert.bytes(out, this.outputLen);
          this.finished = true;
          this.iHash.digestInto(out);
          this.oHash.update(out);
          this.oHash.digestInto(out);
          this.destroy();
      }
      digest() {
          const out = new Uint8Array(this.oHash.outputLen);
          this.digestInto(out);
          return out;
      }
      _cloneInto(to) {
          // Create new instance without calling constructor since key already in state and we don't know it.
          to || (to = Object.create(Object.getPrototypeOf(this), {}));
          const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
          to = to;
          to.finished = finished;
          to.destroyed = destroyed;
          to.blockLen = blockLen;
          to.outputLen = outputLen;
          to.oHash = oHash._cloneInto(to.oHash);
          to.iHash = iHash._cloneInto(to.iHash);
          return to;
      }
      destroy() {
          this.destroyed = true;
          this.oHash.destroy();
          this.iHash.destroy();
      }
  }
  /**
   * HMAC: RFC2104 message authentication code.
   * @param hash - function that would be used e.g. sha256
   * @param key - message key
   * @param message - message data
   */
  const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
  hmac.create = (hash, key) => new HMAC(hash, key);

  // Polyfill for Safari 14
  function setBigUint64(view, byteOffset, value, isLE) {
      if (typeof view.setBigUint64 === 'function')
          return view.setBigUint64(byteOffset, value, isLE);
      const _32n = BigInt(32);
      const _u32_max = BigInt(0xffffffff);
      const wh = Number((value >> _32n) & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE ? 4 : 0;
      const l = isLE ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE);
      view.setUint32(byteOffset + l, wl, isLE);
  }
  // Base SHA2 class (RFC 6234)
  class SHA2 extends Hash {
      constructor(blockLen, outputLen, padOffset, isLE) {
          super();
          this.blockLen = blockLen;
          this.outputLen = outputLen;
          this.padOffset = padOffset;
          this.isLE = isLE;
          this.finished = false;
          this.length = 0;
          this.pos = 0;
          this.destroyed = false;
          this.buffer = new Uint8Array(blockLen);
          this.view = createView(this.buffer);
      }
      update(data) {
          assert.exists(this);
          const { view, buffer, blockLen } = this;
          data = toBytes(data);
          const len = data.length;
          for (let pos = 0; pos < len;) {
              const take = Math.min(blockLen - this.pos, len - pos);
              // Fast path: we have at least one block in input, cast it to view and process
              if (take === blockLen) {
                  const dataView = createView(data);
                  for (; blockLen <= len - pos; pos += blockLen)
                      this.process(dataView, pos);
                  continue;
              }
              buffer.set(data.subarray(pos, pos + take), this.pos);
              this.pos += take;
              pos += take;
              if (this.pos === blockLen) {
                  this.process(view, 0);
                  this.pos = 0;
              }
          }
          this.length += data.length;
          this.roundClean();
          return this;
      }
      digestInto(out) {
          assert.exists(this);
          assert.output(out, this);
          this.finished = true;
          // Padding
          // We can avoid allocation of buffer for padding completely if it
          // was previously not allocated here. But it won't change performance.
          const { buffer, view, blockLen, isLE } = this;
          let { pos } = this;
          // append the bit '1' to the message
          buffer[pos++] = 0b10000000;
          this.buffer.subarray(pos).fill(0);
          // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
          if (this.padOffset > blockLen - pos) {
              this.process(view, 0);
              pos = 0;
          }
          // Pad until full block byte with zeros
          for (let i = pos; i < blockLen; i++)
              buffer[i] = 0;
          // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
          // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
          // So we just write lowest 64 bits of that value.
          setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
          this.process(view, 0);
          const oview = createView(out);
          this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));
      }
      digest() {
          const { buffer, outputLen } = this;
          this.digestInto(buffer);
          const res = buffer.slice(0, outputLen);
          this.destroy();
          return res;
      }
      _cloneInto(to) {
          to || (to = new this.constructor());
          to.set(...this.get());
          const { blockLen, buffer, length, finished, destroyed, pos } = this;
          to.length = length;
          to.pos = pos;
          to.finished = finished;
          to.destroyed = destroyed;
          if (length % blockLen)
              to.buffer.set(buffer);
          return to;
      }
  }

  // Choice: a ? b : c
  const Chi = (a, b, c) => (a & b) ^ (~a & c);
  // Majority function, true if any two inpust is true
  const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
  // Round constants:
  // first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
  // prettier-ignore
  const SHA256_K = new Uint32Array([
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ]);
  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
  // prettier-ignore
  const IV$1 = new Uint32Array([
      0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ]);
  // Temporary buffer, not used to store anything between runs
  // Named this way because it matches specification.
  const SHA256_W = new Uint32Array(64);
  class SHA256 extends SHA2 {
      constructor() {
          super(64, 32, 8, false);
          // We cannot use array here since array allows indexing by variable
          // which means optimizer/compiler cannot use registers.
          this.A = IV$1[0] | 0;
          this.B = IV$1[1] | 0;
          this.C = IV$1[2] | 0;
          this.D = IV$1[3] | 0;
          this.E = IV$1[4] | 0;
          this.F = IV$1[5] | 0;
          this.G = IV$1[6] | 0;
          this.H = IV$1[7] | 0;
      }
      get() {
          const { A, B, C, D, E, F, G, H } = this;
          return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
          this.F = F | 0;
          this.G = G | 0;
          this.H = H | 0;
      }
      process(view, offset) {
          // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
          for (let i = 0; i < 16; i++, offset += 4)
              SHA256_W[i] = view.getUint32(offset, false);
          for (let i = 16; i < 64; i++) {
              const W15 = SHA256_W[i - 15];
              const W2 = SHA256_W[i - 2];
              const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);
              const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);
              SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
          }
          // Compression function main loop, 64 rounds
          let { A, B, C, D, E, F, G, H } = this;
          for (let i = 0; i < 64; i++) {
              const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
              const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
              const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
              const T2 = (sigma0 + Maj(A, B, C)) | 0;
              H = G;
              G = F;
              F = E;
              E = (D + T1) | 0;
              D = C;
              C = B;
              B = A;
              A = (T1 + T2) | 0;
          }
          // Add the compressed chunk to the current hash value
          A = (A + this.A) | 0;
          B = (B + this.B) | 0;
          C = (C + this.C) | 0;
          D = (D + this.D) | 0;
          E = (E + this.E) | 0;
          F = (F + this.F) | 0;
          G = (G + this.G) | 0;
          H = (H + this.H) | 0;
          this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
          SHA256_W.fill(0);
      }
      destroy() {
          this.set(0, 0, 0, 0, 0, 0, 0, 0);
          this.buffer.fill(0);
      }
  }
  /**
   * SHA2-256 hash function
   * @param message - data that would be hashed
   */
  const sha256 = wrapConstructor(() => new SHA256());

  const U32_MASK64 = BigInt(2 ** 32 - 1);
  const _32n$1 = BigInt(32);
  // We are not using BigUint64Array, because they are extremely slow as per 2022
  function fromBig(n, le = false) {
      if (le)
          return { h: Number(n & U32_MASK64), l: Number((n >> _32n$1) & U32_MASK64) };
      return { h: Number((n >> _32n$1) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  function split(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
          const { h, l } = fromBig(lst[i], le);
          [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
  }
  const toBig = (h, l) => (BigInt(h >>> 0) << _32n$1) | BigInt(l >>> 0);
  // for Shift in [0, 32)
  const shrSH = (h, l, s) => h >>> s;
  const shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
  // Right rotate for Shift in [1, 32)
  const rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
  const rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
  // Right rotate for Shift in (32, 64), NOTE: 32 is special case.
  const rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
  const rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
  // Right rotate for shift===32 (just swaps l&h)
  const rotr32H = (h, l) => l;
  const rotr32L = (h, l) => h;
  // Left rotate for Shift in [1, 32)
  const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
  const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
  // Left rotate for Shift in (32, 64), NOTE: 32 is special case.
  const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
  const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
  // JS uses 32-bit signed integers for bitwise operations which means we cannot
  // simple take carry out of low bit sum by shift, we need to use division.
  // Removing "export" has 5% perf penalty -_-
  function add(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
  }
  // Addition with more than 2 elements
  const add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
  const add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
  const add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
  const add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
  const add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
  const add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
  // prettier-ignore
  const u64$1 = {
      fromBig, split, toBig,
      shrSH, shrSL,
      rotrSH, rotrSL, rotrBH, rotrBL,
      rotr32H, rotr32L,
      rotlSH, rotlSL, rotlBH, rotlBL,
      add, add3L, add3H, add4L, add4H, add5H, add5L,
  };

  // Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
  // prettier-ignore
  const [SHA512_Kh, SHA512_Kl] = u64$1.split([
      '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',
      '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',
      '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',
      '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',
      '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',
      '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',
      '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',
      '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',
      '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',
      '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',
      '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',
      '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',
      '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',
      '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',
      '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',
      '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',
      '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',
      '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',
      '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',
      '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'
  ].map(n => BigInt(n)));
  // Temporary buffer, not used to store anything between runs
  const SHA512_W_H = new Uint32Array(80);
  const SHA512_W_L = new Uint32Array(80);
  class SHA512 extends SHA2 {
      constructor() {
          super(128, 64, 16, false);
          // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
          // Also looks cleaner and easier to verify with spec.
          // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
          // h -- high 32 bits, l -- low 32 bits
          this.Ah = 0x6a09e667 | 0;
          this.Al = 0xf3bcc908 | 0;
          this.Bh = 0xbb67ae85 | 0;
          this.Bl = 0x84caa73b | 0;
          this.Ch = 0x3c6ef372 | 0;
          this.Cl = 0xfe94f82b | 0;
          this.Dh = 0xa54ff53a | 0;
          this.Dl = 0x5f1d36f1 | 0;
          this.Eh = 0x510e527f | 0;
          this.El = 0xade682d1 | 0;
          this.Fh = 0x9b05688c | 0;
          this.Fl = 0x2b3e6c1f | 0;
          this.Gh = 0x1f83d9ab | 0;
          this.Gl = 0xfb41bd6b | 0;
          this.Hh = 0x5be0cd19 | 0;
          this.Hl = 0x137e2179 | 0;
      }
      // prettier-ignore
      get() {
          const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
          this.Ah = Ah | 0;
          this.Al = Al | 0;
          this.Bh = Bh | 0;
          this.Bl = Bl | 0;
          this.Ch = Ch | 0;
          this.Cl = Cl | 0;
          this.Dh = Dh | 0;
          this.Dl = Dl | 0;
          this.Eh = Eh | 0;
          this.El = El | 0;
          this.Fh = Fh | 0;
          this.Fl = Fl | 0;
          this.Gh = Gh | 0;
          this.Gl = Gl | 0;
          this.Hh = Hh | 0;
          this.Hl = Hl | 0;
      }
      process(view, offset) {
          // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
          for (let i = 0; i < 16; i++, offset += 4) {
              SHA512_W_H[i] = view.getUint32(offset);
              SHA512_W_L[i] = view.getUint32((offset += 4));
          }
          for (let i = 16; i < 80; i++) {
              // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
              const W15h = SHA512_W_H[i - 15] | 0;
              const W15l = SHA512_W_L[i - 15] | 0;
              const s0h = u64$1.rotrSH(W15h, W15l, 1) ^ u64$1.rotrSH(W15h, W15l, 8) ^ u64$1.shrSH(W15h, W15l, 7);
              const s0l = u64$1.rotrSL(W15h, W15l, 1) ^ u64$1.rotrSL(W15h, W15l, 8) ^ u64$1.shrSL(W15h, W15l, 7);
              // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
              const W2h = SHA512_W_H[i - 2] | 0;
              const W2l = SHA512_W_L[i - 2] | 0;
              const s1h = u64$1.rotrSH(W2h, W2l, 19) ^ u64$1.rotrBH(W2h, W2l, 61) ^ u64$1.shrSH(W2h, W2l, 6);
              const s1l = u64$1.rotrSL(W2h, W2l, 19) ^ u64$1.rotrBL(W2h, W2l, 61) ^ u64$1.shrSL(W2h, W2l, 6);
              // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
              const SUMl = u64$1.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
              const SUMh = u64$1.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
              SHA512_W_H[i] = SUMh | 0;
              SHA512_W_L[i] = SUMl | 0;
          }
          let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          // Compression function main loop, 80 rounds
          for (let i = 0; i < 80; i++) {
              // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
              const sigma1h = u64$1.rotrSH(Eh, El, 14) ^ u64$1.rotrSH(Eh, El, 18) ^ u64$1.rotrBH(Eh, El, 41);
              const sigma1l = u64$1.rotrSL(Eh, El, 14) ^ u64$1.rotrSL(Eh, El, 18) ^ u64$1.rotrBL(Eh, El, 41);
              //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
              const CHIh = (Eh & Fh) ^ (~Eh & Gh);
              const CHIl = (El & Fl) ^ (~El & Gl);
              // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
              // prettier-ignore
              const T1ll = u64$1.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
              const T1h = u64$1.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
              const T1l = T1ll | 0;
              // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
              const sigma0h = u64$1.rotrSH(Ah, Al, 28) ^ u64$1.rotrBH(Ah, Al, 34) ^ u64$1.rotrBH(Ah, Al, 39);
              const sigma0l = u64$1.rotrSL(Ah, Al, 28) ^ u64$1.rotrBL(Ah, Al, 34) ^ u64$1.rotrBL(Ah, Al, 39);
              const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
              const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
              Hh = Gh | 0;
              Hl = Gl | 0;
              Gh = Fh | 0;
              Gl = Fl | 0;
              Fh = Eh | 0;
              Fl = El | 0;
              ({ h: Eh, l: El } = u64$1.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
              Dh = Ch | 0;
              Dl = Cl | 0;
              Ch = Bh | 0;
              Cl = Bl | 0;
              Bh = Ah | 0;
              Bl = Al | 0;
              const All = u64$1.add3L(T1l, sigma0l, MAJl);
              Ah = u64$1.add3H(All, T1h, sigma0h, MAJh);
              Al = All | 0;
          }
          // Add the compressed chunk to the current hash value
          ({ h: Ah, l: Al } = u64$1.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
          ({ h: Bh, l: Bl } = u64$1.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
          ({ h: Ch, l: Cl } = u64$1.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
          ({ h: Dh, l: Dl } = u64$1.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
          ({ h: Eh, l: El } = u64$1.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
          ({ h: Fh, l: Fl } = u64$1.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
          ({ h: Gh, l: Gl } = u64$1.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
          ({ h: Hh, l: Hl } = u64$1.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
          this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
          SHA512_W_H.fill(0);
          SHA512_W_L.fill(0);
      }
      destroy() {
          this.buffer.fill(0);
          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
  }
  class SHA512_256 extends SHA512 {
      constructor() {
          super();
          // h -- high 32 bits, l -- low 32 bits
          this.Ah = 0x22312194 | 0;
          this.Al = 0xfc2bf72c | 0;
          this.Bh = 0x9f555fa3 | 0;
          this.Bl = 0xc84c64c2 | 0;
          this.Ch = 0x2393b86b | 0;
          this.Cl = 0x6f53b151 | 0;
          this.Dh = 0x96387719 | 0;
          this.Dl = 0x5940eabd | 0;
          this.Eh = 0x96283ee2 | 0;
          this.El = 0xa88effe3 | 0;
          this.Fh = 0xbe5e1e25 | 0;
          this.Fl = 0x53863992 | 0;
          this.Gh = 0x2b0199fc | 0;
          this.Gl = 0x2c85b8aa | 0;
          this.Hh = 0x0eb72ddc | 0;
          this.Hl = 0x81c52ca2 | 0;
          this.outputLen = 32;
      }
  }
  class SHA384 extends SHA512 {
      constructor() {
          super();
          // h -- high 32 bits, l -- low 32 bits
          this.Ah = 0xcbbb9d5d | 0;
          this.Al = 0xc1059ed8 | 0;
          this.Bh = 0x629a292a | 0;
          this.Bl = 0x367cd507 | 0;
          this.Ch = 0x9159015a | 0;
          this.Cl = 0x3070dd17 | 0;
          this.Dh = 0x152fecd8 | 0;
          this.Dl = 0xf70e5939 | 0;
          this.Eh = 0x67332667 | 0;
          this.El = 0xffc00b31 | 0;
          this.Fh = 0x8eb44a87 | 0;
          this.Fl = 0x68581511 | 0;
          this.Gh = 0xdb0c2e0d | 0;
          this.Gl = 0x64f98fa7 | 0;
          this.Hh = 0x47b5481d | 0;
          this.Hl = 0xbefa4fa4 | 0;
          this.outputLen = 48;
      }
  }
  const sha512 = wrapConstructor(() => new SHA512());
  wrapConstructor(() => new SHA512_256());
  wrapConstructor(() => new SHA384());

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const JS_HASH = {
    256: sha256,
    512: sha512
  };
  const WA_MHAC = {
    256: hmacSha256,
    512: hmacSha512
  };

  function createSha(bitLength) {
    return (key, data, onlyJs) => hmacShaAsU8a(key, data, bitLength, onlyJs);
  }
  /**
   * @name hmacShaAsU8a
   * @description creates a Hmac Sha (256/512) Uint8Array from the key & data
   */


  function hmacShaAsU8a(key, data, bitLength = 256, onlyJs) {
    const u8aKey = u8aToU8a(key);
    return !hasBigInt || !onlyJs && isReady() ? WA_MHAC[bitLength](u8aKey, data) : hmac(JS_HASH[bitLength], u8aKey, data);
  }
  /**
   * @name hmacSha256AsU8a
   * @description creates a Hmac Sha256 Uint8Array from the key & data
   */

  const hmacSha256AsU8a = createSha(256);

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  //   - hmacShaSync - This needs to be set, unset by default

  utils$1.hmacSha256Sync = (key, ...messages) => hmacSha256AsU8a(key, u8aConcat(...messages)); // start init process immediately


  cryptoWaitReady().catch(() => {// shouldn't happen, logged and caught inside cryptoWaitReady
  });

  /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  function assertNumber(n) {
      if (!Number.isSafeInteger(n))
          throw new Error(`Wrong integer: ${n}`);
  }
  function chain$1(...args) {
      const wrap = (a, b) => (c) => a(b(c));
      const encode = Array.from(args)
          .reverse()
          .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);
      const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);
      return { encode, decode };
  }
  function alphabet(alphabet) {
      return {
          encode: (digits) => {
              if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                  throw new Error('alphabet.encode input should be an array of numbers');
              return digits.map((i) => {
                  assertNumber(i);
                  if (i < 0 || i >= alphabet.length)
                      throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);
                  return alphabet[i];
              });
          },
          decode: (input) => {
              if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                  throw new Error('alphabet.decode input should be array of strings');
              return input.map((letter) => {
                  if (typeof letter !== 'string')
                      throw new Error(`alphabet.decode: not string element=${letter}`);
                  const index = alphabet.indexOf(letter);
                  if (index === -1)
                      throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet}`);
                  return index;
              });
          },
      };
  }
  function join(separator = '') {
      if (typeof separator !== 'string')
          throw new Error('join separator should be string');
      return {
          encode: (from) => {
              if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))
                  throw new Error('join.encode input should be array of strings');
              for (let i of from)
                  if (typeof i !== 'string')
                      throw new Error(`join.encode: non-string input=${i}`);
              return from.join(separator);
          },
          decode: (to) => {
              if (typeof to !== 'string')
                  throw new Error('join.decode input should be string');
              return to.split(separator);
          },
      };
  }
  function padding(bits, chr = '=') {
      assertNumber(bits);
      if (typeof chr !== 'string')
          throw new Error('padding chr should be string');
      return {
          encode(data) {
              if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))
                  throw new Error('padding.encode input should be array of strings');
              for (let i of data)
                  if (typeof i !== 'string')
                      throw new Error(`padding.encode: non-string input=${i}`);
              while ((data.length * bits) % 8)
                  data.push(chr);
              return data;
          },
          decode(input) {
              if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                  throw new Error('padding.encode input should be array of strings');
              for (let i of input)
                  if (typeof i !== 'string')
                      throw new Error(`padding.decode: non-string input=${i}`);
              let end = input.length;
              if ((end * bits) % 8)
                  throw new Error('Invalid padding: string should have whole number of bytes');
              for (; end > 0 && input[end - 1] === chr; end--) {
                  if (!(((end - 1) * bits) % 8))
                      throw new Error('Invalid padding: string has too much padding');
              }
              return input.slice(0, end);
          },
      };
  }
  function normalize$1(fn) {
      if (typeof fn !== 'function')
          throw new Error('normalize fn should be function');
      return { encode: (from) => from, decode: (to) => fn(to) };
  }
  function convertRadix(data, from, to) {
      if (from < 2)
          throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
      if (to < 2)
          throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
      if (!Array.isArray(data))
          throw new Error('convertRadix: data should be array');
      if (!data.length)
          return [];
      let pos = 0;
      const res = [];
      const digits = Array.from(data);
      digits.forEach((d) => {
          assertNumber(d);
          if (d < 0 || d >= from)
              throw new Error(`Wrong integer: ${d}`);
      });
      while (true) {
          let carry = 0;
          let done = true;
          for (let i = pos; i < digits.length; i++) {
              const digit = digits[i];
              const digitBase = from * carry + digit;
              if (!Number.isSafeInteger(digitBase) ||
                  (from * carry) / from !== carry ||
                  digitBase - digit !== from * carry) {
                  throw new Error('convertRadix: carry overflow');
              }
              carry = digitBase % to;
              digits[i] = Math.floor(digitBase / to);
              if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)
                  throw new Error('convertRadix: carry overflow');
              if (!done)
                  continue;
              else if (!digits[i])
                  pos = i;
              else
                  done = false;
          }
          res.push(carry);
          if (done)
              break;
      }
      for (let i = 0; i < data.length - 1 && data[i] === 0; i++)
          res.push(0);
      return res.reverse();
  }
  const gcd = (a, b) => (!b ? a : gcd(b, a % b));
  const radix2carry = (from, to) => from + (to - gcd(from, to));
  function convertRadix2(data, from, to, padding) {
      if (!Array.isArray(data))
          throw new Error('convertRadix2: data should be array');
      if (from <= 0 || from > 32)
          throw new Error(`convertRadix2: wrong from=${from}`);
      if (to <= 0 || to > 32)
          throw new Error(`convertRadix2: wrong to=${to}`);
      if (radix2carry(from, to) > 32) {
          throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
      }
      let carry = 0;
      let pos = 0;
      const mask = 2 ** to - 1;
      const res = [];
      for (const n of data) {
          assertNumber(n);
          if (n >= 2 ** from)
              throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
          carry = (carry << from) | n;
          if (pos + from > 32)
              throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
          pos += from;
          for (; pos >= to; pos -= to)
              res.push(((carry >> (pos - to)) & mask) >>> 0);
          carry &= 2 ** pos - 1;
      }
      carry = (carry << (to - pos)) & mask;
      if (!padding && pos >= from)
          throw new Error('Excess padding');
      if (!padding && carry)
          throw new Error(`Non-zero padding: ${carry}`);
      if (padding && pos > 0)
          res.push(carry >>> 0);
      return res;
  }
  function radix(num) {
      assertNumber(num);
      return {
          encode: (bytes) => {
              if (!(bytes instanceof Uint8Array))
                  throw new Error('radix.encode input should be Uint8Array');
              return convertRadix(Array.from(bytes), 2 ** 8, num);
          },
          decode: (digits) => {
              if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                  throw new Error('radix.decode input should be array of strings');
              return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
          },
      };
  }
  function radix2(bits, revPadding = false) {
      assertNumber(bits);
      if (bits <= 0 || bits > 32)
          throw new Error('radix2: bits should be in (0..32]');
      if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
          throw new Error('radix2: carry overflow');
      return {
          encode: (bytes) => {
              if (!(bytes instanceof Uint8Array))
                  throw new Error('radix2.encode input should be Uint8Array');
              return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
          },
          decode: (digits) => {
              if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                  throw new Error('radix2.decode input should be array of strings');
              return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
          },
      };
  }
  function unsafeWrapper(fn) {
      if (typeof fn !== 'function')
          throw new Error('unsafeWrapper fn should be function');
      return function (...args) {
          try {
              return fn.apply(null, args);
          }
          catch (e) { }
      };
  }
  function checksum(len, fn) {
      assertNumber(len);
      if (typeof fn !== 'function')
          throw new Error('checksum fn should be function');
      return {
          encode(data) {
              if (!(data instanceof Uint8Array))
                  throw new Error('checksum.encode: input should be Uint8Array');
              const checksum = fn(data).slice(0, len);
              const res = new Uint8Array(data.length + len);
              res.set(data);
              res.set(checksum, data.length);
              return res;
          },
          decode(data) {
              if (!(data instanceof Uint8Array))
                  throw new Error('checksum.decode: input should be Uint8Array');
              const payload = data.slice(0, -len);
              const newChecksum = fn(payload).slice(0, len);
              const oldChecksum = data.slice(-len);
              for (let i = 0; i < len; i++)
                  if (newChecksum[i] !== oldChecksum[i])
                      throw new Error('Invalid checksum');
              return payload;
          },
      };
  }
  const utils = { alphabet, chain: chain$1, checksum, radix, radix2, join, padding };
  const base16 = chain$1(radix2(4), alphabet('0123456789ABCDEF'), join(''));
  const base32 = chain$1(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));
  chain$1(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));
  chain$1(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize$1((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));
  const base64 = chain$1(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));
  const base64url = chain$1(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));
  const genBase58 = (abc) => chain$1(radix(58), alphabet(abc), join(''));
  const base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
  genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');
  genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');
  const XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];
  const base58xmr = {
      encode(data) {
          let res = '';
          for (let i = 0; i < data.length; i += 8) {
              const block = data.subarray(i, i + 8);
              res += base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');
          }
          return res;
      },
      decode(str) {
          let res = [];
          for (let i = 0; i < str.length; i += 11) {
              const slice = str.slice(i, i + 11);
              const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);
              const block = base58.decode(slice);
              for (let j = 0; j < block.length - blockLen; j++) {
                  if (block[j] !== 0)
                      throw new Error('base58xmr: wrong padding');
              }
              res = res.concat(Array.from(block.slice(block.length - blockLen)));
          }
          return Uint8Array.from(res);
      },
  };
  const BECH_ALPHABET = chain$1(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));
  const POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];
  function bech32Polymod(pre) {
      const b = pre >> 25;
      let chk = (pre & 0x1ffffff) << 5;
      for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
          if (((b >> i) & 1) === 1)
              chk ^= POLYMOD_GENERATORS[i];
      }
      return chk;
  }
  function bechChecksum(prefix, words, encodingConst = 1) {
      const len = prefix.length;
      let chk = 1;
      for (let i = 0; i < len; i++) {
          const c = prefix.charCodeAt(i);
          if (c < 33 || c > 126)
              throw new Error(`Invalid prefix (${prefix})`);
          chk = bech32Polymod(chk) ^ (c >> 5);
      }
      chk = bech32Polymod(chk);
      for (let i = 0; i < len; i++)
          chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);
      for (let v of words)
          chk = bech32Polymod(chk) ^ v;
      for (let i = 0; i < 6; i++)
          chk = bech32Polymod(chk);
      chk ^= encodingConst;
      return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
  }
  function genBech32(encoding) {
      const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;
      const _words = radix2(5);
      const fromWords = _words.decode;
      const toWords = _words.encode;
      const fromWordsUnsafe = unsafeWrapper(fromWords);
      function encode(prefix, words, limit = 90) {
          if (typeof prefix !== 'string')
              throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
          if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))
              throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
          const actualLength = prefix.length + 7 + words.length;
          if (limit !== false && actualLength > limit)
              throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
          prefix = prefix.toLowerCase();
          return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;
      }
      function decode(str, limit = 90) {
          if (typeof str !== 'string')
              throw new Error(`bech32.decode input should be string, not ${typeof str}`);
          if (str.length < 8 || (limit !== false && str.length > limit))
              throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);
          const lowered = str.toLowerCase();
          if (str !== lowered && str !== str.toUpperCase())
              throw new Error(`String must be lowercase or uppercase`);
          str = lowered;
          const sepIndex = str.lastIndexOf('1');
          if (sepIndex === 0 || sepIndex === -1)
              throw new Error(`Letter "1" must be present between prefix and data only`);
          const prefix = str.slice(0, sepIndex);
          const _words = str.slice(sepIndex + 1);
          if (_words.length < 6)
              throw new Error('Data must be at least 6 characters long');
          const words = BECH_ALPHABET.decode(_words).slice(0, -6);
          const sum = bechChecksum(prefix, words, ENCODING_CONST);
          if (!_words.endsWith(sum))
              throw new Error(`Invalid checksum in ${str}: expected "${sum}"`);
          return { prefix, words };
      }
      const decodeUnsafe = unsafeWrapper(decode);
      function decodeToBytes(str) {
          const { prefix, words } = decode(str, false);
          return { prefix, words, bytes: fromWords(words) };
      }
      return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
  }
  genBech32('bech32');
  genBech32('bech32m');
  const utf8 = {
      encode: (data) => new TextDecoder().decode(data),
      decode: (str) => new TextEncoder().encode(str),
  };
  const hex = chain$1(radix2(4), alphabet('0123456789abcdef'), join(''), normalize$1((s) => {
      if (typeof s !== 'string' || s.length % 2)
          throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
      return s.toLowerCase();
  }));
  const CODERS = {
      utf8, hex, base16, base32, base64, base64url, base58, base58xmr
  };
`Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors

  /** @internal */
  function createDecode({
    coder,
    ipfs
  }, validate) {
    return (value, ipfsCompat) => {
      validate(value, ipfsCompat);
      return coder.decode(ipfs && ipfsCompat ? value.substring(1) : value);
    };
  }
  /** @internal */

  function createEncode({
    coder,
    ipfs
  }) {
    return (value, ipfsCompat) => {
      const out = coder.encode(u8aToU8a(value));
      return ipfs && ipfsCompat ? `${ipfs}${out}` : out;
    };
  }
  /** @internal */

  function createValidate({
    chars,
    ipfs,
    type
  }) {
    return (value, ipfsCompat) => {
      assert$1(value && typeof value === 'string', () => `Expected non-null, non-empty ${type} string input`);

      if (ipfs && ipfsCompat) {
        assert$1(value[0] === ipfs, () => `Expected ipfs-compatible ${type} to start with '${ipfs}'`);
      }

      for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {
        assert$1(chars.includes(value[i]) || value[i] === '=' && (i === value.length - 1 || !chars.includes(value[i + 1])), () => `Invalid ${type} character "${value[i]}" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);
      }

      return true;
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const config$3 = {
    chars: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz',
    coder: base58,
    ipfs: 'z',
    type: 'base58'
  };
  /**
   * @name base58Validate
   * @summary Validates a base58 value.
   * @description
   * Validates that the supplied value is valid base58, throwing exceptions if not
   */

  const base58Validate = createValidate(config$3);
  /**
   * @name base58Decode
   * @summary Decodes a base58 value.
   * @description
   * From the provided input, decode the base58 and return the result as an `Uint8Array`.
   */

  const base58Decode = createDecode(config$3, base58Validate);
  /**
  * @name base58Encode
  * @summary Creates a base58 value.
  * @description
  * From the provided input, create the base58 and return the result as a string.
  */

  const base58Encode = createEncode(config$3);

  // prettier-ignore
  const SIGMA = new Uint8Array([
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
      11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4,
      7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8,
      9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13,
      2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9,
      12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11,
      13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10,
      6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5,
      10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0,
      // For BLAKE2b, the two extra permutations for rounds 10 and 11 are SIGMA[10..11] = SIGMA[0..1].
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3,
  ]);
  class BLAKE2 extends Hash {
      constructor(blockLen, outputLen, opts = {}, keyLen, saltLen, persLen) {
          super();
          this.blockLen = blockLen;
          this.outputLen = outputLen;
          this.length = 0;
          this.pos = 0;
          this.finished = false;
          this.destroyed = false;
          assert.number(blockLen);
          assert.number(outputLen);
          assert.number(keyLen);
          if (outputLen < 0 || outputLen > keyLen)
              throw new Error('Blake2: outputLen bigger than keyLen');
          if (opts.key !== undefined && (opts.key.length < 1 || opts.key.length > keyLen))
              throw new Error(`Key should be up 1..${keyLen} byte long or undefined`);
          if (opts.salt !== undefined && opts.salt.length !== saltLen)
              throw new Error(`Salt should be ${saltLen} byte long or undefined`);
          if (opts.personalization !== undefined && opts.personalization.length !== persLen)
              throw new Error(`Personalization should be ${persLen} byte long or undefined`);
          this.buffer32 = u32$1((this.buffer = new Uint8Array(blockLen)));
      }
      update(data) {
          assert.exists(this);
          // Main difference with other hashes: there is flag for last block,
          // so we cannot process current block before we know that there
          // is the next one. This significantly complicates logic and reduces ability
          // to do zero-copy processing
          const { blockLen, buffer, buffer32 } = this;
          data = toBytes(data);
          const len = data.length;
          for (let pos = 0; pos < len;) {
              // If buffer is full and we still have input (don't process last block, same as blake2s)
              if (this.pos === blockLen) {
                  this.compress(buffer32, 0, false);
                  this.pos = 0;
              }
              const take = Math.min(blockLen - this.pos, len - pos);
              const dataOffset = data.byteOffset + pos;
              // full block && aligned to 4 bytes && not last in input
              if (take === blockLen && !(dataOffset % 4) && pos + take < len) {
                  const data32 = new Uint32Array(data.buffer, dataOffset, Math.floor((len - pos) / 4));
                  for (let pos32 = 0; pos + blockLen < len; pos32 += buffer32.length, pos += blockLen) {
                      this.length += blockLen;
                      this.compress(data32, pos32, false);
                  }
                  continue;
              }
              buffer.set(data.subarray(pos, pos + take), this.pos);
              this.pos += take;
              this.length += take;
              pos += take;
          }
          return this;
      }
      digestInto(out) {
          assert.exists(this);
          assert.output(out, this);
          const { pos, buffer32 } = this;
          this.finished = true;
          // Padding
          this.buffer.subarray(pos).fill(0);
          this.compress(buffer32, 0, true);
          const out32 = u32$1(out);
          this.get().forEach((v, i) => (out32[i] = v));
      }
      digest() {
          const { buffer, outputLen } = this;
          this.digestInto(buffer);
          const res = buffer.slice(0, outputLen);
          this.destroy();
          return res;
      }
      _cloneInto(to) {
          const { buffer, length, finished, destroyed, outputLen, pos } = this;
          to || (to = new this.constructor({ dkLen: outputLen }));
          to.set(...this.get());
          to.length = length;
          to.finished = finished;
          to.destroyed = destroyed;
          to.outputLen = outputLen;
          to.buffer.set(buffer);
          to.pos = pos;
          return to;
      }
  }

  // Same as SHA-512 but LE
  // prettier-ignore
  const IV = new Uint32Array([
      0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a,
      0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19
  ]);
  // Temporary buffer
  const BUF = new Uint32Array(32);
  // Mixing function G splitted in two halfs
  function G1(a, b, c, d, msg, x) {
      // NOTE: V is LE here
      const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
      let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
      let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
      let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
      let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
      // v[a] = (v[a] + v[b] + x) | 0;
      let ll = u64$1.add3L(Al, Bl, Xl);
      Ah = u64$1.add3H(ll, Ah, Bh, Xh);
      Al = ll | 0;
      // v[d] = rotr(v[d] ^ v[a], 32)
      ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
      ({ Dh, Dl } = { Dh: u64$1.rotr32H(Dh, Dl), Dl: u64$1.rotr32L(Dh, Dl) });
      // v[c] = (v[c] + v[d]) | 0;
      ({ h: Ch, l: Cl } = u64$1.add(Ch, Cl, Dh, Dl));
      // v[b] = rotr(v[b] ^ v[c], 24)
      ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
      ({ Bh, Bl } = { Bh: u64$1.rotrSH(Bh, Bl, 24), Bl: u64$1.rotrSL(Bh, Bl, 24) });
      (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
      (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
      (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
      (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
  }
  function G2(a, b, c, d, msg, x) {
      // NOTE: V is LE here
      const Xl = msg[x], Xh = msg[x + 1]; // prettier-ignore
      let Al = BUF[2 * a], Ah = BUF[2 * a + 1]; // prettier-ignore
      let Bl = BUF[2 * b], Bh = BUF[2 * b + 1]; // prettier-ignore
      let Cl = BUF[2 * c], Ch = BUF[2 * c + 1]; // prettier-ignore
      let Dl = BUF[2 * d], Dh = BUF[2 * d + 1]; // prettier-ignore
      // v[a] = (v[a] + v[b] + x) | 0;
      let ll = u64$1.add3L(Al, Bl, Xl);
      Ah = u64$1.add3H(ll, Ah, Bh, Xh);
      Al = ll | 0;
      // v[d] = rotr(v[d] ^ v[a], 16)
      ({ Dh, Dl } = { Dh: Dh ^ Ah, Dl: Dl ^ Al });
      ({ Dh, Dl } = { Dh: u64$1.rotrSH(Dh, Dl, 16), Dl: u64$1.rotrSL(Dh, Dl, 16) });
      // v[c] = (v[c] + v[d]) | 0;
      ({ h: Ch, l: Cl } = u64$1.add(Ch, Cl, Dh, Dl));
      // v[b] = rotr(v[b] ^ v[c], 63)
      ({ Bh, Bl } = { Bh: Bh ^ Ch, Bl: Bl ^ Cl });
      ({ Bh, Bl } = { Bh: u64$1.rotrBH(Bh, Bl, 63), Bl: u64$1.rotrBL(Bh, Bl, 63) });
      (BUF[2 * a] = Al), (BUF[2 * a + 1] = Ah);
      (BUF[2 * b] = Bl), (BUF[2 * b + 1] = Bh);
      (BUF[2 * c] = Cl), (BUF[2 * c + 1] = Ch);
      (BUF[2 * d] = Dl), (BUF[2 * d + 1] = Dh);
  }
  class BLAKE2b extends BLAKE2 {
      constructor(opts = {}) {
          super(128, opts.dkLen === undefined ? 64 : opts.dkLen, opts, 64, 16, 16);
          // Same as SHA-512, but LE
          this.v0l = IV[0] | 0;
          this.v0h = IV[1] | 0;
          this.v1l = IV[2] | 0;
          this.v1h = IV[3] | 0;
          this.v2l = IV[4] | 0;
          this.v2h = IV[5] | 0;
          this.v3l = IV[6] | 0;
          this.v3h = IV[7] | 0;
          this.v4l = IV[8] | 0;
          this.v4h = IV[9] | 0;
          this.v5l = IV[10] | 0;
          this.v5h = IV[11] | 0;
          this.v6l = IV[12] | 0;
          this.v6h = IV[13] | 0;
          this.v7l = IV[14] | 0;
          this.v7h = IV[15] | 0;
          const keyLength = opts.key ? opts.key.length : 0;
          this.v0l ^= this.outputLen | (keyLength << 8) | (0x01 << 16) | (0x01 << 24);
          if (opts.salt) {
              const salt = u32$1(toBytes(opts.salt));
              this.v4l ^= salt[0];
              this.v4h ^= salt[1];
              this.v5l ^= salt[2];
              this.v5h ^= salt[3];
          }
          if (opts.personalization) {
              const pers = u32$1(toBytes(opts.personalization));
              this.v6l ^= pers[0];
              this.v6h ^= pers[1];
              this.v7l ^= pers[2];
              this.v7h ^= pers[3];
          }
          if (opts.key) {
              // Pad to blockLen and update
              const tmp = new Uint8Array(this.blockLen);
              tmp.set(toBytes(opts.key));
              this.update(tmp);
          }
      }
      // prettier-ignore
      get() {
          let { v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h } = this;
          return [v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h];
      }
      // prettier-ignore
      set(v0l, v0h, v1l, v1h, v2l, v2h, v3l, v3h, v4l, v4h, v5l, v5h, v6l, v6h, v7l, v7h) {
          this.v0l = v0l | 0;
          this.v0h = v0h | 0;
          this.v1l = v1l | 0;
          this.v1h = v1h | 0;
          this.v2l = v2l | 0;
          this.v2h = v2h | 0;
          this.v3l = v3l | 0;
          this.v3h = v3h | 0;
          this.v4l = v4l | 0;
          this.v4h = v4h | 0;
          this.v5l = v5l | 0;
          this.v5h = v5h | 0;
          this.v6l = v6l | 0;
          this.v6h = v6h | 0;
          this.v7l = v7l | 0;
          this.v7h = v7h | 0;
      }
      compress(msg, offset, isLast) {
          this.get().forEach((v, i) => (BUF[i] = v)); // First half from state.
          BUF.set(IV, 16); // Second half from IV.
          let { h, l } = u64$1.fromBig(BigInt(this.length));
          BUF[24] = IV[8] ^ l; // Low word of the offset.
          BUF[25] = IV[9] ^ h; // High word.
          // Invert all bits for last block
          if (isLast) {
              BUF[28] = ~BUF[28];
              BUF[29] = ~BUF[29];
          }
          let j = 0;
          const s = SIGMA;
          for (let i = 0; i < 12; i++) {
              G1(0, 4, 8, 12, msg, offset + 2 * s[j++]);
              G2(0, 4, 8, 12, msg, offset + 2 * s[j++]);
              G1(1, 5, 9, 13, msg, offset + 2 * s[j++]);
              G2(1, 5, 9, 13, msg, offset + 2 * s[j++]);
              G1(2, 6, 10, 14, msg, offset + 2 * s[j++]);
              G2(2, 6, 10, 14, msg, offset + 2 * s[j++]);
              G1(3, 7, 11, 15, msg, offset + 2 * s[j++]);
              G2(3, 7, 11, 15, msg, offset + 2 * s[j++]);
              G1(0, 5, 10, 15, msg, offset + 2 * s[j++]);
              G2(0, 5, 10, 15, msg, offset + 2 * s[j++]);
              G1(1, 6, 11, 12, msg, offset + 2 * s[j++]);
              G2(1, 6, 11, 12, msg, offset + 2 * s[j++]);
              G1(2, 7, 8, 13, msg, offset + 2 * s[j++]);
              G2(2, 7, 8, 13, msg, offset + 2 * s[j++]);
              G1(3, 4, 9, 14, msg, offset + 2 * s[j++]);
              G2(3, 4, 9, 14, msg, offset + 2 * s[j++]);
          }
          this.v0l ^= BUF[0] ^ BUF[16];
          this.v0h ^= BUF[1] ^ BUF[17];
          this.v1l ^= BUF[2] ^ BUF[18];
          this.v1h ^= BUF[3] ^ BUF[19];
          this.v2l ^= BUF[4] ^ BUF[20];
          this.v2h ^= BUF[5] ^ BUF[21];
          this.v3l ^= BUF[6] ^ BUF[22];
          this.v3h ^= BUF[7] ^ BUF[23];
          this.v4l ^= BUF[8] ^ BUF[24];
          this.v4h ^= BUF[9] ^ BUF[25];
          this.v5l ^= BUF[10] ^ BUF[26];
          this.v5h ^= BUF[11] ^ BUF[27];
          this.v6l ^= BUF[12] ^ BUF[28];
          this.v6h ^= BUF[13] ^ BUF[29];
          this.v7l ^= BUF[14] ^ BUF[30];
          this.v7h ^= BUF[15] ^ BUF[31];
          BUF.fill(0);
      }
      destroy() {
          this.destroyed = true;
          this.buffer32.fill(0);
          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
  }
  /**
   * BLAKE2b - optimized for 64-bit platforms. JS doesn't have uint64, so it's slower than BLAKE2s.
   * @param msg - message that would be hashed
   * @param opts - dkLen, key, salt, personalization
   */
  const blake2b = wrapConstructorWithOpts((opts) => new BLAKE2b(opts));

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /** @internal */

  function createBitHasher(bitLength, fn) {
    return (data, onlyJs) => fn(data, bitLength, onlyJs);
  }
  /** @internal */

  function createDualHasher(wa, js) {
    return (value, bitLength = 256, onlyJs) => {
      const u8a = u8aToU8a(value);
      return !hasBigInt || !onlyJs && isReady() ? wa[bitLength](u8a) : js[bitLength](u8a);
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name blake2AsU8a
   * @summary Creates a blake2b u8a from the input.
   * @description
   * From a `Uint8Array` input, create the blake2b and return the result as a u8a with the specified `bitLength`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { blake2AsU8a } from '@polkadot/util-crypto';
   *
   * blake2AsU8a('abc'); // => [0xba, 0x80, 0xa5, 0x3f, 0x98, 0x1c, 0x4d, 0x0d]
   * ```
   */

  function blake2AsU8a(data, bitLength = 256, key, onlyJs) {
    const byteLength = Math.ceil(bitLength / 8);
    const u8a = u8aToU8a(data);
    return !hasBigInt || !onlyJs && isReady() ? blake2b$1(u8a, u8aToU8a(key), byteLength) : blake2b(u8a, {
      dkLen: byteLength,
      key: key || undefined
    });
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const SS58_PREFIX = stringToU8a('SS58PRE');
  function sshash(key) {
    return blake2AsU8a(u8aConcat(SS58_PREFIX, key), 512);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function checkAddressChecksum(decoded) {
    const ss58Length = decoded[0] & 0b01000000 ? 2 : 1;
    const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 0b00111111) << 2 | decoded[1] >> 6 | (decoded[1] & 0b00111111) << 8; // 32/33 bytes public + 2 bytes checksum + prefix

    const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);
    const length = decoded.length - (isPublicKey ? 2 : 1); // calculate the hash and do the checksum byte checks

    const hash = sshash(decoded.subarray(0, length));
    const isValid = (decoded[0] & 0b10000000) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);
    return [isValid, length, ss58Length, ss58Decoded];
  }

  // Copyright (C) 2021-2022 Parity Technologies (UK) Ltd.
  // SPDX-License-Identifier: Apache-2.0
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  // 	http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.

  var knownSubstrate = [
  	{
  		"prefix": 0,
  		"network": "polkadot",
  		"displayName": "Polkadot Relay Chain",
  		"symbols": [
  			"DOT"
  		],
  		"decimals": [
  			10
  		],
  		"standardAccount": "*25519",
  		"website": "https://polkadot.network"
  	},
  	{
  		"prefix": 1,
  		"network": "BareSr25519",
  		"displayName": "Bare 32-bit Schnorr/Ristretto (S/R 25519) public key.",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "Sr25519",
  		"website": null
  	},
  	{
  		"prefix": 2,
  		"network": "kusama",
  		"displayName": "Kusama Relay Chain",
  		"symbols": [
  			"KSM"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://kusama.network"
  	},
  	{
  		"prefix": 3,
  		"network": "BareEd25519",
  		"displayName": "Bare 32-bit Ed25519 public key.",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "Ed25519",
  		"website": null
  	},
  	{
  		"prefix": 4,
  		"network": "katalchain",
  		"displayName": "Katal Chain",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "*25519",
  		"website": null
  	},
  	{
  		"prefix": 5,
  		"network": "astar",
  		"displayName": "Astar Network",
  		"symbols": [
  			"ASTR"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://astar.network"
  	},
  	{
  		"prefix": 6,
  		"network": "bifrost",
  		"displayName": "Bifrost",
  		"symbols": [
  			"BNC"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://bifrost.finance/"
  	},
  	{
  		"prefix": 7,
  		"network": "edgeware",
  		"displayName": "Edgeware",
  		"symbols": [
  			"EDG"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://edgewa.re"
  	},
  	{
  		"prefix": 8,
  		"network": "karura",
  		"displayName": "Karura",
  		"symbols": [
  			"KAR"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://karura.network/"
  	},
  	{
  		"prefix": 9,
  		"network": "reynolds",
  		"displayName": "Laminar Reynolds Canary",
  		"symbols": [
  			"REY"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "http://laminar.network/"
  	},
  	{
  		"prefix": 10,
  		"network": "acala",
  		"displayName": "Acala",
  		"symbols": [
  			"ACA"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://acala.network/"
  	},
  	{
  		"prefix": 11,
  		"network": "laminar",
  		"displayName": "Laminar",
  		"symbols": [
  			"LAMI"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "http://laminar.network/"
  	},
  	{
  		"prefix": 12,
  		"network": "polymesh",
  		"displayName": "Polymesh",
  		"symbols": [
  			"POLYX"
  		],
  		"decimals": [
  			6
  		],
  		"standardAccount": "*25519",
  		"website": "https://polymath.network/"
  	},
  	{
  		"prefix": 13,
  		"network": "integritee",
  		"displayName": "Integritee",
  		"symbols": [
  			"TEER"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://integritee.network"
  	},
  	{
  		"prefix": 14,
  		"network": "totem",
  		"displayName": "Totem",
  		"symbols": [
  			"TOTEM"
  		],
  		"decimals": [
  			0
  		],
  		"standardAccount": "*25519",
  		"website": "https://totemaccounting.com"
  	},
  	{
  		"prefix": 15,
  		"network": "synesthesia",
  		"displayName": "Synesthesia",
  		"symbols": [
  			"SYN"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://synesthesia.network/"
  	},
  	{
  		"prefix": 16,
  		"network": "kulupu",
  		"displayName": "Kulupu",
  		"symbols": [
  			"KLP"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://kulupu.network/"
  	},
  	{
  		"prefix": 17,
  		"network": "dark",
  		"displayName": "Dark Mainnet",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "*25519",
  		"website": null
  	},
  	{
  		"prefix": 18,
  		"network": "darwinia",
  		"displayName": "Darwinia Network",
  		"symbols": [
  			"RING",
  			"KTON"
  		],
  		"decimals": [
  			9,
  			9
  		],
  		"standardAccount": "*25519",
  		"website": "https://darwinia.network/"
  	},
  	{
  		"prefix": 20,
  		"network": "stafi",
  		"displayName": "Stafi",
  		"symbols": [
  			"FIS"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://stafi.io"
  	},
  	{
  		"prefix": 22,
  		"network": "dock-pos-mainnet",
  		"displayName": "Dock Mainnet",
  		"symbols": [
  			"DCK"
  		],
  		"decimals": [
  			6
  		],
  		"standardAccount": "*25519",
  		"website": "https://dock.io"
  	},
  	{
  		"prefix": 23,
  		"network": "shift",
  		"displayName": "ShiftNrg",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "*25519",
  		"website": null
  	},
  	{
  		"prefix": 24,
  		"network": "zero",
  		"displayName": "ZERO",
  		"symbols": [
  			"ZERO"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://zero.io"
  	},
  	{
  		"prefix": 25,
  		"network": "zero-alphaville",
  		"displayName": "ZERO Alphaville",
  		"symbols": [
  			"ZERO"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://zero.io"
  	},
  	{
  		"prefix": 26,
  		"network": "jupiter",
  		"displayName": "Jupiter",
  		"symbols": [
  			"jDOT"
  		],
  		"decimals": [
  			10
  		],
  		"standardAccount": "*25519",
  		"website": "https://jupiter.patract.io"
  	},
  	{
  		"prefix": 27,
  		"network": "kabocha",
  		"displayName": "Kabocha",
  		"symbols": [
  			"KAB"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://kabocha.network"
  	},
  	{
  		"prefix": 28,
  		"network": "subsocial",
  		"displayName": "Subsocial",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "*25519",
  		"website": null
  	},
  	{
  		"prefix": 29,
  		"network": "cord",
  		"displayName": "CORD Network",
  		"symbols": [
  			"DHI",
  			"WAY"
  		],
  		"decimals": [
  			12,
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://cord.network/"
  	},
  	{
  		"prefix": 30,
  		"network": "phala",
  		"displayName": "Phala Network",
  		"symbols": [
  			"PHA"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://phala.network"
  	},
  	{
  		"prefix": 31,
  		"network": "litentry",
  		"displayName": "Litentry Network",
  		"symbols": [
  			"LIT"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://litentry.com/"
  	},
  	{
  		"prefix": 32,
  		"network": "robonomics",
  		"displayName": "Robonomics",
  		"symbols": [
  			"XRT"
  		],
  		"decimals": [
  			9
  		],
  		"standardAccount": "*25519",
  		"website": "https://robonomics.network"
  	},
  	{
  		"prefix": 33,
  		"network": "datahighway",
  		"displayName": "DataHighway",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "*25519",
  		"website": null
  	},
  	{
  		"prefix": 34,
  		"network": "ares",
  		"displayName": "Ares Protocol",
  		"symbols": [
  			"ARES"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://www.aresprotocol.com/"
  	},
  	{
  		"prefix": 35,
  		"network": "vln",
  		"displayName": "Valiu Liquidity Network",
  		"symbols": [
  			"USDv"
  		],
  		"decimals": [
  			15
  		],
  		"standardAccount": "*25519",
  		"website": "https://valiu.com/"
  	},
  	{
  		"prefix": 36,
  		"network": "centrifuge",
  		"displayName": "Centrifuge Chain",
  		"symbols": [
  			"CFG"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://centrifuge.io/"
  	},
  	{
  		"prefix": 37,
  		"network": "nodle",
  		"displayName": "Nodle Chain",
  		"symbols": [
  			"NODL"
  		],
  		"decimals": [
  			11
  		],
  		"standardAccount": "*25519",
  		"website": "https://nodle.io/"
  	},
  	{
  		"prefix": 38,
  		"network": "kilt",
  		"displayName": "KILT Spiritnet",
  		"symbols": [
  			"KILT"
  		],
  		"decimals": [
  			15
  		],
  		"standardAccount": "*25519",
  		"website": "https://kilt.io/"
  	},
  	{
  		"prefix": 39,
  		"network": "mathchain",
  		"displayName": "MathChain mainnet",
  		"symbols": [
  			"MATH"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://mathwallet.org"
  	},
  	{
  		"prefix": 40,
  		"network": "mathchain-testnet",
  		"displayName": "MathChain testnet",
  		"symbols": [
  			"MATH"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://mathwallet.org"
  	},
  	{
  		"prefix": 41,
  		"network": "poli",
  		"displayName": "Polimec Chain",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "*25519",
  		"website": "https://polimec.io/"
  	},
  	{
  		"prefix": 42,
  		"network": "substrate",
  		"displayName": "Substrate",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "*25519",
  		"website": "https://substrate.io/"
  	},
  	{
  		"prefix": 43,
  		"network": "BareSecp256k1",
  		"displayName": "Bare 32-bit ECDSA SECP-256k1 public key.",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "secp256k1",
  		"website": null
  	},
  	{
  		"prefix": 44,
  		"network": "chainx",
  		"displayName": "ChainX",
  		"symbols": [
  			"PCX"
  		],
  		"decimals": [
  			8
  		],
  		"standardAccount": "*25519",
  		"website": "https://chainx.org/"
  	},
  	{
  		"prefix": 45,
  		"network": "uniarts",
  		"displayName": "UniArts Network",
  		"symbols": [
  			"UART",
  			"UINK"
  		],
  		"decimals": [
  			12,
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://uniarts.me"
  	},
  	{
  		"prefix": 46,
  		"network": "reserved46",
  		"displayName": "This prefix is reserved.",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": null,
  		"website": null
  	},
  	{
  		"prefix": 47,
  		"network": "reserved47",
  		"displayName": "This prefix is reserved.",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": null,
  		"website": null
  	},
  	{
  		"prefix": 48,
  		"network": "neatcoin",
  		"displayName": "Neatcoin Mainnet",
  		"symbols": [
  			"NEAT"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://neatcoin.org"
  	},
  	{
  		"prefix": 49,
  		"network": "picasso",
  		"displayName": "Picasso",
  		"symbols": [
  			"PICA"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://picasso.composable.finance"
  	},
  	{
  		"prefix": 50,
  		"network": "composable",
  		"displayName": "Composable",
  		"symbols": [
  			"LAYR"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://composable.finance"
  	},
  	{
  		"prefix": 51,
  		"network": "oak",
  		"displayName": "OAK Network",
  		"symbols": [
  			"OAK"
  		],
  		"decimals": [
  			10
  		],
  		"standardAccount": "*25519",
  		"website": "https://oak.tech"
  	},
  	{
  		"prefix": 52,
  		"network": "KICO",
  		"displayName": "KICO",
  		"symbols": [
  			"KICO"
  		],
  		"decimals": [
  			14
  		],
  		"standardAccount": "*25519",
  		"website": "https://dico.io"
  	},
  	{
  		"prefix": 53,
  		"network": "DICO",
  		"displayName": "DICO",
  		"symbols": [
  			"DICO"
  		],
  		"decimals": [
  			14
  		],
  		"standardAccount": "*25519",
  		"website": "https://dico.io"
  	},
  	{
  		"prefix": 54,
  		"network": "cere",
  		"displayName": "Cere Network",
  		"symbols": [
  			"CERE"
  		],
  		"decimals": [
  			10
  		],
  		"standardAccount": "*25519",
  		"website": "https://cere.network"
  	},
  	{
  		"prefix": 55,
  		"network": "xxnetwork",
  		"displayName": "xx network",
  		"symbols": [
  			"XX"
  		],
  		"decimals": [
  			9
  		],
  		"standardAccount": "*25519",
  		"website": "https://xx.network"
  	},
  	{
  		"prefix": 56,
  		"network": "pendulum",
  		"displayName": "Pendulum chain",
  		"symbols": [
  			"PEN"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://pendulumchain.org/"
  	},
  	{
  		"prefix": 57,
  		"network": "amplitude",
  		"displayName": "Amplitude chain",
  		"symbols": [
  			"AMPE"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://pendulumchain.org/"
  	},
  	{
  		"prefix": 63,
  		"network": "hydradx",
  		"displayName": "HydraDX",
  		"symbols": [
  			"HDX"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://hydradx.io"
  	},
  	{
  		"prefix": 65,
  		"network": "aventus",
  		"displayName": "AvN Mainnet",
  		"symbols": [
  			"AVT"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://aventus.io"
  	},
  	{
  		"prefix": 66,
  		"network": "crust",
  		"displayName": "Crust Network",
  		"symbols": [
  			"CRU"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://crust.network"
  	},
  	{
  		"prefix": 67,
  		"network": "genshiro",
  		"displayName": "Genshiro Network",
  		"symbols": [
  			"GENS",
  			"EQD",
  			"LPT0"
  		],
  		"decimals": [
  			9,
  			9,
  			9
  		],
  		"standardAccount": "*25519",
  		"website": "https://genshiro.equilibrium.io"
  	},
  	{
  		"prefix": 68,
  		"network": "equilibrium",
  		"displayName": "Equilibrium Network",
  		"symbols": [
  			"EQ"
  		],
  		"decimals": [
  			9
  		],
  		"standardAccount": "*25519",
  		"website": "https://equilibrium.io"
  	},
  	{
  		"prefix": 69,
  		"network": "sora",
  		"displayName": "SORA Network",
  		"symbols": [
  			"XOR"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://sora.org"
  	},
  	{
  		"prefix": 73,
  		"network": "zeitgeist",
  		"displayName": "Zeitgeist",
  		"symbols": [
  			"ZTG"
  		],
  		"decimals": [
  			10
  		],
  		"standardAccount": "*25519",
  		"website": "https://zeitgeist.pm"
  	},
  	{
  		"prefix": 77,
  		"network": "manta",
  		"displayName": "Manta network",
  		"symbols": [
  			"MANTA"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://manta.network"
  	},
  	{
  		"prefix": 78,
  		"network": "calamari",
  		"displayName": "Calamari: Manta Canary Network",
  		"symbols": [
  			"KMA"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://manta.network"
  	},
  	{
  		"prefix": 88,
  		"network": "polkadex",
  		"displayName": "Polkadex Mainnet",
  		"symbols": [
  			"PDEX"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://polkadex.trade"
  	},
  	{
  		"prefix": 89,
  		"network": "polkadexparachain",
  		"displayName": "Polkadex Parachain",
  		"symbols": [
  			"PDEX"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://polkadex.trade"
  	},
  	{
  		"prefix": 93,
  		"network": "fragnova",
  		"displayName": "Fragnova Network",
  		"symbols": [
  			"NOVA"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://fragnova.com"
  	},
  	{
  		"prefix": 98,
  		"network": "polkasmith",
  		"displayName": "PolkaSmith Canary Network",
  		"symbols": [
  			"PKS"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://polkafoundry.com"
  	},
  	{
  		"prefix": 99,
  		"network": "polkafoundry",
  		"displayName": "PolkaFoundry Network",
  		"symbols": [
  			"PKF"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://polkafoundry.com"
  	},
  	{
  		"prefix": 101,
  		"network": "origintrail-parachain",
  		"displayName": "OriginTrail Parachain",
  		"symbols": [
  			"OTP"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://parachain.origintrail.io/"
  	},
  	{
  		"prefix": 105,
  		"network": "pontem-network",
  		"displayName": "Pontem Network",
  		"symbols": [
  			"PONT"
  		],
  		"decimals": [
  			10
  		],
  		"standardAccount": "*25519",
  		"website": "https://pontem.network"
  	},
  	{
  		"prefix": 110,
  		"network": "heiko",
  		"displayName": "Heiko",
  		"symbols": [
  			"HKO"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://parallel.fi/"
  	},
  	{
  		"prefix": 113,
  		"network": "integritee-incognito",
  		"displayName": "Integritee Incognito",
  		"symbols": [],
  		"decimals": [],
  		"standardAccount": "*25519",
  		"website": "https://integritee.network"
  	},
  	{
  		"prefix": 117,
  		"network": "tinker",
  		"displayName": "Tinker",
  		"symbols": [
  			"TNKR"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://invarch.network"
  	},
  	{
  		"prefix": 128,
  		"network": "clover",
  		"displayName": "Clover Finance",
  		"symbols": [
  			"CLV"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://clover.finance"
  	},
  	{
  		"prefix": 131,
  		"network": "litmus",
  		"displayName": "Litmus Network",
  		"symbols": [
  			"LIT"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://litentry.com/"
  	},
  	{
  		"prefix": 136,
  		"network": "altair",
  		"displayName": "Altair",
  		"symbols": [
  			"AIR"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://centrifuge.io/"
  	},
  	{
  		"prefix": 172,
  		"network": "parallel",
  		"displayName": "Parallel",
  		"symbols": [
  			"PARA"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://parallel.fi/"
  	},
  	{
  		"prefix": 252,
  		"network": "social-network",
  		"displayName": "Social Network",
  		"symbols": [
  			"NET"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://social.network"
  	},
  	{
  		"prefix": 255,
  		"network": "quartz_mainnet",
  		"displayName": "QUARTZ by UNIQUE",
  		"symbols": [
  			"QTZ"
  		],
  		"decimals": [
  			15
  		],
  		"standardAccount": "*25519",
  		"website": "https://unique.network"
  	},
  	{
  		"prefix": 268,
  		"network": "pioneer_network",
  		"displayName": "Pioneer Network by Bit.Country",
  		"symbols": [
  			"NEER"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://bit.country"
  	},
  	{
  		"prefix": 420,
  		"network": "sora_kusama_para",
  		"displayName": "SORA Kusama Parachain",
  		"symbols": [
  			"XOR"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://sora.org"
  	},
  	{
  		"prefix": 789,
  		"network": "geek",
  		"displayName": "GEEK Network",
  		"symbols": [
  			"GEEK"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://geek.gl"
  	},
  	{
  		"prefix": 1110,
  		"network": "efinity",
  		"displayName": "Efinity",
  		"symbols": [
  			"EFI"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "Sr25519",
  		"website": "https://efinity.io/"
  	},
  	{
  		"prefix": 1221,
  		"network": "peaq",
  		"displayName": "Peaq Network",
  		"symbols": [
  			"PEAQ"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "Sr25519",
  		"website": "https://www.peaq.network/"
  	},
  	{
  		"prefix": 1222,
  		"network": "apex",
  		"displayName": "Apex Network",
  		"symbols": [
  			"APEX"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "Sr25519",
  		"website": "https://www.peaq.network/"
  	},
  	{
  		"prefix": 1284,
  		"network": "moonbeam",
  		"displayName": "Moonbeam",
  		"symbols": [
  			"GLMR"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "secp256k1",
  		"website": "https://moonbeam.network"
  	},
  	{
  		"prefix": 1285,
  		"network": "moonriver",
  		"displayName": "Moonriver",
  		"symbols": [
  			"MOVR"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "secp256k1",
  		"website": "https://moonbeam.network"
  	},
  	{
  		"prefix": 1328,
  		"network": "ajuna",
  		"displayName": "Ajuna Network",
  		"symbols": [
  			"AJUN"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://ajuna.io"
  	},
  	{
  		"prefix": 1337,
  		"network": "bajun",
  		"displayName": "Bajun Network",
  		"symbols": [
  			"BAJU"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://ajuna.io"
  	},
  	{
  		"prefix": 2007,
  		"network": "kapex",
  		"displayName": "Kapex",
  		"symbols": [
  			"KAPEX"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://totemaccounting.com"
  	},
  	{
  		"prefix": 2032,
  		"network": "interlay",
  		"displayName": "Interlay",
  		"symbols": [
  			"INTR"
  		],
  		"decimals": [
  			10
  		],
  		"standardAccount": "*25519",
  		"website": "https://interlay.io/"
  	},
  	{
  		"prefix": 2092,
  		"network": "kintsugi",
  		"displayName": "Kintsugi",
  		"symbols": [
  			"KINT"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://interlay.io/"
  	},
  	{
  		"prefix": 2254,
  		"network": "subspace_testnet",
  		"displayName": "Subspace testnet",
  		"symbols": [
  			"tSSC"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://subspace.network"
  	},
  	{
  		"prefix": 6094,
  		"network": "subspace",
  		"displayName": "Subspace",
  		"symbols": [
  			"SSC"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://subspace.network"
  	},
  	{
  		"prefix": 7007,
  		"network": "tidefi",
  		"displayName": "Tidefi",
  		"symbols": [
  			"TIFI"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://tidefi.com"
  	},
  	{
  		"prefix": 7391,
  		"network": "unique_mainnet",
  		"displayName": "Unique Network",
  		"symbols": [
  			"UNQ"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://unique.network"
  	},
  	{
  		"prefix": 9807,
  		"network": "dentnet",
  		"displayName": "DENTNet",
  		"symbols": [
  			"DENTX"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://www.dentnet.io"
  	},
  	{
  		"prefix": 10041,
  		"network": "basilisk",
  		"displayName": "Basilisk",
  		"symbols": [
  			"BSX"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://bsx.fi"
  	},
  	{
  		"prefix": 11330,
  		"network": "cess-testnet",
  		"displayName": "CESS Testnet",
  		"symbols": [
  			"TCESS"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://cess.cloud"
  	},
  	{
  		"prefix": 11331,
  		"network": "cess",
  		"displayName": "CESS",
  		"symbols": [
  			"CESS"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://cess.cloud"
  	},
  	{
  		"prefix": 11820,
  		"network": "contextfree",
  		"displayName": "Automata ContextFree",
  		"symbols": [
  			"CTX"
  		],
  		"decimals": [
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://ata.network"
  	},
  	{
  		"prefix": 15253,
  		"network": "ice-network",
  		"displayName": "ICE Network",
  		"symbols": [
  			"ICX",
  			"ICY"
  		],
  		"decimals": [
  			18,
  			18
  		],
  		"standardAccount": "*25519",
  		"website": "https://icenetwork.io"
  	},
  	{
  		"prefix": 12191,
  		"network": "nftmart",
  		"displayName": "NFTMart",
  		"symbols": [
  			"NMT"
  		],
  		"decimals": [
  			12
  		],
  		"standardAccount": "*25519",
  		"website": "https://nftmart.io"
  	}
  ];

  // Copyright 2017-2022 @polkadot/networks authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // NOTE: In the case where the network was hard-spooned and multiple genesisHashes
  // are provided, it needs to be in reverse order, i.e. most-recent first, oldest
  // last. This make lookups for the current a simple genesisHash[0]
  // (See Kusama as an example)
  const knownGenesis = {
    acala: ['0xfc41b9bd8ef8fe53d58c7ea67c794c7ec9a73daf05e6d54b14ff6342c99ba64c'],
    astar: ['0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6'],
    basilisk: ['0xa85cfb9b9fd4d622a5b28289a02347af987d8f73fa3108450e2b4a11c1ce5755'],
    bifrost: ['0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b'],
    centrifuge: ['0xb3db41421702df9a7fcac62b53ffeac85f7853cc4e689e0b93aeb3db18c09d82', '0x67dddf2673b69e5f875f6f25277495834398eafd67f492e09f3f3345e003d1b5'],
    composable: ['0xdaab8df776eb52ec604a5df5d388bb62a050a0aaec4556a64265b9d42755552d'],
    'dock-mainnet': ['0x6bfe24dca2a3be10f22212678ac13a6446ec764103c0f3471c71609eac384aae', '0xf73467c6544aa68df2ee546b135f955c46b90fa627e9b5d7935f41061bb8a5a9'],
    edgeware: ['0x742a2ca70c2fda6cee4f8df98d64c4c670a052d9568058982dad9d5a7a135c5b'],
    equilibrium: ['0x6f1a800de3daff7f5e037ddf66ab22ce03ab91874debeddb1086f5f7dbd48925'],
    genshiro: ['0x9b8cefc0eb5c568b527998bdd76c184e2b76ae561be76e4667072230217ea243'],
    hydradx: ['0xd2a620c27ec5cbc5621ff9a522689895074f7cca0d08e7134a7804e1a3ba86fc', // Snakenet Gen3-1
    '0x10af6e84234477d84dc572bac0789813b254aa490767ed06fb9591191d1073f9', // Snakenet Gen3
    '0x3d75507dd46301767e601265791da1d9cb47b6ebc94e87347b635e5bf58bd047', // Snakenet Gen2
    '0x0ed32bfcab4a83517fac88f2aa7cbc2f88d3ab93be9a12b6188a036bf8a943c2' // Snakenet Gen1
    ],
    karura: ['0xbaf5aabe40646d11f0ee8abbdc64f4a4b7674925cba08e4a05ff9ebed6e2126b'],
    kulupu: ['0xf7a99d3cb92853d00d5275c971c132c074636256583fee53b3bbe60d7b8769ba'],
    kusama: ['0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe', // Kusama CC3,
    '0xe3777fa922cafbff200cadeaea1a76bd7898ad5b89f7848999058b50e715f636', // Kusama CC2
    '0x3fd7b9eb6a00376e5be61f01abb429ffb0b104be05eaff4d458da48fcd425baf' // Kusama CC1
    ],
    'nodle-para': ['0x97da7ede98d7bad4e36b4d734b6055425a3be036da2a332ea5a7037656427a21'],
    parallel: ['0xe61a41c53f5dcd0beb09df93b34402aada44cb05117b71059cce40a2723a4e97'],
    picasso: ['0xe8e7f0f4c4f5a00720b4821dbfddefea7490bcf0b19009961cc46957984e2c1c'],
    polkadex: ['0x3920bcb4960a1eef5580cd5367ff3f430eef052774f78468852f7b9cb39f8a3c'],
    polkadot: ['0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3'],
    polymesh: ['0x6fbd74e5e1d0a61d52ccfe9d4adaed16dd3a7caa37c6bc4d0c2fa12e8b2f4063'],
    rococo: ['0x6408de7737c59c238890533af25896a2c20608d8b380bb01029acb392781063e', '0xaaf2cd1b74b5f726895921259421b534124726263982522174147046b8827897', '0x037f5f3c8e67b314062025fc886fcd6238ea25a4a9b45dce8d246815c9ebe770', '0xc196f81260cf1686172b47a79cf002120735d7cb0eb1474e8adce56618456fff', '0xf6e9983c37baf68846fedafe21e56718790e39fb1c582abc408b81bc7b208f9a', '0x5fce687da39305dfe682b117f0820b319348e8bb37eb16cf34acbf6a202de9d9', '0xe7c3d5edde7db964317cd9b51a3a059d7cd99f81bdbce14990047354334c9779', '0x1611e1dbf0405379b861e2e27daa90f480b2e6d3682414a80835a52e8cb8a215', '0x343442f12fa715489a8714e79a7b264ea88c0d5b8c66b684a7788a516032f6b9', '0x78bcd530c6b3a068bc17473cf5d2aff9c287102bed9af3ae3c41c33b9d6c6147', '0x47381ee0697153d64404fc578392c8fd5cba9073391908f46c888498415647bd', '0x19c0e4fa8ab75f5ac7865e0b8f74ff91eb9a100d336f423cd013a8befba40299'],
    sora: ['0x7e4e32d0feafd4f9c9414b0be86373f9a1efa904809b683453a9af6856d38ad5'],
    stafi: ['0x290a4149f09ea0e402c74c1c7e96ae4239588577fe78932f94f5404c68243d80'],
    statemine: ['0x48239ef607d7928874027a43a67689209727dfb3d3dc5e5b03a39bdc2eda771a'],
    statemint: ['0x68d56f15f85d3136970ec16946040bc1752654e906147f7e43e9d539d7c3de2f'],
    subsocial: ['0x0bd72c1c305172e1275278aaeb3f161e02eccb7a819e63f62d47bd53a28189f8'],
    westend: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e'],
    xxnetwork: ['0x50dd5d206917bf10502c68fb4d18a59fc8aa31586f4e8856b493e43544aa82aa']
  };

  // Copyright 2017-2022 @polkadot/networks authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // these are icon overrides
  const knownIcon = {
    centrifuge: 'polkadot',
    kusama: 'polkadot',
    polkadot: 'polkadot',
    sora: 'polkadot',
    statemine: 'polkadot',
    statemint: 'polkadot',
    westmint: 'polkadot'
  };

  // Copyright 2017-2022 @polkadot/networks authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // These match up with the keys of the ledgerApps object in the @polkadot/hw-ledger/defaults.ts
  // and maps to the known slip44 (minus the `0x8` hard derivation flag)
  //
  // NOTE: Any network here needs to have a genesisHash attached in the ./genesis.ts config
  const knownLedger = {
    acala: 0x00000313,
    astar: 0x0000032a,
    bifrost: 0x00000314,
    centrifuge: 0x000002eb,
    composable: 0x00000162,
    'dock-mainnet': 0x00000252,
    edgeware: 0x0000020b,
    equilibrium: 0x05f5e0fd,
    genshiro: 0x05f5e0fc,
    karura: 0x000002ae,
    kusama: 0x000001b2,
    'nodle-para': 0x000003eb,
    parallel: 0x00000162,
    polkadex: 0x0000031f,
    polkadot: 0x00000162,
    polymesh: 0x00000253,
    sora: 0x00000269,
    statemine: 0x000001b2,
    // common-good on Kusama, shares derivation
    statemint: 0x00000162,
    // common-good on Polkadot, shares derivation
    xxnetwork: 0x000007a3
  };

  // Copyright 2017-2022 @polkadot/networks authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // testnets should not allow selection
  const knownTestnet = {
    '': true,
    // this is the default non-network entry
    'cess-testnet': true,
    'dock-testnet': true,
    jupiter: true,
    'mathchain-testnet': true,
    subspace_testnet: true,
    'zero-alphaville': true
  };

  // Copyright 2017-2022 @polkadot/networks authors & contributors

  const UNSORTED = [0, 2, 42];
  const TESTNETS = ['testnet'];

  function toExpanded(o) {
    const network = o.network || '';
    const nameParts = network.replace(/_/g, '-').split('-');
    const n = o; // ledger additions

    n.slip44 = knownLedger[network];
    n.hasLedgerSupport = !!n.slip44; // general items

    n.genesisHash = knownGenesis[network] || [];
    n.icon = knownIcon[network] || 'substrate'; // filtering

    n.isTestnet = !!knownTestnet[network] || TESTNETS.includes(nameParts[nameParts.length - 1]);
    n.isIgnored = n.isTestnet || !(o.standardAccount && o.decimals && o.decimals.length && o.symbols && o.symbols.length) && o.prefix !== 42;
    return n;
  }

  function filterSelectable({
    genesisHash,
    prefix
  }) {
    return !!genesisHash.length || prefix === 42;
  }

  function filterAvailable(n) {
    return !n.isIgnored && !!n.network;
  }

  function sortNetworks(a, b) {
    const isUnSortedA = UNSORTED.includes(a.prefix);
    const isUnSortedB = UNSORTED.includes(b.prefix);
    return isUnSortedA === isUnSortedB ? isUnSortedA ? 0 : a.displayName.localeCompare(b.displayName) : isUnSortedA ? -1 : 1;
  } // This is all the Substrate networks with our additional information


  const allNetworks = knownSubstrate.map(toExpanded); // The list of available/claimed prefixes
  //   - no testnets
  //   - we only include those where we have a standardAccount
  //   - sort by name, however we keep 0, 2, 42 first in the list

  const availableNetworks = allNetworks.filter(filterAvailable).sort(sortNetworks); // A filtered list of those chains we have details about (genesisHashes)

  const selectableNetworks = availableNetworks.filter(filterSelectable);

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const defaults$1 = {
    allowedDecodedLengths: [1, 2, 4, 8, 32, 33],
    // publicKey has prefix + 2 checksum bytes, short only prefix + 1 checksum byte
    allowedEncodedLengths: [3, 4, 6, 10, 35, 36, 37, 38],
    allowedPrefix: availableNetworks.map(({
      prefix
    }) => prefix),
    prefix: 42
  };

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function decodeAddress(encoded, ignoreChecksum, ss58Format = -1) {
    assert$1(encoded, 'Invalid empty address passed');

    if (isU8a(encoded) || isHex(encoded)) {
      return u8aToU8a(encoded);
    }

    try {
      const decoded = base58Decode(encoded);
      assert$1(defaults$1.allowedEncodedLengths.includes(decoded.length), 'Invalid decoded address length');
      const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded);
      assert$1(ignoreChecksum || isValid, 'Invalid decoded address checksum');
      assert$1([-1, ss58Decoded].includes(ss58Format), () => `Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);
      return decoded.slice(ss58Length, endPos);
    } catch (error) {
      throw new Error(`Decoding ${encoded}: ${error.message}`);
    }
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const BN_BE_OPTS = {
    isLe: false
  };
  const BN_LE_OPTS = {
    isLe: true
  };
  const BN_BE_32_OPTS = {
    bitLength: 32,
    isLe: false
  };
  const BN_LE_32_OPTS = {
    bitLength: 32,
    isLe: true
  };
  const BN_BE_256_OPTS = {
    bitLength: 256,
    isLe: false
  };
  const BN_LE_256_OPTS = {
    bitLength: 256,
    isLe: true
  };

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  stringToU8a('modlpy/utilisuba');

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  stringToU8a('modlpy/utilisuba');

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const RE_NUMBER = /^\d+$/;
  const JUNCTION_ID_LEN = 32;
  class DeriveJunction {
    #chainCode = new Uint8Array(32);
    #isHard = false;

    static from(value) {
      const result = new DeriveJunction();
      const [code, isHard] = value.startsWith('/') ? [value.substring(1), true] : [value, false];
      result.soft(RE_NUMBER.test(code) ? new BN(code, 10) : code);
      return isHard ? result.harden() : result;
    }

    get chainCode() {
      return this.#chainCode;
    }

    get isHard() {
      return this.#isHard;
    }

    get isSoft() {
      return !this.#isHard;
    }

    hard(value) {
      return this.soft(value).harden();
    }

    harden() {
      this.#isHard = true;
      return this;
    }

    soft(value) {
      if (isNumber$1(value) || isBn(value) || isBigInt(value)) {
        return this.soft(bnToU8a(value, BN_LE_256_OPTS));
      } else if (isHex(value)) {
        return this.soft(hexToU8a(value));
      } else if (isString$1(value)) {
        return this.soft(compactAddLength(stringToU8a(value)));
      } else if (value.length > JUNCTION_ID_LEN) {
        return this.soft(blake2AsU8a(value));
      }

      this.#chainCode.fill(0);
      this.#chainCode.set(value, 0);
      return this;
    }

    soften() {
      this.#isHard = false;
      return this;
    }

  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const RE_JUNCTION = /\/(\/?)([^/]+)/g;

  /**
   * @description Extract derivation junctions from the supplied path
   */
  function keyExtractPath(derivePath) {
    const parts = derivePath.match(RE_JUNCTION);
    const path = [];
    let constructed = '';

    if (parts) {
      constructed = parts.join('');

      for (const p of parts) {
        path.push(DeriveJunction.from(p.substring(1)));
      }
    }

    assert$1(constructed === derivePath, () => `Re-constructed path "${constructed}" does not match input`);
    return {
      parts,
      path
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const RE_CAPTURE = /^(\w+( \w+)*)((\/\/?[^/]+)*)(\/\/\/(.*))?$/;
  /**
   * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed).
   */

  function keyExtractSuri(suri) {
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    const matches = suri.match(RE_CAPTURE);

    if (matches === null) {
      throw new Error('Unable to match provided value to a secret URI');
    }

    const [, phrase,, derivePath,,, password] = matches;
    const {
      path
    } = keyExtractPath(derivePath);
    return {
      derivePath,
      password,
      path,
      phrase
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const HDKD$1 = compactAddLength(stringToU8a('Secp256k1HDKD'));
  function secp256k1DeriveHard(seed, chainCode) {
    if (!isU8a(chainCode) || chainCode.length !== 32) {
      throw new Error('Invalid chainCode passed to derive');
    } // NOTE This is specific to the Substrate HDD derivation, so always use the blake2 hasher


    return blake2AsU8a(u8aConcat(HDKD$1, seed, chainCode), 256);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name secp256k1PairFromSeed
   * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
   */

  function secp256k1PairFromSeed(seed, onlyJs) {
    if (seed.length !== 32) {
      throw new Error('Expected valid 32-byte private key as a seed');
    }

    if (!hasBigInt || !onlyJs && isReady()) {
      const full = secp256k1FromSeed(seed);
      const publicKey = full.slice(32); // There is an issue with the secp256k1 when running in an ASM.js environment where
      // it seems that the lazy static section yields invalid results on the _first_ run.
      // If this happens, fail outright, we cannot allow invalid return values
      // https://github.com/polkadot-js/wasm/issues/307

      if (u8aEmpty(publicKey)) {
        throw new Error('Invalid publicKey generated from WASM interface');
      }

      return {
        publicKey,
        secretKey: full.slice(0, 32)
      };
    }

    return {
      publicKey: getPublicKey(seed, true),
      secretKey: seed
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function createSeedDeriveFn(fromSeed, derive) {
    return (keypair, {
      chainCode,
      isHard
    }) => {
      assert$1(isHard, 'A soft key was found in the path and is not supported');
      return fromSeed(derive(keypair.secretKey.subarray(0, 32), chainCode));
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const keyHdkdEcdsa = createSeedDeriveFn(secp256k1PairFromSeed, secp256k1DeriveHard);

  var ed2curve$1 = {exports: {}};

  function commonjsRequire(path) {
  	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }

  var naclFast = {exports: {}};

  (function (module) {
  	(function(nacl) {

  	// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
  	// Public domain.
  	//
  	// Implementation derived from TweetNaCl version 20140427.
  	// See for details: http://tweetnacl.cr.yp.to/

  	var gf = function(init) {
  	  var i, r = new Float64Array(16);
  	  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
  	  return r;
  	};

  	//  Pluggable, initialized in high-level API below.
  	var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

  	var _0 = new Uint8Array(16);
  	var _9 = new Uint8Array(32); _9[0] = 9;

  	var gf0 = gf(),
  	    gf1 = gf([1]),
  	    _121665 = gf([0xdb41, 1]),
  	    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
  	    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
  	    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
  	    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
  	    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

  	function ts64(x, i, h, l) {
  	  x[i]   = (h >> 24) & 0xff;
  	  x[i+1] = (h >> 16) & 0xff;
  	  x[i+2] = (h >>  8) & 0xff;
  	  x[i+3] = h & 0xff;
  	  x[i+4] = (l >> 24)  & 0xff;
  	  x[i+5] = (l >> 16)  & 0xff;
  	  x[i+6] = (l >>  8)  & 0xff;
  	  x[i+7] = l & 0xff;
  	}

  	function vn(x, xi, y, yi, n) {
  	  var i,d = 0;
  	  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
  	  return (1 & ((d - 1) >>> 8)) - 1;
  	}

  	function crypto_verify_16(x, xi, y, yi) {
  	  return vn(x,xi,y,yi,16);
  	}

  	function crypto_verify_32(x, xi, y, yi) {
  	  return vn(x,xi,y,yi,32);
  	}

  	function core_salsa20(o, p, k, c) {
  	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
  	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
  	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
  	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
  	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
  	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
  	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
  	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
  	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
  	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
  	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
  	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
  	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
  	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
  	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
  	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
  	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
  	      x15 = j15, u;

  	  for (var i = 0; i < 20; i += 2) {
  	    u = x0 + x12 | 0;
  	    x4 ^= u<<7 | u>>>(32-7);
  	    u = x4 + x0 | 0;
  	    x8 ^= u<<9 | u>>>(32-9);
  	    u = x8 + x4 | 0;
  	    x12 ^= u<<13 | u>>>(32-13);
  	    u = x12 + x8 | 0;
  	    x0 ^= u<<18 | u>>>(32-18);

  	    u = x5 + x1 | 0;
  	    x9 ^= u<<7 | u>>>(32-7);
  	    u = x9 + x5 | 0;
  	    x13 ^= u<<9 | u>>>(32-9);
  	    u = x13 + x9 | 0;
  	    x1 ^= u<<13 | u>>>(32-13);
  	    u = x1 + x13 | 0;
  	    x5 ^= u<<18 | u>>>(32-18);

  	    u = x10 + x6 | 0;
  	    x14 ^= u<<7 | u>>>(32-7);
  	    u = x14 + x10 | 0;
  	    x2 ^= u<<9 | u>>>(32-9);
  	    u = x2 + x14 | 0;
  	    x6 ^= u<<13 | u>>>(32-13);
  	    u = x6 + x2 | 0;
  	    x10 ^= u<<18 | u>>>(32-18);

  	    u = x15 + x11 | 0;
  	    x3 ^= u<<7 | u>>>(32-7);
  	    u = x3 + x15 | 0;
  	    x7 ^= u<<9 | u>>>(32-9);
  	    u = x7 + x3 | 0;
  	    x11 ^= u<<13 | u>>>(32-13);
  	    u = x11 + x7 | 0;
  	    x15 ^= u<<18 | u>>>(32-18);

  	    u = x0 + x3 | 0;
  	    x1 ^= u<<7 | u>>>(32-7);
  	    u = x1 + x0 | 0;
  	    x2 ^= u<<9 | u>>>(32-9);
  	    u = x2 + x1 | 0;
  	    x3 ^= u<<13 | u>>>(32-13);
  	    u = x3 + x2 | 0;
  	    x0 ^= u<<18 | u>>>(32-18);

  	    u = x5 + x4 | 0;
  	    x6 ^= u<<7 | u>>>(32-7);
  	    u = x6 + x5 | 0;
  	    x7 ^= u<<9 | u>>>(32-9);
  	    u = x7 + x6 | 0;
  	    x4 ^= u<<13 | u>>>(32-13);
  	    u = x4 + x7 | 0;
  	    x5 ^= u<<18 | u>>>(32-18);

  	    u = x10 + x9 | 0;
  	    x11 ^= u<<7 | u>>>(32-7);
  	    u = x11 + x10 | 0;
  	    x8 ^= u<<9 | u>>>(32-9);
  	    u = x8 + x11 | 0;
  	    x9 ^= u<<13 | u>>>(32-13);
  	    u = x9 + x8 | 0;
  	    x10 ^= u<<18 | u>>>(32-18);

  	    u = x15 + x14 | 0;
  	    x12 ^= u<<7 | u>>>(32-7);
  	    u = x12 + x15 | 0;
  	    x13 ^= u<<9 | u>>>(32-9);
  	    u = x13 + x12 | 0;
  	    x14 ^= u<<13 | u>>>(32-13);
  	    u = x14 + x13 | 0;
  	    x15 ^= u<<18 | u>>>(32-18);
  	  }
  	   x0 =  x0 +  j0 | 0;
  	   x1 =  x1 +  j1 | 0;
  	   x2 =  x2 +  j2 | 0;
  	   x3 =  x3 +  j3 | 0;
  	   x4 =  x4 +  j4 | 0;
  	   x5 =  x5 +  j5 | 0;
  	   x6 =  x6 +  j6 | 0;
  	   x7 =  x7 +  j7 | 0;
  	   x8 =  x8 +  j8 | 0;
  	   x9 =  x9 +  j9 | 0;
  	  x10 = x10 + j10 | 0;
  	  x11 = x11 + j11 | 0;
  	  x12 = x12 + j12 | 0;
  	  x13 = x13 + j13 | 0;
  	  x14 = x14 + j14 | 0;
  	  x15 = x15 + j15 | 0;

  	  o[ 0] = x0 >>>  0 & 0xff;
  	  o[ 1] = x0 >>>  8 & 0xff;
  	  o[ 2] = x0 >>> 16 & 0xff;
  	  o[ 3] = x0 >>> 24 & 0xff;

  	  o[ 4] = x1 >>>  0 & 0xff;
  	  o[ 5] = x1 >>>  8 & 0xff;
  	  o[ 6] = x1 >>> 16 & 0xff;
  	  o[ 7] = x1 >>> 24 & 0xff;

  	  o[ 8] = x2 >>>  0 & 0xff;
  	  o[ 9] = x2 >>>  8 & 0xff;
  	  o[10] = x2 >>> 16 & 0xff;
  	  o[11] = x2 >>> 24 & 0xff;

  	  o[12] = x3 >>>  0 & 0xff;
  	  o[13] = x3 >>>  8 & 0xff;
  	  o[14] = x3 >>> 16 & 0xff;
  	  o[15] = x3 >>> 24 & 0xff;

  	  o[16] = x4 >>>  0 & 0xff;
  	  o[17] = x4 >>>  8 & 0xff;
  	  o[18] = x4 >>> 16 & 0xff;
  	  o[19] = x4 >>> 24 & 0xff;

  	  o[20] = x5 >>>  0 & 0xff;
  	  o[21] = x5 >>>  8 & 0xff;
  	  o[22] = x5 >>> 16 & 0xff;
  	  o[23] = x5 >>> 24 & 0xff;

  	  o[24] = x6 >>>  0 & 0xff;
  	  o[25] = x6 >>>  8 & 0xff;
  	  o[26] = x6 >>> 16 & 0xff;
  	  o[27] = x6 >>> 24 & 0xff;

  	  o[28] = x7 >>>  0 & 0xff;
  	  o[29] = x7 >>>  8 & 0xff;
  	  o[30] = x7 >>> 16 & 0xff;
  	  o[31] = x7 >>> 24 & 0xff;

  	  o[32] = x8 >>>  0 & 0xff;
  	  o[33] = x8 >>>  8 & 0xff;
  	  o[34] = x8 >>> 16 & 0xff;
  	  o[35] = x8 >>> 24 & 0xff;

  	  o[36] = x9 >>>  0 & 0xff;
  	  o[37] = x9 >>>  8 & 0xff;
  	  o[38] = x9 >>> 16 & 0xff;
  	  o[39] = x9 >>> 24 & 0xff;

  	  o[40] = x10 >>>  0 & 0xff;
  	  o[41] = x10 >>>  8 & 0xff;
  	  o[42] = x10 >>> 16 & 0xff;
  	  o[43] = x10 >>> 24 & 0xff;

  	  o[44] = x11 >>>  0 & 0xff;
  	  o[45] = x11 >>>  8 & 0xff;
  	  o[46] = x11 >>> 16 & 0xff;
  	  o[47] = x11 >>> 24 & 0xff;

  	  o[48] = x12 >>>  0 & 0xff;
  	  o[49] = x12 >>>  8 & 0xff;
  	  o[50] = x12 >>> 16 & 0xff;
  	  o[51] = x12 >>> 24 & 0xff;

  	  o[52] = x13 >>>  0 & 0xff;
  	  o[53] = x13 >>>  8 & 0xff;
  	  o[54] = x13 >>> 16 & 0xff;
  	  o[55] = x13 >>> 24 & 0xff;

  	  o[56] = x14 >>>  0 & 0xff;
  	  o[57] = x14 >>>  8 & 0xff;
  	  o[58] = x14 >>> 16 & 0xff;
  	  o[59] = x14 >>> 24 & 0xff;

  	  o[60] = x15 >>>  0 & 0xff;
  	  o[61] = x15 >>>  8 & 0xff;
  	  o[62] = x15 >>> 16 & 0xff;
  	  o[63] = x15 >>> 24 & 0xff;
  	}

  	function core_hsalsa20(o,p,k,c) {
  	  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
  	      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
  	      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
  	      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
  	      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
  	      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
  	      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
  	      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
  	      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
  	      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
  	      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
  	      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
  	      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
  	      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
  	      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
  	      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  	  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
  	      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
  	      x15 = j15, u;

  	  for (var i = 0; i < 20; i += 2) {
  	    u = x0 + x12 | 0;
  	    x4 ^= u<<7 | u>>>(32-7);
  	    u = x4 + x0 | 0;
  	    x8 ^= u<<9 | u>>>(32-9);
  	    u = x8 + x4 | 0;
  	    x12 ^= u<<13 | u>>>(32-13);
  	    u = x12 + x8 | 0;
  	    x0 ^= u<<18 | u>>>(32-18);

  	    u = x5 + x1 | 0;
  	    x9 ^= u<<7 | u>>>(32-7);
  	    u = x9 + x5 | 0;
  	    x13 ^= u<<9 | u>>>(32-9);
  	    u = x13 + x9 | 0;
  	    x1 ^= u<<13 | u>>>(32-13);
  	    u = x1 + x13 | 0;
  	    x5 ^= u<<18 | u>>>(32-18);

  	    u = x10 + x6 | 0;
  	    x14 ^= u<<7 | u>>>(32-7);
  	    u = x14 + x10 | 0;
  	    x2 ^= u<<9 | u>>>(32-9);
  	    u = x2 + x14 | 0;
  	    x6 ^= u<<13 | u>>>(32-13);
  	    u = x6 + x2 | 0;
  	    x10 ^= u<<18 | u>>>(32-18);

  	    u = x15 + x11 | 0;
  	    x3 ^= u<<7 | u>>>(32-7);
  	    u = x3 + x15 | 0;
  	    x7 ^= u<<9 | u>>>(32-9);
  	    u = x7 + x3 | 0;
  	    x11 ^= u<<13 | u>>>(32-13);
  	    u = x11 + x7 | 0;
  	    x15 ^= u<<18 | u>>>(32-18);

  	    u = x0 + x3 | 0;
  	    x1 ^= u<<7 | u>>>(32-7);
  	    u = x1 + x0 | 0;
  	    x2 ^= u<<9 | u>>>(32-9);
  	    u = x2 + x1 | 0;
  	    x3 ^= u<<13 | u>>>(32-13);
  	    u = x3 + x2 | 0;
  	    x0 ^= u<<18 | u>>>(32-18);

  	    u = x5 + x4 | 0;
  	    x6 ^= u<<7 | u>>>(32-7);
  	    u = x6 + x5 | 0;
  	    x7 ^= u<<9 | u>>>(32-9);
  	    u = x7 + x6 | 0;
  	    x4 ^= u<<13 | u>>>(32-13);
  	    u = x4 + x7 | 0;
  	    x5 ^= u<<18 | u>>>(32-18);

  	    u = x10 + x9 | 0;
  	    x11 ^= u<<7 | u>>>(32-7);
  	    u = x11 + x10 | 0;
  	    x8 ^= u<<9 | u>>>(32-9);
  	    u = x8 + x11 | 0;
  	    x9 ^= u<<13 | u>>>(32-13);
  	    u = x9 + x8 | 0;
  	    x10 ^= u<<18 | u>>>(32-18);

  	    u = x15 + x14 | 0;
  	    x12 ^= u<<7 | u>>>(32-7);
  	    u = x12 + x15 | 0;
  	    x13 ^= u<<9 | u>>>(32-9);
  	    u = x13 + x12 | 0;
  	    x14 ^= u<<13 | u>>>(32-13);
  	    u = x14 + x13 | 0;
  	    x15 ^= u<<18 | u>>>(32-18);
  	  }

  	  o[ 0] = x0 >>>  0 & 0xff;
  	  o[ 1] = x0 >>>  8 & 0xff;
  	  o[ 2] = x0 >>> 16 & 0xff;
  	  o[ 3] = x0 >>> 24 & 0xff;

  	  o[ 4] = x5 >>>  0 & 0xff;
  	  o[ 5] = x5 >>>  8 & 0xff;
  	  o[ 6] = x5 >>> 16 & 0xff;
  	  o[ 7] = x5 >>> 24 & 0xff;

  	  o[ 8] = x10 >>>  0 & 0xff;
  	  o[ 9] = x10 >>>  8 & 0xff;
  	  o[10] = x10 >>> 16 & 0xff;
  	  o[11] = x10 >>> 24 & 0xff;

  	  o[12] = x15 >>>  0 & 0xff;
  	  o[13] = x15 >>>  8 & 0xff;
  	  o[14] = x15 >>> 16 & 0xff;
  	  o[15] = x15 >>> 24 & 0xff;

  	  o[16] = x6 >>>  0 & 0xff;
  	  o[17] = x6 >>>  8 & 0xff;
  	  o[18] = x6 >>> 16 & 0xff;
  	  o[19] = x6 >>> 24 & 0xff;

  	  o[20] = x7 >>>  0 & 0xff;
  	  o[21] = x7 >>>  8 & 0xff;
  	  o[22] = x7 >>> 16 & 0xff;
  	  o[23] = x7 >>> 24 & 0xff;

  	  o[24] = x8 >>>  0 & 0xff;
  	  o[25] = x8 >>>  8 & 0xff;
  	  o[26] = x8 >>> 16 & 0xff;
  	  o[27] = x8 >>> 24 & 0xff;

  	  o[28] = x9 >>>  0 & 0xff;
  	  o[29] = x9 >>>  8 & 0xff;
  	  o[30] = x9 >>> 16 & 0xff;
  	  o[31] = x9 >>> 24 & 0xff;
  	}

  	function crypto_core_salsa20(out,inp,k,c) {
  	  core_salsa20(out,inp,k,c);
  	}

  	function crypto_core_hsalsa20(out,inp,k,c) {
  	  core_hsalsa20(out,inp,k,c);
  	}

  	var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
  	            // "expand 32-byte k"

  	function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
  	  var z = new Uint8Array(16), x = new Uint8Array(64);
  	  var u, i;
  	  for (i = 0; i < 16; i++) z[i] = 0;
  	  for (i = 0; i < 8; i++) z[i] = n[i];
  	  while (b >= 64) {
  	    crypto_core_salsa20(x,z,k,sigma);
  	    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
  	    u = 1;
  	    for (i = 8; i < 16; i++) {
  	      u = u + (z[i] & 0xff) | 0;
  	      z[i] = u & 0xff;
  	      u >>>= 8;
  	    }
  	    b -= 64;
  	    cpos += 64;
  	    mpos += 64;
  	  }
  	  if (b > 0) {
  	    crypto_core_salsa20(x,z,k,sigma);
  	    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
  	  }
  	  return 0;
  	}

  	function crypto_stream_salsa20(c,cpos,b,n,k) {
  	  var z = new Uint8Array(16), x = new Uint8Array(64);
  	  var u, i;
  	  for (i = 0; i < 16; i++) z[i] = 0;
  	  for (i = 0; i < 8; i++) z[i] = n[i];
  	  while (b >= 64) {
  	    crypto_core_salsa20(x,z,k,sigma);
  	    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
  	    u = 1;
  	    for (i = 8; i < 16; i++) {
  	      u = u + (z[i] & 0xff) | 0;
  	      z[i] = u & 0xff;
  	      u >>>= 8;
  	    }
  	    b -= 64;
  	    cpos += 64;
  	  }
  	  if (b > 0) {
  	    crypto_core_salsa20(x,z,k,sigma);
  	    for (i = 0; i < b; i++) c[cpos+i] = x[i];
  	  }
  	  return 0;
  	}

  	function crypto_stream(c,cpos,d,n,k) {
  	  var s = new Uint8Array(32);
  	  crypto_core_hsalsa20(s,n,k,sigma);
  	  var sn = new Uint8Array(8);
  	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  	  return crypto_stream_salsa20(c,cpos,d,sn,s);
  	}

  	function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
  	  var s = new Uint8Array(32);
  	  crypto_core_hsalsa20(s,n,k,sigma);
  	  var sn = new Uint8Array(8);
  	  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  	  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
  	}

  	/*
  	* Port of Andrew Moon's Poly1305-donna-16. Public domain.
  	* https://github.com/floodyberry/poly1305-donna
  	*/

  	var poly1305 = function(key) {
  	  this.buffer = new Uint8Array(16);
  	  this.r = new Uint16Array(10);
  	  this.h = new Uint16Array(10);
  	  this.pad = new Uint16Array(8);
  	  this.leftover = 0;
  	  this.fin = 0;

  	  var t0, t1, t2, t3, t4, t5, t6, t7;

  	  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
  	  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
  	  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
  	  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
  	  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
  	  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
  	  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
  	  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
  	  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
  	  this.r[9] = ((t7 >>>  5)) & 0x007f;

  	  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
  	  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
  	  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
  	  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
  	  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
  	  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
  	  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
  	  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
  	};

  	poly1305.prototype.blocks = function(m, mpos, bytes) {
  	  var hibit = this.fin ? 0 : (1 << 11);
  	  var t0, t1, t2, t3, t4, t5, t6, t7, c;
  	  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

  	  var h0 = this.h[0],
  	      h1 = this.h[1],
  	      h2 = this.h[2],
  	      h3 = this.h[3],
  	      h4 = this.h[4],
  	      h5 = this.h[5],
  	      h6 = this.h[6],
  	      h7 = this.h[7],
  	      h8 = this.h[8],
  	      h9 = this.h[9];

  	  var r0 = this.r[0],
  	      r1 = this.r[1],
  	      r2 = this.r[2],
  	      r3 = this.r[3],
  	      r4 = this.r[4],
  	      r5 = this.r[5],
  	      r6 = this.r[6],
  	      r7 = this.r[7],
  	      r8 = this.r[8],
  	      r9 = this.r[9];

  	  while (bytes >= 16) {
  	    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
  	    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
  	    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
  	    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
  	    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
  	    h5 += ((t4 >>>  1)) & 0x1fff;
  	    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
  	    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
  	    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
  	    h9 += ((t7 >>> 5)) | hibit;

  	    c = 0;

  	    d0 = c;
  	    d0 += h0 * r0;
  	    d0 += h1 * (5 * r9);
  	    d0 += h2 * (5 * r8);
  	    d0 += h3 * (5 * r7);
  	    d0 += h4 * (5 * r6);
  	    c = (d0 >>> 13); d0 &= 0x1fff;
  	    d0 += h5 * (5 * r5);
  	    d0 += h6 * (5 * r4);
  	    d0 += h7 * (5 * r3);
  	    d0 += h8 * (5 * r2);
  	    d0 += h9 * (5 * r1);
  	    c += (d0 >>> 13); d0 &= 0x1fff;

  	    d1 = c;
  	    d1 += h0 * r1;
  	    d1 += h1 * r0;
  	    d1 += h2 * (5 * r9);
  	    d1 += h3 * (5 * r8);
  	    d1 += h4 * (5 * r7);
  	    c = (d1 >>> 13); d1 &= 0x1fff;
  	    d1 += h5 * (5 * r6);
  	    d1 += h6 * (5 * r5);
  	    d1 += h7 * (5 * r4);
  	    d1 += h8 * (5 * r3);
  	    d1 += h9 * (5 * r2);
  	    c += (d1 >>> 13); d1 &= 0x1fff;

  	    d2 = c;
  	    d2 += h0 * r2;
  	    d2 += h1 * r1;
  	    d2 += h2 * r0;
  	    d2 += h3 * (5 * r9);
  	    d2 += h4 * (5 * r8);
  	    c = (d2 >>> 13); d2 &= 0x1fff;
  	    d2 += h5 * (5 * r7);
  	    d2 += h6 * (5 * r6);
  	    d2 += h7 * (5 * r5);
  	    d2 += h8 * (5 * r4);
  	    d2 += h9 * (5 * r3);
  	    c += (d2 >>> 13); d2 &= 0x1fff;

  	    d3 = c;
  	    d3 += h0 * r3;
  	    d3 += h1 * r2;
  	    d3 += h2 * r1;
  	    d3 += h3 * r0;
  	    d3 += h4 * (5 * r9);
  	    c = (d3 >>> 13); d3 &= 0x1fff;
  	    d3 += h5 * (5 * r8);
  	    d3 += h6 * (5 * r7);
  	    d3 += h7 * (5 * r6);
  	    d3 += h8 * (5 * r5);
  	    d3 += h9 * (5 * r4);
  	    c += (d3 >>> 13); d3 &= 0x1fff;

  	    d4 = c;
  	    d4 += h0 * r4;
  	    d4 += h1 * r3;
  	    d4 += h2 * r2;
  	    d4 += h3 * r1;
  	    d4 += h4 * r0;
  	    c = (d4 >>> 13); d4 &= 0x1fff;
  	    d4 += h5 * (5 * r9);
  	    d4 += h6 * (5 * r8);
  	    d4 += h7 * (5 * r7);
  	    d4 += h8 * (5 * r6);
  	    d4 += h9 * (5 * r5);
  	    c += (d4 >>> 13); d4 &= 0x1fff;

  	    d5 = c;
  	    d5 += h0 * r5;
  	    d5 += h1 * r4;
  	    d5 += h2 * r3;
  	    d5 += h3 * r2;
  	    d5 += h4 * r1;
  	    c = (d5 >>> 13); d5 &= 0x1fff;
  	    d5 += h5 * r0;
  	    d5 += h6 * (5 * r9);
  	    d5 += h7 * (5 * r8);
  	    d5 += h8 * (5 * r7);
  	    d5 += h9 * (5 * r6);
  	    c += (d5 >>> 13); d5 &= 0x1fff;

  	    d6 = c;
  	    d6 += h0 * r6;
  	    d6 += h1 * r5;
  	    d6 += h2 * r4;
  	    d6 += h3 * r3;
  	    d6 += h4 * r2;
  	    c = (d6 >>> 13); d6 &= 0x1fff;
  	    d6 += h5 * r1;
  	    d6 += h6 * r0;
  	    d6 += h7 * (5 * r9);
  	    d6 += h8 * (5 * r8);
  	    d6 += h9 * (5 * r7);
  	    c += (d6 >>> 13); d6 &= 0x1fff;

  	    d7 = c;
  	    d7 += h0 * r7;
  	    d7 += h1 * r6;
  	    d7 += h2 * r5;
  	    d7 += h3 * r4;
  	    d7 += h4 * r3;
  	    c = (d7 >>> 13); d7 &= 0x1fff;
  	    d7 += h5 * r2;
  	    d7 += h6 * r1;
  	    d7 += h7 * r0;
  	    d7 += h8 * (5 * r9);
  	    d7 += h9 * (5 * r8);
  	    c += (d7 >>> 13); d7 &= 0x1fff;

  	    d8 = c;
  	    d8 += h0 * r8;
  	    d8 += h1 * r7;
  	    d8 += h2 * r6;
  	    d8 += h3 * r5;
  	    d8 += h4 * r4;
  	    c = (d8 >>> 13); d8 &= 0x1fff;
  	    d8 += h5 * r3;
  	    d8 += h6 * r2;
  	    d8 += h7 * r1;
  	    d8 += h8 * r0;
  	    d8 += h9 * (5 * r9);
  	    c += (d8 >>> 13); d8 &= 0x1fff;

  	    d9 = c;
  	    d9 += h0 * r9;
  	    d9 += h1 * r8;
  	    d9 += h2 * r7;
  	    d9 += h3 * r6;
  	    d9 += h4 * r5;
  	    c = (d9 >>> 13); d9 &= 0x1fff;
  	    d9 += h5 * r4;
  	    d9 += h6 * r3;
  	    d9 += h7 * r2;
  	    d9 += h8 * r1;
  	    d9 += h9 * r0;
  	    c += (d9 >>> 13); d9 &= 0x1fff;

  	    c = (((c << 2) + c)) | 0;
  	    c = (c + d0) | 0;
  	    d0 = c & 0x1fff;
  	    c = (c >>> 13);
  	    d1 += c;

  	    h0 = d0;
  	    h1 = d1;
  	    h2 = d2;
  	    h3 = d3;
  	    h4 = d4;
  	    h5 = d5;
  	    h6 = d6;
  	    h7 = d7;
  	    h8 = d8;
  	    h9 = d9;

  	    mpos += 16;
  	    bytes -= 16;
  	  }
  	  this.h[0] = h0;
  	  this.h[1] = h1;
  	  this.h[2] = h2;
  	  this.h[3] = h3;
  	  this.h[4] = h4;
  	  this.h[5] = h5;
  	  this.h[6] = h6;
  	  this.h[7] = h7;
  	  this.h[8] = h8;
  	  this.h[9] = h9;
  	};

  	poly1305.prototype.finish = function(mac, macpos) {
  	  var g = new Uint16Array(10);
  	  var c, mask, f, i;

  	  if (this.leftover) {
  	    i = this.leftover;
  	    this.buffer[i++] = 1;
  	    for (; i < 16; i++) this.buffer[i] = 0;
  	    this.fin = 1;
  	    this.blocks(this.buffer, 0, 16);
  	  }

  	  c = this.h[1] >>> 13;
  	  this.h[1] &= 0x1fff;
  	  for (i = 2; i < 10; i++) {
  	    this.h[i] += c;
  	    c = this.h[i] >>> 13;
  	    this.h[i] &= 0x1fff;
  	  }
  	  this.h[0] += (c * 5);
  	  c = this.h[0] >>> 13;
  	  this.h[0] &= 0x1fff;
  	  this.h[1] += c;
  	  c = this.h[1] >>> 13;
  	  this.h[1] &= 0x1fff;
  	  this.h[2] += c;

  	  g[0] = this.h[0] + 5;
  	  c = g[0] >>> 13;
  	  g[0] &= 0x1fff;
  	  for (i = 1; i < 10; i++) {
  	    g[i] = this.h[i] + c;
  	    c = g[i] >>> 13;
  	    g[i] &= 0x1fff;
  	  }
  	  g[9] -= (1 << 13);

  	  mask = (c ^ 1) - 1;
  	  for (i = 0; i < 10; i++) g[i] &= mask;
  	  mask = ~mask;
  	  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

  	  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
  	  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
  	  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
  	  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
  	  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
  	  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
  	  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
  	  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

  	  f = this.h[0] + this.pad[0];
  	  this.h[0] = f & 0xffff;
  	  for (i = 1; i < 8; i++) {
  	    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
  	    this.h[i] = f & 0xffff;
  	  }

  	  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
  	  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
  	  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
  	  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
  	  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
  	  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
  	  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
  	  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
  	  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
  	  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
  	  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
  	  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
  	  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
  	  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
  	  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
  	  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
  	};

  	poly1305.prototype.update = function(m, mpos, bytes) {
  	  var i, want;

  	  if (this.leftover) {
  	    want = (16 - this.leftover);
  	    if (want > bytes)
  	      want = bytes;
  	    for (i = 0; i < want; i++)
  	      this.buffer[this.leftover + i] = m[mpos+i];
  	    bytes -= want;
  	    mpos += want;
  	    this.leftover += want;
  	    if (this.leftover < 16)
  	      return;
  	    this.blocks(this.buffer, 0, 16);
  	    this.leftover = 0;
  	  }

  	  if (bytes >= 16) {
  	    want = bytes - (bytes % 16);
  	    this.blocks(m, mpos, want);
  	    mpos += want;
  	    bytes -= want;
  	  }

  	  if (bytes) {
  	    for (i = 0; i < bytes; i++)
  	      this.buffer[this.leftover + i] = m[mpos+i];
  	    this.leftover += bytes;
  	  }
  	};

  	function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
  	  var s = new poly1305(k);
  	  s.update(m, mpos, n);
  	  s.finish(out, outpos);
  	  return 0;
  	}

  	function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
  	  var x = new Uint8Array(16);
  	  crypto_onetimeauth(x,0,m,mpos,n,k);
  	  return crypto_verify_16(h,hpos,x,0);
  	}

  	function crypto_secretbox(c,m,d,n,k) {
  	  var i;
  	  if (d < 32) return -1;
  	  crypto_stream_xor(c,0,m,0,d,n,k);
  	  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
  	  for (i = 0; i < 16; i++) c[i] = 0;
  	  return 0;
  	}

  	function crypto_secretbox_open(m,c,d,n,k) {
  	  var i;
  	  var x = new Uint8Array(32);
  	  if (d < 32) return -1;
  	  crypto_stream(x,0,32,n,k);
  	  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
  	  crypto_stream_xor(m,0,c,0,d,n,k);
  	  for (i = 0; i < 32; i++) m[i] = 0;
  	  return 0;
  	}

  	function set25519(r, a) {
  	  var i;
  	  for (i = 0; i < 16; i++) r[i] = a[i]|0;
  	}

  	function car25519(o) {
  	  var i, v, c = 1;
  	  for (i = 0; i < 16; i++) {
  	    v = o[i] + c + 65535;
  	    c = Math.floor(v / 65536);
  	    o[i] = v - c * 65536;
  	  }
  	  o[0] += c-1 + 37 * (c-1);
  	}

  	function sel25519(p, q, b) {
  	  var t, c = ~(b-1);
  	  for (var i = 0; i < 16; i++) {
  	    t = c & (p[i] ^ q[i]);
  	    p[i] ^= t;
  	    q[i] ^= t;
  	  }
  	}

  	function pack25519(o, n) {
  	  var i, j, b;
  	  var m = gf(), t = gf();
  	  for (i = 0; i < 16; i++) t[i] = n[i];
  	  car25519(t);
  	  car25519(t);
  	  car25519(t);
  	  for (j = 0; j < 2; j++) {
  	    m[0] = t[0] - 0xffed;
  	    for (i = 1; i < 15; i++) {
  	      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
  	      m[i-1] &= 0xffff;
  	    }
  	    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
  	    b = (m[15]>>16) & 1;
  	    m[14] &= 0xffff;
  	    sel25519(t, m, 1-b);
  	  }
  	  for (i = 0; i < 16; i++) {
  	    o[2*i] = t[i] & 0xff;
  	    o[2*i+1] = t[i]>>8;
  	  }
  	}

  	function neq25519(a, b) {
  	  var c = new Uint8Array(32), d = new Uint8Array(32);
  	  pack25519(c, a);
  	  pack25519(d, b);
  	  return crypto_verify_32(c, 0, d, 0);
  	}

  	function par25519(a) {
  	  var d = new Uint8Array(32);
  	  pack25519(d, a);
  	  return d[0] & 1;
  	}

  	function unpack25519(o, n) {
  	  var i;
  	  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
  	  o[15] &= 0x7fff;
  	}

  	function A(o, a, b) {
  	  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
  	}

  	function Z(o, a, b) {
  	  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
  	}

  	function M(o, a, b) {
  	  var v, c,
  	     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
  	     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
  	    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
  	    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
  	    b0 = b[0],
  	    b1 = b[1],
  	    b2 = b[2],
  	    b3 = b[3],
  	    b4 = b[4],
  	    b5 = b[5],
  	    b6 = b[6],
  	    b7 = b[7],
  	    b8 = b[8],
  	    b9 = b[9],
  	    b10 = b[10],
  	    b11 = b[11],
  	    b12 = b[12],
  	    b13 = b[13],
  	    b14 = b[14],
  	    b15 = b[15];

  	  v = a[0];
  	  t0 += v * b0;
  	  t1 += v * b1;
  	  t2 += v * b2;
  	  t3 += v * b3;
  	  t4 += v * b4;
  	  t5 += v * b5;
  	  t6 += v * b6;
  	  t7 += v * b7;
  	  t8 += v * b8;
  	  t9 += v * b9;
  	  t10 += v * b10;
  	  t11 += v * b11;
  	  t12 += v * b12;
  	  t13 += v * b13;
  	  t14 += v * b14;
  	  t15 += v * b15;
  	  v = a[1];
  	  t1 += v * b0;
  	  t2 += v * b1;
  	  t3 += v * b2;
  	  t4 += v * b3;
  	  t5 += v * b4;
  	  t6 += v * b5;
  	  t7 += v * b6;
  	  t8 += v * b7;
  	  t9 += v * b8;
  	  t10 += v * b9;
  	  t11 += v * b10;
  	  t12 += v * b11;
  	  t13 += v * b12;
  	  t14 += v * b13;
  	  t15 += v * b14;
  	  t16 += v * b15;
  	  v = a[2];
  	  t2 += v * b0;
  	  t3 += v * b1;
  	  t4 += v * b2;
  	  t5 += v * b3;
  	  t6 += v * b4;
  	  t7 += v * b5;
  	  t8 += v * b6;
  	  t9 += v * b7;
  	  t10 += v * b8;
  	  t11 += v * b9;
  	  t12 += v * b10;
  	  t13 += v * b11;
  	  t14 += v * b12;
  	  t15 += v * b13;
  	  t16 += v * b14;
  	  t17 += v * b15;
  	  v = a[3];
  	  t3 += v * b0;
  	  t4 += v * b1;
  	  t5 += v * b2;
  	  t6 += v * b3;
  	  t7 += v * b4;
  	  t8 += v * b5;
  	  t9 += v * b6;
  	  t10 += v * b7;
  	  t11 += v * b8;
  	  t12 += v * b9;
  	  t13 += v * b10;
  	  t14 += v * b11;
  	  t15 += v * b12;
  	  t16 += v * b13;
  	  t17 += v * b14;
  	  t18 += v * b15;
  	  v = a[4];
  	  t4 += v * b0;
  	  t5 += v * b1;
  	  t6 += v * b2;
  	  t7 += v * b3;
  	  t8 += v * b4;
  	  t9 += v * b5;
  	  t10 += v * b6;
  	  t11 += v * b7;
  	  t12 += v * b8;
  	  t13 += v * b9;
  	  t14 += v * b10;
  	  t15 += v * b11;
  	  t16 += v * b12;
  	  t17 += v * b13;
  	  t18 += v * b14;
  	  t19 += v * b15;
  	  v = a[5];
  	  t5 += v * b0;
  	  t6 += v * b1;
  	  t7 += v * b2;
  	  t8 += v * b3;
  	  t9 += v * b4;
  	  t10 += v * b5;
  	  t11 += v * b6;
  	  t12 += v * b7;
  	  t13 += v * b8;
  	  t14 += v * b9;
  	  t15 += v * b10;
  	  t16 += v * b11;
  	  t17 += v * b12;
  	  t18 += v * b13;
  	  t19 += v * b14;
  	  t20 += v * b15;
  	  v = a[6];
  	  t6 += v * b0;
  	  t7 += v * b1;
  	  t8 += v * b2;
  	  t9 += v * b3;
  	  t10 += v * b4;
  	  t11 += v * b5;
  	  t12 += v * b6;
  	  t13 += v * b7;
  	  t14 += v * b8;
  	  t15 += v * b9;
  	  t16 += v * b10;
  	  t17 += v * b11;
  	  t18 += v * b12;
  	  t19 += v * b13;
  	  t20 += v * b14;
  	  t21 += v * b15;
  	  v = a[7];
  	  t7 += v * b0;
  	  t8 += v * b1;
  	  t9 += v * b2;
  	  t10 += v * b3;
  	  t11 += v * b4;
  	  t12 += v * b5;
  	  t13 += v * b6;
  	  t14 += v * b7;
  	  t15 += v * b8;
  	  t16 += v * b9;
  	  t17 += v * b10;
  	  t18 += v * b11;
  	  t19 += v * b12;
  	  t20 += v * b13;
  	  t21 += v * b14;
  	  t22 += v * b15;
  	  v = a[8];
  	  t8 += v * b0;
  	  t9 += v * b1;
  	  t10 += v * b2;
  	  t11 += v * b3;
  	  t12 += v * b4;
  	  t13 += v * b5;
  	  t14 += v * b6;
  	  t15 += v * b7;
  	  t16 += v * b8;
  	  t17 += v * b9;
  	  t18 += v * b10;
  	  t19 += v * b11;
  	  t20 += v * b12;
  	  t21 += v * b13;
  	  t22 += v * b14;
  	  t23 += v * b15;
  	  v = a[9];
  	  t9 += v * b0;
  	  t10 += v * b1;
  	  t11 += v * b2;
  	  t12 += v * b3;
  	  t13 += v * b4;
  	  t14 += v * b5;
  	  t15 += v * b6;
  	  t16 += v * b7;
  	  t17 += v * b8;
  	  t18 += v * b9;
  	  t19 += v * b10;
  	  t20 += v * b11;
  	  t21 += v * b12;
  	  t22 += v * b13;
  	  t23 += v * b14;
  	  t24 += v * b15;
  	  v = a[10];
  	  t10 += v * b0;
  	  t11 += v * b1;
  	  t12 += v * b2;
  	  t13 += v * b3;
  	  t14 += v * b4;
  	  t15 += v * b5;
  	  t16 += v * b6;
  	  t17 += v * b7;
  	  t18 += v * b8;
  	  t19 += v * b9;
  	  t20 += v * b10;
  	  t21 += v * b11;
  	  t22 += v * b12;
  	  t23 += v * b13;
  	  t24 += v * b14;
  	  t25 += v * b15;
  	  v = a[11];
  	  t11 += v * b0;
  	  t12 += v * b1;
  	  t13 += v * b2;
  	  t14 += v * b3;
  	  t15 += v * b4;
  	  t16 += v * b5;
  	  t17 += v * b6;
  	  t18 += v * b7;
  	  t19 += v * b8;
  	  t20 += v * b9;
  	  t21 += v * b10;
  	  t22 += v * b11;
  	  t23 += v * b12;
  	  t24 += v * b13;
  	  t25 += v * b14;
  	  t26 += v * b15;
  	  v = a[12];
  	  t12 += v * b0;
  	  t13 += v * b1;
  	  t14 += v * b2;
  	  t15 += v * b3;
  	  t16 += v * b4;
  	  t17 += v * b5;
  	  t18 += v * b6;
  	  t19 += v * b7;
  	  t20 += v * b8;
  	  t21 += v * b9;
  	  t22 += v * b10;
  	  t23 += v * b11;
  	  t24 += v * b12;
  	  t25 += v * b13;
  	  t26 += v * b14;
  	  t27 += v * b15;
  	  v = a[13];
  	  t13 += v * b0;
  	  t14 += v * b1;
  	  t15 += v * b2;
  	  t16 += v * b3;
  	  t17 += v * b4;
  	  t18 += v * b5;
  	  t19 += v * b6;
  	  t20 += v * b7;
  	  t21 += v * b8;
  	  t22 += v * b9;
  	  t23 += v * b10;
  	  t24 += v * b11;
  	  t25 += v * b12;
  	  t26 += v * b13;
  	  t27 += v * b14;
  	  t28 += v * b15;
  	  v = a[14];
  	  t14 += v * b0;
  	  t15 += v * b1;
  	  t16 += v * b2;
  	  t17 += v * b3;
  	  t18 += v * b4;
  	  t19 += v * b5;
  	  t20 += v * b6;
  	  t21 += v * b7;
  	  t22 += v * b8;
  	  t23 += v * b9;
  	  t24 += v * b10;
  	  t25 += v * b11;
  	  t26 += v * b12;
  	  t27 += v * b13;
  	  t28 += v * b14;
  	  t29 += v * b15;
  	  v = a[15];
  	  t15 += v * b0;
  	  t16 += v * b1;
  	  t17 += v * b2;
  	  t18 += v * b3;
  	  t19 += v * b4;
  	  t20 += v * b5;
  	  t21 += v * b6;
  	  t22 += v * b7;
  	  t23 += v * b8;
  	  t24 += v * b9;
  	  t25 += v * b10;
  	  t26 += v * b11;
  	  t27 += v * b12;
  	  t28 += v * b13;
  	  t29 += v * b14;
  	  t30 += v * b15;

  	  t0  += 38 * t16;
  	  t1  += 38 * t17;
  	  t2  += 38 * t18;
  	  t3  += 38 * t19;
  	  t4  += 38 * t20;
  	  t5  += 38 * t21;
  	  t6  += 38 * t22;
  	  t7  += 38 * t23;
  	  t8  += 38 * t24;
  	  t9  += 38 * t25;
  	  t10 += 38 * t26;
  	  t11 += 38 * t27;
  	  t12 += 38 * t28;
  	  t13 += 38 * t29;
  	  t14 += 38 * t30;
  	  // t15 left as is

  	  // first car
  	  c = 1;
  	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  	  t0 += c-1 + 37 * (c-1);

  	  // second car
  	  c = 1;
  	  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  	  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  	  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  	  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  	  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  	  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  	  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  	  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  	  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  	  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  	  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  	  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  	  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  	  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  	  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  	  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  	  t0 += c-1 + 37 * (c-1);

  	  o[ 0] = t0;
  	  o[ 1] = t1;
  	  o[ 2] = t2;
  	  o[ 3] = t3;
  	  o[ 4] = t4;
  	  o[ 5] = t5;
  	  o[ 6] = t6;
  	  o[ 7] = t7;
  	  o[ 8] = t8;
  	  o[ 9] = t9;
  	  o[10] = t10;
  	  o[11] = t11;
  	  o[12] = t12;
  	  o[13] = t13;
  	  o[14] = t14;
  	  o[15] = t15;
  	}

  	function S(o, a) {
  	  M(o, a, a);
  	}

  	function inv25519(o, i) {
  	  var c = gf();
  	  var a;
  	  for (a = 0; a < 16; a++) c[a] = i[a];
  	  for (a = 253; a >= 0; a--) {
  	    S(c, c);
  	    if(a !== 2 && a !== 4) M(c, c, i);
  	  }
  	  for (a = 0; a < 16; a++) o[a] = c[a];
  	}

  	function pow2523(o, i) {
  	  var c = gf();
  	  var a;
  	  for (a = 0; a < 16; a++) c[a] = i[a];
  	  for (a = 250; a >= 0; a--) {
  	      S(c, c);
  	      if(a !== 1) M(c, c, i);
  	  }
  	  for (a = 0; a < 16; a++) o[a] = c[a];
  	}

  	function crypto_scalarmult(q, n, p) {
  	  var z = new Uint8Array(32);
  	  var x = new Float64Array(80), r, i;
  	  var a = gf(), b = gf(), c = gf(),
  	      d = gf(), e = gf(), f = gf();
  	  for (i = 0; i < 31; i++) z[i] = n[i];
  	  z[31]=(n[31]&127)|64;
  	  z[0]&=248;
  	  unpack25519(x,p);
  	  for (i = 0; i < 16; i++) {
  	    b[i]=x[i];
  	    d[i]=a[i]=c[i]=0;
  	  }
  	  a[0]=d[0]=1;
  	  for (i=254; i>=0; --i) {
  	    r=(z[i>>>3]>>>(i&7))&1;
  	    sel25519(a,b,r);
  	    sel25519(c,d,r);
  	    A(e,a,c);
  	    Z(a,a,c);
  	    A(c,b,d);
  	    Z(b,b,d);
  	    S(d,e);
  	    S(f,a);
  	    M(a,c,a);
  	    M(c,b,e);
  	    A(e,a,c);
  	    Z(a,a,c);
  	    S(b,a);
  	    Z(c,d,f);
  	    M(a,c,_121665);
  	    A(a,a,d);
  	    M(c,c,a);
  	    M(a,d,f);
  	    M(d,b,x);
  	    S(b,e);
  	    sel25519(a,b,r);
  	    sel25519(c,d,r);
  	  }
  	  for (i = 0; i < 16; i++) {
  	    x[i+16]=a[i];
  	    x[i+32]=c[i];
  	    x[i+48]=b[i];
  	    x[i+64]=d[i];
  	  }
  	  var x32 = x.subarray(32);
  	  var x16 = x.subarray(16);
  	  inv25519(x32,x32);
  	  M(x16,x16,x32);
  	  pack25519(q,x16);
  	  return 0;
  	}

  	function crypto_scalarmult_base(q, n) {
  	  return crypto_scalarmult(q, n, _9);
  	}

  	function crypto_box_keypair(y, x) {
  	  randombytes(x, 32);
  	  return crypto_scalarmult_base(y, x);
  	}

  	function crypto_box_beforenm(k, y, x) {
  	  var s = new Uint8Array(32);
  	  crypto_scalarmult(s, x, y);
  	  return crypto_core_hsalsa20(k, _0, s, sigma);
  	}

  	var crypto_box_afternm = crypto_secretbox;
  	var crypto_box_open_afternm = crypto_secretbox_open;

  	function crypto_box(c, m, d, n, y, x) {
  	  var k = new Uint8Array(32);
  	  crypto_box_beforenm(k, y, x);
  	  return crypto_box_afternm(c, m, d, n, k);
  	}

  	function crypto_box_open(m, c, d, n, y, x) {
  	  var k = new Uint8Array(32);
  	  crypto_box_beforenm(k, y, x);
  	  return crypto_box_open_afternm(m, c, d, n, k);
  	}

  	var K = [
  	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
  	];

  	function crypto_hashblocks_hl(hh, hl, m, n) {
  	  var wh = new Int32Array(16), wl = new Int32Array(16),
  	      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
  	      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
  	      th, tl, i, j, h, l, a, b, c, d;

  	  var ah0 = hh[0],
  	      ah1 = hh[1],
  	      ah2 = hh[2],
  	      ah3 = hh[3],
  	      ah4 = hh[4],
  	      ah5 = hh[5],
  	      ah6 = hh[6],
  	      ah7 = hh[7],

  	      al0 = hl[0],
  	      al1 = hl[1],
  	      al2 = hl[2],
  	      al3 = hl[3],
  	      al4 = hl[4],
  	      al5 = hl[5],
  	      al6 = hl[6],
  	      al7 = hl[7];

  	  var pos = 0;
  	  while (n >= 128) {
  	    for (i = 0; i < 16; i++) {
  	      j = 8 * i + pos;
  	      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
  	      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
  	    }
  	    for (i = 0; i < 80; i++) {
  	      bh0 = ah0;
  	      bh1 = ah1;
  	      bh2 = ah2;
  	      bh3 = ah3;
  	      bh4 = ah4;
  	      bh5 = ah5;
  	      bh6 = ah6;
  	      bh7 = ah7;

  	      bl0 = al0;
  	      bl1 = al1;
  	      bl2 = al2;
  	      bl3 = al3;
  	      bl4 = al4;
  	      bl5 = al5;
  	      bl6 = al6;
  	      bl7 = al7;

  	      // add
  	      h = ah7;
  	      l = al7;

  	      a = l & 0xffff; b = l >>> 16;
  	      c = h & 0xffff; d = h >>> 16;

  	      // Sigma1
  	      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
  	      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

  	      a += l & 0xffff; b += l >>> 16;
  	      c += h & 0xffff; d += h >>> 16;

  	      // Ch
  	      h = (ah4 & ah5) ^ (~ah4 & ah6);
  	      l = (al4 & al5) ^ (~al4 & al6);

  	      a += l & 0xffff; b += l >>> 16;
  	      c += h & 0xffff; d += h >>> 16;

  	      // K
  	      h = K[i*2];
  	      l = K[i*2+1];

  	      a += l & 0xffff; b += l >>> 16;
  	      c += h & 0xffff; d += h >>> 16;

  	      // w
  	      h = wh[i%16];
  	      l = wl[i%16];

  	      a += l & 0xffff; b += l >>> 16;
  	      c += h & 0xffff; d += h >>> 16;

  	      b += a >>> 16;
  	      c += b >>> 16;
  	      d += c >>> 16;

  	      th = c & 0xffff | d << 16;
  	      tl = a & 0xffff | b << 16;

  	      // add
  	      h = th;
  	      l = tl;

  	      a = l & 0xffff; b = l >>> 16;
  	      c = h & 0xffff; d = h >>> 16;

  	      // Sigma0
  	      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
  	      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

  	      a += l & 0xffff; b += l >>> 16;
  	      c += h & 0xffff; d += h >>> 16;

  	      // Maj
  	      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
  	      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

  	      a += l & 0xffff; b += l >>> 16;
  	      c += h & 0xffff; d += h >>> 16;

  	      b += a >>> 16;
  	      c += b >>> 16;
  	      d += c >>> 16;

  	      bh7 = (c & 0xffff) | (d << 16);
  	      bl7 = (a & 0xffff) | (b << 16);

  	      // add
  	      h = bh3;
  	      l = bl3;

  	      a = l & 0xffff; b = l >>> 16;
  	      c = h & 0xffff; d = h >>> 16;

  	      h = th;
  	      l = tl;

  	      a += l & 0xffff; b += l >>> 16;
  	      c += h & 0xffff; d += h >>> 16;

  	      b += a >>> 16;
  	      c += b >>> 16;
  	      d += c >>> 16;

  	      bh3 = (c & 0xffff) | (d << 16);
  	      bl3 = (a & 0xffff) | (b << 16);

  	      ah1 = bh0;
  	      ah2 = bh1;
  	      ah3 = bh2;
  	      ah4 = bh3;
  	      ah5 = bh4;
  	      ah6 = bh5;
  	      ah7 = bh6;
  	      ah0 = bh7;

  	      al1 = bl0;
  	      al2 = bl1;
  	      al3 = bl2;
  	      al4 = bl3;
  	      al5 = bl4;
  	      al6 = bl5;
  	      al7 = bl6;
  	      al0 = bl7;

  	      if (i%16 === 15) {
  	        for (j = 0; j < 16; j++) {
  	          // add
  	          h = wh[j];
  	          l = wl[j];

  	          a = l & 0xffff; b = l >>> 16;
  	          c = h & 0xffff; d = h >>> 16;

  	          h = wh[(j+9)%16];
  	          l = wl[(j+9)%16];

  	          a += l & 0xffff; b += l >>> 16;
  	          c += h & 0xffff; d += h >>> 16;

  	          // sigma0
  	          th = wh[(j+1)%16];
  	          tl = wl[(j+1)%16];
  	          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
  	          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

  	          a += l & 0xffff; b += l >>> 16;
  	          c += h & 0xffff; d += h >>> 16;

  	          // sigma1
  	          th = wh[(j+14)%16];
  	          tl = wl[(j+14)%16];
  	          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
  	          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

  	          a += l & 0xffff; b += l >>> 16;
  	          c += h & 0xffff; d += h >>> 16;

  	          b += a >>> 16;
  	          c += b >>> 16;
  	          d += c >>> 16;

  	          wh[j] = (c & 0xffff) | (d << 16);
  	          wl[j] = (a & 0xffff) | (b << 16);
  	        }
  	      }
  	    }

  	    // add
  	    h = ah0;
  	    l = al0;

  	    a = l & 0xffff; b = l >>> 16;
  	    c = h & 0xffff; d = h >>> 16;

  	    h = hh[0];
  	    l = hl[0];

  	    a += l & 0xffff; b += l >>> 16;
  	    c += h & 0xffff; d += h >>> 16;

  	    b += a >>> 16;
  	    c += b >>> 16;
  	    d += c >>> 16;

  	    hh[0] = ah0 = (c & 0xffff) | (d << 16);
  	    hl[0] = al0 = (a & 0xffff) | (b << 16);

  	    h = ah1;
  	    l = al1;

  	    a = l & 0xffff; b = l >>> 16;
  	    c = h & 0xffff; d = h >>> 16;

  	    h = hh[1];
  	    l = hl[1];

  	    a += l & 0xffff; b += l >>> 16;
  	    c += h & 0xffff; d += h >>> 16;

  	    b += a >>> 16;
  	    c += b >>> 16;
  	    d += c >>> 16;

  	    hh[1] = ah1 = (c & 0xffff) | (d << 16);
  	    hl[1] = al1 = (a & 0xffff) | (b << 16);

  	    h = ah2;
  	    l = al2;

  	    a = l & 0xffff; b = l >>> 16;
  	    c = h & 0xffff; d = h >>> 16;

  	    h = hh[2];
  	    l = hl[2];

  	    a += l & 0xffff; b += l >>> 16;
  	    c += h & 0xffff; d += h >>> 16;

  	    b += a >>> 16;
  	    c += b >>> 16;
  	    d += c >>> 16;

  	    hh[2] = ah2 = (c & 0xffff) | (d << 16);
  	    hl[2] = al2 = (a & 0xffff) | (b << 16);

  	    h = ah3;
  	    l = al3;

  	    a = l & 0xffff; b = l >>> 16;
  	    c = h & 0xffff; d = h >>> 16;

  	    h = hh[3];
  	    l = hl[3];

  	    a += l & 0xffff; b += l >>> 16;
  	    c += h & 0xffff; d += h >>> 16;

  	    b += a >>> 16;
  	    c += b >>> 16;
  	    d += c >>> 16;

  	    hh[3] = ah3 = (c & 0xffff) | (d << 16);
  	    hl[3] = al3 = (a & 0xffff) | (b << 16);

  	    h = ah4;
  	    l = al4;

  	    a = l & 0xffff; b = l >>> 16;
  	    c = h & 0xffff; d = h >>> 16;

  	    h = hh[4];
  	    l = hl[4];

  	    a += l & 0xffff; b += l >>> 16;
  	    c += h & 0xffff; d += h >>> 16;

  	    b += a >>> 16;
  	    c += b >>> 16;
  	    d += c >>> 16;

  	    hh[4] = ah4 = (c & 0xffff) | (d << 16);
  	    hl[4] = al4 = (a & 0xffff) | (b << 16);

  	    h = ah5;
  	    l = al5;

  	    a = l & 0xffff; b = l >>> 16;
  	    c = h & 0xffff; d = h >>> 16;

  	    h = hh[5];
  	    l = hl[5];

  	    a += l & 0xffff; b += l >>> 16;
  	    c += h & 0xffff; d += h >>> 16;

  	    b += a >>> 16;
  	    c += b >>> 16;
  	    d += c >>> 16;

  	    hh[5] = ah5 = (c & 0xffff) | (d << 16);
  	    hl[5] = al5 = (a & 0xffff) | (b << 16);

  	    h = ah6;
  	    l = al6;

  	    a = l & 0xffff; b = l >>> 16;
  	    c = h & 0xffff; d = h >>> 16;

  	    h = hh[6];
  	    l = hl[6];

  	    a += l & 0xffff; b += l >>> 16;
  	    c += h & 0xffff; d += h >>> 16;

  	    b += a >>> 16;
  	    c += b >>> 16;
  	    d += c >>> 16;

  	    hh[6] = ah6 = (c & 0xffff) | (d << 16);
  	    hl[6] = al6 = (a & 0xffff) | (b << 16);

  	    h = ah7;
  	    l = al7;

  	    a = l & 0xffff; b = l >>> 16;
  	    c = h & 0xffff; d = h >>> 16;

  	    h = hh[7];
  	    l = hl[7];

  	    a += l & 0xffff; b += l >>> 16;
  	    c += h & 0xffff; d += h >>> 16;

  	    b += a >>> 16;
  	    c += b >>> 16;
  	    d += c >>> 16;

  	    hh[7] = ah7 = (c & 0xffff) | (d << 16);
  	    hl[7] = al7 = (a & 0xffff) | (b << 16);

  	    pos += 128;
  	    n -= 128;
  	  }

  	  return n;
  	}

  	function crypto_hash(out, m, n) {
  	  var hh = new Int32Array(8),
  	      hl = new Int32Array(8),
  	      x = new Uint8Array(256),
  	      i, b = n;

  	  hh[0] = 0x6a09e667;
  	  hh[1] = 0xbb67ae85;
  	  hh[2] = 0x3c6ef372;
  	  hh[3] = 0xa54ff53a;
  	  hh[4] = 0x510e527f;
  	  hh[5] = 0x9b05688c;
  	  hh[6] = 0x1f83d9ab;
  	  hh[7] = 0x5be0cd19;

  	  hl[0] = 0xf3bcc908;
  	  hl[1] = 0x84caa73b;
  	  hl[2] = 0xfe94f82b;
  	  hl[3] = 0x5f1d36f1;
  	  hl[4] = 0xade682d1;
  	  hl[5] = 0x2b3e6c1f;
  	  hl[6] = 0xfb41bd6b;
  	  hl[7] = 0x137e2179;

  	  crypto_hashblocks_hl(hh, hl, m, n);
  	  n %= 128;

  	  for (i = 0; i < n; i++) x[i] = m[b-n+i];
  	  x[n] = 128;

  	  n = 256-128*(n<112?1:0);
  	  x[n-9] = 0;
  	  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
  	  crypto_hashblocks_hl(hh, hl, x, n);

  	  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

  	  return 0;
  	}

  	function add(p, q) {
  	  var a = gf(), b = gf(), c = gf(),
  	      d = gf(), e = gf(), f = gf(),
  	      g = gf(), h = gf(), t = gf();

  	  Z(a, p[1], p[0]);
  	  Z(t, q[1], q[0]);
  	  M(a, a, t);
  	  A(b, p[0], p[1]);
  	  A(t, q[0], q[1]);
  	  M(b, b, t);
  	  M(c, p[3], q[3]);
  	  M(c, c, D2);
  	  M(d, p[2], q[2]);
  	  A(d, d, d);
  	  Z(e, b, a);
  	  Z(f, d, c);
  	  A(g, d, c);
  	  A(h, b, a);

  	  M(p[0], e, f);
  	  M(p[1], h, g);
  	  M(p[2], g, f);
  	  M(p[3], e, h);
  	}

  	function cswap(p, q, b) {
  	  var i;
  	  for (i = 0; i < 4; i++) {
  	    sel25519(p[i], q[i], b);
  	  }
  	}

  	function pack(r, p) {
  	  var tx = gf(), ty = gf(), zi = gf();
  	  inv25519(zi, p[2]);
  	  M(tx, p[0], zi);
  	  M(ty, p[1], zi);
  	  pack25519(r, ty);
  	  r[31] ^= par25519(tx) << 7;
  	}

  	function scalarmult(p, q, s) {
  	  var b, i;
  	  set25519(p[0], gf0);
  	  set25519(p[1], gf1);
  	  set25519(p[2], gf1);
  	  set25519(p[3], gf0);
  	  for (i = 255; i >= 0; --i) {
  	    b = (s[(i/8)|0] >> (i&7)) & 1;
  	    cswap(p, q, b);
  	    add(q, p);
  	    add(p, p);
  	    cswap(p, q, b);
  	  }
  	}

  	function scalarbase(p, s) {
  	  var q = [gf(), gf(), gf(), gf()];
  	  set25519(q[0], X);
  	  set25519(q[1], Y);
  	  set25519(q[2], gf1);
  	  M(q[3], X, Y);
  	  scalarmult(p, q, s);
  	}

  	function crypto_sign_keypair(pk, sk, seeded) {
  	  var d = new Uint8Array(64);
  	  var p = [gf(), gf(), gf(), gf()];
  	  var i;

  	  if (!seeded) randombytes(sk, 32);
  	  crypto_hash(d, sk, 32);
  	  d[0] &= 248;
  	  d[31] &= 127;
  	  d[31] |= 64;

  	  scalarbase(p, d);
  	  pack(pk, p);

  	  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
  	  return 0;
  	}

  	var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

  	function modL(r, x) {
  	  var carry, i, j, k;
  	  for (i = 63; i >= 32; --i) {
  	    carry = 0;
  	    for (j = i - 32, k = i - 12; j < k; ++j) {
  	      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
  	      carry = Math.floor((x[j] + 128) / 256);
  	      x[j] -= carry * 256;
  	    }
  	    x[j] += carry;
  	    x[i] = 0;
  	  }
  	  carry = 0;
  	  for (j = 0; j < 32; j++) {
  	    x[j] += carry - (x[31] >> 4) * L[j];
  	    carry = x[j] >> 8;
  	    x[j] &= 255;
  	  }
  	  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
  	  for (i = 0; i < 32; i++) {
  	    x[i+1] += x[i] >> 8;
  	    r[i] = x[i] & 255;
  	  }
  	}

  	function reduce(r) {
  	  var x = new Float64Array(64), i;
  	  for (i = 0; i < 64; i++) x[i] = r[i];
  	  for (i = 0; i < 64; i++) r[i] = 0;
  	  modL(r, x);
  	}

  	// Note: difference from C - smlen returned, not passed as argument.
  	function crypto_sign(sm, m, n, sk) {
  	  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
  	  var i, j, x = new Float64Array(64);
  	  var p = [gf(), gf(), gf(), gf()];

  	  crypto_hash(d, sk, 32);
  	  d[0] &= 248;
  	  d[31] &= 127;
  	  d[31] |= 64;

  	  var smlen = n + 64;
  	  for (i = 0; i < n; i++) sm[64 + i] = m[i];
  	  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

  	  crypto_hash(r, sm.subarray(32), n+32);
  	  reduce(r);
  	  scalarbase(p, r);
  	  pack(sm, p);

  	  for (i = 32; i < 64; i++) sm[i] = sk[i];
  	  crypto_hash(h, sm, n + 64);
  	  reduce(h);

  	  for (i = 0; i < 64; i++) x[i] = 0;
  	  for (i = 0; i < 32; i++) x[i] = r[i];
  	  for (i = 0; i < 32; i++) {
  	    for (j = 0; j < 32; j++) {
  	      x[i+j] += h[i] * d[j];
  	    }
  	  }

  	  modL(sm.subarray(32), x);
  	  return smlen;
  	}

  	function unpackneg(r, p) {
  	  var t = gf(), chk = gf(), num = gf(),
  	      den = gf(), den2 = gf(), den4 = gf(),
  	      den6 = gf();

  	  set25519(r[2], gf1);
  	  unpack25519(r[1], p);
  	  S(num, r[1]);
  	  M(den, num, D);
  	  Z(num, num, r[2]);
  	  A(den, r[2], den);

  	  S(den2, den);
  	  S(den4, den2);
  	  M(den6, den4, den2);
  	  M(t, den6, num);
  	  M(t, t, den);

  	  pow2523(t, t);
  	  M(t, t, num);
  	  M(t, t, den);
  	  M(t, t, den);
  	  M(r[0], t, den);

  	  S(chk, r[0]);
  	  M(chk, chk, den);
  	  if (neq25519(chk, num)) M(r[0], r[0], I);

  	  S(chk, r[0]);
  	  M(chk, chk, den);
  	  if (neq25519(chk, num)) return -1;

  	  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

  	  M(r[3], r[0], r[1]);
  	  return 0;
  	}

  	function crypto_sign_open(m, sm, n, pk) {
  	  var i;
  	  var t = new Uint8Array(32), h = new Uint8Array(64);
  	  var p = [gf(), gf(), gf(), gf()],
  	      q = [gf(), gf(), gf(), gf()];

  	  if (n < 64) return -1;

  	  if (unpackneg(q, pk)) return -1;

  	  for (i = 0; i < n; i++) m[i] = sm[i];
  	  for (i = 0; i < 32; i++) m[i+32] = pk[i];
  	  crypto_hash(h, m, n);
  	  reduce(h);
  	  scalarmult(p, q, h);

  	  scalarbase(q, sm.subarray(32));
  	  add(p, q);
  	  pack(t, p);

  	  n -= 64;
  	  if (crypto_verify_32(sm, 0, t, 0)) {
  	    for (i = 0; i < n; i++) m[i] = 0;
  	    return -1;
  	  }

  	  for (i = 0; i < n; i++) m[i] = sm[i + 64];
  	  return n;
  	}

  	var crypto_secretbox_KEYBYTES = 32,
  	    crypto_secretbox_NONCEBYTES = 24,
  	    crypto_secretbox_ZEROBYTES = 32,
  	    crypto_secretbox_BOXZEROBYTES = 16,
  	    crypto_scalarmult_BYTES = 32,
  	    crypto_scalarmult_SCALARBYTES = 32,
  	    crypto_box_PUBLICKEYBYTES = 32,
  	    crypto_box_SECRETKEYBYTES = 32,
  	    crypto_box_BEFORENMBYTES = 32,
  	    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
  	    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
  	    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
  	    crypto_sign_BYTES = 64,
  	    crypto_sign_PUBLICKEYBYTES = 32,
  	    crypto_sign_SECRETKEYBYTES = 64,
  	    crypto_sign_SEEDBYTES = 32,
  	    crypto_hash_BYTES = 64;

  	nacl.lowlevel = {
  	  crypto_core_hsalsa20: crypto_core_hsalsa20,
  	  crypto_stream_xor: crypto_stream_xor,
  	  crypto_stream: crypto_stream,
  	  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
  	  crypto_stream_salsa20: crypto_stream_salsa20,
  	  crypto_onetimeauth: crypto_onetimeauth,
  	  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
  	  crypto_verify_16: crypto_verify_16,
  	  crypto_verify_32: crypto_verify_32,
  	  crypto_secretbox: crypto_secretbox,
  	  crypto_secretbox_open: crypto_secretbox_open,
  	  crypto_scalarmult: crypto_scalarmult,
  	  crypto_scalarmult_base: crypto_scalarmult_base,
  	  crypto_box_beforenm: crypto_box_beforenm,
  	  crypto_box_afternm: crypto_box_afternm,
  	  crypto_box: crypto_box,
  	  crypto_box_open: crypto_box_open,
  	  crypto_box_keypair: crypto_box_keypair,
  	  crypto_hash: crypto_hash,
  	  crypto_sign: crypto_sign,
  	  crypto_sign_keypair: crypto_sign_keypair,
  	  crypto_sign_open: crypto_sign_open,

  	  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
  	  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
  	  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
  	  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
  	  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
  	  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
  	  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
  	  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
  	  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
  	  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
  	  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
  	  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
  	  crypto_sign_BYTES: crypto_sign_BYTES,
  	  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
  	  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
  	  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
  	  crypto_hash_BYTES: crypto_hash_BYTES,

  	  gf: gf,
  	  D: D,
  	  L: L,
  	  pack25519: pack25519,
  	  unpack25519: unpack25519,
  	  M: M,
  	  A: A,
  	  S: S,
  	  Z: Z,
  	  pow2523: pow2523,
  	  add: add,
  	  set25519: set25519,
  	  modL: modL,
  	  scalarmult: scalarmult,
  	  scalarbase: scalarbase,
  	};

  	/* High-level API */

  	function checkLengths(k, n) {
  	  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
  	  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
  	}

  	function checkBoxLengths(pk, sk) {
  	  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
  	  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
  	}

  	function checkArrayTypes() {
  	  for (var i = 0; i < arguments.length; i++) {
  	    if (!(arguments[i] instanceof Uint8Array))
  	      throw new TypeError('unexpected type, use Uint8Array');
  	  }
  	}

  	function cleanup(arr) {
  	  for (var i = 0; i < arr.length; i++) arr[i] = 0;
  	}

  	nacl.randomBytes = function(n) {
  	  var b = new Uint8Array(n);
  	  randombytes(b, n);
  	  return b;
  	};

  	nacl.secretbox = function(msg, nonce, key) {
  	  checkArrayTypes(msg, nonce, key);
  	  checkLengths(key, nonce);
  	  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
  	  var c = new Uint8Array(m.length);
  	  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
  	  crypto_secretbox(c, m, m.length, nonce, key);
  	  return c.subarray(crypto_secretbox_BOXZEROBYTES);
  	};

  	nacl.secretbox.open = function(box, nonce, key) {
  	  checkArrayTypes(box, nonce, key);
  	  checkLengths(key, nonce);
  	  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
  	  var m = new Uint8Array(c.length);
  	  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
  	  if (c.length < 32) return null;
  	  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
  	  return m.subarray(crypto_secretbox_ZEROBYTES);
  	};

  	nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
  	nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
  	nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

  	nacl.scalarMult = function(n, p) {
  	  checkArrayTypes(n, p);
  	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  	  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
  	  var q = new Uint8Array(crypto_scalarmult_BYTES);
  	  crypto_scalarmult(q, n, p);
  	  return q;
  	};

  	nacl.scalarMult.base = function(n) {
  	  checkArrayTypes(n);
  	  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  	  var q = new Uint8Array(crypto_scalarmult_BYTES);
  	  crypto_scalarmult_base(q, n);
  	  return q;
  	};

  	nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
  	nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

  	nacl.box = function(msg, nonce, publicKey, secretKey) {
  	  var k = nacl.box.before(publicKey, secretKey);
  	  return nacl.secretbox(msg, nonce, k);
  	};

  	nacl.box.before = function(publicKey, secretKey) {
  	  checkArrayTypes(publicKey, secretKey);
  	  checkBoxLengths(publicKey, secretKey);
  	  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
  	  crypto_box_beforenm(k, publicKey, secretKey);
  	  return k;
  	};

  	nacl.box.after = nacl.secretbox;

  	nacl.box.open = function(msg, nonce, publicKey, secretKey) {
  	  var k = nacl.box.before(publicKey, secretKey);
  	  return nacl.secretbox.open(msg, nonce, k);
  	};

  	nacl.box.open.after = nacl.secretbox.open;

  	nacl.box.keyPair = function() {
  	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  	  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
  	  crypto_box_keypair(pk, sk);
  	  return {publicKey: pk, secretKey: sk};
  	};

  	nacl.box.keyPair.fromSecretKey = function(secretKey) {
  	  checkArrayTypes(secretKey);
  	  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
  	    throw new Error('bad secret key size');
  	  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  	  crypto_scalarmult_base(pk, secretKey);
  	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
  	};

  	nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
  	nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
  	nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
  	nacl.box.nonceLength = crypto_box_NONCEBYTES;
  	nacl.box.overheadLength = nacl.secretbox.overheadLength;

  	nacl.sign = function(msg, secretKey) {
  	  checkArrayTypes(msg, secretKey);
  	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
  	    throw new Error('bad secret key size');
  	  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
  	  crypto_sign(signedMsg, msg, msg.length, secretKey);
  	  return signedMsg;
  	};

  	nacl.sign.open = function(signedMsg, publicKey) {
  	  checkArrayTypes(signedMsg, publicKey);
  	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
  	    throw new Error('bad public key size');
  	  var tmp = new Uint8Array(signedMsg.length);
  	  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
  	  if (mlen < 0) return null;
  	  var m = new Uint8Array(mlen);
  	  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
  	  return m;
  	};

  	nacl.sign.detached = function(msg, secretKey) {
  	  var signedMsg = nacl.sign(msg, secretKey);
  	  var sig = new Uint8Array(crypto_sign_BYTES);
  	  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
  	  return sig;
  	};

  	nacl.sign.detached.verify = function(msg, sig, publicKey) {
  	  checkArrayTypes(msg, sig, publicKey);
  	  if (sig.length !== crypto_sign_BYTES)
  	    throw new Error('bad signature size');
  	  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
  	    throw new Error('bad public key size');
  	  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
  	  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
  	  var i;
  	  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
  	  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
  	  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
  	};

  	nacl.sign.keyPair = function() {
  	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  	  crypto_sign_keypair(pk, sk);
  	  return {publicKey: pk, secretKey: sk};
  	};

  	nacl.sign.keyPair.fromSecretKey = function(secretKey) {
  	  checkArrayTypes(secretKey);
  	  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
  	    throw new Error('bad secret key size');
  	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  	  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
  	  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
  	};

  	nacl.sign.keyPair.fromSeed = function(seed) {
  	  checkArrayTypes(seed);
  	  if (seed.length !== crypto_sign_SEEDBYTES)
  	    throw new Error('bad seed size');
  	  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  	  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  	  for (var i = 0; i < 32; i++) sk[i] = seed[i];
  	  crypto_sign_keypair(pk, sk, true);
  	  return {publicKey: pk, secretKey: sk};
  	};

  	nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
  	nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
  	nacl.sign.seedLength = crypto_sign_SEEDBYTES;
  	nacl.sign.signatureLength = crypto_sign_BYTES;

  	nacl.hash = function(msg) {
  	  checkArrayTypes(msg);
  	  var h = new Uint8Array(crypto_hash_BYTES);
  	  crypto_hash(h, msg, msg.length);
  	  return h;
  	};

  	nacl.hash.hashLength = crypto_hash_BYTES;

  	nacl.verify = function(x, y) {
  	  checkArrayTypes(x, y);
  	  // Zero length arguments are considered not equal.
  	  if (x.length === 0 || y.length === 0) return false;
  	  if (x.length !== y.length) return false;
  	  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
  	};

  	nacl.setPRNG = function(fn) {
  	  randombytes = fn;
  	};

  	(function() {
  	  // Initialize PRNG if environment provides CSPRNG.
  	  // If not, methods calling randombytes will throw.
  	  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
  	  if (crypto && crypto.getRandomValues) {
  	    // Browsers.
  	    var QUOTA = 65536;
  	    nacl.setPRNG(function(x, n) {
  	      var i, v = new Uint8Array(n);
  	      for (i = 0; i < n; i += QUOTA) {
  	        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
  	      }
  	      for (i = 0; i < n; i++) x[i] = v[i];
  	      cleanup(v);
  	    });
  	  } else if (typeof commonjsRequire !== 'undefined') {
  	    // Node.js.
  	    crypto = require$$3;
  	    if (crypto && crypto.randomBytes) {
  	      nacl.setPRNG(function(x, n) {
  	        var i, v = crypto.randomBytes(n);
  	        for (i = 0; i < n; i++) x[i] = v[i];
  	        cleanup(v);
  	      });
  	    }
  	  }
  	})();

  	})(module.exports ? module.exports : (self.nacl = self.nacl || {}));
  } (naclFast));

  var nacl = naclFast.exports;

  /*
   * ed2curve: convert Ed25519 signing key pair into Curve25519
   * key pair suitable for Diffie-Hellman key exchange.
   *
   * Written by Dmitry Chestnykh in 2014. Public domain.
   */

  (function (module) {
  	/* jshint newcap: false */
  	(function(root, f) {
  	  if (module.exports) module.exports = f(naclFast.exports);
  	  else root.ed2curve = f(root.nacl);
  	}(commonjsGlobal, function(nacl) {
  	  if (!nacl) throw new Error('tweetnacl not loaded');

  	  // -- Operations copied from TweetNaCl.js. --

  	  var gf = function(init) {
  	    var i, r = new Float64Array(16);
  	    if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
  	    return r;
  	  };

  	  var gf0 = gf(),
  	      gf1 = gf([1]),
  	      D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
  	      I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

  	  function car25519(o) {
  	    var c;
  	    var i;
  	    for (i = 0; i < 16; i++) {
  	      o[i] += 65536;
  	      c = Math.floor(o[i] / 65536);
  	      o[(i+1)*(i<15?1:0)] += c - 1 + 37 * (c-1) * (i===15?1:0);
  	      o[i] -= (c * 65536);
  	    }
  	  }

  	  function sel25519(p, q, b) {
  	    var t, c = ~(b-1);
  	    for (var i = 0; i < 16; i++) {
  	      t = c & (p[i] ^ q[i]);
  	      p[i] ^= t;
  	      q[i] ^= t;
  	    }
  	  }

  	  function unpack25519(o, n) {
  	    var i;
  	    for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
  	    o[15] &= 0x7fff;
  	  }

  	  // addition
  	  function A(o, a, b) {
  	    var i;
  	    for (i = 0; i < 16; i++) o[i] = (a[i] + b[i])|0;
  	  }

  	  // subtraction
  	  function Z(o, a, b) {
  	    var i;
  	    for (i = 0; i < 16; i++) o[i] = (a[i] - b[i])|0;
  	  }

  	  // multiplication
  	  function M(o, a, b) {
  	    var i, j, t = new Float64Array(31);
  	    for (i = 0; i < 31; i++) t[i] = 0;
  	    for (i = 0; i < 16; i++) {
  	      for (j = 0; j < 16; j++) {
  	        t[i+j] += a[i] * b[j];
  	      }
  	    }
  	    for (i = 0; i < 15; i++) {
  	      t[i] += 38 * t[i+16];
  	    }
  	    for (i = 0; i < 16; i++) o[i] = t[i];
  	    car25519(o);
  	    car25519(o);
  	  }

  	  // squaring
  	  function S(o, a) {
  	    M(o, a, a);
  	  }

  	  // inversion
  	  function inv25519(o, i) {
  	    var c = gf();
  	    var a;
  	    for (a = 0; a < 16; a++) c[a] = i[a];
  	    for (a = 253; a >= 0; a--) {
  	      S(c, c);
  	      if(a !== 2 && a !== 4) M(c, c, i);
  	    }
  	    for (a = 0; a < 16; a++) o[a] = c[a];
  	  }

  	  function pack25519(o, n) {
  	    var i, j, b;
  	    var m = gf(), t = gf();
  	    for (i = 0; i < 16; i++) t[i] = n[i];
  	    car25519(t);
  	    car25519(t);
  	    car25519(t);
  	    for (j = 0; j < 2; j++) {
  	      m[0] = t[0] - 0xffed;
  	      for (i = 1; i < 15; i++) {
  	        m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
  	        m[i-1] &= 0xffff;
  	      }
  	      m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
  	      b = (m[15]>>16) & 1;
  	      m[14] &= 0xffff;
  	      sel25519(t, m, 1-b);
  	    }
  	    for (i = 0; i < 16; i++) {
  	      o[2*i] = t[i] & 0xff;
  	      o[2*i+1] = t[i] >> 8;
  	    }
  	  }

  	  function par25519(a) {
  	    var d = new Uint8Array(32);
  	    pack25519(d, a);
  	    return d[0] & 1;
  	  }

  	  function vn(x, xi, y, yi, n) {
  	    var i, d = 0;
  	    for (i = 0; i < n; i++) d |= x[xi + i] ^ y[yi + i];
  	    return (1 & ((d - 1) >>> 8)) - 1;
  	  }

  	  function crypto_verify_32(x, xi, y, yi) {
  	    return vn(x, xi, y, yi, 32);
  	  }

  	  function neq25519(a, b) {
  	    var c = new Uint8Array(32), d = new Uint8Array(32);
  	    pack25519(c, a);
  	    pack25519(d, b);
  	    return crypto_verify_32(c, 0, d, 0);
  	  }

  	  function pow2523(o, i) {
  	    var c = gf();
  	    var a;
  	    for (a = 0; a < 16; a++) c[a] = i[a];
  	    for (a = 250; a >= 0; a--) {
  	      S(c, c);
  	      if (a !== 1) M(c, c, i);
  	    }
  	    for (a = 0; a < 16; a++) o[a] = c[a];
  	  }

  	  function set25519(r, a) {
  	    var i;
  	    for (i = 0; i < 16; i++) r[i] = a[i] | 0;
  	  }

  	  function unpackneg(r, p) {
  	    var t = gf(), chk = gf(), num = gf(),
  	      den = gf(), den2 = gf(), den4 = gf(),
  	      den6 = gf();

  	    set25519(r[2], gf1);
  	    unpack25519(r[1], p);
  	    S(num, r[1]);
  	    M(den, num, D);
  	    Z(num, num, r[2]);
  	    A(den, r[2], den);

  	    S(den2, den);
  	    S(den4, den2);
  	    M(den6, den4, den2);
  	    M(t, den6, num);
  	    M(t, t, den);

  	    pow2523(t, t);
  	    M(t, t, num);
  	    M(t, t, den);
  	    M(t, t, den);
  	    M(r[0], t, den);

  	    S(chk, r[0]);
  	    M(chk, chk, den);
  	    if (neq25519(chk, num)) M(r[0], r[0], I);

  	    S(chk, r[0]);
  	    M(chk, chk, den);
  	    if (neq25519(chk, num)) return -1;

  	    if (par25519(r[0]) === (p[31] >> 7)) Z(r[0], gf0, r[0]);

  	    M(r[3], r[0], r[1]);
  	    return 0;
  	  }

  	  // ----

  	  // Converts Ed25519 public key to Curve25519 public key.
  	  // montgomeryX = (edwardsY + 1)*inverse(1 - edwardsY) mod p
  	  function convertPublicKey(pk) {
  	    var z = new Uint8Array(32),
  	      q = [gf(), gf(), gf(), gf()],
  	      a = gf(), b = gf();

  	    if (unpackneg(q, pk)) return null; // reject invalid key

  	    var y = q[1];

  	    A(a, gf1, y);
  	    Z(b, gf1, y);
  	    inv25519(b, b);
  	    M(a, a, b);

  	    pack25519(z, a);
  	    return z;
  	  }

  	  // Converts Ed25519 secret key to Curve25519 secret key.
  	  function convertSecretKey(sk) {
  	    var d = new Uint8Array(64), o = new Uint8Array(32), i;
  	    nacl.lowlevel.crypto_hash(d, sk, 32);
  	    d[0] &= 248;
  	    d[31] &= 127;
  	    d[31] |= 64;
  	    for (i = 0; i < 32; i++) o[i] = d[i];
  	    for (i = 0; i < 64; i++) d[i] = 0;
  	    return o;
  	  }

  	  function convertKeyPair(edKeyPair) {
  	    var publicKey = convertPublicKey(edKeyPair.publicKey);
  	    if (!publicKey) return null;
  	    return {
  	      publicKey: publicKey,
  	      secretKey: convertSecretKey(edKeyPair.secretKey)
  	    };
  	  }

  	  return {
  	    convertPublicKey: convertPublicKey,
  	    convertSecretKey: convertSecretKey,
  	    convertKeyPair: convertKeyPair,
  	  };

  	}));
  } (ed2curve$1));

  var ed2curve = ed2curve$1.exports;

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function convertSecretKeyToCurve25519(secretKey) {
    return ed2curve.convertSecretKey(secretKey);
  }
  function convertPublicKeyToCurve25519(publicKey) {
    return assertReturn(ed2curve.convertPublicKey(publicKey), 'Unable to convert publicKey to ed25519');
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const HDKD = compactAddLength(stringToU8a('Ed25519HDKD'));
  function ed25519DeriveHard(seed, chainCode) {
    assert$1(isU8a(chainCode) && chainCode.length === 32, 'Invalid chainCode passed to derive');
    return blake2AsU8a(u8aConcat(HDKD, seed, chainCode));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name randomAsU8a
   * @summary Creates a Uint8Array filled with random bytes.
   * @description
   * Returns a `Uint8Array` with the specified (optional) length filled with random bytes.
   * @example
   * <BR>
   *
   * ```javascript
   * import { randomAsU8a } from '@polkadot/util-crypto';
   *
   * randomAsU8a(); // => Uint8Array([...])
   * ```
   */

  function randomAsU8a(length = 32) {
    return getRandomValues(new Uint8Array(length));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  new BN(0b11111111111111111111111111111111111111111111111111111);

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name ed25519PairFromSeed
   * @summary Creates a new public/secret keypair from a seed.
   * @description
   * Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
   * @example
   * <BR>
   *
   * ```javascript
   * import { ed25519PairFromSeed } from '@polkadot/util-crypto';
   *
   * ed25519PairFromSeed(...); // => { secretKey: [...], publicKey: [...] }
   * ```
   */

  function ed25519PairFromSeed(seed, onlyJs) {
    if (!onlyJs && isReady()) {
      const full = ed25519KeypairFromSeed(seed);
      return {
        publicKey: full.slice(32),
        secretKey: full.slice(0, 64)
      };
    }

    return nacl.sign.keyPair.fromSeed(seed);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name ed25519Sign
   * @summary Signs a message using the supplied secretKey
   * @description
   * Returns message signature of `message`, using the `secretKey`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { ed25519Sign } from '@polkadot/util-crypto';
   *
   * ed25519Sign([...], [...]); // => [...]
   * ```
   */

  function ed25519Sign(message, {
    publicKey,
    secretKey
  }, onlyJs) {
    assert$1(secretKey, 'Expected a valid secretKey');
    const messageU8a = u8aToU8a(message);
    return !onlyJs && isReady() ? ed25519Sign$1(publicKey, secretKey.subarray(0, 32), messageU8a) : nacl.sign.detached(messageU8a, secretKey);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name ed25519Sign
   * @summary Verifies the signature on the supplied message.
   * @description
   * Verifies the `signature` on `message` with the supplied `publicKey`. Returns `true` on sucess, `false` otherwise.
   * @example
   * <BR>
   *
   * ```javascript
   * import { ed25519Verify } from '@polkadot/util-crypto';
   *
   * ed25519Verify([...], [...], [...]); // => true/false
   * ```
   */

  function ed25519Verify(message, signature, publicKey, onlyJs) {
    const messageU8a = u8aToU8a(message);
    const publicKeyU8a = u8aToU8a(publicKey);
    const signatureU8a = u8aToU8a(signature);
    assert$1(publicKeyU8a.length === 32, () => `Invalid publicKey, received ${publicKeyU8a.length}, expected 32`);
    assert$1(signatureU8a.length === 64, () => `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
    return !onlyJs && isReady() ? ed25519Verify$1(signatureU8a, messageU8a, publicKeyU8a) : nacl.sign.detached.verify(messageU8a, signatureU8a, publicKeyU8a);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const keyHdkdEd25519 = createSeedDeriveFn(ed25519PairFromSeed, ed25519DeriveHard);

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const SEC_LEN = 64;
  const PUB_LEN = 32;
  const TOT_LEN = SEC_LEN + PUB_LEN;
  function sr25519PairFromU8a(full) {
    const fullU8a = u8aToU8a(full);

    if (fullU8a.length !== TOT_LEN) {
      throw new Error(`Expected keypair with ${TOT_LEN} bytes, found ${fullU8a.length}`);
    }

    return {
      publicKey: fullU8a.slice(SEC_LEN, TOT_LEN),
      secretKey: fullU8a.slice(0, SEC_LEN)
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function sr25519KeypairToU8a({
    publicKey,
    secretKey
  }) {
    return u8aConcat(secretKey, publicKey).slice();
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function createDeriveFn(derive) {
    return (keypair, chainCode) => {
      if (!isU8a(chainCode) || chainCode.length !== 32) {
        throw new Error('Invalid chainCode passed to derive');
      }

      return sr25519PairFromU8a(derive(sr25519KeypairToU8a(keypair), chainCode));
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const sr25519DeriveHard = createDeriveFn(sr25519DeriveKeypairHard);

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const sr25519DeriveSoft = createDeriveFn(sr25519DeriveKeypairSoft);

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function keyHdkdSr25519(keypair, {
    chainCode,
    isSoft
  }) {
    return isSoft ? sr25519DeriveSoft(keypair, chainCode) : sr25519DeriveHard(keypair, chainCode);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const generators = {
    ecdsa: keyHdkdEcdsa,
    ed25519: keyHdkdEd25519,
    // FIXME This is Substrate-compatible, not Ethereum-compatible
    ethereum: keyHdkdEcdsa,
    sr25519: keyHdkdSr25519
  };
  function keyFromPath(pair, path, type) {
    const keyHdkd = generators[type];
    let result = pair;

    for (const junction of path) {
      result = keyHdkd(result, junction);
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name sr25519PairFromSeed
   * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.
   */

  function sr25519PairFromSeed(seed) {
    const seedU8a = u8aToU8a(seed);

    if (seedU8a.length !== 32) {
      throw new Error(`Expected a seed matching 32 bytes, found ${seedU8a.length}`);
    }

    return sr25519PairFromU8a(sr25519KeypairFromSeed(seedU8a));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name sr25519Sign
   * @description Returns message signature of `message`, using the supplied pair
   */

  function sr25519Sign(message, {
    publicKey,
    secretKey
  }) {
    if ((publicKey === null || publicKey === void 0 ? void 0 : publicKey.length) !== 32) {
      throw new Error('Expected a valid publicKey, 32-bytes');
    } else if ((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) !== 64) {
      throw new Error('Expected a valid secretKey, 64-bytes');
    }

    return sr25519Sign$1(publicKey, secretKey, u8aToU8a(message));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name sr25519Verify
   * @description Verifies the signature of `message`, using the supplied pair
   */

  function sr25519Verify(message, signature, publicKey) {
    const publicKeyU8a = u8aToU8a(publicKey);
    const signatureU8a = u8aToU8a(signature);

    if (publicKeyU8a.length !== 32) {
      throw new Error(`Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);
    } else if (signatureU8a.length !== 64) {
      throw new Error(`Invalid signature, received ${signatureU8a.length} bytes, expected 64`);
    }

    return sr25519Verify$1(signatureU8a, u8aToU8a(message), publicKeyU8a);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const EMPTY_U8A$2 = new Uint8Array();
  /**
   * @name sr25519VrfSign
   * @description Sign with sr25519 vrf signing (deterministic)
   */

  function sr25519VrfSign(message, {
    secretKey
  }, context = EMPTY_U8A$2, extra = EMPTY_U8A$2) {
    if ((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) !== 64) {
      throw new Error('Invalid secretKey, expected 64-bytes');
    }

    return vrfSign(secretKey, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const EMPTY_U8A$1 = new Uint8Array();
  /**
   * @name sr25519VrfVerify
   * @description Verify with sr25519 vrf verification
   */

  function sr25519VrfVerify(message, signOutput, publicKey, context = EMPTY_U8A$1, extra = EMPTY_U8A$1) {
    const publicKeyU8a = u8aToU8a(publicKey);
    const proofU8a = u8aToU8a(signOutput);

    if (publicKeyU8a.length !== 32) {
      throw new Error('Invalid publicKey, expected 32-bytes');
    } else if (proofU8a.length !== 96) {
      throw new Error('Invalid vrfSign output, expected 96 bytes');
    }

    return vrfVerify(publicKeyU8a, u8aToU8a(context), u8aToU8a(message), u8aToU8a(extra), proofU8a);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function encodeAddress(key, ss58Format = defaults$1.prefix) {
    // decode it, this means we can re-encode an address
    const u8a = decodeAddress(key);
    assert$1(ss58Format >= 0 && ss58Format <= 16383 && ![46, 47].includes(ss58Format), 'Out of range ss58Format specified');
    assert$1(defaults$1.allowedDecodedLengths.includes(u8a.length), () => `Expected a valid key to convert, with length ${defaults$1.allowedDecodedLengths.join(', ')}`);
    const input = u8aConcat(ss58Format < 64 ? [ss58Format] : [(ss58Format & 0b0000000011111100) >> 2 | 0b01000000, ss58Format >> 8 | (ss58Format & 0b0000000000000011) << 6], u8a);
    return base58Encode(u8aConcat(input, sshash(input).subarray(0, [32, 33].includes(u8a.length) ? 2 : 1)));
  }

  // Various per round constants calculations
  const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
  const _0n = BigInt(0);
  const _1n = BigInt(1);
  const _2n = BigInt(2);
  const _7n$1 = BigInt(7);
  const _256n$1 = BigInt(256);
  const _0x71n = BigInt(0x71);
  for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
      // Pi
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI.push(2 * (5 * y + x));
      // Rotational
      SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
      // Iota
      let t = _0n;
      for (let j = 0; j < 7; j++) {
          R = ((R << _1n) ^ ((R >> _7n$1) * _0x71n)) % _256n$1;
          if (R & _2n)
              t ^= _1n << ((_1n << BigInt(j)) - _1n);
      }
      _SHA3_IOTA.push(t);
  }
  const [SHA3_IOTA_H, SHA3_IOTA_L] = u64$1.split(_SHA3_IOTA, true);
  // Left rotation (without 0, 32, 64)
  const rotlH = (h, l, s) => s > 32 ? u64$1.rotlBH(h, l, s) : u64$1.rotlSH(h, l, s);
  const rotlL = (h, l, s) => s > 32 ? u64$1.rotlBL(h, l, s) : u64$1.rotlSL(h, l, s);
  // Same as keccakf1600, but allows to skip some rounds
  function keccakP(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
      for (let round = 24 - rounds; round < 24; round++) {
          // Theta θ
          for (let x = 0; x < 10; x++)
              B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
          for (let x = 0; x < 10; x += 2) {
              const idx1 = (x + 8) % 10;
              const idx0 = (x + 2) % 10;
              const B0 = B[idx0];
              const B1 = B[idx0 + 1];
              const Th = rotlH(B0, B1, 1) ^ B[idx1];
              const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
              for (let y = 0; y < 50; y += 10) {
                  s[x + y] ^= Th;
                  s[x + y + 1] ^= Tl;
              }
          }
          // Rho (ρ) and Pi (π)
          let curH = s[2];
          let curL = s[3];
          for (let t = 0; t < 24; t++) {
              const shift = SHA3_ROTL[t];
              const Th = rotlH(curH, curL, shift);
              const Tl = rotlL(curH, curL, shift);
              const PI = SHA3_PI[t];
              curH = s[PI];
              curL = s[PI + 1];
              s[PI] = Th;
              s[PI + 1] = Tl;
          }
          // Chi (χ)
          for (let y = 0; y < 50; y += 10) {
              for (let x = 0; x < 10; x++)
                  B[x] = s[y + x];
              for (let x = 0; x < 10; x++)
                  s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
          }
          // Iota (ι)
          s[0] ^= SHA3_IOTA_H[round];
          s[1] ^= SHA3_IOTA_L[round];
      }
      B.fill(0);
  }
  class Keccak extends Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
          super();
          this.blockLen = blockLen;
          this.suffix = suffix;
          this.outputLen = outputLen;
          this.enableXOF = enableXOF;
          this.rounds = rounds;
          this.pos = 0;
          this.posOut = 0;
          this.finished = false;
          this.destroyed = false;
          // Can be passed from user as dkLen
          assert.number(outputLen);
          // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
          if (0 >= this.blockLen || this.blockLen >= 200)
              throw new Error('Sha3 supports only keccak-f1600 function');
          this.state = new Uint8Array(200);
          this.state32 = u32$1(this.state);
      }
      keccak() {
          keccakP(this.state32, this.rounds);
          this.posOut = 0;
          this.pos = 0;
      }
      update(data) {
          assert.exists(this);
          const { blockLen, state } = this;
          data = toBytes(data);
          const len = data.length;
          for (let pos = 0; pos < len;) {
              const take = Math.min(blockLen - this.pos, len - pos);
              for (let i = 0; i < take; i++)
                  state[this.pos++] ^= data[pos++];
              if (this.pos === blockLen)
                  this.keccak();
          }
          return this;
      }
      finish() {
          if (this.finished)
              return;
          this.finished = true;
          const { state, suffix, pos, blockLen } = this;
          // Do the padding
          state[pos] ^= suffix;
          if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
              this.keccak();
          state[blockLen - 1] ^= 0x80;
          this.keccak();
      }
      writeInto(out) {
          assert.exists(this, false);
          assert.bytes(out);
          this.finish();
          const bufferOut = this.state;
          const { blockLen } = this;
          for (let pos = 0, len = out.length; pos < len;) {
              if (this.posOut >= blockLen)
                  this.keccak();
              const take = Math.min(blockLen - this.posOut, len - pos);
              out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
              this.posOut += take;
              pos += take;
          }
          return out;
      }
      xofInto(out) {
          // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
          if (!this.enableXOF)
              throw new Error('XOF is not possible for this instance');
          return this.writeInto(out);
      }
      xof(bytes) {
          assert.number(bytes);
          return this.xofInto(new Uint8Array(bytes));
      }
      digestInto(out) {
          assert.output(out, this);
          if (this.finished)
              throw new Error('digest() was already called');
          this.writeInto(out);
          this.destroy();
          return out;
      }
      digest() {
          return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
          this.destroyed = true;
          this.state.fill(0);
      }
      _cloneInto(to) {
          const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
          to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
          to.state32.set(this.state32);
          to.pos = this.pos;
          to.posOut = this.posOut;
          to.finished = this.finished;
          to.rounds = rounds;
          // Suffix can change in cSHAKE
          to.suffix = suffix;
          to.outputLen = outputLen;
          to.enableXOF = enableXOF;
          to.destroyed = this.destroyed;
          return to;
      }
  }
  const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
  gen(0x06, 144, 224 / 8);
  /**
   * SHA3-256 hash function
   * @param message - that would be hashed
   */
  gen(0x06, 136, 256 / 8);
  gen(0x06, 104, 384 / 8);
  gen(0x06, 72, 512 / 8);
  gen(0x01, 144, 224 / 8);
  /**
   * keccak-256 hash function. Different from SHA3-256.
   * @param message - that would be hashed
   */
  const keccak_256 = gen(0x01, 136, 256 / 8);
  gen(0x01, 104, 384 / 8);
  const keccak_512 = gen(0x01, 72, 512 / 8);
  const genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
  genShake(0x1f, 168, 128 / 8);
  genShake(0x1f, 136, 256 / 8);

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name keccakAsU8a
   * @summary Creates a keccak Uint8Array from the input.
   * @description
   * From either a `string` or a `Buffer` input, create the keccak and return the result as a `Uint8Array`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { keccakAsU8a } from '@polkadot/util-crypto';
   *
   * keccakAsU8a('123'); // => Uint8Array
   * ```
   */

  const keccakAsU8a = createDualHasher({
    256: keccak256,
    512: keccak512
  }, {
    256: keccak_256,
    512: keccak_512
  });

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function hasher(hashType, data, onlyJs) {
    return hashType === 'keccak' ? keccakAsU8a(data, undefined, onlyJs) : blake2AsU8a(data, undefined, undefined, onlyJs);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  logger('setSS58Format');

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const chars = 'abcdefghijklmnopqrstuvwxyz234567';
  ({
    chars,
    coder: utils.chain( // We define our own chain, the default base32 has padding
    utils.radix2(5), utils.alphabet(chars), {
      decode: input => input.split(''),
      encode: input => input.join('')
    }),
    ipfs: 'b',
    type: 'base32'
  });

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const config$2 = {
    chars: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
    coder: base64,
    type: 'base64'
  };
  /**
   * @name base64Validate
   * @summary Validates a base64 value.
   * @description
   * Validates that the supplied value is valid base64
   */

  const base64Validate = createValidate(config$2);
  /**
   * @name base64Decode
   * @summary Decodes a base64 value.
   * @description
   * From the provided input, decode the base64 and return the result as an `Uint8Array`.
   */

  const base64Decode = createDecode(config$2, base64Validate);
  /**
   * @name base64Encode
   * @summary Creates a base64 value.
   * @description
   * From the provided input, create the base64 and return the result as a string.
   */

  const base64Encode = createEncode(config$2);

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function secp256k1Compress(publicKey, onlyJs) {
    if (publicKey.length === 33) {
      return publicKey;
    }

    if (publicKey.length !== 65) {
      throw new Error('Invalid publicKey provided');
    }

    return !hasBigInt || !onlyJs && isReady() ? secp256k1Compress$1(publicKey) : Point.fromHex(publicKey).toRawBytes(true);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function secp256k1Expand(publicKey, onlyJs) {
    if (publicKey.length === 65) {
      return publicKey.subarray(1);
    }

    if (publicKey.length !== 33) {
      throw new Error('Invalid publicKey provided');
    }

    if (!hasBigInt || !onlyJs && isReady()) {
      return secp256k1Expand$1(publicKey).subarray(1);
    }

    const {
      x,
      y
    } = Point.fromHex(publicKey);
    return u8aConcat(bnToU8a(x, BN_BE_256_OPTS), bnToU8a(y, BN_BE_256_OPTS));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name secp256k1Recover
   * @description Recovers a publicKey from the supplied signature
   */

  function secp256k1Recover(msgHash, signature, recovery, hashType = 'blake2', onlyJs) {
    const sig = u8aToU8a(signature).subarray(0, 64);
    const msg = u8aToU8a(msgHash);
    const publicKey = !hasBigInt || !onlyJs && isReady() ? secp256k1Recover$1(msg, sig, recovery) : recoverPublicKey(msg, Signature.fromCompact(sig).toRawBytes(), recovery);

    if (!publicKey) {
      throw new Error('Unable to recover publicKey from signature');
    }

    return hashType === 'keccak' ? secp256k1Expand(publicKey, onlyJs) : secp256k1Compress(publicKey, onlyJs);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name secp256k1Sign
   * @description Returns message signature of `message`, using the supplied pair
   */

  function secp256k1Sign(message, {
    secretKey
  }, hashType = 'blake2', onlyJs) {
    if ((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) !== 32) {
      throw new Error('Expected valid secp256k1 secretKey, 32-bytes');
    }

    const data = hasher(hashType, message, onlyJs);

    if (!hasBigInt || !onlyJs && isReady()) {
      return secp256k1Sign$1(data, secretKey);
    }

    const [sigBytes, recoveryParam] = signSync(data, secretKey, {
      canonical: true,
      recovered: true
    });
    const {
      r,
      s
    } = Signature.fromHex(sigBytes);
    return u8aConcat(bnToU8a(r, BN_BE_256_OPTS), bnToU8a(s, BN_BE_256_OPTS), new Uint8Array([recoveryParam || 0]));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  // https://github.com/indutny/elliptic/blob/e71b2d9359c5fe9437fbf46f1f05096de447de57/lib/elliptic/curves.js#L182

  const N = 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141'.replace(/ /g, '');
  const N_BI = BigInt$1(`0x${N}`);
  const N_BN = new BN(N, 'hex');

  function addBi(seckey, tweak) {
    let res = u8aToBigInt(tweak, BN_BE_OPTS);

    if (res >= N_BI) {
      throw new Error('Tweak parameter is out of range');
    }

    res += u8aToBigInt(seckey, BN_BE_OPTS);

    if (res >= N_BI) {
      res -= N_BI;
    }

    if (res === _0n$2) {
      throw new Error('Invalid resulting private key');
    }

    return nToU8a(res, BN_BE_256_OPTS);
  }

  function addBn(seckey, tweak) {
    const res = new BN(tweak);

    if (res.cmp(N_BN) >= 0) {
      throw new Error('Tweak parameter is out of range');
    }

    res.iadd(new BN(seckey));

    if (res.cmp(N_BN) >= 0) {
      res.isub(N_BN);
    }

    if (res.isZero()) {
      throw new Error('Invalid resulting private key');
    }

    return bnToU8a(res, BN_BE_256_OPTS);
  }

  function secp256k1PrivateKeyTweakAdd(seckey, tweak, onlyBn) {
    if (!isU8a(seckey) || seckey.length !== 32) {
      throw new Error('Expected seckey to be an Uint8Array with length 32');
    } else if (!isU8a(tweak) || tweak.length !== 32) {
      throw new Error('Expected tweak to be an Uint8Array with length 32');
    }

    return !hasBigInt || onlyBn ? addBn(seckey, tweak) : addBi(seckey, tweak);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name secp256k1Verify
   * @description Verifies the signature of `message`, using the supplied pair
   */

  function secp256k1Verify(msgHash, signature, address, hashType = 'blake2', onlyJs) {
    const sig = u8aToU8a(signature);

    if (sig.length !== 65) {
      throw new Error(`Expected signature with 65 bytes, ${sig.length} found instead`);
    }

    const publicKey = secp256k1Recover(hasher(hashType, msgHash), sig, sig[64], hashType, onlyJs);
    const signerAddr = hasher(hashType, publicKey, onlyJs);
    const inputAddr = u8aToU8a(address); // for Ethereum (keccak) the last 20 bytes is the address

    return u8aEq(publicKey, inputAddr) || (hashType === 'keccak' ? u8aEq(signerAddr.slice(-20), inputAddr.slice(-20)) : u8aEq(signerAddr, inputAddr));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors

  function getH160(u8a) {
    if ([33, 65].includes(u8a.length)) {
      u8a = keccakAsU8a(secp256k1Expand(u8a));
    }

    return u8a.slice(-20);
  }

  function ethereumEncode(addressOrPublic) {
    if (!addressOrPublic) {
      return '0x';
    }

    const u8aAddress = u8aToU8a(addressOrPublic);
    assert$1([20, 32, 33, 65].includes(u8aAddress.length), 'Invalid address or publicKey passed');
    const address = u8aToHex(getH160(u8aAddress), -1, false);
    const hash = u8aToHex(keccakAsU8a(address), -1, false);
    let result = '';

    for (let i = 0; i < 40; i++) {
      result = `${result}${parseInt(hash[i], 16) > 7 ? address[i].toUpperCase() : address[i]}`;
    }

    return `0x${result}`;
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors

  function isInvalidChar(char, byte) {
    return char !== (byte > 7 ? char.toUpperCase() : char.toLowerCase());
  }

  function isEthereumChecksum(_address) {
    const address = _address.replace('0x', '');

    const hash = u8aToHex(keccakAsU8a(address.toLowerCase()), -1, false);

    for (let i = 0; i < 40; i++) {
      if (isInvalidChar(address[i], parseInt(hash[i], 16))) {
        return false;
      }
    }

    return true;
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function isEthereumAddress(address) {
    if (!address || address.length !== 42 || !isHex(address)) {
      return false;
    } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {
      return true;
    }

    return isEthereumChecksum(address);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const HARDENED = 0x80000000;
  function hdValidatePath(path) {
    if (!path.startsWith('m/')) {
      return false;
    }

    const parts = path.split('/').slice(1);

    for (const p of parts) {
      const n = /^\d+'?$/.test(p) ? parseInt(p.replace(/'$/, ''), 10) : Number.NaN;

      if (isNaN(n) || n >= HARDENED || n < 0) {
        return false;
      }
    }

    return true;
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const MASTER_SECRET = stringToU8a('Bitcoin seed');

  function createCoded(secretKey, chainCode) {
    return {
      chainCode,
      publicKey: secp256k1PairFromSeed(secretKey).publicKey,
      secretKey
    };
  }

  function deriveChild(hd, index) {
    const indexBuffer = bnToU8a(index, BN_BE_32_OPTS);
    const data = index >= HARDENED ? u8aConcat(new Uint8Array(1), hd.secretKey, indexBuffer) : u8aConcat(hd.publicKey, indexBuffer);

    try {
      const I = hmacShaAsU8a(hd.chainCode, data, 512);
      return createCoded(secp256k1PrivateKeyTweakAdd(hd.secretKey, I.slice(0, 32)), I.slice(32));
    } catch (err) {
      // In case parse256(IL) >= n or ki == 0, proceed with the next value for i
      return deriveChild(hd, index + 1);
    }
  }

  function hdEthereum(seed, path = '') {
    const I = hmacShaAsU8a(MASTER_SECRET, seed, 512);
    let hd = createCoded(I.slice(0, 32), I.slice(32));

    if (!path || path === 'm' || path === 'M' || path === "m'" || path === "M'") {
      return hd;
    }

    assert$1(hdValidatePath(path), 'Invalid derivation path');
    const parts = path.split('/').slice(1);

    for (const p of parts) {
      hd = deriveChild(hd, parseInt(p, 10) + (p.length > 1 && p.endsWith("'") ? HARDENED : 0));
    }

    return hd;
  }

  // Common prologue and epilogue for sync/async functions
  function pbkdf2Init(hash, _password, _salt, _opts) {
      assert.hash(hash);
      const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      assert.number(c);
      assert.number(dkLen);
      assert.number(asyncTick);
      if (c < 1)
          throw new Error('PBKDF2: iterations (c) should be >= 1');
      const password = toBytes(_password);
      const salt = toBytes(_salt);
      // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
      const DK = new Uint8Array(dkLen);
      // U1 = PRF(Password, Salt + INT_32_BE(i))
      const PRF = hmac.create(hash, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
  }
  function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
          prfW.destroy();
      u.fill(0);
      return DK;
  }
  /**
   * PBKDF2-HMAC: RFC 2898 key derivation function
   * @param hash - hash function that would be used e.g. sha256
   * @param password - password from which a derived key is generated
   * @param salt - cryptographic salt
   * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
   */
  function pbkdf2(hash, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
      let prfW; // Working copy
      const arr = new Uint8Array(4);
      const view = createView(arr);
      const u = new Uint8Array(PRF.outputLen);
      // DK = T1 + T2 + ⋯ + Tdklen/hlen
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
          // Ti = F(Password, Salt, c, i)
          const Ti = DK.subarray(pos, pos + PRF.outputLen);
          view.setInt32(0, ti, false);
          // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
          // U1 = PRF(Password, Salt + INT_32_BE(i))
          (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
          Ti.set(u.subarray(0, Ti.length));
          for (let ui = 1; ui < c; ui++) {
              // Uc = PRF(Password, Uc−1)
              PRF._cloneInto(prfW).update(u).digestInto(u);
              for (let i = 0; i < Ti.length; i++)
                  Ti[i] ^= u[i];
          }
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function pbkdf2Encode(passphrase, salt = randomAsU8a(), rounds = 2048, onlyJs) {
    const u8aPass = u8aToU8a(passphrase);
    const u8aSalt = u8aToU8a(salt);
    return {
      password: !hasBigInt || !onlyJs && isReady() ? pbkdf2$1(u8aPass, u8aSalt, rounds) : pbkdf2(sha512, u8aPass, u8aSalt, {
        c: rounds,
        dkLen: 64
      }),
      rounds,
      salt
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name shaAsU8a
   * @summary Creates a sha Uint8Array from the input.
   */

  const shaAsU8a = createDualHasher({
    256: sha256$1,
    512: sha512$1
  }, {
    256: sha256,
    512: sha512
  });
  /**
   * @name sha256AsU8a
   * @summary Creates a sha256 Uint8Array from the input.
   */

  const sha256AsU8a = createBitHasher(256, shaAsU8a);

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Adapted from the bitcoinjs/bip39 source
  // https://github.com/bitcoinjs/bip39/blob/1d063b6a6aee4145b34d701037cd3e67f5446ff9/ts_src/
  var DEFAULT_WORDLIST = 'abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo'.split('|');

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  const INVALID_MNEMONIC = 'Invalid mnemonic';
  const INVALID_ENTROPY = 'Invalid entropy';
  const INVALID_CHECKSUM = 'Invalid mnemonic checksum';

  function normalize(str) {
    return (str || '').normalize('NFKD');
  }

  function binaryToByte(bin) {
    return parseInt(bin, 2);
  }

  function bytesToBinary(bytes) {
    return bytes.map(x => x.toString(2).padStart(8, '0')).join('');
  }

  function deriveChecksumBits(entropyBuffer) {
    return bytesToBinary(Array.from(sha256AsU8a(entropyBuffer))).slice(0, entropyBuffer.length * 8 / 32);
  }

  function mnemonicToSeedSync(mnemonic, password) {
    return pbkdf2Encode(stringToU8a(normalize(mnemonic)), stringToU8a(`mnemonic${normalize(password)}`)).password;
  }
  function mnemonicToEntropy$1(mnemonic) {
    var _entropyBits$match;

    const words = normalize(mnemonic).split(' ');
    assert$1(words.length % 3 === 0, INVALID_MNEMONIC); // convert word indices to 11 bit binary strings

    const bits = words.map(word => {
      const index = DEFAULT_WORDLIST.indexOf(word);
      assert$1(index !== -1, INVALID_MNEMONIC);
      return index.toString(2).padStart(11, '0');
    }).join(''); // split the binary string into ENT/CS

    const dividerIndex = Math.floor(bits.length / 33) * 32;
    const entropyBits = bits.slice(0, dividerIndex);
    const checksumBits = bits.slice(dividerIndex); // calculate the checksum and compare

    const entropyBytes = (_entropyBits$match = entropyBits.match(/(.{1,8})/g)) === null || _entropyBits$match === void 0 ? void 0 : _entropyBits$match.map(binaryToByte);
    assert$1(entropyBytes && entropyBytes.length % 4 === 0 && entropyBytes.length >= 16 && entropyBytes.length <= 32, INVALID_ENTROPY);
    const entropy = u8aToU8a(entropyBytes);
    const newChecksum = deriveChecksumBits(entropy);
    assert$1(newChecksum === checksumBits, INVALID_CHECKSUM);
    return entropy;
  }
  function entropyToMnemonic(entropy) {
    // 128 <= ENT <= 256
    assert$1(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, INVALID_ENTROPY);
    const entropyBits = bytesToBinary(Array.from(entropy));
    const checksumBits = deriveChecksumBits(entropy); // we just set it prior, so this is a safe check
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

    return (entropyBits + checksumBits).match(/(.{1,11})/g).map(binary => DEFAULT_WORDLIST[binaryToByte(binary)]).join(' ');
  }
  function generateMnemonic(numWords) {
    return entropyToMnemonic(randomAsU8a(numWords / 3 * 4));
  }
  function validateMnemonic(mnemonic) {
    try {
      mnemonicToEntropy$1(mnemonic);
    } catch (e) {
      return false;
    }

    return true;
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name mnemonicGenerate
   * @summary Creates a valid mnemonic string using using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).
   * @example
   * <BR>
   *
   * ```javascript
   * import { mnemonicGenerate } from '@polkadot/util-crypto';
   *
   * const mnemonic = mnemonicGenerate(); // => string
   * ```
   */

  function mnemonicGenerate(numWords = 12, onlyJs) {
    return !hasBigInt || !onlyJs && isReady() ? bip39Generate(numWords) : generateMnemonic(numWords);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function mnemonicToEntropy(mnemonic, onlyJs) {
    return !hasBigInt || !onlyJs && isReady() ? bip39ToEntropy(mnemonic) : mnemonicToEntropy$1(mnemonic);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name mnemonicValidate
   * @summary Validates a mnemonic input using [BIP39](https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki).
   * @example
   * <BR>
   *
   * ```javascript
   * import { mnemonicGenerate, mnemonicValidate } from '@polkadot/util-crypto';
   *
   * const mnemonic = mnemonicGenerate(); // => string
   * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean
   * ```
   */

  function mnemonicValidate(mnemonic, onlyJs) {
    return !hasBigInt || !onlyJs && isReady() ? bip39Validate(mnemonic) : validateMnemonic(mnemonic);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name mnemonicToLegacySeed
   * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input
   * @example
   * <BR>
   *
   * ```javascript
   * import { mnemonicGenerate, mnemonicToLegacySeed, mnemonicValidate } from '@polkadot/util-crypto';
   *
   * const mnemonic = mnemonicGenerate(); // => string
   * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean
   *
   * if (isValidMnemonic) {
   *   console.log(`Seed generated from mnemonic: ${mnemonicToLegacySeed(mnemonic)}`); => u8a
   * }
   * ```
   */

  function mnemonicToLegacySeed(mnemonic, password = '', onlyJs, byteLength = 32) {
    if (!mnemonicValidate(mnemonic)) {
      throw new Error('Invalid bip39 mnemonic specified');
    } else if (![32, 64].includes(byteLength)) {
      throw new Error(`Invalid seed length ${byteLength}, expected 32 or 64`);
    }

    return byteLength === 32 ? !hasBigInt || !onlyJs && isReady() ? bip39ToSeed(mnemonic, password) : mnemonicToSeedSync(mnemonic, password).subarray(0, 32) : mnemonicToSeedSync(mnemonic, password);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function mnemonicToMiniSecret(mnemonic, password = '', onlyJs) {
    if (!mnemonicValidate(mnemonic)) {
      throw new Error('Invalid bip39 mnemonic specified');
    }

    if (!onlyJs && isReady()) {
      return bip39ToMiniSecret(mnemonic, password);
    }

    const entropy = mnemonicToEntropy(mnemonic);
    const salt = stringToU8a(`mnemonic${password}`); // return the first 32 bytes as the seed

    return pbkdf2Encode(entropy, salt).password.slice(0, 32);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name naclDecrypt
   * @summary Decrypts a message using the supplied secretKey and nonce
   * @description
   * Returns an decrypted message, using the `secret` and `nonce`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { naclDecrypt } from '@polkadot/util-crypto';
   *
   * naclDecrypt([...], [...], [...]); // => [...]
   * ```
   */

  function naclDecrypt(encrypted, nonce, secret) {
    return nacl.secretbox.open(encrypted, nonce, secret) || null;
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors

  /**
   * @name naclEncrypt
   * @summary Encrypts a message using the supplied secretKey and nonce
   * @description
   * Returns an encrypted message, using the `secretKey` and `nonce`. If the `nonce` was not supplied, a random value is generated.
   * @example
   * <BR>
   *
   * ```javascript
   * import { naclEncrypt } from '@polkadot/util-crypto';
   *
   * naclEncrypt([...], [...]); // => [...]
   * ```
   */
  function naclEncrypt(message, secret, nonce = randomAsU8a(24)) {
    return {
      encrypted: nacl.secretbox(message, nonce, secret),
      nonce
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name naclOpen
   * @summary Opens a message using the receiver's secretKey and nonce
   * @description
   * Returns a message sealed by the sender, using the receiver's `secret` and `nonce`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { naclOpen } from '@polkadot/util-crypto';
   *
   * naclOpen([...], [...], [...]); // => [...]
   * ```
   */

  function naclOpen(sealed, nonce, senderBoxPublic, receiverBoxSecret) {
    return nacl.box.open(sealed, nonce, senderBoxPublic, receiverBoxSecret) || null;
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors

  /**
   * @name naclSeal
   * @summary Seals a message using the sender's encrypting secretKey, receiver's public key, and nonce
   * @description
   * Returns an encrypted message which can be open only by receiver's secretKey. If the `nonce` was not supplied, a random value is generated.
   * @example
   * <BR>
   *
   * ```javascript
   * import { naclSeal } from '@polkadot/util-crypto';
   *
   * naclSeal([...], [...], [...], [...]); // => [...]
   * ```
   */
  function naclSeal(message, senderBoxSecret, receiverBoxPublic, nonce = randomAsU8a(24)) {
    return {
      nonce,
      sealed: nacl.box(message, nonce, receiverBoxPublic, senderBoxSecret)
    };
  }

  // RFC 7914 Scrypt KDF
  // Left rotate for uint32
  const rotl$2 = (a, b) => (a << b) | (a >>> (32 - b));
  // The main Scrypt loop: uses Salsa extensively.
  // Six versions of the function were tried, this is the fastest one.
  // prettier-ignore
  function XorAndSalsa(prev, pi, input, ii, out, oi) {
      // Based on https://cr.yp.to/salsa20.html
      // Xor blocks
      let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
      let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
      let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
      let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
      let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
      let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
      let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
      let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
      // Save state to temporary variables (salsa)
      let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
      // Main loop (salsa)
      for (let i = 0; i < 8; i += 2) {
          x04 ^= rotl$2(x00 + x12 | 0, 7);
          x08 ^= rotl$2(x04 + x00 | 0, 9);
          x12 ^= rotl$2(x08 + x04 | 0, 13);
          x00 ^= rotl$2(x12 + x08 | 0, 18);
          x09 ^= rotl$2(x05 + x01 | 0, 7);
          x13 ^= rotl$2(x09 + x05 | 0, 9);
          x01 ^= rotl$2(x13 + x09 | 0, 13);
          x05 ^= rotl$2(x01 + x13 | 0, 18);
          x14 ^= rotl$2(x10 + x06 | 0, 7);
          x02 ^= rotl$2(x14 + x10 | 0, 9);
          x06 ^= rotl$2(x02 + x14 | 0, 13);
          x10 ^= rotl$2(x06 + x02 | 0, 18);
          x03 ^= rotl$2(x15 + x11 | 0, 7);
          x07 ^= rotl$2(x03 + x15 | 0, 9);
          x11 ^= rotl$2(x07 + x03 | 0, 13);
          x15 ^= rotl$2(x11 + x07 | 0, 18);
          x01 ^= rotl$2(x00 + x03 | 0, 7);
          x02 ^= rotl$2(x01 + x00 | 0, 9);
          x03 ^= rotl$2(x02 + x01 | 0, 13);
          x00 ^= rotl$2(x03 + x02 | 0, 18);
          x06 ^= rotl$2(x05 + x04 | 0, 7);
          x07 ^= rotl$2(x06 + x05 | 0, 9);
          x04 ^= rotl$2(x07 + x06 | 0, 13);
          x05 ^= rotl$2(x04 + x07 | 0, 18);
          x11 ^= rotl$2(x10 + x09 | 0, 7);
          x08 ^= rotl$2(x11 + x10 | 0, 9);
          x09 ^= rotl$2(x08 + x11 | 0, 13);
          x10 ^= rotl$2(x09 + x08 | 0, 18);
          x12 ^= rotl$2(x15 + x14 | 0, 7);
          x13 ^= rotl$2(x12 + x15 | 0, 9);
          x14 ^= rotl$2(x13 + x12 | 0, 13);
          x15 ^= rotl$2(x14 + x13 | 0, 18);
      }
      // Write output (salsa)
      out[oi++] = (y00 + x00) | 0;
      out[oi++] = (y01 + x01) | 0;
      out[oi++] = (y02 + x02) | 0;
      out[oi++] = (y03 + x03) | 0;
      out[oi++] = (y04 + x04) | 0;
      out[oi++] = (y05 + x05) | 0;
      out[oi++] = (y06 + x06) | 0;
      out[oi++] = (y07 + x07) | 0;
      out[oi++] = (y08 + x08) | 0;
      out[oi++] = (y09 + x09) | 0;
      out[oi++] = (y10 + x10) | 0;
      out[oi++] = (y11 + x11) | 0;
      out[oi++] = (y12 + x12) | 0;
      out[oi++] = (y13 + x13) | 0;
      out[oi++] = (y14 + x14) | 0;
      out[oi++] = (y15 + x15) | 0;
  }
  function BlockMix(input, ii, out, oi, r) {
      // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
      let head = oi + 0;
      let tail = oi + 16 * r;
      for (let i = 0; i < 16; i++)
          out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]
      for (let i = 0; i < r; i++, head += 16, ii += 16) {
          // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
          XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])
          if (i > 0)
              tail += 16; // First iteration overwrites tmp value in tail
          XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])
      }
  }
  // Common prologue and epilogue for sync/async functions
  function scryptInit(password, salt, _opts) {
      // Maxmem - 1GB+1KB by default
      const opts = checkOpts({
          dkLen: 32,
          asyncTick: 10,
          maxmem: 1024 ** 3 + 1024,
      }, _opts);
      const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
      assert.number(N);
      assert.number(r);
      assert.number(p);
      assert.number(dkLen);
      assert.number(asyncTick);
      assert.number(maxmem);
      if (onProgress !== undefined && typeof onProgress !== 'function')
          throw new Error('progressCb should be function');
      const blockSize = 128 * r;
      const blockSize32 = blockSize / 4;
      if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {
          // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function
          // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
          throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');
      }
      if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {
          throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');
      }
      if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
          throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');
      }
      const memUsed = blockSize * (N + p);
      if (memUsed > maxmem) {
          throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
      }
      // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
      // Since it has only one iteration there is no reason to use async variant
      const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
      const B32 = u32$1(B);
      // Re-used between parallel iterations. Array(iterations) of B
      const V = u32$1(new Uint8Array(blockSize * N));
      const tmp = u32$1(new Uint8Array(blockSize));
      let blockMixCb = () => { };
      if (onProgress) {
          const totalBlockMix = 2 * N * p;
          // Invoke callback if progress changes from 10.01 to 10.02
          // Allows to draw smooth progress bar on up to 8K screen
          const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);
          let blockMixCnt = 0;
          blockMixCb = () => {
              blockMixCnt++;
              if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
                  onProgress(blockMixCnt / totalBlockMix);
          };
      }
      return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
  }
  function scryptOutput(password, dkLen, B, V, tmp) {
      const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
      B.fill(0);
      V.fill(0);
      tmp.fill(0);
      return res;
  }
  /**
   * Scrypt KDF from RFC 7914.
   * @param password - pass
   * @param salt - salt
   * @param opts - parameters
   * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
   * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
   * - `p` is parallelization factor (1 is common)
   * - `dkLen` is output key length in bytes e.g. 32.
   * - `asyncTick` - (default: 10) max time in ms for which async function can block execution
   * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
   * - `onProgress` - callback function that would be executed for progress report
   * @returns Derived key
   */
  function scrypt(password, salt, opts) {
      const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
      for (let pi = 0; pi < p; pi++) {
          const Pi = blockSize32 * pi;
          for (let i = 0; i < blockSize32; i++)
              V[i] = B32[Pi + i]; // V[0] = B[i]
          for (let i = 0, pos = 0; i < N - 1; i++) {
              BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);
              blockMixCb();
          }
          BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
          blockMixCb();
          for (let i = 0; i < N; i++) {
              // First u32 of the last 64-byte block (u32 is LE)
              const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
              for (let k = 0; k < blockSize32; k++)
                  tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
              BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
              blockMixCb();
          }
      }
      return scryptOutput(password, dkLen, B, V, tmp);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const DEFAULT_PARAMS = {
    N: 1 << 15,
    p: 1,
    r: 8
  };

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function scryptEncode(passphrase, salt = randomAsU8a(), params = DEFAULT_PARAMS, onlyJs) {
    const u8a = u8aToU8a(passphrase);
    return {
      params,
      password: !hasBigInt || !onlyJs && isReady() ? scrypt$1(u8a, salt, Math.log2(params.N), params.r, params.p) : scrypt(u8a, salt, objectSpread({
        dkLen: 64
      }, params)),
      salt
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function scryptFromU8a(data) {
    const salt = data.subarray(0, 32);
    const N = u8aToBn(data.subarray(32 + 0, 32 + 4), BN_LE_OPTS).toNumber();
    const p = u8aToBn(data.subarray(32 + 4, 32 + 8), BN_LE_OPTS).toNumber();
    const r = u8aToBn(data.subarray(32 + 8, 32 + 12), BN_LE_OPTS).toNumber(); // FIXME At this moment we assume these to be fixed params, this is not a great idea since we lose flexibility
    // and updates for greater security. However we need some protection against carefully-crafted params that can
    // eat up CPU since these are user inputs. So we need to get very clever here, but atm we only allow the defaults
    // and if no match, bail out

    if (N !== DEFAULT_PARAMS.N || p !== DEFAULT_PARAMS.p || r !== DEFAULT_PARAMS.r) {
      throw new Error('Invalid injected scrypt params found');
    }

    return {
      params: {
        N,
        p,
        r
      },
      salt
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function scryptToU8a(salt, {
    N,
    p,
    r
  }) {
    return u8aConcat(salt, bnToU8a(N, BN_LE_32_OPTS), bnToU8a(p, BN_LE_32_OPTS), bnToU8a(r, BN_LE_32_OPTS));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const ENCODING = ['scrypt', 'xsalsa20-poly1305'];
  const ENCODING_NONE = ['none'];
  const ENCODING_VERSION = '3';
  const NONCE_LENGTH = 24;
  const SCRYPT_LENGTH = 32 + 3 * 4;

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function jsonDecryptData(encrypted, passphrase, encType = ENCODING) {
    assert$1(encrypted, 'No encrypted data available to decode');
    assert$1(passphrase || !encType.includes('xsalsa20-poly1305'), 'Password required to decode encrypted data');
    let encoded = encrypted;

    if (passphrase) {
      let password;

      if (encType.includes('scrypt')) {
        const {
          params,
          salt
        } = scryptFromU8a(encrypted);
        password = scryptEncode(passphrase, salt, params).password;
        encrypted = encrypted.subarray(SCRYPT_LENGTH);
      } else {
        password = stringToU8a(passphrase);
      }

      encoded = naclDecrypt(encrypted.subarray(NONCE_LENGTH), encrypted.subarray(0, NONCE_LENGTH), u8aFixLength(password, 256, true));
    }

    assert$1(encoded, 'Unable to decode using the supplied passphrase');
    return encoded;
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  function jsonEncryptFormat(encoded, contentType, isEncrypted) {
    return {
      encoded: base64Encode(encoded),
      encoding: {
        content: contentType,
        type: isEncrypted ? ENCODING : ENCODING_NONE,
        version: ENCODING_VERSION
      }
    };
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors

  const secp256k1VerifyHasher = hashType => (message, signature, publicKey) => secp256k1Verify(message, signature, publicKey, hashType);

  const VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];
  const VERIFIERS = [['ed25519', ed25519Verify], ['sr25519', sr25519Verify], ...VERIFIERS_ECDSA];
  const CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];

  function verifyDetect(result, {
    message,
    publicKey,
    signature
  }, verifiers = VERIFIERS) {
    result.isValid = verifiers.some(([crypto, verify]) => {
      try {
        if (verify(message, signature, publicKey)) {
          result.crypto = crypto;
          return true;
        }
      } catch (error) {// do nothing, result.isValid still set to false
      }

      return false;
    });
    return result;
  }

  function verifyMultisig(result, {
    message,
    publicKey,
    signature
  }) {
    if (![0, 1, 2].includes(signature[0])) {
      throw new Error(`Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);
    }

    const type = CRYPTO_TYPES[signature[0]] || 'none';
    result.crypto = type;

    try {
      result.isValid = {
        ecdsa: () => verifyDetect(result, {
          message,
          publicKey,
          signature: signature.subarray(1)
        }, VERIFIERS_ECDSA).isValid,
        ed25519: () => ed25519Verify(message, signature.subarray(1), publicKey),
        none: () => {
          throw Error('no verify for `none` crypto type');
        },
        sr25519: () => sr25519Verify(message, signature.subarray(1), publicKey)
      }[type]();
    } catch (error) {// ignore, result.isValid still set to false
    }

    return result;
  }

  function getVerifyFn(signature) {
    return [0, 1, 2].includes(signature[0]) && [65, 66].includes(signature.length) ? verifyMultisig : verifyDetect;
  }

  function signatureVerify(message, signature, addressOrPublicKey) {
    const signatureU8a = u8aToU8a(signature);

    if (![64, 65, 66].includes(signatureU8a.length)) {
      throw new Error(`Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);
    }

    const publicKey = decodeAddress(addressOrPublicKey);
    const input = {
      message: u8aToU8a(message),
      publicKey,
      signature: signatureU8a
    };
    const result = {
      crypto: 'none',
      isValid: false,
      isWrapped: u8aIsWrapped(input.message, true),
      publicKey
    };
    const isWrappedBytes = u8aIsWrapped(input.message, false);
    const verifyFn = getVerifyFn(signatureU8a);
    verifyFn(result, input);

    if (result.crypto !== 'none' || result.isWrapped && !isWrappedBytes) {
      return result;
    }

    input.message = isWrappedBytes ? u8aUnwrapBytes(input.message) : u8aWrapBytes(input.message);
    return verifyFn(result, input);
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  //
  // xxHash64 implementation in pure Javascript
  // Copyright (C) 2016, Pierre Curto
  // MIT license
  //
  // Changes made:
  //   - converted to TypeScript
  //   - uses native JS BigInt (no external dependencies)
  //   - support only for Uint8Array inputs
  //   - no constructor function, straight fill & digest
  //   - update code removed, only called once, no streams

  const P64_1 = BigInt$1('11400714785074694791');
  const P64_2 = BigInt$1('14029467366897019727');
  const P64_3 = BigInt$1('1609587929392839161');
  const P64_4 = BigInt$1('9650029242287828579');
  const P64_5 = BigInt$1('2870177450012600261'); // mask for a u64, all bits set

  const U64 = BigInt$1('0xffffffffffffffff'); // various constants

  const _7n = BigInt$1(7);

  const _11n = BigInt$1(11);

  const _12n = BigInt$1(12);

  const _16n = BigInt$1(16);

  const _18n = BigInt$1(18);

  const _23n = BigInt$1(23);

  const _27n = BigInt$1(27);

  const _29n = BigInt$1(29);

  const _31n = BigInt$1(31);

  const _32n = BigInt$1(32);

  const _33n = BigInt$1(33);

  const _64n = BigInt$1(64);

  const _256n = BigInt$1(256);

  function rotl$1(a, b) {
    const c = a & U64;
    return (c << b | c >> _64n - b) & U64;
  }

  function fromU8a(u8a, p, count) {
    const bigints = new Array(count);
    let offset = 0;

    for (let i = 0; i < count; i++, offset += 2) {
      bigints[i] = BigInt$1(u8a[p + offset] | u8a[p + 1 + offset] << 8);
    }

    let result = _0n$2;

    for (let i = count - 1; i >= 0; i--) {
      result = (result << _16n) + bigints[i];
    }

    return result;
  }

  function toU8a(h64) {
    const result = new Uint8Array(8);

    for (let i = 7; i >= 0; i--) {
      result[i] = Number(h64 % _256n);
      h64 = h64 / _256n;
    }

    return result;
  }

  function state$1(initSeed) {
    const seed = BigInt$1(initSeed);
    return {
      seed,
      u8a: new Uint8Array(32),
      u8asize: 0,
      v1: seed + P64_1 + P64_2,
      v2: seed + P64_2,
      v3: seed,
      v4: seed - P64_1
    };
  }

  function init(state, input) {
    if (input.length < 32) {
      state.u8a.set(input);
      state.u8asize = input.length;
      return state;
    }

    const limit = input.length - 32;
    let p = 0;

    if (limit >= 0) {
      const adjustV = v => P64_1 * rotl$1(v + P64_2 * fromU8a(input, p, 4), _31n);

      do {
        state.v1 = adjustV(state.v1);
        p += 8;
        state.v2 = adjustV(state.v2);
        p += 8;
        state.v3 = adjustV(state.v3);
        p += 8;
        state.v4 = adjustV(state.v4);
        p += 8;
      } while (p <= limit);
    }

    if (p < input.length) {
      state.u8a.set(input.subarray(p, input.length));
      state.u8asize = input.length - p;
    }

    return state;
  }

  function xxhash64(input, initSeed) {
    const {
      seed,
      u8a,
      u8asize,
      v1,
      v2,
      v3,
      v4
    } = init(state$1(initSeed), input);
    let p = 0;
    let h64 = U64 & BigInt$1(input.length) + (input.length >= 32 ? ((((rotl$1(v1, _1n$2) + rotl$1(v2, _7n) + rotl$1(v3, _12n) + rotl$1(v4, _18n) ^ P64_1 * rotl$1(v1 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl$1(v2 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl$1(v3 * P64_2, _31n)) * P64_1 + P64_4 ^ P64_1 * rotl$1(v4 * P64_2, _31n)) * P64_1 + P64_4 : seed + P64_5);

    while (p <= u8asize - 8) {
      h64 = U64 & P64_4 + P64_1 * rotl$1(h64 ^ P64_1 * rotl$1(P64_2 * fromU8a(u8a, p, 4), _31n), _27n);
      p += 8;
    }

    if (p + 4 <= u8asize) {
      h64 = U64 & P64_3 + P64_2 * rotl$1(h64 ^ P64_1 * fromU8a(u8a, p, 2), _23n);
      p += 4;
    }

    while (p < u8asize) {
      h64 = U64 & P64_1 * rotl$1(h64 ^ P64_5 * BigInt$1(u8a[p++]), _11n);
    }

    h64 = U64 & P64_2 * (h64 ^ h64 >> _33n);
    h64 = U64 & P64_3 * (h64 ^ h64 >> _29n);
    return toU8a(U64 & (h64 ^ h64 >> _32n));
  }

  // Copyright 2017-2022 @polkadot/util-crypto authors & contributors
  /**
   * @name xxhashAsU8a
   * @summary Creates a xxhash64 u8a from the input.
   * @description
   * From either a `string`, `Uint8Array` or a `Buffer` input, create the xxhash64 and return the result as a `Uint8Array` with the specified `bitLength`.
   * @example
   * <BR>
   *
   * ```javascript
   * import { xxhashAsU8a } from '@polkadot/util-crypto';
   *
   * xxhashAsU8a('abc'); // => 0x44bc2cf5ad770999
   * ```
   */

  function xxhashAsU8a(data, bitLength = 64, onlyJs) {
    const rounds = Math.ceil(bitLength / 64);
    const u8a = u8aToU8a(data);

    if (!hasBigInt || !onlyJs && isReady()) {
      return twox(u8a, rounds);
    }

    const result = new Uint8Array(rounds * 8);

    for (let seed = 0; seed < rounds; seed++) {
      result.set(xxhash64(u8a, seed).reverse(), seed * 8);
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // default substrate dev phrase
  const DEV_PHRASE = 'bottom drive obey lake curtain smoke basket hold race lonely fit walk'; // seed from the above phrase

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const PKCS8_DIVIDER = new Uint8Array([161, 35, 3, 33, 0]);
  const PKCS8_HEADER = new Uint8Array([48, 83, 2, 1, 1, 48, 5, 6, 3, 43, 101, 112, 4, 34, 4, 32]);
  const PUB_LENGTH = 32;
  const SEC_LENGTH = 64;
  const SEED_LENGTH = 32;

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  const SEED_OFFSET = PKCS8_HEADER.length;
  function decodePair(passphrase, encrypted, _encType) {
    const encType = Array.isArray(_encType) || _encType === undefined ? _encType : [_encType];
    const decrypted = jsonDecryptData(encrypted, passphrase, encType);
    const header = decrypted.subarray(0, PKCS8_HEADER.length);
    assert$1(u8aEq(header, PKCS8_HEADER), 'Invalid Pkcs8 header found in body');
    let secretKey = decrypted.subarray(SEED_OFFSET, SEED_OFFSET + SEC_LENGTH);
    let divOffset = SEED_OFFSET + SEC_LENGTH;
    let divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length); // old-style, we have the seed here

    if (!u8aEq(divider, PKCS8_DIVIDER)) {
      divOffset = SEED_OFFSET + SEED_LENGTH;
      secretKey = decrypted.subarray(SEED_OFFSET, divOffset);
      divider = decrypted.subarray(divOffset, divOffset + PKCS8_DIVIDER.length);
      assert$1(u8aEq(divider, PKCS8_DIVIDER), 'Invalid Pkcs8 divider found in body');
    }

    const pubOffset = divOffset + PKCS8_DIVIDER.length;
    const publicKey = decrypted.subarray(pubOffset, pubOffset + PUB_LENGTH);
    return {
      publicKey,
      secretKey
    };
  }

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  function encodePair({
    publicKey,
    secretKey
  }, passphrase) {
    assert$1(secretKey, 'Expected a valid secretKey to be passed to encode');
    const encoded = u8aConcat(PKCS8_HEADER, secretKey, PKCS8_DIVIDER, publicKey);

    if (!passphrase) {
      return encoded;
    }

    const {
      params,
      password,
      salt
    } = scryptEncode(passphrase);
    const {
      encrypted,
      nonce
    } = naclEncrypt(encoded, password.subarray(0, 32));
    return u8aConcat(scryptToU8a(salt, params), nonce, encrypted);
  }

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  function pairToJson(type, {
    address,
    meta
  }, encoded, isEncrypted) {
    return objectSpread(jsonEncryptFormat(encoded, ['pkcs8', type], isEncrypted), {
      address,
      meta
    });
  }

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  const SIG_TYPE_NONE = new Uint8Array();
  const TYPE_FROM_SEED = {
    ecdsa: secp256k1PairFromSeed,
    ed25519: ed25519PairFromSeed,
    ethereum: secp256k1PairFromSeed,
    sr25519: sr25519PairFromSeed
  };
  const TYPE_PREFIX = {
    ecdsa: new Uint8Array([2]),
    ed25519: new Uint8Array([0]),
    ethereum: new Uint8Array([2]),
    sr25519: new Uint8Array([1])
  };
  const TYPE_SIGNATURE = {
    ecdsa: (m, p) => secp256k1Sign(m, p, 'blake2'),
    ed25519: ed25519Sign,
    ethereum: (m, p) => secp256k1Sign(m, p, 'keccak'),
    sr25519: sr25519Sign
  };
  const TYPE_ADDRESS = {
    ecdsa: p => p.length > 32 ? blake2AsU8a(p) : p,
    ed25519: p => p,
    ethereum: p => p.length === 20 ? p : keccakAsU8a(secp256k1Expand(p)),
    sr25519: p => p
  };

  function isLocked(secretKey) {
    return !secretKey || u8aEmpty(secretKey);
  }

  function vrfHash(proof, context, extra) {
    return blake2AsU8a(u8aConcat(context || '', extra || '', proof));
  }
  /**
   * @name createPair
   * @summary Creates a keyring pair object
   * @description Creates a keyring pair object with provided account public key, metadata, and encoded arguments.
   * The keyring pair stores the account state including the encoded address and associated metadata.
   *
   * It has properties whose values are functions that may be called to perform account actions:
   *
   * - `address` function retrieves the address associated with the account.
   * - `decodedPkcs8` function is called with the account passphrase and account encoded public key.
   * It decodes the encoded public key using the passphrase provided to obtain the decoded account public key
   * and associated secret key that are then available in memory, and changes the account address stored in the
   * state of the pair to correspond to the address of the decoded public key.
   * - `encodePkcs8` function when provided with the correct passphrase associated with the account pair
   * and when the secret key is in memory (when the account pair is not locked) it returns an encoded
   * public key of the account.
   * - `meta` is the metadata that is stored in the state of the pair, either when it was originally
   * created or set via `setMeta`.
   * - `publicKey` returns the public key stored in memory for the pair.
   * - `sign` may be used to return a signature by signing a provided message with the secret
   * key (if it is in memory) using Nacl.
   * - `toJson` calls another `toJson` function and provides the state of the pair,
   * it generates arguments to be passed to the other `toJson` function including an encoded public key of the account
   * that it generates using the secret key from memory (if it has been made available in memory)
   * and the optionally provided passphrase argument. It passes a third boolean argument to `toJson`
   * indicating whether the public key has been encoded or not (if a passphrase argument was provided then it is encoded).
   * The `toJson` function that it calls returns a JSON object with properties including the `address`
   * and `meta` that are assigned with the values stored in the corresponding state variables of the account pair,
   * an `encoded` property that is assigned with the encoded public key in hex format, and an `encoding`
   * property that indicates whether the public key value of the `encoded` property is encoded or not.
   */


  function createPair({
    toSS58,
    type
  }, {
    publicKey,
    secretKey
  }, meta = {}, encoded = null, encTypes) {
    const decodePkcs8 = (passphrase, userEncoded) => {
      const decoded = decodePair(passphrase, userEncoded || encoded, encTypes);

      if (decoded.secretKey.length === 64) {
        publicKey = decoded.publicKey;
        secretKey = decoded.secretKey;
      } else {
        const pair = TYPE_FROM_SEED[type](decoded.secretKey);
        publicKey = pair.publicKey;
        secretKey = pair.secretKey;
      }
    };

    const recode = passphrase => {
      isLocked(secretKey) && encoded && decodePkcs8(passphrase, encoded);
      encoded = encodePair({
        publicKey,
        secretKey
      }, passphrase); // re-encode, latest version

      encTypes = undefined; // swap to defaults, latest version follows

      return encoded;
    };

    const encodeAddress = () => {
      const raw = TYPE_ADDRESS[type](publicKey);
      return type === 'ethereum' ? ethereumEncode(raw) : toSS58(raw);
    };

    return {
      get address() {
        return encodeAddress();
      },

      get addressRaw() {
        const raw = TYPE_ADDRESS[type](publicKey);
        return type === 'ethereum' ? raw.slice(-20) : raw;
      },

      get isLocked() {
        return isLocked(secretKey);
      },

      get meta() {
        return meta;
      },

      get publicKey() {
        return publicKey;
      },

      get type() {
        return type;
      },

      // eslint-disable-next-line sort-keys
      decodePkcs8,
      decryptMessage: (encryptedMessageWithNonce, senderPublicKey) => {
        assert$1(!isLocked(secretKey), 'Cannot encrypt with a locked key pair');
        assert$1(!['ecdsa', 'ethereum'].includes(type), 'Secp256k1 not supported yet');
        const messageU8a = u8aToU8a(encryptedMessageWithNonce);
        return naclOpen(messageU8a.slice(24, messageU8a.length), messageU8a.slice(0, 24), convertPublicKeyToCurve25519(u8aToU8a(senderPublicKey)), convertSecretKeyToCurve25519(secretKey));
      },
      derive: (suri, meta) => {
        assert$1(type !== 'ethereum', 'Unable to derive on this keypair');
        assert$1(!isLocked(secretKey), 'Cannot derive on a locked keypair');
        const {
          path
        } = keyExtractPath(suri);
        const derived = keyFromPath({
          publicKey,
          secretKey
        }, path, type);
        return createPair({
          toSS58,
          type
        }, derived, meta, null);
      },
      encodePkcs8: passphrase => {
        return recode(passphrase);
      },
      encryptMessage: (message, recipientPublicKey, nonceIn) => {
        assert$1(!isLocked(secretKey), 'Cannot encrypt with a locked key pair');
        assert$1(!['ecdsa', 'ethereum'].includes(type), 'Secp256k1 not supported yet');
        const {
          nonce,
          sealed
        } = naclSeal(u8aToU8a(message), convertSecretKeyToCurve25519(secretKey), convertPublicKeyToCurve25519(u8aToU8a(recipientPublicKey)), nonceIn);
        return u8aConcat(nonce, sealed);
      },
      lock: () => {
        secretKey = new Uint8Array();
      },
      setMeta: additional => {
        meta = objectSpread({}, meta, additional);
      },
      sign: (message, options = {}) => {
        assert$1(!isLocked(secretKey), 'Cannot sign with a locked key pair');
        return u8aConcat(options.withType ? TYPE_PREFIX[type] : SIG_TYPE_NONE, TYPE_SIGNATURE[type](u8aToU8a(message), {
          publicKey,
          secretKey
        }));
      },
      toJson: passphrase => {
        // NOTE: For ecdsa and ethereum, the publicKey cannot be extracted from the address. For these
        // pass the hex-encoded publicKey through to the address portion of the JSON (before decoding)
        // unless the publicKey is already an address
        const address = ['ecdsa', 'ethereum'].includes(type) ? publicKey.length === 20 ? u8aToHex(publicKey) : u8aToHex(secp256k1Compress(publicKey)) : encodeAddress();
        return pairToJson(type, {
          address,
          meta
        }, recode(passphrase), !!passphrase);
      },
      unlock: passphrase => {
        return decodePkcs8(passphrase);
      },
      verify: (message, signature, signerPublic) => {
        return signatureVerify(message, signature, TYPE_ADDRESS[type](u8aToU8a(signerPublic))).isValid;
      },
      vrfSign: (message, context, extra) => {
        assert$1(!isLocked(secretKey), 'Cannot sign with a locked key pair');

        if (type === 'sr25519') {
          return sr25519VrfSign(message, {
            secretKey
          }, context, extra);
        }

        const proof = TYPE_SIGNATURE[type](u8aToU8a(message), {
          publicKey,
          secretKey
        });
        return u8aConcat(vrfHash(proof, context, extra), proof);
      },
      vrfVerify: (message, vrfResult, signerPublic, context, extra) => {
        if (type === 'sr25519') {
          return sr25519VrfVerify(message, vrfResult, publicKey, context, extra);
        }

        const result = signatureVerify(message, u8aConcat(TYPE_PREFIX[type], vrfResult.subarray(32)), TYPE_ADDRESS[type](u8aToU8a(signerPublic)));
        return result.isValid && u8aEq(vrfResult.subarray(0, 32), vrfHash(vrfResult.subarray(32), context, extra));
      }
    };
  }

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  class Pairs {
    #map = {};

    add(pair) {
      this.#map[decodeAddress(pair.address).toString()] = pair;
      return pair;
    }

    all() {
      return Object.values(this.#map);
    }

    get(address) {
      const pair = this.#map[decodeAddress(address).toString()];

      if (!pair) {
        throw new Error(`Unable to retrieve keypair '${isU8a(address) || isHex(address) ? u8aToHex(u8aToU8a(address)) : address}'`);
      }

      return pair;
    }

    remove(address) {
      delete this.#map[decodeAddress(address).toString()];
    }

  }

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  const PairFromSeed = {
    ecdsa: seed => secp256k1PairFromSeed(seed),
    ed25519: seed => ed25519PairFromSeed(seed),
    ethereum: seed => secp256k1PairFromSeed(seed),
    sr25519: seed => sr25519PairFromSeed(seed)
  };

  function pairToPublic({
    publicKey
  }) {
    return publicKey;
  }
  /**
   * # @polkadot/keyring
   *
   * ## Overview
   *
   * @name Keyring
   * @summary Keyring management of user accounts
   * @description Allows generation of keyring pairs from a variety of input combinations, such as
   * json object containing account address or public key, account metadata, and account encoded using
   * `addFromJson`, or by providing those values as arguments separately to `addFromAddress`,
   * or by providing the mnemonic (seed phrase) and account metadata as arguments to `addFromMnemonic`.
   * Stores the keyring pairs in a keyring pair dictionary. Removal of the keyring pairs from the keyring pair
   * dictionary is achieved using `removePair`. Retrieval of all the stored pairs via `getPairs` or perform
   * lookup of a pair for a given account address or public key using `getPair`. JSON metadata associated with
   * an account may be obtained using `toJson` accompanied by the account passphrase.
   */


  class Keyring {
    #pairs;
    #type;
    #ss58;
    decodeAddress = decodeAddress;

    constructor(options = {}) {
      options.type = options.type || 'ed25519';

      if (!['ecdsa', 'ethereum', 'ed25519', 'sr25519'].includes(options.type || 'undefined')) {
        throw new Error(`Expected a keyring type of either 'ed25519', 'sr25519', 'ethereum' or 'ecdsa', found '${options.type || 'unknown'}`);
      }

      this.#pairs = new Pairs();
      this.#ss58 = options.ss58Format;
      this.#type = options.type;
    }
    /**
     * @description retrieve the pairs (alias for getPairs)
     */


    get pairs() {
      return this.getPairs();
    }
    /**
     * @description retrieve the publicKeys (alias for getPublicKeys)
     */


    get publicKeys() {
      return this.getPublicKeys();
    }
    /**
     * @description Returns the type of the keyring, ed25519, sr25519 or ecdsa
     */


    get type() {
      return this.#type;
    }
    /**
     * @name addPair
     * @summary Stores an account, given a keyring pair, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     */


    addPair(pair) {
      return this.#pairs.add(pair);
    }
    /**
     * @name addFromAddress
     * @summary Stores an account, given an account address, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to explicitly provide separate inputs including account address or public key, and optionally
     * the associated account metadata, and the default encoded value as arguments (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from them that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */


    addFromAddress(address, meta = {}, encoded = null, type = this.type, ignoreChecksum, encType) {
      const publicKey = this.decodeAddress(address, ignoreChecksum);
      return this.addPair(createPair({
        toSS58: this.encodeAddress,
        type
      }, {
        publicKey,
        secretKey: new Uint8Array()
      }, meta, encoded, encType));
    }
    /**
     * @name addFromJson
     * @summary Stores an account, given JSON data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to provide a json object argument that contains account information (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from it that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */


    addFromJson(json, ignoreChecksum) {
      return this.addPair(this.createFromJson(json, ignoreChecksum));
    }
    /**
     * @name addFromMnemonic
     * @summary Stores an account, given a mnemonic, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Allows user to provide a mnemonic (seed phrase that is provided when account is originally created)
     * argument and a metadata argument that contains account information (that may be obtained from the json file
     * of an account backup), and then generates a keyring pair from it that it passes to
     * `addPair` to stores in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */


    addFromMnemonic(mnemonic, meta = {}, type = this.type) {
      return this.addFromUri(mnemonic, meta, type);
    }
    /**
     * @name addFromPair
     * @summary Stores an account created from an explicit publicKey/secreteKey combination
     */


    addFromPair(pair, meta = {}, type = this.type) {
      return this.addPair(this.createFromPair(pair, meta, type));
    }
    /**
     * @name addFromSeed
     * @summary Stores an account, given seed data, as a Key/Value (public key, pair) in Keyring Pair Dictionary
     * @description Stores in a keyring pair dictionary the public key of the pair as a key and the pair as the associated value.
     * Allows user to provide the account seed as an argument, and then generates a keyring pair from it that it passes to
     * `addPair` to store in a keyring pair dictionary the public key of the generated pair as a key and the pair as the associated value.
     */


    addFromSeed(seed, meta = {}, type = this.type) {
      return this.addPair(createPair({
        toSS58: this.encodeAddress,
        type
      }, PairFromSeed[type](seed), meta, null));
    }
    /**
     * @name addFromUri
     * @summary Creates an account via an suri
     * @description Extracts the phrase, path and password from a SURI format for specifying secret keys `<secret>/<soft-key>//<hard-key>///<password>` (the `///password` may be omitted, and `/<soft-key>` and `//<hard-key>` maybe repeated and mixed). The secret can be a hex string, mnemonic phrase or a string (to be padded)
     */


    addFromUri(suri, meta = {}, type = this.type) {
      return this.addPair(this.createFromUri(suri, meta, type));
    }
    /**
     * @name createFromJson
     * @description Creates a pair from a JSON keyfile
     */


    createFromJson({
      address,
      encoded,
      encoding: {
        content,
        type,
        version
      },
      meta
    }, ignoreChecksum) {
      if (version === '3' && content[0] !== 'pkcs8') {
        throw new Error(`Unable to decode non-pkcs8 type, [${content.join(',')}] found}`);
      }

      const cryptoType = version === '0' || !Array.isArray(content) ? this.type : content[1];
      const encType = !Array.isArray(type) ? [type] : type;

      if (!['ed25519', 'sr25519', 'ecdsa', 'ethereum'].includes(cryptoType)) {
        throw new Error(`Unknown crypto type ${cryptoType}`);
      } // Here the address and publicKey are 32 bytes and isomorphic. This is why the address field needs to be the public key for ethereum type pairs


      const publicKey = isHex(address) ? hexToU8a(address) : this.decodeAddress(address, ignoreChecksum);
      const decoded = isHex(encoded) ? hexToU8a(encoded) : base64Decode(encoded);
      return createPair({
        toSS58: this.encodeAddress,
        type: cryptoType
      }, {
        publicKey,
        secretKey: new Uint8Array()
      }, meta, decoded, encType);
    }
    /**
     * @name createFromPair
     * @summary Creates a pair from an explicit publicKey/secreteKey combination
     */


    createFromPair(pair, meta = {}, type = this.type) {
      return createPair({
        toSS58: this.encodeAddress,
        type
      }, pair, meta, null);
    }
    /**
     * @name createFromUri
     * @summary Creates a Keypair from an suri
     * @description This creates a pair from the suri, but does not add it to the keyring
     */


    createFromUri(_suri, meta = {}, type = this.type) {
      // here we only aut-add the dev phrase if we have a hard-derived path
      const suri = _suri.startsWith('//') ? `${DEV_PHRASE}${_suri}` : _suri;
      const {
        derivePath,
        password,
        path,
        phrase
      } = keyExtractSuri(suri);
      let seed;
      const isPhraseHex = isHex(phrase, 256);

      if (isPhraseHex) {
        seed = hexToU8a(phrase);
      } else {
        const parts = phrase.split(' ');

        if ([12, 15, 18, 21, 24].includes(parts.length)) {
          seed = type === 'ethereum' ? mnemonicToLegacySeed(phrase, '', false, 64) : mnemonicToMiniSecret(phrase, password);
        } else {
          if (phrase.length > 32) {
            throw new Error('specified phrase is not a valid mnemonic and is invalid as a raw seed at > 32 bytes');
          }

          seed = stringToU8a(phrase.padEnd(32));
        }
      }

      const derived = type === 'ethereum' ? isPhraseHex ? PairFromSeed[type](seed) // for eth, if the private key is provided as suri, it must be derived only once
      : hdEthereum(seed, derivePath.substring(1)) : keyFromPath(PairFromSeed[type](seed), path, type);
      return createPair({
        toSS58: this.encodeAddress,
        type
      }, derived, meta, null);
    }
    /**
     * @name encodeAddress
     * @description Encodes the input into an ss58 representation
     */


    encodeAddress = (address, ss58Format) => {
      return this.type === 'ethereum' ? ethereumEncode(address) : encodeAddress(address, ss58Format === undefined ? this.#ss58 : ss58Format);
    };
    /**
     * @name getPair
     * @summary Retrieves an account keyring pair from the Keyring Pair Dictionary, given an account address
     * @description Returns a keyring pair value from the keyring pair dictionary by performing
     * a key lookup using the provided account address or public key (after decoding it).
     */

    getPair(address) {
      return this.#pairs.get(address);
    }
    /**
     * @name getPairs
     * @summary Retrieves all account keyring pairs from the Keyring Pair Dictionary
     * @description Returns an array list of all the keyring pair values that are stored in the keyring pair dictionary.
     */


    getPairs() {
      return this.#pairs.all();
    }
    /**
     * @name getPublicKeys
     * @summary Retrieves Public Keys of all Keyring Pairs stored in the Keyring Pair Dictionary
     * @description Returns an array list of all the public keys associated with each of the keyring pair values that are stored in the keyring pair dictionary.
     */


    getPublicKeys() {
      return this.#pairs.all().map(pairToPublic);
    }
    /**
     * @name removePair
     * @description Deletes the provided input address or public key from the stored Keyring Pair Dictionary.
     */


    removePair(address) {
      this.#pairs.remove(address);
    }
    /**
     * @name setSS58Format;
     * @description Sets the ss58 format for the keyring
     */


    setSS58Format(ss58) {
      this.#ss58 = ss58;
    }
    /**
     * @name toJson
     * @summary Returns a JSON object associated with the input argument that contains metadata assocated with an account
     * @description Returns a JSON object containing the metadata associated with an account
     * when valid address or public key and when the account passphrase is provided if the account secret
     * is not already unlocked and available in memory. Note that in [Polkadot-JS Apps](https://github.com/polkadot-js/apps) the user
     * may backup their account to a JSON file that contains this information.
     */


    toJson(address, passphrase) {
      return this.#pairs.get(address).toJson(passphrase);
    }

  }

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  // NOTE This is not great since we have the secretKey here explicitly, but a testing
  // keyring is for testing - what happens is that in most cases the keyring is initialises
  // before anything else. Since the sr25519 crypto is async, this creates problems with
  // adding the keys when only the keyring is used.
  [{
    publicKey: hexToU8a('0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d'),
    secretKey: hexToU8a('0x98319d4ff8a9508c4bb0cf0b5a78d760a0b2082c02775e6e82370816fedfff48925a225d97aa00682d6a59b95b18780c10d7032336e88f3442b42361f4a66011'),
    // nosemgrep
    seed: 'Alice',
    type: 'sr25519'
  }, {
    publicKey: hexToU8a('0xbe5ddb1579b72e84524fc29e78609e3caf42e85aa118ebfe0b0ad404b5bdd25f'),
    secretKey: hexToU8a('0xe8da6c9d810e020f5e3c7f5af2dea314cbeaa0d72bc6421e92c0808a0c584a6046ab28e97c3ffc77fe12b5a4d37e8cd4afbfebbf2391ffc7cb07c0f38c023efd'),
    // nosemgrep
    seed: 'Alice//stash',
    type: 'sr25519'
  }, {
    publicKey: hexToU8a('0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48'),
    secretKey: hexToU8a('0x081ff694633e255136bdb456c20a5fc8fed21f8b964c11bb17ff534ce80ebd5941ae88f85d0c1bfc37be41c904e1dfc01de8c8067b0d6d5df25dd1ac0894a325'),
    // nosemgrep
    seed: 'Bob',
    type: 'sr25519'
  }, {
    publicKey: hexToU8a('0xfe65717dad0447d715f660a0a58411de509b42e6efb8375f562f58a554d5860e'),
    secretKey: hexToU8a('0xc006507cdfc267a21532394c49ca9b754ca71de21e15a1cdf807c7ceab6d0b6c3ed408d9d35311540dcd54931933e67cf1ea10d46f75408f82b789d9bd212fde'),
    // nosemgrep
    seed: 'Bob//stash',
    type: 'sr25519'
  }, {
    publicKey: hexToU8a('0x90b5ab205c6974c9ea841be688864633dc9ca8a357843eeacf2314649965fe22'),
    secretKey: hexToU8a('0xa8f2d83016052e5d6d77b2f6fd5d59418922a09024cda701b3c34369ec43a7668faf12ff39cd4e5d92bb773972f41a7a5279ebc2ed92264bed8f47d344f8f18c'),
    // nosemgrep
    seed: 'Charlie',
    type: 'sr25519'
  }, {
    publicKey: hexToU8a('0x306721211d5404bd9da88e0204360a1a9ab8b87c66c1bc2fcdd37f3c2222cc20'),
    secretKey: hexToU8a('0x20e05482ca4677e0edbc58ae9a3a59f6ed3b1a9484ba17e64d6fe8688b2b7b5d108c4487b9323b98b11fe36cb301b084e920f7b7895536809a6d62a451b25568'),
    // nosemgrep
    seed: 'Dave',
    type: 'sr25519'
  }, {
    publicKey: hexToU8a('0xe659a7a1628cdd93febc04a4e0646ea20e9f5f0ce097d9a05290d4a9e054df4e'),
    secretKey: hexToU8a('0x683576abfd5dc35273e4264c23095a1bf21c14517bece57c7f0cc5c0ed4ce06a3dbf386b7828f348abe15d76973a72009e6ef86a5c91db2990cb36bb657c6587'),
    // nosemgrep
    seed: 'Eve',
    type: 'sr25519'
  }, {
    publicKey: hexToU8a('0x1cbd2d43530a44705ad088af313e18f80b53ef16b36177cd4b77b846f2a5f07c'),
    secretKey: hexToU8a('0xb835c20f450079cf4f513900ae9faf8df06ad86c681884122c752a4b2bf74d4303e4f21bc6cc62bb4eeed5a9cce642c25e2d2ac1464093b50f6196d78e3a7426'),
    // nosemgrep
    seed: 'Ferdie',
    type: 'sr25519'
  }];
  [{
    name: 'Alith',
    publicKey: hexToU8a('0x02509540919faacf9ab52146c9aa40db68172d83777250b28e4679176e49ccdd9f'),
    secretKey: hexToU8a('0x5fb92d6e98884f76de468fa3f6278f8807c48bebc13595d45af5bdc4da702133'),
    // nosemgrep
    type: 'ethereum'
  }, {
    name: 'Baltathar',
    publicKey: hexToU8a('0x033bc19e36ff1673910575b6727a974a9abd80c9a875d41ab3e2648dbfb9e4b518'),
    secretKey: hexToU8a('0x8075991ce870b93a8870eca0c0f91913d12f47948ca0fd25b49c6fa7cdbeee8b'),
    // nosemgrep
    type: 'ethereum'
  }, {
    name: 'Charleth',
    publicKey: hexToU8a('0x0234637bdc0e89b5d46543bcbf8edff329d2702bc995e27e9af4b1ba009a3c2a5e'),
    secretKey: hexToU8a('0x0b6e18cafb6ed99687ec547bd28139cafdd2bffe70e6b688025de6b445aa5c5b'),
    // nosemgrep
    type: 'ethereum'
  }, {
    name: 'Dorothy',
    publicKey: hexToU8a('0x02a00d60b2b408c2a14c5d70cdd2c205db8985ef737a7e55ad20ea32cc9e7c417c'),
    secretKey: hexToU8a('0x39539ab1876910bbf3a223d84a29e28f1cb4e2e456503e7e91ed39b2e7223d68'),
    // nosemgrep
    type: 'ethereum'
  }, {
    name: 'Ethan',
    publicKey: hexToU8a('0x025cdc005b752651cd3f728fb9192182acb3a9c89e19072cbd5b03f3ee1f1b3ffa'),
    secretKey: hexToU8a('0x7dce9bc8babb68fec1409be38c8e1a52650206a7ed90ff956ae8a6d15eeaaef4'),
    // nosemgrep
    type: 'ethereum'
  }, {
    name: 'Faith',
    publicKey: hexToU8a('0x037964b6c9d546da4646ada28a99e34acaa1d14e7aba861a9055f9bd200c8abf74'),
    secretKey: hexToU8a('0xb9d2ea9a615f3165812e8d44de0d24da9bbd164b65c4f0573e1ce2c8dbd9c8df'),
    // nosemgrep
    type: 'ethereum'
  }];

  // Copyright 2017-2022 @polkadot/keyring authors & contributors
  const publicKey = new Uint8Array(32);
  encodeAddress(publicKey);

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$8 = {
    name: '@polkadot/api-derive',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '8.10.1'
  };

  // Copyright 2017-2022 @polkadot/rpc-core authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$7 = {
    name: '@polkadot/rpc-core',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '8.10.1'
  };

  // Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$6 = {
    name: '@polkadot/rpc-provider',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '8.10.1'
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$5 = {
    name: '@polkadot/types',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '8.10.1'
  };

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$4 = {
    name: '@polkadot/types-known',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '8.10.1'
  };

  // Copyright 2017-2022 @polkadot/api authors & contributors
  var others$8 = [packageInfo$8, packageInfo$7, packageInfo$6, packageInfo$5, packageInfo$4];

  // Copyright 2017-2022 @polkadot/api authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$3 = {
    name: '@polkadot/api',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '8.10.1'
  };

  // Copyright 2017-2022 @polkadot/api authors & contributors
  detectPackage(packageInfo$3, null, others$8);

  // Copyright 2017-2022 @polkadot/rpc-augment authors & contributors
  var others$7 = [packageInfo$7, packageInfo$5];

  // Copyright 2017-2022 @polkadot/rpc-augment authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$2 = {
    name: '@polkadot/rpc-augment',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '8.10.1'
  };

  // Copyright 2017-2022 @polkadot/rpc-augment authors & contributors
  detectPackage(packageInfo$2, null, others$7);

  // Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
  var others$6 = [packageInfo$5];

  // Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
  detectPackage(packageInfo$6, null, others$6);

  function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }

    return receiver;
  }

  var id = 0;
  function _classPrivateFieldKey(name) {
    return "__private_" + id++ + "_" + name;
  }

  // Copyright 2017-2022 @polkadot/x-fetch authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  ({
    name: '@polkadot/x-fetch',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  });

  // Copyright 2017-2022 @polkadot/x-fetch authors & contributors
  xglobal.fetch;

  // Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
  const UNKNOWN = -99999;

  function extend(that, name, value) {
    Object.defineProperty(that, name, {
      configurable: true,
      enumerable: false,
      value
    });
  }
  /**
   * @name RpcError
   * @summary Extension to the basic JS Error.
   * @description
   * The built-in JavaScript Error class is extended by adding a code to allow for Error categorization. In addition to the normal `stack`, `message`, the numeric `code` and `data` (any types) parameters are available on the object.
   * @example
   * <BR>
   *
   * ```javascript
   * const { RpcError } from '@polkadot/util');
   *
   * throw new RpcError('some message', RpcError.CODES.METHOD_NOT_FOUND); // => error.code = -32601
   * ```
   */


  class RpcError extends Error {
    constructor(message = '', code = UNKNOWN, data) {
      super();
      extend(this, 'message', String(message));
      extend(this, 'name', this.constructor.name);
      extend(this, 'data', data);
      extend(this, 'code', code);

      if (isFunction$2(Error.captureStackTrace)) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        const {
          stack
        } = new Error(message);
        stack && extend(this, 'stack', stack);
      }
    }

    static CODES = {
      ASSERT: -90009,
      INVALID_JSONRPC: -99998,
      METHOD_NOT_FOUND: -32601,
      // Rust client
      UNKNOWN
    };
  }

  // Copyright 2017-2022 @polkadot/rpc-provider authors & contributors

  function formatErrorData(data) {
    if (isUndefined$1(data)) {
      return '';
    }

    const formatted = `: ${isString$1(data) ? data.replace(/Error\("/g, '').replace(/\("/g, '(').replace(/"\)/g, ')').replace(/\(/g, ', ').replace(/\)/g, '') : stringify(data)}`; // We need some sort of cut-off here since these can be very large and
    // very nested, pick a number and trim the result display to it

    return formatted.length <= 256 ? formatted : `${formatted.substring(0, 255)}…`;
  }

  function checkError(error) {
    if (error) {
      const {
        code,
        data,
        message
      } = error;
      throw new RpcError(`${code}: ${message}${formatErrorData(data)}`, code, data);
    }
  }
  /** @internal */


  class RpcCoder {
    #id = 0;

    decodeResponse(response) {
      if (!response || response.jsonrpc !== '2.0') {
        throw new Error('Invalid jsonrpc field in decoded object');
      }

      const isSubscription = !isUndefined$1(response.params) && !isUndefined$1(response.method);

      if (!isNumber$1(response.id) && (!isSubscription || !isNumber$1(response.params.subscription) && !isString$1(response.params.subscription))) {
        throw new Error('Invalid id field in decoded object');
      }

      checkError(response.error);

      if (response.result === undefined && !isSubscription) {
        throw new Error('No result found in jsonrpc response');
      }

      if (isSubscription) {
        checkError(response.params.error);
        return response.params.result;
      }

      return response.result;
    }

    encodeJson(method, params) {
      const [id, data] = this.encodeObject(method, params);
      return [id, stringify(data)];
    }

    encodeObject(method, params) {
      const id = ++this.#id;
      return [id, {
        id,
        jsonrpc: '2.0',
        method,
        params
      }];
    }

  }

  // Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const HTTP_URL = 'http://127.0.0.1:9933';
  const WS_URL = 'ws://127.0.0.1:9944';
  var defaults = {
    HTTP_URL,
    WS_URL
  };

  // Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Assuming all 1.5MB responses, we apply a default allowing for 192MB
  // cache space (depending on the historic queries this would vary, metadata
  // for Kusama/Polkadot/Substrate falls between 600-750K, 2x for estimate)
  const DEFAULT_CAPACITY = 128;

  class LRUNode {
    constructor(key) {
      this.key = key;
      this.next = this.prev = this;
    }

  } // https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU


  var _data = /*#__PURE__*/_classPrivateFieldKey("data");

  var _refs = /*#__PURE__*/_classPrivateFieldKey("refs");

  var _length = /*#__PURE__*/_classPrivateFieldKey("length");

  var _head = /*#__PURE__*/_classPrivateFieldKey("head");

  var _tail = /*#__PURE__*/_classPrivateFieldKey("tail");

  var _toHead = /*#__PURE__*/_classPrivateFieldKey("toHead");

  class LRUCache {
    constructor(capacity = DEFAULT_CAPACITY) {
      Object.defineProperty(this, _toHead, {
        value: _toHead2
      });
      this.capacity = void 0;
      Object.defineProperty(this, _data, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _refs, {
        writable: true,
        value: new Map()
      });
      Object.defineProperty(this, _length, {
        writable: true,
        value: 0
      });
      Object.defineProperty(this, _head, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _tail, {
        writable: true,
        value: void 0
      });
      this.capacity = capacity;
      _classPrivateFieldBase(this, _head)[_head] = _classPrivateFieldBase(this, _tail)[_tail] = new LRUNode('<empty>');
    }

    get length() {
      return _classPrivateFieldBase(this, _length)[_length];
    }

    get lengthData() {
      return _classPrivateFieldBase(this, _data)[_data].size;
    }

    get lengthRefs() {
      return _classPrivateFieldBase(this, _refs)[_refs].size;
    }

    entries() {
      const keys = this.keys();
      const entries = new Array(keys.length);

      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        entries[i] = [key, _classPrivateFieldBase(this, _data)[_data].get(key)];
      }

      return entries;
    }

    keys() {
      const keys = [];

      if (_classPrivateFieldBase(this, _length)[_length]) {
        let curr = _classPrivateFieldBase(this, _head)[_head];

        while (curr !== _classPrivateFieldBase(this, _tail)[_tail]) {
          keys.push(curr.key);
          curr = curr.next;
        }

        keys.push(curr.key);
      }

      return keys;
    }

    get(key) {
      const data = _classPrivateFieldBase(this, _data)[_data].get(key);

      if (data) {
        _classPrivateFieldBase(this, _toHead)[_toHead](key);

        return data;
      }

      return null;
    }

    set(key, value) {
      if (_classPrivateFieldBase(this, _data)[_data].has(key)) {
        _classPrivateFieldBase(this, _toHead)[_toHead](key);
      } else {
        const node = new LRUNode(key);

        _classPrivateFieldBase(this, _refs)[_refs].set(node.key, node);

        if (this.length === 0) {
          _classPrivateFieldBase(this, _head)[_head] = _classPrivateFieldBase(this, _tail)[_tail] = node;
        } else {
          _classPrivateFieldBase(this, _head)[_head].prev = node;
          node.next = _classPrivateFieldBase(this, _head)[_head];
          _classPrivateFieldBase(this, _head)[_head] = node;
        }

        if (_classPrivateFieldBase(this, _length)[_length] === this.capacity) {
          _classPrivateFieldBase(this, _data)[_data].delete(_classPrivateFieldBase(this, _tail)[_tail].key);

          _classPrivateFieldBase(this, _refs)[_refs].delete(_classPrivateFieldBase(this, _tail)[_tail].key);

          _classPrivateFieldBase(this, _tail)[_tail] = _classPrivateFieldBase(this, _tail)[_tail].prev;
          _classPrivateFieldBase(this, _tail)[_tail].next = _classPrivateFieldBase(this, _head)[_head];
        } else {
          _classPrivateFieldBase(this, _length)[_length] += 1;
        }
      }

      _classPrivateFieldBase(this, _data)[_data].set(key, value);
    }

  }

  function _toHead2(key) {
    const ref = _classPrivateFieldBase(this, _refs)[_refs].get(key);

    if (ref && ref !== _classPrivateFieldBase(this, _head)[_head]) {
      ref.prev.next = ref.next;
      ref.next.prev = ref.prev;
      ref.next = _classPrivateFieldBase(this, _head)[_head];
      _classPrivateFieldBase(this, _head)[_head].prev = ref;
      _classPrivateFieldBase(this, _head)[_head] = ref;
    }
  }

  logger('api-http');

  var eventemitter3 = {exports: {}};

  (function (module) {

  	var has = Object.prototype.hasOwnProperty
  	  , prefix = '~';

  	/**
  	 * Constructor to create a storage for our `EE` objects.
  	 * An `Events` instance is a plain object whose properties are event names.
  	 *
  	 * @constructor
  	 * @private
  	 */
  	function Events() {}

  	//
  	// We try to not inherit from `Object.prototype`. In some engines creating an
  	// instance in this way is faster than calling `Object.create(null)` directly.
  	// If `Object.create(null)` is not supported we prefix the event names with a
  	// character to make sure that the built-in object properties are not
  	// overridden or used as an attack vector.
  	//
  	if (Object.create) {
  	  Events.prototype = Object.create(null);

  	  //
  	  // This hack is needed because the `__proto__` property is still inherited in
  	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  	  //
  	  if (!new Events().__proto__) prefix = false;
  	}

  	/**
  	 * Representation of a single event listener.
  	 *
  	 * @param {Function} fn The listener function.
  	 * @param {*} context The context to invoke the listener with.
  	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
  	 * @constructor
  	 * @private
  	 */
  	function EE(fn, context, once) {
  	  this.fn = fn;
  	  this.context = context;
  	  this.once = once || false;
  	}

  	/**
  	 * Add a listener for a given event.
  	 *
  	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {*} context The context to invoke the listener with.
  	 * @param {Boolean} once Specify if the listener is a one-time listener.
  	 * @returns {EventEmitter}
  	 * @private
  	 */
  	function addListener(emitter, event, fn, context, once) {
  	  if (typeof fn !== 'function') {
  	    throw new TypeError('The listener must be a function');
  	  }

  	  var listener = new EE(fn, context || emitter, once)
  	    , evt = prefix ? prefix + event : event;

  	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  	  else emitter._events[evt] = [emitter._events[evt], listener];

  	  return emitter;
  	}

  	/**
  	 * Clear event by name.
  	 *
  	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
  	 * @param {(String|Symbol)} evt The Event name.
  	 * @private
  	 */
  	function clearEvent(emitter, evt) {
  	  if (--emitter._eventsCount === 0) emitter._events = new Events();
  	  else delete emitter._events[evt];
  	}

  	/**
  	 * Minimal `EventEmitter` interface that is molded against the Node.js
  	 * `EventEmitter` interface.
  	 *
  	 * @constructor
  	 * @public
  	 */
  	function EventEmitter() {
  	  this._events = new Events();
  	  this._eventsCount = 0;
  	}

  	/**
  	 * Return an array listing the events for which the emitter has registered
  	 * listeners.
  	 *
  	 * @returns {Array}
  	 * @public
  	 */
  	EventEmitter.prototype.eventNames = function eventNames() {
  	  var names = []
  	    , events
  	    , name;

  	  if (this._eventsCount === 0) return names;

  	  for (name in (events = this._events)) {
  	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  	  }

  	  if (Object.getOwnPropertySymbols) {
  	    return names.concat(Object.getOwnPropertySymbols(events));
  	  }

  	  return names;
  	};

  	/**
  	 * Return the listeners registered for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @returns {Array} The registered listeners.
  	 * @public
  	 */
  	EventEmitter.prototype.listeners = function listeners(event) {
  	  var evt = prefix ? prefix + event : event
  	    , handlers = this._events[evt];

  	  if (!handlers) return [];
  	  if (handlers.fn) return [handlers.fn];

  	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
  	    ee[i] = handlers[i].fn;
  	  }

  	  return ee;
  	};

  	/**
  	 * Return the number of listeners listening to a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @returns {Number} The number of listeners.
  	 * @public
  	 */
  	EventEmitter.prototype.listenerCount = function listenerCount(event) {
  	  var evt = prefix ? prefix + event : event
  	    , listeners = this._events[evt];

  	  if (!listeners) return 0;
  	  if (listeners.fn) return 1;
  	  return listeners.length;
  	};

  	/**
  	 * Calls each of the listeners registered for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @returns {Boolean} `true` if the event had listeners, else `false`.
  	 * @public
  	 */
  	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  	  var evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) return false;

  	  var listeners = this._events[evt]
  	    , len = arguments.length
  	    , args
  	    , i;

  	  if (listeners.fn) {
  	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

  	    switch (len) {
  	      case 1: return listeners.fn.call(listeners.context), true;
  	      case 2: return listeners.fn.call(listeners.context, a1), true;
  	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
  	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
  	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
  	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
  	    }

  	    for (i = 1, args = new Array(len -1); i < len; i++) {
  	      args[i - 1] = arguments[i];
  	    }

  	    listeners.fn.apply(listeners.context, args);
  	  } else {
  	    var length = listeners.length
  	      , j;

  	    for (i = 0; i < length; i++) {
  	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

  	      switch (len) {
  	        case 1: listeners[i].fn.call(listeners[i].context); break;
  	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
  	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
  	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
  	        default:
  	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
  	            args[j - 1] = arguments[j];
  	          }

  	          listeners[i].fn.apply(listeners[i].context, args);
  	      }
  	    }
  	  }

  	  return true;
  	};

  	/**
  	 * Add a listener for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {*} [context=this] The context to invoke the listener with.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.on = function on(event, fn, context) {
  	  return addListener(this, event, fn, context, false);
  	};

  	/**
  	 * Add a one-time listener for a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn The listener function.
  	 * @param {*} [context=this] The context to invoke the listener with.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.once = function once(event, fn, context) {
  	  return addListener(this, event, fn, context, true);
  	};

  	/**
  	 * Remove the listeners of a given event.
  	 *
  	 * @param {(String|Symbol)} event The event name.
  	 * @param {Function} fn Only remove the listeners that match this function.
  	 * @param {*} context Only remove the listeners that have this context.
  	 * @param {Boolean} once Only remove one-time listeners.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  	  var evt = prefix ? prefix + event : event;

  	  if (!this._events[evt]) return this;
  	  if (!fn) {
  	    clearEvent(this, evt);
  	    return this;
  	  }

  	  var listeners = this._events[evt];

  	  if (listeners.fn) {
  	    if (
  	      listeners.fn === fn &&
  	      (!once || listeners.once) &&
  	      (!context || listeners.context === context)
  	    ) {
  	      clearEvent(this, evt);
  	    }
  	  } else {
  	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
  	      if (
  	        listeners[i].fn !== fn ||
  	        (once && !listeners[i].once) ||
  	        (context && listeners[i].context !== context)
  	      ) {
  	        events.push(listeners[i]);
  	      }
  	    }

  	    //
  	    // Reset the array, or remove it completely if we have no more listeners.
  	    //
  	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
  	    else clearEvent(this, evt);
  	  }

  	  return this;
  	};

  	/**
  	 * Remove all listeners, or those of the specified event.
  	 *
  	 * @param {(String|Symbol)} [event] The event name.
  	 * @returns {EventEmitter} `this`.
  	 * @public
  	 */
  	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  	  var evt;

  	  if (event) {
  	    evt = prefix ? prefix + event : event;
  	    if (this._events[evt]) clearEvent(this, evt);
  	  } else {
  	    this._events = new Events();
  	    this._eventsCount = 0;
  	  }

  	  return this;
  	};

  	//
  	// Alias methods names because people roll like that.
  	//
  	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  	//
  	// Expose the prefix.
  	//
  	EventEmitter.prefixed = prefix;

  	//
  	// Allow `EventEmitter` to be imported as module namespace.
  	//
  	EventEmitter.EventEmitter = EventEmitter;

  	//
  	// Expose the module.
  	//
  	{
  	  module.exports = EventEmitter;
  	}
  } (eventemitter3));

  var EventEmitter$1 = eventemitter3.exports;

  // Copyright 2017-2022 @polkadot/x-ws authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  ({
    name: '@polkadot/x-ws',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '9.6.2'
  });

  // Copyright 2017-2022 @polkadot/x-ws authors & contributors
  const WebSocket = xglobal.WebSocket;

  // Copyright 2017-2022 @polkadot/rpc-provider authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // from https://stackoverflow.com/questions/19304157/getting-the-reason-why-websockets-closed-with-close-code-1006
  const known = {
    1000: 'Normal Closure',
    1001: 'Going Away',
    1002: 'Protocol Error',
    1003: 'Unsupported Data',
    1004: '(For future)',
    1005: 'No Status Received',
    1006: 'Abnormal Closure',
    1007: 'Invalid frame payload data',
    1008: 'Policy Violation',
    1009: 'Message too big',
    1010: 'Missing Extension',
    1011: 'Internal Error',
    1012: 'Service Restart',
    1013: 'Try Again Later',
    1014: 'Bad Gateway',
    1015: 'TLS Handshake'
  };

  function getUnmapped(code) {
    if (code <= 1999) {
      return '(For WebSocket standard)';
    } else if (code <= 2999) {
      return '(For WebSocket extensions)';
    } else if (code <= 3999) {
      return '(For libraries and frameworks)';
    } else if (code <= 4999) {
      return '(For applications)';
    }
  }

  function getWSErrorString(code) {
    if (code >= 0 && code <= 999) {
      return '(Unused)';
    }

    return known[code] || getUnmapped(code) || '(Unknown)';
  }

  const ALIASES = {
    chain_finalisedHead: 'chain_finalizedHead',
    chain_subscribeFinalisedHeads: 'chain_subscribeFinalizedHeads',
    chain_unsubscribeFinalisedHeads: 'chain_unsubscribeFinalizedHeads'
  };
  const RETRY_DELAY = 2500;
  const DEFAULT_TIMEOUT_MS = 60 * 1000;
  const TIMEOUT_INTERVAL = 5000;
  const MEGABYTE = 1024 * 1024;
  const l$c = logger('api-ws');

  function eraseRecord(record, cb) {
    Object.keys(record).forEach(key => {
      if (cb) {
        cb(record[key]);
      }

      delete record[key];
    });
  }
  /**
   * # @polkadot/rpc-provider/ws
   *
   * @name WsProvider
   *
   * @description The WebSocket Provider allows sending requests using WebSocket to a WebSocket RPC server TCP port. Unlike the [[HttpProvider]], it does support subscriptions and allows listening to events such as new blocks or balance changes.
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Api from '@polkadot/api/promise';
   * import { WsProvider } from '@polkadot/rpc-provider/ws';
   *
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const api = new Api(provider);
   * ```
   *
   * @see [[HttpProvider]]
   */


  var _callCache = /*#__PURE__*/_classPrivateFieldKey("callCache");

  var _coder = /*#__PURE__*/_classPrivateFieldKey("coder");

  var _endpoints = /*#__PURE__*/_classPrivateFieldKey("endpoints");

  var _headers = /*#__PURE__*/_classPrivateFieldKey("headers");

  var _eventemitter = /*#__PURE__*/_classPrivateFieldKey("eventemitter");

  var _handlers = /*#__PURE__*/_classPrivateFieldKey("handlers");

  var _isReadyPromise = /*#__PURE__*/_classPrivateFieldKey("isReadyPromise");

  var _stats = /*#__PURE__*/_classPrivateFieldKey("stats");

  var _waitingForId = /*#__PURE__*/_classPrivateFieldKey("waitingForId");

  var _autoConnectMs = /*#__PURE__*/_classPrivateFieldKey("autoConnectMs");

  var _endpointIndex = /*#__PURE__*/_classPrivateFieldKey("endpointIndex");

  var _isConnected = /*#__PURE__*/_classPrivateFieldKey("isConnected");

  var _subscriptions = /*#__PURE__*/_classPrivateFieldKey("subscriptions");

  var _timeoutId = /*#__PURE__*/_classPrivateFieldKey("timeoutId");

  var _websocket = /*#__PURE__*/_classPrivateFieldKey("websocket");

  var _timeout = /*#__PURE__*/_classPrivateFieldKey("timeout");

  var _send = /*#__PURE__*/_classPrivateFieldKey("send");

  var _emit = /*#__PURE__*/_classPrivateFieldKey("emit");

  var _onSocketClose = /*#__PURE__*/_classPrivateFieldKey("onSocketClose");

  var _onSocketError = /*#__PURE__*/_classPrivateFieldKey("onSocketError");

  var _onSocketMessage = /*#__PURE__*/_classPrivateFieldKey("onSocketMessage");

  var _onSocketMessageResult = /*#__PURE__*/_classPrivateFieldKey("onSocketMessageResult");

  var _onSocketMessageSubscribe = /*#__PURE__*/_classPrivateFieldKey("onSocketMessageSubscribe");

  var _onSocketOpen = /*#__PURE__*/_classPrivateFieldKey("onSocketOpen");

  var _resubscribe = /*#__PURE__*/_classPrivateFieldKey("resubscribe");

  var _timeoutHandlers = /*#__PURE__*/_classPrivateFieldKey("timeoutHandlers");

  class WsProvider {
    /**
     * @param {string | string[]}  endpoint    The endpoint url. Usually `ws://ip:9944` or `wss://ip:9944`, may provide an array of endpoint strings.
     * @param {boolean} autoConnect Whether to connect automatically or not.
     * @param {number} [timeout] Custom timeout value
     */
    constructor(endpoint = defaults.WS_URL, autoConnectMs = RETRY_DELAY, headers = {}, timeout) {
      Object.defineProperty(this, _send, {
        value: _send2
      });
      Object.defineProperty(this, _callCache, {
        writable: true,
        value: new LRUCache()
      });
      Object.defineProperty(this, _coder, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _endpoints, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _headers, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _eventemitter, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _handlers, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _isReadyPromise, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _stats, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _waitingForId, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _autoConnectMs, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _endpointIndex, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _isConnected, {
        writable: true,
        value: false
      });
      Object.defineProperty(this, _subscriptions, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _timeoutId, {
        writable: true,
        value: null
      });
      Object.defineProperty(this, _websocket, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _timeout, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _emit, {
        writable: true,
        value: (type, ...args) => {
          _classPrivateFieldBase(this, _eventemitter)[_eventemitter].emit(type, ...args);
        }
      });
      Object.defineProperty(this, _onSocketClose, {
        writable: true,
        value: event => {
          const error = new Error(`disconnected from ${_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]}: ${event.code}:: ${event.reason || getWSErrorString(event.code)}`);

          if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
            l$c.error(error.message);
          }

          _classPrivateFieldBase(this, _isConnected)[_isConnected] = false;

          if (_classPrivateFieldBase(this, _websocket)[_websocket]) {
            _classPrivateFieldBase(this, _websocket)[_websocket].onclose = null;
            _classPrivateFieldBase(this, _websocket)[_websocket].onerror = null;
            _classPrivateFieldBase(this, _websocket)[_websocket].onmessage = null;
            _classPrivateFieldBase(this, _websocket)[_websocket].onopen = null;
            _classPrivateFieldBase(this, _websocket)[_websocket] = null;
          }

          if (_classPrivateFieldBase(this, _timeoutId)[_timeoutId]) {
            clearInterval(_classPrivateFieldBase(this, _timeoutId)[_timeoutId]);
            _classPrivateFieldBase(this, _timeoutId)[_timeoutId] = null;
          }

          _classPrivateFieldBase(this, _emit)[_emit]('disconnected'); // reject all hanging requests


          eraseRecord(_classPrivateFieldBase(this, _handlers)[_handlers], h => {
            try {
              h.callback(error, undefined);
            } catch (err) {
              // does not throw
              l$c.error(err);
            }
          });
          eraseRecord(_classPrivateFieldBase(this, _waitingForId)[_waitingForId]);

          if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
            setTimeout(() => {
              this.connectWithRetry().catch(() => {// does not throw
              });
            }, _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs]);
          }
        }
      });
      Object.defineProperty(this, _onSocketError, {
        writable: true,
        value: error => {
          l$c.debug(() => ['socket error', error]);

          _classPrivateFieldBase(this, _emit)[_emit]('error', error);
        }
      });
      Object.defineProperty(this, _onSocketMessage, {
        writable: true,
        value: message => {
          l$c.debug(() => ['received', message.data]);
          _classPrivateFieldBase(this, _stats)[_stats].total.bytesRecv += message.data.length;
          const response = JSON.parse(message.data);
          return isUndefined$1(response.method) ? _classPrivateFieldBase(this, _onSocketMessageResult)[_onSocketMessageResult](response) : _classPrivateFieldBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](response);
        }
      });
      Object.defineProperty(this, _onSocketMessageResult, {
        writable: true,
        value: response => {
          const handler = _classPrivateFieldBase(this, _handlers)[_handlers][response.id];

          if (!handler) {
            l$c.debug(() => `Unable to find handler for id=${response.id}`);
            return;
          }

          try {
            const {
              method,
              params,
              subscription
            } = handler;

            const result = _classPrivateFieldBase(this, _coder)[_coder].decodeResponse(response); // first send the result - in case of subs, we may have an update
            // immediately if we have some queued results already


            handler.callback(null, result);

            if (subscription) {
              const subId = `${subscription.type}::${result}`;
              _classPrivateFieldBase(this, _subscriptions)[_subscriptions][subId] = objectSpread({}, subscription, {
                method,
                params
              }); // if we have a result waiting for this subscription already

              if (_classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId]) {
                _classPrivateFieldBase(this, _onSocketMessageSubscribe)[_onSocketMessageSubscribe](_classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId]);
              }
            }
          } catch (error) {
            _classPrivateFieldBase(this, _stats)[_stats].total.errors++;
            handler.callback(error, undefined);
          }

          delete _classPrivateFieldBase(this, _handlers)[_handlers][response.id];
        }
      });
      Object.defineProperty(this, _onSocketMessageSubscribe, {
        writable: true,
        value: response => {
          const method = ALIASES[response.method] || response.method || 'invalid';
          const subId = `${method}::${response.params.subscription}`;

          const handler = _classPrivateFieldBase(this, _subscriptions)[_subscriptions][subId];

          if (!handler) {
            // store the JSON, we could have out-of-order subid coming in
            _classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId] = response;
            l$c.debug(() => `Unable to find handler for subscription=${subId}`);
            return;
          } // housekeeping


          delete _classPrivateFieldBase(this, _waitingForId)[_waitingForId][subId];

          try {
            const result = _classPrivateFieldBase(this, _coder)[_coder].decodeResponse(response);

            handler.callback(null, result);
          } catch (error) {
            _classPrivateFieldBase(this, _stats)[_stats].total.errors++;
            handler.callback(error, undefined);
          }
        }
      });
      Object.defineProperty(this, _onSocketOpen, {
        writable: true,
        value: () => {
          if (_classPrivateFieldBase(this, _websocket)[_websocket] === null) {
            throw new Error('WebSocket cannot be null in onOpen');
          }

          l$c.debug(() => ['connected to', _classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]]);
          _classPrivateFieldBase(this, _isConnected)[_isConnected] = true;

          _classPrivateFieldBase(this, _emit)[_emit]('connected');

          _classPrivateFieldBase(this, _resubscribe)[_resubscribe]();

          return true;
        }
      });
      Object.defineProperty(this, _resubscribe, {
        writable: true,
        value: () => {
          const subscriptions = _classPrivateFieldBase(this, _subscriptions)[_subscriptions];

          _classPrivateFieldBase(this, _subscriptions)[_subscriptions] = {};
          Promise.all(Object.keys(subscriptions).map(async id => {
            const {
              callback,
              method,
              params,
              type
            } = subscriptions[id]; // only re-create subscriptions which are not in author (only area where
            // transactions are created, i.e. submissions such as 'author_submitAndWatchExtrinsic'
            // are not included (and will not be re-broadcast)

            if (type.startsWith('author_')) {
              return;
            }

            try {
              await this.subscribe(type, method, params, callback);
            } catch (error) {
              l$c.error(error);
            }
          })).catch(l$c.error);
        }
      });
      Object.defineProperty(this, _timeoutHandlers, {
        writable: true,
        value: () => {
          const now = Date.now();
          const ids = Object.keys(_classPrivateFieldBase(this, _handlers)[_handlers]);

          for (let i = 0; i < ids.length; i++) {
            const handler = _classPrivateFieldBase(this, _handlers)[_handlers][ids[i]];

            if (now - handler.start > _classPrivateFieldBase(this, _timeout)[_timeout]) {
              try {
                handler.callback(new Error(`No response received from RPC endpoint in ${_classPrivateFieldBase(this, _timeout)[_timeout] / 1000}s`), undefined);
              } catch {// ignore
              }

              _classPrivateFieldBase(this, _stats)[_stats].total.timeout++;
              delete _classPrivateFieldBase(this, _handlers)[_handlers][ids[i]];
            }
          }
        }
      });
      const endpoints = Array.isArray(endpoint) ? endpoint : [endpoint];

      if (endpoints.length === 0) {
        throw new Error('WsProvider requires at least one Endpoint');
      }

      endpoints.forEach(endpoint => {
        if (!/^(wss|ws):\/\//.test(endpoint)) {
          throw new Error(`Endpoint should start with 'ws://', received '${endpoint}'`);
        }
      });
      _classPrivateFieldBase(this, _eventemitter)[_eventemitter] = new EventEmitter$1();
      _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] = autoConnectMs || 0;
      _classPrivateFieldBase(this, _coder)[_coder] = new RpcCoder();
      _classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] = -1;
      _classPrivateFieldBase(this, _endpoints)[_endpoints] = endpoints;
      _classPrivateFieldBase(this, _headers)[_headers] = headers;
      _classPrivateFieldBase(this, _websocket)[_websocket] = null;
      _classPrivateFieldBase(this, _stats)[_stats] = {
        active: {
          requests: 0,
          subscriptions: 0
        },
        total: {
          bytesRecv: 0,
          bytesSent: 0,
          cached: 0,
          errors: 0,
          requests: 0,
          subscriptions: 0,
          timeout: 0
        }
      };
      _classPrivateFieldBase(this, _timeout)[_timeout] = timeout || DEFAULT_TIMEOUT_MS;

      if (autoConnectMs > 0) {
        this.connectWithRetry().catch(() => {// does not throw
        });
      }

      _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise] = new Promise(resolve => {
        _classPrivateFieldBase(this, _eventemitter)[_eventemitter].once('connected', () => {
          resolve(this);
        });
      });
    }
    /**
     * @summary `true` when this provider supports subscriptions
     */


    get hasSubscriptions() {
      return true;
    }
    /**
     * @summary Whether the node is connected or not.
     * @return {boolean} true if connected
     */


    get isConnected() {
      return _classPrivateFieldBase(this, _isConnected)[_isConnected];
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */


    get isReady() {
      return _classPrivateFieldBase(this, _isReadyPromise)[_isReadyPromise];
    }
    /**
     * @description Returns a clone of the object
     */


    clone() {
      return new WsProvider(_classPrivateFieldBase(this, _endpoints)[_endpoints]);
    }
    /**
     * @summary Manually connect
     * @description The [[WsProvider]] connects automatically by default, however if you decided otherwise, you may
     * connect manually using this method.
     */
    // eslint-disable-next-line @typescript-eslint/require-await


    async connect() {
      try {
        _classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] = (_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex] + 1) % _classPrivateFieldBase(this, _endpoints)[_endpoints].length;
        _classPrivateFieldBase(this, _websocket)[_websocket] = typeof xglobal.WebSocket !== 'undefined' && isChildClass(xglobal.WebSocket, WebSocket) ? new WebSocket(_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]]) // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore - WS may be an instance of w3cwebsocket, which supports headers
        : new WebSocket(_classPrivateFieldBase(this, _endpoints)[_endpoints][_classPrivateFieldBase(this, _endpointIndex)[_endpointIndex]], undefined, undefined, _classPrivateFieldBase(this, _headers)[_headers], undefined, {
          // default: true
          fragmentOutgoingMessages: true,
          // default: 16K (bump, the Node has issues with too many fragments, e.g. on setCode)
          fragmentationThreshold: 1 * MEGABYTE,
          // default: 1MiB (also align with maxReceivedMessageSize)
          maxReceivedFrameSize: 24 * MEGABYTE,
          // default: 8MB (however Polkadot api.query.staking.erasStakers.entries(356) is over that, 16M is ok there)
          maxReceivedMessageSize: 24 * MEGABYTE
        });
        _classPrivateFieldBase(this, _websocket)[_websocket].onclose = _classPrivateFieldBase(this, _onSocketClose)[_onSocketClose];
        _classPrivateFieldBase(this, _websocket)[_websocket].onerror = _classPrivateFieldBase(this, _onSocketError)[_onSocketError];
        _classPrivateFieldBase(this, _websocket)[_websocket].onmessage = _classPrivateFieldBase(this, _onSocketMessage)[_onSocketMessage];
        _classPrivateFieldBase(this, _websocket)[_websocket].onopen = _classPrivateFieldBase(this, _onSocketOpen)[_onSocketOpen]; // timeout any handlers that have not had a response

        _classPrivateFieldBase(this, _timeoutId)[_timeoutId] = setInterval(() => _classPrivateFieldBase(this, _timeoutHandlers)[_timeoutHandlers](), TIMEOUT_INTERVAL);
      } catch (error) {
        l$c.error(error);

        _classPrivateFieldBase(this, _emit)[_emit]('error', error);

        throw error;
      }
    }
    /**
     * @description Connect, never throwing an error, but rather forcing a retry
     */


    async connectWithRetry() {
      if (_classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] > 0) {
        try {
          await this.connect();
        } catch (error) {
          setTimeout(() => {
            this.connectWithRetry().catch(() => {// does not throw
            });
          }, _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs]);
        }
      }
    }
    /**
     * @description Manually disconnect from the connection, clearing auto-connect logic
     */
    // eslint-disable-next-line @typescript-eslint/require-await


    async disconnect() {
      // switch off autoConnect, we are in manual mode now
      _classPrivateFieldBase(this, _autoConnectMs)[_autoConnectMs] = 0;

      try {
        if (_classPrivateFieldBase(this, _websocket)[_websocket]) {
          // 1000 - Normal closure; the connection successfully completed
          _classPrivateFieldBase(this, _websocket)[_websocket].close(1000);
        }
      } catch (error) {
        l$c.error(error);

        _classPrivateFieldBase(this, _emit)[_emit]('error', error);

        throw error;
      }
    }
    /**
     * @description Returns the connection stats
     */


    get stats() {
      return {
        active: {
          requests: Object.keys(_classPrivateFieldBase(this, _handlers)[_handlers]).length,
          subscriptions: Object.keys(_classPrivateFieldBase(this, _subscriptions)[_subscriptions]).length
        },
        total: _classPrivateFieldBase(this, _stats)[_stats].total
      };
    }
    /**
     * @summary Listens on events after having subscribed using the [[subscribe]] function.
     * @param  {ProviderInterfaceEmitted} type Event
     * @param  {ProviderInterfaceEmitCb}  sub  Callback
     * @return unsubscribe function
     */


    on(type, sub) {
      _classPrivateFieldBase(this, _eventemitter)[_eventemitter].on(type, sub);

      return () => {
        _classPrivateFieldBase(this, _eventemitter)[_eventemitter].removeListener(type, sub);
      };
    }
    /**
     * @summary Send JSON data using WebSockets to configured HTTP Endpoint or queue.
     * @param method The RPC methods to execute
     * @param params Encoded parameters as applicable for the method
     * @param subscription Subscription details (internally used)
     */


    send(method, params, isCacheable, subscription) {
      _classPrivateFieldBase(this, _stats)[_stats].total.requests++;

      const [id, body] = _classPrivateFieldBase(this, _coder)[_coder].encodeJson(method, params);

      let resultPromise = isCacheable ? _classPrivateFieldBase(this, _callCache)[_callCache].get(body) : null;

      if (!resultPromise) {
        resultPromise = _classPrivateFieldBase(this, _send)[_send](id, body, method, params, subscription);

        if (isCacheable) {
          _classPrivateFieldBase(this, _callCache)[_callCache].set(body, resultPromise);
        }
      } else {
        _classPrivateFieldBase(this, _stats)[_stats].total.cached++;
      }

      return resultPromise;
    }

    /**
     * @name subscribe
     * @summary Allows subscribing to a specific event.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const provider = new WsProvider('ws://127.0.0.1:9944');
     * const rpc = new Rpc(provider);
     *
     * rpc.state.subscribeStorage([[storage.system.account, <Address>]], (_, values) => {
     *   console.log(values)
     * }).then((subscriptionId) => {
     *   console.log('balance changes subscription id: ', subscriptionId)
     * })
     * ```
     */
    subscribe(type, method, params, callback) {
      _classPrivateFieldBase(this, _stats)[_stats].total.subscriptions++; // subscriptions are not cached, LRU applies to .at(<blockHash>) only

      return this.send(method, params, false, {
        callback,
        type
      });
    }
    /**
     * @summary Allows unsubscribing to subscriptions made with [[subscribe]].
     */


    async unsubscribe(type, method, id) {
      const subscription = `${type}::${id}`; // FIXME This now could happen with re-subscriptions. The issue is that with a re-sub
      // the assigned id now does not match what the API user originally received. It has
      // a slight complication in solving - since we cannot rely on the send id, but rather
      // need to find the actual subscription id to map it

      if (isUndefined$1(_classPrivateFieldBase(this, _subscriptions)[_subscriptions][subscription])) {
        l$c.debug(() => `Unable to find active subscription=${subscription}`);
        return false;
      }

      delete _classPrivateFieldBase(this, _subscriptions)[_subscriptions][subscription];

      try {
        return this.isConnected && !isNull$1(_classPrivateFieldBase(this, _websocket)[_websocket]) ? this.send(method, [id]) : true;
      } catch (error) {
        return false;
      }
    }

  }

  async function _send2(id, body, method, params, subscription) {
    return new Promise((resolve, reject) => {
      try {
        if (!this.isConnected || _classPrivateFieldBase(this, _websocket)[_websocket] === null) {
          throw new Error('WebSocket is not connected');
        }

        const callback = (error, result) => {
          error ? reject(error) : resolve(result);
        };

        l$c.debug(() => ['calling', method, body]);
        _classPrivateFieldBase(this, _handlers)[_handlers][id] = {
          callback,
          method,
          params,
          start: Date.now(),
          subscription
        };
        _classPrivateFieldBase(this, _stats)[_stats].total.bytesSent += body.length;

        _classPrivateFieldBase(this, _websocket)[_websocket].send(body);
      } catch (error) {
        _classPrivateFieldBase(this, _stats)[_stats].total.errors++;
        reject(error);
      }
    });
  }

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  function __awaiter(thisArg, _arguments, P, generator) {
      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
      return new (P || (P = Promise))(function (resolve, reject) {
          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
          function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
  }

  function __generator(thisArg, body) {
      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
      function verb(n) { return function (v) { return step([n, v]); }; }
      function step(op) {
          if (f) throw new TypeError("Generator is already executing.");
          while (_) try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
              if (y = 0, t) op = [op[0] & 2, t.value];
              switch (op[0]) {
                  case 0: case 1: t = op; break;
                  case 4: _.label++; return { value: op[1], done: false };
                  case 5: _.label++; y = op[1]; op = [0]; continue;
                  case 7: op = _.ops.pop(); _.trys.pop(); continue;
                  default:
                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                      if (t[2]) _.ops.pop();
                      _.trys.pop(); continue;
              }
              op = body.call(thisArg, _);
          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
      }
  }

  function __values(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m) return m.call(o);
      if (o && typeof o.length === "number") return {
          next: function () {
              if (o && i >= o.length) o = void 0;
              return { value: o && o[i++], done: !o };
          }
      };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }

  function __read(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o), r, ar = [], e;
      try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      }
      catch (error) { e = { error: error }; }
      finally {
          try {
              if (r && !r.done && (m = i["return"])) m.call(i);
          }
          finally { if (e) throw e.error; }
      }
      return ar;
  }

  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  function __await(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
  }

  function __asyncGenerator(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
      function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
      function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
      function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
      function fulfill(value) { resume("next", value); }
      function reject(value) { resume("throw", value); }
      function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
  }

  function __asyncValues(o) {
      if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
      function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
      function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
  }

  function isFunction$1(value) {
      return typeof value === 'function';
  }

  function createErrorClass(createImpl) {
      var _super = function (instance) {
          Error.call(instance);
          instance.stack = new Error().stack;
      };
      var ctorFunc = createImpl(_super);
      ctorFunc.prototype = Object.create(Error.prototype);
      ctorFunc.prototype.constructor = ctorFunc;
      return ctorFunc;
  }

  var UnsubscriptionError = createErrorClass(function (_super) {
      return function UnsubscriptionErrorImpl(errors) {
          _super(this);
          this.message = errors
              ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
              : '';
          this.name = 'UnsubscriptionError';
          this.errors = errors;
      };
  });

  function arrRemove(arr, item) {
      if (arr) {
          var index = arr.indexOf(item);
          0 <= index && arr.splice(index, 1);
      }
  }

  var Subscription = (function () {
      function Subscription(initialTeardown) {
          this.initialTeardown = initialTeardown;
          this.closed = false;
          this._parentage = null;
          this._finalizers = null;
      }
      Subscription.prototype.unsubscribe = function () {
          var e_1, _a, e_2, _b;
          var errors;
          if (!this.closed) {
              this.closed = true;
              var _parentage = this._parentage;
              if (_parentage) {
                  this._parentage = null;
                  if (Array.isArray(_parentage)) {
                      try {
                          for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                              var parent_1 = _parentage_1_1.value;
                              parent_1.remove(this);
                          }
                      }
                      catch (e_1_1) { e_1 = { error: e_1_1 }; }
                      finally {
                          try {
                              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                          }
                          finally { if (e_1) throw e_1.error; }
                      }
                  }
                  else {
                      _parentage.remove(this);
                  }
              }
              var initialFinalizer = this.initialTeardown;
              if (isFunction$1(initialFinalizer)) {
                  try {
                      initialFinalizer();
                  }
                  catch (e) {
                      errors = e instanceof UnsubscriptionError ? e.errors : [e];
                  }
              }
              var _finalizers = this._finalizers;
              if (_finalizers) {
                  this._finalizers = null;
                  try {
                      for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                          var finalizer = _finalizers_1_1.value;
                          try {
                              execFinalizer(finalizer);
                          }
                          catch (err) {
                              errors = errors !== null && errors !== void 0 ? errors : [];
                              if (err instanceof UnsubscriptionError) {
                                  errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                              }
                              else {
                                  errors.push(err);
                              }
                          }
                      }
                  }
                  catch (e_2_1) { e_2 = { error: e_2_1 }; }
                  finally {
                      try {
                          if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                      }
                      finally { if (e_2) throw e_2.error; }
                  }
              }
              if (errors) {
                  throw new UnsubscriptionError(errors);
              }
          }
      };
      Subscription.prototype.add = function (teardown) {
          var _a;
          if (teardown && teardown !== this) {
              if (this.closed) {
                  execFinalizer(teardown);
              }
              else {
                  if (teardown instanceof Subscription) {
                      if (teardown.closed || teardown._hasParent(this)) {
                          return;
                      }
                      teardown._addParent(this);
                  }
                  (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
              }
          }
      };
      Subscription.prototype._hasParent = function (parent) {
          var _parentage = this._parentage;
          return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
      };
      Subscription.prototype._addParent = function (parent) {
          var _parentage = this._parentage;
          this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
      };
      Subscription.prototype._removeParent = function (parent) {
          var _parentage = this._parentage;
          if (_parentage === parent) {
              this._parentage = null;
          }
          else if (Array.isArray(_parentage)) {
              arrRemove(_parentage, parent);
          }
      };
      Subscription.prototype.remove = function (teardown) {
          var _finalizers = this._finalizers;
          _finalizers && arrRemove(_finalizers, teardown);
          if (teardown instanceof Subscription) {
              teardown._removeParent(this);
          }
      };
      Subscription.EMPTY = (function () {
          var empty = new Subscription();
          empty.closed = true;
          return empty;
      })();
      return Subscription;
  }());
  var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
  function isSubscription(value) {
      return (value instanceof Subscription ||
          (value && 'closed' in value && isFunction$1(value.remove) && isFunction$1(value.add) && isFunction$1(value.unsubscribe)));
  }
  function execFinalizer(finalizer) {
      if (isFunction$1(finalizer)) {
          finalizer();
      }
      else {
          finalizer.unsubscribe();
      }
  }

  var config$1 = {
      onUnhandledError: null,
      onStoppedNotification: null,
      Promise: undefined,
      useDeprecatedSynchronousErrorHandling: false,
      useDeprecatedNextContext: false,
  };

  var timeoutProvider = {
      setTimeout: function (handler, timeout) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
              args[_i - 2] = arguments[_i];
          }
          return setTimeout.apply(void 0, __spreadArray([handler, timeout], __read(args)));
      },
      clearTimeout: function (handle) {
          return (clearTimeout)(handle);
      },
      delegate: undefined,
  };

  function reportUnhandledError(err) {
      timeoutProvider.setTimeout(function () {
          {
              throw err;
          }
      });
  }

  function noop$2() { }

  function errorContext(cb) {
      {
          cb();
      }
  }

  var Subscriber = (function (_super) {
      __extends(Subscriber, _super);
      function Subscriber(destination) {
          var _this = _super.call(this) || this;
          _this.isStopped = false;
          if (destination) {
              _this.destination = destination;
              if (isSubscription(destination)) {
                  destination.add(_this);
              }
          }
          else {
              _this.destination = EMPTY_OBSERVER;
          }
          return _this;
      }
      Subscriber.create = function (next, error, complete) {
          return new SafeSubscriber(next, error, complete);
      };
      Subscriber.prototype.next = function (value) {
          if (this.isStopped) ;
          else {
              this._next(value);
          }
      };
      Subscriber.prototype.error = function (err) {
          if (this.isStopped) ;
          else {
              this.isStopped = true;
              this._error(err);
          }
      };
      Subscriber.prototype.complete = function () {
          if (this.isStopped) ;
          else {
              this.isStopped = true;
              this._complete();
          }
      };
      Subscriber.prototype.unsubscribe = function () {
          if (!this.closed) {
              this.isStopped = true;
              _super.prototype.unsubscribe.call(this);
              this.destination = null;
          }
      };
      Subscriber.prototype._next = function (value) {
          this.destination.next(value);
      };
      Subscriber.prototype._error = function (err) {
          try {
              this.destination.error(err);
          }
          finally {
              this.unsubscribe();
          }
      };
      Subscriber.prototype._complete = function () {
          try {
              this.destination.complete();
          }
          finally {
              this.unsubscribe();
          }
      };
      return Subscriber;
  }(Subscription));
  var _bind = Function.prototype.bind;
  function bind(fn, thisArg) {
      return _bind.call(fn, thisArg);
  }
  var ConsumerObserver = (function () {
      function ConsumerObserver(partialObserver) {
          this.partialObserver = partialObserver;
      }
      ConsumerObserver.prototype.next = function (value) {
          var partialObserver = this.partialObserver;
          if (partialObserver.next) {
              try {
                  partialObserver.next(value);
              }
              catch (error) {
                  handleUnhandledError(error);
              }
          }
      };
      ConsumerObserver.prototype.error = function (err) {
          var partialObserver = this.partialObserver;
          if (partialObserver.error) {
              try {
                  partialObserver.error(err);
              }
              catch (error) {
                  handleUnhandledError(error);
              }
          }
          else {
              handleUnhandledError(err);
          }
      };
      ConsumerObserver.prototype.complete = function () {
          var partialObserver = this.partialObserver;
          if (partialObserver.complete) {
              try {
                  partialObserver.complete();
              }
              catch (error) {
                  handleUnhandledError(error);
              }
          }
      };
      return ConsumerObserver;
  }());
  var SafeSubscriber = (function (_super) {
      __extends(SafeSubscriber, _super);
      function SafeSubscriber(observerOrNext, error, complete) {
          var _this = _super.call(this) || this;
          var partialObserver;
          if (isFunction$1(observerOrNext) || !observerOrNext) {
              partialObserver = {
                  next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined,
                  error: error !== null && error !== void 0 ? error : undefined,
                  complete: complete !== null && complete !== void 0 ? complete : undefined,
              };
          }
          else {
              var context_1;
              if (_this && config$1.useDeprecatedNextContext) {
                  context_1 = Object.create(observerOrNext);
                  context_1.unsubscribe = function () { return _this.unsubscribe(); };
                  partialObserver = {
                      next: observerOrNext.next && bind(observerOrNext.next, context_1),
                      error: observerOrNext.error && bind(observerOrNext.error, context_1),
                      complete: observerOrNext.complete && bind(observerOrNext.complete, context_1),
                  };
              }
              else {
                  partialObserver = observerOrNext;
              }
          }
          _this.destination = new ConsumerObserver(partialObserver);
          return _this;
      }
      return SafeSubscriber;
  }(Subscriber));
  function handleUnhandledError(error) {
      {
          reportUnhandledError(error);
      }
  }
  function defaultErrorHandler(err) {
      throw err;
  }
  var EMPTY_OBSERVER = {
      closed: true,
      next: noop$2,
      error: defaultErrorHandler,
      complete: noop$2,
  };

  var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

  function identity$2(x) {
      return x;
  }

  function pipeFromArray(fns) {
      if (fns.length === 0) {
          return identity$2;
      }
      if (fns.length === 1) {
          return fns[0];
      }
      return function piped(input) {
          return fns.reduce(function (prev, fn) { return fn(prev); }, input);
      };
  }

  var Observable = (function () {
      function Observable(subscribe) {
          if (subscribe) {
              this._subscribe = subscribe;
          }
      }
      Observable.prototype.lift = function (operator) {
          var observable = new Observable();
          observable.source = this;
          observable.operator = operator;
          return observable;
      };
      Observable.prototype.subscribe = function (observerOrNext, error, complete) {
          var _this = this;
          var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
          errorContext(function () {
              var _a = _this, operator = _a.operator, source = _a.source;
              subscriber.add(operator
                  ?
                      operator.call(subscriber, source)
                  : source
                      ?
                          _this._subscribe(subscriber)
                      :
                          _this._trySubscribe(subscriber));
          });
          return subscriber;
      };
      Observable.prototype._trySubscribe = function (sink) {
          try {
              return this._subscribe(sink);
          }
          catch (err) {
              sink.error(err);
          }
      };
      Observable.prototype.forEach = function (next, promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var subscriber = new SafeSubscriber({
                  next: function (value) {
                      try {
                          next(value);
                      }
                      catch (err) {
                          reject(err);
                          subscriber.unsubscribe();
                      }
                  },
                  error: reject,
                  complete: resolve,
              });
              _this.subscribe(subscriber);
          });
      };
      Observable.prototype._subscribe = function (subscriber) {
          var _a;
          return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
      };
      Observable.prototype[observable] = function () {
          return this;
      };
      Observable.prototype.pipe = function () {
          var operations = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              operations[_i] = arguments[_i];
          }
          return pipeFromArray(operations)(this);
      };
      Observable.prototype.toPromise = function (promiseCtor) {
          var _this = this;
          promiseCtor = getPromiseCtor(promiseCtor);
          return new promiseCtor(function (resolve, reject) {
              var value;
              _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
          });
      };
      Observable.create = function (subscribe) {
          return new Observable(subscribe);
      };
      return Observable;
  }());
  function getPromiseCtor(promiseCtor) {
      var _a;
      return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config$1.Promise) !== null && _a !== void 0 ? _a : Promise;
  }
  function isObserver(value) {
      return value && isFunction$1(value.next) && isFunction$1(value.error) && isFunction$1(value.complete);
  }
  function isSubscriber(value) {
      return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
  }

  function hasLift(source) {
      return isFunction$1(source === null || source === void 0 ? void 0 : source.lift);
  }
  function operate(init) {
      return function (source) {
          if (hasLift(source)) {
              return source.lift(function (liftedSource) {
                  try {
                      return init(liftedSource, this);
                  }
                  catch (err) {
                      this.error(err);
                  }
              });
          }
          throw new TypeError('Unable to lift unknown Observable type');
      };
  }

  function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
      return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
  }
  var OperatorSubscriber = (function (_super) {
      __extends(OperatorSubscriber, _super);
      function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
          var _this = _super.call(this, destination) || this;
          _this.onFinalize = onFinalize;
          _this.shouldUnsubscribe = shouldUnsubscribe;
          _this._next = onNext
              ? function (value) {
                  try {
                      onNext(value);
                  }
                  catch (err) {
                      destination.error(err);
                  }
              }
              : _super.prototype._next;
          _this._error = onError
              ? function (err) {
                  try {
                      onError(err);
                  }
                  catch (err) {
                      destination.error(err);
                  }
                  finally {
                      this.unsubscribe();
                  }
              }
              : _super.prototype._error;
          _this._complete = onComplete
              ? function () {
                  try {
                      onComplete();
                  }
                  catch (err) {
                      destination.error(err);
                  }
                  finally {
                      this.unsubscribe();
                  }
              }
              : _super.prototype._complete;
          return _this;
      }
      OperatorSubscriber.prototype.unsubscribe = function () {
          var _a;
          if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
              var closed_1 = this.closed;
              _super.prototype.unsubscribe.call(this);
              !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
          }
      };
      return OperatorSubscriber;
  }(Subscriber));

  function refCount() {
      return operate(function (source, subscriber) {
          var connection = null;
          source._refCount++;
          var refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
              if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                  connection = null;
                  return;
              }
              var sharedConnection = source._connection;
              var conn = connection;
              connection = null;
              if (sharedConnection && (!conn || sharedConnection === conn)) {
                  sharedConnection.unsubscribe();
              }
              subscriber.unsubscribe();
          });
          source.subscribe(refCounter);
          if (!refCounter.closed) {
              connection = source.connect();
          }
      });
  }

  var ConnectableObservable = (function (_super) {
      __extends(ConnectableObservable, _super);
      function ConnectableObservable(source, subjectFactory) {
          var _this = _super.call(this) || this;
          _this.source = source;
          _this.subjectFactory = subjectFactory;
          _this._subject = null;
          _this._refCount = 0;
          _this._connection = null;
          if (hasLift(source)) {
              _this.lift = source.lift;
          }
          return _this;
      }
      ConnectableObservable.prototype._subscribe = function (subscriber) {
          return this.getSubject().subscribe(subscriber);
      };
      ConnectableObservable.prototype.getSubject = function () {
          var subject = this._subject;
          if (!subject || subject.isStopped) {
              this._subject = this.subjectFactory();
          }
          return this._subject;
      };
      ConnectableObservable.prototype._teardown = function () {
          this._refCount = 0;
          var _connection = this._connection;
          this._subject = this._connection = null;
          _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
      };
      ConnectableObservable.prototype.connect = function () {
          var _this = this;
          var connection = this._connection;
          if (!connection) {
              connection = this._connection = new Subscription();
              var subject_1 = this.getSubject();
              connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {
                  _this._teardown();
                  subject_1.complete();
              }, function (err) {
                  _this._teardown();
                  subject_1.error(err);
              }, function () { return _this._teardown(); })));
              if (connection.closed) {
                  this._connection = null;
                  connection = Subscription.EMPTY;
              }
          }
          return connection;
      };
      ConnectableObservable.prototype.refCount = function () {
          return refCount()(this);
      };
      return ConnectableObservable;
  }(Observable));

  var performanceTimestampProvider = {
      now: function () {
          return (performanceTimestampProvider.delegate || performance).now();
      },
      delegate: undefined,
  };

  var animationFrameProvider = {
      schedule: function (callback) {
          var request = requestAnimationFrame;
          var cancel = cancelAnimationFrame;
          var handle = request(function (timestamp) {
              cancel = undefined;
              callback(timestamp);
          });
          return new Subscription(function () { return cancel === null || cancel === void 0 ? void 0 : cancel(handle); });
      },
      requestAnimationFrame: function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          var delegate = animationFrameProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      cancelAnimationFrame: function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          return (cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
      },
      delegate: undefined,
  };

  function animationFramesFactory(timestampProvider) {
      var schedule = animationFrameProvider.schedule;
      return new Observable(function (subscriber) {
          var subscription = new Subscription();
          var provider = timestampProvider || performanceTimestampProvider;
          var start = provider.now();
          var run = function (timestamp) {
              var now = provider.now();
              subscriber.next({
                  timestamp: timestampProvider ? now : timestamp,
                  elapsed: now - start,
              });
              if (!subscriber.closed) {
                  subscription.add(schedule(run));
              }
          };
          subscription.add(schedule(run));
          return subscription;
      });
  }
  animationFramesFactory();

  var ObjectUnsubscribedError = createErrorClass(function (_super) {
      return function ObjectUnsubscribedErrorImpl() {
          _super(this);
          this.name = 'ObjectUnsubscribedError';
          this.message = 'object unsubscribed';
      };
  });

  var Subject = (function (_super) {
      __extends(Subject, _super);
      function Subject() {
          var _this = _super.call(this) || this;
          _this.closed = false;
          _this.currentObservers = null;
          _this.observers = [];
          _this.isStopped = false;
          _this.hasError = false;
          _this.thrownError = null;
          return _this;
      }
      Subject.prototype.lift = function (operator) {
          var subject = new AnonymousSubject(this, this);
          subject.operator = operator;
          return subject;
      };
      Subject.prototype._throwIfClosed = function () {
          if (this.closed) {
              throw new ObjectUnsubscribedError();
          }
      };
      Subject.prototype.next = function (value) {
          var _this = this;
          errorContext(function () {
              var e_1, _a;
              _this._throwIfClosed();
              if (!_this.isStopped) {
                  if (!_this.currentObservers) {
                      _this.currentObservers = Array.from(_this.observers);
                  }
                  try {
                      for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                          var observer = _c.value;
                          observer.next(value);
                      }
                  }
                  catch (e_1_1) { e_1 = { error: e_1_1 }; }
                  finally {
                      try {
                          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                      }
                      finally { if (e_1) throw e_1.error; }
                  }
              }
          });
      };
      Subject.prototype.error = function (err) {
          var _this = this;
          errorContext(function () {
              _this._throwIfClosed();
              if (!_this.isStopped) {
                  _this.hasError = _this.isStopped = true;
                  _this.thrownError = err;
                  var observers = _this.observers;
                  while (observers.length) {
                      observers.shift().error(err);
                  }
              }
          });
      };
      Subject.prototype.complete = function () {
          var _this = this;
          errorContext(function () {
              _this._throwIfClosed();
              if (!_this.isStopped) {
                  _this.isStopped = true;
                  var observers = _this.observers;
                  while (observers.length) {
                      observers.shift().complete();
                  }
              }
          });
      };
      Subject.prototype.unsubscribe = function () {
          this.isStopped = this.closed = true;
          this.observers = this.currentObservers = null;
      };
      Object.defineProperty(Subject.prototype, "observed", {
          get: function () {
              var _a;
              return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
          },
          enumerable: false,
          configurable: true
      });
      Subject.prototype._trySubscribe = function (subscriber) {
          this._throwIfClosed();
          return _super.prototype._trySubscribe.call(this, subscriber);
      };
      Subject.prototype._subscribe = function (subscriber) {
          this._throwIfClosed();
          this._checkFinalizedStatuses(subscriber);
          return this._innerSubscribe(subscriber);
      };
      Subject.prototype._innerSubscribe = function (subscriber) {
          var _this = this;
          var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
          if (hasError || isStopped) {
              return EMPTY_SUBSCRIPTION;
          }
          this.currentObservers = null;
          observers.push(subscriber);
          return new Subscription(function () {
              _this.currentObservers = null;
              arrRemove(observers, subscriber);
          });
      };
      Subject.prototype._checkFinalizedStatuses = function (subscriber) {
          var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
          if (hasError) {
              subscriber.error(thrownError);
          }
          else if (isStopped) {
              subscriber.complete();
          }
      };
      Subject.prototype.asObservable = function () {
          var observable = new Observable();
          observable.source = this;
          return observable;
      };
      Subject.create = function (destination, source) {
          return new AnonymousSubject(destination, source);
      };
      return Subject;
  }(Observable));
  var AnonymousSubject = (function (_super) {
      __extends(AnonymousSubject, _super);
      function AnonymousSubject(destination, source) {
          var _this = _super.call(this) || this;
          _this.destination = destination;
          _this.source = source;
          return _this;
      }
      AnonymousSubject.prototype.next = function (value) {
          var _a, _b;
          (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
      };
      AnonymousSubject.prototype.error = function (err) {
          var _a, _b;
          (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
      };
      AnonymousSubject.prototype.complete = function () {
          var _a, _b;
          (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
      };
      AnonymousSubject.prototype._subscribe = function (subscriber) {
          var _a, _b;
          return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
      };
      return AnonymousSubject;
  }(Subject));

  var BehaviorSubject = (function (_super) {
      __extends(BehaviorSubject, _super);
      function BehaviorSubject(_value) {
          var _this = _super.call(this) || this;
          _this._value = _value;
          return _this;
      }
      Object.defineProperty(BehaviorSubject.prototype, "value", {
          get: function () {
              return this.getValue();
          },
          enumerable: false,
          configurable: true
      });
      BehaviorSubject.prototype._subscribe = function (subscriber) {
          var subscription = _super.prototype._subscribe.call(this, subscriber);
          !subscription.closed && subscriber.next(this._value);
          return subscription;
      };
      BehaviorSubject.prototype.getValue = function () {
          var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
          if (hasError) {
              throw thrownError;
          }
          this._throwIfClosed();
          return _value;
      };
      BehaviorSubject.prototype.next = function (value) {
          _super.prototype.next.call(this, (this._value = value));
      };
      return BehaviorSubject;
  }(Subject));

  var dateTimestampProvider = {
      now: function () {
          return (dateTimestampProvider.delegate || Date).now();
      },
      delegate: undefined,
  };

  var ReplaySubject = (function (_super) {
      __extends(ReplaySubject, _super);
      function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
          if (_bufferSize === void 0) { _bufferSize = Infinity; }
          if (_windowTime === void 0) { _windowTime = Infinity; }
          if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
          var _this = _super.call(this) || this;
          _this._bufferSize = _bufferSize;
          _this._windowTime = _windowTime;
          _this._timestampProvider = _timestampProvider;
          _this._buffer = [];
          _this._infiniteTimeWindow = true;
          _this._infiniteTimeWindow = _windowTime === Infinity;
          _this._bufferSize = Math.max(1, _bufferSize);
          _this._windowTime = Math.max(1, _windowTime);
          return _this;
      }
      ReplaySubject.prototype.next = function (value) {
          var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
          if (!isStopped) {
              _buffer.push(value);
              !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
          }
          this._trimBuffer();
          _super.prototype.next.call(this, value);
      };
      ReplaySubject.prototype._subscribe = function (subscriber) {
          this._throwIfClosed();
          this._trimBuffer();
          var subscription = this._innerSubscribe(subscriber);
          var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
          var copy = _buffer.slice();
          for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
              subscriber.next(copy[i]);
          }
          this._checkFinalizedStatuses(subscriber);
          return subscription;
      };
      ReplaySubject.prototype._trimBuffer = function () {
          var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
          var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
          _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
          if (!_infiniteTimeWindow) {
              var now = _timestampProvider.now();
              var last = 0;
              for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                  last = i;
              }
              last && _buffer.splice(0, last + 1);
          }
      };
      return ReplaySubject;
  }(Subject));

  ((function (_super) {
      __extends(AsyncSubject, _super);
      function AsyncSubject() {
          var _this = _super !== null && _super.apply(this, arguments) || this;
          _this._value = null;
          _this._hasValue = false;
          _this._isComplete = false;
          return _this;
      }
      AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {
          var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
          if (hasError) {
              subscriber.error(thrownError);
          }
          else if (isStopped || _isComplete) {
              _hasValue && subscriber.next(_value);
              subscriber.complete();
          }
      };
      AsyncSubject.prototype.next = function (value) {
          if (!this.isStopped) {
              this._value = value;
              this._hasValue = true;
          }
      };
      AsyncSubject.prototype.complete = function () {
          var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
          if (!_isComplete) {
              this._isComplete = true;
              _hasValue && _super.prototype.next.call(this, _value);
              _super.prototype.complete.call(this);
          }
      };
      return AsyncSubject;
  })(Subject));

  var Action = (function (_super) {
      __extends(Action, _super);
      function Action(scheduler, work) {
          return _super.call(this) || this;
      }
      Action.prototype.schedule = function (state, delay) {
          return this;
      };
      return Action;
  }(Subscription));

  var intervalProvider = {
      setInterval: function (handler, timeout) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
              args[_i - 2] = arguments[_i];
          }
          return setInterval.apply(void 0, __spreadArray([handler, timeout], __read(args)));
      },
      clearInterval: function (handle) {
          return (clearInterval)(handle);
      },
      delegate: undefined,
  };

  var AsyncAction = (function (_super) {
      __extends(AsyncAction, _super);
      function AsyncAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.pending = false;
          return _this;
      }
      AsyncAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) { delay = 0; }
          if (this.closed) {
              return this;
          }
          this.state = state;
          var id = this.id;
          var scheduler = this.scheduler;
          if (id != null) {
              this.id = this.recycleAsyncId(scheduler, id, delay);
          }
          this.pending = true;
          this.delay = delay;
          this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
          return this;
      };
      AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
          if (delay === void 0) { delay = 0; }
          return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
      };
      AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if (delay != null && this.delay === delay && this.pending === false) {
              return id;
          }
          intervalProvider.clearInterval(id);
          return undefined;
      };
      AsyncAction.prototype.execute = function (state, delay) {
          if (this.closed) {
              return new Error('executing a cancelled action');
          }
          this.pending = false;
          var error = this._execute(state, delay);
          if (error) {
              return error;
          }
          else if (this.pending === false && this.id != null) {
              this.id = this.recycleAsyncId(this.scheduler, this.id, null);
          }
      };
      AsyncAction.prototype._execute = function (state, _delay) {
          var errored = false;
          var errorValue;
          try {
              this.work(state);
          }
          catch (e) {
              errored = true;
              errorValue = e ? e : new Error('Scheduled action threw falsy error');
          }
          if (errored) {
              this.unsubscribe();
              return errorValue;
          }
      };
      AsyncAction.prototype.unsubscribe = function () {
          if (!this.closed) {
              var _a = this, id = _a.id, scheduler = _a.scheduler;
              var actions = scheduler.actions;
              this.work = this.state = this.scheduler = null;
              this.pending = false;
              arrRemove(actions, this);
              if (id != null) {
                  this.id = this.recycleAsyncId(scheduler, id, null);
              }
              this.delay = null;
              _super.prototype.unsubscribe.call(this);
          }
      };
      return AsyncAction;
  }(Action));

  var nextHandle = 1;
  var resolved;
  var activeHandles = {};
  function findAndClearHandle(handle) {
      if (handle in activeHandles) {
          delete activeHandles[handle];
          return true;
      }
      return false;
  }
  var Immediate = {
      setImmediate: function (cb) {
          var handle = nextHandle++;
          activeHandles[handle] = true;
          if (!resolved) {
              resolved = Promise.resolve();
          }
          resolved.then(function () { return findAndClearHandle(handle) && cb(); });
          return handle;
      },
      clearImmediate: function (handle) {
          findAndClearHandle(handle);
      },
  };

  var setImmediate = Immediate.setImmediate, clearImmediate = Immediate.clearImmediate;
  var immediateProvider = {
      setImmediate: function () {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
          }
          var delegate = immediateProvider.delegate;
          return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
      },
      clearImmediate: function (handle) {
          return (clearImmediate)(handle);
      },
      delegate: undefined,
  };

  var AsapAction = (function (_super) {
      __extends(AsapAction, _super);
      function AsapAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if (delay !== null && delay > 0) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          scheduler.actions.push(this);
          return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
      };
      AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
              return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
          }
          if (!scheduler.actions.some(function (action) { return action.id === id; })) {
              immediateProvider.clearImmediate(id);
              scheduler._scheduled = undefined;
          }
          return undefined;
      };
      return AsapAction;
  }(AsyncAction));

  var Scheduler = (function () {
      function Scheduler(schedulerActionCtor, now) {
          if (now === void 0) { now = Scheduler.now; }
          this.schedulerActionCtor = schedulerActionCtor;
          this.now = now;
      }
      Scheduler.prototype.schedule = function (work, delay, state) {
          if (delay === void 0) { delay = 0; }
          return new this.schedulerActionCtor(this, work).schedule(state, delay);
      };
      Scheduler.now = dateTimestampProvider.now;
      return Scheduler;
  }());

  var AsyncScheduler = (function (_super) {
      __extends(AsyncScheduler, _super);
      function AsyncScheduler(SchedulerAction, now) {
          if (now === void 0) { now = Scheduler.now; }
          var _this = _super.call(this, SchedulerAction, now) || this;
          _this.actions = [];
          _this._active = false;
          _this._scheduled = undefined;
          return _this;
      }
      AsyncScheduler.prototype.flush = function (action) {
          var actions = this.actions;
          if (this._active) {
              actions.push(action);
              return;
          }
          var error;
          this._active = true;
          do {
              if ((error = action.execute(action.state, action.delay))) {
                  break;
              }
          } while ((action = actions.shift()));
          this._active = false;
          if (error) {
              while ((action = actions.shift())) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AsyncScheduler;
  }(Scheduler));

  var AsapScheduler = (function (_super) {
      __extends(AsapScheduler, _super);
      function AsapScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      AsapScheduler.prototype.flush = function (action) {
          this._active = true;
          var flushId = this._scheduled;
          this._scheduled = undefined;
          var actions = this.actions;
          var error;
          action = action || actions.shift();
          do {
              if ((error = action.execute(action.state, action.delay))) {
                  break;
              }
          } while ((action = actions[0]) && action.id === flushId && actions.shift());
          this._active = false;
          if (error) {
              while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AsapScheduler;
  }(AsyncScheduler));

  var asapScheduler = new AsapScheduler(AsapAction);

  new AsyncScheduler(AsyncAction);

  var QueueAction = (function (_super) {
      __extends(QueueAction, _super);
      function QueueAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      QueueAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) { delay = 0; }
          if (delay > 0) {
              return _super.prototype.schedule.call(this, state, delay);
          }
          this.delay = delay;
          this.state = state;
          this.scheduler.flush(this);
          return this;
      };
      QueueAction.prototype.execute = function (state, delay) {
          return (delay > 0 || this.closed) ?
              _super.prototype.execute.call(this, state, delay) :
              this._execute(state, delay);
      };
      QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          return scheduler.flush(this);
      };
      return QueueAction;
  }(AsyncAction));

  var QueueScheduler = (function (_super) {
      __extends(QueueScheduler, _super);
      function QueueScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      return QueueScheduler;
  }(AsyncScheduler));

  new QueueScheduler(QueueAction);

  var AnimationFrameAction = (function (_super) {
      __extends(AnimationFrameAction, _super);
      function AnimationFrameAction(scheduler, work) {
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          return _this;
      }
      AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if (delay !== null && delay > 0) {
              return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
          }
          scheduler.actions.push(this);
          return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function () { return scheduler.flush(undefined); }));
      };
      AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
              return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
          }
          if (!scheduler.actions.some(function (action) { return action.id === id; })) {
              animationFrameProvider.cancelAnimationFrame(id);
              scheduler._scheduled = undefined;
          }
          return undefined;
      };
      return AnimationFrameAction;
  }(AsyncAction));

  var AnimationFrameScheduler = (function (_super) {
      __extends(AnimationFrameScheduler, _super);
      function AnimationFrameScheduler() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      AnimationFrameScheduler.prototype.flush = function (action) {
          this._active = true;
          var flushId = this._scheduled;
          this._scheduled = undefined;
          var actions = this.actions;
          var error;
          action = action || actions.shift();
          do {
              if ((error = action.execute(action.state, action.delay))) {
                  break;
              }
          } while ((action = actions[0]) && action.id === flushId && actions.shift());
          this._active = false;
          if (error) {
              while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      return AnimationFrameScheduler;
  }(AsyncScheduler));

  new AnimationFrameScheduler(AnimationFrameAction);

  ((function (_super) {
      __extends(VirtualTimeScheduler, _super);
      function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {
          if (schedulerActionCtor === void 0) { schedulerActionCtor = VirtualAction; }
          if (maxFrames === void 0) { maxFrames = Infinity; }
          var _this = _super.call(this, schedulerActionCtor, function () { return _this.frame; }) || this;
          _this.maxFrames = maxFrames;
          _this.frame = 0;
          _this.index = -1;
          return _this;
      }
      VirtualTimeScheduler.prototype.flush = function () {
          var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
          var error;
          var action;
          while ((action = actions[0]) && action.delay <= maxFrames) {
              actions.shift();
              this.frame = action.delay;
              if ((error = action.execute(action.state, action.delay))) {
                  break;
              }
          }
          if (error) {
              while ((action = actions.shift())) {
                  action.unsubscribe();
              }
              throw error;
          }
      };
      VirtualTimeScheduler.frameTimeFactor = 10;
      return VirtualTimeScheduler;
  })(AsyncScheduler));
  var VirtualAction = (function (_super) {
      __extends(VirtualAction, _super);
      function VirtualAction(scheduler, work, index) {
          if (index === void 0) { index = (scheduler.index += 1); }
          var _this = _super.call(this, scheduler, work) || this;
          _this.scheduler = scheduler;
          _this.work = work;
          _this.index = index;
          _this.active = true;
          _this.index = scheduler.index = index;
          return _this;
      }
      VirtualAction.prototype.schedule = function (state, delay) {
          if (delay === void 0) { delay = 0; }
          if (Number.isFinite(delay)) {
              if (!this.id) {
                  return _super.prototype.schedule.call(this, state, delay);
              }
              this.active = false;
              var action = new VirtualAction(this.scheduler, this.work);
              this.add(action);
              return action.schedule(state, delay);
          }
          else {
              return Subscription.EMPTY;
          }
      };
      VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
          if (delay === void 0) { delay = 0; }
          this.delay = scheduler.frame + delay;
          var actions = scheduler.actions;
          actions.push(this);
          actions.sort(VirtualAction.sortActions);
          return true;
      };
      VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
          return undefined;
      };
      VirtualAction.prototype._execute = function (state, delay) {
          if (this.active === true) {
              return _super.prototype._execute.call(this, state, delay);
          }
      };
      VirtualAction.sortActions = function (a, b) {
          if (a.delay === b.delay) {
              if (a.index === b.index) {
                  return 0;
              }
              else if (a.index > b.index) {
                  return 1;
              }
              else {
                  return -1;
              }
          }
          else if (a.delay > b.delay) {
              return 1;
          }
          else {
              return -1;
          }
      };
      return VirtualAction;
  }(AsyncAction));

  var EMPTY = new Observable(function (subscriber) { return subscriber.complete(); });

  function isScheduler(value) {
      return value && isFunction$1(value.schedule);
  }

  function last(arr) {
      return arr[arr.length - 1];
  }
  function popResultSelector(args) {
      return isFunction$1(last(args)) ? args.pop() : undefined;
  }
  function popScheduler(args) {
      return isScheduler(last(args)) ? args.pop() : undefined;
  }

  var isArrayLike$1 = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

  function isPromise(value) {
      return isFunction$1(value === null || value === void 0 ? void 0 : value.then);
  }

  function isInteropObservable(input) {
      return isFunction$1(input[observable]);
  }

  function isAsyncIterable(obj) {
      return Symbol.asyncIterator && isFunction$1(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
  }

  function createInvalidObservableTypeError(input) {
      return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
  }

  function getSymbolIterator() {
      if (typeof Symbol !== 'function' || !Symbol.iterator) {
          return '@@iterator';
      }
      return Symbol.iterator;
  }
  var iterator = getSymbolIterator();

  function isIterable(input) {
      return isFunction$1(input === null || input === void 0 ? void 0 : input[iterator]);
  }

  function readableStreamLikeToAsyncGenerator(readableStream) {
      return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
          var reader, _a, value, done;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      reader = readableStream.getReader();
                      _b.label = 1;
                  case 1:
                      _b.trys.push([1, , 9, 10]);
                      _b.label = 2;
                  case 2:
                      return [4, __await(reader.read())];
                  case 3:
                      _a = _b.sent(), value = _a.value, done = _a.done;
                      if (!done) return [3, 5];
                      return [4, __await(void 0)];
                  case 4: return [2, _b.sent()];
                  case 5: return [4, __await(value)];
                  case 6: return [4, _b.sent()];
                  case 7:
                      _b.sent();
                      return [3, 2];
                  case 8: return [3, 10];
                  case 9:
                      reader.releaseLock();
                      return [7];
                  case 10: return [2];
              }
          });
      });
  }
  function isReadableStreamLike(obj) {
      return isFunction$1(obj === null || obj === void 0 ? void 0 : obj.getReader);
  }

  function innerFrom(input) {
      if (input instanceof Observable) {
          return input;
      }
      if (input != null) {
          if (isInteropObservable(input)) {
              return fromInteropObservable(input);
          }
          if (isArrayLike$1(input)) {
              return fromArrayLike(input);
          }
          if (isPromise(input)) {
              return fromPromise(input);
          }
          if (isAsyncIterable(input)) {
              return fromAsyncIterable(input);
          }
          if (isIterable(input)) {
              return fromIterable(input);
          }
          if (isReadableStreamLike(input)) {
              return fromReadableStreamLike(input);
          }
      }
      throw createInvalidObservableTypeError(input);
  }
  function fromInteropObservable(obj) {
      return new Observable(function (subscriber) {
          var obs = obj[observable]();
          if (isFunction$1(obs.subscribe)) {
              return obs.subscribe(subscriber);
          }
          throw new TypeError('Provided object does not correctly implement Symbol.observable');
      });
  }
  function fromArrayLike(array) {
      return new Observable(function (subscriber) {
          for (var i = 0; i < array.length && !subscriber.closed; i++) {
              subscriber.next(array[i]);
          }
          subscriber.complete();
      });
  }
  function fromPromise(promise) {
      return new Observable(function (subscriber) {
          promise
              .then(function (value) {
              if (!subscriber.closed) {
                  subscriber.next(value);
                  subscriber.complete();
              }
          }, function (err) { return subscriber.error(err); })
              .then(null, reportUnhandledError);
      });
  }
  function fromIterable(iterable) {
      return new Observable(function (subscriber) {
          var e_1, _a;
          try {
              for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                  var value = iterable_1_1.value;
                  subscriber.next(value);
                  if (subscriber.closed) {
                      return;
                  }
              }
          }
          catch (e_1_1) { e_1 = { error: e_1_1 }; }
          finally {
              try {
                  if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
              }
              finally { if (e_1) throw e_1.error; }
          }
          subscriber.complete();
      });
  }
  function fromAsyncIterable(asyncIterable) {
      return new Observable(function (subscriber) {
          process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
      });
  }
  function fromReadableStreamLike(readableStream) {
      return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
  }
  function process(asyncIterable, subscriber) {
      var asyncIterable_1, asyncIterable_1_1;
      var e_2, _a;
      return __awaiter(this, void 0, void 0, function () {
          var value, e_2_1;
          return __generator(this, function (_b) {
              switch (_b.label) {
                  case 0:
                      _b.trys.push([0, 5, 6, 11]);
                      asyncIterable_1 = __asyncValues(asyncIterable);
                      _b.label = 1;
                  case 1: return [4, asyncIterable_1.next()];
                  case 2:
                      if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                      value = asyncIterable_1_1.value;
                      subscriber.next(value);
                      if (subscriber.closed) {
                          return [2];
                      }
                      _b.label = 3;
                  case 3: return [3, 1];
                  case 4: return [3, 11];
                  case 5:
                      e_2_1 = _b.sent();
                      e_2 = { error: e_2_1 };
                      return [3, 11];
                  case 6:
                      _b.trys.push([6, , 9, 10]);
                      if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                      return [4, _a.call(asyncIterable_1)];
                  case 7:
                      _b.sent();
                      _b.label = 8;
                  case 8: return [3, 10];
                  case 9:
                      if (e_2) throw e_2.error;
                      return [7];
                  case 10: return [7];
                  case 11:
                      subscriber.complete();
                      return [2];
              }
          });
      });
  }

  function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
      if (delay === void 0) { delay = 0; }
      if (repeat === void 0) { repeat = false; }
      var scheduleSubscription = scheduler.schedule(function () {
          work();
          if (repeat) {
              parentSubscription.add(this.schedule(null, delay));
          }
          else {
              this.unsubscribe();
          }
      }, delay);
      parentSubscription.add(scheduleSubscription);
      if (!repeat) {
          return scheduleSubscription;
      }
  }

  function observeOn(scheduler, delay) {
      if (delay === void 0) { delay = 0; }
      return operate(function (source, subscriber) {
          source.subscribe(createOperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
      });
  }

  function subscribeOn(scheduler, delay) {
      if (delay === void 0) { delay = 0; }
      return operate(function (source, subscriber) {
          subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
      });
  }

  function scheduleObservable(input, scheduler) {
      return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }

  function schedulePromise(input, scheduler) {
      return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
  }

  function scheduleArray(input, scheduler) {
      return new Observable(function (subscriber) {
          var i = 0;
          return scheduler.schedule(function () {
              if (i === input.length) {
                  subscriber.complete();
              }
              else {
                  subscriber.next(input[i++]);
                  if (!subscriber.closed) {
                      this.schedule();
                  }
              }
          });
      });
  }

  function scheduleIterable(input, scheduler) {
      return new Observable(function (subscriber) {
          var iterator$1;
          executeSchedule(subscriber, scheduler, function () {
              iterator$1 = input[iterator]();
              executeSchedule(subscriber, scheduler, function () {
                  var _a;
                  var value;
                  var done;
                  try {
                      (_a = iterator$1.next(), value = _a.value, done = _a.done);
                  }
                  catch (err) {
                      subscriber.error(err);
                      return;
                  }
                  if (done) {
                      subscriber.complete();
                  }
                  else {
                      subscriber.next(value);
                  }
              }, 0, true);
          });
          return function () { return isFunction$1(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return(); };
      });
  }

  function scheduleAsyncIterable(input, scheduler) {
      if (!input) {
          throw new Error('Iterable cannot be null');
      }
      return new Observable(function (subscriber) {
          executeSchedule(subscriber, scheduler, function () {
              var iterator = input[Symbol.asyncIterator]();
              executeSchedule(subscriber, scheduler, function () {
                  iterator.next().then(function (result) {
                      if (result.done) {
                          subscriber.complete();
                      }
                      else {
                          subscriber.next(result.value);
                      }
                  });
              }, 0, true);
          });
      });
  }

  function scheduleReadableStreamLike(input, scheduler) {
      return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
  }

  function scheduled(input, scheduler) {
      if (input != null) {
          if (isInteropObservable(input)) {
              return scheduleObservable(input, scheduler);
          }
          if (isArrayLike$1(input)) {
              return scheduleArray(input, scheduler);
          }
          if (isPromise(input)) {
              return schedulePromise(input, scheduler);
          }
          if (isAsyncIterable(input)) {
              return scheduleAsyncIterable(input, scheduler);
          }
          if (isIterable(input)) {
              return scheduleIterable(input, scheduler);
          }
          if (isReadableStreamLike(input)) {
              return scheduleReadableStreamLike(input, scheduler);
          }
      }
      throw createInvalidObservableTypeError(input);
  }

  function from(input, scheduler) {
      return scheduler ? scheduled(input, scheduler) : innerFrom(input);
  }

  function of() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      var scheduler = popScheduler(args);
      return from(args, scheduler);
  }

  var NotificationKind;
  (function (NotificationKind) {
      NotificationKind["NEXT"] = "N";
      NotificationKind["ERROR"] = "E";
      NotificationKind["COMPLETE"] = "C";
  })(NotificationKind || (NotificationKind = {}));

  var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {
      _super(this);
      this.name = 'EmptyError';
      this.message = 'no elements in sequence';
  }; });

  function firstValueFrom(source, config) {
      var hasConfig = typeof config === 'object';
      return new Promise(function (resolve, reject) {
          var subscriber = new SafeSubscriber({
              next: function (value) {
                  resolve(value);
                  subscriber.unsubscribe();
              },
              error: reject,
              complete: function () {
                  if (hasConfig) {
                      resolve(config.defaultValue);
                  }
                  else {
                      reject(new EmptyError());
                  }
              },
          });
          source.subscribe(subscriber);
      });
  }

  createErrorClass(function (_super) {
      return function ArgumentOutOfRangeErrorImpl() {
          _super(this);
          this.name = 'ArgumentOutOfRangeError';
          this.message = 'argument out of range';
      };
  });

  createErrorClass(function (_super) {
      return function NotFoundErrorImpl(message) {
          _super(this);
          this.name = 'NotFoundError';
          this.message = message;
      };
  });

  createErrorClass(function (_super) {
      return function SequenceErrorImpl(message) {
          _super(this);
          this.name = 'SequenceError';
          this.message = message;
      };
  });

  createErrorClass(function (_super) {
      return function TimeoutErrorImpl(info) {
          if (info === void 0) { info = null; }
          _super(this);
          this.message = 'Timeout has occurred';
          this.name = 'TimeoutError';
          this.info = info;
      };
  });

  function map(project, thisArg) {
      return operate(function (source, subscriber) {
          var index = 0;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              subscriber.next(project.call(thisArg, value, index++));
          }));
      });
  }

  var isArray$2 = Array.isArray;
  function callOrApply(fn, args) {
      return isArray$2(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
  }
  function mapOneOrManyArgs(fn) {
      return map(function (args) { return callOrApply(fn, args); });
  }

  var isArray$1 = Array.isArray;
  var getPrototypeOf = Object.getPrototypeOf, objectProto = Object.prototype, getKeys = Object.keys;
  function argsArgArrayOrObject(args) {
      if (args.length === 1) {
          var first_1 = args[0];
          if (isArray$1(first_1)) {
              return { args: first_1, keys: null };
          }
          if (isPOJO(first_1)) {
              var keys = getKeys(first_1);
              return {
                  args: keys.map(function (key) { return first_1[key]; }),
                  keys: keys,
              };
          }
      }
      return { args: args, keys: null };
  }
  function isPOJO(obj) {
      return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;
  }

  function createObject(keys, values) {
      return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
  }

  function combineLatest() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      var scheduler = popScheduler(args);
      var resultSelector = popResultSelector(args);
      var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
      if (observables.length === 0) {
          return from([], scheduler);
      }
      var result = new Observable(combineLatestInit(observables, scheduler, keys
          ?
              function (values) { return createObject(keys, values); }
          :
              identity$2));
      return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
  }
  function combineLatestInit(observables, scheduler, valueTransform) {
      if (valueTransform === void 0) { valueTransform = identity$2; }
      return function (subscriber) {
          maybeSchedule(scheduler, function () {
              var length = observables.length;
              var values = new Array(length);
              var active = length;
              var remainingFirstValues = length;
              var _loop_1 = function (i) {
                  maybeSchedule(scheduler, function () {
                      var source = from(observables[i], scheduler);
                      var hasFirstValue = false;
                      source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                          values[i] = value;
                          if (!hasFirstValue) {
                              hasFirstValue = true;
                              remainingFirstValues--;
                          }
                          if (!remainingFirstValues) {
                              subscriber.next(valueTransform(values.slice()));
                          }
                      }, function () {
                          if (!--active) {
                              subscriber.complete();
                          }
                      }));
                  }, subscriber);
              };
              for (var i = 0; i < length; i++) {
                  _loop_1(i);
              }
          }, subscriber);
      };
  }
  function maybeSchedule(scheduler, execute, subscription) {
      if (scheduler) {
          executeSchedule(subscription, scheduler, execute);
      }
      else {
          execute();
      }
  }

  function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
      var buffer = [];
      var active = 0;
      var index = 0;
      var isComplete = false;
      var checkComplete = function () {
          if (isComplete && !buffer.length && !active) {
              subscriber.complete();
          }
      };
      var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
      var doInnerSub = function (value) {
          expand && subscriber.next(value);
          active++;
          var innerComplete = false;
          innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, function (innerValue) {
              onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
              if (expand) {
                  outerNext(innerValue);
              }
              else {
                  subscriber.next(innerValue);
              }
          }, function () {
              innerComplete = true;
          }, undefined, function () {
              if (innerComplete) {
                  try {
                      active--;
                      var _loop_1 = function () {
                          var bufferedValue = buffer.shift();
                          if (innerSubScheduler) {
                              executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                          }
                          else {
                              doInnerSub(bufferedValue);
                          }
                      };
                      while (buffer.length && active < concurrent) {
                          _loop_1();
                      }
                      checkComplete();
                  }
                  catch (err) {
                      subscriber.error(err);
                  }
              }
          }));
      };
      source.subscribe(createOperatorSubscriber(subscriber, outerNext, function () {
          isComplete = true;
          checkComplete();
      }));
      return function () {
          additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
      };
  }

  function mergeMap(project, resultSelector, concurrent) {
      if (concurrent === void 0) { concurrent = Infinity; }
      if (isFunction$1(resultSelector)) {
          return mergeMap(function (a, i) { return map(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
      }
      else if (typeof resultSelector === 'number') {
          concurrent = resultSelector;
      }
      return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
  }

  function mergeAll(concurrent) {
      if (concurrent === void 0) { concurrent = Infinity; }
      return mergeMap(identity$2, concurrent);
  }

  function concatAll() {
      return mergeAll(1);
  }

  function concat() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
      }
      return concatAll()(from(args, popScheduler(args)));
  }

  new Observable(noop$2);

  function filter(predicate, thisArg) {
      return operate(function (source, subscriber) {
          var index = 0;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
      });
  }

  function catchError(selector) {
      return operate(function (source, subscriber) {
          var innerSub = null;
          var syncUnsub = false;
          var handledResult;
          innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
              handledResult = innerFrom(selector(err, catchError(selector)(source)));
              if (innerSub) {
                  innerSub.unsubscribe();
                  innerSub = null;
                  handledResult.subscribe(subscriber);
              }
              else {
                  syncUnsub = true;
              }
          }));
          if (syncUnsub) {
              innerSub.unsubscribe();
              innerSub = null;
              handledResult.subscribe(subscriber);
          }
      });
  }

  function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
      return function (source, subscriber) {
          var hasState = hasSeed;
          var state = seed;
          var index = 0;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              var i = index++;
              state = hasState
                  ?
                      accumulator(state, value, i)
                  :
                      ((hasState = true), value);
              emitOnNext && subscriber.next(state);
          }, emitBeforeComplete &&
              (function () {
                  hasState && subscriber.next(state);
                  subscriber.complete();
              })));
      };
  }

  function reduce(accumulator, seed) {
      return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
  }

  var arrReducer = function (arr, value) { return (arr.push(value), arr); };
  function toArray$1() {
      return operate(function (source, subscriber) {
          reduce(arrReducer, [])(source).subscribe(subscriber);
      });
  }

  function fromSubscribable(subscribable) {
      return new Observable(function (subscriber) { return subscribable.subscribe(subscriber); });
  }

  var DEFAULT_CONFIG = {
      connector: function () { return new Subject(); },
  };
  function connect(selector, config) {
      if (config === void 0) { config = DEFAULT_CONFIG; }
      var connector = config.connector;
      return operate(function (source, subscriber) {
          var subject = connector();
          from(selector(fromSubscribable(subject))).subscribe(subscriber);
          subscriber.add(source.subscribe(subject));
      });
  }

  function defaultIfEmpty(defaultValue) {
      return operate(function (source, subscriber) {
          var hasValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              hasValue = true;
              subscriber.next(value);
          }, function () {
              if (!hasValue) {
                  subscriber.next(defaultValue);
              }
              subscriber.complete();
          }));
      });
  }

  function take(count) {
      return count <= 0
          ?
              function () { return EMPTY; }
          : operate(function (source, subscriber) {
              var seen = 0;
              source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                  if (++seen <= count) {
                      subscriber.next(value);
                      if (count <= seen) {
                          subscriber.complete();
                      }
                  }
              }));
          });
  }

  function mapTo(value) {
      return map(function () { return value; });
  }

  function distinctUntilChanged(comparator, keySelector) {
      if (keySelector === void 0) { keySelector = identity$2; }
      comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
      return operate(function (source, subscriber) {
          var previousKey;
          var first = true;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              var currentKey = keySelector(value);
              if (first || !comparator(previousKey, currentKey)) {
                  first = false;
                  previousKey = currentKey;
                  subscriber.next(value);
              }
          }));
      });
  }
  function defaultCompare(a, b) {
      return a === b;
  }

  function throwIfEmpty(errorFactory) {
      if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
      return operate(function (source, subscriber) {
          var hasValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              hasValue = true;
              subscriber.next(value);
          }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
      });
  }
  function defaultErrorFactory() {
      return new EmptyError();
  }

  function first(predicate, defaultValue) {
      var hasDefaultValue = arguments.length >= 2;
      return function (source) {
          return source.pipe(predicate ? filter(function (v, i) { return predicate(v, i, source); }) : identity$2, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));
      };
  }

  function multicast(subjectOrSubjectFactory, selector) {
      var subjectFactory = isFunction$1(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
      if (isFunction$1(selector)) {
          return connect(selector, {
              connector: subjectFactory,
          });
      }
      return function (source) { return new ConnectableObservable(source, subjectFactory); };
  }

  function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
      if (selectorOrScheduler && !isFunction$1(selectorOrScheduler)) {
          timestampProvider = selectorOrScheduler;
      }
      var selector = isFunction$1(selectorOrScheduler) ? selectorOrScheduler : undefined;
      return function (source) { return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source); };
  }

  function startWith() {
      var values = [];
      for (var _i = 0; _i < arguments.length; _i++) {
          values[_i] = arguments[_i];
      }
      var scheduler = popScheduler(values);
      return operate(function (source, subscriber) {
          (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
      });
  }

  function switchMap(project, resultSelector) {
      return operate(function (source, subscriber) {
          var innerSubscriber = null;
          var index = 0;
          var isComplete = false;
          var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
          source.subscribe(createOperatorSubscriber(subscriber, function (value) {
              innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
              var innerIndex = 0;
              var outerIndex = index++;
              innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                  innerSubscriber = null;
                  checkComplete();
              })));
          }, function () {
              isComplete = true;
              checkComplete();
          }));
      });
  }

  function tap(observerOrNext, error, complete) {
      var tapObserver = isFunction$1(observerOrNext) || error || complete
          ?
              { next: observerOrNext, error: error, complete: complete }
          : observerOrNext;
      return tapObserver
          ? operate(function (source, subscriber) {
              var _a;
              (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
              var isUnsub = true;
              source.subscribe(createOperatorSubscriber(subscriber, function (value) {
                  var _a;
                  (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                  subscriber.next(value);
              }, function () {
                  var _a;
                  isUnsub = false;
                  (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                  subscriber.complete();
              }, function (err) {
                  var _a;
                  isUnsub = false;
                  (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                  subscriber.error(err);
              }, function () {
                  var _a, _b;
                  if (isUnsub) {
                      (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                  }
                  (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
              }));
          })
          :
              identity$2;
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Empty template, auto-generated by @polkadot/dev
  var others$5 = [];

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  detectPackage(packageInfo$8, null, others$5);

  // Copyright 2017-2022 @polkadot/rpc-core authors & contributors
  var others$4 = [packageInfo$6, packageInfo$5];

  // Copyright 2017-2022 @polkadot/rpc-core authors & contributors
  detectPackage(packageInfo$7, null, others$4);

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo$1 = {
    name: '@polkadot/types-codec',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '8.10.1'
  };

  // Copyright 2017-2022 @polkadot/types-create authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Do not edit, auto-generated by @polkadot/dev
  const packageInfo = {
    name: '@polkadot/types-create',
    path: (({ url: (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href) }) && (document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)) ? new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.substring(0, new URL((document.currentScript && document.currentScript.src || new URL('bundle.js', document.baseURI).href)).pathname.lastIndexOf('/') + 1) : 'auto',
    type: 'esm',
    version: '8.10.1'
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  var others$3 = [packageInfo$1, packageInfo];

  // Copyright 2017-2022 @polkadot/types authors & contributors
  detectPackage(packageInfo$5, null, others$3);

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const AllHashers = {
    Blake2_128: null,
    // eslint-disable-line camelcase
    Blake2_256: null,
    // eslint-disable-line camelcase
    Blake2_128Concat: null,
    // eslint-disable-line camelcase
    Twox128: null,
    Twox256: null,
    Twox64Concat: null,
    // new in v11
    Identity: null
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const v9 = {
    // v9
    ErrorMetadataV9: {
      name: 'Text',
      docs: 'Vec<Text>'
    },
    EventMetadataV9: {
      name: 'Text',
      args: 'Vec<Type>',
      docs: 'Vec<Text>'
    },
    FunctionArgumentMetadataV9: {
      name: 'Text',
      type: 'Type'
    },
    FunctionMetadataV9: {
      name: 'Text',
      args: 'Vec<FunctionArgumentMetadataV9>',
      docs: 'Vec<Text>'
    },
    MetadataV9: {
      modules: 'Vec<ModuleMetadataV9>'
    },
    ModuleConstantMetadataV9: {
      name: 'Text',
      type: 'Type',
      value: 'Bytes',
      docs: 'Vec<Text>'
    },
    ModuleMetadataV9: {
      name: 'Text',
      storage: 'Option<StorageMetadataV9>',
      calls: 'Option<Vec<FunctionMetadataV9>>',
      events: 'Option<Vec<EventMetadataV9>>',
      constants: 'Vec<ModuleConstantMetadataV9>',
      errors: 'Vec<ErrorMetadataV9>'
    },
    StorageEntryMetadataV9: {
      name: 'Text',
      modifier: 'StorageEntryModifierV9',
      type: 'StorageEntryTypeV9',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryModifierV9: {
      _enum: ['Optional', 'Default', 'Required']
    },
    StorageEntryTypeV9: {
      _enum: {
        Plain: 'Type',
        Map: {
          hasher: 'StorageHasherV9',
          key: 'Type',
          value: 'Type',
          linked: 'bool'
        },
        DoubleMap: {
          hasher: 'StorageHasherV9',
          key1: 'Type',
          key2: 'Type',
          value: 'Type',
          key2Hasher: 'StorageHasherV9'
        }
      }
    },
    StorageHasherV9: {
      _enum: {
        Blake2_128: null,
        // eslint-disable-line camelcase
        Blake2_256: null,
        // eslint-disable-line camelcase
        Twox128: null,
        Twox256: null,
        Twox64Concat: null
      }
    },
    StorageMetadataV9: {
      prefix: 'Text',
      items: 'Vec<StorageEntryMetadataV9>'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const v10 = {
    // v10
    ErrorMetadataV10: 'ErrorMetadataV9',
    EventMetadataV10: 'EventMetadataV9',
    FunctionArgumentMetadataV10: 'FunctionArgumentMetadataV9',
    FunctionMetadataV10: 'FunctionMetadataV9',
    MetadataV10: {
      modules: 'Vec<ModuleMetadataV10>'
    },
    ModuleConstantMetadataV10: 'ModuleConstantMetadataV9',
    ModuleMetadataV10: {
      name: 'Text',
      storage: 'Option<StorageMetadataV10>',
      calls: 'Option<Vec<FunctionMetadataV10>>',
      events: 'Option<Vec<EventMetadataV10>>',
      constants: 'Vec<ModuleConstantMetadataV10>',
      errors: 'Vec<ErrorMetadataV10>'
    },
    StorageEntryModifierV10: 'StorageEntryModifierV9',
    StorageEntryMetadataV10: {
      name: 'Text',
      modifier: 'StorageEntryModifierV10',
      type: 'StorageEntryTypeV10',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryTypeV10: {
      _enum: {
        Plain: 'Type',
        Map: {
          hasher: 'StorageHasherV10',
          key: 'Type',
          value: 'Type',
          linked: 'bool'
        },
        DoubleMap: {
          hasher: 'StorageHasherV10',
          key1: 'Type',
          key2: 'Type',
          value: 'Type',
          key2Hasher: 'StorageHasherV10'
        }
      }
    },
    StorageMetadataV10: {
      prefix: 'Text',
      items: 'Vec<StorageEntryMetadataV10>'
    },
    StorageHasherV10: {
      _enum: {
        Blake2_128: null,
        // eslint-disable-line camelcase
        Blake2_256: null,
        // eslint-disable-line camelcase
        Blake2_128Concat: null,
        // eslint-disable-line camelcase
        Twox128: null,
        Twox256: null,
        Twox64Concat: null
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const v11 = {
    // v11
    ErrorMetadataV11: 'ErrorMetadataV10',
    EventMetadataV11: 'EventMetadataV10',
    ExtrinsicMetadataV11: {
      version: 'u8',
      signedExtensions: 'Vec<Text>'
    },
    FunctionArgumentMetadataV11: 'FunctionArgumentMetadataV10',
    FunctionMetadataV11: 'FunctionMetadataV10',
    MetadataV11: {
      modules: 'Vec<ModuleMetadataV11>',
      extrinsic: 'ExtrinsicMetadataV11'
    },
    ModuleConstantMetadataV11: 'ModuleConstantMetadataV10',
    ModuleMetadataV11: {
      name: 'Text',
      storage: 'Option<StorageMetadataV11>',
      calls: 'Option<Vec<FunctionMetadataV11>>',
      events: 'Option<Vec<EventMetadataV11>>',
      constants: 'Vec<ModuleConstantMetadataV11>',
      errors: 'Vec<ErrorMetadataV11>'
    },
    StorageEntryModifierV11: 'StorageEntryModifierV10',
    StorageEntryMetadataV11: {
      name: 'Text',
      modifier: 'StorageEntryModifierV11',
      type: 'StorageEntryTypeV11',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryTypeV11: {
      _enum: {
        Plain: 'Type',
        Map: {
          hasher: 'StorageHasherV11',
          key: 'Type',
          value: 'Type',
          linked: 'bool'
        },
        DoubleMap: {
          hasher: 'StorageHasherV11',
          key1: 'Type',
          key2: 'Type',
          value: 'Type',
          key2Hasher: 'StorageHasherV11'
        }
      }
    },
    StorageMetadataV11: {
      prefix: 'Text',
      items: 'Vec<StorageEntryMetadataV11>'
    },
    StorageHasherV11: {
      _enum: AllHashers
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const v12 = {
    // v12
    ErrorMetadataV12: 'ErrorMetadataV11',
    EventMetadataV12: 'EventMetadataV11',
    ExtrinsicMetadataV12: 'ExtrinsicMetadataV11',
    FunctionArgumentMetadataV12: 'FunctionArgumentMetadataV11',
    FunctionMetadataV12: 'FunctionMetadataV11',
    MetadataV12: {
      modules: 'Vec<ModuleMetadataV12>',
      extrinsic: 'ExtrinsicMetadataV12'
    },
    ModuleConstantMetadataV12: 'ModuleConstantMetadataV11',
    ModuleMetadataV12: {
      name: 'Text',
      storage: 'Option<StorageMetadataV12>',
      calls: 'Option<Vec<FunctionMetadataV12>>',
      events: 'Option<Vec<EventMetadataV12>>',
      constants: 'Vec<ModuleConstantMetadataV12>',
      errors: 'Vec<ErrorMetadataV12>',
      index: 'u8'
    },
    StorageEntryModifierV12: 'StorageEntryModifierV11',
    StorageEntryMetadataV12: 'StorageEntryMetadataV11',
    StorageEntryTypeV12: 'StorageEntryTypeV11',
    StorageMetadataV12: 'StorageMetadataV11',
    StorageHasherV12: 'StorageHasherV11'
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const v13 = {
    // v13
    ErrorMetadataV13: 'ErrorMetadataV12',
    EventMetadataV13: 'EventMetadataV12',
    ExtrinsicMetadataV13: 'ExtrinsicMetadataV12',
    FunctionArgumentMetadataV13: 'FunctionArgumentMetadataV12',
    FunctionMetadataV13: 'FunctionMetadataV12',
    MetadataV13: {
      modules: 'Vec<ModuleMetadataV13>',
      extrinsic: 'ExtrinsicMetadataV13'
    },
    ModuleConstantMetadataV13: 'ModuleConstantMetadataV12',
    ModuleMetadataV13: {
      name: 'Text',
      storage: 'Option<StorageMetadataV13>',
      calls: 'Option<Vec<FunctionMetadataV13>>',
      events: 'Option<Vec<EventMetadataV13>>',
      constants: 'Vec<ModuleConstantMetadataV13>',
      errors: 'Vec<ErrorMetadataV13>',
      index: 'u8'
    },
    StorageEntryModifierV13: 'StorageEntryModifierV12',
    StorageEntryMetadataV13: {
      name: 'Text',
      modifier: 'StorageEntryModifierV13',
      type: 'StorageEntryTypeV13',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryTypeV13: {
      _enum: {
        Plain: 'Type',
        Map: {
          hasher: 'StorageHasherV13',
          key: 'Type',
          value: 'Type',
          linked: 'bool'
        },
        DoubleMap: {
          hasher: 'StorageHasherV13',
          key1: 'Type',
          key2: 'Type',
          value: 'Type',
          key2Hasher: 'StorageHasherV13'
        },
        NMap: {
          keyVec: 'Vec<Type>',
          hashers: 'Vec<StorageHasherV13>',
          value: 'Type'
        }
      }
    },
    StorageMetadataV13: {
      prefix: 'Text',
      items: 'Vec<StorageEntryMetadataV13>'
    },
    StorageHasherV13: 'StorageHasherV12'
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const Si1Variant = {
    name: 'Text',
    fields: 'Vec<Si1Field>',
    index: 'u8',
    docs: 'Vec<Text>'
  };
  const v1$1 = {
    Si1Field: {
      name: 'Option<Text>',
      type: 'Si1LookupTypeId',
      typeName: 'Option<Text>',
      docs: 'Vec<Text>'
    },
    Si1LookupTypeId: 'Compact<u32>',
    Si1Path: 'Si0Path',
    Si1Type: {
      path: 'Si1Path',
      params: 'Vec<Si1TypeParameter>',
      def: 'Si1TypeDef',
      docs: 'Vec<Text>'
    },
    Si1TypeDef: {
      _enum: {
        Composite: 'Si1TypeDefComposite',
        Variant: 'Si1TypeDefVariant',
        Sequence: 'Si1TypeDefSequence',
        Array: 'Si1TypeDefArray',
        Tuple: 'Si1TypeDefTuple',
        Primitive: 'Si1TypeDefPrimitive',
        Compact: 'Si1TypeDefCompact',
        BitSequence: 'Si1TypeDefBitSequence',
        // NOTE: This is specific to the implementation for pre-v14 metadata
        // compatibility (always keep this as the last entry in the enum)
        HistoricMetaCompat: 'Type'
      }
    },
    Si1TypeDefArray: {
      len: 'u32',
      type: 'Si1LookupTypeId'
    },
    Si1TypeDefBitSequence: {
      bitStoreType: 'Si1LookupTypeId',
      bitOrderType: 'Si1LookupTypeId'
    },
    Si1TypeDefCompact: {
      type: 'Si1LookupTypeId'
    },
    Si1TypeDefComposite: {
      fields: 'Vec<Si1Field>'
    },
    Si1TypeDefPrimitive: 'Si0TypeDefPrimitive',
    Si1TypeDefSequence: {
      type: 'Si1LookupTypeId'
    },
    Si1TypeDefTuple: 'Vec<Si1LookupTypeId>',
    Si1TypeParameter: {
      name: 'Text',
      type: 'Option<Si1LookupTypeId>'
    },
    Si1TypeDefVariant: {
      variants: 'Vec<Si1Variant>'
    },
    Si1Variant
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const v14 = {
    // registry
    PortableTypeV14: {
      id: 'Si1LookupTypeId',
      type: 'Si1Type'
    },
    // compatibility with earlier layouts, i.e. don't break previous users
    ErrorMetadataV14: objectSpread({}, Si1Variant, {
      args: 'Vec<Type>'
    }),
    EventMetadataV14: objectSpread({}, Si1Variant, {
      args: 'Vec<Type>'
    }),
    FunctionArgumentMetadataV14: {
      name: 'Text',
      type: 'Type',
      typeName: 'Option<Type>'
    },
    FunctionMetadataV14: objectSpread({}, Si1Variant, {
      args: 'Vec<FunctionArgumentMetadataV14>'
    }),
    // V14
    ExtrinsicMetadataV14: {
      type: 'SiLookupTypeId',
      version: 'u8',
      signedExtensions: 'Vec<SignedExtensionMetadataV14>'
    },
    MetadataV14: {
      lookup: 'PortableRegistry',
      pallets: 'Vec<PalletMetadataV14>',
      extrinsic: 'ExtrinsicMetadataV14',
      type: 'SiLookupTypeId'
    },
    PalletCallMetadataV14: {
      type: 'SiLookupTypeId'
    },
    PalletConstantMetadataV14: {
      name: 'Text',
      type: 'SiLookupTypeId',
      value: 'Bytes',
      docs: 'Vec<Text>'
    },
    PalletErrorMetadataV14: {
      type: 'SiLookupTypeId'
    },
    PalletEventMetadataV14: {
      type: 'SiLookupTypeId'
    },
    PalletMetadataV14: {
      name: 'Text',
      storage: 'Option<PalletStorageMetadataV14>',
      calls: 'Option<PalletCallMetadataV14>',
      events: 'Option<PalletEventMetadataV14>',
      constants: 'Vec<PalletConstantMetadataV14>',
      errors: 'Option<PalletErrorMetadataV14>',
      index: 'u8'
    },
    PalletStorageMetadataV14: {
      prefix: 'Text',
      // NOTE: Renamed from entries
      items: 'Vec<StorageEntryMetadataV14>'
    },
    SignedExtensionMetadataV14: {
      identifier: 'Text',
      type: 'SiLookupTypeId',
      additionalSigned: 'SiLookupTypeId'
    },
    StorageEntryMetadataV14: {
      name: 'Text',
      modifier: 'StorageEntryModifierV14',
      type: 'StorageEntryTypeV14',
      fallback: 'Bytes',
      docs: 'Vec<Text>'
    },
    StorageEntryModifierV14: 'StorageEntryModifierV13',
    StorageEntryTypeV14: {
      _enum: {
        Plain: 'SiLookupTypeId',
        Map: {
          hashers: 'Vec<StorageHasherV14>',
          key: 'SiLookupTypeId',
          // NOTE: Renamed from "keys"
          value: 'SiLookupTypeId'
        }
      }
    },
    StorageHasherV14: 'StorageHasherV13'
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  var definitions$W = {
    rpc: {},
    types: objectSpread({}, v9, v10, v11, v12, v13, v14, {
      // latest mappings
      ErrorMetadataLatest: 'ErrorMetadataV14',
      EventMetadataLatest: 'EventMetadataV14',
      ExtrinsicMetadataLatest: 'ExtrinsicMetadataV14',
      FunctionArgumentMetadataLatest: 'FunctionArgumentMetadataV14',
      FunctionMetadataLatest: 'FunctionMetadataV14',
      MetadataLatest: 'MetadataV14',
      PalletCallMetadataLatest: 'PalletCallMetadataV14',
      PalletConstantMetadataLatest: 'PalletConstantMetadataV14',
      PalletErrorMetadataLatest: 'PalletErrorMetadataV14',
      PalletEventMetadataLatest: 'PalletEventMetadataV14',
      PalletMetadataLatest: 'PalletMetadataV14',
      PalletStorageMetadataLatest: 'PalletStorageMetadataV14',
      PortableType: 'PortableTypeV14',
      SignedExtensionMetadataLatest: 'SignedExtensionMetadataV14',
      StorageEntryMetadataLatest: 'StorageEntryMetadataV14',
      StorageEntryModifierLatest: 'StorageEntryModifierV14',
      StorageEntryTypeLatest: 'StorageEntryTypeV14',
      StorageHasher: 'StorageHasherV14',
      // the enum containing all the mappings
      MetadataAll: {
        _enum: {
          V0: 'DoNotConstruct<MetadataV0>',
          V1: 'DoNotConstruct<MetadataV1>',
          V2: 'DoNotConstruct<MetadataV2>',
          V3: 'DoNotConstruct<MetadataV3>',
          V4: 'DoNotConstruct<MetadataV4>',
          V5: 'DoNotConstruct<MetadataV5>',
          V6: 'DoNotConstruct<MetadataV6>',
          V7: 'DoNotConstruct<MetadataV7>',
          V8: 'DoNotConstruct<MetadataV8>',
          // First version on Kusama in V9, dropping will be problematic
          V9: 'MetadataV9',
          V10: 'MetadataV10',
          V11: 'MetadataV11',
          V12: 'MetadataV12',
          V13: 'MetadataV13',
          V14: 'MetadataV14'
        }
      }
    })
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const numberTypes = {
    Fixed64: 'Int<64, Fixed64>',
    FixedI64: 'Int<64, FixedI64>',
    FixedU64: 'UInt<64, FixedU64>',
    Fixed128: 'Int<128, Fixed128>',
    FixedI128: 'Int<128, FixedI128>',
    FixedU128: 'UInt<128, FixedU128>',
    I32F32: 'Int<64, I32F32>',
    U32F32: 'UInt<64, U32F32>',
    PerU16: 'UInt<16, PerU16>',
    Perbill: 'UInt<32, Perbill>',
    Percent: 'UInt<8, Percent>',
    Permill: 'UInt<32, Permill>',
    Perquintill: 'UInt<64, Perquintill>'
  }; // Since we don't have insight into the origin specification, we can only define what we know about
  // in a pure Substrate/Polkadot implementation, any other custom origins won't be handled at all

  const knownOrigins = {
    //
    // (1) Defaults from Substrate
    //
    Council: 'CollectiveOrigin',
    System: 'SystemOrigin',
    TechnicalCommittee: 'CollectiveOrigin',
    //
    // (2) Defaults from Polkadot
    //
    Xcm: 'XcmOrigin',
    XcmPallet: 'XcmOrigin',
    //
    // (3) Defaults from Acala
    //
    Authority: 'AuthorityOrigin',
    GeneralCouncil: 'CollectiveOrigin'
  };
  var definitions$V = {
    rpc: {},
    types: objectSpread({}, numberTypes, {
      AccountId: 'AccountId32',
      AccountId20: 'GenericEthereumAccountId',
      AccountId32: 'GenericAccountId',
      AccountIdOf: 'AccountId',
      AccountIndex: 'GenericAccountIndex',
      Address: 'MultiAddress',
      AssetId: 'u32',
      Balance: 'UInt<128, Balance>',
      BalanceOf: 'Balance',
      Block: 'GenericBlock',
      BlockNumber: 'u32',
      BlockNumberFor: 'BlockNumber',
      BlockNumberOf: 'BlockNumber',
      Call: 'GenericCall',
      CallHash: 'Hash',
      CallHashOf: 'CallHash',
      ChangesTrieConfiguration: {
        digestInterval: 'u32',
        digestLevels: 'u32'
      },
      ChangesTrieSignal: {
        _enum: {
          NewConfiguration: 'Option<ChangesTrieConfiguration>'
        }
      },
      ConsensusEngineId: 'GenericConsensusEngineId',
      CodecHash: 'Hash',
      CrateVersion: {
        major: 'u16',
        minor: 'u8',
        patch: 'u8'
      },
      Digest: {
        logs: 'Vec<DigestItem>'
      },
      DigestItem: {
        _enum: {
          Other: 'Bytes',
          // 0
          AuthoritiesChange: 'Vec<AuthorityId>',
          // 1
          ChangesTrieRoot: 'Hash',
          // 2
          SealV0: 'SealV0',
          // 3
          Consensus: 'Consensus',
          // 4
          Seal: 'Seal',
          // 5
          PreRuntime: 'PreRuntime',
          // 6
          ChangesTrieSignal: 'ChangesTrieSignal',
          // 7
          RuntimeEnvironmentUpdated: 'Null' // 8

        }
      },
      ExtrinsicsWeight: {
        normal: 'Weight',
        operational: 'Weight'
      },
      H32: '[u8; 4; H32]',
      H64: '[u8; 8; H64]',
      H128: '[u8; 16; H128]',
      H160: '[u8; 20; H160]',
      H256: '[u8; 32; H256]',
      H512: '[u8; 64; H512]',
      H1024: '[u8; 128; H1024]',
      H2048: '[u8; 256; H2048]',
      Hash: 'H256',
      Header: {
        parentHash: 'Hash',
        number: 'Compact<BlockNumber>',
        stateRoot: 'Hash',
        extrinsicsRoot: 'Hash',
        digest: 'Digest'
      },
      HeaderPartial: {
        parentHash: 'Hash',
        // since we only parse JSON with this, having non-compact works
        number: 'BlockNumber'
      },
      IndicesLookupSource: 'GenericLookupSource',
      Index: 'u32',
      Justification: '(ConsensusEngineId, EncodedJustification)',
      EncodedJustification: 'Bytes',
      Justifications: 'Vec<Justification>',
      KeyValue: '(StorageKey, StorageData)',
      KeyTypeId: 'u32',
      LockIdentifier: '[u8; 8]',
      LookupSource: 'MultiAddress',
      LookupTarget: 'AccountId',
      ModuleId: 'LockIdentifier',
      MultiAddress: 'GenericMultiAddress',
      MultiSigner: {
        _enum: {
          Ed25519: '[u8; 32]',
          Sr25519: '[u8; 32]',
          Ecdsa: '[u8; 33]'
        }
      },
      Moment: 'UInt<64, Moment>',
      OpaqueCall: 'Bytes',
      Origin: 'DoNotConstruct<Origin>',
      OriginCaller: {
        _enum: {
          // this should be dynamically built from the actual modules, based on index
          System: 'SystemOrigin'
        }
      },
      PalletId: 'LockIdentifier',
      PalletsOrigin: 'OriginCaller',
      PalletVersion: {
        major: 'u16',
        minor: 'u8',
        patch: 'u8'
      },
      Pays: {
        _enum: ['Yes', 'No']
      },
      Phantom: 'Null',
      PhantomData: 'Null',
      Releases: {
        _enum: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10']
      },
      RuntimeDbWeight: {
        read: 'Weight',
        write: 'Weight'
      },
      SignedBlock: 'SignedBlockWithJustifications',
      SignedBlockWithJustification: {
        block: 'Block',
        justification: 'Option<EncodedJustification>'
      },
      SignedBlockWithJustifications: {
        block: 'Block',
        justifications: 'Option<Justifications>'
      },
      Slot: 'u64',
      StorageData: 'Bytes',
      StorageProof: {
        trieNodes: 'Vec<Bytes>'
      },
      TransactionPriority: 'u64',
      TransactionInfo: {
        _alias: {
          dataSize: 'size'
        },
        chunkRoot: 'H256',
        contentHash: 'H256',
        dataSize: 'u32',
        blockChunks: 'u32'
      },
      TransactionStorageProof: {
        chunk: 'Vec<u8>',
        proof: 'Vec<Vec<u8>>'
      },
      ValidatorId: 'AccountId',
      ValidatorIdOf: 'ValidatorId',
      Weight: 'u64',
      WeightMultiplier: 'Fixed64',
      // digest
      PreRuntime: '(ConsensusEngineId, Bytes)',
      SealV0: '(u64, Signature)',
      Seal: '(ConsensusEngineId, Bytes)',
      Consensus: '(ConsensusEngineId, Bytes)'
    })
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const v0$1 = {
    Si0Field: {
      name: 'Option<Text>',
      type: 'Si0LookupTypeId',
      typeName: 'Option<Text>',
      docs: 'Vec<Text>'
    },
    Si0LookupTypeId: 'u32',
    Si0Path: 'Vec<Text>',
    Si0Type: {
      path: 'Si0Path',
      params: 'Vec<Si0LookupTypeId>',
      def: 'Si0TypeDef'
    },
    Si0TypeDef: {
      _enum: {
        Composite: 'Si0TypeDefComposite',
        Variant: 'Si0TypeDefVariant',
        Sequence: 'Si0TypeDefSequence',
        Array: 'Si0TypeDefArray',
        Tuple: 'Si0TypeDefTuple',
        Primitive: 'Si0TypeDefPrimitive',
        Compact: 'Si0TypeDefCompact',
        Phantom: 'Si0TypeDefPhantom',
        BitSequence: 'Si0TypeDefBitSequence'
      }
    },
    Si0TypeDefArray: {
      len: 'u32',
      type: 'Si0LookupTypeId'
    },
    Si0TypeDefBitSequence: {
      bitStoreType: 'Si0LookupTypeId',
      bitOrderType: 'Si0LookupTypeId'
    },
    Si0TypeDefCompact: {
      type: 'Si0LookupTypeId'
    },
    Si0TypeDefComposite: {
      fields: 'Vec<Si0Field>'
    },
    Si0TypeDefPhantom: 'Null',
    Si0TypeDefVariant: {
      variants: 'Vec<Si0Variant>'
    },
    Si0TypeDefPrimitive: {
      _enum: ['Bool', 'Char', 'Str', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256', 'I8', 'I16', 'I32', 'I64', 'I128', 'I256']
    },
    Si0TypeDefSequence: {
      type: 'Si0LookupTypeId'
    },
    Si0TypeDefTuple: 'Vec<Si0LookupTypeId>',
    Si0TypeParameter: {
      name: 'Text',
      type: 'Option<Si0LookupTypeId>'
    },
    Si0Variant: {
      name: 'Text',
      fields: 'Vec<Si0Field>',
      index: 'Option<u8>',
      discriminant: 'Option<u64>',
      docs: 'Vec<Text>'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors

  /* eslint-disable sort-keys */

  var definitions$U = {
    rpc: {},
    types: objectSpread({}, v0$1, v1$1, {
      // latest mappings
      SiField: 'Si1Field',
      SiLookupTypeId: 'Si1LookupTypeId',
      SiPath: 'Si1Path',
      SiType: 'Si1Type',
      SiTypeDef: 'Si1TypeDef',
      SiTypeDefArray: 'Si1TypeDefArray',
      SiTypeDefBitSequence: 'Si1TypeDefBitSequence',
      SiTypeDefCompact: 'Si1TypeDefCompact',
      SiTypeDefComposite: 'Si1TypeDefComposite',
      SiTypeDefPrimitive: 'Si1TypeDefPrimitive',
      SiTypeDefSequence: 'Si1TypeDefSequence',
      SiTypeDefTuple: 'Si1TypeDefTuple',
      SiTypeParameter: 'Si1TypeParameter',
      SiTypeDefVariant: 'Si1TypeDefVariant',
      SiVariant: 'Si1Variant'
    })
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$T = {
    rpc: {},
    types: {
      AssetApprovalKey: {
        owner: 'AccountId',
        delegate: 'AccountId'
      },
      AssetApproval: {
        amount: 'TAssetBalance',
        deposit: 'TAssetDepositBalance'
      },
      AssetBalance: {
        balance: 'TAssetBalance',
        isFrozen: 'bool',
        isSufficient: 'bool'
      },
      AssetDestroyWitness: {
        accounts: 'Compact<u32>',
        sufficients: 'Compact<u32>',
        approvals: 'Compact<u32>'
      },
      AssetDetails: {
        owner: 'AccountId',
        issuer: 'AccountId',
        admin: 'AccountId',
        freezer: 'AccountId',
        supply: 'TAssetBalance',
        deposit: 'TAssetDepositBalance',
        minBalance: 'TAssetBalance',
        isSufficient: 'bool',
        accounts: 'u32',
        sufficients: 'u32',
        approvals: 'u32',
        isFrozen: 'bool'
      },
      AssetMetadata: {
        deposit: 'TAssetDepositBalance',
        name: 'Vec<u8>',
        symbol: 'Vec<u8>',
        decimals: 'u8',
        isFrozen: 'bool'
      },
      TAssetBalance: 'u64',
      TAssetDepositBalance: 'BalanceOf'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$S = {
    rpc: {},
    types: {
      UncleEntryItem: {
        _enum: {
          InclusionHeight: 'BlockNumber',
          Uncle: '(Hash, Option<AccountId>)'
        }
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$R = {
    rpc: {},
    types: {
      RawAuraPreDigest: {
        slotNumber: 'u64'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$Q = {
    rpc: {
      epochAuthorship: {
        description: 'Returns data about which slots (primary or secondary) can be claimed in the current epoch with the keys in the keystore',
        params: [],
        type: 'HashMap<AuthorityId, EpochAuthorship>'
      }
    },
    types: {
      AllowedSlots: {
        _enum: ['PrimarySlots', 'PrimaryAndSecondaryPlainSlots', 'PrimaryAndSecondaryVRFSlots']
      },
      BabeAuthorityWeight: 'u64',
      BabeEpochConfiguration: {
        c: '(u64, u64)',
        allowedSlots: 'AllowedSlots'
      },
      BabeBlockWeight: 'u32',
      BabeEquivocationProof: {
        offender: 'AuthorityId',
        slotNumber: 'SlotNumber',
        firstHeader: 'Header',
        secondHeader: 'Header'
      },
      BabeWeight: 'u64',
      MaybeRandomness: 'Option<Randomness>',
      MaybeVrf: 'Option<VrfData>',
      EpochAuthorship: {
        primary: 'Vec<u64>',
        secondary: 'Vec<u64>',
        secondary_vrf: 'Vec<u64>'
      },
      NextConfigDescriptor: {
        _enum: {
          V0: 'Null',
          V1: 'NextConfigDescriptorV1'
        }
      },
      NextConfigDescriptorV1: {
        c: '(u64, u64)',
        allowedSlots: 'AllowedSlots'
      },
      Randomness: 'Hash',
      RawBabePreDigest: {
        _enum: {
          Phantom: 'Null',
          // index starts at 1... empty slot at 0
          Primary: 'RawBabePreDigestPrimary',
          SecondaryPlain: 'RawBabePreDigestSecondaryPlain',
          SecondaryVRF: 'RawBabePreDigestSecondaryVRF'
        }
      },
      RawBabePreDigestPrimary: {
        authorityIndex: 'u32',
        // AuthorityIndex (also in aura)
        slotNumber: 'SlotNumber',
        vrfOutput: 'VrfOutput',
        vrfProof: 'VrfProof'
      },
      RawBabePreDigestSecondaryPlain: {
        authorityIndex: 'u32',
        // AuthorityIndex (also in aura)
        slotNumber: 'SlotNumber'
      },
      RawBabePreDigestSecondaryVRF: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        vrfOutput: 'VrfOutput',
        vrfProof: 'VrfProof'
      },
      RawBabePreDigestTo159: {
        _enum: {
          Primary: 'RawBabePreDigestPrimaryTo159',
          Secondary: 'RawBabePreDigestSecondaryTo159'
        }
      },
      RawBabePreDigestPrimaryTo159: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        weight: 'BabeBlockWeight',
        vrfOutput: 'VrfOutput',
        vrfProof: 'VrfProof'
      },
      RawBabePreDigestSecondaryTo159: {
        authorityIndex: 'u32',
        slotNumber: 'SlotNumber',
        weight: 'BabeBlockWeight'
      },
      // a cross old/new compatible version of the digest, that is _only_ useful
      // for partial parsing and extraction of the author. This assumes that all
      // entries has the authorityIndex in the first position - and that it is all
      // we are interested in
      RawBabePreDigestCompat: {
        _enum: {
          Zero: 'u32',
          One: 'u32',
          Two: 'u32',
          Three: 'u32'
        }
      },
      SlotNumber: 'u64',
      VrfData: '[u8; 32]',
      VrfOutput: '[u8; 32]',
      VrfProof: '[u8; 64]'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$P = {
    rpc: {},
    types: {
      AccountData: {
        free: 'Balance',
        reserved: 'Balance',
        miscFrozen: 'Balance',
        feeFrozen: 'Balance'
      },
      BalanceLockTo212: {
        id: 'LockIdentifier',
        amount: 'Balance',
        until: 'BlockNumber',
        reasons: 'WithdrawReasons'
      },
      BalanceLock: {
        id: 'LockIdentifier',
        amount: 'Balance',
        reasons: 'Reasons'
      },
      BalanceStatus: {
        _enum: ['Free', 'Reserved']
      },
      Reasons: {
        _enum: ['Fee', 'Misc', 'All']
      },
      ReserveData: {
        id: 'ReserveIdentifier',
        amount: 'Balance'
      },
      ReserveIdentifier: '[u8; 8]',
      VestingSchedule: {
        offset: 'Balance',
        perBlock: 'Balance',
        startingBlock: 'BlockNumber'
      },
      WithdrawReasons: {
        _set: {
          TransactionPayment: 0b00000001,
          Transfer: 0b00000010,
          Reserve: 0b00000100,
          Fee: 0b00001000,
          Tip: 0b00010000
        }
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$O = {
    rpc: {
      subscribeJustifications: {
        description: 'Returns the block most recently finalized by BEEFY, alongside side its justification.',
        params: [],
        pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
        type: 'BeefySignedCommitment'
      },
      getFinalizedHead: {
        description: 'Returns hash of the latest BEEFY finalized block as seen by this client.',
        params: [],
        type: 'H256'
      }
    },
    types: {
      BeefyCommitment: {
        payload: 'BeefyPayload',
        blockNumber: 'BlockNumber',
        validatorSetId: 'ValidatorSetId'
      },
      BeefyId: '[u8; 33]',
      BeefySignedCommitment: {
        commitment: 'BeefyCommitment',
        signatures: 'Vec<Option<EcdsaSignature>>'
      },
      BeefyNextAuthoritySet: {
        id: 'u64',
        len: 'u32',
        root: 'H256'
      },
      BeefyPayload: 'Vec<(BeefyPayloadId, Bytes)>',
      BeefyPayloadId: '[u8;2]',
      MmrRootHash: 'H256',
      ValidatorSetId: 'u64'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$N = {
    rpc: {},
    types: {
      CollectiveOrigin: {
        _enum: {
          Members: '(MemberCount, MemberCount)',
          Member: 'AccountId'
        }
      },
      MemberCount: 'u32',
      ProposalIndex: 'u32',
      VotesTo230: {
        index: 'ProposalIndex',
        threshold: 'MemberCount',
        ayes: 'Vec<AccountId>',
        nays: 'Vec<AccountId>'
      },
      Votes: {
        index: 'ProposalIndex',
        threshold: 'MemberCount',
        ayes: 'Vec<AccountId>',
        nays: 'Vec<AccountId>',
        end: 'BlockNumber'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$M = {
    rpc: {},
    types: {
      AuthorityId: 'AccountId',
      RawVRFOutput: '[u8; 32]'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var rpc$2 = {
    call: {
      description: 'Executes a call to a contract',
      params: [{
        name: 'callRequest',
        type: 'ContractCallRequest'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'ContractExecResult'
    },
    instantiate: {
      description: 'Instantiate a new contract',
      params: [{
        name: 'request',
        type: 'InstantiateRequest'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHstoric: true,
        isOptional: true
      }],
      type: 'ContractInstantiateResult'
    },
    uploadCode: {
      // The RPC here is terribly misnamed - somebody forgot how the RPCs
      // are actually done, ie. <module>_<camelCasedMethod>
      endpoint: 'contracts_upload_code',
      description: 'Upload new code without instantiating a contract from it',
      params: [{
        name: 'uploadRequest',
        type: 'CodeUploadRequest'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHstoric: true,
        isOptional: true
      }],
      type: 'CodeUploadResult'
    },
    getStorage: {
      description: 'Returns the value under a specified storage key in a contract',
      params: [{
        name: 'address',
        type: 'AccountId'
      }, {
        name: 'key',
        type: 'H256'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Option<Bytes>'
    },
    rentProjection: {
      description: 'Returns the projected time a given contract will be able to sustain paying its rent',
      params: [{
        name: 'address',
        type: 'AccountId'
      }, {
        name: 'at',
        type: 'BlockHash',
        isHistoric: true,
        isOptional: true
      }],
      type: 'Option<BlockNumber>'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  var definitions$L = {
    rpc: rpc$2,
    types: {
      AliveContractInfo: {
        trieId: 'TrieId',
        storageSize: 'u32',
        pairCount: 'u32',
        codeHash: 'CodeHash',
        rentAllowance: 'Balance',
        rentPaid: 'Balance',
        deductBlock: 'BlockNumber',
        lastWrite: 'Option<BlockNumber>',
        _reserved: 'Option<Null>'
      },
      CodeHash: 'Hash',
      CodeSource: {
        _enum: {
          Upload: 'Bytes',
          Existing: 'Hash'
        }
      },
      CodeUploadRequest: {
        origin: 'AccountId',
        code: 'Bytes',
        storageDepositLimit: 'Option<Balance>'
      },
      CodeUploadResult: 'Result<CodeUploadResultValue, DispatchError>',
      CodeUploadResultValue: {
        codeHash: 'CodeHash',
        deposit: 'Balance'
      },
      ContractCallRequest: {
        origin: 'AccountId',
        dest: 'AccountId',
        value: 'Balance',
        gasLimit: 'u64',
        storageDepositLimit: 'Option<Balance>',
        inputData: 'Bytes'
      },
      ContractExecResultSuccessTo255: {
        status: 'u8',
        data: 'Raw'
      },
      ContractExecResultTo255: {
        _enum: {
          Success: 'ContractExecResultSuccessTo255',
          Error: 'Null'
        }
      },
      ContractExecResultSuccessTo260: {
        flags: 'ContractReturnFlags',
        data: 'Bytes',
        gasConsumed: 'u64'
      },
      ContractExecResultTo260: {
        _enum: {
          Success: 'ContractExecResultSuccessTo260',
          Error: 'Null'
        }
      },
      ContractExecResultOk: {
        flags: 'ContractReturnFlags',
        data: 'Bytes'
      },
      ContractExecResultResult: 'Result<ContractExecResultOk, DispatchError>',
      ContractExecResultTo267: {
        gasConsumed: 'u64',
        debugMessage: 'Text',
        result: 'ContractExecResultResult'
      },
      ContractExecResult: {
        gasConsumed: 'u64',
        gasRequired: 'u64',
        storageDeposit: 'StorageDeposit',
        debugMessage: 'Text',
        result: 'ContractExecResultResult'
      },
      ContractInfo: {
        _enum: {
          Alive: 'AliveContractInfo',
          Tombstone: 'TombstoneContractInfo'
        }
      },
      ContractCallFlags: {
        _set: {
          _bitLength: 32,
          ForwardInput: 0b00000001,
          CloneInput: 0b00000010,
          TailCall: 0b00000100,
          AllowReentry: 0b00001000
        }
      },
      ContractReturnFlags: {
        _set: {
          _bitLength: 32,
          Revert: 0x00000001
        }
      },
      ContractStorageKey: '[u8; 32]',
      DeletedContract: {
        pairCount: 'u32',
        trieId: 'TrieId'
      },
      ExecReturnValue: {
        flags: 'ContractReturnFlags',
        data: 'Bytes'
      },
      Gas: 'u64',
      HostFnWeightsTo264: {
        caller: 'Weight',
        address: 'Weight',
        gasLeft: 'Weight',
        balance: 'Weight',
        valueTransferred: 'Weight',
        minimumBalance: 'Weight',
        tombstoneDeposit: 'Weight',
        rentAllowance: 'Weight',
        blockNumber: 'Weight',
        now: 'Weight',
        weightToFee: 'Weight',
        gas: 'Weight',
        input: 'Weight',
        inputPerByte: 'Weight',
        return: 'Weight',
        returnPerByte: 'Weight',
        terminate: 'Weight',
        restoreTo: 'Weight',
        restoreToPerDelta: 'Weight',
        random: 'Weight',
        depositEvent: 'Weight',
        depositEventPerTopic: 'Weight',
        depositEventPerByte: 'Weight',
        setRentAllowance: 'Weight',
        setStorage: 'Weight',
        setStoragePerByte: 'Weight',
        clearStorage: 'Weight',
        getStorage: 'Weight',
        getStoragePerByte: 'Weight',
        transfer: 'Weight',
        call: 'Weight',
        callTransferSurcharge: 'Weight',
        callPerInputByte: 'Weight',
        callPerOutputByte: 'Weight',
        instantiate: 'Weight',
        instantiatePerInputByte: 'Weight',
        instantiatePerOutputByte: 'Weight',
        hashSha2256: 'Weight',
        hashSha2256PerByte: 'Weight',
        hashKeccak256: 'Weight',
        hashKeccak256PerByte: 'Weight',
        hashBlake2256: 'Weight',
        hashBlake2256PerByte: 'Weight',
        hashBlake2128: 'Weight',
        hashBlake2128PerByte: 'Weight'
      },
      HostFnWeights: {
        caller: 'Weight',
        address: 'Weight',
        gasLeft: 'Weight',
        balance: 'Weight',
        valueTransferred: 'Weight',
        minimumBalance: 'Weight',
        tombstoneDeposit: 'Weight',
        rentAllowance: 'Weight',
        blockNumber: 'Weight',
        now: 'Weight',
        weightToFee: 'Weight',
        gas: 'Weight',
        input: 'Weight',
        inputPerByte: 'Weight',
        return: 'Weight',
        returnPerByte: 'Weight',
        terminate: 'Weight',
        terminatePerCodeByte: 'Weight',
        restoreTo: 'Weight',
        restoreToPerCallerCodeByte: 'Weight',
        restoreToPerTombstoneCodeByte: 'Weight',
        restoreToPerDelta: 'Weight',
        random: 'Weight',
        depositEvent: 'Weight',
        depositEventPerTopic: 'Weight',
        depositEventPerByte: 'Weight',
        setRentAllowance: 'Weight',
        setStorage: 'Weight',
        setStoragePerByte: 'Weight',
        clearStorage: 'Weight',
        getStorage: 'Weight',
        getStoragePerByte: 'Weight',
        transfer: 'Weight',
        call: 'Weight',
        callPerCodeByte: 'Weight',
        callTransferSurcharge: 'Weight',
        callPerInputByte: 'Weight',
        callPerOutputByte: 'Weight',
        instantiate: 'Weight',
        instantiatePerCodeByte: 'Weight',
        instantiatePerInputByte: 'Weight',
        instantiatePerOutputByte: 'Weight',
        instantiatePerSaltByte: 'Weight',
        hashSha2256: 'Weight',
        hashSha2256PerByte: 'Weight',
        hashKeccak256: 'Weight',
        hashKeccak256PerByte: 'Weight',
        hashBlake2256: 'Weight',
        hashBlake2256PerByte: 'Weight',
        hashBlake2128: 'Weight',
        hashBlake2128PerByte: 'Weight',
        rentParams: 'Weight'
      },
      InstantiateRequestV1: {
        origin: 'AccountId',
        value: 'Balance',
        gasLimit: 'Gas',
        code: 'Bytes',
        data: 'Bytes',
        salt: 'Bytes'
      },
      InstantiateRequestV2: {
        _fallback: 'InstantiateRequestV1',
        origin: 'AccountId',
        value: 'Balance',
        gasLimit: 'Gas',
        storageDepositLimit: 'Option<Balance>',
        code: 'Bytes',
        data: 'Bytes',
        salt: 'Bytes'
      },
      InstantiateRequest: {
        _fallback: 'InstantiateRequestV2',
        origin: 'AccountId',
        value: 'Balance',
        gasLimit: 'Gas',
        storageDepositLimit: 'Option<Balance>',
        code: 'CodeSource',
        data: 'Bytes',
        salt: 'Bytes'
      },
      ContractInstantiateResultTo267: 'Result<InstantiateReturnValueTo267, Null>',
      ContractInstantiateResultTo299: 'Result<InstantiateReturnValueOk, Null>',
      ContractInstantiateResult: {
        _fallback: 'ContractInstantiateResultTo299',
        gasConsumed: 'u64',
        gasRequired: 'u64',
        storageDeposit: 'StorageDeposit',
        debugMessage: 'Text',
        result: 'InstantiateReturnValue'
      },
      InstantiateReturnValueTo267: {
        result: 'ExecReturnValue',
        accountId: 'AccountId',
        rentProjection: 'Option<RentProjection>'
      },
      InstantiateReturnValueOk: {
        result: 'ExecReturnValue',
        accountId: 'AccountId'
      },
      InstantiateReturnValue: 'Result<InstantiateReturnValueOk, DispatchError>',
      InstructionWeights: {
        i64const: 'u32',
        i64load: 'u32',
        i64store: 'u32',
        select: 'u32',
        rIf: 'u32',
        br: 'u32',
        brIf: 'u32',
        brIable: 'u32',
        brIablePerEntry: 'u32',
        call: 'u32',
        callIndirect: 'u32',
        callIndirectPerParam: 'u32',
        localGet: 'u32',
        localSet: 'u32',
        local_tee: 'u32',
        globalGet: 'u32',
        globalSet: 'u32',
        memoryCurrent: 'u32',
        memoryGrow: 'u32',
        i64clz: 'u32',
        i64ctz: 'u32',
        i64popcnt: 'u32',
        i64eqz: 'u32',
        i64extendsi32: 'u32',
        i64extendui32: 'u32',
        i32wrapi64: 'u32',
        i64eq: 'u32',
        i64ne: 'u32',
        i64lts: 'u32',
        i64ltu: 'u32',
        i64gts: 'u32',
        i64gtu: 'u32',
        i64les: 'u32',
        i64leu: 'u32',
        i64ges: 'u32',
        i64geu: 'u32',
        i64add: 'u32',
        i64sub: 'u32',
        i64mul: 'u32',
        i64divs: 'u32',
        i64divu: 'u32',
        i64rems: 'u32',
        i64remu: 'u32',
        i64and: 'u32',
        i64or: 'u32',
        i64xor: 'u32',
        i64shl: 'u32',
        i64shrs: 'u32',
        i64shru: 'u32',
        i64rotl: 'u32',
        i64rotr: 'u32'
      },
      LimitsTo264: {
        eventTopics: 'u32',
        stackHeight: 'u32',
        globals: 'u32',
        parameters: 'u32',
        memoryPages: 'u32',
        tableSize: 'u32',
        brTableSize: 'u32',
        subjectLen: 'u32',
        codeSize: 'u32'
      },
      Limits: {
        eventTopics: 'u32',
        stackHeight: 'u32',
        globals: 'u32',
        parameters: 'u32',
        memoryPages: 'u32',
        tableSize: 'u32',
        brTableSize: 'u32',
        subjectLen: 'u32'
      },
      PrefabWasmModule: {
        scheduleVersion: 'Compact<u32>',
        initial: 'Compact<u32>',
        maximum: 'Compact<u32>',
        refcount: 'Compact<u64>',
        _reserved: 'Option<Null>',
        code: 'Bytes',
        originalCodeLen: 'u32'
      },
      RentProjection: {
        _enum: {
          EvictionAt: 'BlockNumber',
          NoEviction: 'Null'
        }
      },
      ScheduleTo212: {
        version: 'u32',
        putCodePerByteCost: 'Gas',
        growMemCost: 'Gas',
        regularOpCost: 'Gas',
        returnDataPerByteCost: 'Gas',
        eventDataPerByteCost: 'Gas',
        eventPerTopicCost: 'Gas',
        eventBaseCost: 'Gas',
        sandboxDataReadCost: 'Gas',
        sandboxDataWriteCost: 'Gas',
        maxEventTopics: 'u32',
        maxStackHeight: 'u32',
        maxMemoryPages: 'u32',
        enablePrintln: 'bool',
        maxSubjectLen: 'u32'
      },
      ScheduleTo258: {
        version: 'u32',
        putCodePerByteCost: 'Gas',
        growMemCost: 'Gas',
        regularOpCost: 'Gas',
        returnDataPerByteCost: 'Gas',
        eventDataPerByteCost: 'Gas',
        eventPerTopicCost: 'Gas',
        eventBaseCost: 'Gas',
        sandboxDataReadCost: 'Gas',
        sandboxDataWriteCost: 'Gas',
        transferCost: 'Gas',
        maxEventTopics: 'u32',
        maxStackHeight: 'u32',
        maxMemoryPages: 'u32',
        enablePrintln: 'bool',
        maxSubjectLen: 'u32'
      },
      ScheduleTo264: {
        version: 'u32',
        enablePrintln: 'bool',
        limits: 'LimitsTo264',
        instructionWeights: 'InstructionWeights',
        hostFnWeights: 'HostFnWeightsTo264'
      },
      Schedule: {
        version: 'u32',
        enablePrintln: 'bool',
        limits: 'Limits',
        instructionWeights: 'InstructionWeights',
        hostFnWeights: 'HostFnWeights'
      },
      SeedOf: 'Hash',
      StorageDeposit: {
        _enum: {
          Refund: 'Balance',
          Charge: 'Balance'
        }
      },
      TombstoneContractInfo: 'Hash',
      TrieId: 'Bytes'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const AllConvictions = [// 0.1x votes, unlocked.
  'None', // 1x votes, locked for an enactment period following a successful vote.
  'Locked1x', // 2x votes, locked for 2x enactment periods following a successful vote.
  'Locked2x', // 3x votes, locked for 4x...
  'Locked3x', // 4x votes, locked for 8x...
  'Locked4x', // 5x votes, locked for 16x...
  'Locked5x', /// 6x votes, locked for 32x...
  'Locked6x'];
  var definitions$K = {
    rpc: {},
    types: {
      AccountVote: {
        _enum: {
          Standard: 'AccountVoteStandard',
          Split: 'AccountVoteSplit'
        }
      },
      AccountVoteSplit: {
        aye: 'Balance',
        nay: 'Balance'
      },
      AccountVoteStandard: {
        vote: 'Vote',
        balance: 'Balance'
      },
      Conviction: {
        _enum: AllConvictions
      },
      Delegations: {
        votes: 'Balance',
        capital: 'Balance'
      },
      PreimageStatus: {
        _enum: {
          Missing: 'BlockNumber',
          Available: 'PreimageStatusAvailable'
        }
      },
      PreimageStatusAvailable: {
        data: 'Bytes',
        provider: 'AccountId',
        deposit: 'Balance',
        since: 'BlockNumber',
        expiry: 'Option<BlockNumber>'
      },
      PriorLock: '(BlockNumber, Balance)',
      PropIndex: 'u32',
      Proposal: 'Call',
      ProxyState: {
        _enum: {
          Open: 'AccountId',
          Active: 'AccountId'
        }
      },
      ReferendumIndex: 'u32',
      ReferendumInfoTo239: {
        end: 'BlockNumber',
        proposalHash: 'Hash',
        threshold: 'VoteThreshold',
        delay: 'BlockNumber'
      },
      ReferendumInfo: {
        _enum: {
          Ongoing: 'ReferendumStatus',
          Finished: 'ReferendumInfoFinished'
        }
      },
      ReferendumInfoFinished: {
        approved: 'bool',
        end: 'BlockNumber'
      },
      ReferendumStatus: {
        end: 'BlockNumber',
        proposalHash: 'Hash',
        threshold: 'VoteThreshold',
        delay: 'BlockNumber',
        tally: 'Tally'
      },
      Tally: {
        ayes: 'Balance',
        nays: 'Balance',
        turnout: 'Balance'
      },
      Voting: {
        _enum: {
          Direct: 'VotingDirect',
          Delegating: 'VotingDelegating'
        }
      },
      VotingDirect: {
        votes: 'Vec<VotingDirectVote>',
        delegations: 'Delegations',
        prior: 'PriorLock'
      },
      VotingDirectVote: '(ReferendumIndex, AccountVote)',
      VotingDelegating: {
        balance: 'Balance',
        target: 'AccountId',
        conviction: 'Conviction',
        delegations: 'Delegations',
        prior: 'PriorLock'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$J = {
    rpc: {
      getBlockStats: {
        description: 'Reexecute the specified `block_hash` and gather statistics while doing so',
        params: [{
          name: 'at',
          type: 'Hash',
          isHistoric: true
        }],
        type: 'Option<BlockStats>'
      }
    },
    types: {
      BlockStats: {
        witnessLen: 'u64',
        witnessCompactLen: 'u64',
        blockLen: 'u64',
        blockNumExtrinsics: 'u64'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$I = {
    rpc: {},
    types: {
      ApprovalFlag: 'u32',
      DefunctVoter: {
        who: 'AccountId',
        voteCount: 'Compact<u32>',
        candidateCount: 'Compact<u32>'
      },
      Renouncing: {
        _enum: {
          Member: 'Null',
          RunnerUp: 'Null',
          Candidate: 'Compact<u32>'
        }
      },
      SetIndex: 'u32',
      Vote: 'GenericVote',
      VoteIndex: 'u32',
      VoterInfo: {
        lastActive: 'VoteIndex',
        lastWin: 'VoteIndex',
        pot: 'Balance',
        stake: 'Balance'
      },
      VoteThreshold: {
        _enum: ['Super Majority Approve', 'Super Majority Against', 'Simple Majority']
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$H = {
    rpc: {
      createBlock: {
        description: 'Instructs the manual-seal authorship task to create a new block',
        params: [{
          name: 'createEmpty',
          type: 'bool'
        }, {
          name: 'finalize',
          type: 'bool'
        }, {
          name: 'parentHash',
          type: 'BlockHash',
          isOptional: true
        }],
        type: 'CreatedBlock'
      },
      finalizeBlock: {
        description: 'Instructs the manual-seal authorship task to finalize a block',
        params: [{
          name: 'hash',
          type: 'BlockHash'
        }, {
          name: 'justification',
          type: 'Justification',
          isOptional: true
        }],
        type: 'bool'
      }
    },
    types: {
      CreatedBlock: {
        _alias: {
          blockHash: 'hash'
        },
        blockHash: 'BlockHash',
        aux: 'ImportedAux'
      },
      ImportedAux: {
        headerOnly: 'bool',
        clearJustificationRequests: 'bool',
        needsJustification: 'bool',
        badJustification: 'bool',
        needsFinalityProof: 'bool',
        isNewBest: 'bool'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$G = {
    rpc: {},
    types: {
      EvmAccount: {
        nonce: 'u256',
        balance: 'u256'
      },
      EvmLog: {
        address: 'H160',
        topics: 'Vec<H256>',
        data: 'Bytes'
      },
      EvmVicinity: {
        gasPrice: 'u256',
        origin: 'H160'
      },
      ExitError: {
        _enum: {
          StackUnderflow: 'Null',
          StackOverflow: 'Null',
          InvalidJump: 'Null',
          InvalidRange: 'Null',
          DesignatedInvalid: 'Null',
          CallTooDeep: 'Null',
          CreateCollision: 'Null',
          CreateContractLimit: 'Null',
          OutOfOffset: 'Null',
          OutOfGas: 'Null',
          OutOfFund: 'Null',
          PCUnderflow: 'Null',
          CreateEmpty: 'Null',
          Other: 'Text'
        }
      },
      ExitFatal: {
        _enum: {
          NotSupported: 'Null',
          UnhandledInterrupt: 'Null',
          CallErrorAsFatal: 'ExitError',
          Other: 'Text'
        }
      },
      ExitReason: {
        _enum: {
          Succeed: 'ExitSucceed',
          Error: 'ExitError',
          Revert: 'ExitRevert',
          Fatal: 'ExitFatal'
        }
      },
      ExitRevert: {
        _enum: ['Reverted']
      },
      ExitSucceed: {
        _enum: ['Stopped', 'Returned', 'Suicided']
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$F = {
    rpc: {},
    types: {
      Extrinsic: 'GenericExtrinsic',
      ExtrinsicEra: 'GenericExtrinsicEra',
      ExtrinsicPayload: 'GenericExtrinsicPayload',
      ExtrinsicSignature: 'MultiSignature',
      ExtrinsicV4: 'GenericExtrinsicV4',
      ExtrinsicPayloadV4: 'GenericExtrinsicPayloadV4',
      ExtrinsicSignatureV4: 'GenericExtrinsicSignatureV4',
      ExtrinsicUnknown: 'GenericExtrinsicUnknown',
      ExtrinsicPayloadUnknown: 'GenericExtrinsicPayloadUnknown',
      // eras
      Era: 'ExtrinsicEra',
      ImmortalEra: 'GenericImmortalEra',
      MortalEra: 'GenericMortalEra',
      // signatures & signer
      AnySignature: 'H512',
      MultiSignature: {
        _enum: {
          Ed25519: 'Ed25519Signature',
          Sr25519: 'Sr25519Signature',
          Ecdsa: 'EcdsaSignature'
        }
      },
      Signature: 'H512',
      SignerPayload: 'GenericSignerPayload',
      EcdsaSignature: '[u8; 65]',
      Ed25519Signature: 'H512',
      Sr25519Signature: 'H512'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$E = {
    rpc: {},
    types: {
      AssetOptions: {
        initalIssuance: 'Compact<Balance>',
        permissions: 'PermissionLatest'
      },
      Owner: {
        _enum: {
          None: 'Null',
          Address: 'AccountId'
        }
      },
      PermissionsV1: {
        update: 'Owner',
        mint: 'Owner',
        burn: 'Owner'
      },
      PermissionVersions: {
        _enum: {
          V1: 'PermissionsV1'
        }
      },
      PermissionLatest: 'PermissionsV1'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$D = {
    rpc: {},
    types: {
      ActiveGilt: {
        proportion: 'Perquintill',
        amount: 'Balance',
        who: 'AccountId',
        expiry: 'BlockNumber'
      },
      ActiveGiltsTotal: {
        frozen: 'Balance',
        proportion: 'Perquintill',
        index: 'ActiveIndex',
        target: 'Perquintill'
      },
      ActiveIndex: 'u32',
      GiltBid: {
        amount: 'Balance',
        who: 'AccountId'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$C = {
    rpc: {
      proveFinality: {
        description: 'Prove finality for the given block number, returning the Justification for the last block in the set.',
        params: [{
          name: 'blockNumber',
          type: 'BlockNumber'
        }],
        type: 'Option<EncodedFinalityProofs>'
      },
      roundState: {
        description: 'Returns the state of the current best round state as well as the ongoing background rounds',
        params: [],
        type: 'ReportedRoundStates'
      },
      subscribeJustifications: {
        description: 'Subscribes to grandpa justifications',
        params: [],
        pubsub: ['justifications', 'subscribeJustifications', 'unsubscribeJustifications'],
        type: 'JustificationNotification'
      }
    },
    types: {
      AuthorityIndex: 'u64',
      AuthorityList: 'Vec<NextAuthority>',
      AuthoritySet: {
        currentAuthorities: 'AuthorityList',
        setId: 'u64',
        pendingStandardChanges: 'ForkTreePendingChange',
        pendingForcedChanges: 'Vec<PendingChange>',
        authoritySetChanges: 'AuthoritySetChanges'
      },
      ForkTreePendingChange: {
        roots: 'Vec<ForkTreePendingChangeNode>',
        bestFinalizedNumber: 'Option<BlockNumber>'
      },
      ForkTreePendingChangeNode: {
        hash: 'BlockHash',
        number: 'BlockNumber',
        data: 'PendingChange',
        // actual data, here PendingChange
        children: 'Vec<ForkTreePendingChangeNode>'
      },
      AuthoritySetChange: '(U64, BlockNumber)',
      AuthoritySetChanges: 'Vec<AuthoritySetChange>',
      AuthorityWeight: 'u64',
      DelayKind: {
        _enum: {
          Finalized: 'Null',
          Best: 'DelayKindBest'
        }
      },
      DelayKindBest: {
        medianLastFinalized: 'BlockNumber'
      },
      EncodedFinalityProofs: 'Bytes',
      GrandpaEquivocation: {
        _enum: {
          Prevote: 'GrandpaEquivocationValue',
          Precommit: 'GrandpaEquivocationValue'
        }
      },
      GrandpaEquivocationProof: {
        setId: 'SetId',
        equivocation: 'GrandpaEquivocation'
      },
      GrandpaEquivocationValue: {
        roundNumber: 'u64',
        identity: 'AuthorityId',
        first: '(GrandpaPrevote, AuthoritySignature)',
        second: '(GrandpaPrevote, AuthoritySignature)'
      },
      GrandpaPrevote: {
        targetHash: 'Hash',
        targetNumber: 'BlockNumber'
      },
      GrandpaCommit: {
        targetHash: 'BlockHash',
        targetNumber: 'BlockNumber',
        precommits: 'Vec<GrandpaSignedPrecommit>'
      },
      GrandpaPrecommit: {
        targetHash: 'BlockHash',
        targetNumber: 'BlockNumber'
      },
      GrandpaSignedPrecommit: {
        precommit: 'GrandpaPrecommit',
        signature: 'AuthoritySignature',
        id: 'AuthorityId'
      },
      GrandpaJustification: {
        round: 'u64',
        commit: 'GrandpaCommit',
        votesAncestries: 'Vec<Header>'
      },
      JustificationNotification: 'Bytes',
      KeyOwnerProof: 'MembershipProof',
      NextAuthority: '(AuthorityId, AuthorityWeight)',
      PendingChange: {
        nextAuthorities: 'AuthorityList',
        delay: 'BlockNumber',
        canonHeight: 'BlockNumber',
        canonHash: 'BlockHash',
        delayKind: 'DelayKind'
      },
      PendingPause: {
        scheduledAt: 'BlockNumber',
        delay: 'BlockNumber'
      },
      PendingResume: {
        scheduledAt: 'BlockNumber',
        delay: 'BlockNumber'
      },
      Precommits: {
        currentWeight: 'u32',
        missing: 'BTreeSet<AuthorityId>'
      },
      Prevotes: {
        currentWeight: 'u32',
        missing: 'BTreeSet<AuthorityId>'
      },
      ReportedRoundStates: {
        setId: 'u32',
        best: 'RoundState',
        background: 'Vec<RoundState>'
      },
      RoundState: {
        round: 'u32',
        totalWeight: 'u32',
        thresholdWeight: 'u32',
        prevotes: 'Prevotes',
        precommits: 'Precommits'
      },
      SetId: 'u64',
      StoredPendingChange: {
        scheduledAt: 'BlockNumber',
        delay: 'BlockNumber',
        nextAuthorities: 'AuthorityList'
      },
      StoredState: {
        _enum: {
          Live: 'Null',
          PendingPause: 'PendingPause',
          Paused: 'Null',
          PendingResume: 'PendingResume'
        }
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$B = {
    rpc: {},
    types: {
      IdentityFields: {
        _set: {
          _bitLength: 64,
          // Mapped here to 32 bits, in Rust these are 64-bit values
          Display: 0b00000000000000000000000000000001,
          Legal: 0b00000000000000000000000000000010,
          Web: 0b00000000000000000000000000000100,
          Riot: 0b00000000000000000000000000001000,
          Email: 0b00000000000000000000000000010000,
          PgpFingerprint: 0b00000000000000000000000000100000,
          Image: 0b00000000000000000000000001000000,
          Twitter: 0b00000000000000000000000010000000
        }
      },
      IdentityInfoAdditional: '(Data, Data)',
      IdentityInfoTo198: {
        additional: 'Vec<IdentityInfoAdditional>',
        display: 'Data',
        legal: 'Data',
        web: 'Data',
        riot: 'Data',
        email: 'Data',
        pgpFingerprint: 'Option<H160>',
        image: 'Data'
      },
      IdentityInfo: {
        _fallback: 'IdentityInfoTo198',
        additional: 'Vec<IdentityInfoAdditional>',
        display: 'Data',
        legal: 'Data',
        web: 'Data',
        riot: 'Data',
        email: 'Data',
        pgpFingerprint: 'Option<H160>',
        image: 'Data',
        twitter: 'Data'
      },
      IdentityJudgement: {
        _enum: {
          Unknown: 'Null',
          FeePaid: 'Balance',
          Reasonable: 'Null',
          KnownGood: 'Null',
          OutOfDate: 'Null',
          LowQuality: 'Null',
          Erroneous: 'Null'
        }
      },
      RegistrationJudgement: '(RegistrarIndex, IdentityJudgement)',
      RegistrationTo198: {
        judgements: 'Vec<RegistrationJudgement>',
        deposit: 'Balance',
        info: 'IdentityInfoTo198'
      },
      Registration: {
        _fallback: 'RegistrationTo198',
        judgements: 'Vec<RegistrationJudgement>',
        deposit: 'Balance',
        info: 'IdentityInfo'
      },
      RegistrarIndex: 'u32',
      RegistrarInfo: {
        account: 'AccountId',
        fee: 'Balance',
        fields: 'IdentityFields'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$A = {
    rpc: {},
    types: {
      AuthIndex: 'u32',
      AuthoritySignature: 'Signature',
      Heartbeat: {
        blockNumber: 'BlockNumber',
        networkState: 'OpaqueNetworkState',
        sessionIndex: 'SessionIndex',
        authorityIndex: 'AuthIndex',
        validatorsLen: 'u32'
      },
      HeartbeatTo244: {
        blockNumber: 'BlockNumber',
        networkState: 'OpaqueNetworkState',
        sessionIndex: 'SessionIndex',
        authorityIndex: 'AuthIndex'
      },
      OpaqueMultiaddr: 'Bytes',
      OpaquePeerId: 'Bytes',
      OpaqueNetworkState: {
        peerId: 'OpaquePeerId',
        externalAddresses: 'Vec<OpaqueMultiaddr>'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$z = {
    rpc: {},
    types: {
      CallIndex: '(u8, u8)',
      LotteryConfig: {
        price: 'Balance',
        start: 'BlockNumber',
        length: 'BlockNumber',
        delay: 'BlockNumber',
        repeat: 'bool'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$y = {
    rpc: {
      generateBatchProof: {
        description: 'Generate MMR proof for the given leaf indices.',
        params: [{
          name: 'leafIndices',
          type: 'Vec<u64>'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'MmrLeafProof'
      },
      generateProof: {
        description: 'Generate MMR proof for given leaf index.',
        params: [{
          name: 'leafIndex',
          type: 'u64'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'MmrLeafBatchProof'
      }
    },
    types: {
      MmrLeafBatchProof: {
        blockHash: 'BlockHash',
        leaves: 'Bytes',
        proof: 'Bytes'
      },
      MmrLeafProof: {
        blockHash: 'BlockHash',
        leaf: 'Bytes',
        proof: 'Bytes'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$x = {
    rpc: {},
    types: {
      DeferredOffenceOf: '(Vec<OffenceDetails>, Vec<Perbill>, SessionIndex)',
      Kind: '[u8; 16]',
      OffenceDetails: {
        offender: 'Offender',
        reporters: 'Vec<Reporter>'
      },
      Offender: 'IdentificationTuple',
      OpaqueTimeSlot: 'Bytes',
      ReportIdOf: 'Hash',
      Reporter: 'AccountId'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$w = {
    rpc: {},
    types: {
      ProxyDefinition: {
        delegate: 'AccountId',
        proxyType: 'ProxyType',
        delay: 'BlockNumber'
      },
      ProxyType: {
        _enum: ['Any', 'NonTransfer', 'Governance', 'Staking']
      },
      ProxyAnnouncement: {
        real: 'AccountId',
        callHash: 'Hash',
        height: 'BlockNumber'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$v = {
    rpc: {},
    types: {
      ActiveRecovery: {
        created: 'BlockNumber',
        deposit: 'Balance',
        friends: 'Vec<AccountId>'
      },
      RecoveryConfig: {
        delayPeriod: 'BlockNumber',
        deposit: 'Balance',
        friends: 'Vec<AccountId>',
        threshold: 'u16'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$u = {
    rpc: {},
    types: {
      Period: '(BlockNumber, u32)',
      Priority: 'u8',
      SchedulePeriod: 'Period',
      SchedulePriority: 'Priority',
      Scheduled: {
        maybeId: 'Option<Bytes>',
        priority: 'SchedulePriority',
        call: 'Call',
        maybePeriodic: 'Option<SchedulePeriod>',
        origin: 'PalletsOrigin'
      },
      ScheduledTo254: {
        maybeId: 'Option<Bytes>',
        priority: 'SchedulePriority',
        call: 'Call',
        maybePeriodic: 'Option<SchedulePeriod>'
      },
      TaskAddress: '(BlockNumber, u32)'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // Defined in `node/runtime/src/lib.rs` as follow
  //   impl_opaque_keys! {
  //     pub struct SessionKeys {
  // Here we revert to tuples to keep the interfaces "opaque", as per the use

  const keyTypes = {
    // key for beefy
    BeefyKey: '[u8; 33]',
    // default to Substrate master defaults, 4 keys (polkadot master, 5 keys)
    Keys: 'SessionKeys4',
    SessionKeys1: '(AccountId)',
    SessionKeys2: '(AccountId, AccountId)',
    SessionKeys3: '(AccountId, AccountId, AccountId)',
    SessionKeys4: '(AccountId, AccountId, AccountId, AccountId)',
    SessionKeys5: '(AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys6: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys6B: '(AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys7: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys7B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys8: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys8B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys9: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys9B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)',
    SessionKeys10: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId)',
    SessionKeys10B: '(AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, AccountId, BeefyKey)'
  };
  var definitions$t = {
    rpc: {},
    types: objectSpread({}, keyTypes, {
      FullIdentification: 'Exposure',
      IdentificationTuple: '(ValidatorId, FullIdentification)',
      MembershipProof: {
        session: 'SessionIndex',
        trieNodes: 'Vec<Vec<u8>>',
        validatorCount: 'ValidatorCount'
      },
      SessionIndex: 'u32',
      ValidatorCount: 'u32'
    })
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$s = {
    rpc: {},
    types: {
      Bid: {
        who: 'AccountId',
        kind: 'BidKind',
        value: 'Balance'
      },
      BidKind: {
        _enum: {
          Deposit: 'Balance',
          Vouch: '(AccountId, Balance)'
        }
      },
      // a society-specific Judgement (not the same as identity Judgement)
      SocietyJudgement: {
        _enum: ['Rebid', 'Reject', 'Approve']
      },
      // a society-specific Vote
      SocietyVote: {
        _enum: ['Skeptic', 'Reject', 'Approve']
      },
      StrikeCount: 'u32',
      VouchingStatus: {
        _enum: ['Vouching', 'Banned']
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const deprecated = {
    Points: 'u32',
    EraPoints: {
      total: 'Points',
      individual: 'Vec<Points>'
    }
  };
  const phragmen = {
    CompactAssignments: 'CompactAssignmentsWith16',
    CompactAssignmentsWith16: {
      votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
      votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
      votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
      votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
      votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
      votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
      votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
      votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
      votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
      votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
      votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
      votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
      votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
      votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
      votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
      votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>'
    },
    CompactAssignmentsWith24: {
      votes1: 'Vec<(NominatorIndexCompact, ValidatorIndexCompact)>',
      votes2: 'Vec<(NominatorIndexCompact, CompactScoreCompact, ValidatorIndexCompact)>',
      votes3: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 2], ValidatorIndexCompact)>',
      votes4: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 3], ValidatorIndexCompact)>',
      votes5: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 4], ValidatorIndexCompact)>',
      votes6: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 5], ValidatorIndexCompact)>',
      votes7: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 6], ValidatorIndexCompact)>',
      votes8: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 7], ValidatorIndexCompact)>',
      votes9: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 8], ValidatorIndexCompact)>',
      votes10: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 9], ValidatorIndexCompact)>',
      votes11: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 10], ValidatorIndexCompact)>',
      votes12: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 11], ValidatorIndexCompact)>',
      votes13: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 12], ValidatorIndexCompact)>',
      votes14: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 13], ValidatorIndexCompact)>',
      votes15: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 14], ValidatorIndexCompact)>',
      votes16: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 15], ValidatorIndexCompact)>',
      votes17: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 16], ValidatorIndexCompact)>',
      votes18: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 17], ValidatorIndexCompact)>',
      votes19: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 18], ValidatorIndexCompact)>',
      votes20: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 19], ValidatorIndexCompact)>',
      votes21: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 20], ValidatorIndexCompact)>',
      votes22: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 21], ValidatorIndexCompact)>',
      votes23: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 22], ValidatorIndexCompact)>',
      votes24: 'Vec<(NominatorIndexCompact, [CompactScoreCompact; 23], ValidatorIndexCompact)>'
    },
    CompactAssignmentsTo265: 'CompactAssignmentsWith16',
    CompactAssignmentsTo257: {
      votes1: 'Vec<(NominatorIndex, [CompactScore; 0], ValidatorIndex)>',
      votes2: 'Vec<(NominatorIndex, [CompactScore; 1], ValidatorIndex)>',
      votes3: 'Vec<(NominatorIndex, [CompactScore; 2], ValidatorIndex)>',
      votes4: 'Vec<(NominatorIndex, [CompactScore; 3], ValidatorIndex)>',
      votes5: 'Vec<(NominatorIndex, [CompactScore; 4], ValidatorIndex)>',
      votes6: 'Vec<(NominatorIndex, [CompactScore; 5], ValidatorIndex)>',
      votes7: 'Vec<(NominatorIndex, [CompactScore; 6], ValidatorIndex)>',
      votes8: 'Vec<(NominatorIndex, [CompactScore; 7], ValidatorIndex)>',
      votes9: 'Vec<(NominatorIndex, [CompactScore; 8], ValidatorIndex)>',
      votes10: 'Vec<(NominatorIndex, [CompactScore; 9], ValidatorIndex)>',
      votes11: 'Vec<(NominatorIndex, [CompactScore; 10], ValidatorIndex)>',
      votes12: 'Vec<(NominatorIndex, [CompactScore; 11], ValidatorIndex)>',
      votes13: 'Vec<(NominatorIndex, [CompactScore; 12], ValidatorIndex)>',
      votes14: 'Vec<(NominatorIndex, [CompactScore; 13], ValidatorIndex)>',
      votes15: 'Vec<(NominatorIndex, [CompactScore; 14], ValidatorIndex)>',
      votes16: 'Vec<(NominatorIndex, [CompactScore; 15], ValidatorIndex)>'
    },
    CompactScore: '(ValidatorIndex, OffchainAccuracy)',
    CompactScoreCompact: '(ValidatorIndexCompact, OffchainAccuracyCompact)',
    ElectionCompute: {
      // in previous versions the last entry was "AuthorityId"
      // (since no data attached, and it is via SCALE can rename)
      _enum: ['OnChain', 'Signed', 'Unsigned']
    },
    ElectionPhase: {
      _enum: {
        Off: null,
        Signed: null,
        Unsigned: '(bool, BlockNumber)',
        Emergency: null
      }
    },
    ElectionResult: {
      compute: 'ElectionCompute',
      slotStake: 'Balance',
      electedStashes: 'Vec<AccountId>',
      exposures: 'Vec<(AccountId, Exposure)>'
    },
    ElectionScore: '[u128; 3]',
    ElectionSize: {
      validators: 'Compact<ValidatorIndex>',
      nominators: 'Compact<NominatorIndex>'
    },
    ElectionStatus: {
      _enum: {
        Close: 'Null',
        Open: 'BlockNumber'
      }
    },
    ExtendedBalance: 'u128',
    RawSolution: 'RawSolutionWith16',
    RawSolutionWith16: {
      compact: 'CompactAssignmentsWith16',
      score: 'ElectionScore',
      round: 'u32'
    },
    RawSolutionWith24: {
      compact: 'CompactAssignmentsWith24',
      score: 'ElectionScore',
      round: 'u32'
    },
    RawSolutionTo265: 'RawSolutionWith16',
    ReadySolution: {
      supports: 'SolutionSupports',
      score: 'ElectionScore',
      compute: 'ElectionCompute'
    },
    RoundSnapshot: {
      voters: 'Vec<(AccountId, VoteWeight, Vec<AccountId>)>',
      targets: 'Vec<AccountId>'
    },
    SeatHolder: {
      who: 'AccountId',
      stake: 'Balance',
      deposit: 'Balance'
    },
    SignedSubmission: {
      _fallback: 'SignedSubmissionTo276',
      who: 'AccountId',
      deposit: 'Balance',
      solution: 'RawSolution',
      reward: 'Balance'
    },
    SignedSubmissionTo276: {
      who: 'AccountId',
      deposit: 'Balance',
      solution: 'RawSolution'
    },
    SignedSubmissionOf: 'SignedSubmission',
    SolutionOrSnapshotSize: {
      voters: 'Compact<u32>',
      targets: 'Compact<u32>'
    },
    SolutionSupport: {
      total: 'ExtendedBalance',
      voters: 'Vec<(AccountId, ExtendedBalance)>'
    },
    SolutionSupports: 'Vec<(AccountId, SolutionSupport)>',
    Supports: 'SolutionSupports',
    SubmissionIndicesOf: 'BTreeMap<ElectionScore, u32>',
    Voter: {
      votes: 'Vec<AccountId>',
      stake: 'Balance',
      deposit: 'Balance'
    },
    VoteWeight: 'u64'
  };
  var definitions$r = {
    rpc: {},
    types: objectSpread({}, deprecated, phragmen, {
      ActiveEraInfo: {
        index: 'EraIndex',
        start: 'Option<Moment>'
      },
      EraIndex: 'u32',
      EraRewardPoints: {
        total: 'RewardPoint',
        individual: 'BTreeMap<AccountId, RewardPoint>'
      },
      EraRewards: {
        total: 'u32',
        rewards: 'Vec<u32>'
      },
      Exposure: {
        total: 'Compact<Balance>',
        own: 'Compact<Balance>',
        others: 'Vec<IndividualExposure>'
      },
      Forcing: {
        _enum: ['NotForcing', 'ForceNew', 'ForceNone', 'ForceAlways']
      },
      IndividualExposure: {
        who: 'AccountId',
        value: 'Compact<Balance>'
      },
      KeyType: 'AccountId',
      MomentOf: 'Moment',
      Nominations: {
        targets: 'Vec<AccountId>',
        submittedIn: 'EraIndex',
        suppressed: 'bool'
      },
      NominatorIndex: 'u32',
      NominatorIndexCompact: 'Compact<NominatorIndex>',
      OffchainAccuracy: 'PerU16',
      OffchainAccuracyCompact: 'Compact<OffchainAccuracy>',
      PhragmenScore: '[u128; 3]',
      Points: 'u32',
      RewardDestination: {
        _enum: {
          Staked: 'Null',
          Stash: 'Null',
          Controller: 'Null',
          Account: 'AccountId',
          None: 'Null'
        }
      },
      RewardPoint: 'u32',
      SlashJournalEntry: {
        who: 'AccountId',
        amount: 'Balance',
        ownSlash: 'Balance'
      },
      SlashingSpansTo204: {
        spanIndex: 'SpanIndex',
        lastStart: 'EraIndex',
        prior: 'Vec<EraIndex>'
      },
      SlashingSpans: {
        spanIndex: 'SpanIndex',
        lastStart: 'EraIndex',
        lastNonzeroSlash: 'EraIndex',
        prior: 'Vec<EraIndex>'
      },
      SpanIndex: 'u32',
      SpanRecord: {
        slashed: 'Balance',
        paidOut: 'Balance'
      },
      StakingLedgerTo223: {
        stash: 'AccountId',
        total: 'Compact<Balance>',
        active: 'Compact<Balance>',
        unlocking: 'Vec<UnlockChunk>'
      },
      StakingLedgerTo240: {
        stash: 'AccountId',
        total: 'Compact<Balance>',
        active: 'Compact<Balance>',
        unlocking: 'Vec<UnlockChunk>',
        lastReward: 'Option<EraIndex>'
      },
      StakingLedger: {
        stash: 'AccountId',
        total: 'Compact<Balance>',
        active: 'Compact<Balance>',
        unlocking: 'Vec<UnlockChunk>',
        claimedRewards: 'Vec<EraIndex>'
      },
      UnappliedSlashOther: '(AccountId, Balance)',
      UnappliedSlash: {
        validator: 'AccountId',
        own: 'Balance',
        others: 'Vec<UnappliedSlashOther>',
        reporters: 'Vec<AccountId>',
        payout: 'Balance'
      },
      UnlockChunk: {
        value: 'Compact<Balance>',
        era: 'Compact<BlockNumber>'
      },
      ValidatorIndex: 'u16',
      ValidatorIndexCompact: 'Compact<ValidatorIndex>',
      ValidatorPrefs: 'ValidatorPrefsWithBlocked',
      ValidatorPrefsWithCommission: {
        commission: 'Compact<Perbill>'
      },
      ValidatorPrefsWithBlocked: {
        commission: 'Compact<Perbill>',
        blocked: 'bool'
      },
      ValidatorPrefsTo196: {
        validatorPayment: 'Compact<Balance>'
      },
      ValidatorPrefsTo145: {
        unstakeThreshold: 'Compact<u32>',
        validatorPayment: 'Compact<Balance>'
      }
    })
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$q = {
    rpc: {},
    types: {
      WeightToFeeCoefficient: {
        coeffInteger: 'Balance',
        coeffFrac: 'Perbill',
        negative: 'bool',
        degree: 'u8'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$p = {
    rpc: {
      genSyncSpec: {
        endpoint: 'sync_state_genSyncSpec',
        description: 'Returns the json-serialized chainspec running the node, with a sync state.',
        params: [{
          name: 'raw',
          type: 'bool'
        }],
        type: 'Json'
      }
    },
    types: {}
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // As per frontier
  const rpc$1 = {
    accountNextIndex: {
      alias: ['account_nextIndex'],
      description: 'Retrieves the next accountIndex as available on the node',
      params: [{
        name: 'accountId',
        type: 'AccountId'
      }],
      type: 'Index'
    },
    addLogFilter: {
      description: 'Adds the supplied directives to the current log filter',
      params: [{
        name: 'directives',
        type: 'Text'
      }],
      type: 'Null'
    },
    addReservedPeer: {
      description: 'Adds a reserved peer',
      params: [{
        name: 'peer',
        type: 'Text'
      }],
      type: 'Text'
    },
    chain: {
      description: 'Retrieves the chain',
      params: [],
      type: 'Text'
    },
    chainType: {
      description: 'Retrieves the chain type',
      params: [],
      type: 'ChainType'
    },
    dryRun: {
      alias: ['system_dryRunAt'],
      description: 'Dry run an extrinsic at a given block',
      params: [{
        name: 'extrinsic',
        type: 'Bytes'
      }, {
        isHistoric: true,
        isOptional: true,
        name: 'at',
        type: 'BlockHash'
      }],
      type: 'ApplyExtrinsicResult'
    },
    health: {
      description: 'Return health status of the node',
      noErrorLog: true,
      params: [],
      type: 'Health'
    },
    localListenAddresses: {
      description: 'The addresses include a trailing /p2p/ with the local PeerId, and are thus suitable to be passed to addReservedPeer or as a bootnode address for example',
      params: [],
      type: 'Vec<Text>'
    },
    localPeerId: {
      description: 'Returns the base58-encoded PeerId of the node',
      params: [],
      type: 'Text'
    },
    name: {
      description: 'Retrieves the node name',
      params: [],
      type: 'Text'
    },
    networkState: {
      alias: ['system_unstable_networkState'],
      description: 'Returns current state of the network',
      params: [],
      type: 'NetworkState'
    },
    nodeRoles: {
      description: 'Returns the roles the node is running as',
      params: [],
      type: 'Vec<NodeRole>'
    },
    peers: {
      description: 'Returns the currently connected peers',
      params: [],
      type: 'Vec<PeerInfo>'
    },
    properties: {
      description: 'Get a custom set of properties as a JSON object, defined in the chain spec',
      params: [],
      type: 'ChainProperties'
    },
    removeReservedPeer: {
      description: 'Remove a reserved peer',
      params: [{
        name: 'peerId',
        type: 'Text'
      }],
      type: 'Text'
    },
    reservedPeers: {
      description: 'Returns the list of reserved peers',
      params: [],
      type: 'Vec<Text>'
    },
    resetLogFilter: {
      description: 'Resets the log filter to Substrate defaults',
      params: [],
      type: 'Null'
    },
    syncState: {
      description: 'Returns the state of the syncing of the node',
      params: [],
      type: 'SyncState'
    },
    version: {
      description: 'Retrieves the version of the node',
      params: [],
      type: 'Text'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  var definitions$o = {
    rpc: rpc$1,
    types: {
      AccountInfo: 'AccountInfoWithTripleRefCount',
      AccountInfoWithRefCountU8: {
        nonce: 'Index',
        refcount: 'u8',
        data: 'AccountData'
      },
      AccountInfoWithRefCount: {
        _fallback: 'AccountInfoWithRefCountU8',
        nonce: 'Index',
        refcount: 'RefCount',
        data: 'AccountData'
      },
      AccountInfoWithDualRefCount: {
        _fallback: 'AccountInfoWithRefCount',
        nonce: 'Index',
        consumers: 'RefCount',
        providers: 'RefCount',
        data: 'AccountData'
      },
      // original naming
      AccountInfoWithProviders: 'AccountInfoWithDualRefCount',
      AccountInfoWithTripleRefCount: {
        _fallback: 'AccountInfoWithDualRefCount',
        nonce: 'Index',
        consumers: 'RefCount',
        providers: 'RefCount',
        sufficients: 'RefCount',
        data: 'AccountData'
      },
      ApplyExtrinsicResult: 'Result<DispatchOutcome, TransactionValidityError>',
      ArithmeticError: {
        _enum: ['Underflow', 'Overflow', 'DivisionByZero']
      },
      BlockLength: {
        max: 'PerDispatchClassU32'
      },
      BlockWeights: {
        baseBlock: 'Weight',
        maxBlock: 'Weight',
        perClass: 'PerDispatchClassWeightsPerClass'
      },
      ChainProperties: 'GenericChainProperties',
      ChainType: {
        _enum: {
          Development: 'Null',
          Local: 'Null',
          Live: 'Null',
          Custom: 'Text'
        }
      },
      ConsumedWeight: 'PerDispatchClassWeight',
      DigestOf: 'Digest',
      DispatchClass: {
        _enum: ['Normal', 'Operational', 'Mandatory']
      },
      DispatchError: {
        _enum: {
          Other: 'Null',
          CannotLookup: 'Null',
          BadOrigin: 'Null',
          Module: 'DispatchErrorModule',
          ConsumerRemaining: 'Null',
          NoProviders: 'Null',
          TooManyConsumers: 'Null',
          Token: 'TokenError',
          Arithmetic: 'ArithmeticError',
          Transactional: 'TransactionalError'
        }
      },
      DispatchErrorModuleU8: {
        index: 'u8',
        error: 'u8'
      },
      DispatchErrorModuleU8a: {
        index: 'u8',
        error: '[u8; 4]'
      },
      DispatchErrorModule: 'DispatchErrorModuleU8a',
      DispatchErrorTo198: {
        module: 'Option<u8>',
        error: 'u8'
      },
      DispatchInfo: {
        weight: 'Weight',
        class: 'DispatchClass',
        paysFee: 'Pays'
      },
      DispatchInfoTo190: {
        weight: 'Weight',
        class: 'DispatchClass'
      },
      DispatchInfoTo244: {
        weight: 'Weight',
        class: 'DispatchClass',
        paysFee: 'bool'
      },
      DispatchOutcome: 'Result<(), DispatchError>',
      DispatchResult: 'Result<(), DispatchError>',
      DispatchResultOf: 'DispatchResult',
      DispatchResultTo198: 'Result<(), Text>',
      Event: 'GenericEvent',
      EventId: '[u8; 2]',
      EventIndex: 'u32',
      EventRecord: {
        phase: 'Phase',
        event: 'Event',
        topics: 'Vec<Hash>'
      },
      Health: {
        peers: 'u64',
        isSyncing: 'bool',
        shouldHavePeers: 'bool'
      },
      InvalidTransaction: {
        _enum: {
          Call: 'Null',
          Payment: 'Null',
          Future: 'Null',
          Stale: 'Null',
          BadProof: 'Null',
          AncientBirthBlock: 'Null',
          ExhaustsResources: 'Null',
          Custom: 'u8',
          BadMandatory: 'Null',
          MandatoryDispatch: 'Null'
        }
      },
      Key: 'Bytes',
      LastRuntimeUpgradeInfo: {
        specVersion: 'Compact<u32>',
        specName: 'Text'
      },
      NetworkState: {
        peerId: 'Text',
        listenedAddresses: 'Vec<Text>',
        externalAddresses: 'Vec<Text>',
        connectedPeers: 'HashMap<Text, Peer>',
        notConnectedPeers: 'HashMap<Text, NotConnectedPeer>',
        averageDownloadPerSec: 'u64',
        averageUploadPerSec: 'u64',
        peerset: 'NetworkStatePeerset'
      },
      NetworkStatePeerset: {
        messageQueue: 'u64',
        nodes: 'HashMap<Text, NetworkStatePeersetInfo>'
      },
      NetworkStatePeersetInfo: {
        connected: 'bool',
        reputation: 'i32'
      },
      NodeRole: {
        _enum: {
          Full: 'Null',
          LightClient: 'Null',
          Authority: 'Null',
          UnknownRole: 'u8'
        }
      },
      NotConnectedPeer: {
        knownAddresses: 'Vec<Text>',
        latestPingTime: 'Option<PeerPing>',
        versionString: 'Option<Text>'
      },
      Peer: {
        enabled: 'bool',
        endpoint: 'PeerEndpoint',
        knownAddresses: 'Vec<Text>',
        latestPingTime: 'PeerPing',
        open: 'bool',
        versionString: 'Text'
      },
      PeerEndpoint: {
        listening: 'PeerEndpointAddr'
      },
      PeerEndpointAddr: {
        _alias: {
          localAddr: 'local_addr',
          sendBackAddr: 'send_back_addr'
        },
        localAddr: 'Text',
        sendBackAddr: 'Text'
      },
      PeerPing: {
        nanos: 'u64',
        secs: 'u64'
      },
      PeerInfo: {
        peerId: 'Text',
        roles: 'Text',
        protocolVersion: 'u32',
        bestHash: 'Hash',
        bestNumber: 'BlockNumber'
      },
      PerDispatchClassU32: {
        normal: 'u32',
        operational: 'u32',
        mandatory: 'u32'
      },
      PerDispatchClassWeight: {
        normal: 'Weight',
        operational: 'Weight',
        mandatory: 'Weight'
      },
      PerDispatchClassWeightsPerClass: {
        normal: 'WeightPerClass',
        operational: 'WeightPerClass',
        mandatory: 'WeightPerClass'
      },
      Phase: {
        _enum: {
          ApplyExtrinsic: 'u32',
          Finalization: 'Null',
          Initialization: 'Null'
        }
      },
      RawOrigin: {
        _enum: {
          Root: 'Null',
          Signed: 'AccountId',
          None: 'Null'
        }
      },
      RefCount: 'u32',
      RefCountTo259: 'u8',
      SyncState: {
        startingBlock: 'BlockNumber',
        currentBlock: 'BlockNumber',
        highestBlock: 'Option<BlockNumber>'
      },
      SystemOrigin: 'RawOrigin',
      TokenError: {
        _enum: ['NoFunds', 'WouldDie', 'BelowMinimum', 'CannotCreate', 'UnknownAsset', 'Frozen', 'Unsupported', // these are dropped, but still in older versions
        // (if this adjusts, will need to take a re-look)
        'Underflow', 'Overflow']
      },
      TransactionValidityError: {
        _enum: {
          Invalid: 'InvalidTransaction',
          Unknown: 'UnknownTransaction'
        }
      },
      TransactionalError: {
        _enum: ['LimitReached', 'NoLayer']
      },
      UnknownTransaction: {
        _enum: {
          CannotLookup: 'Null',
          NoUnsignedValidator: 'Null',
          Custom: 'u8'
        }
      },
      WeightPerClass: {
        baseExtrinsic: 'Weight',
        maxExtrinsic: 'Option<Weight>',
        maxTotal: 'Option<Weight>',
        reserved: 'Option<Weight>'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$n = {
    rpc: {},
    types: {
      Bounty: {
        proposer: 'AccountId',
        value: 'Balance',
        fee: 'Balance',
        curatorDeposit: 'Balance',
        bond: 'Balance',
        status: 'BountyStatus'
      },
      BountyIndex: 'u32',
      BountyStatus: {
        _enum: {
          Proposed: 'Null',
          Approved: 'Null',
          Funded: 'Null',
          CuratorProposed: 'BountyStatusCuratorProposed',
          Active: 'BountyStatusActive',
          PendingPayout: 'BountyStatusPendingPayout'
        }
      },
      BountyStatusActive: {
        curator: 'AccountId',
        updateDue: 'BlockNumber'
      },
      BountyStatusCuratorProposed: {
        curator: 'AccountId'
      },
      BountyStatusPendingPayout: {
        curator: 'AccountId',
        beneficiary: 'AccountId',
        unlockAt: 'BlockNumber'
      },
      OpenTip: {
        reason: 'Hash',
        who: 'AccountId',
        finder: 'AccountId',
        deposit: 'Balance',
        closes: 'Option<BlockNumber>',
        tips: 'Vec<OpenTipTip>',
        findersFee: 'bool'
      },
      OpenTipTo225: {
        reason: 'Hash',
        who: 'AccountId',
        finder: 'Option<OpenTipFinderTo225>',
        closes: 'Option<BlockNumber>',
        tips: 'Vec<OpenTipTip>'
      },
      OpenTipFinderTo225: '(AccountId, Balance)',
      OpenTipTip: '(AccountId, Balance)',
      TreasuryProposal: {
        proposer: 'AccountId',
        value: 'Balance',
        beneficiary: 'AccountId',
        bond: 'Balance'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  var definitions$m = {
    rpc: {},
    types: {
      Multiplier: 'Fixed128'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$l = {
    rpc: {},
    types: {
      ClassId: 'u32',
      InstanceId: 'u32',
      DepositBalance: 'Balance',
      DepositBalanceOf: 'Balance',
      ClassDetails: {
        owner: 'AccountId',
        issuer: 'AccountId',
        admin: 'AccountId',
        freezer: 'AccountId',
        totalDeposit: 'DepositBalance',
        freeHolding: 'bool',
        instances: 'u32',
        instanceMetadatas: 'u32',
        attributes: 'u32',
        isFrozen: 'bool'
      },
      DestroyWitness: {
        instances: 'Compact<u32>',
        instanceMetadatas: 'Compact<u32>',
        attributes: 'Compact<u32>'
      },
      InstanceDetails: {
        owner: 'AccountId',
        approved: 'Option<AccountId>',
        isFrozen: 'bool',
        deposit: 'DepositBalance'
      },
      ClassMetadata: {
        deposit: 'DepositBalance',
        data: 'Vec<u8>',
        isFrozen: 'bool'
      },
      InstanceMetadata: {
        deposit: 'DepositBalance',
        data: 'Vec<u8>',
        isFrozen: 'bool'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$k = {
    rpc: {},
    types: {
      Multisig: {
        when: 'Timepoint',
        deposit: 'Balance',
        depositor: 'AccountId',
        approvals: 'Vec<AccountId>'
      },
      Timepoint: {
        height: 'BlockNumber',
        index: 'u32'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$j = {
    rpc: {},
    types: {
      VestingInfo: {
        locked: 'Balance',
        perBlock: 'Balance',
        startingBlock: 'BlockNumber'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$i = {
    rpc: {},
    types: {
      BlockAttestations: {
        receipt: 'CandidateReceipt',
        valid: 'Vec<AccountId>',
        invalid: 'Vec<AccountId>'
      },
      IncludedBlocks: {
        actualNumber: 'BlockNumber',
        session: 'SessionIndex',
        randomSeed: 'H256',
        activeParachains: 'Vec<ParaId>',
        paraBlocks: 'Vec<Hash>'
      },
      MoreAttestations: {}
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$h = {
    rpc: {},
    types: {
      BridgedBlockHash: 'H256',
      BridgedBlockNumber: 'BlockNumber',
      BridgedHeader: 'Header',
      BridgeMessageId: '(LaneId, MessageNonce)',
      CallOrigin: {
        _enum: {
          SourceRoot: 'Null',
          TargetAccount: '(AccountId, MultiSigner, MultiSignature)',
          SourceAccount: 'AccountId'
        }
      },
      ChainId: '[u8; 4]',
      DeliveredMessages: {
        begin: 'MessageNonce',
        end: 'MessageNonce',
        // pub type DispatchResultsBitVec = BitVec<Msb0, u8>;
        dispatchResults: 'BitVec'
      },
      DispatchFeePayment: {
        _enum: ['AtSourceChain', 'AtTargetChain']
      },
      InboundLaneData: {
        relayers: 'Vec<UnrewardedRelayer>',
        lastConfirmedNonce: 'MessageNonce'
      },
      InboundRelayer: 'AccountId',
      InitializationData: {
        header: 'Header',
        authorityList: 'AuthorityList',
        setId: 'SetId',
        isHalted: 'bool'
      },
      LaneId: '[u8; 4]',
      MessageData: {
        payload: 'Bytes',
        fee: 'Balance'
      },
      MessagesDeliveryProofOf: {
        bridgedHeaderHash: 'BlockHash',
        storageProof: 'Vec<Bytes>',
        lane: 'LaneId'
      },
      MessageKey: {
        laneId: 'LaneId',
        nonce: 'MessageNonce'
      },
      MessageNonce: 'u64',
      MessagesProofOf: {
        bridgedHeaderHash: 'BridgedBlockHash',
        storageProof: 'Vec<Bytes>',
        lane: 'LaneId',
        noncesStart: 'MessageNonce',
        noncesEnd: 'MessageNonce'
      },
      OperatingMode: {
        _enum: ['Normal', 'RejectingOutboundMessages', 'Halted']
      },
      OutboundLaneData: {
        oldestUnprunedNonce: 'MessageNonce',
        latestReceivedNonce: 'MessageNonce',
        latestGeneratedNonce: 'MessageNonce'
      },
      OutboundMessageFee: 'Balance',
      OutboundPayload: {
        specVersion: 'u32',
        weight: 'Weight',
        origin: 'CallOrigin',
        dispatchFeePayment: 'DispatchFeePayment',
        call: 'Bytes'
      },
      Parameter: 'Null',
      RelayerId: 'AccountId',
      UnrewardedRelayer: {
        relayer: 'RelayerId',
        messages: 'DeliveredMessages'
      },
      UnrewardedRelayersState: {
        unrewardedRelayer_Entries: 'MessageNonce',
        messagesInOldestEntry: 'MessageNonce',
        totalMessages: 'MessageNonce'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$g = {
    rpc: {},
    types: {
      StatementKind: {
        _enum: ['Regular', 'Saft']
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$f = {
    rpc: {},
    types: {
      FundIndex: 'u32',
      LastContribution: {
        _enum: {
          Never: 'Null',
          PreEnding: 'u32',
          Ending: 'BlockNumber'
        }
      },
      FundInfo: {
        depositor: 'AccountId',
        verifier: 'Option<MultiSigner>',
        deposit: 'Balance',
        raised: 'Balance',
        end: 'BlockNumber',
        cap: 'Balance',
        lastContribution: 'LastContribution',
        firstPeriod: 'LeasePeriod',
        lastPeriod: 'LeasePeriod',
        trieIndex: 'TrieIndex'
      },
      TrieIndex: 'u32'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const dmpQueue = {
    ConfigData: {
      maxIndividual: 'Weight'
    },
    MessageId: '[u8; 32]',
    OverweightIndex: 'u64',
    PageCounter: 'u32',
    PageIndexData: {
      beginUsed: 'PageCounter',
      endUsed: 'PageCounter',
      overweightCount: 'OverweightIndex'
    }
  };
  var definitions$e = {
    rpc: {},
    types: dmpQueue
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var hrmpTypes = {
    HrmpChannel: {
      maxCapacity: 'u32',
      maxTotalSize: 'u32',
      maxMessageSize: 'u32',
      msgCount: 'u32',
      totalSize: 'u32',
      mqcHead: 'Option<Hash>',
      senderDeposit: 'Balance',
      recipientDeposit: 'Balance'
    },
    HrmpChannelId: {
      sender: 'u32',
      receiver: 'u32'
    },
    HrmpOpenChannelRequest: {
      confirmed: 'bool',
      age: 'SessionIndex',
      senderDeposit: 'Balance',
      maxMessageSize: 'u32',
      maxCapacity: 'u32',
      maxTotalSize: 'u32'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors

  /* eslint-disable sort-keys */

  const SlotRange10 = {
    _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'OneOne', 'OneTwo', 'OneThree', 'TwoTwo', 'TwoThree', 'ThreeThree']
  };
  const SlotRange = {
    _enum: ['ZeroZero', 'ZeroOne', 'ZeroTwo', 'ZeroThree', 'ZeroFour', 'ZeroFive', 'ZeroSix', 'ZeroSeven', 'OneOne', 'OneTwo', 'OneThree', 'OneFour', 'OneFive', 'OneSix', 'OneSeven', 'TwoTwo', 'TwoThree', 'TwoFour', 'TwoFive', 'TwoSix', 'TwoSeven', 'ThreeThree', 'ThreeFour', 'ThreeFive', 'ThreeSix', 'ThreeSeven', 'FourFour', 'FourFive', 'FourSix', 'FourSeven', 'FiveFive', 'FiveSix', 'FiveSeven', 'SixSix', 'SixSeven', 'SevenSeven']
  };
  const oldTypes = {
    Bidder: {
      _enum: {
        New: 'NewBidder',
        Existing: 'ParaId'
      }
    },
    IncomingParachain: {
      _enum: {
        Unset: 'NewBidder',
        Fixed: 'IncomingParachainFixed',
        Deploy: 'IncomingParachainDeploy'
      }
    },
    IncomingParachainDeploy: {
      code: 'ValidationCode',
      initialHeadData: 'HeadData'
    },
    IncomingParachainFixed: {
      codeHash: 'Hash',
      codeSize: 'u32',
      initialHeadData: 'HeadData'
    },
    NewBidder: {
      who: 'AccountId',
      sub: 'SubId'
    },
    SubId: 'u32'
  };
  var slotTypes = objectSpread({}, oldTypes, {
    AuctionIndex: 'u32',
    LeasePeriod: 'BlockNumber',
    LeasePeriodOf: 'BlockNumber',
    SlotRange10,
    SlotRange,
    WinningData10: `[WinningDataEntry; ${SlotRange10._enum.length}]`,
    WinningData: `[WinningDataEntry; ${SlotRange._enum.length}]`,
    WinningDataEntry: 'Option<(AccountId, ParaId, BalanceOf)>',
    WinnersData10: 'Vec<WinnersDataTuple10>',
    WinnersData: 'Vec<WinnersDataTuple>',
    WinnersDataTuple10: '(AccountId, ParaId, BalanceOf, SlotRange10)',
    WinnersDataTuple: '(AccountId, ParaId, BalanceOf, SlotRange)'
  });

  // Copyright 2017-2022 @polkadot/types authors & contributors

  const proposeTypes = {
    ParachainProposal: {
      proposer: 'AccountId',
      genesisHead: 'HeadData',
      validators: 'Vec<ValidatorId>',
      name: 'Bytes',
      balance: 'Balance'
    },
    RegisteredParachainInfo: {
      validators: 'Vec<ValidatorId>',
      proposer: 'AccountId'
    }
  };
  const cumulusTypes = {
    ServiceQuality: {
      _enum: ['Ordered', 'Fast']
    }
  };
  const disputeTypes = {
    DisputeLocation: {
      _enum: ['Local', 'Remote']
    },
    DisputeResult: {
      _enum: ['Valid', 'Invalid']
    },
    DisputeState: {
      validatorsFor: 'BitVec',
      validatorsAgainst: 'BitVec',
      start: 'BlockNumber',
      concludedAt: 'Option<BlockNumber>'
    },
    DisputeStatement: {
      _enum: {
        Valid: 'ValidDisputeStatementKind',
        Invalid: 'InvalidDisputeStatementKind'
      }
    },
    DisputeStatementSet: {
      candidateHash: 'CandidateHash',
      session: 'SessionIndex',
      statements: 'Vec<(DisputeStatement, ParaValidatorIndex, ValidatorSignature)>'
    },
    ExplicitDisputeStatement: {
      valid: 'bool',
      candidateHash: 'CandidateHash',
      session: 'SessionIndex'
    },
    InvalidDisputeStatementKind: {
      _enum: ['Explicit']
    },
    MultiDisputeStatementSet: 'Vec<DisputeStatementSet>',
    ValidDisputeStatementKind: {
      _enum: {
        Explicit: 'Null',
        BackingSeconded: 'Hash',
        BackingValid: 'Hash',
        ApprovalChecking: 'Null'
      }
    }
  };
  var definitions$d = {
    rpc: {},
    types: objectSpread({}, cumulusTypes, disputeTypes, hrmpTypes, proposeTypes, slotTypes, {
      AbridgedCandidateReceipt: {
        parachainIndex: 'ParaId',
        relayParent: 'Hash',
        headData: 'HeadData',
        collator: 'CollatorId',
        signature: 'CollatorSignature',
        povBlockHash: 'Hash',
        commitments: 'CandidateCommitments'
      },
      AbridgedHostConfiguration: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        maxUpwardQueueCount: 'u32',
        maxUpwardQueueSize: 'u32',
        maxUpwardMessageSize: 'u32',
        maxUpwardMessageNumPerCandidate: 'u32',
        hrmpMaxMessageNumPerCandidate: 'u32',
        validationUpgradeFrequency: 'BlockNumber',
        validationUpgradeDelay: 'BlockNumber'
      },
      AbridgedHrmpChannel: {
        maxCapacity: 'u32',
        maxTotalSize: 'u32',
        maxMessageSize: 'u32',
        msgCount: 'u32',
        totalSize: 'u32',
        mqcHead: 'Option<Hash>'
      },
      AssignmentId: 'AccountId',
      AssignmentKind: {
        _enum: {
          Parachain: 'Null',
          Parathread: '(CollatorId, u32)'
        }
      },
      AttestedCandidate: {
        candidate: 'AbridgedCandidateReceipt',
        validityVotes: 'Vec<ValidityAttestation>',
        validatorIndices: 'BitVec'
      },
      AuthorityDiscoveryId: 'AccountId',
      AvailabilityBitfield: 'BitVec',
      AvailabilityBitfieldRecord: {
        bitfield: 'AvailabilityBitfield',
        submittedTt: 'BlockNumber'
      },
      BackedCandidate: {
        candidate: 'CommittedCandidateReceipt',
        validityVotes: 'Vec<ValidityAttestation>',
        validatorIndices: 'BitVec'
      },
      BufferedSessionChange: {
        applyAt: 'BlockNumber',
        validators: 'Vec<ValidatorId>',
        queued: 'Vec<ValidatorId>',
        sessionIndex: 'SessionIndex'
      },
      CandidateCommitments: {
        upwardMessages: 'Vec<UpwardMessage>',
        horizontalMessages: 'Vec<OutboundHrmpMessage>',
        newValidationCode: 'Option<ValidationCode>',
        headData: 'HeadData',
        processedDownwardMessages: 'u32',
        hrmpWatermark: 'BlockNumber'
      },
      CandidateDescriptor: {
        paraId: 'ParaId',
        relayParent: 'RelayChainHash',
        collatorId: 'CollatorId',
        persistedValidationDataHash: 'Hash',
        povHash: 'Hash',
        erasureRoot: 'Hash',
        signature: 'CollatorSignature',
        paraHead: 'Hash',
        validationCodeHash: 'ValidationCodeHash'
      },
      CandidateHash: 'Hash',
      CandidateInfo: {
        who: 'AccountId',
        deposit: 'Balance'
      },
      CandidatePendingAvailability: {
        core: 'CoreIndex',
        hash: 'CandidateHash',
        descriptor: 'CandidateDescriptor',
        availabilityVotes: 'BitVec',
        backers: 'BitVec',
        relayParentNumber: 'BlockNumber',
        backedInNumber: 'BlockNumber',
        backingGroup: 'GroupIndex'
      },
      CandidateReceipt: {
        descriptor: 'CandidateDescriptor',
        commitmentsHash: 'Hash'
      },
      GlobalValidationData: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        blockNumber: 'BlockNumber'
      },
      CollatorId: 'H256',
      CollatorSignature: 'Signature',
      CommittedCandidateReceipt: {
        descriptor: 'CandidateDescriptor',
        commitments: 'CandidateCommitments'
      },
      CoreAssignment: {
        core: 'CoreIndex',
        paraId: 'ParaId',
        kind: 'AssignmentKind',
        groupIdx: 'GroupIndex'
      },
      CoreIndex: 'u32',
      CoreOccupied: {
        _enum: {
          Parathread: 'ParathreadEntry',
          Parachain: 'Null'
        }
      },
      DoubleVoteReport: {
        identity: 'ValidatorId',
        first: '(Statement, ValidatorSignature)',
        second: '(Statement, ValidatorSignature)',
        proof: 'MembershipProof',
        signingContext: 'SigningContext'
      },
      DownwardMessage: 'Bytes',
      GroupIndex: 'u32',
      GlobalValidationSchedule: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        blockNumber: 'BlockNumber'
      },
      HeadData: 'Bytes',
      HostConfiguration: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        maxUpwardQueueCount: 'u32',
        maxUpwardQueueSize: 'u32',
        maxUpwardMessageSize: 'u32',
        maxUpwardMessageNumPerCandidate: 'u32',
        hrmpMaxMessageNumPerCandidate: 'u32',
        validationUpgradeFrequency: 'BlockNumber',
        validationUpgradeDelay: 'BlockNumber',
        maxPovSize: 'u32',
        maxDownwardMessageSize: 'u32',
        preferredDispatchableUpwardMessagesStepWeight: 'Weight',
        hrmpMaxParachainOutboundChannels: 'u32',
        hrmpMaxParathreadOutboundChannels: 'u32',
        hrmpOpenRequestTtl: 'u32',
        hrmpSenderDeposit: 'Balance',
        hrmpRecipientDeposit: 'Balance',
        hrmpChannelMaxCapacity: 'u32',
        hrmpChannelMaxTotalSize: 'u32',
        hrmpMaxParachainInboundChannels: 'u32',
        hrmpMaxParathreadInboundChannels: 'u32',
        hrmpChannelMaxMessageSize: 'u32',
        codeRetentionPeriod: 'BlockNumber',
        parathreadCores: 'u32',
        parathreadRetries: 'u32',
        groupRotationFrequency: 'BlockNumber',
        chainAvailabilityPeriod: 'BlockNumber',
        threadAvailabilityPeriod: 'BlockNumber',
        schedulingLookahead: 'u32',
        maxValidatorsPerCore: 'Option<u32>',
        maxValidators: 'Option<u32>',
        disputePeriod: 'SessionIndex',
        disputePostConclusionAcceptancePeriod: 'BlockNumber',
        disputeMaxSpamSlots: 'u32',
        disputeConclusionByTimeOutPeriod: 'BlockNumber',
        noShowSlots: 'u32',
        nDelayTranches: 'u32',
        zerothDelayTrancheWidth: 'u32',
        neededApprovals: 'u32',
        relayVrfModuloSamples: 'u32'
      },
      InboundDownwardMessage: {
        pubSentAt: 'BlockNumber',
        pubMsg: 'DownwardMessage'
      },
      InboundHrmpMessage: {
        sentAt: 'BlockNumber',
        data: 'Bytes'
      },
      InboundHrmpMessages: 'Vec<InboundHrmpMessage>',
      LocalValidationData: {
        parentHead: 'HeadData',
        balance: 'Balance',
        codeUpgradeAllowed: 'Option<BlockNumber>'
      },
      MessageIngestionType: {
        downwardMessages: 'Vec<InboundDownwardMessage>',
        horizontalMessages: 'BTreeMap<ParaId, InboundHrmpMessages>'
      },
      MessageQueueChain: 'RelayChainHash',
      OutboundHrmpMessage: {
        recipient: 'u32',
        data: 'Bytes'
      },
      ParachainDispatchOrigin: {
        _enum: ['Signed', 'Parachain', 'Root']
      },
      ParachainInherentData: {
        validationData: 'PersistedValidationData',
        relayChainState: 'StorageProof',
        downwardMessages: 'Vec<InboundDownwardMessage>',
        horizontalMessages: 'BTreeMap<ParaId, VecInboundHrmpMessage>'
      },
      ParachainsInherentData: {
        bitfields: 'SignedAvailabilityBitfields',
        backedCandidates: 'Vec<BackedCandidate>',
        disputes: 'MultiDisputeStatementSet',
        parentHeader: 'Header'
      },
      ParaGenesisArgs: {
        genesisHead: 'Bytes',
        validationCode: 'Bytes',
        parachain: 'bool'
      },
      ParaId: 'u32',
      ParaInfo: {
        manager: 'AccountId',
        deposit: 'Balance',
        locked: 'bool'
      },
      ParaLifecycle: {
        _enum: ['Onboarding', 'Parathread', 'Parachain', 'UpgradingToParachain', 'DowngradingToParathread', 'OutgoingParathread', 'OutgoingParachain']
      },
      ParaPastCodeMeta: {
        upgradeTimes: 'Vec<ReplacementTimes>',
        lastPruned: 'Option<BlockNumber>'
      },
      ParaScheduling: {
        _enum: ['Always', 'Dynamic']
      },
      ParathreadClaim: '(ParaId, CollatorId)',
      ParathreadClaimQueue: {
        queue: 'Vec<QueuedParathread>',
        nextCoreOffset: 'u32'
      },
      ParathreadEntry: {
        claim: 'ParathreadClaim',
        retries: 'u32'
      },
      ParaValidatorIndex: 'u32',
      PersistedValidationData: {
        parentHead: 'HeadData',
        relayParentNumber: 'RelayChainBlockNumber',
        relayParentStorageRoot: 'Hash',
        maxPovSize: 'u32'
      },
      QueuedParathread: {
        claim: 'ParathreadEntry',
        coreOffset: 'u32'
      },
      RelayBlockNumber: 'u32',
      RelayChainBlockNumber: 'RelayBlockNumber',
      RelayHash: 'Hash',
      RelayChainHash: 'RelayHash',
      Remark: '[u8; 32]',
      ReplacementTimes: {
        expectedAt: 'BlockNumber',
        activatedAt: 'BlockNumber'
      },
      Retriable: {
        _enum: {
          Never: 'Null',
          WithRetries: 'u32'
        }
      },
      Scheduling: {
        _enum: ['Always', 'Dynamic']
      },
      SessionInfo: {
        validators: 'Vec<ValidatorId>',
        discoveryKeys: 'Vec<AuthorityDiscoveryId>',
        assignmentKeys: 'Vec<AssignmentId>',
        validatorGroups: 'Vec<SessionInfoValidatorGroup>',
        nCores: 'u32',
        zerothDelayTrancheWidth: 'u32',
        relayVrfModuloSamples: 'u32',
        nDelayTranches: 'u32',
        noShowSlots: 'u32',
        neededApprovals: 'u32'
      },
      SessionInfoValidatorGroup: 'Vec<ParaValidatorIndex>',
      SignedAvailabilityBitfield: {
        payload: 'BitVec',
        validatorIndex: 'ParaValidatorIndex',
        signature: 'ValidatorSignature'
      },
      SignedAvailabilityBitfields: 'Vec<SignedAvailabilityBitfield>',
      SigningContext: {
        sessionIndex: 'SessionIndex',
        parentHash: 'Hash'
      },
      Statement: {
        _enum: {
          Never: 'Null',
          // starts at 1
          Candidate: 'Hash',
          Valid: 'Hash',
          Invalid: 'Hash'
        }
      },
      TransientValidationData: {
        maxCodeSize: 'u32',
        maxHeadDataSize: 'u32',
        balance: 'Balance',
        codeUpgradeAllowed: 'Option<BlockNumber>',
        dmqLength: 'u32'
      },
      UpgradeGoAhead: {
        _enum: ['Abort', 'GoAhead']
      },
      UpgradeRestriction: {
        _enum: ['Present']
      },
      UpwardMessage: 'Bytes',
      ValidationFunctionParams: {
        maxCodeSize: 'u32',
        relayChainHeight: 'RelayChainBlockNumber',
        codeUpgradeAllowed: 'Option<RelayChainBlockNumber>'
      },
      ValidationCode: 'Bytes',
      ValidationCodeHash: 'Hash',
      ValidationData: {
        persisted: 'PersistedValidationData',
        transient: 'TransientValidationData'
      },
      ValidationDataType: {
        validationData: 'ValidationData',
        relayChainState: 'Vec<Bytes>'
      },
      ValidatorSignature: 'Signature',
      ValidityAttestation: {
        _enum: {
          Never: 'Null',
          // starts at 1
          Implicit: 'ValidatorSignature',
          Explicit: 'ValidatorSignature'
        }
      },
      MessagingStateSnapshot: {
        relayDispatchQueueSize: '(u32, u32)',
        egressChannels: 'Vec<MessagingStateSnapshotEgressEntry>'
      },
      MessagingStateSnapshotEgressEntry: '(ParaId, AbridgedHrmpChannel)',
      SystemInherentData: 'ParachainInherentData',
      VecInboundHrmpMessage: 'Vec<InboundHrmpMessage>'
    })
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$c = {
    rpc: {},
    types: {
      Approvals: '[bool; 4]'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$b = {
    rpc: {},
    types: {
      AccountStatus: {
        validity: 'AccountValidity',
        freeBalance: 'Balance',
        lockedBalance: 'Balance',
        signature: 'Vec<u8>',
        vat: 'Permill'
      },
      AccountValidity: {
        _enum: ['Invalid', 'Initiated', 'Pending', 'ValidLow', 'ValidHigh', 'Completed']
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types-create authors & contributors
  var others$2 = [packageInfo$1];

  // Copyright 2017-2022 @polkadot/types-create authors & contributors
  detectPackage(packageInfo, null, others$2);

  // Copyright 2017-2022 @polkadot/types-create authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  let TypeDefInfo;

  (function (TypeDefInfo) {
    TypeDefInfo[TypeDefInfo["BTreeMap"] = 0] = "BTreeMap";
    TypeDefInfo[TypeDefInfo["BTreeSet"] = 1] = "BTreeSet";
    TypeDefInfo[TypeDefInfo["Compact"] = 2] = "Compact";
    TypeDefInfo[TypeDefInfo["DoNotConstruct"] = 3] = "DoNotConstruct";
    TypeDefInfo[TypeDefInfo["Enum"] = 4] = "Enum";
    TypeDefInfo[TypeDefInfo["HashMap"] = 5] = "HashMap";
    TypeDefInfo[TypeDefInfo["Int"] = 6] = "Int";
    TypeDefInfo[TypeDefInfo["Linkage"] = 7] = "Linkage";
    TypeDefInfo[TypeDefInfo["Null"] = 8] = "Null";
    TypeDefInfo[TypeDefInfo["Option"] = 9] = "Option";
    TypeDefInfo[TypeDefInfo["Plain"] = 10] = "Plain";
    TypeDefInfo[TypeDefInfo["Range"] = 11] = "Range";
    TypeDefInfo[TypeDefInfo["RangeInclusive"] = 12] = "RangeInclusive";
    TypeDefInfo[TypeDefInfo["Result"] = 13] = "Result";
    TypeDefInfo[TypeDefInfo["Set"] = 14] = "Set";
    TypeDefInfo[TypeDefInfo["Si"] = 15] = "Si";
    TypeDefInfo[TypeDefInfo["Struct"] = 16] = "Struct";
    TypeDefInfo[TypeDefInfo["Tuple"] = 17] = "Tuple";
    TypeDefInfo[TypeDefInfo["UInt"] = 18] = "UInt";
    TypeDefInfo[TypeDefInfo["Vec"] = 19] = "Vec";
    TypeDefInfo[TypeDefInfo["VecFixed"] = 20] = "VecFixed";
    TypeDefInfo[TypeDefInfo["WrapperKeepOpaque"] = 21] = "WrapperKeepOpaque";
    TypeDefInfo[TypeDefInfo["WrapperOpaque"] = 22] = "WrapperOpaque";
  })(TypeDefInfo || (TypeDefInfo = {}));

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Empty template, auto-generated by @polkadot/dev
  var others$1 = [];

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  detectPackage(packageInfo$1, null, others$1);

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  function hasEq(o) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return isFunction$2(o.eq);
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  // when the second is an Codec[] that the first has to be as well

  function compareArray(a, b) {
    if (Array.isArray(b)) {
      return a.length === b.length && isUndefined$1(a.find((v, index) => hasEq(v) ? !v.eq(b[index]) : v !== b[index]));
    }

    return false;
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name AbstractArray
   * @description
   * This manages codec arrays. It is an extension to Array, providing
   * specific encoding/decoding on top of the base type.
   * @noInheritDoc
   */

  class AbstractArray extends Array {
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */
    static get [Symbol.species]() {
      return Array;
    }

    constructor(registry, length) {
      super(length);
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      // We need to loop through all entries since they may have a variable length themselves,
      // e.g. when a Vec or Compact is contained withing, it has a variable length based on data
      let total = compactToU8a(this.length).length;

      for (let i = 0; i < this.length; i++) {
        total += this[i].encodedLength;
      }

      return total;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.length === 0;
    }
    /**
     * @description The length of the value
     */


    get length() {
      // only included here since we ignore inherited docs
      return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareArray(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        inner: this.inspectInner(),
        outer: [compactToU8a(this.length)]
      };
    }

    inspectInner() {
      const inner = new Array(this.length);

      for (let i = 0; i < this.length; i++) {
        inner[i] = this[i].inspect();
      }

      return inner;
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */


    toArray() {
      return Array.from(this);
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      const result = new Array(this.length);

      for (let i = 0; i < this.length; i++) {
        result[i] = this[i].toHuman(isExtended);
      }

      return result;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      const result = new Array(this.length);

      for (let i = 0; i < this.length; i++) {
        result[i] = this[i].toJSON();
      }

      return result;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    /**
     * @description Returns the string representation of the value
     */
    toString() {
      const result = new Array(this.length);

      for (let i = 0; i < this.length; i++) {
        result[i] = this[i].toString();
      }

      return `[${result.join(', ')}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = this.toU8aInner();
      return isBare ? u8aConcatStrict(encoded) : u8aConcatStrict([compactToU8a(this.length), ...encoded]);
    }

    toU8aInner(isBare) {
      const encoded = new Array(this.length);

      for (let i = 0; i < this.length; i++) {
        encoded[i] = this[i].toU8a(isBare);
      }

      return encoded;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name Base
   * @description A type extends the Base class, when it holds a value
   */
  class AbstractBase {
    #raw;

    constructor(registry, value, initialU8aLength) {
      this.#raw = value;
      this.initialU8aLength = initialU8aLength;
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }

    get inner() {
      return this.#raw;
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.#raw.isEmpty;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return this.#raw.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return this.#raw.inspect();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */


    toHex(isLe) {
      return this.#raw.toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return this.#raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.#raw.toJSON();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.#raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return this.#raw.toU8a(isBare);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Base';
    }

    unwrap() {
      return this.#raw;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  const DEFAULT_UINT_BITS = 64; // Maximum allowed integer for JS is 2^53 - 1, set limit at 52
  // In this case however, we always print any >32 as hex

  const MAX_NUMBER_BITS = 52;
  const MUL_P = new BN(10000);
  const FORMATTERS = [['Perquintill', BN_QUINTILL], ['Perbill', BN_BILLION], ['Permill', BN_MILLION], ['Percent', BN_HUNDRED]];

  function toPercentage(value, divisor) {
    return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;
  }
  /** @internal */


  function decodeAbstractInt(value, isNegative) {
    if (isNumber$1(value)) {
      if (!Number.isInteger(value) || value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER) {
        throw new Error('Number needs to be an integer <= Number.MAX_SAFE_INTEGER, i.e. 2 ^ 53 - 1');
      }

      return value;
    } else if (isString$1(value)) {
      if (isHex(value, -1, true)) {
        return hexToBn(value, {
          isLe: false,
          isNegative
        }).toString();
      }

      if (value.includes('.') || value.includes(',') || value.includes('e')) {
        throw new Error('String should not contain decimal points or scientific notation');
      }

      return value;
    } else if (isBn(value)) {
      return value.toString();
    }

    return bnToBn(value).toString();
  }
  /**
   * @name AbstractInt
   * @ignore
   * @noInheritDoc
   */


  class AbstractInt extends BN {
    #bitLength;

    constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {
      // Construct via a string/number, which will be passed in the BN constructor.
      // It would be ideal to actually return a BN, but there is an issue:
      // https://github.com/indutny/bn.js/issues/206
      super( // shortcut isU8a as used in SCALE decoding
      isU8a(value) ? bitLength <= 48 ? u8aToNumber(value.subarray(0, bitLength / 8), {
        isNegative: isSigned
      }) : u8aToBn(value.subarray(0, bitLength / 8), {
        isLe: true,
        isNegative: isSigned
      }).toString() : decodeAbstractInt(value, isSigned));
      this.registry = registry;
      this.#bitLength = bitLength;
      this.encodedLength = this.#bitLength / 8;
      this.isUnsigned = !isSigned;
      const isNegative = this.isNeg();
      const maxBits = bitLength - (isSigned && !isNegative ? 1 : 0);

      if (isNegative && !isSigned) {
        throw new Error(`${this.toRawType()}: Negative number passed to unsigned type`);
      } else if (super.bitLength() > maxBits) {
        throw new Error(`${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${maxBits}`);
      }
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is a zero value (align elsewhere)
     */


    get isEmpty() {
      return this.isZero();
    }
    /**
     * @description Returns the number of bits in the value
     */


    bitLength() {
      return this.#bitLength;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any


    eq(other) {
      // Here we are actually overriding the built-in .eq to take care of both
      // number and BN inputs (no `.eqn` needed) - numbers will be converted
      return super.eq(isHex(other) ? hexToBn(other.toString(), {
        isLe: false,
        isNegative: !this.isUnsigned
      }) : bnToBn(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description True if this value is the max of the type
     */


    isMax() {
      const u8a = this.toU8a().filter(b => b === 0xff);
      return u8a.length === this.#bitLength / 8;
    }
    /**
     * @description Returns a BigInt representation of the number
     */


    toBigInt() {
      return BigInt(this.toString());
    }
    /**
     * @description Returns the BN representation of the number. (Compatibility)
     */


    toBn() {
      return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex(isLe = false) {
      // For display/JSON, this is BE, for compare, use isLe
      return bnToHex(this, {
        bitLength: this.bitLength(),
        isLe,
        isNegative: !this.isUnsigned
      });
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toHuman(isExpanded) {
      const rawType = this.toRawType();

      if (rawType === 'Balance') {
        return this.isMax() ? 'everything' // FIXME In the case of multiples we need some way of detecting which instance this belongs
        // to. as it stands we will always format (incorrectly) against the first token defined
        : formatBalance(this, {
          decimals: this.registry.chainDecimals[0],
          withSi: true,
          withUnit: this.registry.chainTokens[0]
        });
      }

      const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];
      return divisor ? toPercentage(this, divisor) : formatNumber(this);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON(onlyHex = false) {
      // FIXME this return type should by string | number, however BN returns string
      // Options here are
      //   - super.bitLength() - the actual used bits
      //   - this.#bitLength - the type bits (this should be used, however contracts RPC is problematic)
      return onlyHex || super.bitLength() > MAX_NUMBER_BITS ? this.toHex() : this.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      // NOTE In the case of balances, which have a special meaning on the UI
      // and can be interpreted differently, return a specific value for it so
      // underlying it always matches (no matter which length it actually is)
      return this instanceof this.registry.createClassUnsafe('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;
    }
    /**
     * @description Returns the string representation of the value
     * @param base The base to use for the conversion
     */


    toString(base) {
      // only included here since we do not inherit docs
      return super.toString(base);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return bnToU8a(this, {
        bitLength: this.bitLength(),
        isLe: true,
        isNegative: !this.isUnsigned
      });
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function hasMismatch(a, b) {
    return isUndefined$1(a) || (hasEq(a) ? !a.eq(b) : a !== b);
  }

  function notEntry(value) {
    return !Array.isArray(value) || value.length !== 2;
  }

  function compareMapArray(a, b) {
    // equal number of entries and each entry in the array should match
    return a.size === b.length && !b.some(e => notEntry(e) || hasMismatch(a.get(e[0]), e[1]));
  } // NOTE These are used internally and when comparing objects, expects that
  // when the second is an Map<string, Codec> that the first has to be as well


  function compareMap(a, b) {
    if (Array.isArray(b)) {
      return compareMapArray(a, b);
    } else if (b instanceof Map) {
      return compareMapArray(a, [...b.entries()]);
    } else if (isObject$1(b)) {
      return compareMapArray(a, Object.entries(b));
    }

    return false;
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function compareSetArray(a, b) {
    // equal number of entries and each entry in the array should match
    return a.size === b.length && !b.some(e => !a.has(e));
  } // NOTE These are used internally and when comparing objects, expects that
  // when the second is an Set<string, Codec> that the first has to be as well


  function compareSet(a, b) {
    if (Array.isArray(b)) {
      return compareSetArray(a, b);
    } else if (b instanceof Set) {
      return compareSetArray(a, [...b.values()]);
    } else if (isObject$1(b)) {
      return compareSetArray(a, Object.values(b));
    }

    return false;
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /** @internal */

  function formatFailure(registry, {
    message
  }, u8a, i, count, Type, key) {
    let type = '';

    try {
      type = `: ${new Type(registry).toRawType()}`;
    } catch {// ignore
    }

    return `decodeU8a: failed at ${u8aToHex(u8a.subarray(0, 16))}…${key ? ` on ${key}` : ''} (index ${i}/${count})${type}:: ${message}`;
  }
  /**
   * @internal
   *
   * Given an u8a, and an array of Type constructors, decode the u8a against the
   * types, and return an array of decoded values.
   *
   * @param u8a - The u8a to decode.
   * @param result - The result array (will be returned with values pushed)
   * @param types - The array of CodecClass to decode the U8a against.
   */


  function decodeU8a$6(registry, result, u8a, [Types, keys]) {
    const count = result.length;
    let offset = 0;
    let i = 0;

    try {
      while (i < count) {
        const value = new Types[i](registry, u8a.subarray(offset));
        offset += value.initialU8aLength || value.encodedLength;
        result[i] = value;
        i++;
      }
    } catch (error) {
      throw new Error(formatFailure(registry, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
    }

    return [result, offset];
  }
  /**
   * @internal
   *
   * Split from decodeU8a since this is specialized to zip returns ... while we duplicate, this
   * is all on the hot-path, so it is not great, however there is (some) method behind the madness
   */

  function decodeU8aStruct(registry, result, u8a, [Types, keys]) {
    const count = result.length;
    let offset = 0;
    let i = 0;

    try {
      while (i < count) {
        const value = new Types[i](registry, u8a.subarray(offset));
        offset += value.initialU8aLength || value.encodedLength;
        result[i] = [keys[i], value];
        i++;
      }
    } catch (error) {
      throw new Error(formatFailure(registry, error, u8a.subarray(offset), i, count, Types[i], keys[i]));
    }

    return [result, offset];
  }
  /**
   * @internal
   *
   * Split from decodeU8a since this is specialized to 1 instance ... while we duplicate, this
   * is all on the hot-path, so it is not great, however there is (some) method behind the madness
   */

  function decodeU8aVec(registry, result, u8a, startAt, Type) {
    const count = result.length;
    let offset = startAt;
    let i = 0;

    try {
      while (i < count) {
        const value = new Type(registry, u8a.subarray(offset));
        offset += value.initialU8aLength || value.encodedLength;
        result[i] = value;
        i++;
      }
    } catch (error) {
      throw new Error(formatFailure(registry, error, u8a.subarray(offset), i, count, Type));
    }

    return [offset, offset - startAt];
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  function typeToConstructor(registry, type) {
    return isString$1(type) ? registry.createClassUnsafe(type) : type;
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @description takes an input map of the form `{ [string]: string | CodecClass }` and returns a map of `{ [string]: CodecClass }`
   */

  function mapToTypeMap(registry, input) {
    const entries = Object.entries(input);
    const count = entries.length;
    const output = [new Array(count), new Array(count)];

    for (let i = 0; i < count; i++) {
      output[1][i] = entries[i][0];
      output[0][i] = typeToConstructor(registry, entries[i][1]);
    }

    return output;
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const BOUNDED = ['BTreeMap', 'BTreeSet', 'HashMap', 'Vec'];
  const ALLOWED_BOXES = BOUNDED.concat(['Compact', 'DoNotConstruct', 'Int', 'Linkage', 'Range', 'RangeInclusive', 'Result', 'Option', 'UInt', 'WrapperKeepOpaque', 'WrapperOpaque']);
  const BOX_PRECEDING = ['<', '(', '[', '"', ',', ' ']; // start of vec, tuple, fixed array, part of struct def or in tuple

  const mappings = [// alias <T::InherentOfflineReport as InherentOfflineReport>::Inherent -> InherentOfflineReport
  alias('<T::InherentOfflineReport as InherentOfflineReport>::Inherent', 'InherentOfflineReport', false), alias('VecDeque<', 'Vec<', false), // <T::Balance as HasCompact>
  cleanupCompact(), // Change BoundedVec<Type, Size> to Vec<Type>
  removeExtensions('Bounded', true), // Change WeakVec<Type> to Vec<Type>
  removeExtensions('Weak', false), // Remove all the trait prefixes
  removeTraits(), // remove PairOf<T> -> (T, T)
  removePairOf(), // remove boxing, `Box<Proposal>` -> `Proposal`
  removeWrap('Box<'), // remove generics, `MisbehaviorReport<Hash, BlockNumber>` -> `MisbehaviorReport`
  removeGenerics(), // alias String -> Text (compat with jsonrpc methods)
  alias('String', 'Text'), // alias Vec<u8> -> Bytes
  alias('Vec<u8>', 'Bytes'), alias('&\\[u8\\]', 'Bytes'), alias("&'static\\[u8\\]", 'Bytes'), // alias RawAddress -> Address
  alias('RawAddress', 'Address'), // lookups, mapped to Address/AccountId as appropriate in runtime
  alias('Lookup::Source', 'LookupSource'), alias('Lookup::Target', 'LookupTarget'), // HACK duplication between contracts & primitives, however contracts prefixed with exec
  alias('exec::StorageKey', 'ContractStorageKey'), // flattens tuples with one value, `(AccountId)` -> `AccountId`
  flattenSingleTuple(), // converts ::Type to Type, <T as Trait<I>>::Proposal -> Proposal
  removeColons(), // remove all trailing spaces - this should always be the last
  trim()]; // given a string, trim it

  function trim() {
    return value => value.trim();
  } // given a starting index, find the closing >

  function findClosing(value, start) {
    let depth = 0;

    for (let index = start; index < value.length; index++) {
      if (value[index] === '>') {
        if (!depth) {
          return index;
        }

        depth--;
      } else if (value[index] === '<') {
        depth++;
      }
    }

    throw new Error(`Unable to find closing matching <> on '${value}' (start ${start})`);
  }
  function alias(src, dest, withChecks = true) {
    const from = new RegExp(`(^${src}|${BOX_PRECEDING.map(box => `\\${box}${src}`).join('|')})`, 'g');

    const to = src => {
      from.lastIndex = 0;
      return withChecks && BOX_PRECEDING.includes(src[0]) ? `${src[0]}${dest}` : dest;
    };

    return value => value.replace(from, to);
  }
  function cleanupCompact() {
    return value => {
      if (value.includes(' as HasCompact')) {
        for (let index = 0; index < value.length; index++) {
          if (value[index] === '<') {
            const end = findClosing(value, index + 1) - 14;

            if (value.substring(end, end + 14) === ' as HasCompact') {
              value = `Compact<${value.substring(index + 1, end)}>`;
            }
          }
        }
      }

      return value;
    };
  }
  function flattenSingleTuple() {
    const from1 = /,\)/g;
    const from2 = /\(([^,]+)\)/;
    return value => {
      from1.lastIndex = 0;
      return value // tuples may have trailing commas, e.g. (u32, BlockNumber, )
      .replace(from1, ')') // change (u32) -> u32
      .replace(from2, '$1');
    };
  }

  function replaceTagWith(value, matcher, replacer) {
    let index = -1;

    while (true) {
      index = value.indexOf(matcher, index + 1);

      if (index === -1) {
        return value;
      }

      const start = index + matcher.length;
      const end = findClosing(value, start);
      value = `${value.substring(0, index)}${replacer(value.substring(start, end))}${value.substring(end + 1)}`;
    }
  } // remove the Bounded* or Weak* wrappers


  function removeExtensions(type, isSized) {
    return value => {
      for (let i = 0; i < BOUNDED.length; i++) {
        const tag = BOUNDED[i];
        value = replaceTagWith(value, `${type}${tag}<`, v => {
          const parts = v.split(',').map(s => s.trim()).filter(s => s);

          if (isSized) {
            parts.pop();
          }

          return `${tag}<${parts.join(',')}>`;
        });
      }

      return value;
    };
  }
  function removeColons() {
    return value => {
      let index = 0;

      while (index !== -1) {
        index = value.indexOf('::');

        if (index === 0) {
          value = value.substring(2);
        } else if (index !== -1) {
          let start = index;

          while (start !== -1 && !BOX_PRECEDING.includes(value[start])) {
            start--;
          }

          value = `${value.substring(0, start + 1)}${value.substring(index + 2)}`;
        }
      }

      return value;
    };
  }
  function removeGenerics() {
    return value => {
      for (let index = 0; index < value.length; index++) {
        if (value[index] === '<') {
          // check against the allowed wrappers, be it Vec<..>, Option<...> ...
          const box = ALLOWED_BOXES.find(box => {
            const start = index - box.length;
            return start >= 0 && value.substring(start, index) === box && ( // make sure it is stand-alone, i.e. don't catch ElectionResult<...> as Result<...>
            start === 0 || BOX_PRECEDING.includes(value[start - 1]));
          }); // we have not found anything, unwrap generic innards

          if (!box) {
            const end = findClosing(value, index + 1);
            value = `${value.substring(0, index)}${value.substring(end + 1)}`;
          }
        }
      }

      return value;
    };
  } // remove the PairOf wrappers

  function removePairOf() {
    const replacer = v => `(${v},${v})`;

    return value => replaceTagWith(value, 'PairOf<', replacer);
  } // remove the type traits

  function removeTraits() {
    const from1 = /\s/g;
    const from2 = /(T|Self)::/g;
    const from3 = /<(T|Self)asTrait>::/g;
    const from4 = /<Tas[a-z]+::Trait>::/g;
    const from5 = /<LookupasStaticLookup>/g;
    const from6 = /::Type/g;
    return value => {
      from1.lastIndex = 0;
      from2.lastIndex = 0;
      from3.lastIndex = 0;
      from4.lastIndex = 0;
      from5.lastIndex = 0;
      from6.lastIndex = 0;
      return value // remove all whitespaces
      .replace(from1, '') // anything `T::<type>` to end up as `<type>`
      .replace(from2, '') // replace `<T as Trait>::` (whitespaces were removed above)
      .replace(from3, '') // replace `<T as something::Trait>::` (whitespaces were removed above)
      .replace(from4, '') // replace <Lookup as StaticLookup>
      .replace(from5, 'Lookup') // replace `<...>::Type`
      .replace(from6, '');
    };
  } // remove wrapping values, i.e. Box<Proposal> -> Proposal

  function removeWrap(check) {
    const replacer = v => v;

    return value => replaceTagWith(value, check, replacer);
  }
  const sanitizeMap = new Map();
  function sanitize(value) {
    const startValue = value.toString();
    const memoized = sanitizeMap.get(startValue);

    if (memoized) {
      return memoized;
    }

    let result = startValue;

    for (let i = 0; i < mappings.length; i++) {
      result = mappings[i](result);
    }

    sanitizeMap.set(startValue, result);
    return result;
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  /** @internal **/
  function isArrayLike(arg) {
    return arg instanceof Uint8Array || Array.isArray(arg);
  }
  /** @internal **/


  function isCodec(arg) {
    return isFunction$2(arg && arg.toU8a);
  }
  /** @internal **/


  function isEnum(arg) {
    return isCodec(arg) && isNumber$1(arg.index) && isCodec(arg.value);
  }
  /** @internal */


  function isNumberLike(arg) {
    return isNumber$1(arg) || isBn(arg) || isBigInt(arg);
  }
  /** @internal */


  function sortArray(a, b) {
    // Vec, Tuple, Bytes etc.
    let sortRes = 0;
    const minLen = Math.min(a.length, b.length);

    for (let i = 0; i < minLen; ++i) {
      sortRes = sortAsc(a[i], b[i]);

      if (sortRes !== 0) {
        return sortRes;
      }
    }

    return a.length - b.length;
  }
  /**
  * Sort keys/values of BTreeSet/BTreeMap in ascending order for encoding compatibility with Rust's BTreeSet/BTreeMap
  * (https://doc.rust-lang.org/stable/std/collections/struct.BTreeSet.html)
  * (https://doc.rust-lang.org/stable/std/collections/struct.BTreeMap.html)
  */


  function sortAsc(a, b) {
    if (isNumberLike(a) && isNumberLike(b)) {
      return bnToBn(a).cmp(bnToBn(b));
    } else if (a instanceof Map && b instanceof Map) {
      return sortAsc(Array.from(a.values()), Array.from(b.values()));
    } else if (isEnum(a) && isEnum(b)) {
      return sortAsc(a.index, b.index) || sortAsc(a.value, b.value);
    } else if (isArrayLike(a) && isArrayLike(b)) {
      return sortArray(a, b);
    } else if (isCodec(a) && isCodec(b)) {
      // Text, Bool etc.
      return sortAsc(a.toU8a(true), b.toU8a(true));
    }

    throw new Error(`Attempting to sort unrecognized values: ${stringify(a)} (typeof ${typeof a}) <-> ${stringify(b)} (typeof ${typeof b})`);
  }
  function sortSet(set) {
    return new Set(Array.from(set).sort(sortAsc));
  }
  function sortMap(map) {
    return new Map(Array.from(map.entries()).sort(([keyA], [keyB]) => sortAsc(keyA, keyB)));
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function typesToMap(registry, [Types, keys]) {
    const result = {};

    for (let i = 0; i < keys.length; i++) {
      result[keys[i]] = registry.getClassName(Types[i]) || new Types[i](registry).toRawType();
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function noopSetDefinition$6(d) {
    return d;
  }

  function decodeCompact(registry, Type, value) {
    if (isU8a(value)) {
      const [decodedLength, bn] = (value[0] & 0b11) < 0b11 ? compactFromU8aLim(value) : compactFromU8a(value);
      return [new Type(registry, bn), decodedLength];
    } else if (value instanceof Compact) {
      const raw = value.unwrap();
      return raw instanceof Type ? [raw, 0] : [new Type(registry, raw), 0];
    } else if (value instanceof Type) {
      return [value, 0];
    }

    return [new Type(registry, value), 0];
  }
  /**
   * @name Compact
   * @description
   * A compact length-encoding codec wrapper. It performs the same function as Length, however
   * differs in that it uses a variable number of bytes to do the actual encoding. This is mostly
   * used by other types to add length-prefixed encoding, or in the case of wrapped types, taking
   * a number and making the compact representation thereof
   */


  class Compact {
    #Type;
    #raw;

    constructor(registry, Type, value = 0, {
      definition,
      setDefinition = noopSetDefinition$6
    } = {}) {
      this.registry = registry;
      this.#Type = definition || setDefinition(typeToConstructor(registry, Type));
      const [raw, decodedLength] = decodeCompact(registry, this.#Type, value);
      this.initialU8aLength = decodedLength;
      this.#raw = raw;
    }

    static with(Type) {
      let definition; // eslint-disable-next-line no-return-assign

      const setDefinition = d => definition = d;

      return class extends Compact {
        constructor(registry, value) {
          super(registry, Type, value, {
            definition,
            setDefinition
          });
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.#raw.isEmpty;
    }
    /**
     * @description Returns the number of bits in the value
     */


    bitLength() {
      return this.#raw.bitLength();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return this.#raw.eq(other instanceof Compact ? other.#raw : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a BigInt representation of the number
     */


    toBigInt() {
      return this.#raw.toBigInt();
    }
    /**
     * @description Returns the BN representation of the number
     */


    toBn() {
      return this.#raw.toBn();
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */


    toHex(isLe) {
      return this.#raw.toHex(isLe);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return this.#raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.#raw.toJSON();
    }
    /**
     * @description Returns the number representation for the value
     */


    toNumber() {
      return this.#raw.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `Compact<${this.registry.getClassName(this.#Type) || this.#raw.toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.#raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return compactToU8a(this.#raw.toBn());
    }
    /**
     * @description Returns the embedded [[UInt]] or [[Moment]] value
     */


    unwrap() {
      return this.#raw;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @name DoNotConstruct
   * @description
   * An unknown type that fails on construction with the type info
   */
  class DoNotConstruct {
    #neverError;

    constructor(registry, typeName = 'DoNotConstruct') {
      this.registry = registry;
      this.#neverError = new Error(`DoNotConstruct: Cannot construct unknown type ${typeName}`);
      throw this.#neverError;
    }

    static with(typeName) {
      return class extends DoNotConstruct {
        constructor(registry) {
          super(registry, typeName);
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      throw this.#neverError;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      throw this.#neverError;
    }
    /**
     * @description Checks if the value is an empty value (always true)
     */


    get isEmpty() {
      throw this.#neverError;
    }

    eq() {
      throw this.#neverError;
    }

    inspect() {
      throw this.#neverError;
    }

    toHex() {
      throw this.#neverError;
    }

    toHuman() {
      throw this.#neverError;
    }

    toJSON() {
      throw this.#neverError;
    }

    toRawType() {
      throw this.#neverError;
    }

    toString() {
      throw this.#neverError;
    }

    toU8a() {
      throw this.#neverError;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name Null
   * @description
   * Implements a type that does not contain anything (apart from `null`)
   */

  class Null {
    encodedLength = 0;
    isEmpty = true;
    // Added for compatibility reasons, e.g. see Option
    initialU8aLength = 0;

    constructor(registry) {
      this.registry = registry;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      throw new Error('.hash is not implemented on Null');
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return other instanceof Null || isNull$1(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {};
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return '0x';
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return null;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Null';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return '';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return new Uint8Array();
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function noopSetDefinition$5(d) {
    return d;
  }

  function isRustEnum$1(def) {
    const defValues = Object.values(def);

    if (defValues.some(v => isNumber$1(v))) {
      if (!defValues.every(v => isNumber$1(v) && v >= 0 && v <= 255)) {
        throw new Error('Invalid number-indexed enum definition');
      }

      return false;
    }

    return true;
  }

  function extractDef(registry, _def) {
    const def = {};
    let isBasic;
    let isIndexed;

    if (Array.isArray(_def)) {
      for (let i = 0; i < _def.length; i++) {
        def[_def[i]] = {
          Type: Null,
          index: i
        };
      }

      isBasic = true;
      isIndexed = false;
    } else if (isRustEnum$1(_def)) {
      const [Types, keys] = mapToTypeMap(registry, _def);

      for (let i = 0; i < keys.length; i++) {
        def[keys[i]] = {
          Type: Types[i],
          index: i
        };
      }

      isBasic = !Object.values(def).some(({
        Type
      }) => Type !== Null);
      isIndexed = false;
    } else {
      const entries = Object.entries(_def);

      for (let i = 0; i < entries.length; i++) {
        const [key, index] = entries[i];
        def[key] = {
          Type: Null,
          index
        };
      }

      isBasic = true;
      isIndexed = true;
    }

    return {
      def,
      isBasic,
      isIndexed
    };
  }

  function getEntryType(def, checkIdx) {
    const values = Object.values(def);

    for (let i = 0; i < values.length; i++) {
      const {
        Type,
        index
      } = values[i];

      if (index === checkIdx) {
        return Type;
      }
    }

    throw new Error(`Unable to create Enum via index ${checkIdx}, in ${Object.keys(def).join(', ')}`);
  }

  function createFromU8a(registry, def, index, value) {
    const Type = getEntryType(def, index);
    return {
      index,
      value: new Type(registry, value)
    };
  }

  function createFromValue(registry, def, index = 0, value) {
    const Type = getEntryType(def, index);
    return {
      index,
      value: value instanceof Type ? value : new Type(registry, value)
    };
  }

  function decodeFromJSON(registry, def, key, value) {
    // JSON comes in the form of { "<type (camelCase)>": "<value for type>" }, here we
    // additionally force to lower to ensure forward compat
    const keys = Object.keys(def).map(k => k.toLowerCase());
    const keyLower = key.toLowerCase();
    const index = keys.indexOf(keyLower);

    if (index === -1) {
      throw new Error(`Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);
    }

    try {
      return createFromValue(registry, def, Object.values(def)[index].index, value);
    } catch (error) {
      throw new Error(`Enum(${key}):: ${error.message}`);
    }
  }

  function decodeEnum(registry, def, value, index) {
    // NOTE We check the index path first, before looking at values - this allows treating
    // the optional indexes before anything else, more-specific > less-specific
    if (isNumber$1(index)) {
      return createFromValue(registry, def, index, value);
    } else if (isU8a(value) || isHex(value)) {
      const u8a = u8aToU8a(value); // nested, we don't want to match isObject below

      if (u8a.length) {
        return createFromU8a(registry, def, u8a[0], u8a.subarray(1));
      }
    } else if (value instanceof Enum) {
      return createFromValue(registry, def, value.index, value.value);
    } else if (isNumber$1(value)) {
      return createFromValue(registry, def, value);
    } else if (isString$1(value)) {
      return decodeFromJSON(registry, def, value.toString());
    } else if (isObject$1(value)) {
      const key = Object.keys(value)[0];
      return decodeFromJSON(registry, def, key, value[key]);
    } // Worst-case scenario, return the first with default


    return createFromValue(registry, def, Object.values(def)[0].index);
  }
  /**
   * @name Enum
   * @description
   * This implements an enum, that based on the value wraps a different type. It is effectively
   * an extension to enum where the value type is determined by the actual index.
   */


  class Enum {
    #def;
    #entryIndex;
    #indexes;
    #isBasic;
    #isIndexed;
    #raw;

    constructor(registry, Types, value, index, {
      definition,
      setDefinition = noopSetDefinition$5
    } = {}) {
      const {
        def,
        isBasic,
        isIndexed
      } = definition || setDefinition(extractDef(registry, Types)); // shortcut isU8a as used in SCALE decoding

      const decoded = isU8a(value) && value.length && !isNumber$1(index) ? createFromU8a(registry, def, value[0], value.subarray(1)) : decodeEnum(registry, def, value, index);
      this.registry = registry;
      this.#def = def;
      this.#isBasic = isBasic;
      this.#isIndexed = isIndexed;
      this.#indexes = Object.values(def).map(({
        index
      }) => index);
      this.#entryIndex = this.#indexes.indexOf(decoded.index);
      this.#raw = decoded.value;

      if (this.#raw.initialU8aLength) {
        this.initialU8aLength = 1 + this.#raw.initialU8aLength;
      }
    }

    static with(Types) {
      const keys = Array.isArray(Types) ? Types : Object.keys(Types);
      const asKeys = new Array(keys.length);
      const isKeys = new Array(keys.length);

      for (let i = 0; i < keys.length; i++) {
        const name = stringPascalCase(keys[i]);
        asKeys[i] = `as${name}`;
        isKeys[i] = `is${name}`;
      }

      let definition; // eslint-disable-next-line no-return-assign

      const setDefinition = d => definition = d;

      return class extends Enum {
        constructor(registry, value, index) {
          super(registry, Types, value, index, {
            definition,
            setDefinition
          });
          objectProperties(this, isKeys, (_, i) => this.type === keys[i]);
          objectProperties(this, asKeys, (k, i) => {
            if (!this[isKeys[i]]) {
              throw new Error(`Cannot convert '${this.type}' via ${k}`);
            }

            return this.value;
          });
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return 1 + this.#raw.encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description The index of the enum value
     */


    get index() {
      return this.#indexes[this.#entryIndex];
    }
    /**
     * @description The value of the enum
     */


    get inner() {
      return this.#raw;
    }
    /**
     * @description true if this is a basic enum (no values)
     */


    get isBasic() {
      return this.#isBasic;
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.#raw.isEmpty;
    }
    /**
     * @description Checks if the Enum points to a [[Null]] type
     */


    get isNone() {
      return this.#raw instanceof Null;
    }
    /**
     * @description Checks if the Enum points to a [[Null]] type
     * @deprecated use isNone
     */


    get isNull() {
      return this.isNone;
    }
    /**
     * @description The available keys for this enum
     */


    get defIndexes() {
      return this.#indexes;
    }
    /**
     * @description The available keys for this enum
     */


    get defKeys() {
      return Object.keys(this.#def);
    }
    /**
     * @description The name of the type this enum value represents
     */


    get type() {
      return this.defKeys[this.#entryIndex];
    }
    /**
     * @description The value of the enum
     */


    get value() {
      return this.#raw;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      // cater for the case where we only pass the enum index
      if (isU8a(other)) {
        return !this.toU8a().some((entry, index) => entry !== other[index]);
      } else if (isNumber$1(other)) {
        return this.toNumber() === other;
      } else if (this.#isBasic && isString$1(other)) {
        return this.type === other;
      } else if (isHex(other)) {
        return this.toHex() === other;
      } else if (other instanceof Enum) {
        return this.index === other.index && this.value.eq(other.value);
      } else if (isObject$1(other)) {
        return this.value.eq(other[this.type]);
      } // compare the actual wrapper value


      return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      if (this.#isBasic) {
        return {
          outer: [new Uint8Array([this.index])]
        };
      }

      const {
        inner,
        outer = []
      } = this.#raw.inspect();
      return {
        inner,
        outer: [new Uint8Array([this.index]), ...outer]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return this.#isBasic || this.isNone ? this.type : {
        [this.type]: this.#raw.toHuman(isExtended)
      };
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.#isBasic ? this.type : {
        [stringCamelCase(this.type)]: this.#raw.toJSON()
      };
    }
    /**
     * @description Returns the number representation for the value
     */


    toNumber() {
      return this.index;
    }
    /**
     * @description Returns a raw struct representation of the enum types
     */


    _toRawStruct() {
      if (this.#isBasic) {
        return this.#isIndexed ? this.defKeys.reduce((out, key, index) => {
          out[key] = this.#indexes[index];
          return out;
        }, {}) : this.defKeys;
      }

      const entries = Object.entries(this.#def);
      return typesToMap(this.registry, entries.reduce((out, [key, {
        Type
      }], i) => {
        out[0][i] = Type;
        out[1][i] = key;
        return out;
      }, [new Array(entries.length), new Array(entries.length)]));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return stringify({
        _enum: this._toRawStruct()
      });
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.isNone ? this.type : stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return isBare ? this.#raw.toU8a(isBare) : u8aConcatStrict([new Uint8Array([this.index]), this.#raw.toU8a(isBare)]);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name Int
   * @description
   * A generic signed integer codec. For Substrate all numbers are Little Endian encoded,
   * this handles the encoding and decoding of those numbers. Upon construction
   * the bitLength is provided and any additional use keeps the number to this
   * length. This extends `BN`, so all methods available on a normal `BN` object
   * is available here.
   * @noInheritDoc
   */

  class Int extends AbstractInt {
    constructor(registry, value = 0, bitLength) {
      super(registry, value, bitLength, true);
    }

    static with(bitLength, typeName) {
      return class extends Int {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }

        toRawType() {
          return typeName || super.toRawType();
        }

      };
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function noopSetDefinition$4(d) {
    return d;
  }

  class None extends Null {
    /**
     * @description Returns the base runtime type name for this instance
     */
    toRawType() {
      return 'None';
    }

  }
  /** @internal */


  function decodeOption(registry, Type, value) {
    if (value instanceof Type) {
      // don't re-create, use as it (which also caters for derived types)
      return value;
    } else if (value instanceof Option) {
      if (value.value instanceof Type) {
        // same instance, return it
        return value.value;
      } else if (value.isNone) {
        // internal is None, we are also none
        return new None(registry);
      } // convert the actual value into known


      return new Type(registry, value.value);
    } else if (isNull$1(value) || isUndefined$1(value) || value === '0x' || value instanceof None) {
      // anyhting empty we pass as-is
      return new None(registry);
    } else if (isU8a(value)) {
      // the isU8a check happens last in the if-tree - since the wrapped value
      // may be an instance of it, so Type and Option checks go in first
      return !value.length || value[0] === 0 ? new None(registry) : new Type(registry, value.subarray(1));
    }

    return new Type(registry, value);
  }
  /**
   * @name Option
   * @description
   * An Option is an optional field. Basically the first byte indicates that there is
   * is value to follow. If the byte is `1` there is an actual value. So the Option
   * implements that - decodes, checks for optionality and wraps the required structure
   * with a value if/as required/found.
   */


  class Option {
    #Type;
    #raw;

    constructor(registry, typeName, value, {
      definition,
      setDefinition = noopSetDefinition$4
    } = {}) {
      const Type = definition || setDefinition(typeToConstructor(registry, typeName));
      const decoded = isU8a(value) && value.length && !isCodec$1(value) ? value[0] === 0 ? new None(registry) : new Type(registry, value.subarray(1)) : decodeOption(registry, Type, value);
      this.registry = registry;
      this.#Type = Type;
      this.#raw = decoded;

      if (decoded && decoded.initialU8aLength) {
        this.initialU8aLength = 1 + decoded.initialU8aLength;
      }
    }

    static with(Type) {
      let definition;

      const setDefinition = d => {
        definition = d;
        return d;
      };

      return class extends Option {
        constructor(registry, value) {
          super(registry, Type, value, {
            definition,
            setDefinition
          });
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      // boolean byte (has value, doesn't have) along with wrapped length
      return 1 + this.#raw.encodedLength;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the Option has no value
     */


    get isEmpty() {
      return this.isNone;
    }
    /**
     * @description Checks if the Option has no value
     */


    get isNone() {
      return this.#raw instanceof None;
    }
    /**
     * @description Checks if the Option has a value
     */


    get isSome() {
      return !this.isNone;
    }
    /**
     * @description The actual value for the Option
     */


    get value() {
      return this.#raw;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      if (other instanceof Option) {
        return this.isSome === other.isSome && this.value.eq(other.value);
      }

      return this.value.eq(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      if (this.isNone) {
        return {
          outer: [new Uint8Array([0])]
        };
      }

      const {
        inner,
        outer = []
      } = this.#raw.inspect();
      return {
        inner,
        outer: [new Uint8Array([1]), ...outer]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      // This attempts to align with the JSON encoding - actually in this case
      // the isSome value is correct, however the `isNone` may be problematic
      return this.isNone ? '0x' : u8aToHex(this.toU8a().subarray(1));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return this.#raw.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.isNone ? null : this.#raw.toJSON();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType(isBare) {
      const wrapped = this.registry.getClassName(this.#Type) || new this.#Type(this.registry).toRawType();
      return isBare ? wrapped : `Option<${wrapped}>`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.#raw.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      if (isBare) {
        return this.#raw.toU8a(true);
      }

      const u8a = new Uint8Array(this.encodedLength);

      if (this.isSome) {
        u8a.set([1]);
        u8a.set(this.#raw.toU8a(), 1);
      }

      return u8a;
    }
    /**
     * @description Returns the value that the Option represents (if available), throws if null
     */


    unwrap() {
      if (this.isNone) {
        throw new Error('Option: unwrapping a None value');
      }

      return this.#raw;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */


    unwrapOr(defaultValue) {
      return this.isSome ? this.unwrap() : defaultValue;
    }
    /**
     * @description Returns the value that the Option represents (if available) or defaultValue if none
     * @param defaultValue The value to return if the option isNone
     */


    unwrapOrDefault() {
      return this.isSome ? this.unwrap() : new this.#Type(this.registry);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name Result
   * @description
   * A Result maps to the Rust Result type, that can either wrap a success or error value
   */

  class Result extends Enum {
    constructor(registry, Ok, Err, value) {
      // NOTE This is order-dependent, Ok (with index 0) needs to be first
      // eslint-disable-next-line sort-keys
      super(registry, {
        Ok,
        Err
      }, value);
    }

    static with(Types) {
      return class extends Result {
        constructor(registry, value) {
          super(registry, Types.Ok, Types.Err, value);
        }

      };
    }
    /**
     * @description Returns the wrapper Err value (if isErr)
     */


    get asErr() {
      if (!this.isErr) {
        throw new Error('Cannot extract Err value from Ok result, check isErr first');
      }

      return this.value;
    }
    /**
     * @deprecated Use asErr
     */


    get asError() {
      return this.asErr;
    }
    /**
     * @description Returns the wrapper Ok value (if isOk)
     */


    get asOk() {
      if (!this.isOk) {
        throw new Error('Cannot extract Ok value from Err result, check isOk first');
      }

      return this.value;
    }
    /**
     * @description Checks if the Result has no value
     */


    get isEmpty() {
      return this.isOk && this.value.isEmpty;
    }
    /**
     * @description Checks if the Result wraps an Err value
     */


    get isErr() {
      return !this.isOk;
    }
    /**
     * @deprecated Use isErr
     */


    get isError() {
      return this.isErr;
    }
    /**
     * @description Checks if the Result wraps an Ok value
     */


    get isOk() {
      return this.index === 0;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      const Types = this._toRawStruct();

      return `Result<${Types.Ok},${Types.Err}>`;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function noopSetDefinition$3(d) {
    return d;
  }
  /** @internal */


  function decodeTuple(registry, result, value, Classes) {
    if (isU8a(value) || isHex(value)) {
      return decodeU8a$6(registry, result, u8aToU8a(value), Classes);
    }

    const Types = Classes[0];

    for (let i = 0; i < Types.length; i++) {
      try {
        const entry = value === null || value === void 0 ? void 0 : value[i];
        result[i] = entry instanceof Types[i] ? entry : new Types[i](registry, entry);
      } catch (error) {
        throw new Error(`Tuple: failed on ${i}:: ${error.message}`);
      }
    }

    return [result, 0];
  }
  /**
   * @name Tuple
   * @description
   * A Tuple defines an anonymous fixed-length array, where each element has its
   * own type. It extends the base JS `Array` object.
   */


  class Tuple extends AbstractArray {
    #Types;

    constructor(registry, Types, value, {
      definition,
      setDefinition = noopSetDefinition$3
    } = {}) {
      const Classes = definition || setDefinition(Array.isArray(Types) ? [Types.map(t => typeToConstructor(registry, t)), []] : isFunction$2(Types) || isString$1(Types) ? [[typeToConstructor(registry, Types)], []] : mapToTypeMap(registry, Types));
      super(registry, Classes[0].length);
      this.initialU8aLength = (isU8a(value) ? decodeU8a$6(registry, this, value, Classes) : decodeTuple(registry, this, value, Classes))[1];
      this.#Types = Classes;
    }

    static with(Types) {
      let definition; // eslint-disable-next-line no-return-assign

      const setDefinition = d => definition = d;

      return class extends Tuple {
        constructor(registry, value) {
          super(registry, Types, value, {
            definition,
            setDefinition
          });
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      let total = 0;

      for (let i = 0; i < this.length; i++) {
        total += this[i].encodedLength;
      }

      return total;
    }
    /**
     * @description The types definition of the tuple
     */


    get Types() {
      return this.#Types[1].length ? this.#Types[1] : this.#Types[0].map(T => new T(this.registry).toRawType());
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        inner: this.inspectInner()
      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      const types = this.#Types[0].map(T => this.registry.getClassName(T) || new T(this.registry).toRawType());
      return `(${types.join(',')})`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      // Overwrite the default toString representation of Array.
      return stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return u8aConcatStrict(this.toU8aInner(isBare));
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name UInt
   * @description
   * A generic unsigned integer codec. For Substrate all numbers are Little Endian encoded,
   * this handles the encoding and decoding of those numbers. Upon construction
   * the bitLength is provided and any additional use keeps the number to this
   * length. This extends `BN`, so all methods available on a normal `BN` object
   * is available here.
   * @noInheritDoc
   */

  class UInt extends AbstractInt {
    static with(bitLength, typeName) {
      return class extends UInt {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }

        toRawType() {
          return typeName || super.toRawType();
        }

      };
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  const MAX_LENGTH$2 = 64 * 1024;
  const l$b = logger('Vec');

  function noopSetDefinition$2(d) {
    return d;
  }

  function decodeVecLength(value) {
    if (Array.isArray(value)) {
      return [value, value.length, 0];
    }

    const u8a = u8aToU8a(value);
    const [startAt, length] = compactFromU8aLim(u8a);

    if (length > MAX_LENGTH$2) {
      throw new Error(`Vec length ${length.toString()} exceeds ${MAX_LENGTH$2}`);
    }

    return [u8a, length, startAt];
  }

  function decodeVec(registry, result, value, startAt, Type) {
    if (Array.isArray(value)) {
      const count = result.length;

      for (let i = 0; i < count; i++) {
        const entry = value[i];

        try {
          result[i] = entry instanceof Type ? entry : new Type(registry, entry);
        } catch (error) {
          l$b.error(`Unable to decode on index ${i}`, error.message);
          throw error;
        }
      }

      return [0, 0];
    }

    return decodeU8aVec(registry, result, u8aToU8a(value), startAt, Type);
  }
  /**
   * @name Vec
   * @description
   * This manages codec arrays. Internally it keeps track of the length (as decoded) and allows
   * construction with the passed `Type` in the constructor. It is an extension to Array, providing
   * specific encoding/decoding on top of the base type.
   */

  class Vec extends AbstractArray {
    #Type;

    constructor(registry, Type, value = [], {
      definition,
      setDefinition = noopSetDefinition$2
    } = {}) {
      const [decodeFrom, length, startAt] = decodeVecLength(value);
      super(registry, length);
      this.#Type = definition || setDefinition(typeToConstructor(registry, Type));
      this.initialU8aLength = (isU8a(decodeFrom) ? decodeU8aVec(registry, this, decodeFrom, startAt, this.#Type) : decodeVec(registry, this, decodeFrom, startAt, this.#Type))[0];
    }

    static with(Type) {
      let definition; // eslint-disable-next-line no-return-assign

      const setDefinition = d => definition = d;

      return class extends Vec {
        constructor(registry, value) {
          super(registry, Type, value, {
            definition,
            setDefinition
          });
        }

      };
    }
    /**
     * @description The type for the items
     */


    get Type() {
      return this.#Type.name;
    }
    /**
     * @description Finds the index of the value in the array
     */


    indexOf(_other) {
      // convert type first, this removes overhead from the eq
      const other = _other instanceof this.#Type ? _other : new this.#Type(this.registry, _other);

      for (let i = 0; i < this.length; i++) {
        if (other.eq(this[i])) {
          return i;
        }
      }

      return -1;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `Vec<${this.registry.getClassName(this.#Type) || new this.#Type(this.registry).toRawType()}>`;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function noopSetDefinition$1(d) {
    return d;
  }
  /**
   * @name VecFixed
   * @description
   * This manages codec arrays of a fixed length
   */


  class VecFixed extends AbstractArray {
    #Type;

    constructor(registry, Type, length, value = [], {
      definition,
      setDefinition = noopSetDefinition$1
    } = {}) {
      super(registry, length);
      this.#Type = definition || setDefinition(typeToConstructor(registry, Type));
      this.initialU8aLength = (isU8a(value) ? decodeU8aVec(registry, this, value, 0, this.#Type) : decodeVec(registry, this, value, 0, this.#Type))[1];
    }

    static with(Type, length) {
      let definition; // eslint-disable-next-line no-return-assign

      const setDefinition = d => definition = d;

      return class extends VecFixed {
        constructor(registry, value) {
          super(registry, Type, length, value, {
            definition,
            setDefinition
          });
        }

      };
    }
    /**
     * @description The type for the items
     */


    get Type() {
      return new this.#Type(this.registry).toRawType();
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      let total = 0;

      for (let i = 0; i < this.length; i++) {
        total += this[i].encodedLength;
      }

      return total;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        inner: this.inspectInner()
      };
    }

    toU8a() {
      // we override, we don't add the length prefix for ourselves, and at the same time we
      // ignore isBare on entries, since they should be properly encoded at all times
      const encoded = this.toU8aInner();
      return encoded.length ? u8aConcatStrict(encoded) : new Uint8Array([]);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `[${this.Type};${this.length}]`;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name Raw
   * @description
   * A basic wrapper around Uint8Array, with no frills and no fuss. It does differ
   * from other implementations where it will consume the full Uint8Array as passed to it.
   * As such it is meant to be subclassed where the wrapper takes care of the
   * actual lengths instead of used directly.
   * @noInheritDoc
   */

  class Raw extends Uint8Array {
    /**
     * @description This ensures that operators such as clice, filter, map, etc. return
     * new Array instances (without this we need to apply overrides)
     */
    static get [Symbol.species]() {
      return Uint8Array;
    }

    constructor(registry, value, initialU8aLength) {
      super(u8aToU8a(value));
      this.registry = registry;
      this.initialU8aLength = initialU8aLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.length;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the wrapped value contains only ASCII printable characters
     */


    get isAscii() {
      return isAscii(this);
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */


    get isEmpty() {
      return !this.length || isUndefined$1(this.find(b => !!b));
    }
    /**
     * @description Returns true if the wrapped value contains only utf8 characters
     */


    get isUtf8() {
      return isUtf8(this);
    }
    /**
     * @description Returns the number of bits in the value
     */


    bitLength() {
      return this.length * 8;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      if (other instanceof Uint8Array) {
        return this.length === other.length && !this.some((b, index) => b !== other[index]);
      }

      return this.eq(u8aToU8a(other));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this);
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      if (this.isAscii) {
        const text = this.toUtf8(); // ensure we didn't end up with multibyte codepoints

        if (isAscii(text)) {
          return text;
        }
      }

      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Raw';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return Uint8Array.from(this);
    }
    /**
     * @description Returns the wrapped data as a UTF-8 string
     */


    toUtf8() {
      if (!this.isUtf8) {
        throw new Error('The character sequence is not a valid Utf8 string');
      }

      return u8aToString(this);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /** @internal */

  function decodeBitVecU8a(value) {
    if (!value || !value.length) {
      return [0, new Uint8Array()];
    } // handle all other Uint8Array inputs, these do have a length prefix which is the number of bits encoded


    const [offset, length] = compactFromU8aLim(value);
    const total = offset + Math.ceil(length / 8);

    if (total > value.length) {
      throw new Error(`BitVec: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }

    return [length, value.subarray(offset, total)];
  }
  /** @internal */


  function decodeBitVec(value) {
    if (Array.isArray(value) || isString$1(value)) {
      const u8a = u8aToU8a(value);
      return [u8a.length / 8, u8a];
    }

    return decodeBitVecU8a(value);
  }
  /**
   * @name BitVec
   * @description
   * A BitVec that represents an array of bits. The bits are however stored encoded. The difference between this
   * and a normal Bytes would be that the length prefix indicates the number of bits encoded, not the bytes
   */


  class BitVec extends Raw {
    #decodedLength;
    #isMsb; // In lieu of having the Msb/Lsb identifiers passed through, we default to assuming
    // we are dealing with Lsb, which is the default (as of writing) BitVec format used
    // in the Polkadot code (this only affects the toHuman displays)

    constructor(registry, value, isMsb = false) {
      const [decodedLength, u8a] = decodeBitVec(value);
      super(registry, u8a);
      this.#decodedLength = decodedLength;
      this.#isMsb = isMsb;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.length + compactToU8a(this.#decodedLength).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        outer: [compactToU8a(this.#decodedLength), super.toU8a()]
      };
    }

    toHuman() {
      return `0b${[...this.toU8a(true)].map(d => `00000000${d.toString(2)}`.slice(-8)).map(s => this.#isMsb ? s : s.split('').reverse().join('')).join('_')}`;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'BitVec';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const bitVec = super.toU8a();
      return isBare ? bitVec : u8aConcatStrict([compactToU8a(this.#decodedLength), bitVec]);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function noopSetDefinition(d) {
    return d;
  }
  /** @internal */


  function decodeStructFromObject(registry, [Types, keys], value, jsonMap) {
    let jsonObj;
    const typeofArray = Array.isArray(value);
    const typeofMap = value instanceof Map;

    if (!typeofArray && !typeofMap && !isObject$1(value)) {
      throw new Error(`Struct: Cannot decode value ${stringify(value)} (typeof ${typeof value}), expected an input object, map or array`);
    } else if (typeofArray && value.length !== keys.length) {
      throw new Error(`Struct: Unable to map ${stringify(value)} array to object with known keys ${keys.join(', ')}`);
    }

    const raw = new Array(keys.length);

    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];
      const jsonKey = jsonMap.get(key) || key;
      const Type = Types[i];
      let assign;

      try {
        if (typeofArray) {
          assign = value[i];
        } else if (typeofMap) {
          assign = jsonKey && value.get(jsonKey);
        } else {
          assign = jsonKey && value[jsonKey];

          if (isUndefined$1(assign)) {
            if (isUndefined$1(jsonObj)) {
              const entries = Object.entries(value);
              jsonObj = {};

              for (let e = 0; e < entries.length; e++) {
                jsonObj[stringCamelCase(entries[e][0])] = entries[e][1];
              }
            }

            assign = jsonKey && jsonObj[jsonKey];
          }
        }

        raw[i] = [key, assign instanceof Type ? assign : new Type(registry, assign)];
      } catch (error) {
        let type = Type.name;

        try {
          type = new Type(registry).toRawType();
        } catch (error) {// ignore
        }

        throw new Error(`Struct: failed on ${jsonKey}: ${type}:: ${error.message}`);
      }
    }

    return [raw, 0];
  }
  /**
   * @name Struct
   * @description
   * A Struct defines an Object with key-value pairs - where the values are Codec values. It removes
   * a lot of repetition from the actual coding, define a structure type, pass it the key/Codec
   * values in the constructor and it manages the decoding. It is important that the constructor
   * values matches 100% to the order in th Rust code, i.e. don't go crazy and make it alphabetical,
   * it needs to decoded in the specific defined order.
   * @noInheritDoc
   */


  class Struct extends Map {
    #jsonMap;
    #Types;

    constructor(registry, Types, value, jsonMap = new Map(), {
      definition,
      setDefinition = noopSetDefinition
    } = {}) {
      const typeMap = definition || setDefinition(mapToTypeMap(registry, Types));
      const [decoded, decodedLength] = isU8a(value) || isHex(value) ? decodeU8aStruct(registry, new Array(typeMap[0].length), u8aToU8a(value), typeMap) : value instanceof Struct ? [value, 0] : decodeStructFromObject(registry, typeMap, value || {}, jsonMap);
      super(decoded);
      this.initialU8aLength = decodedLength;
      this.registry = registry;
      this.#jsonMap = jsonMap;
      this.#Types = typeMap;
    }

    static with(Types, jsonMap) {
      const keys = Object.keys(Types);
      let definition; // eslint-disable-next-line no-return-assign

      const setDefinition = d => definition = d;

      return class extends Struct {
        constructor(registry, value) {
          super(registry, Types, value, jsonMap, {
            definition,
            setDefinition
          });
          objectProperties(this, keys, k => this.get(k));
        }

      };
    }
    /**
     * @description The available keys for this struct
     */


    get defKeys() {
      return this.#Types[1];
    }

    getT(key) {
      return this.get(key);
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      for (const v of this.values()) {
        if (!v.isEmpty) {
          return false;
        }
      }

      return true;
    }
    /**
     * @description Returns the Type description of the structure
     */


    get Type() {
      const result = {};
      const [Types, keys] = this.#Types;

      for (let i = 0; i < keys.length; i++) {
        result[keys[i]] = new Types[i](this.registry).toRawType();
      }

      return result;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      let total = 0;

      for (const v of this.values()) {
        total += v.encodedLength;
      }

      return total;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareMap(this, other);
    }
    /**
     * @description Returns a specific names entry in the structure
     * @param name The name of the entry to retrieve
     */


    get(name) {
      return super.get(name);
    }
    /**
     * @description Returns the values of a member at a specific index (Rather use get(name) for performance)
     */


    getAtIndex(index) {
      return this.toArray()[index];
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect(isBare) {
      const inner = new Array();

      for (const [k, v] of this.entries()) {
        inner.push({ ...v.inspect(!isBare || isBoolean$1(isBare) ? isBare : isBare[k]),
          name: stringCamelCase(k)
        });
      }

      return {
        inner
      };
    }
    /**
     * @description Converts the Object to an standard JavaScript Array
     */


    toArray() {
      return [...this.values()];
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      const json = {};

      for (const [k, v] of this.entries()) {
        json[k] = v && v.toHuman(isExtended);
      }

      return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      const json = {};

      for (const [k, v] of this.entries()) {
        const jsonKey = this.#jsonMap.get(k) || k;
        json[jsonKey] = v && v.toJSON();
      }

      return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return stringify(typesToMap(this.registry, this.#Types));
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = [];

      for (const [k, v] of this.entries()) {
        if (v && isFunction$2(v.toU8a)) {
          encoded.push(v.toU8a(!isBare || isBoolean$1(isBare) ? isBare : isBare[k]));
        }
      }

      return u8aConcatStrict(encoded);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  const l$a = logger('Map');
  /** @internal */

  function decodeMapFromU8a(registry, KeyClass, ValClass, u8a) {
    const output = new Map();
    const [offset, count] = compactFromU8aLim(u8a);
    const types = [];

    for (let i = 0; i < count; i++) {
      types.push(KeyClass, ValClass);
    }

    const [values, decodedLength] = decodeU8a$6(registry, new Array(types.length), u8a.subarray(offset), [types, []]);

    for (let i = 0; i < values.length; i += 2) {
      output.set(values[i], values[i + 1]);
    }

    return [KeyClass, ValClass, output, offset + decodedLength];
  }
  /** @internal */


  function decodeMapFromMap(registry, KeyClass, ValClass, value) {
    const output = new Map();

    for (const [key, val] of value.entries()) {
      const isComplex = KeyClass.prototype instanceof AbstractArray || KeyClass.prototype instanceof Struct || KeyClass.prototype instanceof Enum;

      try {
        output.set(key instanceof KeyClass ? key : new KeyClass(registry, isComplex ? JSON.parse(key) : key), val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l$a.error('Failed to decode key or value:', error.message);
        throw error;
      }
    }

    return [KeyClass, ValClass, output, 0];
  }
  /**
   * Decode input to pass into constructor.
   *
   * @param KeyClass - Type of the map key
   * @param ValClass - Type of the map value
   * @param value - Value to decode, one of:
   * - null
   * - undefined
   * - hex
   * - Uint8Array
   * - Map<any, any>, where both key and value types are either
   *   constructors or decodeable values for their types.
   * @param jsonMap
   * @internal
   */


  function decodeMap(registry, keyType, valType, value) {
    const KeyClass = typeToConstructor(registry, keyType);
    const ValClass = typeToConstructor(registry, valType);

    if (!value) {
      return [KeyClass, ValClass, new Map(), 0];
    } else if (isU8a(value) || isHex(value)) {
      return decodeMapFromU8a(registry, KeyClass, ValClass, u8aToU8a(value));
    } else if (value instanceof Map) {
      return decodeMapFromMap(registry, KeyClass, ValClass, value);
    } else if (isObject$1(value)) {
      return decodeMapFromMap(registry, KeyClass, ValClass, new Map(Object.entries(value)));
    }

    throw new Error('Map: cannot decode type');
  }

  class CodecMap extends Map {
    #KeyClass;
    #ValClass;
    #type;

    constructor(registry, keyType, valType, rawValue, type = 'HashMap') {
      const [KeyClass, ValClass, decoded, decodedLength] = decodeMap(registry, keyType, valType, rawValue);
      super(type === 'BTreeMap' ? sortMap(decoded) : decoded);
      this.registry = registry;
      this.initialU8aLength = decodedLength;
      this.#KeyClass = KeyClass;
      this.#ValClass = ValClass;
      this.#type = type;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      let len = compactToU8a(this.size).length;

      for (const [k, v] of this.entries()) {
        len += k.encodedLength + v.encodedLength;
      }

      return len;
    }
    /**
     * @description Returns a hash of the value
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.size === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareMap(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      const inner = new Array();

      for (const [k, v] of this.entries()) {
        inner.push(k.inspect());
        inner.push(v.inspect());
      }

      return {
        inner,
        outer: [compactToU8a(this.size)]
      };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      const json = {};

      for (const [k, v] of this.entries()) {
        json[k.toString()] = v.toHuman(isExtended);
      }

      return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      const json = {};

      for (const [k, v] of this.entries()) {
        json[k.toString()] = v.toJSON();
      }

      return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `${this.#type}<${this.registry.getClassName(this.#KeyClass) || new this.#KeyClass(this.registry).toRawType()},${this.registry.getClassName(this.#ValClass) || new this.#ValClass(this.registry).toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = new Array();

      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }

      for (const [k, v] of this.entries()) {
        encoded.push(k.toU8a(isBare), v.toU8a(isBare));
      }

      return u8aConcatStrict(encoded);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  class BTreeMap extends CodecMap {
    static with(keyType, valType) {
      return class extends BTreeMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value, 'BTreeMap');
        }

      };
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  const l$9 = logger('BTreeSet');
  /** @internal */

  function decodeSetFromU8a(registry, ValClass, u8a) {
    const output = new Set();
    const [offset, count] = compactFromU8aLim(u8a);
    const result = new Array(count);
    const [decodedLength] = decodeU8aVec(registry, result, u8a, offset, ValClass);

    for (let i = 0; i < count; i++) {
      output.add(result[i]);
    }

    return [ValClass, output, decodedLength];
  }
  /** @internal */


  function decodeSetFromSet(registry, ValClass, value) {
    const output = new Set();
    value.forEach(val => {
      try {
        output.add(val instanceof ValClass ? val : new ValClass(registry, val));
      } catch (error) {
        l$9.error('Failed to decode key or value:', error.message);
        throw error;
      }
    });
    return [ValClass, output, 0];
  }
  /**
   * Decode input to pass into constructor.
   *
   * @param ValClass - Type of the map value
   * @param value - Value to decode, one of:
   * - null
   * - undefined
   * - hex
   * - Uint8Array
   * - Set<any>, where both key and value types are either
   *   constructors or decodeable values for their types.
   * @param jsonSet
   * @internal
   */


  function decodeSet$1(registry, valType, value) {
    const ValClass = typeToConstructor(registry, valType);

    if (!value) {
      return [ValClass, new Set(), 0];
    } else if (isU8a(value) || isHex(value)) {
      return decodeSetFromU8a(registry, ValClass, u8aToU8a(value));
    } else if (Array.isArray(value) || value instanceof Set) {
      return decodeSetFromSet(registry, ValClass, value);
    }

    throw new Error('BTreeSet: cannot decode type');
  }

  class BTreeSet extends Set {
    #ValClass;

    constructor(registry, valType, rawValue) {
      const [ValClass, values, decodedLength] = decodeSet$1(registry, valType, rawValue);
      super(sortSet(values));
      this.registry = registry;
      this.initialU8aLength = decodedLength;
      this.#ValClass = ValClass;
    }

    static with(valType) {
      return class extends BTreeSet {
        constructor(registry, value) {
          super(registry, valType, value);
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      let len = compactToU8a(this.size).length;

      for (const v of this.values()) {
        len += v.encodedLength;
      }

      return len;
    }
    /**
     * @description Returns a hash of the value
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */


    get strings() {
      return [...super.values()].map(v => v.toString());
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareSet(this, other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      const inner = new Array();

      for (const v of this.values()) {
        inner.push(v.inspect());
      }

      return {
        inner,
        outer: [compactToU8a(this.size)]
      };
    }
    /**
     * @description Returns a hex string representation of the value. isLe returns a LE (number-only) representation
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      const json = [];

      for (const v of this.values()) {
        json.push(v.toHuman(isExtended));
      }

      return json;
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      const json = [];

      for (const v of this.values()) {
        json.push(v.toJSON());
      }

      return json;
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `BTreeSet<${this.registry.getClassName(this.#ValClass) || new this.#ValClass(this.registry).toRawType()}>`;
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return stringify(this.toJSON());
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = new Array();

      if (!isBare) {
        encoded.push(compactToU8a(this.size));
      }

      for (const v of this.values()) {
        encoded.push(v.toU8a(isBare));
      }

      return u8aConcatStrict(encoded);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  const MAX_LENGTH$1 = 10 * 1024 * 1024;
  /** @internal */

  function decodeBytesU8a(value) {
    if (!value.length) {
      return [new Uint8Array(), 0];
    } // handle all other Uint8Array inputs, these do have a length prefix


    const [offset, length] = compactFromU8aLim(value);
    const total = offset + length;

    if (length > MAX_LENGTH$1) {
      throw new Error(`Bytes length ${length.toString()} exceeds ${MAX_LENGTH$1}`);
    } else if (total > value.length) {
      throw new Error(`Bytes: required length less than remainder, expected at least ${total}, found ${value.length}`);
    }

    return [value.subarray(offset, total), total];
  }
  /**
   * @name Bytes
   * @description
   * A Bytes wrapper for Vec<u8>. The significant difference between this and a normal Uint8Array
   * is that this version allows for length-encoding. (i.e. it is a variable-item codec, the same
   * as what is found in [[Text]] and [[Vec]])
   */


  class Bytes extends Raw {
    constructor(registry, value) {
      const [u8a, decodedLength] = isU8a(value) && !(value instanceof Raw) ? decodeBytesU8a(value) : Array.isArray(value) || isString$1(value) ? [u8aToU8a(value), 0] : [value, 0];
      super(registry, u8a, decodedLength);
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.length + compactToU8a(this.length).length;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect(isBare) {
      const clength = compactToU8a(this.length);
      return {
        outer: isBare ? [super.toU8a()] : this.length ? [clength, super.toU8a()] : [clength]
      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Bytes';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return isBare ? super.toU8a(isBare) : compactAddLength(this);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  class HashMap extends CodecMap {
    static with(keyType, valType) {
      return class extends HashMap {
        constructor(registry, value) {
          super(registry, keyType, valType, value);
        }

      };
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name bool
   * @description
   * Representation for a boolean value in the system. It extends the base JS `Boolean` class
   * @noInheritDoc
   */

  class bool extends Boolean {
    constructor(registry, value = false) {
      super(isU8a(value) ? value[0] === 1 : value instanceof Boolean ? value.valueOf() : !!value);
      this.registry = registry;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return 1;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value (true when it wraps false/default)
     */


    get isEmpty() {
      return this.isFalse;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */


    get isFalse() {
      return !this.isTrue;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */


    get isTrue() {
      return this.valueOf();
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return this.valueOf() === (other instanceof Boolean ? other.valueOf() : other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.valueOf();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'bool';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.toJSON().toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return new Uint8Array([this.valueOf() ? 1 : 0]);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function decodeU8a$5(registry, value) {
    // Encoded as -
    //  - 0 = None
    //  - 1 = True
    //  - 2 = False
    return value[0] === 0 ? null : new bool(registry, value[0] === 1);
  }
  /**
   * @name OptionBool
   * @description A specific implementation of Option<bool> than allows for single-byte encoding
   */


  class OptionBool extends Option {
    constructor(registry, value) {
      super(registry, bool, isU8a(value) || isHex(value) ? decodeU8a$5(registry, u8aToU8a(value)) : value);
      this.initialU8aLength = 1;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return 1;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */


    get isFalse() {
      return this.isSome ? !this.value.valueOf() : false;
    }
    /**
     * @description Checks if the value is an empty value (always false)
     */


    get isTrue() {
      return this.isSome ? this.value.valueOf() : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType(isBare) {
      return isBare ? 'bool' : 'Option<bool>';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      if (isBare) {
        return super.toU8a(true);
      }

      return this.isSome ? new Uint8Array([this.isTrue ? 1 : 2]) : new Uint8Array([0]);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  /**
   * @name Range
   * @description
   * Rust `Range<T>` representation
   */
  class Range extends Tuple {
    #rangeName;

    constructor(registry, Type, value, {
      rangeName = 'Range'
    } = {}) {
      super(registry, [Type, Type], value);
      this.#rangeName = rangeName;
    }

    static with(Type) {
      return class extends Range {
        constructor(registry, value) {
          super(registry, Type, value);
        }

      };
    }
    /**
     * @description Returns the starting range value
     */


    get start() {
      return this[0];
    }
    /**
     * @description Returns the ending range value
     */


    get end() {
      return this[1];
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `${this.#rangeName}<${this.start.toRawType()}>`;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  class RangeInclusive extends Range {
    constructor(registry, Type, value) {
      super(registry, Type, value, {
        rangeName: 'RangeInclusive'
      });
    }

    static with(Type) {
      return class extends RangeInclusive {
        constructor(registry, value) {
          super(registry, Type, value);
        }

      };
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  const MAX_LENGTH = 128 * 1024;
  /** @internal */

  function decodeText(value) {
    if (isU8a(value)) {
      if (!value.length) {
        return ['', 0];
      } // for Raw, the internal buffer does not have an internal length
      // (the same applies in e.g. Bytes, where length is added at encoding-time)


      if (value instanceof Raw) {
        return [u8aToString(value), 0];
      }

      const [offset, length] = compactFromU8aLim(value);
      const total = offset + length;

      if (length > MAX_LENGTH) {
        throw new Error(`Text: length ${length.toString()} exceeds ${MAX_LENGTH}`);
      } else if (total > value.length) {
        throw new Error(`Text: required length less than remainder, expected at least ${total}, found ${value.length}`);
      }

      return [u8aToString(value.subarray(offset, total)), total];
    } else if (isHex(value)) {
      return [u8aToString(hexToU8a(value)), 0];
    }

    return [value ? value.toString() : '', 0];
  }
  /**
   * @name Text
   * @description
   * This is a string wrapper, along with the length. It is used both for strings as well
   * as items such as documentation. It simply extends the standard JS `String` built-in
   * object, inheriting all methods exposed from `String`.
   * @noInheritDoc
   */


  class Text extends String {
    #override = null;

    constructor(registry, value) {
      const [str, decodedLength] = decodeText(value);
      super(str);
      this.registry = registry;
      this.initialU8aLength = decodedLength;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return this.length === 0;
    }
    /**
     * @description The length of the value
     */


    get length() {
      // only included here since we ignore inherited docs
      return super.length;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return isString$1(other) ? this.toString() === other.toString() : false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      const value = stringToU8a(super.toString());
      return {
        outer: value.length ? [compactToU8a(value.length), value] : [compactToU8a(value.length)]
      };
    }
    /**
     * @description Set an override value for this
     */


    setOverride(override) {
      this.#override = override;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      // like with Vec<u8>, when we are encoding to hex, we don't actually add
      // the length prefix (it is already implied by the actual string length)
      return u8aToHex(this.toU8a(true));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toString();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Text';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.#override || super.toString();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      // NOTE Here we use the super toString (we are not taking overrides into account,
      // rather encoding the original value the string was constructed with)
      const encoded = stringToU8a(super.toString());
      return isBare ? encoded : compactAddLength(encoded);
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name Type
   * @description
   * This is a extended version of Text, specifically to handle types. Here we rely fully
   * on what Text provides us, however we also adjust the types received from the runtime,
   * i.e. we remove the `T::` prefixes found in some types for consistency across implementation.
   */

  class Type extends Text {
    constructor(registry, value = '') {
      super(registry, value);
      this.setOverride(sanitize(this.toString()));
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Type';
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /** @internal */

  function decodeU8aFixed(value, bitLength) {
    const u8a = u8aToU8a(value);
    const byteLength = bitLength / 8;

    if (!u8a.length) {
      return [new Uint8Array(byteLength), 0];
    }

    if (isU8a(value) ? u8a.length < byteLength : u8a.length !== byteLength) {
      throw new Error(`Expected input with ${byteLength} bytes (${bitLength} bits), found ${u8a.length} bytes`);
    }

    return [u8a.subarray(0, byteLength), byteLength];
  }
  /**
   * @name U8aFixed
   * @description
   * A U8a that manages a a sequence of bytes up to the specified bitLength. Not meant
   * to be used directly, rather is should be subclassed with the specific lengths.
   */


  class U8aFixed extends Raw {
    constructor(registry, value = new Uint8Array(), bitLength = 256) {
      const [u8a, decodedLength] = decodeU8aFixed(value, bitLength);
      super(registry, u8a, decodedLength);
    }

    static with(bitLength, typeName) {
      return class extends U8aFixed {
        constructor(registry, value) {
          super(registry, value, bitLength);
        }

        toRawType() {
          return typeName || super.toRawType();
        }

      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `[u8;${this.length}]`;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function decodeRaw(registry, typeName, value) {
    const Type = typeToConstructor(registry, typeName);

    if (isU8a(value) || isHex(value)) {
      try {
        const [, u8a] = isHex(value) || value instanceof Raw ? [0, value] : compactStripLength(value);
        return [Type, new Type(registry, u8a), value];
      } catch {
        return [Type, null, value];
      }
    }

    const instance = new Type(registry, value);
    return [Type, instance, compactAddLength(instance.toU8a())];
  }

  class WrapperKeepOpaque extends Bytes {
    #Type;
    #decoded;
    #opaqueName;

    constructor(registry, typeName, value, {
      opaqueName = 'WrapperKeepOpaque'
    } = {}) {
      const [Type, decoded, u8a] = decodeRaw(registry, typeName, value);
      super(registry, u8a);
      this.#Type = Type;
      this.#decoded = decoded;
      this.#opaqueName = opaqueName;
    }

    static with(Type) {
      return class extends WrapperKeepOpaque {
        constructor(registry, value) {
          super(registry, Type, value);
        }

      };
    }
    /**
     * @description Checks if the wrapper is decodable
     */


    get isDecoded() {
      return !!this.#decoded;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return this.#decoded ? {
        inner: [this.#decoded.inspect()],
        outer: [compactToU8a(this.length)]
      } : {
        outer: [compactToU8a(this.length), this.toU8a(true)]
      };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return this.#decoded ? this.#decoded.toHuman(isExtended) : super.toHuman();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `${this.#opaqueName}<${this.registry.getClassName(this.#Type) || (this.#decoded ? this.#decoded.toRawType() : new this.#Type(this.registry).toRawType())}>`;
    }
    /**
     * @description Converts the Object to to a string (either decoded or bytes)
     */


    toString() {
      return this.#decoded ? this.#decoded.toString() : super.toString();
    }
    /**
     * @description Returns the decoded that the WrapperKeepOpaque represents (if available), throws if non-decodable
     */


    unwrap() {
      if (!this.#decoded) {
        throw new Error(`${this.#opaqueName}: unwrapping an undecodable value`);
      }

      return this.#decoded;
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  class WrapperOpaque extends WrapperKeepOpaque {
    constructor(registry, typeName, value) {
      super(registry, typeName, value, {
        opaqueName: 'WrapperOpaque'
      });
    }

    static with(Type) {
      return class extends WrapperOpaque {
        constructor(registry, value) {
          super(registry, Type, value);
        }

      };
    }
    /**
     * @description The inner value for this wrapper, in all cases it _should_ be decodable (unlike KeepOpaque)
     */


    get inner() {
      return this.unwrap();
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  /**
   * @name Float
   * @description
   * A Codec wrapper for F32 & F64 values. You generally don't want to be using
   * f32/f64 in your runtime, operations on fixed points numbers are preferable. This class
   * was explicitly added since scale-codec has a flag that enables this and it is available
   * in some eth_* RPCs
   */
  class Float extends Number {
    #bitLength;

    constructor(registry, value, {
      bitLength = 32
    } = {}) {
      super(isU8a(value) || isHex(value) ? value.length === 0 ? 0 : u8aToFloat(u8aToU8a(value), {
        bitLength
      }) : value || 0);
      this.#bitLength = bitLength;
      this.encodedLength = bitLength / 8;
      this.initialU8aLength = this.encodedLength;
      this.registry = registry;
    }

    static with(bitLength) {
      return class extends Float {
        constructor(registry, value) {
          super(registry, value, {
            bitLength
          });
        }

      };
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Returns true if the type wraps an empty/default all-0 value
     */


    get isEmpty() {
      return this.valueOf() === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return this.valueOf() === Number(other);
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toString();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      // Not sure if this is actually a hex or a string value
      // (would need to check against RPCs to see the result here)
      return this.toHex();
    }
    /**
     * @description Returns the number representation (Same as valueOf)
     */


    toNumber() {
      return this.valueOf();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return `f${this.#bitLength}`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */


    toU8a() {
      return floatToU8a(this, {
        bitLength: this.#bitLength
      });
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /** @internal */

  function decodeJson(value) {
    return Object.entries(value || {});
  }
  /**
   * @name Json
   * @description
   * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it
   * implements a Codec, it is limited in that it can only be used with input objects via RPC,
   * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys
   * @noInheritDoc
   */


  class Json extends Map {
    constructor(registry, value) {
      const decoded = decodeJson(value);
      super(decoded);
      this.registry = registry;
      objectProperties(this, decoded.map(([k]) => k), k => this.get(k));
    }
    /**
     * @description Always 0, never encodes as a Uint8Array
     */


    get encodedLength() {
      return 0;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description Checks if the value is an empty value
     */


    get isEmpty() {
      return [...this.keys()].length === 0;
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return compareMap(this, other);
    }
    /**
     * @description Returns a typed value from the internal map
     */


    getT(key) {
      return this.get(key);
    }
    /**
     * @description Unimplemented, will throw
     */


    inspect() {
      throw new Error('Unimplemented');
    }
    /**
     * @description Unimplemented, will throw
     */


    toHex() {
      throw new Error('Unimplemented');
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = isFunction$2(value.toHuman) ? value.toHuman() : value;
        return json;
      }, {});
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return [...this.entries()].reduce((json, [key, value]) => {
        json[key] = value;
        return json;
      }, {});
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Json';
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return stringify(this.toJSON());
    }
    /**
     * @description Unimplemented, will throw
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      throw new Error('Unimplemented');
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors

  function encodeSet(setValues, values) {
    const encoded = new BN(0);

    for (let i = 0; i < values.length; i++) {
      encoded.ior(bnToBn(setValues[values[i]] || 0));
    }

    return encoded;
  }
  /** @internal */


  function decodeSetArray(setValues, values) {
    const result = new Array(values.length);

    for (let i = 0; i < values.length; i++) {
      const key = values[i];

      if (isUndefined$1(setValues[key])) {
        throw new Error(`Set: Invalid key '${key}' passed to Set, allowed ${Object.keys(setValues).join(', ')}`);
      }

      result[i] = key;
    }

    return result;
  }
  /** @internal */


  function decodeSetNumber(setValues, _value) {
    const bn = bnToBn(_value);
    const keys = Object.keys(setValues);
    const result = [];

    for (let i = 0; i < keys.length; i++) {
      const key = keys[i];

      if (bn.and(bnToBn(setValues[key])).eq(bnToBn(setValues[key]))) {
        result.push(key);
      }
    }

    const computed = encodeSet(setValues, result);

    if (!bn.eq(computed)) {
      throw new Error(`Set: Mismatch decoding '${bn.toString()}', computed as '${computed.toString()}' with ${result.join(', ')}`);
    }

    return result;
  }
  /** @internal */


  function decodeSet(setValues, value = 0, bitLength) {
    if (bitLength % 8 !== 0) {
      throw new Error(`Expected valid bitLength, power of 8, found ${bitLength}`);
    }

    const byteLength = bitLength / 8;

    if (isU8a(value)) {
      return value.length === 0 ? [] : decodeSetNumber(setValues, u8aToBn(value.subarray(0, byteLength), {
        isLe: true
      }));
    } else if (isString$1(value)) {
      return decodeSet(setValues, u8aToU8a(value), byteLength);
    } else if (value instanceof Set || Array.isArray(value)) {
      const input = Array.isArray(value) ? value : [...value.values()];
      return decodeSetArray(setValues, input);
    }

    return decodeSetNumber(setValues, value);
  }
  /**
   * @name Set
   * @description
   * An Set is an array of string values, represented an an encoded type by
   * a bitwise representation of the values.
   */


  class CodecSet extends Set {
    #allowed;
    #byteLength;

    constructor(registry, setValues, value, bitLength = 8) {
      super(decodeSet(setValues, value, bitLength));
      this.registry = registry;
      this.#allowed = setValues;
      this.#byteLength = bitLength / 8;
    }

    static with(values, bitLength) {
      const keys = Object.keys(values);
      const isKeys = new Array(keys.length);

      for (let i = 0; i < keys.length; i++) {
        isKeys[i] = `is${stringPascalCase(keys[i])}`;
      }

      return class extends CodecSet {
        constructor(registry, value) {
          super(registry, values, value, bitLength);
          objectProperties(this, isKeys, (_, i) => this.strings.includes(keys[i]));
        }

      };
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.#byteLength;
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description true is the Set contains no values
     */


    get isEmpty() {
      return this.size === 0;
    }
    /**
     * @description The actual set values as a string[]
     */


    get strings() {
      return [...super.values()];
    }
    /**
     * @description The encoded value for the set members
     */


    get valueEncoded() {
      return encodeSet(this.#allowed, this.strings);
    }
    /**
     * @description adds a value to the Set (extended to allow for validity checking)
     */


    add = key => {
      // ^^^ add = () property done to assign this instance's this, otherwise Set.add creates "some" chaos
      // we have the isUndefined(this._setValues) in here as well, add is used internally
      // in the Set constructor (so it is undefined at this point, and should allow)
      if (this.#allowed && isUndefined$1(this.#allowed[key])) {
        throw new Error(`Set: Invalid key '${key}' on add`);
      }

      super.add(key);
      return this;
    };
    /**
     * @description Compares the value of the input to see if there is a match
     */

    eq(other) {
      if (Array.isArray(other)) {
        // we don't actually care about the order, sort the values
        return compareArray(this.strings.sort(), other.sort());
      } else if (other instanceof Set) {
        return this.eq([...other.values()]);
      } else if (isNumber$1(other) || isBn(other)) {
        return this.valueEncoded.eq(bnToBn(other));
      }

      return false;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return {
        outer: [this.toU8a()]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.strings;
    }
    /**
     * @description The encoded value for the set members
     */


    toNumber() {
      return this.valueEncoded.toNumber();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return stringify({
        _set: this.#allowed
      });
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return `[${this.strings.join(', ')}]`;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      return bnToU8a(this.valueEncoded, {
        bitLength: this.#byteLength * 8,
        isLe: true
      });
    }

  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name f32
   * @description
   * A 32-bit float
   */

  class f32 extends Float.with(32) {
    // NOTE without this, we cannot properly determine extensions
    __FloatType = 'f32';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name f64
   * @description
   * A 64-bit float
   */

  class f64 extends Float.with(64) {
    // NOTE without this, we cannot properly determine extensions
    __FloatType = 'f64';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name i8
   * @description
   * An 8-bit signed integer
   */

  class i8 extends Int.with(8) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i8';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name i16
   * @description
   * A 16-bit signed integer
   */

  class i16 extends Int.with(16) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i16';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name i32
   * @description
   * A 32-bit signed integer
   */

  class i32 extends Int.with(32) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i32';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name i64
   * @description
   * A 64-bit signed integer
   */

  class i64 extends Int.with(64) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i64';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name i128
   * @description
   * A 128-bit signed integer
   */

  class i128 extends Int.with(128) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i128';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name i256
   * @description
   * A 256-bit signed integer
   */

  class i256 extends Int.with(256) {
    // NOTE without this, we cannot properly determine extensions
    __IntType = 'i256';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name u8
   * @description
   * An 8-bit unsigned integer
   */

  class u8 extends UInt.with(8) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u8';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name u16
   * @description
   * A 16-bit unsigned integer
   */

  class u16 extends UInt.with(16) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u16';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name u32
   * @description
   * A 32-bit unsigned integer
   */

  class u32 extends UInt.with(32) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u32';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name u64
   * @description
   * A 64-bit unsigned integer
   */

  class u64 extends UInt.with(64) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u64';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name u128
   * @description
   * A 128-bit unsigned integer
   */

  class u128 extends UInt.with(128) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u128';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name u256
   * @description
   * A 256-bit unsigned integer
   */

  class u256 extends UInt.with(256) {
    // NOTE without this, we cannot properly determine extensions
    __UIntType = 'u256';
  }

  // Copyright 2017-2022 @polkadot/types-codec authors & contributors
  /**
   * @name USize
   * @description
   * A System default unsigned number, typically used in RPC to report non-consensus
   * data. It is a wrapper for [[U32]] as a WASM default (as generated by Rust bindings).
   * It is not to be used, since it created consensus mismatches.
   */

  class usize extends u32 {
    constructor(registry, value) {
      super(registry, value);
      throw new Error('The `usize` type should not be used. Since it is platform-specific, it creates incompatibilities between native (generally u64) and WASM (always u32) code. Use one of the `u32` or `u64` types explicitly.');
    }

  }

  // Copyright 2017-2022 @polkadot/types-create authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // safely split a string on ', ' while taking care of any nested occurences
  function typeSplit(type) {
    const result = []; // these are the depths of the various tokens: <, [, {, (

    let c = 0;
    let f = 0;
    let s = 0;
    let t = 0; // current start position

    let start = 0;

    for (let i = 0; i < type.length; i++) {
      switch (type[i]) {
        // if we are not nested, add the type
        case ',':
          {
            if (!(c || f || s || t)) {
              result.push(type.substring(start, i).trim());
              start = i + 1;
            }

            break;
          }
        // adjust compact/vec (and friends) depth

        case '<':
          c++;
          break;

        case '>':
          c--;
          break;
        // adjust fixed vec depths

        case '[':
          f++;
          break;

        case ']':
          f--;
          break;
        // adjust struct depth

        case '{':
          s++;
          break;

        case '}':
          s--;
          break;
        // adjust tuple depth

        case '(':
          t++;
          break;

        case ')':
          t--;
          break;
      }
    } // ensure we have all the terminators taken care of


    if (c || f || s || t) {
      throw new Error(`Invalid definition (missing terminators) found in ${type}`);
    } // the final leg of the journey


    result.push(type.substring(start, type.length).trim());
    return result;
  }

  // Copyright 2017-2022 @polkadot/types-create authors & contributors
  const KNOWN_INTERNALS = ['_alias', '_fallback'];

  function getTypeString(typeOrObj) {
    return isString$1(typeOrObj) ? typeOrObj.toString() : JSON.stringify(typeOrObj);
  }

  function isRustEnum(details) {
    const values = Object.values(details);

    if (values.some(v => isNumber$1(v))) {
      if (!values.every(v => isNumber$1(v) && v >= 0 && v <= 255)) {
        throw new Error('Invalid number-indexed enum definition');
      }

      return false;
    }

    return true;
  } // decode an enum of either of the following forms
  //  { _enum: ['A', 'B', 'C'] }
  //  { _enum: { A: AccountId, B: Balance, C: u32 } }
  //  { _enum: { A: 1, B: 2 } }


  function _decodeEnum(value, details, count, fallbackType) {
    value.info = TypeDefInfo.Enum;
    value.fallbackType = fallbackType; // not as pretty, but remain compatible with oo7 for both struct and Array types

    if (Array.isArray(details)) {
      value.sub = details.map((name, index) => ({
        index,
        info: TypeDefInfo.Plain,
        name,
        type: 'Null'
      }));
    } else if (isRustEnum(details)) {
      value.sub = Object.entries(details).map(([name, typeOrObj], index) => objectSpread({}, getTypeDef(getTypeString(typeOrObj || 'Null'), {
        name
      }, count), {
        index
      }));
    } else {
      value.sub = Object.entries(details).map(([name, index]) => ({
        index,
        info: TypeDefInfo.Plain,
        name,
        type: 'Null'
      }));
    }

    return value;
  } // decode a set of the form
  //   { _set: { A: 0b0001, B: 0b0010, C: 0b0100 } }


  function _decodeSet(value, details, fallbackType) {
    value.info = TypeDefInfo.Set;
    value.fallbackType = fallbackType;
    value.length = details._bitLength;
    value.sub = Object.entries(details).filter(([name]) => !name.startsWith('_')).map(([name, index]) => ({
      index,
      info: TypeDefInfo.Plain,
      name,
      type: 'Null'
    }));
    return value;
  } // decode a struct, set or enum
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function _decodeStruct(value, type, _, count) {
    const parsed = JSON.parse(type);
    const keys = Object.keys(parsed);

    if (keys.includes('_enum')) {
      return _decodeEnum(value, parsed._enum, count, parsed._fallback);
    } else if (keys.includes('_set')) {
      return _decodeSet(value, parsed._set, parsed._fallback);
    }

    value.alias = parsed._alias ? new Map(Object.entries(parsed._alias)) : undefined;
    value.fallbackType = parsed._fallback;
    value.sub = keys.filter(name => !KNOWN_INTERNALS.includes(name)).map(name => getTypeDef(getTypeString(parsed[name]), {
      name
    }, count));
    return value;
  } // decode a fixed vector, e.g. [u8;32]
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function _decodeFixedVec(value, type, _, count) {
    const max = type.length - 1;
    let index = -1;
    let inner = 0;

    for (let i = 1; i < max && index === -1; i++) {
      switch (type[i]) {
        case ';':
          {
            if (inner === 0) {
              index = i;
            }

            break;
          }

        case '[':
        case '(':
        case '<':
          inner++;
          break;

        case ']':
        case ')':
        case '>':
          inner--;
          break;
      }
    }

    if (index === -1) {
      throw new Error(`${type}: Unable to extract location of ';'`);
    }

    const vecType = type.substring(1, index);
    const [strLength, displayName] = type.substring(index + 1, max).split(';');
    const length = parseInt(strLength.trim(), 10);

    if (length > 2048) {
      throw new Error(`${type}: Only support for [Type; <length>], where length <= 2048`);
    }

    value.displayName = displayName;
    value.length = length;
    value.sub = getTypeDef(vecType, {}, count);
    return value;
  } // decode a tuple


  function _decodeTuple(value, _, subType, count) {
    value.sub = subType.length === 0 ? [] : typeSplit(subType).map(inner => getTypeDef(inner, {}, count));
    return value;
  } // decode a Int/UInt<bitLength[, name]>
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function _decodeAnyInt(value, type, _, clazz) {
    const [strLength, displayName] = type.substring(clazz.length + 1, type.length - 1).split(',');
    const length = parseInt(strLength.trim(), 10);

    if (length > 8192 || length % 8) {
      throw new Error(`${type}: Only support for ${clazz}<bitLength>, where length <= 8192 and a power of 8, found ${length}`);
    }

    value.displayName = displayName;
    value.length = length;
    return value;
  }

  function _decodeInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'Int');
  }

  function _decodeUInt(value, type, subType) {
    return _decodeAnyInt(value, type, subType, 'UInt');
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function _decodeDoNotConstruct(value, type, _) {
    const NAME_LENGTH = 'DoNotConstruct'.length;
    value.displayName = type.substring(NAME_LENGTH + 1, type.length - 1);
    return value;
  }

  function hasWrapper(type, [start, end]) {
    return type.substring(0, start.length) === start && type.slice(-1 * end.length) === end;
  }

  const nestedExtraction = [['[', ']', TypeDefInfo.VecFixed, _decodeFixedVec], ['{', '}', TypeDefInfo.Struct, _decodeStruct], ['(', ')', TypeDefInfo.Tuple, _decodeTuple], // the inner for these are the same as tuple, multiple values
  ['BTreeMap<', '>', TypeDefInfo.BTreeMap, _decodeTuple], ['HashMap<', '>', TypeDefInfo.HashMap, _decodeTuple], ['Int<', '>', TypeDefInfo.Int, _decodeInt], ['Result<', '>', TypeDefInfo.Result, _decodeTuple], ['UInt<', '>', TypeDefInfo.UInt, _decodeUInt], ['DoNotConstruct<', '>', TypeDefInfo.DoNotConstruct, _decodeDoNotConstruct]];
  const wrappedExtraction = [['BTreeSet<', '>', TypeDefInfo.BTreeSet], ['Compact<', '>', TypeDefInfo.Compact], ['Linkage<', '>', TypeDefInfo.Linkage], ['Option<', '>', TypeDefInfo.Option], ['Range<', '>', TypeDefInfo.Range], ['RangeInclusive<', '>', TypeDefInfo.RangeInclusive], ['Vec<', '>', TypeDefInfo.Vec], ['WrapperKeepOpaque<', '>', TypeDefInfo.WrapperKeepOpaque], ['WrapperOpaque<', '>', TypeDefInfo.WrapperOpaque]];

  function extractSubType(type, [start, end]) {
    return type.substring(start.length, type.length - end.length);
  }

  function getTypeDef(_type, {
    displayName,
    name
  } = {}, count = 0) {
    // create the type via Type, allowing types to be sanitized
    const type = sanitize(_type);
    const value = {
      displayName,
      info: TypeDefInfo.Plain,
      name,
      type
    };

    if (++count > 64) {
      throw new Error('getTypeDef: Maximum nested limit reached');
    }

    const nested = nestedExtraction.find(nested => hasWrapper(type, nested));

    if (nested) {
      value.info = nested[2];
      return nested[3](value, type, extractSubType(type, nested), count);
    }

    const wrapped = wrappedExtraction.find(wrapped => hasWrapper(type, wrapped));

    if (wrapped) {
      value.info = wrapped[2];
      value.sub = getTypeDef(extractSubType(type, wrapped), {}, count);
    }

    return value;
  }

  // Copyright 2017-2022 @polkadot/types-create authors & contributors

  function getTypeDefType({
    lookupName,
    type
  }) {
    return lookupName || type;
  }

  function getSubDefArray(value) {
    if (!Array.isArray(value.sub)) {
      throw new Error(`Expected subtype as TypeDef[] in ${stringify(value)}`);
    }

    return value.sub;
  }

  function getSubDef(value) {
    if (!value.sub || Array.isArray(value.sub)) {
      throw new Error(`Expected subtype as TypeDef in ${stringify(value)}`);
    }

    return value.sub;
  }

  function getSubType(value) {
    return getTypeDefType(getSubDef(value));
  } // create a maps of type string CodecClasss from the input


  function getTypeClassMap(value) {
    const subs = getSubDefArray(value);
    const map = {};

    for (let i = 0; i < subs.length; i++) {
      map[subs[i].name] = getTypeDefType(subs[i]);
    }

    return map;
  } // create an array of type string CodecClasss from the input


  function getTypeClassArray(value) {
    return getSubDefArray(value).map(getTypeDefType);
  }

  function createInt(Clazz, {
    displayName,
    length
  }) {
    if (!isNumber$1(length)) {
      throw new Error(`Expected bitLength information for ${displayName || Clazz.constructor.name}<bitLength>`);
    }

    return Clazz.with(length, displayName);
  }

  function createHashMap(Clazz, value) {
    const [keyType, valueType] = getTypeClassArray(value);
    return Clazz.with(keyType, valueType);
  }

  function createWithSub(Clazz, value) {
    return Clazz.with(getSubType(value));
  }

  const infoMapping = {
    [TypeDefInfo.BTreeMap]: (registry, value) => createHashMap(BTreeMap, value),
    [TypeDefInfo.BTreeSet]: (registry, value) => createWithSub(BTreeSet, value),
    [TypeDefInfo.Compact]: (registry, value) => createWithSub(Compact, value),
    [TypeDefInfo.DoNotConstruct]: (registry, value) => DoNotConstruct.with(value.displayName || value.type),
    [TypeDefInfo.Enum]: (registry, value) => {
      const subs = getSubDefArray(value);
      return Enum.with(subs.every(({
        type
      }) => type === 'Null') ? subs.reduce((out, {
        index,
        name
      }, count) => {
        out[name] = index || count;
        return out;
      }, {}) : getTypeClassMap(value));
    },
    [TypeDefInfo.HashMap]: (registry, value) => createHashMap(HashMap, value),
    [TypeDefInfo.Int]: (registry, value) => createInt(Int, value),
    // We have circular deps between Linkage & Struct
    [TypeDefInfo.Linkage]: (registry, value) => {
      const type = `Option<${getSubType(value)}>`; // eslint-disable-next-line sort-keys

      const Clazz = Struct.with({
        previous: type,
        next: type
      }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access

      Clazz.prototype.toRawType = function () {
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call
        return `Linkage<${this.next.toRawType(true)}>`;
      };

      return Clazz;
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Null]: (registry, _) => Null,
    [TypeDefInfo.Option]: (registry, value) => {
      if (!value.sub || Array.isArray(value.sub)) {
        throw new Error('Expected type information for Option');
      } // NOTE This is opt-in (unhandled), not by default
      // if (value.sub.type === 'bool') {
      //   return OptionBool;
      // }


      return createWithSub(Option, value);
    },
    [TypeDefInfo.Plain]: (registry, value) => registry.getOrUnknown(value.type),
    [TypeDefInfo.Range]: (registry, value) => createWithSub(Range, value),
    [TypeDefInfo.RangeInclusive]: (registry, value) => createWithSub(RangeInclusive, value),
    [TypeDefInfo.Result]: (registry, value) => {
      const [Ok, Err] = getTypeClassArray(value); // eslint-disable-next-line @typescript-eslint/no-use-before-define

      return Result.with({
        Err,
        Ok
      });
    },
    [TypeDefInfo.Set]: (registry, value) => CodecSet.with(getSubDefArray(value).reduce((result, {
      index,
      name
    }) => {
      result[name] = index;
      return result;
    }, {}), value.length),
    [TypeDefInfo.Si]: (registry, value) => getTypeClass(registry, registry.lookup.getTypeDef(value.type)),
    [TypeDefInfo.Struct]: (registry, value) => Struct.with(getTypeClassMap(value), value.alias),
    [TypeDefInfo.Tuple]: (registry, value) => Tuple.with(getTypeClassArray(value)),
    [TypeDefInfo.UInt]: (registry, value) => createInt(UInt, value),
    [TypeDefInfo.Vec]: (registry, {
      sub
    }) => {
      if (!sub || Array.isArray(sub)) {
        throw new Error('Expected type information for vector');
      }

      return sub.type === 'u8' ? Bytes : Vec.with(getTypeDefType(sub));
    },
    [TypeDefInfo.VecFixed]: (registry, {
      displayName,
      length,
      sub
    }) => {
      if (!isNumber$1(length) || !sub || Array.isArray(sub)) {
        throw new Error('Expected length & type information for fixed vector');
      }

      return sub.type === 'u8' ? U8aFixed.with(length * 8, displayName) : VecFixed.with(getTypeDefType(sub), length);
    },
    [TypeDefInfo.WrapperKeepOpaque]: (registry, value) => createWithSub(WrapperKeepOpaque, value),
    [TypeDefInfo.WrapperOpaque]: (registry, value) => createWithSub(WrapperOpaque, value)
  };
  function constructTypeClass(registry, typeDef) {
    try {
      const Type = infoMapping[typeDef.info](registry, typeDef);

      if (!Type) {
        throw new Error('No class created');
      } // don't clobber any existing


      if (!Type.__fallbackType && typeDef.fallbackType) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore ...this is the only place we we actually assign this...
        Type.__fallbackType = typeDef.fallbackType;
      }

      return Type;
    } catch (error) {
      throw new Error(`Unable to construct class from ${stringify(typeDef)}: ${error.message}`);
    }
  } // Returns the type Class for construction

  function getTypeClass(registry, typeDef) {
    return registry.getUnsafe(typeDef.type, false, typeDef);
  }
  function createClassUnsafe(registry, type) {
    return (// just retrieve via name, no creation via typeDef
      registry.getUnsafe(type) || // we don't have an existing type, create the class via typeDef
      getTypeClass(registry, registry.isLookupType(type) ? registry.lookup.getTypeDef(type) : getTypeDef(type))
    );
  }

  // Copyright 2017-2022 @polkadot/types-create authors & contributors
  // is much slower, but verifies that we have the correct types defined

  function checkInstance(created, matcher) {
    const u8a = created.toU8a();
    const rawType = created.toRawType();
    const isOk = // full match, all ok
    u8aEq(u8a, matcher) || // on a length-prefixed type, just check the actual length
    ['Bytes', 'Text', 'Type'].includes(rawType) && matcher.length === created.length || // when the created is empty and matcher is also empty, let it slide...
    created.isEmpty && matcher.every(v => !v);

    if (!isOk) {
      throw new Error(`${rawType}:: Decoded input doesn't match input, received ${u8aToHex(matcher, 512)} (${matcher.length} bytes), created ${u8aToHex(u8a, 512)} (${u8a.length} bytes)`);
    }
  }

  function checkPedantic(created, [value]) {
    if (isU8a(value)) {
      checkInstance(created, value);
    } else if (isHex(value)) {
      checkInstance(created, u8aToU8a(value));
    }
  } // Initializes a type with a value. This also checks for fallbacks and in the cases
  // where isPedantic is specified (storage decoding), also check the format/structure


  function initType(registry, Type, params = [], {
    blockHash,
    isOptional,
    isPedantic
  } = {}) {
    const created = new (isOptional ? Option.with(Type) : Type)(registry, ...params);
    isPedantic && checkPedantic(created, params);

    if (blockHash) {
      created.createdAtHash = createTypeUnsafe(registry, 'Hash', [blockHash]);
    }

    return created;
  } // An unsafe version of the `createType` below. It's unsafe because the `type`
  // argument here can be any string, which, when it cannot parse, will yield a
  // runtime error.


  function createTypeUnsafe(registry, type, params = [], options = {}) {
    let Clazz = null;
    let firstError = null;

    try {
      Clazz = createClassUnsafe(registry, type);
      return initType(registry, Clazz, params, options);
    } catch (error) {
      firstError = new Error(`createType(${type}):: ${error.message}`);
    }

    if (Clazz && Clazz.__fallbackType) {
      try {
        Clazz = createClassUnsafe(registry, Clazz.__fallbackType);
        return initType(registry, Clazz, params, options);
      } catch {// swallow, we will throw the first error again
      }
    }

    throw firstError;
  }

  // Copyright 2017-2022 @polkadot/types-create authors & contributors

  const stringIdentity = value => value.toString();

  const INFO_WRAP = ['BTreeMap', 'BTreeSet', 'Compact', 'HashMap', 'Option', 'Result', 'Vec'];
  function paramsNotation(outer, inner, transform = stringIdentity) {
    return `${outer}${inner ? `<${(Array.isArray(inner) ? inner : [inner]).map(transform).join(', ')}>` : ''}`;
  }

  function encodeWithParams(registry, typeDef, outer) {
    const {
      info,
      sub
    } = typeDef;

    switch (info) {
      case TypeDefInfo.BTreeMap:
      case TypeDefInfo.BTreeSet:
      case TypeDefInfo.Compact:
      case TypeDefInfo.HashMap:
      case TypeDefInfo.Linkage:
      case TypeDefInfo.Option:
      case TypeDefInfo.Range:
      case TypeDefInfo.RangeInclusive:
      case TypeDefInfo.Result:
      case TypeDefInfo.Vec:
      case TypeDefInfo.WrapperKeepOpaque:
      case TypeDefInfo.WrapperOpaque:
        return paramsNotation(outer, sub, p => encodeTypeDef(registry, p));
    }

    throw new Error(`Unable to encode ${stringify(typeDef)} with params`);
  }

  function encodeSubTypes(registry, sub, asEnum, extra) {
    const names = sub.map(({
      name
    }) => name);

    if (!names.every(n => !!n)) {
      throw new Error(`Subtypes does not have consistent names, ${names.join(', ')}`);
    }

    const inner = objectSpread({}, extra);

    for (let i = 0; i < sub.length; i++) {
      const def = sub[i];
      inner[def.name] = encodeTypeDef(registry, def);
    }

    return stringify(asEnum ? {
      _enum: inner
    } : inner);
  } // We setup a record here to ensure we have comprehensive coverage (any item not covered will result
  // in a compile-time error with the missing index)


  const encoders = {
    [TypeDefInfo.BTreeMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeMap'),
    [TypeDefInfo.BTreeSet]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'BTreeSet'),
    [TypeDefInfo.Compact]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Compact'),
    [TypeDefInfo.DoNotConstruct]: (registry, {
      displayName,
      lookupIndex,
      lookupName
    }) => `DoNotConstruct<${lookupName || displayName || (isUndefined$1(lookupIndex) ? 'Unknown' : registry.createLookupType(lookupIndex))}>`,
    [TypeDefInfo.Enum]: (registry, {
      sub
    }) => {
      if (!Array.isArray(sub)) {
        throw new Error('Unable to encode Enum type');
      } // c-like enums have all Null entries
      // TODO We need to take the disciminant into account and auto-add empty entries


      return sub.every(({
        type
      }) => type === 'Null') ? stringify({
        _enum: sub.map(({
          name
        }, index) => `${name || `Empty${index}`}`)
      }) : encodeSubTypes(registry, sub, true);
    },
    [TypeDefInfo.HashMap]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'HashMap'),
    [TypeDefInfo.Int]: (registry, {
      length = 32
    }) => `Int<${length}>`,
    [TypeDefInfo.Linkage]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Linkage'),
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Null]: (registry, typeDef) => 'Null',
    [TypeDefInfo.Option]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Option'),
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Plain]: (registry, {
      displayName,
      type
    }) => displayName || type,
    [TypeDefInfo.Range]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Range'),
    [TypeDefInfo.RangeInclusive]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'RangeInclusive'),
    [TypeDefInfo.Result]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Result'),
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Set]: (registry, {
      length = 8,
      sub
    }) => {
      if (!Array.isArray(sub)) {
        throw new Error('Unable to encode Set type');
      }

      return stringify({
        _set: sub.reduce((all, {
          index,
          name
        }, count) => objectSpread(all, {
          [`${name || `Unknown${index || count}`}`]: index || count
        }), {
          _bitLength: length || 8
        })
      });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    [TypeDefInfo.Si]: (registry, {
      lookupName,
      type
    }) => lookupName || type,
    [TypeDefInfo.Struct]: (registry, {
      alias,
      sub
    }) => {
      if (!Array.isArray(sub)) {
        throw new Error('Unable to encode Struct type');
      }

      return encodeSubTypes(registry, sub, false, alias ? {
        _alias: [...alias.entries()].reduce((all, [k, v]) => objectSpread(all, {
          [k]: v
        }), {})
      } : {});
    },
    [TypeDefInfo.Tuple]: (registry, {
      sub
    }) => {
      if (!Array.isArray(sub)) {
        throw new Error('Unable to encode Tuple type');
      }

      return `(${sub.map(type => encodeTypeDef(registry, type)).join(',')})`;
    },
    [TypeDefInfo.UInt]: (registry, {
      length = 32
    }) => `UInt<${length}>`,
    [TypeDefInfo.Vec]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'Vec'),
    [TypeDefInfo.VecFixed]: (registry, {
      length,
      sub
    }) => {
      if (!isNumber$1(length) || !sub || Array.isArray(sub)) {
        throw new Error('Unable to encode VecFixed type');
      }

      return `[${sub.type};${length}]`;
    },
    [TypeDefInfo.WrapperKeepOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperKeepOpaque'),
    [TypeDefInfo.WrapperOpaque]: (registry, typeDef) => encodeWithParams(registry, typeDef, 'WrapperOpaque')
  };

  function encodeType(registry, typeDef, withLookup = true) {
    return withLookup && typeDef.lookupName ? typeDef.lookupName : encoders[typeDef.info](registry, typeDef);
  }

  function encodeTypeDef(registry, typeDef) {
    // In the case of contracts we do have the unfortunate situation where the displayName would
    // refer to "Option" when it is an option. For these, string it out, only using when actually
    // not a top-level element to be used
    return typeDef.displayName && !INFO_WRAP.some(i => typeDef.displayName === i) ? typeDef.displayName : encodeType(registry, typeDef);
  }
  function withTypeString(registry, typeDef) {
    return objectSpread({}, typeDef, {
      type: encodeType(registry, typeDef, false)
    });
  }

  // Copyright 2017-2022 @polkadot/types-create authors & contributors
  const XCM_MAPPINGS = ['AssetInstance', 'Fungibility', 'Junction', 'Junctions', 'MultiAsset', 'MultiAssetFilter', 'MultiLocation', 'Response', 'WildFungibility', 'WildMultiAsset', 'Xcm', 'XcmError', 'XcmOrder'];
  function mapXcmTypes(version) {
    return XCM_MAPPINGS.reduce((all, key) => objectSpread(all, {
      [key]: `${key}${version}`
    }), {});
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const v0 = {
    FungibilityV0: 'FungibilityV1',
    WildFungibilityV0: 'WildFungibilityV1',
    AssetInstanceV0: {
      _enum: {
        Undefined: 'Null',
        Index8: 'u8',
        Index16: 'Compact<u16>',
        Index32: 'Compact<u32>',
        Index64: 'Compact<u64>',
        Index128: 'Compact<u128>',
        Array4: '[u8; 4]',
        Array8: '[u8; 8]',
        Array16: '[u8; 16]',
        Array32: '[u8; 32]',
        Blob: 'Vec<u8>'
      }
    },
    JunctionV0: {
      _enum: {
        Parent: 'Null',
        Parachain: 'Compact<u32>',
        AccountId32: {
          network: 'NetworkId',
          id: 'AccountId'
        },
        AccountIndex64: {
          network: 'NetworkId',
          index: 'Compact<u64>'
        },
        AccountKey20: {
          network: 'NetworkId',
          key: '[u8; 20]'
        },
        PalletInstance: 'u8',
        GeneralIndex: 'Compact<u128>',
        GeneralKey: 'Vec<u8>',
        OnlyChild: 'Null',
        Plurality: {
          id: 'BodyId',
          part: 'BodyPart'
        }
      }
    },
    MultiAssetV0: {
      _enum: {
        None: 'Null',
        All: 'Null',
        AllFungible: 'Null',
        AllNonFungible: 'Null',
        AllAbstractFungible: 'Vec<u8>',
        AllAbstractNonFungible: 'Vec<u8>',
        AllConcreteFungible: 'MultiLocationV0',
        AllConcreteNonFungible: 'MultiLocationV0',
        AbstractFungible: {
          id: 'Vec<u8>',
          instance: 'Compact<u128>'
        },
        AbstractNonFungible: {
          class: 'Vec<u8>',
          instance: 'AssetInstanceV0'
        },
        ConcreteFungible: {
          id: 'MultiLocationV0',
          amount: 'Compact<u128>'
        },
        ConcreteNonFungible: {
          class: 'MultiLocationV0',
          instance: 'AssetInstanceV0'
        }
      }
    },
    MultiLocationV0: {
      _enum: {
        Here: 'Null',
        X1: 'JunctionV0',
        X2: '(JunctionV0, JunctionV0)',
        X3: '(JunctionV0, JunctionV0, JunctionV0)',
        X4: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
        X5: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
        X6: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
        X7: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)',
        X8: '(JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0, JunctionV0)'
      }
    },
    OriginKindV0: {
      _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
    },
    ResponseV0: {
      _enum: {
        Assets: 'Vec<MultiAssetV0>'
      }
    },
    XcmV0: {
      _enum: {
        WithdrawAsset: {
          assets: 'Vec<MultiAssetV0>',
          effects: 'Vec<XcmOrderV0>'
        },
        ReserveAssetDeposit: {
          assets: 'Vec<MultiAssetV0>',
          effects: 'Vec<XcmOrderV0>'
        },
        ReceiveTeleportedAsset: {
          assets: 'Vec<MultiAssetV0>',
          effects: 'Vec<XcmOrderV0>'
        },
        QueryResponse: {
          queryId: 'Compact<u64>',
          response: 'ResponseV0'
        },
        TransferAsset: {
          assets: 'Vec<MultiAssetV0>',
          dest: 'MultiLocationV0'
        },
        TransferReserveAsset: {
          assets: 'Vec<MultiAssetV0>',
          dest: 'MultiLocationV0',
          effects: 'Vec<XcmOrderV0>'
        },
        Transact: {
          originType: 'XcmOriginKind',
          requireWeightAtMost: 'u64',
          call: 'DoubleEncodedCall'
        },
        HrmpNewChannelOpenRequest: {
          sender: 'Compact<u32>',
          maxMessageSize: 'Compact<u32>',
          maxCapacity: 'Compact<u32>'
        },
        HrmpChannelAccepted: {
          recipient: 'Compact<u32>'
        },
        HrmpChannelClosing: {
          initiator: 'Compact<u32>',
          sender: 'Compact<u32>',
          recipient: 'Compact<u32>'
        },
        RelayedFrom: {
          who: 'MultiLocationV0',
          message: 'XcmV0'
        }
      }
    },
    XcmErrorV0: {
      _enum: {
        Undefined: 'Null',
        Overflow: 'Null',
        Unimplemented: 'Null',
        UnhandledXcmVersion: 'Null',
        UnhandledXcmMessage: 'Null',
        UnhandledEffect: 'Null',
        EscalationOfPrivilege: 'Null',
        UntrustedReserveLocation: 'Null',
        UntrustedTeleportLocation: 'Null',
        DestinationBufferOverflow: 'Null',
        SendFailed: 'Null',
        CannotReachDestination: '(MultiLocation, Xcm)',
        MultiLocationFull: 'Null',
        FailedToDecode: 'Null',
        BadOrigin: 'Null',
        ExceedsMaxMessageSize: 'Null',
        FailedToTransactAsset: 'Null',
        WeightLimitReached: 'Weight',
        Wildcard: 'Null',
        TooMuchWeightRequired: 'Null',
        NotHoldingFees: 'Null',
        WeightNotComputable: 'Null',
        Barrier: 'Null',
        NotWithdrawable: 'Null',
        LocationCannotHold: 'Null',
        TooExpensive: 'Null',
        AssetNotFound: 'Null',
        RecursionLimitReached: 'Null'
      }
    },
    XcmOrderV0: {
      _enum: {
        Null: 'Null',
        DepositAsset: {
          assets: 'Vec<MultiAssetV0>',
          dest: 'MultiLocationV0'
        },
        DepositReserveAsset: {
          assets: 'Vec<MultiAssetV0>',
          dest: 'MultiLocationV0',
          effects: 'Vec<XcmOrderV0>'
        },
        ExchangeAsset: {
          give: 'Vec<MultiAssetV0>',
          receive: 'Vec<MultiAssetV0>'
        },
        InitiateReserveWithdraw: {
          assets: 'Vec<MultiAssetV0>',
          reserve: 'MultiLocationV0',
          effects: 'Vec<XcmOrderV0>'
        },
        InitiateTeleport: {
          assets: 'Vec<MultiAsset>',
          dest: 'MultiLocationV0',
          effects: 'Vec<XcmOrderV0>'
        },
        QueryHolding: {
          queryId: 'Compact<u64>',
          dest: 'MultiLocationV0',
          assets: 'Vec<MultiAssetV0>'
        },
        BuyExecution: {
          fees: 'MultiAsset',
          weight: 'u64',
          debt: 'u64',
          haltOnError: 'bool',
          xcm: 'Vec<XcmV0>'
        }
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const v1 = {
    AssetInstanceV1: {
      _enum: {
        Undefined: 'Null',
        Index: 'Compact<u128>',
        Array4: '[u8; 4]',
        Array8: '[u8; 8]',
        Array16: '[u8; 16]',
        Array32: '[u8; 32]',
        Blob: 'Bytes'
      }
    },
    FungibilityV1: {
      _enum: {
        Fungible: 'Compact<u128>',
        NonFungible: 'AssetInstanceV1'
      }
    },
    JunctionV1: {
      _enum: {
        Parachain: 'Compact<u32>',
        AccountId32: {
          network: 'NetworkId',
          id: 'AccountId'
        },
        AccountIndex64: {
          network: 'NetworkId',
          index: 'Compact<u64>'
        },
        AccountKey20: {
          network: 'NetworkId',
          key: '[u8; 20]'
        },
        PalletInstance: 'u8',
        GeneralIndex: 'Compact<u128>',
        GeneralKey: 'Vec<u8>',
        OnlyChild: 'Null',
        Plurality: {
          id: 'BodyId',
          part: 'BodyPart'
        }
      }
    },
    JunctionsV1: {
      _enum: {
        Here: 'Null',
        X1: 'JunctionV1',
        X2: '(JunctionV1, JunctionV1)',
        X3: '(JunctionV1, JunctionV1, JunctionV1)',
        X4: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
        X5: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
        X6: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
        X7: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)',
        X8: '(JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1, JunctionV1)'
      }
    },
    MultiAssetsV1: 'Vec<MultiAssetV1>',
    MultiAssetV1: {
      id: 'XcmAssetId',
      fungibility: 'FungibilityV1'
    },
    MultiAssetFilterV1: {
      _enum: {
        Definite: 'MultiAssetsV1',
        Wild: 'WildMultiAssetV1'
      }
    },
    MultiLocationV1: {
      parents: 'u8',
      interior: 'JunctionsV1'
    },
    OriginKindV1: 'OriginKindV0',
    ResponseV1: {
      _enum: {
        Assets: 'MultiAssetsV1'
      }
    },
    WildFungibilityV1: {
      _enum: ['Fungible', 'NonFungible']
    },
    WildMultiAssetV1: {
      _enum: {
        All: 'Null',
        AllOf: {
          id: 'XcmAssetId',
          fungibility: 'WildFungibilityV1'
        }
      }
    },
    XcmV1: {
      _enum: {
        WithdrawAsset: {
          assets: 'MultiAssetsV1',
          effects: 'Vec<XcmOrderV1>'
        },
        ReserveAssetDeposit: {
          assets: 'MultiAssetsV1',
          effects: 'Vec<XcmOrderV1>'
        },
        ReceiveTeleportedAsset: {
          assets: 'MultiAssetsV1',
          effects: 'Vec<XcmOrderV1>'
        },
        QueryResponse: {
          queryId: 'Compact<u64>',
          response: 'ResponseV1'
        },
        TransferAsset: {
          assets: 'MultiAssetsV1',
          dest: 'MultiLocationV1'
        },
        TransferReserveAsset: {
          assets: 'MultiAssetsV1',
          dest: 'MultiLocationV1',
          effects: 'Vec<XcmOrderV1>'
        },
        Transact: {
          originType: 'XcmOriginKind',
          requireWeightAtMost: 'u64',
          call: 'DoubleEncodedCall'
        },
        HrmpNewChannelOpenRequest: {
          sender: 'Compact<u32>',
          maxMessageSize: 'Compact<u32>',
          maxCapacity: 'Compact<u32>'
        },
        HrmpChannelAccepted: {
          recipient: 'Compact<u32>'
        },
        HrmpChannelClosing: {
          initiator: 'Compact<u32>',
          sender: 'Compact<u32>',
          recipient: 'Compact<u32>'
        },
        RelayedFrom: {
          who: 'MultiLocationV1',
          message: 'XcmV1'
        }
      }
    },
    XcmErrorV1: {
      _enum: {
        Undefined: 'Null',
        Overflow: 'Null',
        Unimplemented: 'Null',
        UnhandledXcmVersion: 'Null',
        UnhandledXcmMessage: 'Null',
        UnhandledEffect: 'Null',
        EscalationOfPrivilege: 'Null',
        UntrustedReserveLocation: 'Null',
        UntrustedTeleportLocation: 'Null',
        DestinationBufferOverflow: 'Null',
        SendFailed: 'Null',
        CannotReachDestination: '(MultiLocationV1, XcmV1)',
        MultiLocationFull: 'Null',
        FailedToDecode: 'Null',
        BadOrigin: 'Null',
        ExceedsMaxMessageSize: 'Null',
        FailedToTransactAsset: 'Null',
        WeightLimitReached: 'Weight',
        Wildcard: 'Null',
        TooMuchWeightRequired: 'Null',
        NotHoldingFees: 'Null',
        WeightNotComputable: 'Null',
        Barrier: 'Null',
        NotWithdrawable: 'Null',
        LocationCannotHold: 'Null',
        TooExpensive: 'Null',
        AssetNotFound: 'Null',
        DestinationUnsupported: 'Null',
        RecursionLimitReached: 'Null'
      }
    },
    XcmOrderV1: {
      _enum: {
        Noop: 'Null',
        DepositAsset: {
          assets: 'MultiAssetFilterV1',
          maxAssets: 'u32',
          beneficiary: 'MultiLocationV1'
        },
        DepositReserveAsset: {
          assets: 'MultiAssetFilterV1',
          maxAssets: 'u32',
          dest: 'MultiLocationV1',
          effects: 'Vec<XcmOrderV1>'
        },
        ExchangeAsset: {
          give: 'MultiAssetFilterV1',
          receive: 'MultiAssetsV1'
        },
        InitiateReserveWithdraw: {
          assets: 'MultiAssetFilterV1',
          reserve: 'MultiLocationV1',
          effects: 'Vec<XcmOrderV1>'
        },
        InitiateTeleport: {
          assets: 'MultiAssetFilterV1',
          dest: 'MultiLocationV1',
          effects: 'Vec<XcmOrderV1>'
        },
        QueryHolding: {
          queryId: 'Compact<u64>',
          dest: 'MultiLocationV1',
          assets: 'MultiAssetFilterV1'
        },
        BuyExecution: {
          fees: 'MultiAssetV1',
          weight: 'u64',
          debt: 'u64',
          haltOnError: 'bool',
          instructions: 'Vec<XcmV1>'
        }
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const v2 = {
    AssetInstanceV2: 'AssetInstanceV1',
    FungibilityV2: 'FungibilityV1',
    JunctionV2: 'JunctionV1',
    JunctionsV2: 'JunctionsV1',
    MultiAssetsV2: 'MultiAssetsV1',
    MultiAssetV2: 'MultiAssetV1',
    MultiAssetFilterV2: 'MultiAssetFilterV1',
    MultiLocationV2: 'MultiLocationV1',
    OriginKindV2: 'OriginKindV1',
    WildFungibilityV2: 'WildFungibilityV1',
    ResponseV2: {
      _enum: {
        Null: 'Null',
        Assets: 'MultiAssetsV2',
        ExecutionResult: 'ResponseV2Result'
      }
    },
    ResponseV2Error: '(u32, XcmErrorV2)',
    ResponseV2Result: 'Result<Null, ResponseV2Error>',
    WeightLimitV2: {
      _enum: {
        Unlimited: 'Null',
        Limited: 'Compact<u64>'
      }
    },
    InstructionV2: {
      _enum: {
        WithdrawAsset: 'MultiAssetsV2',
        ReserveAssetDeposited: 'MultiAssetsV2',
        ReceiveTeleportedAsset: 'MultiAssetsV2',
        QueryResponse: {
          queryId: 'Compact<u64>',
          response: 'ResponseV2',
          maxWeight: 'Compact<u64>'
        },
        TransferAsset: {
          assets: 'MultiAssetsV2',
          beneficiary: 'MultiLocationV2'
        },
        TransferReserveAsset: {
          assets: 'MultiAssetsV2',
          dest: 'MultiLocationV2',
          xcm: 'XcmV2'
        },
        Transact: {
          originType: 'OriginKindV2',
          requireWeightAtMost: 'u64',
          call: 'DoubleEncodedCall'
        },
        HrmpNewChannelOpenRequest: {
          sender: 'Compact<u32>',
          maxMessageSize: 'Compact<u32>',
          maxCapacity: 'Compact<u32>'
        },
        HrmpChannelAccepted: {
          recipient: 'Compact<u32>'
        },
        HrmpChannelClosing: {
          initiator: 'Compact<u32>',
          sender: 'Compact<u32>',
          recipient: 'Compact<u32>'
        },
        ClearOrigin: 'Null',
        DescendOrigin: 'InteriorMultiLocation',
        ReportError: {
          queryId: 'Compact<u64>',
          dest: 'MultiLocationV2',
          maxResponseWeight: 'Compact<u64>'
        },
        DepositAsset: {
          assets: 'MultiAssetFilterV2',
          maxAssets: 'u32',
          beneficiary: 'MultiLocationV2'
        },
        DepositReserveAsset: {
          assets: 'MultiAssetFilterV2',
          maxAssets: 'u32',
          dest: 'MultiLocationV2',
          xcm: 'XcmV2'
        },
        ExchangeAsset: {
          give: 'MultiAssetFilterV2',
          receive: 'MultiAssetsV2'
        },
        InitiateReserveWithdraw: {
          assets: 'MultiAssetFilterV2',
          reserve: 'MultiLocationV2',
          xcm: 'XcmV2'
        },
        InitiateTeleport: {
          assets: 'MultiAssetFilterV2',
          dest: 'MultiLocationV2',
          xcm: 'XcmV2'
        },
        QueryHolding: {
          query_id: 'Compact<u64>',
          dest: 'MultiLocationV2',
          assets: 'MultiAssetFilterV2',
          maxResponse_Weight: 'Compact<u64>'
        },
        BuyExecution: {
          fees: 'MultiAssetV2',
          weightLimit: 'WeightLimitV2'
        },
        RefundSurplus: 'Null',
        SetErrorHandler: 'XcmV2',
        SetAppendix: 'XcmV2',
        ClearError: 'Null',
        ClaimAsset: {
          assets: 'MultiAssetsV2',
          ticket: 'MultiLocationV2'
        },
        Trap: 'u64'
      }
    },
    WildMultiAssetV2: 'WildMultiAssetV1',
    XcmV2: 'Vec<InstructionV2>',
    XcmErrorV2: {
      _enum: {
        Undefined: 'Null',
        Overflow: 'Null',
        Unimplemented: 'Null',
        UnhandledXcmVersion: 'Null',
        UnhandledXcmMessage: 'Null',
        UnhandledEffect: 'Null',
        EscalationOfPrivilege: 'Null',
        UntrustedReserveLocation: 'Null',
        UntrustedTeleportLocation: 'Null',
        DestinationBufferOverflow: 'Null',
        MultiLocationFull: 'Null',
        MultiLocationNotInvertible: 'Null',
        FailedToDecode: 'Null',
        BadOrigin: 'Null',
        ExceedsMaxMessageSize: 'Null',
        FailedToTransactAsset: 'Null',
        WeightLimitReached: 'Weight',
        Wildcard: 'Null',
        TooMuchWeightRequired: 'Null',
        NotHoldingFees: 'Null',
        WeightNotComputable: 'Null',
        Barrier: 'Null',
        NotWithdrawable: 'Null',
        LocationCannotHold: 'Null',
        TooExpensive: 'Null',
        AssetNotFound: 'Null',
        DestinationUnsupported: 'Null',
        RecursionLimitReached: 'Null',
        Transport: 'Null',
        Unroutable: 'Null',
        UnknownWeightRequired: 'Null',
        Trap: 'u64',
        UnknownClaim: 'Null',
        InvalidLocation: 'Null'
      }
    },
    XcmOrderV2: 'XcmOrderV1'
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const XCM_LATEST = 'V2';
  const xcm = {
    XcmOrigin: {
      _enum: {
        Xcm: 'MultiLocation'
      }
    },
    XcmpMessageFormat: {
      _enum: ['ConcatenatedVersionedXcm', 'ConcatenatedEncodedBlob', 'Signals']
    },
    XcmAssetId: {
      _enum: {
        Concrete: 'MultiLocation',
        Abstract: 'Bytes'
      }
    },
    InboundStatus: {
      _enum: ['Ok', 'Suspended']
    },
    OutboundStatus: {
      _enum: ['Ok', 'Suspended']
    },
    MultiAssets: 'Vec<MultiAsset>'
  };
  const location = {
    BodyId: {
      _enum: {
        Unit: 'Null',
        Named: 'Vec<u8>',
        Index: 'Compact<u32>',
        Executive: 'Null',
        Technical: 'Null',
        Legislative: 'Null',
        Judicial: 'Null'
      }
    },
    BodyPart: {
      _enum: {
        Voice: 'Null',
        Members: 'Compact<u32>',
        Fraction: {
          nom: 'Compact<u32>',
          denom: 'Compact<u32>'
        },
        AtLeastProportion: {
          nom: 'Compact<u32>',
          denom: 'Compact<u32>'
        },
        MoreThanProportion: {
          nom: 'Compact<u32>',
          denom: 'Compact<u32>'
        }
      }
    },
    InteriorMultiLocation: 'Junctions',
    NetworkId: {
      _enum: {
        Any: 'Null',
        Named: 'Vec<u8>',
        Polkadot: 'Null',
        Kusama: 'Null'
      }
    }
  };
  var definitions$a = {
    rpc: {},
    types: objectSpread({}, location, xcm, v0, v1, v2, mapXcmTypes(XCM_LATEST), {
      DoubleEncodedCall: {
        encoded: 'Vec<u8>'
      },
      XcmOriginKind: {
        _enum: ['Native', 'SovereignAccount', 'Superuser', 'Xcm']
      },
      Outcome: {
        _enum: {
          Complete: 'Weight',
          Incomplete: '(Weight, XcmErrorV0)',
          Error: 'XcmErrorV0'
        }
      },
      QueryId: 'u64',
      QueryStatus: {
        _enum: {
          Pending: {
            responder: 'VersionedMultiLocation',
            maybeNotify: 'Option<(u8, u8)>',
            timeout: 'BlockNumber'
          },
          Ready: {
            response: 'VersionedResponse',
            at: 'BlockNumber'
          }
        }
      },
      QueueConfigData: {
        suspendThreshold: 'u32',
        dropThreshold: 'u32',
        resumeThreshold: 'u32',
        thresholdWeight: 'Weight',
        weightRestrictDecay: 'Weight'
      },
      VersionMigrationStage: {
        _enum: {
          MigrateSupportedVersion: 'Null',
          MigrateVersionNotifiers: 'Null',
          NotifyCurrentTargets: 'Option<Bytes>',
          MigrateAndNotifyOldTargets: 'Null'
        }
      },
      VersionedMultiAsset: {
        _enum: {
          V0: 'MultiAssetV0',
          V1: 'MultiAssetV1',
          V2: 'MultiAssetV2'
        }
      },
      VersionedMultiAssets: {
        _enum: {
          V0: 'Vec<MultiAssetV0>',
          V1: 'MultiAssetsV1',
          V2: 'MultiAssetsV2'
        }
      },
      VersionedMultiLocation: {
        _enum: {
          V0: 'MultiLocationV0',
          V1: 'MultiLocationV1',
          V2: 'MultiLocationV2'
        }
      },
      VersionedResponse: {
        V0: 'ResponseV0',
        V1: 'ResponseV1',
        V2: 'ResponseV2'
      },
      VersionedXcm: {
        _enum: {
          V0: 'XcmV0',
          V1: 'XcmV1',
          V2: 'XcmV2'
        }
      },
      XcmVersion: 'u32'
    })
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors

  /* eslint-disable sort-keys */

  const layout = {
    ContractCryptoHasher: {
      _enum: ['Blake2x256', 'Sha2x256', 'Keccak256']
    },
    ContractDiscriminant: 'u32',
    ContractLayoutArray: {
      offset: 'ContractLayoutKey',
      len: 'u32',
      cellsPerElem: 'u64',
      layout: 'ContractStorageLayout'
    },
    ContractLayoutCell: {
      key: 'ContractLayoutKey',
      ty: 'SiLookupTypeId'
    },
    ContractLayoutEnum: {
      dispatchKey: 'ContractLayoutKey',
      variants: 'BTreeMap<ContractDiscriminant, ContractLayoutStruct>'
    },
    ContractLayoutHash: {
      offset: 'ContractLayoutKey',
      strategy: 'ContractLayoutHashingStrategy',
      layout: 'ContractStorageLayout'
    },
    ContractLayoutHashingStrategy: {
      hasher: 'ContractCryptoHasher',
      postfix: 'Vec<u8>',
      prefix: 'Vec<u8>'
    },
    ContractLayoutKey: '[u8; 32]',
    ContractLayoutStruct: {
      fields: 'Vec<ContractLayoutStructField>'
    },
    ContractLayoutStructField: {
      layout: 'ContractStorageLayout',
      name: 'Text'
    },
    ContractStorageLayout: {
      _enum: {
        Cell: 'ContractLayoutCell',
        Hash: 'ContractLayoutHash',
        Array: 'ContractLayoutArray',
        Struct: 'ContractLayoutStruct',
        Enum: 'ContractLayoutEnum'
      }
    }
  };
  const spec = {
    ContractConstructorSpecV0: {
      name: 'Text',
      selector: 'ContractSelector',
      args: 'Vec<ContractMessageParamSpecV0>',
      docs: 'Vec<Text>'
    },
    ContractConstructorSpecV1: {
      name: 'Vec<Text>',
      selector: 'ContractSelector',
      args: 'Vec<ContractMessageParamSpecV0>',
      docs: 'Vec<Text>'
    },
    ContractConstructorSpecV2: {
      label: 'Text',
      selector: 'ContractSelector',
      args: 'Vec<ContractMessageParamSpecV2>',
      docs: 'Vec<Text>'
    },
    ContractConstructorSpecV3: {
      label: 'Text',
      selector: 'ContractSelector',
      payable: 'bool',
      args: 'Vec<ContractMessageParamSpecV2>',
      docs: 'Vec<Text>'
    },
    ContractContractSpecV0: {
      constructors: 'Vec<ContractConstructorSpecV0>',
      messages: 'Vec<ContractMessageSpecV0>',
      events: 'Vec<ContractEventSpecV0>',
      docs: 'Vec<Text>'
    },
    ContractContractSpecV1: {
      constructors: 'Vec<ContractConstructorSpecV1>',
      messages: 'Vec<ContractMessageSpecV1>',
      events: 'Vec<ContractEventSpecV1>',
      docs: 'Vec<Text>'
    },
    ContractContractSpecV2: {
      constructors: 'Vec<ContractConstructorSpecV2>',
      messages: 'Vec<ContractMessageSpecV2>',
      events: 'Vec<ContractEventSpecV2>',
      docs: 'Vec<Text>'
    },
    ContractContractSpecV3: {
      constructors: 'Vec<ContractConstructorSpecV3>',
      messages: 'Vec<ContractMessageSpecV2>',
      events: 'Vec<ContractEventSpecV2>',
      docs: 'Vec<Text>'
    },
    ContractDisplayName: 'SiPath',
    ContractEventParamSpecV0: {
      name: 'Text',
      indexed: 'bool',
      type: 'ContractTypeSpec',
      docs: 'Vec<Text>'
    },
    ContractEventParamSpecV2: {
      label: 'Text',
      indexed: 'bool',
      type: 'ContractTypeSpec',
      docs: 'Vec<Text>'
    },
    ContractEventSpecV0: {
      name: 'Text',
      args: 'Vec<ContractEventParamSpecV0>',
      docs: 'Vec<Text>'
    },
    ContractEventSpecV1: {
      name: 'Text',
      args: 'Vec<ContractEventParamSpecV0>',
      docs: 'Vec<Text>'
    },
    ContractEventSpecV2: {
      label: 'Text',
      args: 'Vec<ContractEventParamSpecV2>',
      docs: 'Vec<Text>'
    },
    ContractMessageParamSpecV0: {
      name: 'Text',
      type: 'ContractTypeSpec'
    },
    ContractMessageParamSpecV2: {
      label: 'Text',
      type: 'ContractTypeSpec'
    },
    ContractMessageSpecV0: {
      name: 'Text',
      selector: 'ContractSelector',
      mutates: 'bool',
      payable: 'bool',
      args: 'Vec<ContractMessageParamSpecV0>',
      returnType: 'Option<ContractTypeSpec>',
      docs: 'Vec<Text>'
    },
    ContractMessageSpecV1: {
      name: 'Vec<Text>',
      selector: 'ContractSelector',
      mutates: 'bool',
      payable: 'bool',
      args: 'Vec<ContractMessageParamSpecV0>',
      returnType: 'Option<ContractTypeSpec>',
      docs: 'Vec<Text>'
    },
    ContractMessageSpecV2: {
      label: 'Text',
      selector: 'ContractSelector',
      mutates: 'bool',
      payable: 'bool',
      args: 'Vec<ContractMessageParamSpecV2>',
      returnType: 'Option<ContractTypeSpec>',
      docs: 'Vec<Text>'
    },
    ContractSelector: '[u8; 4]',
    ContractTypeSpec: {
      type: 'SiLookupTypeId',
      displayName: 'ContractDisplayName'
    }
  };
  const ContractMetadataV0 = {
    types: 'Vec<Si0Type>',
    spec: 'ContractContractSpecV0'
  };
  const ContractMetadataV1 = {
    types: 'Vec<PortableType>',
    spec: 'ContractContractSpecV1'
  };
  const ContractMetadataV2 = {
    types: 'Vec<PortableType>',
    spec: 'ContractContractSpecV2'
  };
  const ContractMetadataV3 = {
    types: 'Vec<PortableType>',
    spec: 'ContractContractSpecV3'
  };
  const ContractProjectInfo = {
    source: 'ContractProjectSource',
    contract: 'ContractProjectContract'
  };
  const latest = {
    ContractConstructorSpecLatest: 'ContractConstructorSpecV3',
    ContractEventSpecLatest: 'ContractEventSpecV2',
    ContractEventParamSpecLatest: 'ContractEventParamSpecV2',
    ContractMessageParamSpecLatest: 'ContractMessageParamSpecV2',
    ContractMessageSpecLatest: 'ContractMessageSpecV2',
    ContractMetadataLatest: 'ContractMetadataV3'
  };
  var definitions$9 = {
    rpc: {},
    types: objectSpread({}, layout, spec, latest, {
      ContractProjectInfo,
      ContractMetadataV0,
      ContractMetadataV1,
      ContractMetadataV2,
      ContractMetadataV3,
      ContractMetadata: {
        _enum: {
          V0: 'ContractMetadataV0',
          V1: 'ContractMetadataV1',
          V2: 'ContractMetadataV2',
          V3: 'ContractMetadataV3'
        }
      },
      ContractProjectV0: objectSpread({
        metadataVersion: 'Text'
      }, ContractProjectInfo, ContractMetadataV0),
      ContractProject: '(ContractProjectInfo, ContractMetadata)',
      ContractProjectContract: {
        _alias: {
          docs: 'documentation'
        },
        name: 'Text',
        version: 'Text',
        authors: 'Vec<Text>',
        description: 'Option<Text>',
        docs: 'Option<Text>',
        repository: 'Option<Text>',
        homepage: 'Option<Text>',
        license: 'Option<Text>'
      },
      ContractProjectSource: {
        _alias: {
          wasmHash: 'hash'
        },
        wasmHash: '[u8; 32]',
        language: 'Text',
        compiler: 'Text',
        wasm: 'Raw'
      }
    })
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors

  const netRpc = {
    listening: {
      aliasSection: 'net',
      description: 'Returns true if client is actively listening for network connections. Otherwise false.',
      params: [],
      type: 'bool'
    },
    peerCount: {
      aliasSection: 'net',
      description: 'Returns number of peers connected to node.',
      params: [],
      type: 'String'
    },
    version: {
      aliasSection: 'net',
      description: 'Returns protocol version.',
      params: [],
      type: 'String'
    }
  };
  const web3Rpc = {
    clientVersion: {
      aliasSection: 'web3',
      description: 'Returns current client version.',
      params: [],
      type: 'String'
    },
    sha3: {
      aliasSection: 'web3',
      description: 'Returns sha3 of the given data',
      params: [{
        name: 'data',
        type: 'Bytes'
      }],
      type: 'H256'
    }
  };
  const rpc = objectSpread({}, netRpc, web3Rpc, {
    accounts: {
      description: 'Returns accounts list.',
      params: [],
      type: 'Vec<H160>'
    },
    blockNumber: {
      description: 'Returns the blockNumber',
      params: [],
      type: 'U256'
    },
    call: {
      description: 'Call contract, returning the output data.',
      params: [{
        name: 'request',
        type: 'EthCallRequest'
      }, {
        isHistoric: true,
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'Bytes'
    },
    chainId: {
      description: 'Returns the chain ID used for transaction signing at the current best block. None is returned if not available.',
      params: [],
      type: 'U64'
    },
    coinbase: {
      description: 'Returns block author.',
      params: [],
      type: 'H160'
    },
    estimateGas: {
      description: 'Estimate gas needed for execution of given contract.',
      params: [{
        name: 'request',
        type: 'EthCallRequest'
      }, {
        isHistoric: true,
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    feeHistory: {
      description: 'Returns fee history for given block count & reward percentiles',
      params: [{
        name: 'blockCount',
        type: 'U256'
      }, {
        name: 'newestBlock',
        type: 'BlockNumber'
      }, {
        name: 'rewardPercentiles',
        type: 'Option<Vec<f64>>'
      }],
      type: 'EthFeeHistory'
    },
    gasPrice: {
      description: 'Returns current gas price.',
      params: [],
      type: 'U256'
    },
    getBalance: {
      description: 'Returns balance of the given account.',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        isHistoric: true,
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getBlockByHash: {
      description: 'Returns block with given hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        name: 'full',
        type: 'bool'
      }],
      type: 'Option<EthRichBlock>'
    },
    getBlockByNumber: {
      description: 'Returns block with given number.',
      params: [{
        name: 'block',
        type: 'BlockNumber'
      }, {
        name: 'full',
        type: 'bool'
      }],
      type: 'Option<EthRichBlock>'
    },
    getBlockTransactionCountByHash: {
      description: 'Returns the number of transactions in a block with given hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'U256'
    },
    getBlockTransactionCountByNumber: {
      description: 'Returns the number of transactions in a block with given block number.',
      params: [{
        name: 'block',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getCode: {
      description: 'Returns the code at given address at given time (block number).',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        isHistoric: true,
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'Bytes'
    },
    getFilterChanges: {
      description: 'Returns filter changes since last poll.',
      params: [{
        name: 'index',
        type: 'U256'
      }],
      type: 'EthFilterChanges'
    },
    getFilterLogs: {
      description: 'Returns all logs matching given filter (in a range \'from\' - \'to\').',
      params: [{
        name: 'index',
        type: 'U256'
      }],
      type: 'Vec<EthLog>'
    },
    getLogs: {
      description: 'Returns logs matching given filter object.',
      params: [{
        name: 'filter',
        type: 'EthFilter'
      }],
      type: 'Vec<EthLog>'
    },
    getProof: {
      description: 'Returns proof for account and storage.',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        name: 'storageKeys',
        type: 'Vec<H256>'
      }, {
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'EthAccount'
    },
    getStorageAt: {
      description: 'Returns content of the storage at given address.',
      params: [{
        name: 'address',
        type: 'H160'
      }, {
        name: 'index',
        type: 'U256'
      }, {
        isHistoric: true,
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'H256'
    },
    getTransactionByBlockHashAndIndex: {
      description: 'Returns transaction at given block hash and index.',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthTransaction'
    },
    getTransactionByBlockNumberAndIndex: {
      description: 'Returns transaction by given block number and index.',
      params: [{
        name: 'number',
        type: 'BlockNumber'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthTransaction'
    },
    getTransactionByHash: {
      description: 'Get transaction by its hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'EthTransaction'
    },
    getTransactionCount: {
      description: 'Returns the number of transactions sent from given address at given time (block number).',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        isHistoric: true,
        isOptional: true,
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getTransactionReceipt: {
      description: 'Returns transaction receipt by transaction hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'EthReceipt'
    },
    getUncleByBlockHashAndIndex: {
      description: 'Returns an uncles at given block and index.',
      params: [{
        name: 'hash',
        type: 'H256'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthRichBlock'
    },
    getUncleByBlockNumberAndIndex: {
      description: 'Returns an uncles at given block and index.',
      params: [{
        name: 'number',
        type: 'BlockNumber'
      }, {
        name: 'index',
        type: 'U256'
      }],
      type: 'EthRichBlock'
    },
    getUncleCountByBlockHash: {
      description: 'Returns the number of uncles in a block with given hash.',
      params: [{
        name: 'hash',
        type: 'H256'
      }],
      type: 'U256'
    },
    getUncleCountByBlockNumber: {
      description: 'Returns the number of uncles in a block with given block number.',
      params: [{
        name: 'number',
        type: 'BlockNumber'
      }],
      type: 'U256'
    },
    getWork: {
      description: 'Returns the hash of the current block, the seedHash, and the boundary condition to be met.',
      params: [],
      type: 'EthWork'
    },
    hashrate: {
      description: 'Returns the number of hashes per second that the node is mining with.',
      params: [],
      type: 'U256'
    },
    maxPriorityFeePerGas: {
      description: 'Returns max priority fee per gas',
      params: [],
      type: 'U256'
    },
    mining: {
      description: 'Returns true if client is actively mining new blocks.',
      params: [],
      type: 'bool'
    },
    newBlockFilter: {
      description: 'Returns id of new block filter.',
      params: [],
      type: 'U256'
    },
    newFilter: {
      description: 'Returns id of new filter.',
      params: [{
        name: 'filter',
        type: 'EthFilter'
      }],
      type: 'U256'
    },
    newPendingTransactionFilter: {
      description: 'Returns id of new block filter.',
      params: [],
      type: 'U256'
    },
    protocolVersion: {
      description: 'Returns protocol version encoded as a string (quotes are necessary).',
      params: [],
      type: 'u64'
    },
    sendRawTransaction: {
      description: 'Sends signed transaction, returning its hash.',
      params: [{
        name: 'bytes',
        type: 'Bytes'
      }],
      type: 'H256'
    },
    sendTransaction: {
      description: 'Sends transaction; will block waiting for signer to return the transaction hash',
      params: [{
        name: 'tx',
        type: 'EthTransactionRequest'
      }],
      type: 'H256'
    },
    submitHashrate: {
      description: 'Used for submitting mining hashrate.',
      params: [{
        name: 'index',
        type: 'U256'
      }, {
        name: 'hash',
        type: 'H256'
      }],
      type: 'bool'
    },
    submitWork: {
      description: 'Used for submitting a proof-of-work solution.',
      params: [{
        name: 'nonce',
        type: 'H64'
      }, {
        name: 'headerHash',
        type: 'H256'
      }, {
        name: 'mixDigest',
        type: 'H256'
      }],
      type: 'bool'
    },
    subscribe: {
      description: 'Subscribe to Eth subscription.',
      params: [{
        name: 'kind',
        type: 'EthSubKind'
      }, {
        isOptional: true,
        name: 'params',
        type: 'EthSubParams'
      }],
      pubsub: ['subscription', 'subscribe', 'unsubscribe'],
      type: 'Null'
    },
    syncing: {
      description: 'Returns an object with data about the sync status or false.',
      params: [],
      type: 'EthSyncStatus'
    },
    uninstallFilter: {
      description: 'Uninstalls filter.',
      params: [{
        name: 'index',
        type: 'U256'
      }],
      type: 'bool'
    }
  });

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const V0 = {
    BlockV0: {
      header: 'EthHeader',
      transactions: 'Vec<TransactionV0>',
      ommers: 'Vec<EthHeader>'
    },
    LegacyTransaction: {
      nonce: 'U256',
      gasPrice: 'U256',
      gasLimit: 'U256',
      action: 'EthTransactionAction',
      value: 'U256',
      input: 'Bytes',
      signature: 'EthTransactionSignature'
    },
    TransactionV0: 'LegacyTransaction'
  };
  const V1 = {
    BlockV1: {
      header: 'EthHeader',
      transactions: 'Vec<TransactionV1>',
      ommers: 'Vec<EthHeader>'
    },
    EIP2930Transaction: {
      chainId: 'u64',
      nonce: 'U256',
      gasPrice: 'U256',
      gasLimit: 'U256',
      action: 'EthTransactionAction',
      value: 'U256',
      input: 'Bytes',
      accessList: 'EthAccessList',
      oddYParity: 'bool',
      r: 'H256',
      s: 'H256'
    },
    TransactionV1: {
      _enum: {
        Legacy: 'LegacyTransaction',
        EIP2930: 'EIP2930Transaction'
      }
    }
  };
  const V2 = {
    BlockV2: {
      header: 'EthHeader',
      transactions: 'Vec<TransactionV2>',
      ommers: 'Vec<EthHeader>'
    },
    EIP1559Transaction: {
      chainId: 'u64',
      nonce: 'U256',
      maxPriorityFeePerGas: 'U256',
      maxFeePerGas: 'U256',
      gasLimit: 'U256',
      action: 'EthTransactionAction',
      value: 'U256',
      input: 'Bytes',
      accessList: 'EthAccessList',
      oddYParity: 'bool',
      r: 'H256',
      s: 'H256'
    },
    TransactionV2: {
      _enum: {
        Legacy: 'LegacyTransaction',
        EIP2930: 'EIP2930Transaction',
        EIP1559: 'EIP1559Transaction'
      }
    }
  };
  const types = objectSpread({}, V0, V1, V2, {
    EthereumAccountId: 'GenericEthereumAccountId',
    EthereumAddress: 'GenericEthereumAccountId',
    EthereumLookupSource: 'GenericEthereumLookupSource',
    EthereumSignature: '[u8; 65]',
    EthAccessListItem: {
      address: 'EthAddress',
      slots: 'Vec<H256>'
    },
    EthAccessList: 'Vec<EthAccessListItem>',
    EthAccount: {
      address: 'EthAddress',
      balance: 'U256',
      nonce: 'U256',
      codeHash: 'H256',
      storageHash: 'H256',
      accountProof: 'Vec<Bytes>',
      storageProof: 'Vec<EthStorageProof>'
    },
    EthAddress: 'H160',
    EthBlock: {
      header: 'EthHeader',
      transactions: 'Vec<EthTransaction>',
      ommers: 'Vec<EthHeader>'
    },
    EthHeader: {
      parentHash: 'H256',
      ommersHash: 'H256',
      beneficiary: 'EthAddress',
      stateRoot: 'H256',
      transactionsRoot: 'H256',
      receiptsRoot: 'H256',
      logsBloom: 'EthBloom',
      difficulty: 'U256',
      number: 'U256',
      gasLimit: 'U256',
      gasUsed: 'U256',
      timestamp: 'u64',
      extraData: 'Bytes',
      mixMash: 'H256',
      nonce: 'H64'
    },
    EthRichBlock: {
      _alias: {
        blockHash: 'hash',
        blockSize: 'size'
      },
      blockHash: 'Option<H256>',
      parentHash: 'H256',
      sha3Uncles: 'H256',
      author: 'EthAddress',
      miner: 'EthAddress',
      stateRoot: 'H256',
      transactionsRoot: 'H256',
      receiptsRoot: 'H256',
      number: 'Option<U256>',
      gasUsed: 'U256',
      gasLimit: 'U256',
      extraData: 'Bytes',
      logsBloom: 'EthBloom',
      timestamp: 'U256',
      difficulty: 'U256',
      totalDifficulty: 'Option<U256>',
      sealFields: 'Vec<Bytes>',
      uncles: 'Vec<H256>',
      transactions: 'Vec<EthTransaction>',
      blockSize: 'Option<U256>'
    },
    EthBloom: 'H2048',
    EthCallRequest: {
      from: 'Option<EthAddress>',
      to: 'Option<EthAddress>',
      gasPrice: 'Option<U256>',
      gas: 'Option<U256>',
      value: 'Option<U256>',
      data: 'Option<Bytes>',
      nonce: 'Option<U256>'
    },
    EthFeeHistory: {
      oldestBlock: 'U256',
      baseFeePerGas: 'Vec<U256>',
      gasUsedRatio: 'Vec<f64>',
      reward: 'Option<Vec<Vec<U256>>>'
    },
    EthFilter: {
      fromBlock: 'Option<BlockNumber>',
      toBlock: 'Option<BlockNumber>',
      blockHash: 'Option<H256>',
      address: 'Option<EthFilterAddress>',
      topics: 'Option<EthFilterTopic>'
    },
    EthFilterAddress: {
      _enum: {
        Single: 'EthAddress',
        Multiple: 'Vec<EthAddress>',
        Null: 'Null'
      }
    },
    EthFilterChanges: {
      _enum: {
        Logs: 'Vec<EthLog>',
        Hashes: 'Vec<H256>',
        Empty: 'Null'
      }
    },
    EthFilterTopic: {
      _enum: {
        Single: 'EthFilterTopicInner',
        Multiple: 'Vec<EthFilterTopicInner>',
        Null: 'Null'
      }
    },
    EthFilterTopicEntry: 'Option<H256>',
    EthFilterTopicInner: {
      _enum: {
        Single: 'EthFilterTopicEntry',
        Multiple: 'Vec<EthFilterTopicEntry>',
        Null: 'Null'
      }
    },
    EthRichHeader: {
      _alias: {
        blockHash: 'hash',
        blockSize: 'size'
      },
      blockHash: 'Option<H256>',
      parentHash: 'H256',
      sha3Uncles: 'H256',
      author: 'EthAddress',
      miner: 'EthAddress',
      stateRoot: 'H256',
      transactionsRoot: 'H256',
      receiptsRoot: 'H256',
      number: 'Option<U256>',
      gasUsed: 'U256',
      gasLimit: 'U256',
      extraData: 'Bytes',
      logsBloom: 'EthBloom',
      timestamp: 'U256',
      difficulty: 'U256',
      sealFields: 'Vec<Bytes>',
      blockSize: 'Option<U256>'
    },
    EthLog: {
      address: 'EthAddress',
      topics: 'Vec<H256>',
      data: 'Bytes',
      blockHash: 'Option<H256>',
      blockNumber: 'Option<U256>',
      transactionHash: 'Option<H256>',
      transactionIndex: 'Option<U256>',
      logIndex: 'Option<U256>',
      transactionLogIndex: 'Option<U256>',
      removed: 'bool'
    },
    EthReceipt: {
      transactionHash: 'Option<H256>',
      transactionIndex: 'Option<U256>',
      blockHash: 'Option<H256>',
      from: 'Option<EthAddress>',
      to: 'Option<EthAddress>',
      blockNumber: 'Option<U256>',
      cumulativeGasUsed: 'U256',
      gasUsed: 'Option<U256>',
      contractAddress: 'Option<EthAddress>',
      logs: 'Vec<EthLog>',
      root: 'Option<H256>',
      logsBloom: 'EthBloom',
      statusCode: 'Option<U64>'
    },
    EthStorageProof: {
      key: 'U256',
      value: 'U256',
      proof: 'Vec<Bytes>'
    },
    EthSubKind: {
      _enum: ['newHeads', 'logs', 'newPendingTransactions', 'syncing']
    },
    EthSubParams: {
      _enum: {
        None: 'Null',
        Logs: 'EthFilter'
      }
    },
    EthSubResult: {
      _enum: {
        Header: 'EthRichHeader',
        Log: 'EthLog',
        TransactionHash: 'H256',
        SyncState: 'EthSyncStatus'
      }
    },
    EthSyncInfo: {
      startingBlock: 'U256',
      currentBlock: 'U256',
      highestBlock: 'U256',
      warpChunksAmount: 'Option<U256>',
      warpChunksProcessed: 'Option<U256>'
    },
    EthSyncStatus: {
      _enum: {
        Info: 'EthSyncInfo',
        None: 'Null'
      }
    },
    EthTransaction: 'LegacyTransaction',
    EthTransactionSignature: {
      v: 'u64',
      r: 'H256',
      s: 'H256'
    },
    EthTransactionAction: {
      _enum: {
        Call: 'H160',
        Create: 'Null'
      }
    },
    EthTransactionCondition: {
      _enum: {
        block: 'u64',
        time: 'u64'
      }
    },
    EthTransactionRequest: {
      from: 'Option<EthAddress>',
      to: 'Option<EthAddress>',
      gasPrice: 'Option<U256>',
      gas: 'Option<U256>',
      value: 'Option<U256>',
      data: 'Option<Bytes>',
      nonce: 'Option<U256>'
    },
    EthTransactionStatus: {
      transactionHash: 'H256',
      transactionIndex: 'u32',
      from: 'EthAddress',
      to: 'Option<EthAddress>',
      contractAddress: 'Option<EthAddress>',
      logs: 'Vec<EthLog>',
      logsBloom: 'EthBloom'
    },
    EthWork: {
      powHash: 'H256',
      seedHash: 'H256',
      target: 'H256',
      number: 'Option<u64>'
    }
  });
  var definitions$8 = {
    rpc,
    types
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$7 = {
    rpc: {
      methods: {
        description: 'Retrieves the list of RPC methods that are exposed by the node',
        params: [],
        type: 'RpcMethods'
      }
    },
    types: {
      RpcMethods: {
        version: 'u32',
        methods: 'Vec<Text>'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$6 = {
    rpc: {
      hasKey: {
        description: 'Returns true if the keystore has private keys for the given public key and key type.',
        params: [{
          name: 'publicKey',
          type: 'Bytes'
        }, {
          name: 'keyType',
          type: 'Text'
        }],
        type: 'bool'
      },
      hasSessionKeys: {
        description: 'Returns true if the keystore has private keys for the given session public keys.',
        params: [{
          name: 'sessionKeys',
          type: 'Bytes'
        }],
        type: 'bool'
      },
      removeExtrinsic: {
        description: 'Remove given extrinsic from the pool and temporarily ban it to prevent reimporting',
        params: [{
          name: 'bytesOrHash',
          type: 'Vec<ExtrinsicOrHash>'
        }],
        type: 'Vec<Hash>'
      },
      insertKey: {
        description: 'Insert a key into the keystore.',
        params: [{
          name: 'keyType',
          type: 'Text'
        }, {
          name: 'suri',
          type: 'Text'
        }, {
          name: 'publicKey',
          type: 'Bytes'
        }],
        type: 'Bytes'
      },
      rotateKeys: {
        description: 'Generate new session keys and returns the corresponding public keys',
        params: [],
        type: 'Bytes'
      },
      pendingExtrinsics: {
        description: 'Returns all pending extrinsics, potentially grouped by sender',
        params: [],
        type: 'Vec<Extrinsic>'
      },
      submitExtrinsic: {
        isSigned: true,
        description: 'Submit a fully formatted extrinsic for block inclusion',
        params: [{
          name: 'extrinsic',
          type: 'Extrinsic'
        }],
        type: 'Hash'
      },
      submitAndWatchExtrinsic: {
        description: 'Submit and subscribe to watch an extrinsic until unsubscribed',
        isSigned: true,
        params: [{
          name: 'extrinsic',
          type: 'Extrinsic'
        }],
        pubsub: ['extrinsicUpdate', 'submitAndWatchExtrinsic', 'unwatchExtrinsic'],
        type: 'ExtrinsicStatus'
      }
    },
    types: {
      ExtrinsicOrHash: {
        _enum: {
          Hash: 'Hash',
          Extrinsic: 'Bytes'
        }
      },
      ExtrinsicStatus: {
        _enum: {
          Future: 'Null',
          Ready: 'Null',
          Broadcast: 'Vec<Text>',
          InBlock: 'Hash',
          Retracted: 'Hash',
          FinalityTimeout: 'Hash',
          Finalized: 'Hash',
          Usurped: 'Hash',
          Dropped: 'Null',
          Invalid: 'Null'
        }
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$5 = {
    rpc: {
      getHeader: {
        alias: ['chain_getHead'],
        description: 'Retrieves the header for a specific block',
        params: [{
          name: 'hash',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Header'
      },
      getBlock: {
        description: 'Get header and body of a relay chain block',
        params: [{
          name: 'hash',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'SignedBlock'
      },
      getBlockHash: {
        description: 'Get the block hash for a specific block',
        params: [{
          name: 'blockNumber',
          type: 'BlockNumber',
          isOptional: true
        }],
        type: 'BlockHash'
      },
      getFinalizedHead: {
        alias: ['chain_getFinalisedHead'],
        description: 'Get hash of the last finalized block in the canon chain',
        params: [],
        type: 'BlockHash'
      },
      subscribeNewHeads: {
        alias: ['chain_unsubscribeNewHeads', 'subscribe_newHead', 'unsubscribe_newHead'],
        description: 'Retrieves the best header via subscription',
        params: [],
        // NOTE These still has the aliassed version, compatible with 1.x
        pubsub: ['newHead', 'subscribeNewHead', 'unsubscribeNewHead'],
        type: 'Header'
      },
      subscribeFinalizedHeads: {
        alias: ['chain_subscribeFinalisedHeads', 'chain_unsubscribeFinalisedHeads'],
        description: 'Retrieves the best finalized header via subscription',
        params: [],
        pubsub: ['finalizedHead', 'subscribeFinalizedHeads', 'unsubscribeFinalizedHeads'],
        type: 'Header'
      },
      subscribeAllHeads: {
        description: 'Retrieves the newest header via subscription',
        params: [],
        pubsub: ['allHead', 'subscribeAllHeads', 'unsubscribeAllHeads'],
        type: 'Header'
      }
    },
    types: {
      BlockHash: 'Hash'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$4 = {
    rpc: {
      getKeys: {
        description: 'Returns the keys with prefix from a child storage, leave empty to get all the keys',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'prefix',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getKeysPaged: {
        alias: ['childstate_getKeysPagedAt'],
        description: 'Returns the keys with prefix from a child storage with pagination support',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'prefix',
          type: 'StorageKey'
        }, {
          name: 'count',
          type: 'u32'
        }, {
          name: 'startKey',
          type: 'StorageKey',
          isOptional: true
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getStorage: {
        description: 'Returns a child storage entry at a specific block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<StorageData>'
      },
      getStorageEntries: {
        description: 'Returns child storage entries for multiple keys at a specific block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<Option<StorageData>>'
      },
      getStorageHash: {
        description: 'Returns the hash of a child storage entry at a block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<Hash>'
      },
      getStorageSize: {
        description: 'Returns the size of a child storage entry at a block state',
        params: [{
          name: 'childKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'Hash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Option<u64>'
      }
    },
    types: {
      // StorageKey extends Bytes
      PrefixedStorageKey: 'StorageKey'
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$3 = {
    rpc: {
      localStorageSet: {
        description: 'Set offchain local storage under given key and prefix',
        params: [{
          name: 'kind',
          type: 'StorageKind'
        }, {
          name: 'key',
          type: 'Bytes'
        }, {
          name: 'value',
          type: 'Bytes'
        }],
        type: 'Null'
      },
      localStorageGet: {
        description: 'Get offchain local storage under given key and prefix',
        params: [{
          name: 'kind',
          type: 'StorageKind'
        }, {
          name: 'key',
          type: 'Bytes'
        }],
        type: 'Option<Bytes>'
      }
    },
    types: {
      StorageKind: {
        _enum: {
          PERSISTENT: 1,
          LOCAL: 2
        }
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  const QUERY_PARAMS = [{
    name: 'extrinsic',
    type: 'Bytes'
  }, {
    name: 'at',
    type: 'BlockHash',
    isHistoric: true,
    isOptional: true
  }];
  var definitions$2 = {
    rpc: {
      queryInfo: {
        description: 'Retrieves the fee information for an encoded extrinsic',
        params: QUERY_PARAMS,
        type: 'RuntimeDispatchInfo'
      },
      queryFeeDetails: {
        description: 'Query the detailed fee of a given encoded extrinsic',
        params: QUERY_PARAMS,
        type: 'FeeDetails'
      }
    },
    types: {
      FeeDetails: {
        inclusionFee: 'Option<InclusionFee>' // skipped in serde
        // tip: 'Balance'

      },
      InclusionFee: {
        baseFee: 'Balance',
        lenFee: 'Balance',
        adjustedWeightFee: 'Balance'
      },
      RuntimeDispatchInfo: {
        weight: 'Weight',
        class: 'DispatchClass',
        partialFee: 'Balance'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // order important in structs... :)

  /* eslint-disable sort-keys */
  var definitions$1 = {
    rpc: {
      call: {
        alias: ['state_callAt'],
        description: 'Perform a call to a builtin on the chain',
        params: [{
          name: 'method',
          type: 'Text'
        }, {
          name: 'data',
          type: 'Bytes'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Bytes'
      },
      getKeys: {
        description: 'Retrieves the keys with a certain prefix',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getPairs: {
        description: 'Returns the keys with prefix, leave empty to get all the keys (deprecated: Use getKeysPaged)',
        params: [{
          name: 'prefix',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<KeyValue>'
      },
      getKeysPaged: {
        alias: ['state_getKeysPagedAt'],
        description: 'Returns the keys with prefix with pagination support.',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'count',
          type: 'u32'
        }, {
          name: 'startKey',
          type: 'StorageKey',
          isOptional: true
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getStorage: {
        alias: ['state_getStorageAt'],
        description: 'Retrieves the storage for a key',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'StorageData'
      },
      getStorageHash: {
        alias: ['state_getStorageHashAt'],
        description: 'Retrieves the storage hash',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Hash'
      },
      getStorageSize: {
        alias: ['state_getStorageSizeAt'],
        description: 'Retrieves the storage size',
        params: [{
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'u64'
      },
      getChildKeys: {
        description: 'Retrieves the keys with prefix of a specific child storage',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageKey>'
      },
      getChildStorage: {
        description: 'Retrieves the child storage for a key',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'StorageData'
      },
      getChildStorageHash: {
        description: 'Retrieves the child storage hash',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Hash'
      },
      getChildStorageSize: {
        description: 'Retrieves the child storage size',
        params: [{
          name: 'childStorageKey',
          type: 'StorageKey'
        }, {
          name: 'childDefinition',
          type: 'StorageKey'
        }, {
          name: 'childType',
          type: 'u32'
        }, {
          name: 'key',
          type: 'StorageKey'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'u64'
      },
      getMetadata: {
        description: 'Returns the runtime metadata',
        params: [{
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Metadata'
      },
      getRuntimeVersion: {
        alias: ['chain_getRuntimeVersion'],
        description: 'Get the runtime version',
        params: [{
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'RuntimeVersion'
      },
      queryStorage: {
        description: 'Query historical storage entries (by key) starting from a start block',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'fromBlock',
          type: 'Hash'
        }, {
          name: 'toBlock',
          type: 'BlockHash',
          isOptional: true
        }],
        type: 'Vec<StorageChangeSet>'
      },
      queryStorageAt: {
        description: 'Query storage entries (by key) starting at block hash given as the second parameter',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'Vec<StorageChangeSet>'
      },
      getChildReadProof: {
        description: 'Returns proof of storage for child key entries at a specific block state.',
        params: [{
          name: 'childStorageKey',
          type: 'PrefixedStorageKey'
        }, {
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'ReadProof'
      },
      getReadProof: {
        description: 'Returns proof of storage entries at a specific block state',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>'
        }, {
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'ReadProof'
      },
      subscribeRuntimeVersion: {
        alias: ['chain_subscribeRuntimeVersion', 'chain_unsubscribeRuntimeVersion'],
        description: 'Retrieves the runtime version via subscription',
        params: [],
        pubsub: ['runtimeVersion', 'subscribeRuntimeVersion', 'unsubscribeRuntimeVersion'],
        type: 'RuntimeVersion'
      },
      subscribeStorage: {
        description: 'Subscribes to storage changes for the provided keys',
        params: [{
          name: 'keys',
          type: 'Vec<StorageKey>',
          isOptional: true
        }],
        pubsub: ['storage', 'subscribeStorage', 'unsubscribeStorage'],
        type: 'StorageChangeSet'
      },
      traceBlock: {
        description: 'Provides a way to trace the re-execution of a single block',
        params: [{
          name: 'block',
          type: 'Hash'
        }, {
          name: 'targets',
          type: 'Option<Text>'
        }, {
          name: 'storageKeys',
          type: 'Option<Text>'
        }, {
          name: 'methods',
          type: 'Option<Text>'
        }],
        type: 'TraceBlockResponse'
      },
      trieMigrationStatus: {
        description: 'Check current migration state',
        params: [{
          name: 'at',
          type: 'BlockHash',
          isHistoric: true,
          isOptional: true
        }],
        type: 'MigrationStatusResult'
      }
    },
    types: {
      ApiId: '[u8; 8]',
      BlockTrace: {
        blockHash: 'Text',
        parentHash: 'Text',
        tracingTargets: 'Text',
        storageKeys: 'Text',
        spans: 'Vec<BlockTraceSpan>',
        events: 'Vec<BlockTraceEvent>'
      },
      BlockTraceEvent: {
        target: 'Text',
        data: 'BlockTraceEventData',
        parentId: 'Option<u64>'
      },
      BlockTraceEventData: {
        stringValues: 'HashMap<Text, Text>'
      },
      BlockTraceSpan: {
        id: 'u64',
        parentId: 'Option<u64>',
        name: 'Text',
        target: 'Text',
        wasm: 'bool'
      },
      KeyValueOption: '(StorageKey, Option<StorageData>)',
      MigrationStatusResult: {
        topRemainingToMigrate: 'u64',
        childRemainingToMigrate: 'u64'
      },
      ReadProof: {
        at: 'Hash',
        proof: 'Vec<Bytes>'
      },
      RuntimeVersionApi: '(ApiId, u32)',
      RuntimeVersion: {
        specName: 'Text',
        implName: 'Text',
        authoringVersion: 'u32',
        specVersion: 'u32',
        implVersion: 'u32',
        apis: 'Vec<RuntimeVersionApi>',
        transactionVersion: 'u32'
      },
      RuntimeVersionPartial: {
        specName: 'Text',
        specVersion: 'u32'
      },
      SpecVersion: 'u32',
      StorageChangeSet: {
        block: 'Hash',
        changes: 'Vec<KeyValueOption>'
      },
      TraceBlockResponse: {
        _enum: {
          TraceError: 'TraceError',
          BlockTrace: 'BlockTrace'
        }
      },
      TraceError: {
        error: 'Text'
      }
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors

  var definitions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    assets: definitions$T,
    authorship: definitions$S,
    aura: definitions$R,
    babe: definitions$Q,
    balances: definitions$P,
    beefy: definitions$O,
    collective: definitions$N,
    consensus: definitions$M,
    contracts: definitions$L,
    democracy: definitions$K,
    dev: definitions$J,
    elections: definitions$I,
    engine: definitions$H,
    evm: definitions$G,
    extrinsics: definitions$F,
    genericAsset: definitions$E,
    gilt: definitions$D,
    grandpa: definitions$C,
    identity: definitions$B,
    imOnline: definitions$A,
    lottery: definitions$z,
    mmr: definitions$y,
    offences: definitions$x,
    proxy: definitions$w,
    recovery: definitions$v,
    scheduler: definitions$u,
    session: definitions$t,
    society: definitions$s,
    staking: definitions$r,
    support: definitions$q,
    syncstate: definitions$p,
    system: definitions$o,
    treasury: definitions$n,
    txpayment: definitions$m,
    uniques: definitions$l,
    utility: definitions$k,
    vesting: definitions$j,
    attestations: definitions$i,
    bridges: definitions$h,
    claims: definitions$g,
    crowdloan: definitions$f,
    cumulus: definitions$e,
    parachains: definitions$d,
    poll: definitions$c,
    purchase: definitions$b,
    xcm: definitions$a,
    contractsAbi: definitions$9,
    eth: definitions$8,
    rpc: definitions$7,
    author: definitions$6,
    chain: definitions$5,
    childstate: definitions$4,
    offchain: definitions$3,
    payment: definitions$2,
    state: definitions$1,
    metadata: definitions$W,
    runtime: definitions$V,
    scaleInfo: definitions$U
  });

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const jsonrpc = {};
  Object.keys(definitions).forEach(s => Object.entries(definitions[s].rpc || {}).forEach(([method, def]) => {
    // allow for section overrides
    const section = def.aliasSection || s;

    if (!jsonrpc[section]) {
      jsonrpc[section] = {};
    }

    jsonrpc[section][method] = objectSpread({}, def, {
      isSubscription: !!def.pubsub,
      jsonrpc: `${section}_${method}`,
      method,
      section
    });
  }));

  // Copyright 2017-2022 @polkadot/types authors & contributors
  function lazyVariants(lookup, {
    type
  }, getName, creator) {
    const result = {};
    const variants = lookup.getSiType(type).def.asVariant.variants;

    for (let i = 0; i < variants.length; i++) {
      lazyMethod(result, variants[i], creator, getName);
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const emptyCheck = {
    extrinsic: {},
    payload: {}
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const polkadot = {
    LimitParathreadCommits: emptyCheck,
    OnlyStakingAndClaims: emptyCheck,
    PrevalidateAttests: emptyCheck,
    RestrictFunctionality: emptyCheck,
    TransactionCallFilter: emptyCheck,
    ValidateDoubleVoteReports: emptyCheck
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const shell = {
    DisallowSigned: emptyCheck
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const statemint = {
    ChargeAssetTxPayment: {
      extrinsic: {
        tip: 'Compact<Balance>',
        // eslint-disable-next-line sort-keys
        assetId: 'Option<AssetId>'
      },
      payload: {}
    }
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const CheckMortality = {
    extrinsic: {
      era: 'ExtrinsicEra'
    },
    payload: {
      blockHash: 'Hash'
    }
  };
  const substrate$1 = {
    ChargeTransactionPayment: {
      extrinsic: {
        tip: 'Compact<Balance>'
      },
      payload: {}
    },
    CheckBlockGasLimit: emptyCheck,
    CheckEra: CheckMortality,
    CheckGenesis: {
      extrinsic: {},
      payload: {
        genesisHash: 'Hash'
      }
    },
    CheckMortality,
    CheckNonZeroSender: emptyCheck,
    CheckNonce: {
      extrinsic: {
        nonce: 'Compact<Index>'
      },
      payload: {}
    },
    CheckSpecVersion: {
      extrinsic: {},
      payload: {
        specVersion: 'u32'
      }
    },
    CheckTxVersion: {
      extrinsic: {},
      payload: {
        transactionVersion: 'u32'
      }
    },
    CheckVersion: {
      extrinsic: {},
      payload: {
        specVersion: 'u32'
      }
    },
    CheckWeight: emptyCheck,
    LockStakingStatus: emptyCheck,
    ValidateEquivocationReport: emptyCheck
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // contain. Unlike in the actual extensions, we define the extra fields not
  // as a Tuple, but rather as a struct so they can be named. These will be
  // expanded into the various fields when added to the payload (we only
  // support V4 onwards with these, V3 and earlier are deemed fixed))

  const allExtensions = objectSpread({}, substrate$1, polkadot, shell, statemint); // the v4 signed extensions prior to the point of exposing these to the
  // metadata. This may not match 100% with the current defaults and are used
  // when not specified in the metadata (which is for very old chains). The
  // order is important here, as applied by default

  const fallbackExtensions = ['CheckVersion', 'CheckGenesis', 'CheckEra', 'CheckNonce', 'CheckWeight', 'ChargeTransactionPayment', 'CheckBlockGasLimit'];
  function findUnknownExtensions(extensions, userExtensions = {}) {
    const names = [...Object.keys(allExtensions), ...Object.keys(userExtensions)];
    return extensions.filter(k => !names.includes(k));
  }
  function expandExtensionTypes(extensions, type, userExtensions = {}) {
    return extensions // Always allow user extensions first - these should provide overrides
    .map(k => userExtensions[k] || allExtensions[k]).filter(info => !!info).reduce((result, info) => objectSpread(result, info[type]), {});
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  /** @internal */
  function decodeEvent(registry, value) {
    if (!value || !value.length) {
      return {
        DataType: Null
      };
    }

    const index = value.subarray(0, 2);
    return {
      DataType: registry.findMetaEvent(index),
      value: {
        data: value.subarray(2),
        index
      }
    };
  }
  /**
   * @name GenericEventData
   * @description
   * Wrapper for the actual data that forms part of an [[Event]]
   */


  class GenericEventData extends Tuple {
    #meta;
    #method;
    #names = null;
    #section;
    #typeDef;

    constructor(registry, value, meta, section = '<unknown>', method = '<unknown>') {
      const fields = (meta === null || meta === void 0 ? void 0 : meta.fields) || [];
      super(registry, fields.map(({
        type
      }) => registry.createLookupType(type)), value);
      this.#meta = meta;
      this.#method = method;
      this.#section = section;
      this.#typeDef = fields.map(({
        type
      }) => registry.lookup.getTypeDef(type));
      const names = fields.map(({
        name
      }) => registry.lookup.sanitizeField(name)[0]).filter(n => !!n);

      if (names.length === fields.length) {
        this.#names = names;
        objectProperties(this, names, (_, i) => this[i]);
      }
    }
    /**
     * @description The wrapped [[EventMetadata]]
     */


    get meta() {
      return this.#meta;
    }
    /**
     * @description The method as a string
     */


    get method() {
      return this.#method;
    }
    /**
     * @description The field names (as available)
     */


    get names() {
      return this.#names;
    }
    /**
     * @description The section as a string
     */


    get section() {
      return this.#section;
    }
    /**
     * @description The [[TypeDef]] for this event
     */


    get typeDef() {
      return this.#typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      if (this.#names !== null) {
        const json = {};

        for (let i = 0; i < this.#names.length; i++) {
          json[this.#names[i]] = this[i].toHuman(isExtended);
        }

        return json;
      }

      return super.toHuman(isExtended);
    }

  }
  /**
   * @name GenericEvent
   * @description
   * A representation of a system event. These are generated via the [[Metadata]] interfaces and
   * specific to a specific Substrate runtime
   */

  class GenericEvent extends Struct {
    // Currently we _only_ decode from Uint8Array, since we expect it to
    // be used via EventRecord
    constructor(registry, _value) {
      const {
        DataType,
        value
      } = decodeEvent(registry, _value);
      super(registry, {
        index: 'EventId',
        // eslint-disable-next-line sort-keys
        data: DataType
      }, value);
    }
    /**
     * @description The wrapped [[EventData]]
     */


    get data() {
      return this.getT('data');
    }
    /**
     * @description The [[EventId]], identifying the raw event
     */


    get index() {
      return this.getT('index');
    }
    /**
     * @description The [[EventMetadata]] with the documentation
     */


    get meta() {
      return this.data.meta;
    }
    /**
     * @description The method string identifying the event
     */


    get method() {
      return this.data.method;
    }
    /**
     * @description The section string identifying the event
     */


    get section() {
      return this.data.section;
    }
    /**
     * @description The [[TypeDef]] for the event
     */


    get typeDef() {
      return this.data.typeDef;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExpanded) {
      return objectSpread({
        method: this.method,
        section: this.section
      }, isExpanded ? {
        docs: this.meta.docs.map(d => d.toString())
      } : null, super.toHuman(isExpanded));
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const BIT_SIGNED = 0b10000000;
  const BIT_UNSIGNED = 0;
  const EMPTY_U8A = new Uint8Array();
  const DEFAULT_VERSION = 4;
  const IMMORTAL_ERA = new Uint8Array([0]);
  const UNMASK_VERSION = 0b01111111;

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const EXTRINSIC_VERSION = 4;

  /**
   * @name GenericExtrinsicV4
   * @description
   * The third generation of compact extrinsics
   */
  class GenericExtrinsicV4 extends Struct {
    constructor(registry, value, {
      isSigned
    } = {}) {
      super(registry, {
        signature: 'ExtrinsicSignatureV4',
        // eslint-disable-next-line sort-keys
        method: 'Call'
      }, GenericExtrinsicV4.decodeExtrinsic(registry, value, isSigned));
    }
    /** @internal */


    static decodeExtrinsic(registry, value, isSigned = false) {
      if (value instanceof GenericExtrinsicV4) {
        return value;
      } else if (value instanceof registry.createClassUnsafe('Call')) {
        return {
          method: value
        };
      } else if (isU8a(value)) {
        // here we decode manually since we need to pull through the version information
        const signature = registry.createTypeUnsafe('ExtrinsicSignatureV4', [value, {
          isSigned
        }]);
        const method = registry.createTypeUnsafe('Call', [value.subarray(signature.encodedLength)]);
        return {
          method,
          signature
        };
      }

      return value || {};
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */


    get method() {
      return this.getT('method');
    }
    /**
     * @description The [[ExtrinsicSignatureV4]]
     */


    get signature() {
      return this.getT('signature');
    }
    /**
     * @description The version for the signature
     */


    get version() {
      return EXTRINSIC_VERSION;
    }
    /**
     * @description Add an [[ExtrinsicSignatureV4]] to the extrinsic (already generated)
     */


    addSignature(signer, signature, payload) {
      this.signature.addSignature(signer, signature, payload);
      return this;
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */


    sign(account, options) {
      this.signature.sign(this.method, account, options);
      return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */


    signFake(signer, options) {
      this.signature.signFake(this.method, signer, options);
      return this;
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const VERSIONS$1 = ['ExtrinsicUnknown', // v0 is unknown
  'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicUnknown', 'ExtrinsicV4'];
  /** @internal */

  function newFromValue(registry, value, version) {
    if (value instanceof GenericExtrinsic) {
      return value.unwrap();
    }

    const isSigned = (version & BIT_SIGNED) === BIT_SIGNED;
    const type = VERSIONS$1[version & UNMASK_VERSION] || VERSIONS$1[0]; // we cast here since the VERSION definition is incredibly broad - we don't have a
    // slice for "only add extrinsic types", and more string definitions become unwieldy

    return registry.createTypeUnsafe(type, [value, {
      isSigned,
      version
    }]);
  }
  /** @internal */


  function decodeExtrinsic(registry, value, version = DEFAULT_VERSION) {
    if (isU8a(value) || Array.isArray(value) || isHex(value)) {
      return decodeU8a$4(registry, u8aToU8a(value), version);
    } else if (value instanceof registry.createClassUnsafe('Call')) {
      return newFromValue(registry, {
        method: value
      }, version);
    }

    return newFromValue(registry, value, version);
  }
  /** @internal */


  function decodeU8a$4(registry, value, version) {
    if (!value.length) {
      return newFromValue(registry, new Uint8Array(), version);
    }

    const [offset, length] = compactFromU8a(value);
    const total = offset + length.toNumber();

    if (total > value.length) {
      throw new Error(`Extrinsic: length less than remainder, expected at least ${total}, found ${value.length}`);
    }

    const data = value.subarray(offset, total);
    return newFromValue(registry, data.subarray(1), data[0]);
  }

  class ExtrinsicBase extends AbstractBase {
    constructor(registry, value, initialU8aLength) {
      super(registry, value, initialU8aLength);
      const signKeys = Object.keys(registry.getSignedExtensionTypes());

      const getter = key => this.inner.signature[key]; // This is on the abstract class, ensuring that hasOwnProperty operates
      // correctly, i.e. it needs to be on the base class exposing it


      for (let i = 0; i < signKeys.length; i++) {
        objectProperty(this, signKeys[i], getter);
      }
    }
    /**
     * @description The arguments passed to for the call, exposes args so it is compatible with [[Call]]
     */


    get args() {
      return this.method.args;
    }
    /**
     * @description The argument definitions, compatible with [[Call]]
     */


    get argsDef() {
      return this.method.argsDef;
    }
    /**
     * @description The actual `[sectionIndex, methodIndex]` as used in the Call
     */


    get callIndex() {
      return this.method.callIndex;
    }
    /**
     * @description The actual data for the Call
     */


    get data() {
      return this.method.data;
    }
    /**
     * @description The era for this extrinsic
     */


    get era() {
      return this.inner.signature.era;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description `true` id the extrinsic is signed
     */


    get isSigned() {
      return this.inner.signature.isSigned;
    }
    /**
     * @description The length of the actual data, excluding prefix
     */


    get length() {
      return this.toU8a(true).length;
    }
    /**
     * @description The [[FunctionMetadataLatest]] that describes the extrinsic
     */


    get meta() {
      return this.method.meta;
    }
    /**
     * @description The [[Call]] this extrinsic wraps
     */


    get method() {
      return this.inner.method;
    }
    /**
     * @description The nonce for this extrinsic
     */


    get nonce() {
      return this.inner.signature.nonce;
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */


    get signature() {
      return this.inner.signature.signature;
    }
    /**
     * @description The [[Address]] that signed
     */


    get signer() {
      return this.inner.signature.signer;
    }
    /**
     * @description Forwards compat
     */


    get tip() {
      return this.inner.signature.tip;
    }
    /**
     * @description Returns the raw transaction version (not flagged with signing information)
    */


    get type() {
      return this.inner.version;
    }

    get inner() {
      return this.unwrap();
    }
    /**
     * @description Returns the encoded version flag
    */


    get version() {
      return this.type | (this.isSigned ? BIT_SIGNED : BIT_UNSIGNED);
    }
    /**
     * @description Checks if the source matches this in type
     */


    is(other) {
      return this.method.is(other);
    }

    unwrap() {
      return super.unwrap();
    }

  }
  /**
   * @name GenericExtrinsic
   * @description
   * Representation of an Extrinsic in the system. It contains the actual call,
   * (optional) signature and encodes with an actual length prefix
   *
   * {@link https://github.com/paritytech/wiki/blob/master/Extrinsic.md#the-extrinsic-format-for-node}.
   *
   * Can be:
   * - signed, to create a transaction
   * - left as is, to create an inherent
   */


  class GenericExtrinsic extends ExtrinsicBase {
    #hashCache;

    constructor(registry, value, {
      version
    } = {}) {
      super(registry, decodeExtrinsic(registry, value, version));
    }
    /**
     * @description returns a hash of the contents
     */


    get hash() {
      if (!this.#hashCache) {
        this.#hashCache = super.hash;
      }

      return this.#hashCache;
    }
    /**
     * @description Injects an already-generated signature into the extrinsic
     */


    addSignature(signer, signature, payload) {
      this.inner.addSignature(signer, signature, payload);
      this.#hashCache = undefined;
      return this;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      const encoded = u8aConcat(...this.toU8aInner());
      return {
        inner: this.isSigned ? this.inner.inspect().inner : this.inner.method.inspect().inner,
        outer: [compactToU8a(encoded.length), new Uint8Array([this.version])]
      };
    }
    /**
     * @description Sign the extrinsic with a specific keypair
     */


    sign(account, options) {
      this.inner.sign(account, options);
      this.#hashCache = undefined;
      return this;
    }
    /**
     * @describe Adds a fake signature to the extrinsic
     */


    signFake(signer, options) {
      this.inner.signFake(signer, options);
      this.#hashCache = undefined;
      return this;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex(isBare) {
      return u8aToHex(this.toU8a(isBare));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExpanded) {
      return objectSpread({}, {
        isSigned: this.isSigned,
        method: this.method.toHuman(isExpanded)
      }, this.isSigned ? {
        era: this.era.toHuman(isExpanded),
        nonce: this.nonce.toHuman(isExpanded),
        signature: this.signature.toHex(),
        signer: this.signer.toHuman(isExpanded),
        tip: this.tip.toHuman(isExpanded)
      } : null);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toHex();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Extrinsic';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value is not length-prefixed
     */


    toU8a(isBare) {
      const encoded = u8aConcat(...this.toU8aInner());
      return isBare ? encoded : compactAddLength(encoded);
    }

    toU8aInner() {
      // we do not apply bare to the internal values, rather this only determines out length addition,
      // where we strip all lengths this creates an extrinsic that cannot be decoded
      return [new Uint8Array([this.version]), this.inner.toU8a()];
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  function getTrailingZeros(period) {
    const binary = period.toString(2);
    let index = 0;

    while (binary[binary.length - 1 - index] === '0') {
      index++;
    }

    return index;
  }
  /** @internal */


  function decodeMortalEra(registry, value) {
    if (isU8a(value) || isHex(value) || Array.isArray(value)) {
      return decodeMortalU8a(registry, u8aToU8a(value));
    } else if (!value) {
      return [new u64(registry), new u64(registry)];
    } else if (isObject$1(value)) {
      return decodeMortalObject(registry, value);
    }

    throw new Error('Invalid data passed to Mortal era');
  }
  /** @internal */


  function decodeMortalObject(registry, value) {
    const {
      current,
      period
    } = value;
    let calPeriod = Math.pow(2, Math.ceil(Math.log2(period)));
    calPeriod = Math.min(Math.max(calPeriod, 4), 1 << 16);
    const phase = current % calPeriod;
    const quantizeFactor = Math.max(calPeriod >> 12, 1);
    const quantizedPhase = phase / quantizeFactor * quantizeFactor;
    return [new u64(registry, calPeriod), new u64(registry, quantizedPhase)];
  }
  /** @internal */


  function decodeMortalU8a(registry, value) {
    if (value.length === 0) {
      return [new u64(registry), new u64(registry)];
    }

    const first = u8aToBn(value.subarray(0, 1)).toNumber();
    const second = u8aToBn(value.subarray(1, 2)).toNumber();
    const encoded = first + (second << 8);
    const period = 2 << encoded % (1 << 4);
    const quantizeFactor = Math.max(period >> 12, 1);
    const phase = (encoded >> 4) * quantizeFactor;

    if (period < 4 || phase >= period) {
      throw new Error('Invalid data passed to Mortal era');
    }

    return [new u64(registry, period), new u64(registry, phase)];
  }
  /** @internal */
  // eslint-disable-next-line @typescript-eslint/ban-types


  function decodeExtrinsicEra(value = new Uint8Array()) {
    if (isU8a(value)) {
      return !value.length || value[0] === 0 ? new Uint8Array([0]) : new Uint8Array([1, value[0], value[1]]);
    } else if (!value) {
      return new Uint8Array([0]);
    } else if (value instanceof GenericExtrinsicEra) {
      return decodeExtrinsicEra(value.toU8a());
    } else if (isHex(value)) {
      return decodeExtrinsicEra(hexToU8a(value));
    } else if (isObject$1(value)) {
      const entries = Object.entries(value).map(([k, v]) => [k.toLowerCase(), v]);
      const mortal = entries.find(([k]) => k.toLowerCase() === 'mortalera');
      const immortal = entries.find(([k]) => k.toLowerCase() === 'immortalera'); // this is to de-serialize from JSON

      return mortal ? {
        MortalEra: mortal[1]
      } : immortal ? {
        ImmortalEra: immortal[1]
      } : {
        MortalEra: value
      };
    }

    throw new Error('Invalid data passed to Era');
  }
  /**
   * @name ImmortalEra
   * @description
   * The ImmortalEra for an extrinsic
   */


  class ImmortalEra extends Raw {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    constructor(registry, value) {
      // For immortals, we always provide the known value (i.e. treated as a
      // constant no matter how it is constructed - it is a fixed structure)
      super(registry, IMMORTAL_ERA);
    }

  }
  /**
   * @name MortalEra
   * @description
   * The MortalEra for an extrinsic, indicating period and phase
   */

  class MortalEra extends Tuple {
    constructor(registry, value) {
      super(registry, {
        period: u64,
        phase: u64
      }, decodeMortalEra(registry, value));
    }
    /**
     * @description Encoded length for mortals occupy 2 bytes, different from the actual Tuple since it is encoded. This is a shortcut fro `toU8a().length`
     */


    get encodedLength() {
      return 2;
    }
    /**
     * @description The period of this Mortal wraps as a [[U64]]
     */


    get period() {
      return this[0];
    }
    /**
     * @description The phase of this Mortal wraps as a [[U64]]
     */


    get phase() {
      return this[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return {
        period: formatNumber(this.period),
        phase: formatNumber(this.phase)
      };
    }
    /**
     * @description Returns a JSON representation of the actual value
     */


    toJSON() {
      return this.toHex();
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     * Period and phase are encoded:
     *   - The period of validity from the block hash found in the signing material.
     *   - The phase in the period that this transaction's lifetime begins (and, importantly,
     *     implies which block hash is included in the signature material). If the `period` is
     *     greater than 1 << 12, then it will be a factor of the times greater than 1<<12 that
     *     `period` is.
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars


    toU8a(isBare) {
      const period = this.period.toNumber();
      const encoded = Math.min(15, Math.max(1, getTrailingZeros(period) - 1)) + (this.phase.toNumber() / Math.max(period >> 12, 1) << 4);
      return new Uint8Array([encoded & 0xff, encoded >> 8]);
    }
    /**
     * @description Get the block number of the start of the era whose properties this object describes that `current` belongs to.
     */


    birth(current) {
      const phase = this.phase.toNumber();
      const period = this.period.toNumber(); // FIXME No toNumber() here

      return ~~((Math.max(bnToBn(current).toNumber(), phase) - phase) / period) * period + phase;
    }
    /**
     * @description Get the block number of the first block at which the era has ended.
     */


    death(current) {
      // FIXME No toNumber() here
      return this.birth(current) + this.period.toNumber();
    }

  }
  /**
   * @name GenericExtrinsicEra
   * @description
   * The era for an extrinsic, indicating either a mortal or immortal extrinsic
   */

  class GenericExtrinsicEra extends Enum {
    constructor(registry, value) {
      super(registry, {
        ImmortalEra,
        MortalEra
      }, decodeExtrinsicEra(value));
    }
    /**
     * @description Override the encoded length method
     */


    get encodedLength() {
      return this.isImmortalEra ? this.asImmortalEra.encodedLength : this.asMortalEra.encodedLength;
    }
    /**
     * @description Returns the item as a [[ImmortalEra]]
     */


    get asImmortalEra() {
      if (!this.isImmortalEra) {
        throw new Error(`Cannot convert '${this.type}' via asImmortalEra`);
      }

      return this.inner;
    }
    /**
     * @description Returns the item as a [[MortalEra]]
     */


    get asMortalEra() {
      if (!this.isMortalEra) {
        throw new Error(`Cannot convert '${this.type}' via asMortalEra`);
      }

      return this.inner;
    }
    /**
     * @description `true` if Immortal
     */


    get isImmortalEra() {
      return this.index === 0;
    }
    /**
     * @description `true` if Mortal
     */


    get isMortalEra() {
      return this.index > 0;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the parity-codec specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return this.isMortalEra ? this.asMortalEra.toU8a(isBare) : this.asImmortalEra.toU8a(isBare);
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const VERSIONS = ['ExtrinsicPayloadUnknown', // v0 is unknown
  'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadUnknown', 'ExtrinsicPayloadV4'];
  /** @internal */

  function decodeExtrinsicPayload(registry, value, version = DEFAULT_VERSION) {
    if (value instanceof GenericExtrinsicPayload) {
      return value.unwrap();
    }

    return registry.createTypeUnsafe(VERSIONS[version] || VERSIONS[0], [value, {
      version
    }]);
  }
  /**
   * @name GenericExtrinsicPayload
   * @description
   * A signing payload for an [[Extrinsic]]. For the final encoding, it is variable length based
   * on the contents included
   */


  class GenericExtrinsicPayload extends AbstractBase {
    constructor(registry, value, {
      version
    } = {}) {
      super(registry, decodeExtrinsicPayload(registry, value, version));
    }
    /**
     * @description The block [[Hash]] the signature applies to (mortal/immortal)
     */


    get blockHash() {
      return this.inner.blockHash;
    }
    /**
     * @description The [[ExtrinsicEra]]
     */


    get era() {
      return this.inner.era;
    }
    /**
     * @description The genesis block [[Hash]] the signature applies to
     */


    get genesisHash() {
      // NOTE only v3+
      return this.inner.genesisHash || this.registry.createTypeUnsafe('Hash', []);
    }
    /**
     * @description The [[Raw]] contained in the payload
     */


    get method() {
      return this.inner.method;
    }
    /**
     * @description The [[Index]]
     */


    get nonce() {
      return this.inner.nonce;
    }
    /**
     * @description The specVersion as a [[u32]] for this payload
     */


    get specVersion() {
      // NOTE only v3+
      return this.inner.specVersion || this.registry.createTypeUnsafe('u32', []);
    }
    /**
     * @description The [[Balance]]
     */


    get tip() {
      // NOTE from v2+
      return this.inner.tip || this.registry.createTypeUnsafe('Compact<Balance>', []);
    }
    /**
     * @description The transaction version as a [[u32]] for this payload
     */


    get transactionVersion() {
      // NOTE only v4+
      return this.inner.transactionVersion || this.registry.createTypeUnsafe('u32', []);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return this.inner.eq(other);
    }
    /**
     * @description Sign the payload with the keypair
     */


    sign(signerPair) {
      const signature = this.inner.sign(signerPair); // This is extensible, so we could quite readily extend to send back extra
      // information, such as for instance the payload, i.e. `payload: this.toHex()`
      // For the case here we sign via the extrinsic, we ignore the return, so generally
      // this is applicable for external signing

      return {
        signature: u8aToHex(signature)
      };
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExtended) {
      return this.inner.toHuman(isExtended);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toHex();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.toHex();
    }
    /**
     * @description Returns a serialized u8a form
     */


    toU8a(isBare) {
      // call our parent, with only the method stripped
      return super.toU8a(isBare ? {
        method: true
      } : false);
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /**
   * @name GenericExtrinsicPayloadUnknown
   * @description
   * A default handler for payloads where the version is not known (default throw)
   */

  class GenericExtrinsicPayloadUnknown extends Struct {
    constructor(registry, value, {
      version = 0
    } = {}) {
      super(registry, {});
      throw new Error(`Unsupported extrinsic payload version ${version}`);
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /**
   * @name GenericExtrinsicUnknown
   * @description
   * A default handler for extrinsics where the version is not known (default throw)
   */

  class GenericExtrinsicUnknown extends Struct {
    constructor(registry, value, {
      isSigned = false,
      version = 0
    } = {}) {
      super(registry, {});
      throw new Error(`Unsupported ${isSigned ? '' : 'un'}signed extrinsic version ${version & UNMASK_VERSION}`);
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const knownTypes = {
    address: 'Address',
    blockHash: 'Hash',
    blockNumber: 'BlockNumber',
    era: 'ExtrinsicEra',
    genesisHash: 'Hash',
    method: 'Call',
    nonce: 'Compact<Index>',
    runtimeVersion: 'RuntimeVersion',
    signedExtensions: 'Vec<Text>',
    tip: 'Compact<Balance>',
    version: 'u8'
  };
  /**
   * @name GenericSignerPayload
   * @description
   * A generic signer payload that can be used for serialization between API and signer
   */

  class GenericSignerPayload extends Struct {
    #extraTypes;

    constructor(registry, value) {
      const extensionTypes = objectSpread({}, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra());
      super(registry, objectSpread({}, extensionTypes, knownTypes), value);
      this.#extraTypes = {};

      const getter = key => this.get(key); // add all extras that are not in the base types


      for (const [key, type] of Object.entries(extensionTypes)) {
        if (!knownTypes[key]) {
          this.#extraTypes[key] = type;
        }

        objectProperty(this, key, getter);
      }
    }

    get address() {
      return this.getT('address');
    }

    get blockHash() {
      return this.getT('blockHash');
    }

    get blockNumber() {
      return this.getT('blockNumber');
    }

    get era() {
      return this.getT('era');
    }

    get genesisHash() {
      return this.getT('genesisHash');
    }

    get method() {
      return this.getT('method');
    }

    get nonce() {
      return this.getT('nonce');
    }

    get runtimeVersion() {
      return this.getT('runtimeVersion');
    }

    get signedExtensions() {
      return this.getT('signedExtensions');
    }

    get tip() {
      return this.getT('tip');
    }

    get version() {
      return this.getT('version');
    }
    /**
     * @description Creates an representation of the structure as an ISignerPayload JSON
     */


    toPayload() {
      const result = {};
      const keys = Object.keys(this.#extraTypes); // add any explicit overrides we may have

      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const value = this.get(key);
        const isOption = value instanceof Option; // Don't include Option.isNone

        if (!isOption || value.isSome) {
          result[key] = value.toHex();
        }
      }

      return objectSpread(result, {
        // the known defaults as managed explicitly and has different
        // formatting in cases, e.g. we mostly expose a hex format here
        address: this.address.toString(),
        blockHash: this.blockHash.toHex(),
        blockNumber: this.blockNumber.toHex(),
        era: this.era.toHex(),
        genesisHash: this.genesisHash.toHex(),
        method: this.method.toHex(),
        nonce: this.nonce.toHex(),
        signedExtensions: this.signedExtensions.map(e => e.toString()),
        specVersion: this.runtimeVersion.specVersion.toHex(),
        tip: this.tip.toHex(),
        transactionVersion: this.runtimeVersion.transactionVersion.toHex(),
        version: this.version.toNumber()
      });
    }
    /**
     * @description Creates a representation of the payload in raw Exrinsic form
     */


    toRaw() {
      const payload = this.toPayload();
      const data = u8aToHex(this.registry.createTypeUnsafe('ExtrinsicPayload', [payload, {
        version: payload.version
      }]) // NOTE Explicitly pass the bare flag so the method is encoded un-prefixed (non-decodable, for signing only)
      .toU8a({
        method: true
      }));
      return {
        address: payload.address,
        data,
        type: 'payload'
      };
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // a helper function for both types of payloads, Raw and metadata-known
  function sign(registry, signerPair, u8a, options) {
    const encoded = u8a.length > 256 ? registry.hash(u8a) : u8a;
    return signerPair.sign(encoded, options);
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /**
   * @name GenericExtrinsicPayloadV4
   * @description
   * A signing payload for an [[Extrinsic]]. For the final encoding, it is
   * variable length based on the contents included
   */

  class GenericExtrinsicPayloadV4 extends Struct {
    #signOptions;

    constructor(registry, value) {
      super(registry, objectSpread({
        method: 'Bytes'
      }, registry.getSignedExtensionTypes(), registry.getSignedExtensionExtra()), value); // Do detection for the type of extrinsic, in the case of MultiSignature
      // this is an enum, in the case of AnySignature, this is a Hash only
      // (which may be 64 or 65 bytes)

      this.#signOptions = {
        withType: registry.createTypeUnsafe('ExtrinsicSignature', []) instanceof Enum
      };
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      return super.inspect({
        method: true
      });
    }
    /**
     * @description The block [[Hash]] the signature applies to (mortal/immortal)
     */


    get blockHash() {
      return this.getT('blockHash');
    }
    /**
     * @description The [[ExtrinsicEra]]
     */


    get era() {
      return this.getT('era');
    }
    /**
     * @description The genesis [[Hash]] the signature applies to (mortal/immortal)
     */


    get genesisHash() {
      return this.getT('genesisHash');
    }
    /**
     * @description The [[Bytes]] contained in the payload
     */


    get method() {
      return this.getT('method');
    }
    /**
     * @description The [[Index]]
     */


    get nonce() {
      return this.getT('nonce');
    }
    /**
     * @description The specVersion for this signature
     */


    get specVersion() {
      return this.getT('specVersion');
    }
    /**
     * @description The tip [[Balance]]
     */


    get tip() {
      return this.getT('tip');
    }
    /**
     * @description The transactionVersion for this signature
     */


    get transactionVersion() {
      return this.getT('transactionVersion');
    }
    /**
     * @description
     * The (optional) asset id for this signature for chains that support transaction fees in assets
     */


    get assetId() {
      return this.getT('assetId');
    }
    /**
     * @description Sign the payload with the keypair
     */


    sign(signerPair) {
      // NOTE The `toU8a({ method: true })` argument is absolutely critical, we
      // don't want the method (Bytes) to have the length prefix included. This
      // means that the data-as-signed is un-decodable, but is also doesn't need
      // the extra information, only the pure data (and is not decoded) ...
      // The same applies to V1..V3, if we have a V5, carrythis comment
      return sign(this.registry, signerPair, this.toU8a({
        method: true
      }), this.#signOptions);
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  const FAKE_SIGNATURE = new Uint8Array(256).fill(1);

  function toAddress(registry, address) {
    return registry.createTypeUnsafe('Address', [isU8a(address) ? u8aToHex(address) : address]);
  }
  /**
   * @name GenericExtrinsicSignatureV4
   * @description
   * A container for the [[Signature]] associated with a specific [[Extrinsic]]
   */


  class GenericExtrinsicSignatureV4 extends Struct {
    #signKeys;

    constructor(registry, value, {
      isSigned
    } = {}) {
      const signTypes = registry.getSignedExtensionTypes();
      super(registry, objectSpread( // eslint-disable-next-line sort-keys
      {
        signer: 'Address',
        signature: 'ExtrinsicSignature'
      }, signTypes), GenericExtrinsicSignatureV4.decodeExtrinsicSignature(value, isSigned));
      this.#signKeys = Object.keys(signTypes);
      objectProperties(this, this.#signKeys, k => this.get(k));
    }
    /** @internal */


    static decodeExtrinsicSignature(value, isSigned = false) {
      if (!value) {
        return EMPTY_U8A;
      } else if (value instanceof GenericExtrinsicSignatureV4) {
        return value;
      }

      return isSigned ? value : EMPTY_U8A;
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      return this.isSigned ? super.encodedLength : 0;
    }
    /**
     * @description `true` if the signature is valid
     */


    get isSigned() {
      return !this.signature.isEmpty;
    }
    /**
     * @description The [[ExtrinsicEra]] (mortal or immortal) this signature applies to
     */


    get era() {
      return this.getT('era');
    }
    /**
     * @description The [[Index]] for the signature
     */


    get nonce() {
      return this.getT('nonce');
    }
    /**
     * @description The actual [[EcdsaSignature]], [[Ed25519Signature]] or [[Sr25519Signature]]
     */


    get signature() {
      // the second case here is when we don't have an enum signature, treat as raw
      return this.multiSignature.value || this.multiSignature;
    }
    /**
     * @description The raw [[ExtrinsicSignature]]
     */


    get multiSignature() {
      return this.getT('signature');
    }
    /**
     * @description The [[Address]] that signed
     */


    get signer() {
      return this.getT('signer');
    }
    /**
     * @description The [[Balance]] tip
     */


    get tip() {
      return this.getT('tip');
    }

    _injectSignature(signer, signature, payload) {
      // use the fields exposed to guide the getters
      for (let i = 0; i < this.#signKeys.length; i++) {
        const k = this.#signKeys[i];
        const v = payload.get(k);

        if (!isUndefined$1(v)) {
          this.set(k, v);
        }
      } // additional fields (exposed in struct itself)


      this.set('signer', signer);
      this.set('signature', signature);
      return this;
    }
    /**
     * @description Adds a raw signature
     */


    addSignature(signer, signature, payload) {
      return this._injectSignature(toAddress(this.registry, signer), this.registry.createTypeUnsafe('ExtrinsicSignature', [signature]), new GenericExtrinsicPayloadV4(this.registry, payload));
    }
    /**
     * @description Creates a payload from the supplied options
     */


    createPayload(method, options) {
      const {
        era,
        runtimeVersion: {
          specVersion,
          transactionVersion
        }
      } = options;
      return new GenericExtrinsicPayloadV4(this.registry, objectSpread({}, options, {
        era: era || IMMORTAL_ERA,
        method: method.toHex(),
        specVersion,
        transactionVersion
      }));
    }
    /**
     * @description Generate a payload and applies the signature from a keypair
     */


    sign(method, account, options) {
      if (!account || !account.addressRaw) {
        throw new Error(`Expected a valid keypair for signing, found ${stringify(account)}`);
      }

      const payload = this.createPayload(method, options);
      return this._injectSignature(toAddress(this.registry, account.addressRaw), this.registry.createTypeUnsafe('ExtrinsicSignature', [payload.sign(account)]), payload);
    }
    /**
     * @description Generate a payload and applies a fake signature
     */


    signFake(method, address, options) {
      if (!address) {
        throw new Error(`Expected a valid address for signing, found ${stringify(address)}`);
      }

      const payload = this.createPayload(method, options);
      return this._injectSignature(toAddress(this.registry, address), this.registry.createTypeUnsafe('ExtrinsicSignature', [FAKE_SIGNATURE]), payload);
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      return this.isSigned ? super.toU8a(isBare) : EMPTY_U8A;
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /** @internal */

  function decodeAccountId$1(value) {
    if (isU8a(value) || Array.isArray(value)) {
      return u8aToU8a(value);
    } else if (isHex(value) || isEthereumAddress(value.toString())) {
      return hexToU8a(value.toString());
    } else if (isString$1(value)) {
      return u8aToU8a(value);
    }

    return value;
  }
  /**
   * @name GenericEthereumAccountId
   * @description
   * A wrapper around an Ethereum-compatible AccountId. Since we are dealing with
   * underlying addresses (20 bytes in length), we extend from U8aFixed which is
   * just a Uint8Array wrapper with a fixed length.
   */


  class GenericEthereumAccountId extends U8aFixed {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAccountId$1(value), 160);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return super.eq(decodeAccountId$1(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toString();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return ethereumEncode(this);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'AccountId';
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const PREFIX_1BYTE = 0xef;
  const PREFIX_2BYTE = 0xfc;
  const PREFIX_4BYTE = 0xfd;
  const PREFIX_8BYTE = 0xfe;
  const MAX_1BYTE = new BN(PREFIX_1BYTE);
  const MAX_2BYTE = new BN(1).shln(16);
  const MAX_4BYTE = new BN(1).shln(32);
  /** @internal */

  function decodeAccountIndex(value) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    if (value instanceof GenericAccountIndex) {
      // `value.toBn()` on AccountIndex returns a pure BN (i.e. not an
      // AccountIndex), which has the initial `toString()` implementation.
      return value.toBn();
    } else if (isBn(value) || isNumber$1(value) || isHex(value) || isU8a(value) || isBigInt(value)) {
      return value;
    }

    return decodeAccountIndex(decodeAddress(value));
  }
  /**
   * @name GenericAccountIndex
   * @description
   * A wrapper around an AccountIndex, which is a shortened, variable-length encoding
   * for an Account. We extends from [[U32]] to provide the number-like properties.
   */


  class GenericAccountIndex extends u32 {
    constructor(registry, value = new BN(0)) {
      super(registry, decodeAccountIndex(value));
    }

    static calcLength(_value) {
      const value = bnToBn(_value);

      if (value.lte(MAX_1BYTE)) {
        return 1;
      } else if (value.lt(MAX_2BYTE)) {
        return 2;
      } else if (value.lt(MAX_4BYTE)) {
        return 4;
      }

      return 8;
    }

    static readLength(input) {
      const first = input[0];

      if (first === PREFIX_2BYTE) {
        return [1, 2];
      } else if (first === PREFIX_4BYTE) {
        return [1, 4];
      } else if (first === PREFIX_8BYTE) {
        return [1, 8];
      }

      return [0, 1];
    }

    static writeLength(input) {
      switch (input.length) {
        case 2:
          return new Uint8Array([PREFIX_2BYTE]);

        case 4:
          return new Uint8Array([PREFIX_4BYTE]);

        case 8:
          return new Uint8Array([PREFIX_8BYTE]);

        default:
          return new Uint8Array([]);
      }
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      // shortcut for BN or Number, don't create an object
      if (isBn(other) || isNumber$1(other)) {
        return super.eq(other);
      } // convert and compare


      return super.eq(this.registry.createTypeUnsafe('AccountIndex', [other]));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toString();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      const length = GenericAccountIndex.calcLength(this);
      return encodeAddress(this.toU8a().subarray(0, length), this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'AccountIndex';
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  const ACCOUNT_ID_PREFIX$1 = new Uint8Array([0xff]);
  /** @internal */

  function decodeString$1(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 20 ? registry.createTypeUnsafe('EthereumAccountId', [decoded]) : registry.createTypeUnsafe('AccountIndex', [u8aToBn(decoded, true)]);
  }
  /** @internal */


  function decodeU8a$3(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 20) {
      return registry.createTypeUnsafe('EthereumAccountId', [value]);
    } else if (value[0] === 0xff) {
      return registry.createTypeUnsafe('EthereumAccountId', [value.subarray(1)]);
    }

    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe('AccountIndex', [u8aToBn(value.subarray(offset, offset + length))]);
  }

  function decodeAddressOrIndex$1(registry, value) {
    return value instanceof GenericEthereumLookupSource ? value.inner : value instanceof GenericEthereumAccountId || value instanceof GenericAccountIndex ? value : isU8a(value) || Array.isArray(value) || isHex(value) ? decodeU8a$3(registry, u8aToU8a(value)) : isBn(value) || isNumber$1(value) || isBigInt(value) ? registry.createTypeUnsafe('AccountIndex', [value]) : decodeString$1(registry, value);
  }
  /**
   * @name GenericEthereumLookupSource
   * @description
   * A wrapper around an EthereumAccountId and/or AccountIndex that is encoded with a prefix.
   * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
   * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
   * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
   */


  class GenericEthereumLookupSource extends AbstractBase {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAddressOrIndex$1(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
      rawLength > 1 ? 1 : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */


    get _rawLength() {
      return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Address';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = this.inner.toU8a().subarray(0, this._rawLength);
      return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX$1, encoded);
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /** @internal */

  function decodeAccountId(value) {
    if (isU8a(value) || Array.isArray(value)) {
      return u8aToU8a(value);
    } else if (!value) {
      return new Uint8Array();
    } else if (isHex(value)) {
      return hexToU8a(value);
    } else if (isString$1(value)) {
      return decodeAddress(value.toString());
    }

    throw new Error(`Unknown type passed to AccountId constructor, found typeof ${typeof value}`);
  }
  /**
   * @name GenericAccountId
   * @description
   * A wrapper around an AccountId/PublicKey representation. Since we are dealing with
   * underlying PublicKeys (32 bytes in length), we extend from U8aFixed which is
   * just a Uint8Array wrapper with a fixed length.
   */


  class GenericAccountId extends U8aFixed {
    constructor(registry, value) {
      const decoded = decodeAccountId(value); // Part of stream containing >= 32 bytes or a all empty (defaults)

      if (decoded.length < 32 && decoded.some(b => b)) {
        throw new Error(`Invalid AccountId provided, expected 32 bytes, found ${decoded.length}`);
      }

      super(registry, decoded, 256);
    }
    /**
     * @description Compares the value of the input to see if there is a match
     */


    eq(other) {
      return super.eq(decodeAccountId(other));
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toJSON();
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      return this.toString();
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return encodeAddress(this, this.registry.chainSS58);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'AccountId';
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  /**
   * @name GenericBlock
   * @description
   * A block encoded with header and extrinsics
   */
  class GenericBlock extends Struct {
    constructor(registry, value) {
      super(registry, {
        header: 'Header',
        // eslint-disable-next-line sort-keys
        extrinsics: 'Vec<Extrinsic>'
      }, value);
    }
    /**
     * @description Encodes a content [[Hash]] for the block
     */


    get contentHash() {
      return this.registry.hash(this.toU8a());
    }
    /**
     * @description The [[Extrinsic]] contained in the block
     */


    get extrinsics() {
      return this.getT('extrinsics');
    }
    /**
     * @description Block/header [[Hash]]
     */


    get hash() {
      return this.header.hash;
    }
    /**
     * @description The [[Header]] of the block
     */


    get header() {
      return this.getT('header');
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  /**
   * Get a mapping of `argument name -> argument type` for the function, from
   * its metadata.
   *
   * @param meta - The function metadata used to get the definition.
   * @internal
   */
  function getArgsDef(registry, meta) {
    return meta.fields.reduce((result, {
      name,
      type
    }, index) => {
      result[name.unwrapOr(`param${index}`).toString()] = registry.createLookupType(type);
      return result;
    }, {});
  }
  /** @internal */


  function decodeCallViaObject(registry, value, _meta) {
    // we only pass args/methodsIndex out
    const {
      args,
      callIndex
    } = value; // Get the correct lookupIndex
    // eslint-disable-next-line @typescript-eslint/no-use-before-define

    const lookupIndex = callIndex instanceof GenericCallIndex ? callIndex.toU8a() : callIndex; // Find metadata with callIndex

    const meta = _meta || registry.findMetaCall(lookupIndex).meta;

    return {
      args,
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  /** @internal */


  function decodeCallViaU8a(registry, value, _meta) {
    // We need 2 bytes for the callIndex
    const callIndex = registry.firstCallIndex.slice();
    callIndex.set(value.subarray(0, 2), 0); // Find metadata with callIndex

    const meta = _meta || registry.findMetaCall(callIndex).meta;

    return {
      args: value.subarray(2),
      argsDef: getArgsDef(registry, meta),
      callIndex,
      meta
    };
  }
  /**
   * Decode input to pass into constructor.
   *
   * @param value - Value to decode, one of:
   * - hex
   * - Uint8Array
   * - {@see DecodeMethodInput}
   * @param _meta - Metadata to use, so that `injectMethods` lookup is not
   * necessary.
   * @internal
   */


  function decodeCall(registry, value = new Uint8Array(), _meta) {
    if (isU8a(value) || isHex(value)) {
      return decodeCallViaU8a(registry, u8aToU8a(value), _meta);
    } else if (isObject$1(value) && value.callIndex && value.args) {
      return decodeCallViaObject(registry, value, _meta);
    }

    throw new Error(`Call: Cannot decode value '${value}' of type ${typeof value}`);
  }
  /**
   * @name GenericCallIndex
   * @description
   * A wrapper around the `[sectionIndex, methodIndex]` value that uniquely identifies a method
   */


  class GenericCallIndex extends U8aFixed {
    constructor(registry, value) {
      super(registry, value, 16);
    }

  }
  /**
   * @name GenericCall
   * @description
   * Extrinsic function descriptor
   */

  class GenericCall extends Struct {
    constructor(registry, value, meta) {
      const decoded = decodeCall(registry, value, meta);

      try {
        super(registry, {
          callIndex: GenericCallIndex,
          // eslint-disable-next-line sort-keys
          args: Struct.with(decoded.argsDef)
        }, decoded);
      } catch (error) {
        let method = 'unknown.unknown';

        try {
          const c = registry.findMetaCall(decoded.callIndex);
          method = `${c.section}.${c.method}`;
        } catch (error) {// ignore
        }

        throw new Error(`Call: failed decoding ${method}:: ${error.message}`);
      }

      this._meta = decoded.meta;
    }
    /**
     * @description The arguments for the function call
     */


    get args() {
      return [...this.getT('args').values()];
    }
    /**
     * @description The argument definitions
     */


    get argsDef() {
      return getArgsDef(this.registry, this.meta);
    }
    /**
     * @description The argument entries
     */


    get argsEntries() {
      return [...this.getT('args').entries()];
    }
    /**
     * @description The encoded `[sectionIndex, methodIndex]` identifier
     */


    get callIndex() {
      return this.getT('callIndex').toU8a();
    }
    /**
     * @description The encoded data
     */


    get data() {
      return this.getT('args').toU8a();
    }
    /**
     * @description The [[FunctionMetadata]]
     */


    get meta() {
      return this._meta;
    }
    /**
     * @description Returns the name of the method
     */


    get method() {
      return this.registry.findMetaCall(this.callIndex).method;
    }
    /**
     * @description Returns the module containing the method
     */


    get section() {
      return this.registry.findMetaCall(this.callIndex).section;
    }
    /**
     * @description Checks if the source matches this in type
     */


    is(other) {
      return other.callIndex[0] === this.callIndex[0] && other.callIndex[1] === this.callIndex[1];
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExpanded) {
      var _call, _call2;

      let call;

      try {
        call = this.registry.findMetaCall(this.callIndex);
      } catch (error) {// swallow
      }

      return objectSpread({
        args: this.argsEntries.reduce((args, [n, a]) => objectSpread(args, {
          [n]: a.toHuman(isExpanded)
        }), {}),
        method: (_call = call) === null || _call === void 0 ? void 0 : _call.method,
        section: (_call2 = call) === null || _call2 === void 0 ? void 0 : _call2.section
      }, isExpanded && call ? {
        docs: call.meta.docs.map(d => d.toString())
      } : null);
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Call';
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  function createValue(registry, type, value, asArray = true) {
    // We detect codec here as well - when found, generally this is constructed from itself
    if (value && isFunction$2(value.unwrapOrDefault)) {
      return value;
    }

    return registry.createTypeUnsafe(type, [asArray ? isNull$1(value) || isUndefined$1(value) ? null : Array.isArray(value) ? value : [value] : value]);
  }

  function decodeValue(registry, key, value) {
    return key === 'ss58Format' ? createValue(registry, 'Option<u32>', value, false) : key === 'tokenDecimals' ? createValue(registry, 'Option<Vec<u32>>', value) : key === 'tokenSymbol' ? createValue(registry, 'Option<Vec<Text>>', value) : value;
  }

  function decode(registry, value) {
    return ( // allow decoding from a map as well (ourselves)
    value && isFunction$2(value.entries) ? [...value.entries()] : Object.entries(value || {})).reduce((all, [key, value]) => {
      all[key] = decodeValue(registry, key, value);
      return all;
    }, {
      ss58Format: registry.createTypeUnsafe('Option<u32>', []),
      tokenDecimals: registry.createTypeUnsafe('Option<Vec<u32>>', []),
      tokenSymbol: registry.createTypeUnsafe('Option<Vec<Text>>', [])
    });
  }

  class GenericChainProperties extends Json {
    constructor(registry, value) {
      super(registry, decode(registry, value));
    }
    /**
     * @description The chain ss58Format
     */


    get ss58Format() {
      return this.getT('ss58Format');
    }
    /**
     * @description The decimals for each of the tokens
     */


    get tokenDecimals() {
      return this.getT('tokenDecimals');
    }
    /**
     * @description The symbols for the tokens
     */


    get tokenSymbol() {
      return this.getT('tokenSymbol');
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const CID_AURA = stringToU8a('aura');
  const CID_BABE = stringToU8a('BABE');
  const CID_GRPA = stringToU8a('FRNK');
  const CID_POW = stringToU8a('pow_');

  function getAuraAuthor(registry, bytes, sessionValidators) {
    return sessionValidators[registry.createTypeUnsafe('RawAuraPreDigest', [bytes.toU8a(true)]).slotNumber.mod(new BN(sessionValidators.length)).toNumber()];
  }

  function getBabeAuthor(registry, bytes, sessionValidators) {
    const digest = registry.createTypeUnsafe('RawBabePreDigestCompat', [bytes.toU8a(true)]);
    return sessionValidators[digest.value.toNumber()];
  }

  function getBytesAsAuthor(registry, bytes) {
    return registry.createTypeUnsafe('AccountId', [bytes]);
  }
  /**
   * @name GenericConsensusEngineId
   * @description
   * A 4-byte identifier identifying the engine
   */


  class GenericConsensusEngineId extends U8aFixed {
    constructor(registry, value) {
      super(registry, isNumber$1(value) ? bnToU8a(value, {
        isLe: false
      }) : value, 32);
    }
    /**
     * @description `true` if the engine matches aura
     */


    get isAura() {
      return this.eq(CID_AURA);
    }
    /**
     * @description `true` is the engine matches babe
     */


    get isBabe() {
      return this.eq(CID_BABE);
    }
    /**
     * @description `true` is the engine matches grandpa
     */


    get isGrandpa() {
      return this.eq(CID_GRPA);
    }
    /**
     * @description `true` is the engine matches pow
     */


    get isPow() {
      return this.eq(CID_POW);
    }
    /**
     * @description From the input bytes, decode into an author
     */


    extractAuthor(bytes, sessionValidators) {
      if (sessionValidators !== null && sessionValidators !== void 0 && sessionValidators.length) {
        if (this.isAura) {
          return getAuraAuthor(this.registry, bytes, sessionValidators);
        } else if (this.isBabe) {
          return getBabeAuthor(this.registry, bytes, sessionValidators);
        }
      } // For pow & Moonbeam, the bytes are the actual author


      if (this.isPow || bytes.length === 20) {
        return getBytesAsAuthor(this.registry, bytes);
      }

      return undefined;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman() {
      return this.toString();
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'ConsensusEngineId';
    }
    /**
     * @description Override the default toString to return a 4-byte string
     */


    toString() {
      return this.isAscii ? u8aToString(this) : u8aToHex(this);
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  const ACCOUNT_ID_PREFIX = new Uint8Array([0xff]);
  /** @internal */

  function decodeString(registry, value) {
    const decoded = decodeAddress(value);
    return decoded.length === 32 ? registry.createTypeUnsafe('AccountId', [decoded]) : registry.createTypeUnsafe('AccountIndex', [u8aToBn(decoded, true)]);
  }
  /** @internal */


  function decodeU8a$2(registry, value) {
    // This allows us to instantiate an address with a raw publicKey. Do this first before
    // we checking the first byte, otherwise we may split an already-existent valid address
    if (value.length === 32) {
      return registry.createTypeUnsafe('AccountId', [value]);
    } else if (value[0] === 0xff) {
      return registry.createTypeUnsafe('AccountId', [value.subarray(1)]);
    }

    const [offset, length] = GenericAccountIndex.readLength(value);
    return registry.createTypeUnsafe('AccountIndex', [u8aToBn(value.subarray(offset, offset + length))]);
  }
  /** @internal */


  function decodeAddressOrIndex(registry, value) {
    return value instanceof GenericLookupSource ? value.inner : value instanceof GenericAccountId || value instanceof GenericAccountIndex ? value : isBn(value) || isNumber$1(value) || isBigInt(value) ? registry.createTypeUnsafe('AccountIndex', [value]) : Array.isArray(value) || isHex(value) || isU8a(value) ? decodeU8a$2(registry, u8aToU8a(value)) : decodeString(registry, value);
  }
  /**
   * @name LookupSource
   * @description
   * A wrapper around an AccountId and/or AccountIndex that is encoded with a prefix.
   * Since we are dealing with underlying publicKeys (or shorter encoded addresses),
   * we extend from Base with an AccountId/AccountIndex wrapper. Basically the Address
   * is encoded as `[ <prefix-byte>, ...publicKey/...bytes ]` as per spec
   */


  class GenericLookupSource extends AbstractBase {
    constructor(registry, value = new Uint8Array()) {
      super(registry, decodeAddressOrIndex(registry, value));
    }
    /**
     * @description The length of the value when encoded as a Uint8Array
     */


    get encodedLength() {
      const rawLength = this._rawLength;
      return rawLength + ( // for 1 byte AccountIndexes, we are not adding a specific prefix
      rawLength > 1 ? 1 : 0);
    }
    /**
     * @description The length of the raw value, either AccountIndex or AccountId
     */


    get _rawLength() {
      return this.inner instanceof GenericAccountIndex ? GenericAccountIndex.calcLength(this.inner) : this.inner.encodedLength;
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      const value = this.inner.toU8a().subarray(0, this._rawLength);
      return {
        outer: [new Uint8Array(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(value) : ACCOUNT_ID_PREFIX), value]
      };
    }
    /**
     * @description Returns a hex string representation of the value
     */


    toHex() {
      return u8aToHex(this.toU8a());
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Address';
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     * @param isBare true when the value has none of the type-specific prefixes (internal)
     */


    toU8a(isBare) {
      const encoded = this.inner.toU8a().subarray(0, this._rawLength);
      return isBare ? encoded : u8aConcat(this.inner instanceof GenericAccountIndex ? GenericAccountIndex.writeLength(encoded) : ACCOUNT_ID_PREFIX, encoded);
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  function decodeU8a$1(registry, u8a) {
    if ([0, 32].includes(u8a.length)) {
      return {
        Id: u8a
      };
    } else if (u8a.length === 20) {
      return {
        Address20: u8a
      };
    } else if (u8a.length <= 8) {
      return {
        Index: registry.createTypeUnsafe('AccountIndex', [u8a]).toNumber()
      };
    }

    return u8a;
  }

  function decodeMultiAny(registry, value) {
    if (value instanceof GenericAccountId) {
      return {
        Id: value
      };
    } else if (isU8a(value)) {
      // NOTE This is after the AccountId check (which is U8a)
      return decodeU8a$1(registry, value);
    } else if (value instanceof GenericMultiAddress) {
      return value;
    } else if (value instanceof GenericAccountIndex || isBn(value) || isNumber$1(value)) {
      return {
        Index: isNumber$1(value) ? value : value.toNumber()
      };
    } else if (isString$1(value)) {
      return decodeU8a$1(registry, decodeAddress(value.toString()));
    }

    return value;
  }

  class GenericMultiAddress extends Enum {
    constructor(registry, value) {
      super(registry, {
        Id: 'AccountId',
        Index: 'Compact<AccountIndex>',
        Raw: 'Bytes',
        // eslint-disable-next-line sort-keys
        Address32: 'H256',
        // eslint-disable-next-line sort-keys
        Address20: 'H160'
      }, decodeMultiAny(registry, value));
    }
    /**
     * @description Returns a breakdown of the hex encoding for this Codec
     */


    inspect() {
      const {
        inner,
        outer = []
      } = this.inner.inspect();
      return {
        inner,
        outer: [new Uint8Array([this.index]), ...outer]
      };
    }
    /**
     * @description Returns the string representation of the value
     */


    toString() {
      return this.value.toString();
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // For votes, the topmost bit indicated aye/nay, the lower bits indicate the conviction
  const AYE_BITS = 0b10000000;
  const NAY_BITS = 0b00000000;
  const CON_MASK = 0b01111111;
  const DEF_CONV = 0b00000000; // the default conviction, None

  /** @internal */

  function decodeVoteBool(value) {
    return value ? new Uint8Array([AYE_BITS | DEF_CONV]) : new Uint8Array([NAY_BITS]);
  }
  /** @internal */


  function decodeVoteU8a(value) {
    return value.length ? value.subarray(0, 1) : new Uint8Array([NAY_BITS]);
  }
  /** @internal */


  function decodeVoteType(registry, value) {
    return new Uint8Array([(new bool(registry, value.aye).isTrue ? AYE_BITS : NAY_BITS) | registry.createTypeUnsafe('Conviction', [value.conviction || DEF_CONV]).index]);
  }
  /** @internal */


  function decodeVote(registry, value) {
    if (isU8a(value)) {
      return decodeVoteU8a(value);
    } else if (isUndefined$1(value) || value instanceof Boolean || isBoolean$1(value)) {
      return decodeVoteBool(new bool(registry, value).isTrue);
    } else if (isNumber$1(value)) {
      return decodeVoteBool(value < 0);
    }

    return decodeVoteType(registry, value);
  }
  /**
   * @name GenericVote
   * @description
   * A number of lock periods, plus a vote, one way or the other.
   */


  class GenericVote extends U8aFixed {
    #aye;
    #conviction;

    constructor(registry, value) {
      // decoded is just 1 byte
      // Aye: Most Significant Bit
      // Conviction: 0000 - 0101
      const decoded = decodeVote(registry, value);
      super(registry, decoded, 8);
      this.#aye = (decoded[0] & AYE_BITS) === AYE_BITS;
      this.#conviction = this.registry.createTypeUnsafe('Conviction', [decoded[0] & CON_MASK]);
    }
    /**
     * @description returns a V2 conviction
     */


    get conviction() {
      return this.#conviction;
    }
    /**
     * @description true if the wrapped value is a positive vote
     */


    get isAye() {
      return this.#aye;
    }
    /**
     * @description true if the wrapped value is a negative vote
     */


    get isNay() {
      return !this.isAye;
    }
    /**
     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information
     */


    toHuman(isExpanded) {
      return {
        conviction: this.conviction.toHuman(isExpanded),
        vote: this.isAye ? 'Aye' : 'Nay'
      };
    }
    /**
     * @description Returns the base runtime type name for this instance
     */


    toRawType() {
      return 'Vote';
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /** @internal */

  function decodeDataU8a(registry, value) {
    const indicator = value[0];

    if (!indicator) {
      return [undefined, undefined];
    } else if (indicator >= 1 && indicator <= 33) {
      const length = indicator - 1;
      const data = value.subarray(1, length + 1); // in this case, we are passing a Raw back (since we have no length)

      return [registry.createTypeUnsafe('Raw', [data]), 1];
    } else if (indicator >= 34 && indicator <= 37) {
      return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2
    }

    throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);
  }
  /** @internal */


  function decodeData(registry, value) {
    if (isU8a(value) || isString$1(value)) {
      return decodeDataU8a(registry, u8aToU8a(value));
    } else if (!value) {
      return [undefined, undefined];
    } // assume we have an Enum or an  object input, handle this via the normal Enum decoding


    return [value, undefined];
  }
  /**
   * @name Data
   * @description
   * A [[Data]] container with node, raw or hashed data
   */


  class Data extends Enum {
    constructor(registry, value) {
      super(registry, {
        None: 'Null',
        // 0
        Raw: 'Bytes',
        // 1
        // eslint-disable-next-line sort-keys
        BlakeTwo256: 'H256',
        // 2
        Sha256: 'H256',
        // 3
        // eslint-disable-next-line sort-keys
        Keccak256: 'H256',
        // 4
        ShaThree256: 'H256' // 5

      }, ...decodeData(registry, value));

      if (this.isRaw && this.asRaw.length > 32) {
        throw new Error('Data.Raw values are limited to a maximum length of 32 bytes');
      }
    }

    get asBlakeTwo256() {
      return this.value;
    }

    get asKeccak256() {
      return this.value;
    }

    get asRaw() {
      return this.value;
    }

    get asSha256() {
      return this.value;
    }

    get asShaThree256() {
      return this.value;
    }

    get isBlakeTwo256() {
      return this.index === 2;
    }

    get isKeccak256() {
      return this.index === 4;
    }

    get isNone() {
      return this.index === 0;
    }

    get isRaw() {
      return this.index === 1;
    }

    get isSha256() {
      return this.index === 3;
    }

    get isShaThree256() {
      return this.index === 5;
    }
    /**
     * @description The encoded length
     */


    get encodedLength() {
      return this.toU8a().length;
    }
    /**
     * @description Encodes the value as a Uint8Array as per the SCALE specifications
     */


    toU8a() {
      if (this.index === 0) {
        return new Uint8Array(1);
      } else if (this.index === 1) {
        // don't add the length, just the data
        const data = this.value.toU8a(true);
        const length = Math.min(data.length, 32);
        const u8a = new Uint8Array(length + 1);
        u8a.set([length + 1], 0);
        u8a.set(data.subarray(0, length), 1);
        return u8a;
      } // otherwise we simply have a hash


      const u8a = new Uint8Array(33);
      u8a.set([this.index + 32], 0);
      u8a.set(this.value.toU8a(), 1);
      return u8a;
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /** @internal */
  function flattenUniq(list, result = []) {
    for (let i = 0; i < list.length; i++) {
      const entry = list[i];

      if (Array.isArray(entry)) {
        flattenUniq(entry, result);
      } else {
        result.push(entry);
      }
    }

    return [...new Set(result)];
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function getSiName(lookup, type) {
    const typeDef = lookup.getTypeDef(type);
    return typeDef.lookupName || typeDef.type;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  function extractSubSingle(_, {
    sub
  }) {
    const {
      lookupName,
      type
    } = sub;
    return extractTypes$1([lookupName || type]);
  }

  function extractSubArray(_, {
    sub
  }) {
    return extractTypes$1(sub.map(({
      lookupName,
      type
    }) => lookupName || type));
  }

  function unhandled(type, {
    info
  }) {
    throw new Error(`Unhandled: Unable to create and validate type from ${type} (info=${TypeDefInfo[info]})`);
  } // we only handle the types with params here


  const mapping = {
    [TypeDefInfo.BTreeMap]: extractSubArray,
    [TypeDefInfo.BTreeSet]: extractSubSingle,
    [TypeDefInfo.Compact]: extractSubSingle,
    [TypeDefInfo.DoNotConstruct]: unhandled,
    [TypeDefInfo.Enum]: extractSubArray,
    [TypeDefInfo.HashMap]: extractSubArray,
    [TypeDefInfo.Int]: unhandled,
    [TypeDefInfo.Linkage]: extractSubSingle,
    [TypeDefInfo.Null]: unhandled,
    [TypeDefInfo.Option]: extractSubSingle,
    [TypeDefInfo.Plain]: (_, typeDef) => typeDef.lookupName || typeDef.type,
    [TypeDefInfo.Range]: extractSubSingle,
    [TypeDefInfo.RangeInclusive]: extractSubSingle,
    [TypeDefInfo.Result]: extractSubArray,
    [TypeDefInfo.Set]: extractSubArray,
    [TypeDefInfo.Si]: unhandled,
    [TypeDefInfo.Struct]: extractSubArray,
    [TypeDefInfo.Tuple]: extractSubArray,
    [TypeDefInfo.UInt]: unhandled,
    [TypeDefInfo.Vec]: extractSubSingle,
    [TypeDefInfo.VecFixed]: extractSubSingle,
    [TypeDefInfo.WrapperKeepOpaque]: extractSubSingle,
    [TypeDefInfo.WrapperOpaque]: extractSubSingle
  };
  /** @internal */

  function extractTypes$1(types) {
    const count = types.length;
    const result = new Array(count);

    for (let i = 0; i < count; i++) {
      const type = types[i];
      const typeDef = getTypeDef(type);
      result[i] = mapping[typeDef.info](type, typeDef);
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const l$8 = logger('metadata');
  /** @internal */

  function validateTypes(registry, throwError, types) {
    const missing = flattenUniq(extractTypes$1(types)).filter(type => !registry.hasType(type) && !registry.isLookupType(type)).sort();

    if (missing.length !== 0) {
      const message = `Unknown types found, no types for ${missing.join(', ')}`;

      if (throwError) {
        throw new Error(message);
      } else {
        l$8.warn(message);
      }
    }

    return types;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /** @internal */

  function extractTypes(lookup, types) {
    return types.map(({
      type
    }) => lookup.getTypeDef(type).type);
  }
  /** @internal */


  function extractFieldTypes(lookup, type) {
    return lookup.getSiType(type).def.asVariant.variants.map(({
      fields
    }) => extractTypes(lookup, fields));
  }
  /** @internal */


  function getPalletNames({
    lookup,
    pallets
  }) {
    return pallets.reduce((all, {
      calls,
      constants,
      events,
      storage
    }) => {
      all.push([extractTypes(lookup, constants)]);

      if (calls.isSome) {
        all.push(extractFieldTypes(lookup, calls.unwrap().type));
      }

      if (events.isSome) {
        all.push(extractFieldTypes(lookup, events.unwrap().type));
      }

      if (storage.isSome) {
        all.push(storage.unwrap().items.map(({
          type
        }) => {
          if (type.isPlain) {
            return [lookup.getTypeDef(type.asPlain).type];
          }

          const {
            hashers,
            key,
            value
          } = type.asMap;
          return hashers.length === 1 ? [lookup.getTypeDef(value).type, lookup.getTypeDef(key).type] : [lookup.getTypeDef(value).type, ...lookup.getSiType(key).def.asTuple.map(t => lookup.getTypeDef(t).type)];
        }));
      }

      return all;
    }, []);
  }
  /** @internal */


  function getUniqTypes(registry, meta, throwError) {
    return validateTypes(registry, throwError, flattenUniq(getPalletNames(meta)));
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function trimDocs(docs) {
    const strings = docs.map(d => d.toString().trim());
    const firstEmpty = strings.findIndex(d => !d.length);
    return firstEmpty === -1 ? strings : strings.slice(0, firstEmpty);
  }
  /** @internal */


  function toCallsOnly(registry, {
    extrinsic,
    lookup,
    pallets
  }) {
    return registry.createTypeUnsafe('MetadataLatest', [{
      extrinsic,
      lookup: {
        types: lookup.types.map(({
          id,
          type
        }) => registry.createTypeUnsafe('PortableType', [{
          id,
          type: { ...type,
            docs: trimDocs(type.docs)
          }
        }]))
      },
      pallets: pallets.map(({
        calls,
        index,
        name
      }) => ({
        calls: registry.createTypeUnsafe('Option<PalletCallMetadataLatest>', [calls.unwrapOr(null)]),
        index,
        name
      }))
    }]).toJSON();
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // hasher type -> [initialHashLength, canDecodeKey]
  const HASHER_MAP = {
    // opaque
    Blake2_128: [16, false],
    // eslint-disable-line camelcase
    Blake2_128Concat: [16, true],
    // eslint-disable-line camelcase
    Blake2_256: [32, false],
    // eslint-disable-line camelcase
    Identity: [0, true],
    Twox128: [16, false],
    Twox256: [32, false],
    Twox64Concat: [8, true]
  };
  function unwrapStorageSi(type) {
    return type.isPlain ? type.asPlain : type.asMap.value;
  }
  /** @internal */

  function unwrapStorageType(registry, type, isOptional) {
    const outputType = getSiName(registry.lookup, unwrapStorageSi(type));
    return isOptional ? `Option<${outputType}>` : outputType;
  }
  /** @internal */

  function decodeStorageKey(value) {
    if (isU8a(value) || !value || isString$1(value)) {
      // let Bytes handle these inputs
      return {
        key: value
      };
    } else if (value instanceof StorageKey) {
      return {
        key: value,
        method: value.method,
        section: value.section
      };
    } else if (isFunction$2(value)) {
      return {
        key: value(),
        method: value.method,
        section: value.section
      };
    } else if (Array.isArray(value)) {
      const [fn, args = []] = value;

      if (!isFunction$2(fn)) {
        throw new Error('Expected function input for key construction');
      }

      if (fn.meta && fn.meta.type.isMap) {
        const map = fn.meta.type.asMap;

        if (!Array.isArray(args) || args.length !== map.hashers.length) {
          throw new Error(`Expected an array of ${map.hashers.length} values as params to a Map query`);
        }
      }

      return {
        key: fn(...args),
        method: fn.method,
        section: fn.section
      };
    }

    throw new Error(`Unable to convert input ${value} to StorageKey`);
  }
  /** @internal */


  function decodeHashers(registry, value, hashers) {
    // the storage entry is xxhashAsU8a(prefix, 128) + xxhashAsU8a(method, 128), 256 bits total
    let offset = 32;
    const result = new Array(hashers.length);

    for (let i = 0; i < hashers.length; i++) {
      const [hasher, type] = hashers[i];
      const [hashLen, canDecode] = HASHER_MAP[hasher.type];
      const decoded = canDecode ? registry.createTypeUnsafe(getSiName(registry.lookup, type), [value.subarray(offset + hashLen)]) : registry.createTypeUnsafe('Raw', [value.subarray(offset, offset + hashLen)]);
      offset += hashLen + (canDecode ? decoded.encodedLength : 0);
      result[i] = decoded;
    }

    return result;
  }
  /** @internal */


  function decodeArgsFromMeta(registry, value, meta) {
    if (!meta || !meta.type.isMap) {
      return [];
    }

    const {
      hashers,
      key
    } = meta.type.asMap;
    const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
    return decodeHashers(registry, value, hashers.map((h, i) => [h, keys[i]]));
  }
  /** @internal */


  function getMeta(value) {
    if (value instanceof StorageKey) {
      return value.meta;
    } else if (isFunction$2(value)) {
      return value.meta;
    } else if (Array.isArray(value)) {
      const [fn] = value;
      return fn.meta;
    }

    return undefined;
  }
  /** @internal */


  function getType(registry, value) {
    if (value instanceof StorageKey) {
      return value.outputType;
    } else if (isFunction$2(value)) {
      return unwrapStorageType(registry, value.meta.type);
    } else if (Array.isArray(value)) {
      const [fn] = value;

      if (fn.meta) {
        return unwrapStorageType(registry, fn.meta.type);
      }
    } // If we have no type set, default to Raw


    return 'Raw';
  }
  /**
   * @name StorageKey
   * @description
   * A representation of a storage key (typically hashed) in the system. It can be
   * constructed by passing in a raw key or a StorageEntry with (optional) arguments.
   */


  class StorageKey extends Bytes {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore This is assigned via this.decodeArgsFromMeta()
    #args;
    #meta;
    #outputType;
    #method;
    #section;

    constructor(registry, value, override = {}) {
      const {
        key,
        method,
        section
      } = decodeStorageKey(value);
      super(registry, key);
      this.#outputType = getType(registry, value); // decode the args (as applicable based on the key and the hashers, after all init)

      this.setMeta(getMeta(value), override.section || section, override.method || method);
    }
    /**
     * @description Return the decoded arguments (applicable to map with decodable values)
     */


    get args() {
      return this.#args;
    }
    /**
     * @description The metadata or `undefined` when not available
     */


    get meta() {
      return this.#meta;
    }
    /**
     * @description The key method or `undefined` when not specified
     */


    get method() {
      return this.#method;
    }
    /**
     * @description The output type
     */


    get outputType() {
      return this.#outputType;
    }
    /**
     * @description The key section or `undefined` when not specified
     */


    get section() {
      return this.#section;
    }

    is(key) {
      return key.section === this.section && key.method === this.method;
    }
    /**
     * @description Sets the meta for this key
     */


    setMeta(meta, section, method) {
      this.#meta = meta;
      this.#method = method || this.#method;
      this.#section = section || this.#section;

      if (meta) {
        this.#outputType = unwrapStorageType(this.registry, meta.type);
      }

      try {
        this.#args = decodeArgsFromMeta(this.registry, this.toU8a(true), meta);
      } catch (error) {// ignore...
      }

      return this;
    }
    /**
     * @description Returns the Human representation for this type
     */


    toHuman() {
      return this.#args.length ? this.#args.map(a => a.toHuman()) : super.toHuman();
    }
    /**
     * @description Returns the raw type for this
     */


    toRawType() {
      return 'StorageKey';
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  var baseTypes = /*#__PURE__*/Object.freeze({
    __proto__: null,
    GenericExtrinsic: GenericExtrinsic,
    GenericExtrinsicEra: GenericExtrinsicEra,
    GenericMortalEra: MortalEra,
    GenericImmortalEra: ImmortalEra,
    GenericExtrinsicPayload: GenericExtrinsicPayload,
    GenericExtrinsicPayloadUnknown: GenericExtrinsicPayloadUnknown,
    GenericExtrinsicUnknown: GenericExtrinsicUnknown,
    GenericSignerPayload: GenericSignerPayload,
    GenericExtrinsicV4: GenericExtrinsicV4,
    GenericExtrinsicPayloadV4: GenericExtrinsicPayloadV4,
    GenericExtrinsicSignatureV4: GenericExtrinsicSignatureV4,
    GenericAccountId: GenericAccountId,
    GenericAccountIndex: GenericAccountIndex,
    GenericBlock: GenericBlock,
    GenericCall: GenericCall,
    GenericChainProperties: GenericChainProperties,
    GenericConsensusEngineId: GenericConsensusEngineId,
    GenericEvent: GenericEvent,
    GenericEventData: GenericEventData,
    GenericLookupSource: GenericLookupSource,
    GenericMultiAddress: GenericMultiAddress,
    GenericAddress: GenericMultiAddress,
    GenericVote: GenericVote,
    GenericEthereumAccountId: GenericEthereumAccountId,
    GenericEthereumLookupSource: GenericEthereumLookupSource,
    BitVec: BitVec,
    bool: bool,
    Bool: bool,
    Bytes: Bytes,
    f32: f32,
    F32: f32,
    f64: f64,
    F64: f64,
    i8: i8,
    I8: i8,
    i16: i16,
    I16: i16,
    i32: i32,
    I32: i32,
    i64: i64,
    I64: i64,
    i128: i128,
    I128: i128,
    i256: i256,
    I256: i256,
    Null: Null,
    OptionBool: OptionBool,
    Text: Text,
    Type: Type,
    u8: u8,
    U8: u8,
    u16: u16,
    U16: u16,
    u32: u32,
    U32: u32,
    u64: u64,
    U64: u64,
    u128: u128,
    U128: u128,
    u256: u256,
    U256: u256,
    usize: usize,
    USize: usize,
    Data: Data,
    StorageKey: StorageKey
  });

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // migrate a storage hasher type
  // see https://github.com/paritytech/substrate/pull/4462

  /** @internal */
  function createStorageHasher(registry, hasher) {
    // Blake2_128_Concat has been added at index 2, so we increment all the
    // indexes greater than 2
    if (hasher.toNumber() >= 2) {
      return registry.createTypeUnsafe('StorageHasherV10', [hasher.toNumber() + 1]);
    }

    return registry.createTypeUnsafe('StorageHasherV10', [hasher]);
  }
  /** @internal */


  function createStorageType(registry, entryType) {
    if (entryType.isMap) {
      return [{ ...entryType.asMap,
        hasher: createStorageHasher(registry, entryType.asMap.hasher)
      }, 1];
    }

    if (entryType.isDoubleMap) {
      return [{ ...entryType.asDoubleMap,
        hasher: createStorageHasher(registry, entryType.asDoubleMap.hasher),
        key2Hasher: createStorageHasher(registry, entryType.asDoubleMap.key2Hasher)
      }, 2];
    }

    return [entryType.asPlain, 0];
  }
  /** @internal */


  function convertModule(registry, mod) {
    const storage = mod.storage.unwrapOr(null);
    return registry.createTypeUnsafe('ModuleMetadataV10', [{ ...mod,
      storage: storage ? { ...storage,
        items: storage.items.map(item => ({ ...item,
          type: registry.createTypeUnsafe('StorageEntryTypeV10', createStorageType(registry, item.type))
        }))
      } : null
    }]);
  }
  /** @internal */


  function toV10(registry, {
    modules
  }) {
    return registry.createTypeUnsafe('MetadataV10', [{
      modules: modules.map(mod => convertModule(registry, mod))
    }]);
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /** @internal */
  function toV11(registry, {
    modules
  }) {
    return registry.createTypeUnsafe('MetadataV11', [{
      // This is new in V11, pass V0 here - something non-existing, telling the API to use
      // the fallback for this information (on-chain detection)
      extrinsic: {
        signedExtensions: [],
        version: 0
      },
      modules
    }]);
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @internal
   **/
  function toV12(registry, {
    extrinsic,
    modules
  }) {
    return registry.createTypeUnsafe('MetadataV12', [{
      extrinsic,
      modules: modules.map(mod => registry.createTypeUnsafe('ModuleMetadataV12', [{ ...mod,
        index: 255
      }]))
    }]);
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * @internal
   **/
  function toV13(registry, metadata) {
    return registry.createTypeUnsafe('MetadataV13', [metadata]);
  }

  // Copyright 2017-2022 @polkadot/types-known authors & contributors

  const typesAlias = {
    assets: {
      Approval: 'AssetApproval',
      ApprovalKey: 'AssetApprovalKey',
      Balance: 'TAssetBalance',
      DestroyWitness: 'AssetDestroyWitness'
    },
    babe: {
      EquivocationProof: 'BabeEquivocationProof'
    },
    balances: {
      Status: 'BalanceStatus'
    },
    beefy: {
      AuthorityId: 'BeefyId'
    },
    contracts: {
      StorageKey: 'ContractStorageKey'
    },
    electionProviderMultiPhase: {
      Phase: 'ElectionPhase'
    },
    ethereum: {
      Block: 'EthBlock',
      Header: 'EthHeader',
      Receipt: 'EthReceipt',
      Transaction: 'EthTransaction',
      TransactionStatus: 'EthTransactionStatus'
    },
    evm: {
      Account: 'EvmAccount',
      Log: 'EvmLog',
      Vicinity: 'EvmVicinity'
    },
    grandpa: {
      Equivocation: 'GrandpaEquivocation',
      EquivocationProof: 'GrandpaEquivocationProof'
    },
    identity: {
      Judgement: 'IdentityJudgement'
    },
    inclusion: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    paraDisputes: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    paraInclusion: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    paraScheduler: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    paraShared: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    parachains: {
      Id: 'ParaId'
    },
    parasDisputes: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    parasInclusion: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    parasScheduler: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    parasShared: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    proposeParachain: {
      Proposal: 'ParachainProposal'
    },
    proxy: {
      Announcement: 'ProxyAnnouncement'
    },
    scheduler: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    shared: {
      ValidatorIndex: 'ParaValidatorIndex'
    },
    society: {
      Judgement: 'SocietyJudgement',
      Vote: 'SocietyVote'
    },
    staking: {
      Compact: 'CompactAssignments'
    },
    treasury: {
      Proposal: 'TreasuryProposal'
    },
    xcm: {
      AssetId: 'XcmAssetId'
    },
    xcmPallet: {
      AssetId: 'XcmAssetId'
    }
  };
  /**
   * @description Get types for specific modules (metadata override)
   */

  function getAliasTypes({
    knownTypes
  }, section) {
    var _knownTypes$typesAlia;

    return objectSpread({}, typesAlias[section], (_knownTypes$typesAlia = knownTypes.typesAlias) === null || _knownTypes$typesAlia === void 0 ? void 0 : _knownTypes$typesAlia[section]);
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const BOXES = [['<', '>'], ['<', ','], [',', '>'], ['(', ')'], ['(', ','], [',', ','], [',', ')']];
  /**
   * Creates a compatible type mapping
   * @internal
   **/

  function compatType(specs, _type) {
    const type = _type.toString();

    const index = specs.findIndex(({
      def
    }) => def.HistoricMetaCompat === type);

    if (index !== -1) {
      return index;
    }

    return specs.push({
      def: {
        HistoricMetaCompat: type
      }
    }) - 1;
  }

  function compatTypes(specs, ...types) {
    for (let i = 0; i < types.length; i++) {
      compatType(specs, types[i]);
    }
  }

  function makeTupleType(specs, entries) {
    return specs.push({
      def: {
        Tuple: entries
      }
    }) - 1;
  }

  function makeVariantType(modName, variantType, specs, variants) {
    return specs.push({
      def: {
        Variant: {
          variants
        }
      },
      path: [`pallet_${modName.toString()}`, 'pallet', variantType]
    }) - 1;
  }
  /**
   * @internal
   * generate & register the OriginCaller type
   **/


  function registerOriginCaller(registry, modules, metaVersion) {
    registry.register({
      OriginCaller: {
        _enum: modules.map((mod, index) => [mod.name.toString(), metaVersion >= 12 ? mod.index.toNumber() : index]).sort((a, b) => a[1] - b[1]).reduce((result, [name, index]) => {
          for (let i = Object.keys(result).length; i < index; i++) {
            result[`Empty${i}`] = 'Null';
          }

          result[name] = knownOrigins[name] || 'Null';
          return result;
        }, {})
      }
    });
  }
  /**
   * Find and apply the correct type override
   * @internal
   **/


  function setTypeOverride(sectionTypes, types) {
    types.forEach(type => {
      const override = Object.keys(sectionTypes).find(aliased => type.eq(aliased));

      if (override) {
        type.setOverride(sectionTypes[override]);
      } else {
        // FIXME: NOT happy with this approach, but gets over the initial hump cased by (Vec<Announcement>,BalanceOf)
        const orig = type.toString();
        const alias = Object.entries(sectionTypes).reduce((result, [src, dst]) => BOXES.reduce((result, [a, z]) => result.replace(`${a}${src}${z}`, `${a}${dst}${z}`), result), orig);

        if (orig !== alias) {
          type.setOverride(alias);
        }
      }
    });
  }
  /**
   * Apply module-specific type overrides (always be done as part of toV14)
   * @internal
   **/


  function convertCalls(specs, registry, modName, calls, sectionTypes) {
    const variants = calls.map(({
      args,
      docs,
      name
    }, index) => {
      setTypeOverride(sectionTypes, args.map(({
        type
      }) => type));
      return registry.createTypeUnsafe('SiVariant', [{
        docs,
        fields: args.map(({
          name,
          type
        }) => registry.createTypeUnsafe('SiField', [{
          name,
          type: compatType(specs, type)
        }])),
        index,
        name
      }]);
    });
    return registry.createTypeUnsafe('PalletCallMetadataV14', [{
      type: makeVariantType(modName, 'Call', specs, variants)
    }]);
  }
  /**
   * Apply module-specific type overrides (always be done as part of toV14)
   * @internal
   */


  function convertConstants(specs, registry, constants, sectionTypes) {
    return constants.map(({
      docs,
      name,
      type,
      value
    }) => {
      setTypeOverride(sectionTypes, [type]);
      return registry.createTypeUnsafe('PalletConstantMetadataV14', [{
        docs,
        name,
        type: compatType(specs, type),
        value
      }]);
    });
  }
  /**
   * Apply module-specific type overrides (always be done as part of toV14)
   * @internal
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function convertErrors(specs, registry, modName, errors, _sectionTypes) {
    const variants = errors.map(({
      docs,
      name
    }, index) => registry.createTypeUnsafe('SiVariant', [{
      docs,
      fields: [],
      index,
      name
    }]));
    return registry.createTypeUnsafe('PalletErrorMetadataV14', [{
      type: makeVariantType(modName, 'Error', specs, variants)
    }]);
  }
  /**
   * Apply module-specific type overrides (always be done as part of toV14)
   * @internal
   **/


  function convertEvents(specs, registry, modName, events, sectionTypes) {
    const variants = events.map(({
      args,
      docs,
      name
    }, index) => {
      setTypeOverride(sectionTypes, args);
      return registry.createTypeUnsafe('SiVariant', [{
        docs,
        fields: args.map(t => registry.createTypeUnsafe('SiField', [{
          type: compatType(specs, t)
        }])),
        index,
        name
      }]);
    });
    return registry.createTypeUnsafe('PalletEventMetadataV14', [{
      type: makeVariantType(modName, 'Event', specs, variants)
    }]);
  }

  function createMapEntry(specs, registry, sectionTypes, {
    hashers,
    isLinked,
    isOptional,
    keys,
    value
  }) {
    setTypeOverride(sectionTypes, [value, ...(Array.isArray(keys) ? keys : [keys])]);
    return registry.createTypeUnsafe('StorageEntryTypeV14', [{
      Map: {
        hashers,
        key: hashers.length === 1 ? compatType(specs, keys[0]) : makeTupleType(specs, keys.map(t => compatType(specs, t))),
        value: isLinked // For previous-generation linked-map support, the actual storage result
        // is a Tuple with the value and the Linkage (Option appears in teh value-part only)
        ? compatType(specs, `(${isOptional ? `Option<${value.toString()}>` : value.toString()}, Linkage<${keys[0].toString()}>)`) : compatType(specs, value)
      }
    }]);
  }
  /**
   * Apply module-specific storage type overrides (always part of toV14)
   * @internal
   **/


  function convertStorage(specs, registry, {
    items,
    prefix
  }, sectionTypes) {
    return registry.createTypeUnsafe('PalletStorageMetadataV14', [{
      items: items.map(({
        docs,
        fallback,
        modifier,
        name,
        type
      }) => {
        let entryType;

        if (type.isPlain) {
          const plain = type.asPlain;
          setTypeOverride(sectionTypes, [plain]);
          entryType = registry.createTypeUnsafe('StorageEntryTypeV14', [{
            Plain: compatType(specs, plain)
          }]);
        } else if (type.isMap) {
          const map = type.asMap;
          entryType = createMapEntry(specs, registry, sectionTypes, {
            hashers: [map.hasher],
            isLinked: map.linked.isTrue,
            isOptional: modifier.isOptional,
            keys: [map.key],
            value: map.value
          });
        } else if (type.isDoubleMap) {
          const dm = type.asDoubleMap;
          entryType = createMapEntry(specs, registry, sectionTypes, {
            hashers: [dm.hasher, dm.key2Hasher],
            isLinked: false,
            isOptional: modifier.isOptional,
            keys: [dm.key1, dm.key2],
            value: dm.value
          });
        } else {
          const nm = type.asNMap;
          entryType = createMapEntry(specs, registry, sectionTypes, {
            hashers: nm.hashers,
            isLinked: false,
            isOptional: modifier.isOptional,
            keys: nm.keyVec,
            value: nm.value
          });
        }

        return registry.createTypeUnsafe('StorageEntryMetadataV14', [{
          docs,
          fallback,
          modifier,
          name,
          type: entryType
        }]);
      }),
      prefix
    }]);
  }
  /** @internal */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars


  function convertExtrinsic(registry, {
    signedExtensions,
    version
  }) {
    return registry.createTypeUnsafe('ExtrinsicMetadataV14', [{
      signedExtensions: signedExtensions.map(identifier => ({
        identifier,
        type: 0 // we don't map the fields at all

      })),
      type: 0,
      // Map to extrinsic like in v14?
      version
    }]);
  }
  /** @internal */


  function createPallet(specs, registry, mod, {
    calls,
    constants,
    errors,
    events,
    storage
  }) {
    const sectionTypes = getAliasTypes(registry, stringCamelCase(mod.name));
    return registry.createTypeUnsafe('PalletMetadataV14', [{
      calls: calls && convertCalls(specs, registry, mod.name, calls, sectionTypes),
      constants: convertConstants(specs, registry, constants, sectionTypes),
      errors: errors && convertErrors(specs, registry, mod.name, errors, sectionTypes),
      events: events && convertEvents(specs, registry, mod.name, events, sectionTypes),
      index: mod.index,
      name: mod.name,
      storage: storage && convertStorage(specs, registry, storage, sectionTypes)
    }]);
  }
  /**
   * Convert the Metadata to v14
   * @internal
   **/


  function toV14(registry, v13, metaVersion) {
    const specs = []; // position 0 always has Null, additionally add internal defaults

    compatTypes(specs, 'Null', 'u8', 'u16', 'u32', 'u64');
    registerOriginCaller(registry, v13.modules, metaVersion);
    const extrinsic = convertExtrinsic(registry, v13.extrinsic);
    const pallets = v13.modules.map(mod => createPallet(specs, registry, mod, {
      calls: mod.calls.unwrapOr(null),
      constants: mod.constants,
      errors: mod.errors.length ? mod.errors : null,
      events: mod.events.unwrapOr(null),
      storage: mod.storage.unwrapOr(null)
    }));
    return registry.createTypeUnsafe('MetadataV14', [{
      extrinsic,
      lookup: {
        types: specs.map((type, id) => registry.createTypeUnsafe('PortableType', [{
          id,
          type
        }]))
      },
      pallets
    }]);
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /**
   * Convert the Metadata (which is an alias) to latest
   * @internal
   **/
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  function toLatest(registry, v14, _metaVersion) {
    return v14;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const MAGIC_NUMBER = 0x6174656d; // `meta`, reversed for Little Endian encoding

  class MagicNumber extends u32 {
    constructor(registry, value) {
      super(registry, value);

      if (!this.isEmpty && !this.eq(MAGIC_NUMBER)) {
        throw new Error(`MagicNumber mismatch: expected ${registry.createTypeUnsafe('u32', [MAGIC_NUMBER]).toHex()}, found ${this.toHex()}`);
      }
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const LATEST_VERSION = 14;
  /**
   * @name MetadataVersioned
   * @description
   * The versioned runtime metadata as a decoded structure
   */

  class MetadataVersioned extends Struct {
    #converted = new Map();

    constructor(registry, value) {
      // const timeStart = performance.now()
      super(registry, {
        magicNumber: MagicNumber,
        metadata: 'MetadataAll'
      }, value); // console.log('MetadataVersioned', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }

    #assertVersion = version => {
      if (this.version > version) {
        throw new Error(`Cannot convert metadata from version ${this.version} to ${version}`);
      }

      return this.version === version;
    };
    #getVersion = (version, fromPrev) => {
      const asCurr = `asV${version}`;
      const asPrev = version === 'latest' ? `asV${LATEST_VERSION}` : `asV${version - 1}`;

      if (version !== 'latest' && this.#assertVersion(version)) {
        return this.#metadata()[asCurr];
      }

      if (!this.#converted.has(version)) {
        this.#converted.set(version, fromPrev(this.registry, this[asPrev], this.version));
      }

      return this.#converted.get(version);
    };
    /**
     * @description the metadata wrapped
     */

    #metadata = () => {
      return this.getT('metadata');
    };
    /**
     * @description Returns the wrapped metadata as a limited calls-only (latest) version
     */

    get asCallsOnly() {
      return new MetadataVersioned(this.registry, {
        magicNumber: this.magicNumber,
        metadata: this.registry.createTypeUnsafe('MetadataAll', [toCallsOnly(this.registry, this.asLatest), LATEST_VERSION])
      });
    }
    /**
     * @description Returns the wrapped metadata as a V9 object
     */


    get asV9() {
      this.#assertVersion(9);
      return this.#metadata().asV9;
    }
    /**
     * @description Returns the wrapped values as a V10 object
     */


    get asV10() {
      return this.#getVersion(10, toV10);
    }
    /**
     * @description Returns the wrapped values as a V11 object
     */


    get asV11() {
      return this.#getVersion(11, toV11);
    }
    /**
     * @description Returns the wrapped values as a V12 object
     */


    get asV12() {
      return this.#getVersion(12, toV12);
    }
    /**
     * @description Returns the wrapped values as a V13 object
     */


    get asV13() {
      return this.#getVersion(13, toV13);
    }
    /**
     * @description Returns the wrapped values as a V14 object
     */


    get asV14() {
      return this.#getVersion(14, toV14);
    }
    /**
     * @description Returns the wrapped values as a latest version object
     */


    get asLatest() {
      return this.#getVersion('latest', toLatest);
    }
    /**
     * @description The magicNumber for the Metadata (known constant)
     */


    get magicNumber() {
      return this.getT('magicNumber');
    }
    /**
     * @description the metadata version this structure represents
     */


    get version() {
      return this.#metadata().index;
    }

    getUniqTypes(throwError) {
      return getUniqTypes(this.registry, this.asLatest, throwError);
    }
    /**
     * @description Converts the Object to JSON, typically used for RPC transfers
     */


    toJSON() {
      // HACK(y): ensure that we apply the aliases if we have not done so already, this is
      // needed to ensure we have the correct overrides (which is only applied in toLatest)
      // eslint-disable-next-line no-unused-expressions
      this.asLatest;
      return super.toJSON();
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  const VERSION_IDX = 4; // magic + lowest supported version

  const EMPTY_METADATA = new Uint8Array([0x6d, 0x65, 0x74, 0x61, 9]);
  /** @internal */

  function decodeU8a(registry, value) {
    const u8a = value.length === 0 ? EMPTY_METADATA : value; // This is an f-ing hack as a follow-up to another ugly hack
    // https://github.com/polkadot-js/api/commit/a9211690be6b68ad6c6dad7852f1665cadcfa5b2
    // when we fail on V9, try to re-parse it as v10...

    if (u8a[VERSION_IDX] === 9) {
      try {
        return new MetadataVersioned(registry, u8a);
      } catch (error) {
        u8a[VERSION_IDX] = 10;
        return u8a;
      }
    }

    return u8a;
  }
  /**
   * @name Metadata
   * @description
   * The versioned runtime metadata as a decoded structure
   */


  class Metadata extends MetadataVersioned {
    constructor(registry, value) {
      // const timeStart = performance.now()
      super(registry, isU8a(value) || isString$1(value) ? decodeU8a(registry, u8aToU8a(value)) : value); // console.log('Metadata', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }

  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  function convert(fn) {
    return ({
      name
    }) => fn(name);
  }

  const objectNameToCamel = convert(stringCamelCase);
  const objectNameToString = convert(n => n.toString());

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /** @internal */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars

  function decorateConstants(registry, {
    pallets
  }, _version) {
    const result = {};

    for (let i = 0; i < pallets.length; i++) {
      const {
        constants,
        name
      } = pallets[i];

      if (!constants.isEmpty) {
        lazyMethod(result, stringCamelCase(name), () => lazyMethods({}, constants, constant => {
          const codec = registry.createTypeUnsafe(registry.createLookupType(constant.type), [hexToU8a(constant.value.toHex())]);
          codec.meta = constant;
          return codec;
        }, objectNameToCamel));
      }
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  function variantToMeta(lookup, variant) {
    return objectSpread({
      args: variant.fields.map(({
        type
      }) => lookup.getTypeDef(type).type)
    }, variant);
  }
  /** @internal */

  function decorateErrors(registry, {
    lookup,
    pallets
  }, version) {
    const result = {};

    for (let i = 0; i < pallets.length; i++) {
      const {
        errors,
        index,
        name
      } = pallets[i];

      if (errors.isSome) {
        const sectionIndex = version >= 12 ? index.toNumber() : i;
        lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, errors.unwrap(), objectNameToString, variant => ({
          // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
          is: errorMod => isCodec$1(errorMod) && isCodec$1(errorMod.index) && errorMod.index.eq(sectionIndex) && (isU8a(errorMod.error) ? errorMod.error[0] === variant.index.toNumber() : isCodec$1(errorMod.error) && errorMod.error.eq(variant.index)),
          meta: registry.createTypeUnsafe('ErrorMetadataLatest', [variantToMeta(lookup, variant)])
        })));
      }
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  function filterEventsSome({
    events
  }) {
    return events.isSome;
  }
  /** @internal */

  function decorateEvents(registry, {
    lookup,
    pallets
  }, version) {
    const result = {};
    const filtered = pallets.filter(filterEventsSome);

    for (let i = 0; i < filtered.length; i++) {
      const {
        events,
        index,
        name
      } = filtered[i];
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod(result, stringCamelCase(name), () => lazyVariants(lookup, events.unwrap(), objectNameToString, variant => ({
        // We sprinkle in isCodec & isU8a to ensure we are dealing with the correct objects
        is: eventRecord => isCodec$1(eventRecord) && isU8a(eventRecord.index) && sectionIndex === eventRecord.index[0] && variant.index.eq(eventRecord.index[1]),
        meta: registry.createTypeUnsafe('EventMetadataLatest', [variantToMeta(lookup, variant)])
      })));
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  function isTx(tx, callIndex) {
    return tx.callIndex[0] === callIndex[0] && tx.callIndex[1] === callIndex[1];
  }
  /** @internal */


  function createUnchecked(registry, section, callIndex, callMetadata) {
    const expectedArgs = callMetadata.fields;
    const funcName = stringCamelCase(callMetadata.name);

    const extrinsicFn = (...args) => {
      if (expectedArgs.length !== args.length) {
        throw new Error(`Extrinsic ${section}.${funcName} expects ${expectedArgs.length} arguments, got ${args.length}.`);
      }

      return registry.createTypeUnsafe('Call', [{
        args,
        callIndex
      }, callMetadata]);
    };

    extrinsicFn.is = tx => isTx(tx, callIndex);

    extrinsicFn.callIndex = callIndex;
    extrinsicFn.meta = callMetadata;
    extrinsicFn.method = funcName;
    extrinsicFn.section = section;

    extrinsicFn.toJSON = () => callMetadata.toJSON();

    return extrinsicFn;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  function filterCallsSome({
    calls
  }) {
    return calls.isSome;
  }
  function createCallFunction(registry, lookup, variant, sectionName, sectionIndex) {
    const {
      fields,
      index
    } = variant;
    const args = new Array(fields.length);

    for (let a = 0; a < fields.length; a++) {
      const {
        name,
        type,
        typeName
      } = fields[a];
      args[a] = objectSpread({
        name: stringCamelCase(name.unwrapOr(`param${a}`)),
        type: getSiName(lookup, type)
      }, typeName.isSome ? {
        typeName: typeName.unwrap()
      } : null);
    }

    return createUnchecked(registry, sectionName, new Uint8Array([sectionIndex, index.toNumber()]), registry.createTypeUnsafe('FunctionMetadataLatest', [objectSpread({
      args
    }, variant)]));
  }
  /** @internal */

  function decorateExtrinsics(registry, {
    lookup,
    pallets
  }, version) {
    const result = {};
    const filtered = pallets.filter(filterCallsSome);

    for (let i = 0; i < filtered.length; i++) {
      const {
        calls,
        index,
        name
      } = filtered[i];
      const sectionName = stringCamelCase(name);
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod(result, sectionName, () => lazyVariants(lookup, calls.unwrap(), objectNameToCamel, variant => createCallFunction(registry, lookup, variant, sectionName, sectionIndex)));
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  const DEFAULT_FN = data => xxhashAsU8a(data, 128);

  const HASHERS = {
    Blake2_128: data => // eslint-disable-line camelcase
    blake2AsU8a(data, 128),
    Blake2_128Concat: data => // eslint-disable-line camelcase
    u8aConcat(blake2AsU8a(data, 128), u8aToU8a(data)),
    Blake2_256: data => // eslint-disable-line camelcase
    blake2AsU8a(data, 256),
    Identity: data => u8aToU8a(data),
    Twox128: data => xxhashAsU8a(data, 128),
    Twox256: data => xxhashAsU8a(data, 256),
    Twox64Concat: data => u8aConcat(xxhashAsU8a(data, 64), u8aToU8a(data))
  };
  /** @internal */

  function getHasher(hasher) {
    return HASHERS[hasher.type] || DEFAULT_FN;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const NO_RAW_ARGS = {
    args: [],
    hashers: [],
    keys: []
  };
  /** @internal */

  function assertArgs({
    method,
    section
  }, {
    args,
    keys
  }) {
    if (!Array.isArray(args)) {
      throw new Error(`Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments`);
    } else if (args.filter(filterDefined).length !== keys.length) {
      throw new Error(`Call to ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs ${keys.length} arguments, found [${args.join(', ')}]`);
    }
  }
  /** @internal */


  function createKeyRawParts(registry, itemFn, {
    args,
    hashers,
    keys
  }) {
    const extra = new Array(keys.length);

    for (let i = 0; i < keys.length; i++) {
      extra[i] = getHasher(hashers[i])(registry.createTypeUnsafe(registry.createLookupType(keys[i]), [args[i]]).toU8a());
    }

    return [[xxhashAsU8a(itemFn.prefix, 128), xxhashAsU8a(itemFn.method, 128)], extra];
  }
  /** @internal */

  function createKeyInspect(registry, itemFn, args) {
    assertArgs(itemFn, args);
    const {
      meta
    } = itemFn;
    const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
    let types = [];

    if (meta.type.isMap) {
      const {
        hashers,
        key
      } = meta.type.asMap;
      types = hashers.length === 1 ? [`${hashers[0].type}(${getSiName(registry.lookup, key)})`] : registry.lookup.getSiType(key).def.asTuple.map((k, i) => `${hashers[i].type}(${getSiName(registry.lookup, k)})`);
    }

    const names = ['module', 'method'].concat(...args.args.map((_, i) => types[i]));
    return {
      inner: prefix.concat(...extra).map((v, i) => ({
        name: names[i],
        outer: [v]
      }))
    };
  }
  /** @internal */

  function createKeyRaw(registry, itemFn, args) {
    const [prefix, extra] = createKeyRawParts(registry, itemFn, args);
    return u8aConcat(...prefix, ...extra);
  }
  /** @internal */

  function filterDefined(a) {
    return !isUndefined$1(a);
  }
  /** @internal */


  function createKey(registry, itemFn, args) {
    assertArgs(itemFn, args); // always add the length prefix (underlying it is Bytes)

    return compactAddLength(createKeyRaw(registry, itemFn, args));
  }
  /** @internal */


  function createStorageInspect(registry, itemFn, options) {
    const {
      meta: {
        type
      }
    } = itemFn;
    return (...args) => {
      if (type.isPlain) {
        return options.skipHashing ? {
          inner: [],
          name: 'wellKnown',
          outer: [u8aToU8a(options.key)]
        } : createKeyInspect(registry, itemFn, NO_RAW_ARGS);
      }

      const {
        hashers,
        key
      } = type.asMap;
      return hashers.length === 1 ? createKeyInspect(registry, itemFn, {
        args,
        hashers,
        keys: [key]
      }) : createKeyInspect(registry, itemFn, {
        args,
        hashers,
        keys: registry.lookup.getSiType(key).def.asTuple
      });
    };
  }
  /** @internal */


  function createStorageFn(registry, itemFn, options) {
    const {
      meta: {
        type
      }
    } = itemFn;
    let cacheKey = null; // Can only have zero or one argument:
    //   - storage.system.account(address)
    //   - storage.timestamp.blockPeriod()
    // For higher-map queries the params are passed in as an tuple, [key1, key2]

    return (...args) => {
      if (type.isPlain) {
        if (!cacheKey) {
          cacheKey = options.skipHashing ? compactAddLength(u8aToU8a(options.key)) : createKey(registry, itemFn, NO_RAW_ARGS);
        }

        return cacheKey;
      }

      const {
        hashers,
        key
      } = type.asMap;
      return hashers.length === 1 ? createKey(registry, itemFn, {
        args,
        hashers,
        keys: [key]
      }) : createKey(registry, itemFn, {
        args,
        hashers,
        keys: registry.lookup.getSiType(key).def.asTuple
      });
    };
  }
  /** @internal */


  function createWithMeta(registry, itemFn, options) {
    const {
      meta,
      method,
      prefix,
      section
    } = itemFn;
    const storageFn = createStorageFn(registry, itemFn, options);
    storageFn.inspect = createStorageInspect(registry, itemFn, options);
    storageFn.meta = meta;
    storageFn.method = stringCamelCase(method);
    storageFn.prefix = prefix;
    storageFn.section = section; // explicitly add the actual method in the toJSON, this gets used to determine caching and without it
    // instances (e.g. collective) will not work since it is only matched on param meta

    storageFn.toJSON = () => objectSpread({
      storage: {
        method,
        prefix,
        section
      }
    }, meta.toJSON());

    return storageFn;
  }
  /** @internal */


  function extendHeadMeta(registry, {
    meta: {
      docs,
      name,
      type
    },
    section
  }, {
    method
  }, iterFn) {
    // metadata with a fallback value using the type of the key, the normal
    // meta fallback only applies to actual entry values, create one for head
    const meta = registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
      docs,
      fallback: registry.createTypeUnsafe('Bytes', []),
      modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', [1]),
      // required
      name,
      type: registry.createTypeUnsafe('StorageEntryTypeLatest', [type.asMap.key, 0])
    }]);
    iterFn.meta = meta;

    const fn = (...args) => registry.createTypeUnsafe('StorageKey', [iterFn(...args), {
      method,
      section
    }]);

    fn.meta = meta;
    return fn;
  }
  /** @internal */


  function extendPrefixedMap(registry, itemFn, storageFn) {
    const {
      meta: {
        type
      },
      method,
      section
    } = itemFn;
    storageFn.iterKey = extendHeadMeta(registry, itemFn, storageFn, (...args) => {
      if (args.length && (type.isPlain || args.length > type.asMap.hashers.length)) {
        throw new Error(`Iteration ${stringCamelCase(section || 'unknown')}.${stringCamelCase(method || 'unknown')} needs arguments to be at least one less than the full arguments, found [${args.join(', ')}]`);
      }

      if (args.length) {
        if (type.isMap) {
          const {
            hashers,
            key
          } = type.asMap;
          const keysVec = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple;
          return new Raw(registry, createKeyRaw(registry, itemFn, {
            args,
            hashers: hashers.slice(0, args.length),
            keys: keysVec.slice(0, args.length)
          }));
        }
      }

      return new Raw(registry, createKeyRaw(registry, itemFn, NO_RAW_ARGS));
    });
    return storageFn;
  }
  /** @internal */


  function createFunction(registry, itemFn, options) {
    const {
      meta: {
        type
      }
    } = itemFn;
    const storageFn = createWithMeta(registry, itemFn, options);

    if (type.isMap) {
      extendPrefixedMap(registry, itemFn, storageFn);
    }

    storageFn.keyPrefix = (...args) => storageFn.iterKey && storageFn.iterKey(...args) || compactStripLength(storageFn())[1];

    return storageFn;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors

  function findSiPrimitive(registry, _prim) {
    const prim = _prim.toLowerCase();

    return registry.lookup.types.find(t => t.type.def.isPrimitive && t.type.def.asPrimitive.toString().toLowerCase() === prim || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.toString().toLowerCase() === prim);
  }

  function findSiType(registry, orig) {
    let portable = findSiPrimitive(registry, orig);

    if (!portable && orig === 'Bytes') {
      const u8 = findSiPrimitive(registry, 'u8');

      if (u8) {
        portable = registry.lookup.types.find(t => t.type.def.isSequence && t.type.def.asSequence.type.eq(u8.id) || t.type.def.isHistoricMetaCompat && t.type.def.asHistoricMetaCompat.eq(orig));
      }
    }

    if (!portable) {
      console.warn(`Unable to map ${orig} to a lookup index`);
    }

    return portable;
  } // Small helper function to factorize code on this page.

  /** @internal */


  function createRuntimeFunction({
    method,
    prefix,
    section
  }, key, {
    docs,
    type
  }) {
    return registry => {
      var _findSiType;

      return createFunction(registry, {
        meta: registry.createTypeUnsafe('StorageEntryMetadataLatest', [{
          docs: registry.createTypeUnsafe('Vec<Text>', [[docs]]),
          modifier: registry.createTypeUnsafe('StorageEntryModifierLatest', ['Required']),
          name: registry.createTypeUnsafe('Text', [method]),
          toJSON: () => key,
          type: registry.createTypeUnsafe('StorageEntryTypeLatest', [{
            Plain: ((_findSiType = findSiType(registry, type)) === null || _findSiType === void 0 ? void 0 : _findSiType.id) || 0
          }])
        }]),
        method,
        prefix,
        section
      }, {
        key,
        skipHashing: true
      });
    };
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const prefix = 'Substrate';
  const section = 'substrate';

  function createSubstrateFn(method, key, meta) {
    return createRuntimeFunction({
      method,
      prefix,
      section
    }, key, meta);
  }

  const substrate = {
    changesTrieConfig: createSubstrateFn('changesTrieConfig', ':changes_trie', {
      docs: 'Changes trie configuration is stored under this key.',
      type: 'u32'
    }),
    childStorageKeyPrefix: createSubstrateFn('childStorageKeyPrefix', ':child_storage:', {
      docs: 'Prefix of child storage keys.',
      type: 'u32'
    }),
    code: createSubstrateFn('code', ':code', {
      docs: 'Wasm code of the runtime.',
      type: 'Bytes'
    }),
    extrinsicIndex: createSubstrateFn('extrinsicIndex', ':extrinsic_index', {
      docs: 'Current extrinsic index (u32) is stored under this key.',
      type: 'u32'
    }),
    heapPages: createSubstrateFn('heapPages', ':heappages', {
      docs: 'Number of wasm linear memory pages required for execution of the runtime.',
      type: 'u64'
    })
  };

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /** @internal */

  function getStorage(registry) {
    const storage = {};
    const entries = Object.entries(substrate);

    for (let e = 0; e < entries.length; e++) {
      storage[entries[e][0]] = entries[e][1](registry);
    }

    return {
      substrate: storage
    };
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const VERSION_NAME = 'palletVersion';
  const VERSION_KEY = ':__STORAGE_VERSION__:';
  const VERSION_DOCS = {
    docs: 'Returns the current pallet version from storage',
    type: 'u16'
  };
  /** @internal */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars

  function decorateStorage(registry, {
    pallets
  }, _metaVersion) {
    const result = getStorage(registry);

    for (let i = 0; i < pallets.length; i++) {
      const {
        name,
        storage
      } = pallets[i];

      if (storage.isSome) {
        const section = stringCamelCase(name);
        const {
          items,
          prefix: _prefix
        } = storage.unwrap();

        const prefix = _prefix.toString();

        lazyMethod(result, section, () => lazyMethods({
          palletVersion: createRuntimeFunction({
            method: VERSION_NAME,
            prefix,
            section
          }, createKeyRaw(registry, {
            method: VERSION_KEY,
            prefix: name.toString()
          }, NO_RAW_ARGS), VERSION_DOCS)(registry)
        }, items, meta => createFunction(registry, {
          meta,
          method: meta.name.toString(),
          prefix,
          section
        }, {}), objectNameToCamel));
      }
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  /**
   * Expands the metadata by decoration into consts, query and tx sections
   */

  function expandMetadata(registry, metadata) {
    if (!(metadata instanceof Metadata)) {
      throw new Error('You need to pass a valid Metadata instance to Decorated');
    }

    const latest = metadata.asLatest;
    const version = metadata.version;
    return {
      consts: decorateConstants(registry, latest, version),
      errors: decorateErrors(registry, latest, version),
      events: decorateEvents(registry, latest, version),
      query: decorateStorage(registry, latest, version),
      registry,
      tx: decorateExtrinsics(registry, latest, version)
    };
  }

  const l$7 = logger('PortableRegistry');
  // Just a placeholder for a type.unrwapOr()
  const TYPE_UNWRAP = {
    toNumber: () => -1
  }; // Alias the primitive enum with out known values

  const PRIMITIVE_ALIAS = {
    Char: 'u32',
    // Rust char is 4-bytes
    Str: 'Text'
  }; // These are types where we have a specific decoding/encoding override + helpers

  const PATHS_ALIAS = splitNamespace([// full matching on exact names...
  // these are well-known types with additional encoding
  'sp_core::crypto::AccountId32', 'sp_runtime::generic::era::Era', 'sp_runtime::multiaddress::MultiAddress', // ethereum overrides (Frontier, Moonbeam, Polkadot claims)
  'account::AccountId20', 'polkadot_runtime_common::claims::EthereumAddress', // wildcard matching in place...
  // these have a specific encoding or logic, use a wildcard for {pallet, darwinia}_democracy
  '*_democracy::vote::Vote', '*_conviction_voting::vote::Vote', '*_identity::types::Data', // shorten some well-known types
  'primitive_types::*', 'sp_arithmetic::per_things::*', // ink!
  'ink_env::types::*']); // Mappings for types that should be converted to set via BitVec

  const PATHS_SET = splitNamespace(['pallet_identity::types::BitFlags']); // These are the set namespaces for BitVec definitions (the last 2 appear in types as well)

  const BITVEC_NS_LSB = ['bitvec::order::Lsb0', 'BitOrderLsb0'];
  const BITVEC_NS_MSB = ['bitvec::order::Msb0', 'BitOrderMsb0'];
  const BITVEC_NS = [...BITVEC_NS_LSB, ...BITVEC_NS_MSB]; // These we never use these as top-level names, they are wrappers

  const WRAPPERS = ['BoundedBTreeMap', 'BoundedBTreeSet', 'BoundedVec', 'Box', 'BTreeMap', 'BTreeSet', 'Cow', 'Option', 'Range', 'RangeInclusive', 'Result', 'WeakBoundedVec', 'WrapperKeepOpaque', 'WrapperOpaque']; // These are reserved and/or conflicts with built-in Codec or JS definitions

  const RESERVED = ['entries', 'hash', 'keys', 'new', 'size']; // Remove these from all paths at index 1

  const PATH_RM_INDEX_1 = ['generic', 'misc', 'pallet', 'traits', 'types'];
  /** @internal */

  function sanitizeDocs(docs) {
    const result = new Array(docs.length);

    for (let i = 0; i < docs.length; i++) {
      result[i] = docs[i].toString();
    }

    return result;
  }
  /** @internal */


  function splitNamespace(values) {
    const result = new Array(values.length);

    for (let i = 0; i < values.length; i++) {
      result[i] = values[i].split('::');
    }

    return result;
  }
  /** @internal */


  function matchParts(first, second) {
    return first.length === second.length && first.every((a, index) => {
      const b = second[index].toString();

      if (a === '*' || a === b) {
        return true;
      }

      if (a.includes('*') && a.includes('_') && b.includes('_')) {
        let suba = a.split('_');
        let subb = b.split('_'); // match initial *'s to multiples if we have a match for the other

        if (suba[0] === '*') {
          const indexOf = subb.indexOf(suba[1]);

          if (indexOf !== -1) {
            suba = suba.slice(1);
            subb = subb.slice(indexOf);
          }
        } // check for * matches at the end, adjust accordingly


        if (suba.length === 2 && suba[1] === '*' && suba[0] === subb[0]) {
          return true;
        }

        return matchParts(suba, subb);
      }

      return false;
    });
  } // check if the path matches the PATHS_ALIAS (with wildcards)

  /** @internal */


  function getAliasPath(path) {
    // TODO We need to handle ink! Balance in some way
    return path.length && PATHS_ALIAS.some(a => matchParts(a, path)) ? path[path.length - 1].toString() : null;
  }
  /** @internal */


  function extractNameFlat(portable, lookupIndex, params, path, isInternal = false) {
    const count = path.length; // if we have no path or determined as a wrapper, we just skip it

    if (count === 0 || WRAPPERS.includes(path[count - 1].toString())) {
      return null;
    }

    const camels = new Array(count);
    const lowers = new Array(count); // initially just create arrays of the camelCase and lowercase path
    // parts - we will check these to extract the final values. While
    // we have 2 loops here, we also don't do the same operation twice

    for (let i = 0; i < count; i++) {
      const c = stringPascalCase(isInternal ? path[i].replace('pallet_', '') : path[i]);
      const l = c.toLowerCase();
      camels[i] = c;
      lowers[i] = l;
    }

    let name = '';

    for (let i = 0; i < count; i++) {
      const l = lowers[i]; // Remove ::{generic, misc, pallet, traits, types}::

      if (i !== 1 || !PATH_RM_INDEX_1.includes(l)) {
        // sp_runtime::generic::digest::Digest -> sp_runtime::generic::Digest
        // sp_runtime::multiaddress::MultiAddress -> sp_runtime::MultiAddress
        if (l !== lowers[i + 1]) {
          name += camels[i];
        }
      }
    } // do magic for RawOrigin lookup, e.g. pallet_collective::RawOrigin


    if (camels[1] === 'RawOrigin' && count === 2 && params.length === 2 && params[1].type.isSome) {
      const instanceType = portable[params[1].type.unwrap().toNumber()];

      if (instanceType.type.path.length === 2) {
        name = `${name}${instanceType.type.path[1].toString()}`;
      }
    }

    return {
      lookupIndex,
      name,
      params
    };
  }
  /** @internal */


  function extractName(portable, lookupIndex, {
    type: {
      params,
      path
    }
  }) {
    return extractNameFlat(portable, lookupIndex, params, path);
  }
  /** @internal */


  function nextDupeMatches(name, startAt, names) {
    const result = [names[startAt]];

    for (let i = startAt + 1; i < names.length; i++) {
      const v = names[i];

      if (v.name === name) {
        result.push(v);
      }
    }

    return result;
  }
  /** @internal */


  function rewriteDupes(input, rewrite) {
    const count = input.length;

    for (let i = 0; i < count; i++) {
      const a = input[i];

      for (let j = i + 1; j < count; j++) {
        const b = input[j]; // if the indexes are not the same and the names match, we have a dupe

        if (a.lookupIndex !== b.lookupIndex && a.name === b.name) {
          return false;
        }
      }
    } // add all the adjusted values to the rewite map


    for (let i = 0; i < count; i++) {
      const p = input[i];
      rewrite[p.lookupIndex] = p.name;
    }

    return true;
  }
  /** @internal */


  function removeDupeNames(lookup, portable, names) {
    const rewrite = {};
    return names.map((original, startAt) => {
      const {
        lookupIndex,
        name,
        params
      } = original;

      if (!name) {
        // the name is empty (this is not expected, but have a failsafe)
        return null;
      } else if (rewrite[lookupIndex]) {
        // we have already rewritten this one, we can skip it
        return original;
      } // those where the name is matching starting from this index


      const allSame = nextDupeMatches(name, startAt, names); // we only have one, so all ok

      if (allSame.length === 1) {
        return original;
      } // are there param differences between matching names


      const anyDiff = allSame.some(o => params.length !== o.params.length || params.some((p, index) => !p.name.eq(o.params[index].name) || p.type.unwrapOr(TYPE_UNWRAP).toNumber() !== o.params[index].type.unwrapOr(TYPE_UNWRAP).toNumber())); // everything matches, we can combine these

      if (!anyDiff) {
        return original;
      } // TODO We probably want to attach all the indexes with differences,
      // not just the first
      // find the first parameter that yields differences


      const paramIdx = params.findIndex(({
        type
      }, index) => allSame.every(({
        params
      }, aIndex) => params[index].type.isSome && (aIndex === 0 || !params[index].type.eq(type)))); // No param found that is different

      if (paramIdx === -1) {
        return original;
      } // see if using the param type helps


      const adjusted = new Array(allSame.length); // loop through all, specifically checking that index where the
      // first param yields differences

      for (let i = 0; i < allSame.length; i++) {
        const {
          lookupIndex,
          name,
          params
        } = allSame[i];
        const {
          def,
          path
        } = lookup.getSiType(params[paramIdx].type.unwrap()); // if it is not a primitive and it doesn't have a path, we really cannot
        // do anything at this point

        if (!def.isPrimitive && !path.length) {
          return null;
        }

        adjusted[i] = {
          lookupIndex,
          name: def.isPrimitive ? `${name}${def.asPrimitive.toString()}` : `${name}${path[path.length - 1].toString()}`
        };
      } // check to see if the adjusted names have no issues


      if (rewriteDupes(adjusted, rewrite)) {
        return original;
      } // TODO This is duplicated from the section just above...
      // ... we certainly need a better solution here
      //
      // Last-ditch effort to use the full type path - ugly
      // loop through all, specifically checking that index where the
      // first param yields differences


      for (let i = 0; i < allSame.length; i++) {
        const {
          lookupIndex,
          name,
          params
        } = allSame[i];
        const {
          def,
          path
        } = lookup.getSiType(params[paramIdx].type.unwrap());
        const flat = extractNameFlat(portable, lookupIndex, params, path, true);

        if (def.isPrimitive || !flat) {
          return null;
        }

        adjusted[i] = {
          lookupIndex,
          name: `${name}${flat.name}`
        };
      } // check to see if the adjusted names have no issues


      if (rewriteDupes(adjusted, rewrite)) {
        return original;
      }

      return null;
    }).filter(n => !!n).map(({
      lookupIndex,
      name,
      params
    }) => ({
      lookupIndex,
      name: rewrite[lookupIndex] || name,
      params
    }));
  }
  /** @internal */


  function registerTypes(lookup, lookups, names, params) {
    // Register the types we extracted
    lookup.registry.register(lookups); // Try and extract the AccountId/Address/Signature type from UncheckedExtrinsic

    if (params.SpRuntimeUncheckedExtrinsic) {
      // Address, Call, Signature, Extra
      const [addrParam,, sigParam] = params.SpRuntimeUncheckedExtrinsic;
      const siAddress = lookup.getSiType(addrParam.type.unwrap());
      const siSignature = lookup.getSiType(sigParam.type.unwrap());
      const nsSignature = siSignature.path.join('::');
      let nsAccountId = siAddress.path.join('::');
      const isMultiAddress = nsAccountId === 'sp_runtime::multiaddress::MultiAddress'; // With multiaddress, we check the first type param again

      if (isMultiAddress) {
        // AccountId, AccountIndex
        const [idParam] = siAddress.params;
        nsAccountId = lookup.getSiType(idParam.type.unwrap()).path.join('::');
      }

      lookup.registry.register({
        AccountId: ['sp_core::crypto::AccountId32'].includes(nsAccountId) ? 'AccountId32' : ['account::AccountId20', 'primitive_types::H160'].includes(nsAccountId) ? 'AccountId20' : 'AccountId32',
        // other, default to AccountId32
        Address: isMultiAddress ? 'MultiAddress' : 'AccountId',
        ExtrinsicSignature: ['sp_runtime::MultiSignature'].includes(nsSignature) ? 'MultiSignature' : names[sigParam.type.unwrap().toNumber()] || 'MultiSignature'
      });
    }
  } // this extracts aliases based on what we know the runtime config looks like in a
  // Substrate chain. Specifically we want to have access to the Call and Event params

  /** @internal */


  function extractAliases(params, isContract) {
    const hasParams = Object.keys(params).some(k => !k.startsWith('Pallet'));
    const alias = {};

    if (params.SpRuntimeUncheckedExtrinsic) {
      // Address, Call, Signature, Extra
      const [, {
        type
      }] = params.SpRuntimeUncheckedExtrinsic;
      alias[type.unwrap().toNumber()] = 'Call';
    } else if (hasParams && !isContract) {
      l$7.warn('Unable to determine runtime Call type, cannot inspect sp_runtime::generic::unchecked_extrinsic::UncheckedExtrinsic');
    }

    if (params.FrameSystemEventRecord) {
      // Event, Topic
      const [{
        type
      }] = params.FrameSystemEventRecord;
      alias[type.unwrap().toNumber()] = 'Event';
    } else if (hasParams && !isContract) {
      l$7.warn('Unable to determine runtime Event type, cannot inspect frame_system::EventRecord');
    }

    return alias;
  }
  /** @internal */


  function extractTypeInfo(lookup, portable) {
    const nameInfo = [];
    const types = {};
    const porCount = portable.length;

    for (let i = 0; i < porCount; i++) {
      const type = portable[i];
      const lookupIndex = type.id.toNumber();
      const extracted = extractName(portable, lookupIndex, portable[i]);

      if (extracted) {
        nameInfo.push(extracted);
      }

      types[lookupIndex] = type;
    }

    const lookups = {};
    const names = {};
    const params = {};
    const dedup = removeDupeNames(lookup, portable, nameInfo);
    const dedupCount = dedup.length;

    for (let i = 0; i < dedupCount; i++) {
      const {
        lookupIndex,
        name,
        params: p
      } = dedup[i];
      names[lookupIndex] = name;
      lookups[name] = lookup.registry.createLookupType(lookupIndex);
      params[name] = p;
    }

    return {
      lookups,
      names,
      params,
      types
    };
  }

  var _alias = /*#__PURE__*/_classPrivateFieldKey("alias");

  var _lookups = /*#__PURE__*/_classPrivateFieldKey("lookups");

  var _names = /*#__PURE__*/_classPrivateFieldKey("names");

  var _params = /*#__PURE__*/_classPrivateFieldKey("params");

  var _typeDefs = /*#__PURE__*/_classPrivateFieldKey("typeDefs");

  var _types = /*#__PURE__*/_classPrivateFieldKey("types");

  var _createSiDef = /*#__PURE__*/_classPrivateFieldKey("createSiDef");

  var _getLookupId = /*#__PURE__*/_classPrivateFieldKey("getLookupId");

  var _extract = /*#__PURE__*/_classPrivateFieldKey("extract");

  var _extractArray = /*#__PURE__*/_classPrivateFieldKey("extractArray");

  var _extractBitSequence = /*#__PURE__*/_classPrivateFieldKey("extractBitSequence");

  var _extractCompact = /*#__PURE__*/_classPrivateFieldKey("extractCompact");

  var _extractComposite = /*#__PURE__*/_classPrivateFieldKey("extractComposite");

  var _extractCompositeSet = /*#__PURE__*/_classPrivateFieldKey("extractCompositeSet");

  var _extractFields = /*#__PURE__*/_classPrivateFieldKey("extractFields");

  var _extractFieldsAlias = /*#__PURE__*/_classPrivateFieldKey("extractFieldsAlias");

  var _extractHistoric = /*#__PURE__*/_classPrivateFieldKey("extractHistoric");

  var _extractPrimitive = /*#__PURE__*/_classPrivateFieldKey("extractPrimitive");

  var _extractAliasPath = /*#__PURE__*/_classPrivateFieldKey("extractAliasPath");

  var _extractSequence = /*#__PURE__*/_classPrivateFieldKey("extractSequence");

  var _extractTuple = /*#__PURE__*/_classPrivateFieldKey("extractTuple");

  var _extractVariant = /*#__PURE__*/_classPrivateFieldKey("extractVariant");

  var _extractVariantEnum = /*#__PURE__*/_classPrivateFieldKey("extractVariantEnum");

  class PortableRegistry extends Struct {
    constructor(registry, value, isContract) {
      // const timeStart = performance.now()
      super(registry, {
        types: 'Vec<PortableType>'
      }, value);
      Object.defineProperty(this, _extractVariantEnum, {
        value: _extractVariantEnum2
      });
      Object.defineProperty(this, _extractVariant, {
        value: _extractVariant2
      });
      Object.defineProperty(this, _extractTuple, {
        value: _extractTuple2
      });
      Object.defineProperty(this, _extractSequence, {
        value: _extractSequence2
      });
      Object.defineProperty(this, _extractAliasPath, {
        value: _extractAliasPath2
      });
      Object.defineProperty(this, _extractPrimitive, {
        value: _extractPrimitive2
      });
      Object.defineProperty(this, _extractHistoric, {
        value: _extractHistoric2
      });
      Object.defineProperty(this, _extractFieldsAlias, {
        value: _extractFieldsAlias2
      });
      Object.defineProperty(this, _extractFields, {
        value: _extractFields2
      });
      Object.defineProperty(this, _extractCompositeSet, {
        value: _extractCompositeSet2
      });
      Object.defineProperty(this, _extractComposite, {
        value: _extractComposite2
      });
      Object.defineProperty(this, _extractCompact, {
        value: _extractCompact2
      });
      Object.defineProperty(this, _extractBitSequence, {
        value: _extractBitSequence2
      });
      Object.defineProperty(this, _extractArray, {
        value: _extractArray2
      });
      Object.defineProperty(this, _extract, {
        value: _extract2
      });
      Object.defineProperty(this, _getLookupId, {
        value: _getLookupId2
      });
      Object.defineProperty(this, _createSiDef, {
        value: _createSiDef2
      });
      Object.defineProperty(this, _alias, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _lookups, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _names, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _params, {
        writable: true,
        value: void 0
      });
      Object.defineProperty(this, _typeDefs, {
        writable: true,
        value: {}
      });
      Object.defineProperty(this, _types, {
        writable: true,
        value: void 0
      });
      const {
        lookups,
        names,
        params: _params2,
        types
      } = extractTypeInfo(this, this.types);
      _classPrivateFieldBase(this, _alias)[_alias] = extractAliases(_params2, isContract);
      _classPrivateFieldBase(this, _lookups)[_lookups] = lookups;
      _classPrivateFieldBase(this, _names)[_names] = names;
      _classPrivateFieldBase(this, _params)[_params] = _params2;
      _classPrivateFieldBase(this, _types)[_types] = types; // console.log('PortableRegistry', `${(performance.now() - timeStart).toFixed(2)}ms`)
    }

    get names() {
      return Object.values(_classPrivateFieldBase(this, _names)[_names]).sort();
    }
    /**
     * @description The types of the registry
     */


    get types() {
      return this.getT('types');
    }

    register() {
      registerTypes(this, _classPrivateFieldBase(this, _lookups)[_lookups], _classPrivateFieldBase(this, _names)[_names], _classPrivateFieldBase(this, _params)[_params]);
    }
    /**
     * @description Returns the name for a specific lookup
     */


    getName(lookupId) {
      return _classPrivateFieldBase(this, _names)[_names][_classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId)];
    }
    /**
     * @description Finds a specific type in the registry
     */


    getSiType(lookupId) {
      // NOTE catch-22 - this may already be used as part of the constructor, so
      // ensure that we have actually initialized it correctly
      const found = (_classPrivateFieldBase(this, _types)[_types] || this.types)[_classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId)];

      if (!found) {
        throw new Error(`PortableRegistry: Unable to find type with lookupId ${lookupId.toString()}`);
      }

      return found.type;
    }
    /**
     * @description Lookup the type definition for the index
     */


    getTypeDef(lookupId) {
      const lookupIndex = _classPrivateFieldBase(this, _getLookupId)[_getLookupId](lookupId);

      if (!_classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex]) {
        const lookupName = _classPrivateFieldBase(this, _names)[_names][lookupIndex];

        const empty = {
          info: TypeDefInfo.DoNotConstruct,
          lookupIndex,
          lookupName,
          type: this.registry.createLookupType(lookupIndex)
        }; // Set named items since we will get into circular lookups along the way

        if (lookupName) {
          _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex] = empty;
        }

        const extracted = _classPrivateFieldBase(this, _extract)[_extract](this.getSiType(lookupId), lookupIndex); // For non-named items, we only set this right at the end


        if (!lookupName) {
          _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex] = empty;
        }

        Object.keys(extracted).forEach(k => {
          if (k !== 'lookupName' || extracted[k]) {
            // these are safe since we are looking through the keys as set
            _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex][k] = extracted[k];
          }
        }); // don't set lookupName on lower-level, we want to always direct to the type

        if (extracted.info === TypeDefInfo.Plain) {
          _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupNameRoot = _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
          delete _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex].lookupName;
        }
      }

      return _classPrivateFieldBase(this, _typeDefs)[_typeDefs][lookupIndex];
    }

    sanitizeField(name) {
      let nameField = null;
      let nameOrig = null;

      if (name.isSome) {
        nameField = stringCamelCase(name.unwrap());

        if (nameField.includes('#')) {
          nameOrig = nameField;
          nameField = nameOrig.replace(/#/g, '_');
        } else if (RESERVED.includes(nameField)) {
          nameOrig = nameField;
          nameField = `${nameField}_`;
        }
      }

      return [nameField, nameOrig];
    }

  }

  function _createSiDef2(lookupId) {
    const typeDef = this.getTypeDef(lookupId);
    const lookupIndex = lookupId.toNumber(); // Setup for a lookup on complex types

    return [TypeDefInfo.DoNotConstruct, TypeDefInfo.Enum, TypeDefInfo.Struct].includes(typeDef.info) && typeDef.lookupName ? {
      docs: typeDef.docs,
      info: TypeDefInfo.Si,
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
      type: this.registry.createLookupType(lookupId)
    } : typeDef;
  }

  function _getLookupId2(lookupId) {
    if (isString$1(lookupId)) {
      if (!this.registry.isLookupType(lookupId)) {
        throw new Error(`PortableRegistry: Expected a lookup string type, found ${lookupId}`);
      }

      return parseInt(lookupId.replace('Lookup', ''), 10);
    } else if (isNumber$1(lookupId)) {
      return lookupId;
    }

    return lookupId.toNumber();
  }

  function _extract2(type, lookupIndex) {
    const namespace = type.path.join('::');
    let typeDef;
    const aliasType = _classPrivateFieldBase(this, _alias)[_alias][lookupIndex] || getAliasPath(type.path);

    try {
      if (aliasType) {
        typeDef = _classPrivateFieldBase(this, _extractAliasPath)[_extractAliasPath](lookupIndex, aliasType);
      } else {
        switch (type.def.type) {
          case 'Array':
            typeDef = _classPrivateFieldBase(this, _extractArray)[_extractArray](lookupIndex, type.def.asArray);
            break;

          case 'BitSequence':
            typeDef = _classPrivateFieldBase(this, _extractBitSequence)[_extractBitSequence](lookupIndex, type.def.asBitSequence);
            break;

          case 'Compact':
            typeDef = _classPrivateFieldBase(this, _extractCompact)[_extractCompact](lookupIndex, type.def.asCompact);
            break;

          case 'Composite':
            typeDef = _classPrivateFieldBase(this, _extractComposite)[_extractComposite](lookupIndex, type, type.def.asComposite);
            break;

          case 'HistoricMetaCompat':
            typeDef = _classPrivateFieldBase(this, _extractHistoric)[_extractHistoric](lookupIndex, type.def.asHistoricMetaCompat);
            break;

          case 'Primitive':
            typeDef = _classPrivateFieldBase(this, _extractPrimitive)[_extractPrimitive](lookupIndex, type);
            break;

          case 'Sequence':
            typeDef = _classPrivateFieldBase(this, _extractSequence)[_extractSequence](lookupIndex, type.def.asSequence);
            break;

          case 'Tuple':
            typeDef = _classPrivateFieldBase(this, _extractTuple)[_extractTuple](lookupIndex, type.def.asTuple);
            break;

          case 'Variant':
            typeDef = _classPrivateFieldBase(this, _extractVariant)[_extractVariant](lookupIndex, type, type.def.asVariant);
            break;

          default:
            assertUnreachable(type.def.type);
        }
      }
    } catch (error) {
      throw new Error(`PortableRegistry: ${lookupIndex}${namespace ? ` (${namespace})` : ''}: Error extracting ${stringify(type)}: ${error.message}`);
    }

    return objectSpread({
      docs: sanitizeDocs(type.docs),
      namespace
    }, typeDef);
  }

  function _extractArray2(_, {
    len,
    type
  }) {
    const length = len.toNumber();

    if (length > 2048) {
      throw new Error('Only support for [Type; <length>], where length <= 2048');
    }

    return withTypeString(this.registry, {
      info: TypeDefInfo.VecFixed,
      length,
      sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type)
    });
  }

  function _extractBitSequence2(_, {
    bitOrderType,
    bitStoreType
  }) {
    // With the v3 of scale-info this swapped around, but obviously the decoder cannot determine
    // the order. With that in-mind, we apply a detection for LSb0/Msb and set accordingly
    const a = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](bitOrderType);

    const b = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](bitStoreType);

    const [bitOrder, bitStore] = BITVEC_NS.includes(a.namespace || '') ? [a, b] : [b, a]; // NOTE: Currently the BitVec type is one-way only, i.e. we only use it to decode, not
    // re-encode stuff. As such we ignore the msb/lsb identifier given by bitOrderType, or rather
    // we don't pass it though at all (all displays in LSB)

    if (!BITVEC_NS.includes(bitOrder.namespace || '')) {
      throw new Error(`Unexpected bitOrder found as ${bitOrder.namespace || '<unknown>'}`);
    } else if (bitStore.info !== TypeDefInfo.Plain || bitStore.type !== 'u8') {
      throw new Error(`Only u8 bitStore is currently supported, found ${bitStore.type}`);
    }

    return {
      info: TypeDefInfo.Plain,
      type: 'BitVec'
    };
  }

  function _extractCompact2(_, {
    type
  }) {
    return withTypeString(this.registry, {
      info: TypeDefInfo.Compact,
      sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type)
    });
  }

  function _extractComposite2(lookupIndex, {
    params,
    path
  }, {
    fields
  }) {
    const pathFirst = path[0].toString();
    const pathLast = path[path.length - 1].toString();

    if (path.length === 1 && pathFirst === 'BTreeMap') {
      return withTypeString(this.registry, {
        info: TypeDefInfo.BTreeMap,
        sub: params.map(({
          type
        }) => _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type.unwrap()))
      });
    } else if (path.length === 1 && pathFirst === 'BTreeSet') {
      return withTypeString(this.registry, {
        info: TypeDefInfo.BTreeSet,
        sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap())
      });
    } else if (['Range', 'RangeInclusive'].includes(pathFirst)) {
      return withTypeString(this.registry, {
        info: pathFirst === 'Range' ? TypeDefInfo.Range : TypeDefInfo.RangeInclusive,
        sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap()),
        type: pathFirst
      });
    } else if (['WrapperKeepOpaque', 'WrapperOpaque'].includes(pathLast)) {
      return withTypeString(this.registry, {
        info: pathLast === 'WrapperKeepOpaque' ? TypeDefInfo.WrapperKeepOpaque : TypeDefInfo.WrapperOpaque,
        sub: _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap()),
        type: pathLast
      });
    }

    return PATHS_SET.some(p => matchParts(p, path)) ? _classPrivateFieldBase(this, _extractCompositeSet)[_extractCompositeSet](lookupIndex, params, fields) : _classPrivateFieldBase(this, _extractFields)[_extractFields](lookupIndex, fields);
  }

  function _extractCompositeSet2(_, params, fields) {
    if (params.length !== 1 || fields.length !== 1) {
      throw new Error('Set handling expects param/field as single entries');
    }

    return withTypeString(this.registry, {
      info: TypeDefInfo.Set,
      length: this.registry.createTypeUnsafe(this.registry.createLookupType(fields[0].type), []).bitLength(),
      sub: this.getSiType(params[0].type.unwrap()).def.asVariant.variants.map(({
        index,
        name
      }) => ({
        // This will be an issue > 2^53 - 1 ... don't have those (yet)
        index: index.toNumber(),
        info: TypeDefInfo.Plain,
        name: name.toString(),
        type: 'Null'
      }))
    });
  }

  function _extractFields2(lookupIndex, fields) {
    let isStruct = true;
    let isTuple = true;

    for (let f = 0; f < fields.length; f++) {
      const {
        name
      } = fields[f];
      isStruct = isStruct && name.isSome;
      isTuple = isTuple && name.isNone;
    }

    if (!isTuple && !isStruct) {
      throw new Error('Invalid fields type detected, expected either Tuple (all unnamed) or Struct (all named)');
    }

    if (fields.length === 0) {
      return {
        info: TypeDefInfo.Null,
        type: 'Null'
      };
    } else if (isTuple && fields.length === 1) {
      const typeDef = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](fields[0].type);

      return objectSpread({}, typeDef, lookupIndex === -1 ? null : {
        lookupIndex,
        lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
        lookupNameRoot: typeDef.lookupName
      }, fields[0].typeName.isSome ? {
        typeName: sanitize(fields[0].typeName.unwrap())
      } : null);
    }

    const [sub, alias] = _classPrivateFieldBase(this, _extractFieldsAlias)[_extractFieldsAlias](fields);

    return withTypeString(this.registry, objectSpread({
      info: isTuple // Tuple check first
      ? TypeDefInfo.Tuple : TypeDefInfo.Struct,
      sub
    }, alias.size ? {
      alias
    } : null, lookupIndex === -1 ? null : {
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex]
    }));
  }

  function _extractFieldsAlias2(fields) {
    const alias = new Map();
    const sub = new Array(fields.length);

    for (let i = 0; i < fields.length; i++) {
      const {
        docs,
        name,
        type,
        typeName
      } = fields[i];

      const typeDef = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type);

      if (name.isNone) {
        sub[i] = typeDef;
      } else {
        const [nameField, nameOrig] = this.sanitizeField(name);

        if (nameField && nameOrig) {
          alias.set(nameField, nameOrig);
        }

        sub[i] = objectSpread({
          docs: sanitizeDocs(docs),
          name: nameField
        }, typeDef, typeName.isSome ? {
          typeName: sanitize(typeName.unwrap())
        } : null);
      }
    }

    return [sub, alias];
  }

  function _extractHistoric2(_, type) {
    return objectSpread({
      displayName: type.toString(),
      isFromSi: true
    }, getTypeDef(type));
  }

  function _extractPrimitive2(_, type) {
    const typeStr = type.def.asPrimitive.type.toString();
    return {
      info: TypeDefInfo.Plain,
      type: PRIMITIVE_ALIAS[typeStr] || typeStr.toLowerCase()
    };
  }

  function _extractAliasPath2(_, type) {
    return {
      info: TypeDefInfo.Plain,
      type
    };
  }

  function _extractSequence2(lookupIndex, {
    type
  }) {
    const sub = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type);

    if (sub.type === 'u8') {
      return {
        info: TypeDefInfo.Plain,
        type: 'Bytes'
      };
    }

    return withTypeString(this.registry, {
      info: TypeDefInfo.Vec,
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
      sub
    });
  }

  function _extractTuple2(lookupIndex, ids) {
    if (ids.length === 0) {
      return {
        info: TypeDefInfo.Null,
        type: 'Null'
      };
    } else if (ids.length === 1) {
      return this.getTypeDef(ids[0]);
    }

    const sub = ids.map(t => _classPrivateFieldBase(this, _createSiDef)[_createSiDef](t));
    return withTypeString(this.registry, {
      info: TypeDefInfo.Tuple,
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
      sub
    });
  }

  function _extractVariant2(lookupIndex, {
    params,
    path
  }, {
    variants
  }) {
    const specialVariant = path[0].toString();

    if (specialVariant === 'Option') {
      const sub = _classPrivateFieldBase(this, _createSiDef)[_createSiDef](params[0].type.unwrap()); // NOTE This is opt-in (unhandled), not by default
      // if (sub.type === 'bool') {
      //   return withTypeString(this.registry, {
      //     info: TypeDefInfo.Plain,
      //     type: 'OptionBool'
      //   });
      // }


      return withTypeString(this.registry, {
        info: TypeDefInfo.Option,
        sub
      });
    } else if (specialVariant === 'Result') {
      return withTypeString(this.registry, {
        info: TypeDefInfo.Result,
        sub: params.map(({
          type
        }, index) => objectSpread({
          name: ['Ok', 'Error'][index]
        }, _classPrivateFieldBase(this, _createSiDef)[_createSiDef](type.unwrap())))
      });
    } else if (variants.length === 0) {
      return {
        info: TypeDefInfo.Null,
        type: 'Null'
      };
    }

    return _classPrivateFieldBase(this, _extractVariantEnum)[_extractVariantEnum](lookupIndex, variants);
  }

  function _extractVariantEnum2(lookupIndex, variants) {
    const sub = []; // we may get entries out of order, arrange them first before creating with gaps filled
    // NOTE: Since we mutate, use a copy of the array as an input

    variants.slice().sort((a, b) => a.index.cmp(b.index)).forEach(({
      fields,
      index: bnIndex,
      name
    }) => {
      const index = bnIndex.toNumber();

      while (sub.length !== index) {
        sub.push({
          index: sub.length,
          info: TypeDefInfo.Null,
          name: `__Unused${sub.length}`,
          type: 'Null'
        });
      }

      sub.push(objectSpread(_classPrivateFieldBase(this, _extractFields)[_extractFields](-1, fields), {
        index,
        name: name.toString()
      }));
    });
    return withTypeString(this.registry, {
      info: TypeDefInfo.Enum,
      lookupIndex,
      lookupName: _classPrivateFieldBase(this, _names)[_names][lookupIndex],
      sub
    });
  }

  // Copyright 2017-2022 @polkadot/types authors & contributors
  const DEFAULT_FIRST_CALL_IDX = new Uint8Array(2);
  const l$6 = logger('registry');

  function sortDecimalStrings(a, b) {
    return parseInt(a, 10) - parseInt(b, 10);
  }

  function valueToString(v) {
    return v.toString();
  }

  function getFieldArgs(lookup, fields) {
    const args = new Array(fields.length);

    for (let i = 0; i < fields.length; i++) {
      args[i] = lookup.getTypeDef(fields[i].type).type;
    }

    return args;
  }

  function clearRecord(record) {
    const keys = Object.keys(record);

    for (let i = 0; i < keys.length; i++) {
      delete record[keys[i]];
    }
  }

  function getVariantStringIdx({
    index
  }) {
    return index.toString();
  } // create error mapping from metadata


  function injectErrors(_, {
    lookup,
    pallets
  }, version, result) {
    clearRecord(result);

    for (let i = 0; i < pallets.length; i++) {
      const {
        errors,
        index,
        name
      } = pallets[i];

      if (errors.isSome) {
        const sectionName = stringCamelCase(name);
        lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, errors.unwrap(), getVariantStringIdx, ({
          docs,
          fields,
          index,
          name
        }) => ({
          args: getFieldArgs(lookup, fields),
          docs: docs.map(valueToString),
          fields,
          index: index.toNumber(),
          method: name.toString(),
          name: name.toString(),
          section: sectionName
        })));
      }
    }
  } // create event classes from metadata


  function injectEvents(registry, {
    lookup,
    pallets
  }, version, result) {
    const filtered = pallets.filter(filterEventsSome);
    clearRecord(result);

    for (let i = 0; i < filtered.length; i++) {
      const {
        events,
        index,
        name
      } = filtered[i];
      lazyMethod(result, version >= 12 ? index.toNumber() : i, () => lazyVariants(lookup, events.unwrap(), getVariantStringIdx, variant => {
        const meta = registry.createType('EventMetadataLatest', objectSpread({}, variant, {
          args: getFieldArgs(lookup, variant.fields)
        }));
        return class extends GenericEventData {
          constructor(registry, value) {
            super(registry, value, meta, stringCamelCase(name), variant.name.toString());
          }

        };
      }));
    }
  } // create extrinsic mapping from metadata


  function injectExtrinsics(registry, {
    lookup,
    pallets
  }, version, result) {
    const filtered = pallets.filter(filterCallsSome);
    clearRecord(result);

    for (let i = 0; i < filtered.length; i++) {
      const {
        calls,
        index,
        name
      } = filtered[i];
      const sectionIndex = version >= 12 ? index.toNumber() : i;
      lazyMethod(result, sectionIndex, () => lazyVariants(lookup, calls.unwrap(), getVariantStringIdx, variant => createCallFunction(registry, lookup, variant, stringCamelCase(name), sectionIndex)));
    }
  } // extract additional properties from the metadata


  function extractProperties(registry, metadata) {
    const original = registry.getChainProperties();
    const constants = decorateConstants(registry, metadata.asLatest, metadata.version);
    const ss58Format = constants.system && (constants.system.sS58Prefix || constants.system.ss58Prefix);

    if (!ss58Format) {
      return original;
    }

    const {
      tokenDecimals,
      tokenSymbol
    } = original || {};
    return registry.createTypeUnsafe('ChainProperties', [{
      ss58Format,
      tokenDecimals,
      tokenSymbol
    }]);
  }

  class TypeRegistry {
    #classes = new Map();
    #definitions = new Map();
    #firstCallIndex = null;
    #lookup;
    #metadata;
    #metadataVersion = 0;
    #metadataCalls = {};
    #metadataErrors = {};
    #metadataEvents = {};
    #unknownTypes = new Map();
    #chainProperties;
    #hasher = blake2AsU8a;
    #knownDefaults;
    #knownDefinitions;
    #knownTypes = {};
    #signedExtensions = fallbackExtensions;
    #userExtensions;

    constructor(createdAtHash) {
      this.#knownDefaults = objectSpread({
        Json,
        Metadata,
        PortableRegistry,
        Raw
      }, baseTypes);
      this.#knownDefinitions = definitions;
      const allKnown = Object.values(this.#knownDefinitions);

      for (let i = 0; i < allKnown.length; i++) {
        this.register(allKnown[i].types);
      }

      if (createdAtHash) {
        this.createdAtHash = this.createType('Hash', createdAtHash);
      }
    }

    get chainDecimals() {
      var _this$chainProperties;

      if ((_this$chainProperties = this.#chainProperties) !== null && _this$chainProperties !== void 0 && _this$chainProperties.tokenDecimals.isSome) {
        const allDecimals = this.#chainProperties.tokenDecimals.unwrap();

        if (allDecimals.length) {
          return allDecimals.map(b => b.toNumber());
        }
      }

      return [12];
    }

    get chainSS58() {
      var _this$chainProperties2;

      return (_this$chainProperties2 = this.#chainProperties) !== null && _this$chainProperties2 !== void 0 && _this$chainProperties2.ss58Format.isSome ? this.#chainProperties.ss58Format.unwrap().toNumber() : undefined;
    }

    get chainTokens() {
      var _this$chainProperties3;

      if ((_this$chainProperties3 = this.#chainProperties) !== null && _this$chainProperties3 !== void 0 && _this$chainProperties3.tokenSymbol.isSome) {
        const allTokens = this.#chainProperties.tokenSymbol.unwrap();

        if (allTokens.length) {
          return allTokens.map(valueToString);
        }
      }

      return [formatBalance.getDefaults().unit];
    }

    get firstCallIndex() {
      return this.#firstCallIndex || DEFAULT_FIRST_CALL_IDX;
    }
    /**
     * @description Returns true if the type is in a Compat format
     */


    isLookupType(value) {
      return /Lookup\d+$/.test(value);
    }
    /**
     * @description Creates a lookup string from the supplied id
     */


    createLookupType(lookupId) {
      return `Lookup${lookupId.toString()}`;
    }

    get knownTypes() {
      return this.#knownTypes;
    }

    get lookup() {
      return assertReturn(this.#lookup, 'Lookup has not been set on this registry');
    }

    get metadata() {
      return assertReturn(this.#metadata, 'Metadata has not been set on this registry');
    }

    get unknownTypes() {
      return [...this.#unknownTypes.keys()];
    }

    get signedExtensions() {
      return this.#signedExtensions;
    }

    clearCache() {
      this.#classes = new Map();
    }
    /**
     * @describe Creates an instance of the class
     */


    createClass(type) {
      return createClassUnsafe(this, type);
    }
    /**
     * @describe Creates an instance of the class
     */


    createClassUnsafe(type) {
      return createClassUnsafe(this, type);
    }
    /**
     * @description Creates an instance of a type as registered
     */


    createType(type, ...params) {
      return createTypeUnsafe(this, type, params);
    }
    /**
     * @description Creates an instance of a type as registered
     */


    createTypeUnsafe(type, params, options) {
      return createTypeUnsafe(this, type, params, options);
    } // find a specific call


    findMetaCall(callIndex) {
      const [section, method] = [callIndex[0], callIndex[1]];
      return assertReturn(this.#metadataCalls[`${section}`] && this.#metadataCalls[`${section}`][`${method}`], () => `findMetaCall: Unable to find Call with index [${section}, ${method}]/[${callIndex.toString()}]`);
    } // finds an error


    findMetaError(errorIndex) {
      const [section, method] = isU8a(errorIndex) ? [errorIndex[0], errorIndex[1]] : [errorIndex.index.toNumber(), isU8a(errorIndex.error) ? errorIndex.error[0] : errorIndex.error.toNumber()];
      return assertReturn(this.#metadataErrors[`${section}`] && this.#metadataErrors[`${section}`][`${method}`], () => `findMetaError: Unable to find Error with index [${section}, ${method}]/[${errorIndex.toString()}]`);
    }

    findMetaEvent(eventIndex) {
      const [section, method] = [eventIndex[0], eventIndex[1]];
      return assertReturn(this.#metadataEvents[`${section}`] && this.#metadataEvents[`${section}`][`${method}`], () => `findMetaEvent: Unable to find Event with index [${section}, ${method}]/[${eventIndex.toString()}]`);
    }

    get(name, withUnknown, knownTypeDef) {
      return this.getUnsafe(name, withUnknown, knownTypeDef);
    }

    getUnsafe(name, withUnknown, knownTypeDef) {
      let Type = this.#classes.get(name) || this.#knownDefaults[name]; // we have not already created the type, attempt it

      if (!Type) {
        const definition = this.#definitions.get(name);
        let BaseType; // we have a definition, so create the class now (lazily)

        if (definition) {
          BaseType = createClassUnsafe(this, definition);
        } else if (knownTypeDef) {
          BaseType = constructTypeClass(this, knownTypeDef);
        } else if (withUnknown) {
          l$6.warn(`Unable to resolve type ${name}, it will fail on construction`);
          this.#unknownTypes.set(name, true);
          BaseType = DoNotConstruct.with(name);
        }

        if (BaseType) {
          // NOTE If we didn't extend here, we would have strange artifacts. An example is
          // Balance, with this, new Balance() instanceof u128 is true, but Balance !== u128
          // Additionally, we now pass through the registry, which is a link to ourselves
          Type = class extends BaseType {};
          this.#classes.set(name, Type); // In the case of lookups, we also want to store the actual class against
          // the lookup name, instad of having to traverse again

          if (knownTypeDef && isNumber$1(knownTypeDef.lookupIndex)) {
            this.#classes.set(this.createLookupType(knownTypeDef.lookupIndex), Type);
          }
        }
      }

      return Type;
    }

    getChainProperties() {
      return this.#chainProperties;
    }

    getClassName(Type) {
      // we cannot rely on export order (anymore, since babel/core 7.15.8), so in the case of
      // items such as u32 & U32, we get the lowercase versions here... not quite as optimal
      // (previously this used to be a simple find & return)
      const names = [];

      for (const [name, Clazz] of Object.entries(this.#knownDefaults)) {
        if (Type === Clazz) {
          names.push(name);
        }
      }

      for (const [name, Clazz] of this.#classes.entries()) {
        if (Type === Clazz) {
          names.push(name);
        }
      } // both sort and reverse are done in-place


      names.sort().reverse();
      return names.length ? names[0] : undefined;
    }

    getDefinition(typeName) {
      return this.#definitions.get(typeName);
    }

    getModuleInstances(specName, moduleName) {
      var _this$knownTypes, _this$knownTypes$type, _this$knownTypes$type2, _this$knownTypes$type3, _this$knownTypes$type4;

      return (_this$knownTypes = this.#knownTypes) === null || _this$knownTypes === void 0 ? void 0 : (_this$knownTypes$type = _this$knownTypes.typesBundle) === null || _this$knownTypes$type === void 0 ? void 0 : (_this$knownTypes$type2 = _this$knownTypes$type.spec) === null || _this$knownTypes$type2 === void 0 ? void 0 : (_this$knownTypes$type3 = _this$knownTypes$type2[specName]) === null || _this$knownTypes$type3 === void 0 ? void 0 : (_this$knownTypes$type4 = _this$knownTypes$type3.instances) === null || _this$knownTypes$type4 === void 0 ? void 0 : _this$knownTypes$type4[moduleName];
    }

    getOrThrow(name, msg) {
      const Clazz = this.get(name);

      if (!Clazz) {
        throw new Error(msg || `type ${name} not found`);
      }

      return Clazz;
    }

    getOrUnknown(name) {
      return this.get(name, true);
    }

    getSignedExtensionExtra() {
      return expandExtensionTypes(this.#signedExtensions, 'payload', this.#userExtensions);
    }

    getSignedExtensionTypes() {
      return expandExtensionTypes(this.#signedExtensions, 'extrinsic', this.#userExtensions);
    }

    hasClass(name) {
      return this.#classes.has(name) || !!this.#knownDefaults[name];
    }

    hasDef(name) {
      return this.#definitions.has(name);
    }

    hasType(name) {
      return !this.#unknownTypes.get(name) && (this.hasClass(name) || this.hasDef(name));
    }

    hash(data) {
      return this.createType('CodecHash', this.#hasher(data));
    }

    // eslint-disable-next-line no-dupe-class-members
    register(arg1, arg2) {
      // NOTE Constructors appear as functions here
      if (isFunction$2(arg1)) {
        this.#classes.set(arg1.name, arg1);
      } else if (isString$1(arg1)) {
        if (!isFunction$2(arg2)) {
          throw new Error(`Expected class definition passed to '${arg1}' registration`);
        } else if (arg1 === arg2.toString()) {
          throw new Error(`Unable to register circular ${arg1} === ${arg1}`);
        }

        this.#classes.set(arg1, arg2);
      } else {
        this._registerObject(arg1);
      }
    }

    _registerObject(obj) {
      const entries = Object.entries(obj);

      for (let e = 0; e < entries.length; e++) {
        const [name, type] = entries[e];

        if (isFunction$2(type)) {
          // This _looks_ a bit funny, but `typeof Clazz === 'function'
          this.#classes.set(name, type);
        } else {
          const def = isString$1(type) ? type : stringify(type);

          if (name === def) {
            throw new Error(`Unable to register circular ${name} === ${def}`);
          } // we already have this type, remove the classes registered for it


          if (this.#classes.has(name)) {
            this.#classes.delete(name);
          }

          this.#definitions.set(name, def);
        }
      }
    } // sets the chain properties


    setChainProperties(properties) {
      if (properties) {
        this.#chainProperties = properties;
      }
    }

    setHasher(hasher) {
      this.#hasher = hasher || blake2AsU8a;
    }

    setKnownTypes(knownTypes) {
      this.#knownTypes = knownTypes;
    }

    setLookup(lookup) {
      this.#lookup = lookup; // register all applicable types found

      lookup.register();
    } // sets the metadata


    setMetadata(metadata, signedExtensions, userExtensions) {
      this.#metadata = metadata.asLatest;
      this.#metadataVersion = metadata.version;
      this.#firstCallIndex = null; // attach the lookup at this point (before injecting)

      this.setLookup(this.#metadata.lookup);
      injectExtrinsics(this, this.#metadata, this.#metadataVersion, this.#metadataCalls);
      injectErrors(this, this.#metadata, this.#metadataVersion, this.#metadataErrors);
      injectEvents(this, this.#metadata, this.#metadataVersion, this.#metadataEvents); // set the default call index (the lowest section, the lowest method)
      // in most chains this should be 0,0

      const [defSection] = Object.keys(this.#metadataCalls).sort(sortDecimalStrings);

      if (defSection) {
        const [defMethod] = Object.keys(this.#metadataCalls[defSection]).sort(sortDecimalStrings);

        if (defMethod) {
          this.#firstCallIndex = new Uint8Array([parseInt(defSection, 10), parseInt(defMethod, 10)]);
        }
      } // setup the available extensions


      this.setSignedExtensions(signedExtensions || (this.#metadata.extrinsic.version.gt(BN_ZERO) // FIXME Use the extension and their injected types
      ? this.#metadata.extrinsic.signedExtensions.map(({
        identifier
      }) => identifier.toString()) : fallbackExtensions), userExtensions); // setup the chain properties with format overrides

      this.setChainProperties(extractProperties(this, metadata));
    } // sets the available signed extensions


    setSignedExtensions(signedExtensions = fallbackExtensions, userExtensions) {
      this.#signedExtensions = signedExtensions;
      this.#userExtensions = userExtensions;
      const unknown = findUnknownExtensions(this.#signedExtensions, this.#userExtensions);

      if (unknown.length) {
        l$6.warn(`Unknown signed extensions ${unknown.join(', ')} found, treating them as no-effect`);
      }
    }

  }

  // Copyright 2017-2022 @polkadot/rpc-core authors & contributors
  /** @internal */

  function refCountDelay(delay = 1750) {
    return source => {
      // state: 0 = disconnected, 1 = disconnecting, 2 = connecting, 3 = connected
      let [state, refCount, connection, scheduler] = [0, 0, Subscription.EMPTY, Subscription.EMPTY];
      return new Observable(ob => {
        source.subscribe(ob);

        if (refCount++ === 0) {
          if (state === 1) {
            scheduler.unsubscribe();
          } else {
            connection = source.connect();
          }

          state = 3;
        }

        return () => {
          if (--refCount === 0) {
            if (state === 2) {
              state = 0;
              scheduler.unsubscribe();
            } else {
              // state === 3
              state = 1;
              scheduler = asapScheduler.schedule(() => {
                state = 0;
                connection.unsubscribe();
              }, delay);
            }
          }
        };
      });
    };
  }

  // Copyright 2017-2022 @polkadot/rpc-core authors & contributors
  const l$5 = logger('drr');

  const CMP = (a, b) => stringify({
    t: a
  }) === stringify({
    t: b
  });

  const ERR = error => {
    l$5.error(error.message);
    throw error;
  };

  const NOOP = () => undefined;
  /**
   * Shorthand for distinctUntilChanged(), publishReplay(1) and refCount().
   *
   * @ignore
   * @internal
   */


  const drr = ({
    delay,
    skipChange = false,
    skipTimeout = false
  } = {}) => source$ => source$.pipe(catchError(ERR), skipChange ? tap(NOOP) : distinctUntilChanged(CMP), publishReplay(1), skipTimeout ? refCount() : refCountDelay(delay));

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  // Wraps a derive, doing 2 things to optimize calls -
  //   1. creates a memo of the inner fn -> Observable, removing when unsubscribed
  //   2. wraps the observable in a drr() (which includes an unsub delay)

  /** @internal */
  // eslint-disable-next-line @typescript-eslint/ban-types
  function memo(instanceId, inner) {
    const options = {
      getInstanceId: () => instanceId
    };
    const cached = memoize((...params) => new Observable(observer => {
      const subscription = inner(...params).subscribe(observer);
      return () => {
        cached.unmemoize(...params);
        subscription.unsubscribe();
      };
    }).pipe(drr()), options);
    return cached;
  }

  // Copyright 2017-2022 @polkadot/rpc-core authors & contributors
  const l$4 = logger('rpc-core');
  const EMPTY_META = {
    fallback: undefined,
    modifier: {
      isOptional: true
    },
    type: {
      asMap: {
        linked: {
          isTrue: false
        }
      },
      isMap: false
    }
  }; // utility method to create a nicely-formatted error

  /** @internal */

  function logErrorMessage(method, {
    noErrorLog,
    params,
    type
  }, error) {
    if (noErrorLog) {
      return;
    }

    const inputs = params.map(({
      isOptional,
      name,
      type
    }) => `${name}${isOptional ? '?' : ''}: ${type}`).join(', ');
    l$4.error(`${method}(${inputs}): ${type}:: ${error.message}`);
  }

  function isTreatAsHex(key) {
    // :code is problematic - it does not have the length attached, which is
    // unlike all other storage entries where it is indeed properly encoded
    return ['0x3a636f6465'].includes(key.toHex());
  }
  /**
   * @name Rpc
   * @summary The API may use a HTTP or WebSockets provider.
   * @description It allows for querying a Polkadot Client Node.
   * WebSockets provider is recommended since HTTP provider only supports basic querying.
   *
   * ```mermaid
   * graph LR;
   *   A[Api] --> |WebSockets| B[WsProvider];
   *   B --> |endpoint| C[ws://127.0.0.1:9944]
   * ```
   *
   * @example
   * <BR>
   *
   * ```javascript
   * import Rpc from '@polkadot/rpc-core';
   * import { WsProvider } from '@polkadot/rpc-provider/ws';
   *
   * const provider = new WsProvider('ws://127.0.0.1:9944');
   * const rpc = new Rpc(provider);
   * ```
   */


  class RpcCore {
    #instanceId;
    #registryDefault;
    #getBlockRegistry;
    #getBlockHash;
    #storageCache = new Map();
    mapping = new Map();
    sections = [];
    /**
     * @constructor
     * Default constructor for the Api Object
     * @param  {ProviderInterface} provider An API provider using HTTP or WebSocket
     */

    constructor(instanceId, registry, provider, userRpc = {}) {
      // eslint-disable-next-line @typescript-eslint/unbound-method
      if (!provider || !isFunction$2(provider.send)) {
        throw new Error('Expected Provider to API create');
      }

      this.#instanceId = instanceId;
      this.#registryDefault = registry;
      this.provider = provider;
      const sectionNames = Object.keys(jsonrpc); // these are the base keys (i.e. part of jsonrpc)

      this.sections.push(...sectionNames); // decorate all interfaces, defined and user on this instance

      this.addUserInterfaces(userRpc);
    }
    /**
     * @description Returns the connected status of a provider
     */


    get isConnected() {
      return this.provider.isConnected;
    }
    /**
     * @description Manually connect from the attached provider
     */


    connect() {
      return this.provider.connect();
    }
    /**
     * @description Manually disconnect from the attached provider
     */


    disconnect() {
      return this.provider.disconnect();
    }
    /**
     * @description Sets a registry swap (typically from Api)
     */


    setRegistrySwap(registrySwap) {
      this.#getBlockRegistry = memoize(registrySwap, {
        getInstanceId: () => this.#instanceId
      });
    }
    /**
     * @description Sets a function to resolve block hash from block number
     */


    setResolveBlockHash(resolveBlockHash) {
      this.#getBlockHash = memoize(resolveBlockHash, {
        getInstanceId: () => this.#instanceId
      });
    }

    addUserInterfaces(userRpc) {
      // add any extra user-defined sections
      this.sections.push(...Object.keys(userRpc).filter(k => !this.sections.includes(k)));

      for (let s = 0; s < this.sections.length; s++) {
        const section = this.sections[s];
        const defs = objectSpread({}, jsonrpc[section], userRpc[section]);
        const methods = Object.keys(defs);

        for (let m = 0; m < methods.length; m++) {
          const method = methods[m];
          const def = defs[method];
          const jsonrpc = def.endpoint || `${section}_${method}`;

          if (!this.mapping.has(jsonrpc)) {
            const isSubscription = !!def.pubsub;

            if (!this[section]) {
              this[section] = {};
            }

            this.mapping.set(jsonrpc, objectSpread({}, def, {
              isSubscription,
              jsonrpc,
              method,
              section
            }));
            lazyMethod(this[section], method, () => isSubscription ? this._createMethodSubscribe(section, method, def) : this._createMethodSend(section, method, def));
          }
        }
      }
    }

    _memomize(creator, def) {
      const memoOpts = {
        getInstanceId: () => this.#instanceId
      };
      const memoized = memoize(creator(true), memoOpts);
      memoized.raw = memoize(creator(false), memoOpts);
      memoized.meta = def;
      return memoized;
    }

    _formatResult(isScale, registry, blockHash, method, def, params, result) {
      return isScale ? this._formatOutput(registry, blockHash, method, def, params, result) : result;
    }

    _createMethodSend(section, method, def) {
      const rpcName = def.endpoint || `${section}_${method}`;
      const hashIndex = def.params.findIndex(({
        isHistoric
      }) => isHistoric);
      let memoized = null; // execute the RPC call, doing a registry swap for historic as applicable

      const callWithRegistry = async (isScale, values) => {
        var _this$getBlockHash;

        const blockId = hashIndex === -1 ? null : values[hashIndex];
        const blockHash = blockId && def.params[hashIndex].type === 'BlockNumber' ? await ((_this$getBlockHash = this.#getBlockHash) === null || _this$getBlockHash === void 0 ? void 0 : _this$getBlockHash.call(this, blockId)) : blockId;
        const {
          registry
        } = isScale && blockHash && this.#getBlockRegistry ? await this.#getBlockRegistry(u8aToU8a(blockHash)) : {
          registry: this.#registryDefault
        };

        const params = this._formatInputs(registry, null, def, values); // only cache .at(<blockHash>) queries, e.g. where valid blockHash was supplied


        const result = await this.provider.send(rpcName, params.map(p => p.toJSON()), !!blockHash);
        return this._formatResult(isScale, registry, blockHash, method, def, params, result);
      };

      const creator = isScale => (...values) => {
        const isDelayed = isScale && hashIndex !== -1 && !!values[hashIndex];
        return new Observable(observer => {
          callWithRegistry(isScale, values).then(value => {
            observer.next(value);
            observer.complete();
          }).catch(error => {
            logErrorMessage(method, def, error);
            observer.error(error);
            observer.complete();
          });
          return () => {
            // delete old results from cache
            if (isScale) {
              var _memoized;

              (_memoized = memoized) === null || _memoized === void 0 ? void 0 : _memoized.unmemoize(...values);
            } else {
              var _memoized2;

              (_memoized2 = memoized) === null || _memoized2 === void 0 ? void 0 : _memoized2.raw.unmemoize(...values);
            }
          };
        }).pipe(publishReplay(1), // create a Replay(1)
        isDelayed ? refCountDelay() // Unsubscribe after delay
        : refCount());
      };

      memoized = this._memomize(creator, def);
      return memoized;
    } // create a subscriptor, it subscribes once and resolves with the id as subscribe


    _createSubscriber({
      paramsJson,
      subName,
      subType,
      update
    }, errorHandler) {
      return new Promise((resolve, reject) => {
        this.provider.subscribe(subType, subName, paramsJson, update).then(resolve).catch(error => {
          errorHandler(error);
          reject(error);
        });
      });
    }

    _createMethodSubscribe(section, method, def) {
      const [updateType, subMethod, unsubMethod] = def.pubsub;
      const subName = `${section}_${subMethod}`;
      const unsubName = `${section}_${unsubMethod}`;
      const subType = `${section}_${updateType}`;
      let memoized = null;

      const creator = isScale => (...values) => {
        return new Observable(observer => {
          // Have at least an empty promise, as used in the unsubscribe
          let subscriptionPromise = Promise.resolve(null);
          const registry = this.#registryDefault;

          const errorHandler = error => {
            logErrorMessage(method, def, error);
            observer.error(error);
          };

          try {
            const params = this._formatInputs(registry, null, def, values);

            const paramsJson = params.map(p => p.toJSON());

            const update = (error, result) => {
              if (error) {
                logErrorMessage(method, def, error);
                return;
              }

              try {
                observer.next(this._formatResult(isScale, registry, null, method, def, params, result));
              } catch (error) {
                observer.error(error);
              }
            };

            subscriptionPromise = this._createSubscriber({
              paramsJson,
              subName,
              subType,
              update
            }, errorHandler);
          } catch (error) {
            errorHandler(error);
          } // Teardown logic


          return () => {
            // Delete from cache, so old results don't hang around
            if (isScale) {
              var _memoized3;

              (_memoized3 = memoized) === null || _memoized3 === void 0 ? void 0 : _memoized3.unmemoize(...values);
            } else {
              var _memoized4;

              (_memoized4 = memoized) === null || _memoized4 === void 0 ? void 0 : _memoized4.raw.unmemoize(...values);
            } // Unsubscribe from provider


            subscriptionPromise.then(subscriptionId => isNull$1(subscriptionId) ? Promise.resolve(false) : this.provider.unsubscribe(subType, unsubName, subscriptionId)).catch(error => logErrorMessage(method, def, error));
          };
        }).pipe(drr());
      };

      memoized = this._memomize(creator, def);
      return memoized;
    }

    _formatInputs(registry, blockHash, def, inputs) {
      const reqArgCount = def.params.filter(({
        isOptional
      }) => !isOptional).length;
      const optText = reqArgCount === def.params.length ? '' : ` (${def.params.length - reqArgCount} optional)`;

      if (inputs.length < reqArgCount || inputs.length > def.params.length) {
        throw new Error(`Expected ${def.params.length} parameters${optText}, ${inputs.length} found instead`);
      }

      return inputs.map((input, index) => registry.createTypeUnsafe(def.params[index].type, [input], {
        blockHash
      }));
    }

    _formatOutput(registry, blockHash, method, rpc, params, result) {
      if (rpc.type === 'StorageData') {
        const key = params[0];
        return this._formatStorageData(registry, blockHash, key, result);
      } else if (rpc.type === 'StorageChangeSet') {
        const keys = params[0];
        return keys ? this._formatStorageSet(registry, result.block, keys, result.changes) : registry.createType('StorageChangeSet', result);
      } else if (rpc.type === 'Vec<StorageChangeSet>') {
        const mapped = result.map(({
          block,
          changes
        }) => [registry.createType('Hash', block), this._formatStorageSet(registry, block, params[0], changes)]); // we only query at a specific block, not a range - flatten

        return method === 'queryStorageAt' ? mapped[0][1] : mapped;
      }

      return registry.createTypeUnsafe(rpc.type, [result], {
        blockHash
      });
    }

    _formatStorageData(registry, blockHash, key, value) {
      const isEmpty = isNull$1(value); // we convert to Uint8Array since it maps to the raw encoding, all
      // data will be correctly encoded (incl. numbers, excl. :code)

      const input = isEmpty ? null : isTreatAsHex(key) ? value : u8aToU8a(value);
      return this._newType(registry, blockHash, key, input, isEmpty);
    }

    _formatStorageSet(registry, blockHash, keys, changes) {
      // For StorageChangeSet, the changes has the [key, value] mappings
      const withCache = keys.length !== 1; // multiple return values (via state.storage subscription), decode the values
      // one at a time, all based on the query types. Three values can be returned -
      //   - Codec - There is a valid value, non-empty
      //   - null - The storage key is empty

      return keys.reduce((results, key, index) => {
        results.push(this._formatStorageSetEntry(registry, blockHash, key, changes, withCache, index));
        return results;
      }, []);
    }

    _formatStorageSetEntry(registry, blockHash, key, changes, withCache, entryIndex) {
      const hexKey = key.toHex();
      const found = changes.find(([key]) => key === hexKey);
      const isNotFound = isUndefined$1(found); // if we don't find the value, this is our fallback
      //   - in the case of an array of values, fill the hole from the cache
      //   - if a single result value, don't fill - it is not an update hole
      //   - fallback to an empty option in all cases

      if (isNotFound && withCache) {
        const cached = this.#storageCache.get(hexKey);

        if (cached) {
          return cached;
        }
      }

      const value = isNotFound ? null : found[1];
      const isEmpty = isNull$1(value);
      const input = isEmpty || isTreatAsHex(key) ? value : u8aToU8a(value);

      const codec = this._newType(registry, blockHash, key, input, isEmpty, entryIndex); // store the retrieved result - the only issue with this cache is that there is no
      // clearing of it, so very long running processes (not just a couple of hours, longer)
      // will increase memory beyond what is allowed.


      this.#storageCache.set(hexKey, codec);
      return codec;
    }

    _newType(registry, blockHash, key, input, isEmpty, entryIndex = -1) {
      // single return value (via state.getStorage), decode the value based on the
      // outputType that we have specified. Fallback to Raw on nothing
      const type = key.outputType || 'Raw';
      const meta = key.meta || EMPTY_META;
      const entryNum = entryIndex === -1 ? '' : ` entry ${entryIndex}:`;

      try {
        return registry.createTypeUnsafe(type, [isEmpty ? meta.fallback // For old-style Linkage, we add an empty linkage at the end
        ? type.includes('Linkage<') ? u8aConcat(hexToU8a(meta.fallback.toHex()), new Uint8Array(2)) : hexToU8a(meta.fallback.toHex()) : undefined : meta.modifier.isOptional ? registry.createTypeUnsafe(type, [input], {
          blockHash,
          isPedantic: true
        }) : input], {
          blockHash,
          isOptional: meta.modifier.isOptional,
          isPedantic: !meta.modifier.isOptional
        });
      } catch (error) {
        throw new Error(`Unable to decode storage ${key.section || 'unknown'}.${key.method || 'unknown'}:${entryNum}: ${error.message}`);
      }
    }

  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const deriveNoopCache = {
    del: () => undefined,
    forEach: () => undefined,
    get: () => undefined,
    set: (_, value) => value
  };

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const CHACHE_EXPIRY = 7 * (24 * 60) * (60 * 1000);
  let deriveCache;

  function wrapCache(keyStart, cache) {
    return {
      del: partial => cache.del(`${keyStart}${partial}`),
      forEach: cache.forEach,
      get: partial => {
        const key = `${keyStart}${partial}`;
        const cached = cache.get(key);

        if (cached) {
          cached.x = Date.now();
          cache.set(key, cached);
          return cached.v;
        }

        return undefined;
      },
      set: (partial, v) => {
        cache.set(`${keyStart}${partial}`, {
          v,
          x: Date.now()
        });
      }
    };
  }

  function clearCache(cache) {
    // clear all expired values
    const now = Date.now();
    const all = [];
    cache.forEach((key, {
      x
    }) => {
      now - x > CHACHE_EXPIRY && all.push(key);
    }); // don't do delete inside loop, just in-case

    all.forEach(key => cache.del(key));
  }

  function setDeriveCache(prefix = '', cache) {
    deriveCache = cache ? wrapCache(`derive:${prefix}:`, cache) : deriveNoopCache;

    if (cache) {
      clearCache(cache);
    }
  }
  setDeriveCache();

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function firstObservable(obs) {
    return obs.pipe(map(([a]) => a));
  }
  function firstMemo(fn) {
    return (instanceId, api) => memo(instanceId, (...args) => firstObservable(fn(api, ...args)));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function lazyDeriveSection(result, section, getKeys, creator) {
    lazyMethod(result, section, () => lazyMethods({}, getKeys(section), method => creator(section, method)));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name accountId
   * @param {(Address | AccountId | AccountIndex | string | null)} address - An accounts address in various formats.
   * @description  An [[AccountId]]
   */

  function accountId(instanceId, api) {
    return memo(instanceId, address => {
      const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());

      if (decoded.length > 8) {
        return of(api.registry.createType('AccountId', decoded));
      }

      const accountIndex = api.registry.createType('AccountIndex', decoded);
      return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(a => assertReturn(a, 'Unable to retrieve accountId')));
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function parseFlags(address, [electionsMembers, councilMembers, technicalCommitteeMembers, societyMembers, sudoKey]) {
    const addrStr = address && address.toString();

    const isIncluded = id => id.toString() === addrStr;

    return {
      isCouncil: ((electionsMembers === null || electionsMembers === void 0 ? void 0 : electionsMembers.map(r => Array.isArray(r) ? r[0] : r.who)) || councilMembers || []).some(isIncluded),
      isSociety: (societyMembers || []).some(isIncluded),
      isSudo: (sudoKey === null || sudoKey === void 0 ? void 0 : sudoKey.toString()) === addrStr,
      isTechCommittee: (technicalCommitteeMembers || []).some(isIncluded)
    };
  }

  function _flags(instanceId, api) {
    return memo(instanceId, () => {
      var _ref, _api$query$council, _api$query$technicalC, _api$query$society, _api$query$sudo;

      const results = [undefined, [], [], [], undefined];
      const calls = [(_ref = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections) === null || _ref === void 0 ? void 0 : _ref.members, (_api$query$council = api.query.council) === null || _api$query$council === void 0 ? void 0 : _api$query$council.members, (_api$query$technicalC = api.query.technicalCommittee) === null || _api$query$technicalC === void 0 ? void 0 : _api$query$technicalC.members, (_api$query$society = api.query.society) === null || _api$query$society === void 0 ? void 0 : _api$query$society.members, (_api$query$sudo = api.query.sudo) === null || _api$query$sudo === void 0 ? void 0 : _api$query$sudo.key];
      const filtered = calls.filter(c => c);

      if (!filtered.length) {
        return of(results);
      }

      return api.queryMulti(filtered).pipe(map(values => {
        let resultIndex = -1;

        for (let i = 0; i < calls.length; i++) {
          if (isFunction$2(calls[i])) {
            results[i] = values[++resultIndex];
          }
        }

        return results;
      }));
    });
  }
  /**
   * @name info
   * @description Returns account membership flags
   */

  function flags(instanceId, api) {
    return memo(instanceId, address => api.derive.accounts._flags().pipe(map(r => parseFlags(address, r))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name idAndIndex
   * @param {(Address | AccountId | AccountIndex | Uint8Array | string | null)} address - An accounts address in various formats.
   * @description  An array containing the [[AccountId]] and [[AccountIndex]] as optional values.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.accounts.idAndIndex('F7Hs', ([id, ix]) => {
   *   console.log(`AccountId #${id} with corresponding AccountIndex ${ix}`);
   * });
   * ```
   */

  function idAndIndex(instanceId, api) {
    return memo(instanceId, address => {
      try {
        // yes, this can fail, don't care too much, catch will catch it
        const decoded = isU8a(address) ? address : decodeAddress((address || '').toString());

        if (decoded.length > 8) {
          const accountId = api.registry.createType('AccountId', decoded);
          return api.derive.accounts.idToIndex(accountId).pipe(map(accountIndex => [accountId, accountIndex]));
        }

        const accountIndex = api.registry.createType('AccountIndex', decoded);
        return api.derive.accounts.indexToId(accountIndex.toString()).pipe(map(accountId => [accountId, accountIndex]));
      } catch (error) {
        return of([undefined, undefined]);
      }
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name idToIndex
   * @param {( AccountId | string )} accountId - An accounts Id in different formats.
   * @returns Returns the corresponding AccountIndex.
   * @example
   * <BR>
   *
   * ```javascript
   * const ALICE = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
   * api.derive.accounts.idToIndex(ALICE, (accountIndex) => {
   *   console.log(`The AccountIndex of ${ALICE} is ${accountIndex}`);
   * });
   * ```
   */

  function idToIndex(instanceId, api) {
    return memo(instanceId, accountId => api.derive.accounts.indexes().pipe(map(indexes => (indexes || {})[accountId.toString()])));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const UNDEF_HEX = {
    toHex: () => undefined
  };

  function dataAsString(data) {
    return data.isRaw ? u8aToString(data.asRaw.toU8a(true)) : data.isNone ? undefined : data.toHex();
  }

  function extractOther(additional) {
    return additional.reduce((other, [_key, _value]) => {
      const key = dataAsString(_key);
      const value = dataAsString(_value);

      if (key && value) {
        other[key] = value;
      }

      return other;
    }, {});
  }

  function extractIdentity(identityOfOpt, superOf) {
    if (!(identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome)) {
      return {
        judgements: []
      };
    }

    const {
      info,
      judgements
    } = identityOfOpt.unwrap();
    const topDisplay = dataAsString(info.display);
    return {
      display: superOf && dataAsString(superOf[1]) || topDisplay,
      displayParent: superOf && topDisplay,
      email: dataAsString(info.email),
      image: dataAsString(info.image),
      judgements,
      legal: dataAsString(info.legal),
      other: extractOther(info.additional),
      parent: superOf && superOf[0],
      pgp: info.pgpFingerprint.unwrapOr(UNDEF_HEX).toHex(),
      riot: dataAsString(info.riot),
      twitter: dataAsString(info.twitter),
      web: dataAsString(info.web)
    };
  }

  function getParent(api, identityOfOpt, superOfOpt) {
    if (identityOfOpt !== null && identityOfOpt !== void 0 && identityOfOpt.isSome) {
      // this identity has something set
      return of([identityOfOpt, undefined]);
    } else if (superOfOpt !== null && superOfOpt !== void 0 && superOfOpt.isSome) {
      const superOf = superOfOpt.unwrap();
      return combineLatest([api.derive.accounts._identity(superOf[0]).pipe(map(([info]) => info)), of(superOf)]);
    } // nothing of value returned


    return of([undefined, undefined]);
  }

  function _identity(instanceId, api) {
    return memo(instanceId, accountId => {
      var _api$query$identity;

      return accountId && (_api$query$identity = api.query.identity) !== null && _api$query$identity !== void 0 && _api$query$identity.identityOf ? combineLatest([api.query.identity.identityOf(accountId), api.query.identity.superOf(accountId)]) : of([undefined, undefined]);
    });
  }
  /**
   * @name identity
   * @description Returns identity info for an account
   */

  function identity$1(instanceId, api) {
    return memo(instanceId, accountId => api.derive.accounts._identity(accountId).pipe(switchMap(([identityOfOpt, superOfOpt]) => getParent(api, identityOfOpt, superOfOpt)), map(([identityOfOpt, superOf]) => extractIdentity(identityOfOpt, superOf))));
  }
  const hasIdentity = firstMemo((api, accountId) => api.derive.accounts.hasIdentityMulti([accountId]));
  function hasIdentityMulti(instanceId, api) {
    return memo(instanceId, accountIds => {
      var _api$query$identity2;

      return (_api$query$identity2 = api.query.identity) !== null && _api$query$identity2 !== void 0 && _api$query$identity2.identityOf ? combineLatest([api.query.identity.identityOf.multi(accountIds), api.query.identity.superOf.multi(accountIds)]).pipe(map(([identities, supers]) => identities.map((identityOfOpt, index) => {
        const superOfOpt = supers[index];
        const parentId = superOfOpt && superOfOpt.isSome ? superOfOpt.unwrap()[0].toString() : undefined;
        let display;

        if (identityOfOpt && identityOfOpt.isSome) {
          const value = dataAsString(identityOfOpt.unwrap().info.display);

          if (value && !isHex(value)) {
            display = value;
          }
        }

        return {
          display,
          hasIdentity: !!(display || parentId),
          parentId
        };
      }))) : of(accountIds.map(() => ({
        hasIdentity: false
      })));
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name indexToId
   * @param {( AccountIndex | string )} accountIndex - An accounts index in different formats.
   * @returns Returns the corresponding AccountId.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.accounts.indexToId('F7Hs', (accountId) => {
   *   console.log(`The AccountId of F7Hs is ${accountId}`);
   * });
   * ```
   */

  function indexToId(instanceId, api) {
    return memo(instanceId, accountIndex => api.query.indices ? api.query.indices.accounts(accountIndex).pipe(map(optResult => optResult.unwrapOr([])[0])) : of(undefined));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  let indicesCache = null;

  function queryAccounts(api) {
    return api.query.indices.accounts.entries().pipe(map(entries => entries.reduce((indexes, [key, idOpt]) => {
      if (idOpt.isSome) {
        indexes[idOpt.unwrap()[0].toString()] = api.registry.createType('AccountIndex', key.args[0]);
      }

      return indexes;
    }, {})));
  }
  /**
   * @name indexes
   * @returns Returns all the indexes on the system.
   * @description This is an unwieldly query since it loops through
   * all of the enumsets and returns all of the values found. This could be up to 32k depending
   * on the number of active accounts in the system
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.accounts.indexes((indexes) => {
   *   console.log('All existing AccountIndexes', indexes);
   * });
   * ```
   */


  function indexes$1(instanceId, api) {
    return memo(instanceId, () => indicesCache ? of(indicesCache) : (api.query.indices ? queryAccounts(api).pipe(startWith({})) : of({})).pipe(map(indices => {
      indicesCache = indices;
      return indices;
    })));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function retrieveNick(api, accountId) {
    var _api$query$nicks;

    return (accountId && (_api$query$nicks = api.query.nicks) !== null && _api$query$nicks !== void 0 && _api$query$nicks.nameOf ? api.query.nicks.nameOf(accountId) : of(undefined)).pipe(map(nameOf => nameOf !== null && nameOf !== void 0 && nameOf.isSome ? u8aToString(nameOf.unwrap()[0]).substring(0, api.consts.nicks.maxLength.toNumber()) : undefined));
  }
  /**
   * @name info
   * @description Returns aux. info with regards to an account, current that includes the accountId, accountIndex and nickname
   */


  function info$4(instanceId, api) {
    return memo(instanceId, address => api.derive.accounts.idAndIndex(address).pipe(switchMap(([accountId, accountIndex]) => combineLatest([of({
      accountId,
      accountIndex
    }), api.derive.accounts.identity(accountId), retrieveNick(api, accountId)])), map(([{
      accountId,
      accountIndex
    }, identity, nickname]) => ({
      accountId,
      accountIndex,
      identity,
      nickname
    }))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var accounts$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accountId: accountId,
    _flags: _flags,
    flags: flags,
    idAndIndex: idAndIndex,
    idToIndex: idToIndex,
    _identity: _identity,
    identity: identity$1,
    hasIdentity: hasIdentity,
    hasIdentityMulti: hasIdentityMulti,
    indexToId: indexToId,
    indexes: indexes$1,
    info: info$4
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function orderBags(ids, bags) {
    const sorted = ids.map((id, index) => ({
      bag: bags[index].unwrapOr(null),
      id,
      key: id.toString()
    })).sort((a, b) => b.id.cmp(a.id)).map((base, index) => ({ ...base,
      bagLower: BN_ZERO,
      bagUpper: base.id,
      index
    }));
    const max = sorted.length - 1;
    return sorted.map((entry, index) => index === max ? entry // We could probably use a .add(BN_ONE) here
    : { ...entry,
      bagLower: sorted[index + 1].bagUpper
    });
  }

  function _getIds(instanceId, api) {
    return memo(instanceId, _ids => {
      const ids = _ids.map(id => bnToBn(id));

      return ids.length ? (api.query.voterList || api.query.bagsList).listBags.multi(ids).pipe(map(bags => orderBags(ids, bags))) : of([]);
    });
  }
  function all$1(instanceId, api) {
    return memo(instanceId, () => (api.query.voterList || api.query.bagsList).listBags.keys().pipe(switchMap(keys => api.derive.bagsList._getIds(keys.map(({
      args: [id]
    }) => id))), map(list => list.filter(({
      bag
    }) => bag))));
  }
  function get(instanceId, api) {
    return memo(instanceId, id => api.derive.bagsList._getIds([bnToBn(id)]).pipe(map(bags => bags[0])));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function expand(instanceId, api) {
    return memo(instanceId, bag => api.derive.bagsList.listNodes(bag.bag).pipe(map(nodes => ({ ...bag,
      nodes
    }))));
  }
  function getExpanded(instanceId, api) {
    return memo(instanceId, id => api.derive.bagsList.get(id).pipe(switchMap(bag => api.derive.bagsList.expand(bag))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function traverseLinks(api, head) {
    const subject = new BehaviorSubject(head);
    return subject.pipe(switchMap(account => (api.query.voterList || api.query.bagsList).listNodes(account)), tap(node => {
      nextTick(() => {
        node.isSome && node.value.next.isSome ? subject.next(node.unwrap().next.unwrap()) : subject.complete();
      });
    }), toArray$1(), // toArray since we want to startSubject to be completed
    map(all => all.map(o => o.unwrap())));
  }

  function listNodes(instanceId, api) {
    return memo(instanceId, bag => bag && bag.head.isSome ? traverseLinks(api, bag.head.unwrap()) : of([]));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var bagsList = /*#__PURE__*/Object.freeze({
    __proto__: null,
    _getIds: _getIds,
    all: all$1,
    get: get,
    expand: expand,
    getExpanded: getExpanded,
    listNodes: listNodes
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const VESTING_ID = '0x76657374696e6720';

  function calcLocked(api, bestNumber, locks) {
    let lockedBalance = api.registry.createType('Balance');
    let lockedBreakdown = [];
    let vestingLocked = api.registry.createType('Balance');
    let allLocked = false;

    if (Array.isArray(locks)) {
      // only get the locks that are valid until passed the current block
      lockedBreakdown = locks.filter(({
        until
      }) => !until || bestNumber && until.gt(bestNumber));
      allLocked = lockedBreakdown.some(({
        amount
      }) => amount && amount.isMax());
      vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({
        id
      }) => id.eq(VESTING_ID)).reduce((result, {
        amount
      }) => result.iadd(amount), new BN(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699

      const notAll = lockedBreakdown.filter(({
        amount
      }) => amount && !amount.isMax());

      if (notAll.length) {
        lockedBalance = api.registry.createType('Balance', bnMax(...notAll.map(({
          amount
        }) => amount)));
      }
    }

    return {
      allLocked,
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    };
  }

  function calcShared(api, bestNumber, data, locks) {
    const {
      allLocked,
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    } = calcLocked(api, bestNumber, locks);
    return { ...data,
      availableBalance: api.registry.createType('Balance', allLocked ? 0 : bnMax(new BN(0), data.freeBalance.sub(lockedBalance))),
      lockedBalance,
      lockedBreakdown,
      vestingLocked
    };
  }

  function calcVesting(bestNumber, shared, _vesting) {
    // Calculate the vesting balances,
    //  - offset = balance locked at startingBlock
    //  - perBlock is the unlock amount
    const vesting = _vesting || [];
    const isVesting = !shared.vestingLocked.isZero();
    const vestedBalances = vesting.map(({
      locked,
      perBlock,
      startingBlock
    }) => bestNumber.gt(startingBlock) ? bnMin(locked, perBlock.mul(bestNumber.sub(startingBlock))) : BN_ZERO);
    const vestedBalance = vestedBalances.reduce((all, value) => all.iadd(value), new BN(0));
    const vestingTotal = vesting.reduce((all, {
      locked
    }) => all.iadd(locked), new BN(0));
    return {
      isVesting,
      vestedBalance,
      vestedClaimable: isVesting ? shared.vestingLocked.sub(vestingTotal.sub(vestedBalance)) : BN_ZERO,
      vesting: vesting.map(({
        locked,
        perBlock,
        startingBlock
      }, index) => ({
        endBlock: locked.div(perBlock).iadd(startingBlock),
        locked,
        perBlock,
        startingBlock,
        vested: vestedBalances[index]
      })).filter(({
        locked
      }) => !locked.isZero()),
      vestingTotal
    };
  }

  function calcBalances$1(api, [data, [vesting, allLocks, namedReserves], bestNumber]) {
    const shared = calcShared(api, bestNumber, data, allLocks[0]);
    return { ...shared,
      ...calcVesting(bestNumber, shared, vesting),
      accountId: data.accountId,
      accountNonce: data.accountNonce,
      additional: allLocks.filter((_, index) => index !== 0).map((l, index) => calcShared(api, bestNumber, data.additional[index], l)),
      namedReserves
    };
  } // old


  function queryOld(api, accountId) {
    return combineLatest([api.query.balances.locks(accountId), api.query.balances.vesting(accountId)]).pipe(map(([locks, optVesting]) => {
      let vestingNew = null;

      if (optVesting.isSome) {
        const {
          offset: locked,
          perBlock,
          startingBlock
        } = optVesting.unwrap();
        vestingNew = api.registry.createType('VestingInfo', {
          locked,
          perBlock,
          startingBlock
        });
      }

      return [vestingNew ? [vestingNew] : null, [locks], []];
    }));
  }

  const isNonNullable = nullable => !!nullable;

  function createCalls(calls) {
    return [calls.map(c => !c), calls.filter(isNonNullable)];
  } // current (balances, vesting)


  function queryCurrent(api, accountId, balanceInstances = ['balances']) {
    var _api$query$vesting;

    const [lockEmpty, lockQueries] = createCalls(balanceInstances.map(m => {
      var _m, _api$query;

      return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customLocks) || ((_api$query = api.query[m]) === null || _api$query === void 0 ? void 0 : _api$query.locks);
    }));
    const [reserveEmpty, reserveQueries] = createCalls(balanceInstances.map(m => {
      var _api$query2;

      return (_api$query2 = api.query[m]) === null || _api$query2 === void 0 ? void 0 : _api$query2.reserves;
    }));
    return combineLatest([(_api$query$vesting = api.query.vesting) !== null && _api$query$vesting !== void 0 && _api$query$vesting.vesting ? api.query.vesting.vesting(accountId) : of(api.registry.createType('Option<VestingInfo>')), lockQueries.length ? combineLatest(lockQueries.map(c => c(accountId))) : of([]), reserveQueries.length ? combineLatest(reserveQueries.map(c => c(accountId))) : of([])]).pipe(map(([opt, locks, reserves]) => {
      let offsetLock = -1;
      let offsetReserve = -1;
      const vesting = opt.unwrapOr(null);
      return [vesting ? Array.isArray(vesting) ? vesting : [vesting] : null, lockEmpty.map(e => e ? api.registry.createType('Vec<BalanceLock>') : locks[++offsetLock]), reserveEmpty.map(e => e ? api.registry.createType('Vec<PalletBalancesReserveData>') : reserves[++offsetReserve])];
    }));
  }
  /**
   * @name all
   * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
   * @returns An object containing the results of various balance queries
   * @example
   * <BR>
   *
   * ```javascript
   * const ALICE = 'F7Hs';
   *
   * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
   *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
   * });
   * ```
   */


  function all(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
    return memo(instanceId, address => {
      var _api$query$system, _api$query$balances;

      return combineLatest([api.derive.balances.account(address), isFunction$2((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) || isFunction$2((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryCurrent(api, address, balanceInstances) : queryOld(api, address)]).pipe(switchMap(([account, locks]) => combineLatest([of(account), of(locks), api.derive.chain.bestNumber()])), map(result => calcBalances$1(api, result)));
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function zeroBalance(api) {
    return api.registry.createType('Balance');
  }

  function getBalance(api, [freeBalance, reservedBalance, frozenFee, frozenMisc]) {
    const votingBalance = api.registry.createType('Balance', freeBalance.toBn());
    return {
      freeBalance,
      frozenFee,
      frozenMisc,
      reservedBalance,
      votingBalance
    };
  }

  function calcBalances(api, [accountId, [accountNonce, [primary, ...additional]]]) {
    return {
      accountId,
      accountNonce,
      additional: additional.map(b => getBalance(api, b)),
      ...getBalance(api, primary)
    };
  } // old


  function queryBalancesFree(api, accountId) {
    return combineLatest([api.query.balances.freeBalance(accountId), api.query.balances.reservedBalance(accountId), api.query.system.accountNonce(accountId)]).pipe(map(([freeBalance, reservedBalance, accountNonce]) => [accountNonce, [[freeBalance, reservedBalance, zeroBalance(api), zeroBalance(api)]]]));
  }

  function queryNonceOnly(api, accountId) {
    const fill = nonce => [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];

    return isFunction$2(api.query.system.account) ? api.query.system.account(accountId).pipe(map(({
      nonce
    }) => fill(nonce))) : isFunction$2(api.query.system.accountNonce) ? api.query.system.accountNonce(accountId).pipe(map(nonce => fill(nonce))) : of(fill(api.registry.createType('Index')));
  }

  function queryBalancesAccount(api, accountId, modules = ['balances']) {
    const balances = modules.map(m => {
      var _m, _api$query$m;

      return ((_m = api.derive[m]) === null || _m === void 0 ? void 0 : _m.customAccount) || ((_api$query$m = api.query[m]) === null || _api$query$m === void 0 ? void 0 : _api$query$m.account);
    }).filter(q => isFunction$2(q));

    const extract = (nonce, data) => [nonce, data.map(({
      feeFrozen,
      free,
      miscFrozen,
      reserved
    }) => [free, reserved, feeFrozen, miscFrozen])]; // NOTE this is for the first case where we do have instances specified


    return balances.length ? isFunction$2(api.query.system.account) ? combineLatest([api.query.system.account(accountId), ...balances.map(c => c(accountId))]).pipe(map(([{
      nonce
    }, ...balances]) => extract(nonce, balances))) : combineLatest([api.query.system.accountNonce(accountId), ...balances.map(c => c(accountId))]).pipe(map(([nonce, ...balances]) => extract(nonce, balances))) : queryNonceOnly(api, accountId);
  }

  function querySystemAccount(api, accountId) {
    // AccountInfo is current, support old, eg. Edgeware
    return api.query.system.account(accountId).pipe(map(infoOrTuple => {
      const data = infoOrTuple.nonce ? infoOrTuple.data : infoOrTuple[1];
      const nonce = infoOrTuple.nonce || infoOrTuple[0];

      if (!data || data.isEmpty) {
        return [nonce, [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]];
      }

      const {
        feeFrozen,
        free,
        miscFrozen,
        reserved
      } = data;
      return [nonce, [[free, reserved, feeFrozen, miscFrozen]]];
    }));
  }
  /**
   * @name account
   * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.
   * @returns An object containing the results of various balance queries
   * @example
   * <BR>
   *
   * ```javascript
   * const ALICE = 'F7Hs';
   *
   * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {
   *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);
   * });
   * ```
   */


  function account$1(instanceId, api) {
    const balanceInstances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'balances');
    return memo(instanceId, address => api.derive.accounts.accountId(address).pipe(switchMap(accountId => {
      var _api$query$system, _api$query$balances, _api$query$balances2;

      return accountId ? combineLatest([of(accountId), balanceInstances ? queryBalancesAccount(api, accountId, balanceInstances) : isFunction$2((_api$query$system = api.query.system) === null || _api$query$system === void 0 ? void 0 : _api$query$system.account) ? querySystemAccount(api, accountId) : isFunction$2((_api$query$balances = api.query.balances) === null || _api$query$balances === void 0 ? void 0 : _api$query$balances.account) ? queryBalancesAccount(api, accountId) : isFunction$2((_api$query$balances2 = api.query.balances) === null || _api$query$balances2 === void 0 ? void 0 : _api$query$balances2.freeBalance) ? queryBalancesFree(api, accountId) : queryNonceOnly(api, accountId)]) : of([api.registry.createType('AccountId'), [api.registry.createType('Index'), [[zeroBalance(api), zeroBalance(api), zeroBalance(api), zeroBalance(api)]]]]);
    }), map(result => calcBalances(api, result))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function votingBalances(instanceId, api) {
    return memo(instanceId, addresses => !addresses || !addresses.length ? of([]) : combineLatest(addresses.map(accountId => api.derive.balances.account(accountId))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const votingBalance = all;

  var balances = /*#__PURE__*/Object.freeze({
    __proto__: null,
    all: all,
    votingBalance: votingBalance,
    account: account$1,
    votingBalances: votingBalances
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function filterBountiesProposals(api, allProposals) {
    const bountyTxBase = api.tx.bounties ? api.tx.bounties : api.tx.treasury;
    const bountyProposalCalls = [bountyTxBase.approveBounty, bountyTxBase.closeBounty, bountyTxBase.proposeCurator, bountyTxBase.unassignCurator];
    return allProposals.filter(proposal => bountyProposalCalls.find(bountyCall => proposal.proposal && bountyCall.is(proposal.proposal)));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function parseResult$2([maybeBounties, maybeDescriptions, ids, bountyProposals]) {
    const bounties = [];
    maybeBounties.forEach((bounty, index) => {
      if (bounty.isSome) {
        bounties.push({
          bounty: bounty.unwrap(),
          description: maybeDescriptions[index].unwrapOrDefault().toUtf8(),
          index: ids[index],
          proposals: bountyProposals.filter(bountyProposal => bountyProposal.proposal && ids[index].eq(bountyProposal.proposal.args[0]))
        });
      }
    });
    return bounties;
  }

  function bounties$1(instanceId, api) {
    const bountyBase = api.query.bounties || api.query.treasury;
    return memo(instanceId, () => bountyBase.bounties ? combineLatest([bountyBase.bountyCount(), api.query.council ? api.query.council.proposalCount() : of(0)]).pipe(switchMap(() => combineLatest([bountyBase.bounties.keys(), api.derive.council ? api.derive.council.proposals() : of([])])), switchMap(([keys, proposals]) => {
      const ids = keys.map(({
        args: [id]
      }) => id);
      return combineLatest([bountyBase.bounties.multi(ids), bountyBase.bountyDescriptions.multi(ids), of(ids), of(filterBountiesProposals(api, proposals))]);
    }), map(parseResult$2)) : of(parseResult$2([[], [], [], []])));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var bounties = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bounties: bounties$1
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  // we would emit code with ../<somewhere>/src embedded in the *.d.ts files

  function unwrapBlockNumber(fn) {
    return (instanceId, api) => memo(instanceId, () => fn(api).pipe(map(r => r.number.unwrap())));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name bestNumber
   * @returns The latest block number.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumber((blockNumber) => {
   *   console.log(`the current best block is #${blockNumber}`);
   * });
   * ```
   */

  const bestNumber = unwrapBlockNumber(api => api.derive.chain.subscribeNewHeads());

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name bestNumberFinalized
   * @returns A BlockNumber
   * @description Get the latest finalized block number.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumberFinalized((blockNumber) => {
   *   console.log(`the current finalized block is #${blockNumber}`);
   * });
   * ```
   */

  const bestNumberFinalized = unwrapBlockNumber(api => api.rpc.chain.subscribeFinalizedHeads());

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name bestNumberLag
   * @returns A number of blocks
   * @description Calculates the lag between finalized head and best head
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.bestNumberLag((lag) => {
   *   console.log(`finalized is ${lag} blocks behind head`);
   * });
   * ```
   */

  function bestNumberLag(instanceId, api) {
    return memo(instanceId, () => combineLatest([api.derive.chain.bestNumber(), api.derive.chain.bestNumberFinalized()]).pipe(map(([bestNumber, bestNumberFinalized]) => api.registry.createType('BlockNumber', bestNumber.sub(bestNumberFinalized)))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function extractAuthor(digest, sessionValidators = []) {
    const [citem] = digest.logs.filter(e => e.isConsensus);
    const [pitem] = digest.logs.filter(e => e.isPreRuntime);
    const [sitem] = digest.logs.filter(e => e.isSeal);
    let accountId;

    try {
      // This is critical to be first for BABE (before Consensus)
      // If not first, we end up dropping the author at session-end
      if (pitem) {
        const [engine, data] = pitem.asPreRuntime;
        accountId = engine.extractAuthor(data, sessionValidators);
      }

      if (!accountId && citem) {
        const [engine, data] = citem.asConsensus;
        accountId = engine.extractAuthor(data, sessionValidators);
      } // SEAL, still used in e.g. Kulupu for pow


      if (!accountId && sitem) {
        const [engine, data] = sitem.asSeal;
        accountId = engine.extractAuthor(data, sessionValidators);
      }
    } catch {// ignore
    }

    return accountId;
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function createHeaderExtended(registry, header, validators) {
    // an instance of the base extrinsic for us to extend
    const HeaderBase = registry.createClass('Header');

    class Implementation extends HeaderBase {
      #author;
      #validators;

      constructor(registry, header, validators) {
        super(registry, header);
        this.#author = extractAuthor(this.digest, validators);
        this.#validators = validators;
        this.createdAtHash = header === null || header === void 0 ? void 0 : header.createdAtHash;
      }
      /**
       * @description Convenience method, returns the author for the block
       */


      get author() {
        return this.#author;
      }
      /**
       * @description Convenience method, returns the validators for the block
       */


      get validators() {
        return this.#validators;
      }

    }

    return new Implementation(registry, header, validators);
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function mapExtrinsics(extrinsics, records) {
    return extrinsics.map((extrinsic, index) => {
      let dispatchError;
      let dispatchInfo;
      const events = records.filter(({
        phase
      }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index)).map(({
        event
      }) => {
        if (event.section === 'system') {
          if (event.method === 'ExtrinsicSuccess') {
            dispatchInfo = event.data[0];
          } else if (event.method === 'ExtrinsicFailed') {
            dispatchError = event.data[0];
            dispatchInfo = event.data[1];
          }
        }

        return event;
      });
      return {
        dispatchError,
        dispatchInfo,
        events,
        extrinsic
      };
    });
  }

  function createSignedBlockExtended(registry, block, events, validators) {
    // an instance of the base extrinsic for us to extend
    const SignedBlockBase = registry.createClass('SignedBlock');

    class Implementation extends SignedBlockBase {
      #author;
      #events;
      #extrinsics;

      constructor(registry, block, events, validators) {
        super(registry, block);
        this.#author = extractAuthor(this.block.header.digest, validators);
        this.#events = events || [];
        this.#extrinsics = mapExtrinsics(this.block.extrinsics, this.#events);
        this.createdAtHash = block === null || block === void 0 ? void 0 : block.createdAtHash;
      }
      /**
       * @description Convenience method, returns the author for the block
       */


      get author() {
        return this.#author;
      }
      /**
       * @description Convenience method, returns the events associated with the block
       */


      get events() {
        return this.#events;
      }
      /**
       * @description Returns the extrinsics and their events, mapped
       */


      get extrinsics() {
        return this.#extrinsics;
      }

    }

    return new Implementation(registry, block, events, validators);
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name getHeader
   * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
   * @returns An array containing the block header and the block author
   * @description Get a specific block header and extend it with the author
   * @example
   * <BR>
   *
   * ```javascript
   * const { author, number } = await api.derive.chain.getHeader('0x123...456');
   *
   * console.log(`block #${number} was authored by ${author}`);
   * ```
   */

  function getHeader(instanceId, api) {
    return memo(instanceId, blockHash => combineLatest([api.rpc.chain.getHeader(blockHash), api.queryAt(blockHash).pipe(switchMap(queryAt => queryAt.session ? queryAt.session.validators() : of([])))]).pipe(map(([header, validators]) => createHeaderExtended(header.registry, header, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
    // we supplied an invalid hash. (Due to defaults, storeage will have an
    // empty value, so only the RPC is affected). So return undefined
    of())));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name getBlock
   * @param {( Uint8Array | string )} hash - A block hash as U8 array or string.
   * @description Get a specific block (e.g. rpc.chain.getBlock) and extend it with the author
   * @example
   * <BR>
   *
   * ```javascript
   * const { author, block } = await api.derive.chain.getBlock('0x123...456');
   *
   * console.log(`block #${block.header.number} was authored by ${author}`);
   * ```
   */

  function getBlock$2(instanceId, api) {
    return memo(instanceId, blockHash => combineLatest([api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe(switchMap(queryAt => combineLatest([queryAt.system.events(), queryAt.session ? queryAt.session.validators() : of([])])))]).pipe(map(([signedBlock, [events, validators]]) => createSignedBlockExtended(api.registry, signedBlock, events, validators)), catchError(() => // where rpc.chain.getHeader throws, we will land here - it can happen that
    // we supplied an invalid hash. (Due to defaults, storage will have an
    // empty value, so only the RPC is affected). So return undefined
    of())));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function getBlockByNumber(instanceId, api) {
    return memo(instanceId, blockNumber => api.rpc.chain.getBlockHash(blockNumber).pipe(switchMap(h => api.derive.chain.getBlock(h))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name subscribeNewBlocks
   * @returns The latest block & events for that block
   */

  function subscribeNewBlocks(instanceId, api) {
    return memo(instanceId, () => api.derive.chain.subscribeNewHeads().pipe(switchMap(header => {
      const blockHash = header.createdAtHash || header.hash; // we get the block first, setting up the registry

      return combineLatest([of(header), api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe(switchMap(queryAt => queryAt.system.events()))]);
    }), map(([header, block, events]) => createSignedBlockExtended(block.registry, block, events, header.validators))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @name subscribeNewHeads
   * @returns A header with the current header (including extracted author)
   * @description An observable of the current block header and it's author
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.chain.subscribeNewHeads((header) => {
   *   console.log(`block #${header.number} was authored by ${header.author}`);
   * });
   * ```
   */

  function subscribeNewHeads(instanceId, api) {
    return memo(instanceId, () => combineLatest([api.rpc.chain.subscribeNewHeads(), api.query.session ? api.query.session.validators() : of(undefined)]).pipe(map(([header, validators]) => {
      header.createdAtHash = header.hash;
      return createHeaderExtended(header.registry, header, validators);
    })));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var chain = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bestNumber: bestNumber,
    bestNumberFinalized: bestNumberFinalized,
    bestNumberLag: bestNumberLag,
    getHeader: getHeader,
    getBlock: getBlock$2,
    getBlockByNumber: getBlockByNumber,
    subscribeNewBlocks: subscribeNewBlocks,
    subscribeNewHeads: subscribeNewHeads
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  // query via constants (current applicable path)
  function queryConstants(api) {
    return of([// deprecated
    api.consts.contracts.callBaseFee || api.registry.createType('Balance'), api.consts.contracts.contractFee || api.registry.createType('Balance'), api.consts.contracts.creationFee || api.registry.createType('Balance'), api.consts.contracts.transactionBaseFee || api.registry.createType('Balance'), api.consts.contracts.transactionByteFee || api.registry.createType('Balance'), api.consts.contracts.transferFee || api.registry.createType('Balance'), // current
    api.consts.contracts.rentByteFee, api.consts.contracts.rentDepositOffset, api.consts.contracts.surchargeReward, api.consts.contracts.tombstoneDeposit]);
  }
  /**
   * @name fees
   * @returns An object containing the combined results of the queries for
   * all relevant contract fees as declared in the substrate chain spec.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.contracts.fees(([creationFee, transferFee]) => {
   *   console.log(`The fee for creating a new contract on this chain is ${creationFee} units. The fee required to call this contract is ${transferFee} units.`);
   * });
   * ```
   */


  function fees(instanceId, api) {
    return memo(instanceId, () => {
      return queryConstants(api).pipe(map(([callBaseFee, contractFee, creationFee, transactionBaseFee, transactionByteFee, transferFee, rentByteFee, rentDepositOffset, surchargeReward, tombstoneDeposit]) => ({
        callBaseFee,
        contractFee,
        creationFee,
        rentByteFee,
        rentDepositOffset,
        surchargeReward,
        tombstoneDeposit,
        transactionBaseFee,
        transactionByteFee,
        transferFee
      })));
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var contracts = /*#__PURE__*/Object.freeze({
    __proto__: null,
    fees: fees
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function getInstance(api, section) {
    const instances = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), section);
    const name = instances && instances.length ? instances[0] : section;
    return api.query[name];
  }
  function withSection(section, fn) {
    return (instanceId, api) => memo(instanceId, fn(getInstance(api, section), api, instanceId));
  }
  function callMethod(method, empty) {
    return section => withSection(section, query => () => isFunction$2(query === null || query === void 0 ? void 0 : query[method]) ? query[method]() : of(empty));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  const members$4 = callMethod('members', []);

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function prime$3(section) {
    return withSection(section, query => () => isFunction$2(query === null || query === void 0 ? void 0 : query.prime) ? query.prime().pipe(map(o => o.unwrapOr(null))) : of(null));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function parse$4(api, [hashes, proposals, votes]) {
    return proposals.map((o, index) => ({
      hash: api.registry.createType('Hash', hashes[index]),
      proposal: o && o.isSome ? o.unwrap() : null,
      votes: votes[index].unwrapOr(null)
    }));
  }

  function _proposalsFrom(api, query, hashes) {
    return (isFunction$2(query === null || query === void 0 ? void 0 : query.proposals) && hashes.length ? combineLatest([of(hashes), // this should simply be api.query[section].proposalOf.multi<Option<Proposal>>(hashes),
    // however we have had cases on Edgeware where the indices have moved around after an
    // upgrade, which results in invalid on-chain data
    query.proposalOf.multi(hashes).pipe(catchError(() => of(hashes.map(() => null)))), query.voting.multi(hashes)]) : of([[], [], []])).pipe(map(r => parse$4(api, r)));
  }

  function hasProposals$3(section) {
    return withSection(section, query => () => of(isFunction$2(query === null || query === void 0 ? void 0 : query.proposals)));
  }
  function proposals$5(section) {
    return withSection(section, (query, api) => () => api.derive[section].proposalHashes().pipe(switchMap(all => _proposalsFrom(api, query, all))));
  }
  function proposal$3(section) {
    return withSection(section, (query, api) => hash => isFunction$2(query === null || query === void 0 ? void 0 : query.proposals) ? firstObservable(_proposalsFrom(api, query, [hash])) : of(null));
  }
  const proposalCount$3 = callMethod('proposalCount', null);
  const proposalHashes$3 = callMethod('proposals', []);

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function isVoter(value) {
    return !Array.isArray(value);
  }

  function retrieveStakeOf(elections) {
    return elections.stakeOf.entries().pipe(map(entries => entries.map(([{
      args: [accountId]
    }, stake]) => [accountId, stake])));
  }

  function retrieveVoteOf(elections) {
    return elections.votesOf.entries().pipe(map(entries => entries.map(([{
      args: [accountId]
    }, votes]) => [accountId, votes])));
  }

  function retrievePrev(api, elections) {
    return combineLatest([retrieveStakeOf(elections), retrieveVoteOf(elections)]).pipe(map(([stakes, votes]) => {
      const result = [];
      votes.forEach(([voter, votes]) => {
        result.push([voter, {
          stake: api.registry.createType('Balance'),
          votes
        }]);
      });
      stakes.forEach(([staker, stake]) => {
        const entry = result.find(([voter]) => voter.eq(staker));

        if (entry) {
          entry[1].stake = stake;
        } else {
          result.push([staker, {
            stake,
            votes: []
          }]);
        }
      });
      return result;
    }));
  }

  function retrieveCurrent(elections) {
    return elections.voting.entries().pipe(map(entries => entries.map(([{
      args: [accountId]
    }, value]) => [accountId, isVoter(value) ? {
      stake: value.stake,
      votes: value.votes
    } : {
      stake: value[0],
      votes: value[1]
    }])));
  }

  function votes(instanceId, api) {
    const elections = api.query.phragmenElection || api.query.electionsPhragmen || api.query.elections;
    return memo(instanceId, () => elections ? elections.stakeOf ? retrievePrev(api, elections) : retrieveCurrent(elections) : of([]));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function votesOf(instanceId, api) {
    return memo(instanceId, accountId => api.derive.council.votes().pipe(map(votes => (votes.find(([from]) => from.eq(accountId)) || [null, {
      stake: api.registry.createType('Balance'),
      votes: []
    }])[1])));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const members$3 = members$4('council');
  const hasProposals$2 = hasProposals$3('council');
  const proposal$2 = proposal$3('council');
  const proposalCount$2 = proposalCount$3('council');
  const proposalHashes$2 = proposalHashes$3('council');
  const proposals$4 = proposals$5('council');
  const prime$2 = prime$3('council');

  var council = /*#__PURE__*/Object.freeze({
    __proto__: null,
    members: members$3,
    hasProposals: hasProposals$2,
    proposal: proposal$2,
    proposalCount: proposalCount$2,
    proposalHashes: proposalHashes$2,
    proposals: proposals$4,
    prime: prime$2,
    votes: votes,
    votesOf: votesOf
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function createChildKey(info) {
    return u8aToHex(u8aConcat(':child_storage:default:', blake2AsU8a(u8aConcat('crowdloan', (info.fundIndex || info.trieIndex).toU8a()))));
  }

  function childKey(instanceId, api) {
    return memo(instanceId, paraId => api.query.crowdloan.funds(paraId).pipe(map(optInfo => optInfo.isSome ? createChildKey(optInfo.unwrap()) : null)));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function extractContributed(paraId, events) {
    var _events$createdAtHash;

    const added = [];
    const removed = [];
    return events.filter(({
      event: {
        data: [, eventParaId],
        method,
        section
      }
    }) => section === 'crowdloan' && ['Contributed', 'Withdrew'].includes(method) && eventParaId.eq(paraId)).reduce((result, {
      event: {
        data: [accountId],
        method
      }
    }) => {
      if (method === 'Contributed') {
        result.added.push(accountId.toHex());
      } else {
        result.removed.push(accountId.toHex());
      }

      return result;
    }, {
      added,
      blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
      removed
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const PAGE_SIZE_K$1 = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)

  function _getUpdates(api, paraId) {
    let added = [];
    let removed = [];
    return api.query.system.events().pipe(switchMap(events => {
      const changes = extractContributed(paraId, events);

      if (changes.added.length || changes.removed.length) {
        var _events$createdAtHash;

        added = added.concat(...changes.added);
        removed = removed.concat(...changes.removed);
        return of({
          added,
          addedDelta: changes.added,
          blockHash: ((_events$createdAtHash = events.createdAtHash) === null || _events$createdAtHash === void 0 ? void 0 : _events$createdAtHash.toHex()) || '-',
          removed,
          removedDelta: changes.removed
        });
      }

      return EMPTY;
    }), startWith({
      added,
      addedDelta: [],
      blockHash: '-',
      removed,
      removedDelta: []
    }));
  }

  function _eventTriggerAll(api, paraId) {
    return api.query.system.events().pipe(switchMap(events => {
      var _events$createdAtHash2;

      const items = events.filter(({
        event: {
          data: [eventParaId],
          method,
          section
        }
      }) => section === 'crowdloan' && ['AllRefunded', 'Dissolved', 'PartiallyRefunded'].includes(method) && eventParaId.eq(paraId));
      return items.length ? of(((_events$createdAtHash2 = events.createdAtHash) === null || _events$createdAtHash2 === void 0 ? void 0 : _events$createdAtHash2.toHex()) || '-') : EMPTY;
    }), startWith('-'));
  }

  function _getKeysPaged(api, childKey) {
    const subject = new BehaviorSubject(undefined);
    return subject.pipe(switchMap(startKey => api.rpc.childstate.getKeysPaged(childKey, '0x', PAGE_SIZE_K$1, startKey)), tap(keys => {
      nextTick(() => {
        keys.length === PAGE_SIZE_K$1 ? subject.next(keys[PAGE_SIZE_K$1 - 1].toHex()) : subject.complete();
      });
    }), toArray$1(), // toArray since we want to startSubject to be completed
    map(keyArr => arrayFlatten(keyArr)));
  }

  function _getAll(api, paraId, childKey) {
    return _eventTriggerAll(api, paraId).pipe(switchMap(() => isFunction$2(api.rpc.childstate.getKeysPaged) ? _getKeysPaged(api, childKey) : api.rpc.childstate.getKeys(childKey, '0x')), map(keys => keys.map(k => k.toHex())));
  }

  function _contributions$1(api, paraId, childKey) {
    return combineLatest([_getAll(api, paraId, childKey), _getUpdates(api, paraId)]).pipe(map(([keys, {
      added,
      blockHash,
      removed
    }]) => {
      const contributorsMap = {};
      keys.forEach(k => {
        contributorsMap[k] = true;
      });
      added.forEach(k => {
        contributorsMap[k] = true;
      });
      removed.forEach(k => {
        delete contributorsMap[k];
      });
      return {
        blockHash,
        contributorsHex: Object.keys(contributorsMap)
      };
    }));
  }

  function contributions(instanceId, api) {
    return memo(instanceId, paraId => api.derive.crowdloan.childKey(paraId).pipe(switchMap(childKey => childKey ? _contributions$1(api, paraId, childKey) : of({
      blockHash: '-',
      contributorsHex: []
    }))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function _getValues(api, childKey, keys) {
    // We actually would love to use multi-keys https://github.com/paritytech/substrate/issues/9203
    return combineLatest(keys.map(k => api.rpc.childstate.getStorage(childKey, k))).pipe(map(values => values.map(v => api.registry.createType('Option<StorageData>', v)).map(o => o.isSome ? api.registry.createType('Balance', o.unwrap()) : api.registry.createType('Balance')).reduce((all, b, index) => ({ ...all,
      [keys[index]]: b
    }), {})));
  }

  function _watchOwnChanges(api, paraId, childkey, keys) {
    return api.query.system.events().pipe(switchMap(events => {
      const changes = extractContributed(paraId, events);
      const filtered = keys.filter(k => changes.added.includes(k) || changes.removed.includes(k));
      return filtered.length ? _getValues(api, childkey, filtered) : EMPTY;
    }), startWith({}));
  }

  function _contributions(api, paraId, childKey, keys) {
    return combineLatest([_getValues(api, childKey, keys), _watchOwnChanges(api, paraId, childKey, keys)]).pipe(map(([all, latest]) => ({ ...all,
      ...latest
    })));
  }

  function ownContributions(instanceId, api) {
    return memo(instanceId, (paraId, keys) => api.derive.crowdloan.childKey(paraId).pipe(switchMap(childKey => childKey && keys.length ? _contributions(api, paraId, childKey, keys) : of({}))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var crowdloan = /*#__PURE__*/Object.freeze({
    __proto__: null,
    childKey: childKey,
    contributions: contributions,
    ownContributions: ownContributions
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const DEMOCRACY_ID = stringToHex('democrac');

  function isMaybeHashed(call) {
    // check for enum
    return call instanceof Enum;
  }

  function queryQueue(api) {
    return api.query.democracy.dispatchQueue().pipe(switchMap(dispatches => combineLatest([of(dispatches), api.derive.democracy.preimages(dispatches.map(([, hash]) => hash))])), map(([dispatches, images]) => dispatches.map(([at, imageHash, index], dispatchIndex) => ({
      at,
      image: images[dispatchIndex],
      imageHash,
      index
    }))));
  }

  function schedulerEntries(api) {
    // We don't get entries, but rather we get the keys (triggered via finished referendums) and
    // the subscribe to those keys - this means we pickup when the schedulers actually executes
    // at a block, the entry for that block will become empty
    return api.derive.democracy.referendumsFinished().pipe(switchMap(() => api.query.scheduler.agenda.keys()), switchMap(keys => {
      const blockNumbers = keys.map(({
        args: [blockNumber]
      }) => blockNumber);
      return blockNumbers.length ? combineLatest([of(blockNumbers), // this should simply be api.query.scheduler.agenda.multi,
      // however we have had cases on Darwinia where the indices have moved around after an
      // upgrade, which results in invalid on-chain data
      api.query.scheduler.agenda.multi(blockNumbers).pipe(catchError(() => of(blockNumbers.map(() => []))))]) : of([[], []]);
    }));
  }

  function queryScheduler(api) {
    return schedulerEntries(api).pipe(switchMap(([blockNumbers, agendas]) => {
      const result = [];
      blockNumbers.forEach((at, index) => {
        (agendas[index] || []).filter(o => o.isSome).forEach(o => {
          const scheduled = o.unwrap();

          if (scheduled.maybeId.isSome) {
            const id = scheduled.maybeId.unwrap().toHex();

            if (id.startsWith(DEMOCRACY_ID)) {
              const imageHash = isMaybeHashed(scheduled.call) ? scheduled.call.isHash ? scheduled.call.asHash : scheduled.call.asValue.args[0] : scheduled.call.args[0];
              result.push({
                at,
                imageHash,
                index: api.registry.createType('(u64, ReferendumIndex)', id)[1]
              });
            }
          }
        });
      });
      return combineLatest([of(result), result.length ? api.derive.democracy.preimages(result.map(({
        imageHash
      }) => imageHash)) : of([])]);
    }), map(([infos, images]) => infos.map((info, index) => ({ ...info,
      image: images[index]
    }))));
  }

  function dispatchQueue(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$scheduler;

      return isFunction$2((_api$query$scheduler = api.query.scheduler) === null || _api$query$scheduler === void 0 ? void 0 : _api$query$scheduler.agenda) ? queryScheduler(api) : api.query.democracy.dispatchQueue ? queryQueue(api) : of([]);
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const LOCKUPS = [0, 1, 2, 4, 8, 16, 32];

  function parseEnd(api, vote, {
    approved,
    end
  }) {
    return [end, approved.isTrue && vote.isAye || approved.isFalse && vote.isNay ? end.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[vote.conviction.index])) : BN_ZERO];
  }

  function parseLock(api, [referendumId, accountVote], referendum) {
    const {
      balance,
      vote
    } = accountVote.asStandard;
    const [referendumEnd, unlockAt] = referendum.isFinished ? parseEnd(api, vote, referendum.asFinished) : [BN_ZERO, BN_ZERO];
    return {
      balance,
      isDelegated: false,
      isFinished: referendum.isFinished,
      referendumEnd,
      referendumId,
      unlockAt,
      vote
    };
  }

  function delegateLocks(api, {
    balance,
    conviction,
    target
  }) {
    return api.derive.democracy.locks(target).pipe(map(available => available.map(({
      isFinished,
      referendumEnd,
      referendumId,
      unlockAt,
      vote
    }) => ({
      balance,
      isDelegated: true,
      isFinished,
      referendumEnd,
      referendumId,
      unlockAt: unlockAt.isZero() ? unlockAt : referendumEnd.add((api.consts.democracy.voteLockingPeriod || api.consts.democracy.enactmentPeriod).muln(LOCKUPS[conviction.index])),
      vote: api.registry.createType('Vote', {
        aye: vote.isAye,
        conviction
      })
    }))));
  }

  function directLocks(api, {
    votes
  }) {
    if (!votes.length) {
      return of([]);
    }

    return api.query.democracy.referendumInfoOf.multi(votes.map(([referendumId]) => referendumId)).pipe(map(referendums => votes.map((vote, index) => [vote, referendums[index].unwrapOr(null)]).filter(item => !!item[1] && isUndefined$1(item[1].end) && item[0][1].isStandard).map(([directVote, referendum]) => parseLock(api, directVote, referendum))));
  }

  function locks(instanceId, api) {
    return memo(instanceId, accountId => api.query.democracy.votingOf ? api.query.democracy.votingOf(accountId).pipe(switchMap(voting => voting.isDirect ? directLocks(api, voting.asDirect) : voting.isDelegating ? delegateLocks(api, voting.asDelegating) : of([]))) : of([]));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function withImage(api, nextOpt) {
    if (nextOpt.isNone) {
      return of(null);
    }

    const [imageHash, threshold] = nextOpt.unwrap();
    return api.derive.democracy.preimage(imageHash).pipe(map(image => ({
      image,
      imageHash,
      threshold
    })));
  }

  function nextExternal(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$democracy;

      return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.nextExternal ? api.query.democracy.nextExternal().pipe(switchMap(nextOpt => withImage(api, nextOpt))) : of(null);
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function isDemocracyPreimage(api, imageOpt) {
    return !!imageOpt && !api.query.democracy.dispatchQueue;
  }

  function constructProposal(api, [bytes, proposer, balance, at]) {
    let proposal;

    try {
      proposal = api.registry.createType('Proposal', bytes.toU8a(true));
    } catch (error) {
      console.error(error);
    }

    return {
      at,
      balance,
      proposal,
      proposer
    };
  }

  function parseDemocracy(api, imageOpt) {
    if (imageOpt.isNone) {
      return;
    }

    if (isDemocracyPreimage(api, imageOpt)) {
      const status = imageOpt.unwrap();

      if (status.isMissing) {
        return;
      }

      const {
        data,
        deposit,
        provider,
        since
      } = status.asAvailable;
      return constructProposal(api, [data, provider, deposit, since]);
    }

    return constructProposal(api, imageOpt.unwrap());
  }

  function getDemocracyImages(api, hashes) {
    return api.query.democracy.preimages.multi(hashes).pipe(map(images => images.map(imageOpt => parseDemocracy(api, imageOpt))));
  }

  function preimages(instanceId, api) {
    return memo(instanceId, hashes => hashes.length ? isFunction$2(api.query.democracy.preimages) ? getDemocracyImages(api, hashes) : of([]) : of([]));
  }
  const preimage = firstMemo((api, hash) => api.derive.democracy.preimages([hash]));

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function isNewDepositors(depositors) {
    // Detect balance...
    // eslint-disable-next-line @typescript-eslint/unbound-method
    return isFunction$2(depositors[1].mul);
  }

  function parse$3([proposals, images, optDepositors]) {
    return proposals.filter(([,, proposer], index) => {
      var _optDepositors$index;

      return !!((_optDepositors$index = optDepositors[index]) !== null && _optDepositors$index !== void 0 && _optDepositors$index.isSome) && !proposer.isEmpty;
    }).map(([index, imageHash, proposer], proposalIndex) => {
      const depositors = optDepositors[proposalIndex].unwrap();
      return { ...(isNewDepositors(depositors) ? {
          balance: depositors[1],
          seconds: depositors[0]
        } : {
          balance: depositors[0],
          seconds: depositors[1]
        }),
        image: images[proposalIndex],
        imageHash,
        index,
        proposer
      };
    });
  }

  function proposals$3(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$democracy, _api$query$democracy2;

      return isFunction$2((_api$query$democracy = api.query.democracy) === null || _api$query$democracy === void 0 ? void 0 : _api$query$democracy.publicProps) && isFunction$2((_api$query$democracy2 = api.query.democracy) === null || _api$query$democracy2 === void 0 ? void 0 : _api$query$democracy2.preimages) ? api.query.democracy.publicProps().pipe(switchMap(proposals => proposals.length ? combineLatest([of(proposals), api.derive.democracy.preimages(proposals.map(([, hash]) => hash)), api.query.democracy.depositOf.multi(proposals.map(([index]) => index))]) : of([[], [], []])), map(parse$3)) : of([]);
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function referendumIds(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$democracy;

      return (_api$query$democracy = api.query.democracy) !== null && _api$query$democracy !== void 0 && _api$query$democracy.lowestUnbaked ? api.queryMulti([api.query.democracy.lowestUnbaked, api.query.democracy.referendumCount]).pipe(map(([first, total]) => total.gt(first) // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      ? [...Array(total.sub(first).toNumber())].map((_, i) => first.addn(i)) : [])) : of([]);
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function referendums(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumsActive().pipe(switchMap(referendums => referendums.length ? combineLatest([of(referendums), api.derive.democracy._referendumsVotes(referendums)]) : of([[], []])), map(([referendums, votes]) => referendums.map((referendum, index) => ({ ...referendum,
      ...votes[index]
    })))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function referendumsActive(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => ids.length ? api.derive.democracy.referendumsInfo(ids) : of([]))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function referendumsFinished(instanceId, api) {
    return memo(instanceId, () => api.derive.democracy.referendumIds().pipe(switchMap(ids => api.query.democracy.referendumInfoOf.multi(ids)), map(infos => infos.map(o => o.unwrapOr(null)).filter(info => !!info && info.isFinished).map(info => info.asFinished))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function isOldInfo(info) {
    return !!info.proposalHash;
  }

  function isCurrentStatus(status) {
    return !!status.tally;
  }

  function compareRationals(n1, d1, n2, d2) {
    while (true) {
      const q1 = n1.div(d1);
      const q2 = n2.div(d2);

      if (q1.lt(q2)) {
        return true;
      } else if (q2.lt(q1)) {
        return false;
      }

      const r1 = n1.mod(d1);
      const r2 = n2.mod(d2);

      if (r2.isZero()) {
        return false;
      } else if (r1.isZero()) {
        return true;
      }

      n1 = d2;
      n2 = d1;
      d1 = r2;
      d2 = r1;
    }
  }

  function calcPassingOther(threshold, sqrtElectorate, {
    votedAye,
    votedNay,
    votedTotal
  }) {
    const sqrtVoters = bnSqrt(votedTotal);
    return sqrtVoters.isZero() ? false : threshold.isSuperMajorityApprove ? compareRationals(votedNay, sqrtVoters, votedAye, sqrtElectorate) : compareRationals(votedNay, sqrtElectorate, votedAye, sqrtVoters);
  }

  function calcPassing(threshold, sqrtElectorate, state) {
    return threshold.isSimpleMajority ? state.votedAye.gt(state.votedNay) : calcPassingOther(threshold, sqrtElectorate, state);
  }

  function calcVotesPrev(votesFor) {
    return votesFor.reduce((state, derived) => {
      const {
        balance,
        vote
      } = derived;
      const isDefault = vote.conviction.index === 0;
      const counted = balance.muln(isDefault ? 1 : vote.conviction.index).divn(isDefault ? 10 : 1);

      if (vote.isAye) {
        state.allAye.push(derived);
        state.voteCountAye++;
        state.votedAye.iadd(counted);
      } else {
        state.allNay.push(derived);
        state.voteCountNay++;
        state.votedNay.iadd(counted);
      }

      state.voteCount++;
      state.votedTotal.iadd(counted);
      return state;
    }, {
      allAye: [],
      allNay: [],
      voteCount: 0,
      voteCountAye: 0,
      voteCountNay: 0,
      votedAye: new BN(0),
      votedNay: new BN(0),
      votedTotal: new BN(0)
    });
  }

  function calcVotesCurrent(tally, votes) {
    const allAye = [];
    const allNay = [];
    votes.forEach(derived => {
      if (derived.vote.isAye) {
        allAye.push(derived);
      } else {
        allNay.push(derived);
      }
    });
    return {
      allAye,
      allNay,
      voteCount: allAye.length + allNay.length,
      voteCountAye: allAye.length,
      voteCountNay: allNay.length,
      votedAye: tally.ayes,
      votedNay: tally.nays,
      votedTotal: tally.turnout
    };
  }

  function calcVotes(sqrtElectorate, referendum, votes) {
    const state = isCurrentStatus(referendum.status) ? calcVotesCurrent(referendum.status.tally, votes) : calcVotesPrev(votes);
    return { ...state,
      isPassing: calcPassing(referendum.status.threshold, sqrtElectorate, state),
      votes
    };
  }
  function getStatus(info) {
    if (info.isNone) {
      return null;
    }

    const unwrapped = info.unwrap();
    return isOldInfo(unwrapped) ? unwrapped : unwrapped.isOngoing ? unwrapped.asOngoing // done, we don't include it here... only currently active
    : null;
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function votesPrev(api, referendumId) {
    return api.query.democracy.votersFor(referendumId).pipe(switchMap(votersFor => combineLatest([of(votersFor), votersFor.length ? api.query.democracy.voteOf.multi(votersFor.map(accountId => [referendumId, accountId])) : of([]), api.derive.balances.votingBalances(votersFor)])), map(([votersFor, votes, balances]) => votersFor.map((accountId, index) => ({
      accountId,
      balance: balances[index].votingBalance || api.registry.createType('Balance'),
      isDelegating: false,
      vote: votes[index] || api.registry.createType('Vote')
    }))));
  }

  function extractVotes(mapped, referendumId) {
    return mapped.filter(([, voting]) => voting.isDirect).map(([accountId, voting]) => [accountId, voting.asDirect.votes.filter(([idx]) => idx.eq(referendumId))]).filter(([, directVotes]) => !!directVotes.length).reduce((result, [accountId, votes]) => // FIXME We are ignoring split votes
    votes.reduce((result, [, vote]) => {
      if (vote.isStandard) {
        result.push({
          accountId,
          isDelegating: false,
          ...vote.asStandard
        });
      }

      return result;
    }, result), []);
  }

  function votesCurr(api, referendumId) {
    return api.query.democracy.votingOf.entries().pipe(map(allVoting => {
      const mapped = allVoting.map(([{
        args: [accountId]
      }, voting]) => [accountId, voting]);
      const votes = extractVotes(mapped, referendumId);
      const delegations = mapped.filter(([, voting]) => voting.isDelegating).map(([accountId, voting]) => [accountId, voting.asDelegating]); // add delegations

      delegations.forEach(([accountId, {
        balance,
        conviction,
        target
      }]) => {
        // Are we delegating to a delegator
        const toDelegator = delegations.find(([accountId]) => accountId.eq(target));
        const to = votes.find(({
          accountId
        }) => accountId.eq(toDelegator ? toDelegator[0] : target)); // this delegation has a target

        if (to) {
          votes.push({
            accountId,
            balance,
            isDelegating: true,
            vote: api.registry.createType('Vote', {
              aye: to.vote.isAye,
              conviction
            })
          });
        }
      });
      return votes;
    }));
  }

  function _referendumVotes(instanceId, api) {
    return memo(instanceId, referendum => combineLatest([api.derive.democracy.sqrtElectorate(), isFunction$2(api.query.democracy.votingOf) ? votesCurr(api, referendum.index) : votesPrev(api, referendum.index)]).pipe(map(([sqrtElectorate, votes]) => calcVotes(sqrtElectorate, referendum, votes))));
  }
  function _referendumsVotes(instanceId, api) {
    return memo(instanceId, referendums => referendums.length ? combineLatest(referendums.map(referendum => api.derive.democracy._referendumVotes(referendum))) : of([]));
  }
  function _referendumInfo(instanceId, api) {
    return memo(instanceId, (index, info) => {
      const status = getStatus(info);
      return status ? api.derive.democracy.preimage(status.proposalHash).pipe(map(image => ({
        image,
        imageHash: status.proposalHash,
        index: api.registry.createType('ReferendumIndex', index),
        status
      }))) : of(null);
    });
  }
  function referendumsInfo(instanceId, api) {
    return memo(instanceId, ids => ids.length ? api.query.democracy.referendumInfoOf.multi(ids).pipe(switchMap(infos => combineLatest(ids.map((id, index) => api.derive.democracy._referendumInfo(id, infos[index])))), map(infos => infos.filter(referendum => !!referendum))) : of([]));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function sqrtElectorate(instanceId, api) {
    return memo(instanceId, () => api.query.balances.totalIssuance().pipe(map(bnSqrt)));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var democracy = /*#__PURE__*/Object.freeze({
    __proto__: null,
    dispatchQueue: dispatchQueue,
    locks: locks,
    nextExternal: nextExternal,
    preimages: preimages,
    preimage: preimage,
    proposals: proposals$3,
    referendumIds: referendumIds,
    referendums: referendums,
    referendumsActive: referendumsActive,
    referendumsFinished: referendumsFinished,
    _referendumVotes: _referendumVotes,
    _referendumsVotes: _referendumsVotes,
    _referendumInfo: _referendumInfo,
    referendumsInfo: referendumsInfo,
    sqrtElectorate: sqrtElectorate
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function isSeatHolder(value) {
    return !Array.isArray(value);
  }

  function isCandidateTuple(value) {
    return Array.isArray(value);
  }

  function getAccountTuple(value) {
    return isSeatHolder(value) ? [value.who, value.stake] : value;
  }

  function getCandidate(value) {
    return isCandidateTuple(value) ? value[0] : value;
  }

  function sortAccounts([, balanceA], [, balanceB]) {
    return balanceB.cmp(balanceA);
  }

  function getConstants(api, elections) {
    return elections ? {
      candidacyBond: api.consts[elections].candidacyBond,
      desiredRunnersUp: api.consts[elections].desiredRunnersUp,
      desiredSeats: api.consts[elections].desiredMembers,
      termDuration: api.consts[elections].termDuration,
      votingBond: api.consts[elections].votingBond
    } : {};
  }

  function getModules(api) {
    const [council] = api.registry.getModuleInstances(api.runtimeVersion.specName.toString(), 'council') || ['council'];
    const elections = api.query.phragmenElection ? 'phragmenElection' : api.query.electionsPhragmen ? 'electionsPhragmen' : api.query.elections ? 'elections' : null;
    return [council, elections];
  }

  function queryAll(api, council, elections) {
    return api.queryMulti([api.query[council].members, api.query[elections].candidates, api.query[elections].members, api.query[elections].runnersUp]);
  }

  function queryCouncil(api, council) {
    return combineLatest([api.query[council].members(), of([]), of([]), of([])]);
  }
  /**
   * @name info
   * @returns An object containing the combined results of the storage queries for
   * all relevant election module properties.
   * @example
   * <BR>
   *
   * ```javascript
   * api.derive.elections.info(({ members, candidates }) => {
   *   console.log(`There are currently ${members.length} council members and ${candidates.length} prospective council candidates.`);
   * });
   * ```
   */


  function info$3(instanceId, api) {
    return memo(instanceId, () => {
      const [council, elections] = getModules(api);
      return (elections ? queryAll(api, council, elections) : queryCouncil(api, council)).pipe(map(([councilMembers, candidates, members, runnersUp]) => ({ ...getConstants(api, elections),
        candidateCount: api.registry.createType('u32', candidates.length),
        candidates: candidates.map(getCandidate),
        members: members.length ? members.map(getAccountTuple).sort(sortAccounts) : councilMembers.map(a => [a, api.registry.createType('Balance')]),
        runnersUp: runnersUp.map(getAccountTuple).sort(sortAccounts)
      })));
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var elections = /*#__PURE__*/Object.freeze({
    __proto__: null,
    info: info$3
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function mapResult([result, validators, heartbeats, numBlocks]) {
    validators.forEach((validator, index) => {
      const validatorId = validator.toString();
      const blockCount = numBlocks[index];
      const hasMessage = !heartbeats[index].isEmpty;
      const prev = result[validatorId];

      if (!prev || prev.hasMessage !== hasMessage || !prev.blockCount.eq(blockCount)) {
        result[validatorId] = {
          blockCount,
          hasMessage,
          isOnline: hasMessage || blockCount.gt(BN_ZERO)
        };
      }
    });
    return result;
  }
  /**
   * @description Return a boolean array indicating whether the passed accounts had received heartbeats in the current session
   */


  function receivedHeartbeats(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$imOnline;

      return (_api$query$imOnline = api.query.imOnline) !== null && _api$query$imOnline !== void 0 && _api$query$imOnline.receivedHeartbeats ? api.derive.staking.overview().pipe(switchMap(({
        currentIndex,
        validators
      }) => combineLatest([of({}), of(validators), api.query.imOnline.receivedHeartbeats.multi(validators.map((_address, index) => [currentIndex, index])), api.query.imOnline.authoredBlocks.multi(validators.map(address => [currentIndex, address]))])), map(mapResult)) : of({});
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var imOnline = /*#__PURE__*/Object.freeze({
    __proto__: null,
    receivedHeartbeats: receivedHeartbeats
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const members$2 = members$4('membership');
  const hasProposals$1 = hasProposals$3('membership');
  const proposal$1 = proposal$3('membership');
  const proposalCount$1 = proposalCount$3('membership');
  const proposalHashes$1 = proposalHashes$3('membership');
  const proposals$2 = proposals$5('membership');
  const prime$1 = prime$3('membership');

  var membership = /*#__PURE__*/Object.freeze({
    __proto__: null,
    members: members$2,
    hasProposals: hasProposals$1,
    proposal: proposal$1,
    proposalCount: proposalCount$1,
    proposalHashes: proposalHashes$1,
    proposals: proposals$2,
    prime: prime$1
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  function didUpdateToBool(didUpdate, id) {
    return didUpdate.isSome ? didUpdate.unwrap().some(paraId => paraId.eq(id)) : false;
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function parseActive(id, active) {
    const found = active.find(([paraId]) => paraId === id);

    if (found && found[1].isSome) {
      const [collatorId, retriable] = found[1].unwrap();
      return {
        collatorId,
        ...(retriable.isWithRetries ? {
          isRetriable: true,
          retries: retriable.asWithRetries.toNumber()
        } : {
          isRetriable: false,
          retries: 0
        })
      };
    }

    return null;
  }

  function parseCollators(id, collatorQueue) {
    return collatorQueue.map(queue => {
      const found = queue.find(([paraId]) => paraId === id);
      return found ? found[1] : null;
    });
  }

  function parse$2(id, [active, retryQueue, selectedThreads, didUpdate, info, pendingSwap, heads, relayDispatchQueue]) {
    if (info.isNone) {
      return null;
    }

    return {
      active: parseActive(id, active),
      didUpdate: didUpdateToBool(didUpdate, id),
      heads,
      id,
      info: {
        id,
        ...info.unwrap()
      },
      pendingSwapId: pendingSwap.unwrapOr(null),
      relayDispatchQueue,
      retryCollators: parseCollators(id, retryQueue),
      selectedCollators: parseCollators(id, selectedThreads)
    };
  }

  function info$2(instanceId, api) {
    return memo(instanceId, id => api.query.registrar && api.query.parachains ? api.queryMulti([api.query.registrar.active, api.query.registrar.retryQueue, api.query.registrar.selectedThreads, api.query.parachains.didUpdate, [api.query.registrar.paras, id], [api.query.registrar.pendingSwap, id], [api.query.parachains.heads, id], [api.query.parachains.relayDispatchQueue, id]]).pipe(map(result => parse$2(api.registry.createType('ParaId', id), result))) : of(null));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function parse$1([ids, didUpdate, infos, pendingSwaps, relayDispatchQueueSizes]) {
    return ids.map((id, index) => ({
      didUpdate: didUpdateToBool(didUpdate, id),
      id,
      info: {
        id,
        ...infos[index].unwrapOr(null)
      },
      pendingSwapId: pendingSwaps[index].unwrapOr(null),
      relayDispatchQueueSize: relayDispatchQueueSizes[index][0].toNumber()
    }));
  }

  function overview$1(instanceId, api) {
    return memo(instanceId, () => {
      var _api$query$registrar;

      return (_api$query$registrar = api.query.registrar) !== null && _api$query$registrar !== void 0 && _api$query$registrar.parachains && api.query.parachains ? api.query.registrar.parachains().pipe(switchMap(paraIds => combineLatest([of(paraIds), api.query.parachains.didUpdate(), api.query.registrar.paras.multi(paraIds), api.query.registrar.pendingSwap.multi(paraIds), api.query.parachains.relayDispatchQueueSize.multi(paraIds)])), map(parse$1)) : of([]);
    });
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var parachains = /*#__PURE__*/Object.freeze({
    __proto__: null,
    info: info$2,
    overview: overview$1
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function parse([currentIndex, activeEra, activeEraStart, currentEra, validatorCount]) {
    return {
      activeEra,
      activeEraStart,
      currentEra,
      currentIndex,
      validatorCount
    };
  } // query based on latest


  function queryStaking(api) {
    return api.queryMulti([api.query.session.currentIndex, api.query.staking.activeEra, api.query.staking.currentEra, api.query.staking.validatorCount]).pipe(map(([currentIndex, activeOpt, currentEra, validatorCount]) => {
      const {
        index,
        start
      } = activeOpt.unwrapOrDefault();
      return parse([currentIndex, index, start, currentEra.unwrapOrDefault(), validatorCount]);
    }));
  } // query based on latest


  function querySession(api) {
    return api.query.session.currentIndex().pipe(map(currentIndex => parse([currentIndex, api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')])));
  } // empty set when none is available


  function empty(api) {
    return of(parse([api.registry.createType('SessionIndex', 1), api.registry.createType('EraIndex'), api.registry.createType('Option<Moment>'), api.registry.createType('EraIndex'), api.registry.createType('u32')]));
  }

  function indexes(instanceId, api) {
    return memo(instanceId, () => api.query.session ? api.query.staking ? queryStaking(api) : querySession(api) : empty(api));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
   */

  function info$1(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(map(indexes => {
      var _api$consts, _api$consts$babe, _api$consts2, _api$consts2$staking;

      const sessionLength = ((_api$consts = api.consts) === null || _api$consts === void 0 ? void 0 : (_api$consts$babe = _api$consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.epochDuration) || api.registry.createType('u64', 1);
      const sessionsPerEra = ((_api$consts2 = api.consts) === null || _api$consts2 === void 0 ? void 0 : (_api$consts2$staking = _api$consts2.staking) === null || _api$consts2$staking === void 0 ? void 0 : _api$consts2$staking.sessionsPerEra) || api.registry.createType('SessionIndex', 1);
      return { ...indexes,
        eraLength: api.registry.createType('BlockNumber', sessionsPerEra.mul(sessionLength)),
        isEpoch: !!api.query.babe,
        sessionLength,
        sessionsPerEra
      };
    })));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function withProgressField(field) {
    return (instanceId, api) => memo(instanceId, () => api.derive.session.progress().pipe(map(info => info[field])));
  }

  function createDerive(api, info, [currentSlot, epochIndex, epochOrGenesisStartSlot, activeEraStartSessionIndex]) {
    const epochStartSlot = epochIndex.mul(info.sessionLength).iadd(epochOrGenesisStartSlot);
    const sessionProgress = currentSlot.sub(epochStartSlot);
    const eraProgress = info.currentIndex.sub(activeEraStartSessionIndex).imul(info.sessionLength).iadd(sessionProgress);
    return { ...info,
      eraProgress: api.registry.createType('BlockNumber', eraProgress),
      sessionProgress: api.registry.createType('BlockNumber', sessionProgress)
    };
  }

  function queryAura(api) {
    return api.derive.session.info().pipe(map(info => ({ ...info,
      eraProgress: api.registry.createType('BlockNumber'),
      sessionProgress: api.registry.createType('BlockNumber')
    })));
  }

  function queryBabe(api) {
    return api.derive.session.info().pipe(switchMap(info => {
      var _api$query$staking;

      return combineLatest([of(info), // we may have no staking, but have babe (permissioned)
      (_api$query$staking = api.query.staking) !== null && _api$query$staking !== void 0 && _api$query$staking.erasStartSessionIndex ? api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot, [api.query.staking.erasStartSessionIndex, info.activeEra]]) : api.queryMulti([api.query.babe.currentSlot, api.query.babe.epochIndex, api.query.babe.genesisSlot])]);
    }), map(([info, [currentSlot, epochIndex, genesisSlot, optStartIndex]]) => [info, [currentSlot, epochIndex, genesisSlot, optStartIndex && optStartIndex.isSome ? optStartIndex.unwrap() : api.registry.createType('SessionIndex', 1)]]));
  }
  /**
   * @description Retrieves all the session and era query and calculates specific values on it as the length of the session and eras
   */


  function progress(instanceId, api) {
    return memo(instanceId, () => api.query.babe ? queryBabe(api).pipe(map(([info, slots]) => createDerive(api, info, slots))) : queryAura(api));
  }
  const eraLength = withProgressField('eraLength');
  const eraProgress = withProgressField('eraProgress');
  const sessionProgress = withProgressField('sessionProgress');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var session = /*#__PURE__*/Object.freeze({
    __proto__: null,
    indexes: indexes,
    info: info$1,
    progress: progress,
    eraLength: eraLength,
    eraProgress: eraProgress,
    sessionProgress: sessionProgress
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  /**
   * @description Get the candidate info for a society
   */
  function candidates(instanceId, api) {
    return memo(instanceId, () => api.query.society.candidates().pipe(switchMap(candidates => combineLatest([of(candidates), api.query.society.suspendedCandidates.multi(candidates.map(({
      who
    }) => who))])), map(([candidates, suspended]) => candidates.map(({
      kind,
      value,
      who
    }, index) => ({
      accountId: who,
      isSuspended: suspended[index].isSome,
      kind,
      value
    })))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  /**
   * @description Get the overall info for a society
   */
  function info(instanceId, api) {
    return memo(instanceId, () => api.queryMulti([api.query.society.bids, api.query.society.defender, api.query.society.founder, api.query.society.head, api.query.society.maxMembers, api.query.society.pot]).pipe(map(([bids, defender, founder, head, maxMembers, pot]) => ({
      bids,
      defender: defender.unwrapOr(undefined),
      founder: founder.unwrapOr(undefined),
      hasDefender: defender.isSome && head.isSome && !head.eq(defender) || false,
      head: head.unwrapOr(undefined),
      maxMembers,
      pot
    }))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @description Get the member info for a society
   */

  function member(instanceId, api) {
    return memo(instanceId, accountId => api.derive.society._members([accountId]).pipe(map(([result]) => result)));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function _members(instanceId, api) {
    return memo(instanceId, accountIds => combineLatest([of(accountIds), api.query.society.payouts.multi(accountIds), api.query.society.strikes.multi(accountIds), api.query.society.defenderVotes.multi(accountIds), api.query.society.suspendedMembers.multi(accountIds), api.query.society.vouching.multi(accountIds)]).pipe(map(([accountIds, payouts, strikes, defenderVotes, suspended, vouching]) => accountIds.map((accountId, index) => ({
      accountId,
      isDefenderVoter: defenderVotes[index].isSome,
      isSuspended: suspended[index].isTrue,
      payouts: payouts[index],
      strikes: strikes[index],
      vote: defenderVotes[index].unwrapOr(undefined),
      vouching: vouching[index].unwrapOr(undefined)
    })))));
  }
  /**
   * @description Get the member info for a society
   */

  function members$1(instanceId, api) {
    return memo(instanceId, () => api.query.society.members().pipe(switchMap(members => api.derive.society._members(members))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var society = /*#__PURE__*/Object.freeze({
    __proto__: null,
    candidates: candidates,
    info: info,
    member: member,
    _members: _members,
    members: members$1
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const QUERY_OPTS = {
    withDestination: true,
    withLedger: true,
    withNominations: true,
    withPrefs: true
  };

  function groupByEra(list) {
    return list.reduce((map, {
      era,
      value
    }) => {
      const key = era.toString();
      map[key] = (map[key] || BN_ZERO).add(value.unwrap());
      return map;
    }, {});
  }

  function calculateUnlocking(api, stakingLedger, sessionInfo) {
    const results = Object.entries(groupByEra(((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).filter(({
      era
    }) => era.unwrap().gt(sessionInfo.activeEra)))).map(([eraString, value]) => ({
      remainingEras: new BN(eraString).isub(sessionInfo.activeEra),
      value: api.registry.createType('Balance', value)
    }));
    return results.length ? results : undefined;
  }

  function redeemableSum(api, stakingLedger, sessionInfo) {
    return api.registry.createType('Balance', ((stakingLedger === null || stakingLedger === void 0 ? void 0 : stakingLedger.unlocking) || []).reduce((total, {
      era,
      value
    }) => {
      return sessionInfo.activeEra.gte(era.unwrap()) ? total.iadd(value.unwrap()) : total;
    }, new BN(0)));
  }

  function parseResult$1(api, sessionInfo, keys, query) {
    return { ...keys,
      ...query,
      redeemable: redeemableSum(api, query.stakingLedger, sessionInfo),
      unlocking: calculateUnlocking(api, query.stakingLedger, sessionInfo)
    };
  }
  /**
   * @description From a list of stashes, fill in all the relevant staking details
   */


  function accounts(instanceId, api) {
    return memo(instanceId, accountIds => api.derive.session.info().pipe(switchMap(sessionInfo => combineLatest([api.derive.staking.keysMulti(accountIds), api.derive.staking.queryMulti(accountIds, QUERY_OPTS)]).pipe(map(([keys, queries]) => queries.map((q, index) => parseResult$1(api, sessionInfo, keys[index], q)))))));
  }
  /**
   * @description From a stash, retrieve the controllerId and fill in all the relevant staking details
   */

  const account = firstMemo((api, accountId) => api.derive.staking.accounts([accountId]));

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @description Retrieve the staking overview, including elected and points earned
   */

  function currentPoints(instanceId, api) {
    return memo(instanceId, () => api.derive.session.indexes().pipe(switchMap(({
      activeEra
    }) => api.query.staking.erasRewardPoints(activeEra))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function getEraCache(CACHE_KEY, era, withActive) {
    const cacheKey = `${CACHE_KEY}-${era.toString()}`;
    return [cacheKey, withActive ? undefined : deriveCache.get(cacheKey)];
  }
  function getEraMultiCache(CACHE_KEY, eras, withActive) {
    const cached = withActive ? [] : eras.map(e => deriveCache.get(`${CACHE_KEY}-${e.toString()}`)).filter(v => !!v);
    return cached;
  }
  function setEraCache(cacheKey, withActive, value) {
    !withActive && deriveCache.set(cacheKey, value);
    return value;
  }
  function setEraMultiCache(CACHE_KEY, withActive, values) {
    !withActive && values.forEach(v => deriveCache.set(`${CACHE_KEY}-${v.era.toString()}`, v));
    return values;
  }
  function filterCachedEras(eras, cached, query) {
    return eras.map(e => cached.find(({
      era
    }) => e.eq(era)) || query.find(({
      era
    }) => e.eq(era)));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  // only retrieve a maximum of 14 eras (84 / 6) at a time
  // (This is not empirically calculated. Rather smaller sizes take longer
  // time due to the serial nature, large sizes may tie up the RPCs)
  const ERA_CHUNK_SIZE = 14;

  function chunkEras(eras, fn) {
    const chunked = arrayChunk(eras, ERA_CHUNK_SIZE);
    let index = 0;
    const subject = new BehaviorSubject(chunked[index]);
    return subject.pipe(switchMap(fn), tap(() => {
      nextTick(() => {
        index++;
        index === chunked.length ? subject.complete() : subject.next(chunked[index]);
      });
    }), toArray$1(), map(arrayFlatten));
  }

  function filterEras(eras, list) {
    return eras.filter(e => !list.some(({
      era
    }) => e.eq(era)));
  }
  function erasHistoricApply(fn) {
    return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(e => api.derive.staking[fn](e, withActive))));
  }
  function erasHistoricApplyAccount(fn) {
    return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (accountId, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(e => api.derive.staking[fn](accountId, e, withActive))));
  }
  function singleEra(fn) {
    return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, era => api.derive.staking[fn](era, true));
  }
  function combineEras(fn) {
    return (instanceId, api) => // Cannot quite get the typing right, but it is right in the code
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    memo(instanceId, (eras, withActive) => !eras.length ? of([]) : chunkEras(eras, eras => combineLatest(eras.map(e => api.derive.staking[fn](e, withActive)))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const CACHE_KEY$4 = 'eraExposure';

  function mapStakers(era, stakers) {
    const nominators = {};
    const validators = {};
    stakers.forEach(([key, exposure]) => {
      const validatorId = key.args[1].toString();
      validators[validatorId] = exposure;
      exposure.others.forEach(({
        who
      }, validatorIndex) => {
        const nominatorId = who.toString();
        nominators[nominatorId] = nominators[nominatorId] || [];
        nominators[nominatorId].push({
          validatorId,
          validatorIndex
        });
      });
    });
    return {
      era,
      nominators,
      validators
    };
  }

  function _eraExposure(instanceId, api) {
    return memo(instanceId, (era, withActive = false) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY$4, era, withActive);
      return cached ? of(cached) : api.query.staking.erasStakersClipped.entries(era).pipe(map(r => setEraCache(cacheKey, withActive, mapStakers(era, r))));
    });
  }
  const eraExposure = singleEra('_eraExposure');
  const _erasExposure = combineEras('_eraExposure');
  const erasExposure = erasHistoricApply('_erasExposure');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function erasHistoric(instanceId, api) {
    return memo(instanceId, withActive => api.queryMulti([api.query.staking.activeEra, api.query.staking.historyDepth]).pipe(map(([activeEraOpt, historyDepth]) => {
      const result = [];
      const max = historyDepth.toNumber();
      const activeEra = activeEraOpt.unwrapOrDefault().index;
      let lastEra = activeEra;

      while (lastEra.gte(BN_ZERO) && result.length < max) {
        if (lastEra !== activeEra || withActive === true) {
          result.push(api.registry.createType('EraIndex', lastEra));
        }

        lastEra = lastEra.sub(BN_ONE);
      } // go from oldest to newest


      return result.reverse();
    })));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const CACHE_KEY$3 = 'eraPoints';

  function mapValidators({
    individual
  }) {
    return [...individual.entries()].filter(([, points]) => points.gt(BN_ZERO)).reduce((result, [validatorId, points]) => {
      result[validatorId.toString()] = points;
      return result;
    }, {});
  }

  function mapPoints(eras, points) {
    return eras.map((era, index) => ({
      era,
      eraPoints: points[index].total,
      validators: mapValidators(points[index])
    }));
  }

  function _erasPoints(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }

      const cached = getEraMultiCache(CACHE_KEY$3, eras, withActive);
      const remaining = filterEras(eras, cached);
      return !remaining.length ? of(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe(map(p => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$3, withActive, mapPoints(remaining, p)))));
    });
  }
  const erasPoints = erasHistoricApply('_erasPoints');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const CACHE_KEY$2 = 'eraPrefs';

  function mapPrefs(era, all) {
    const validators = {};
    all.forEach(([key, prefs]) => {
      validators[key.args[1].toString()] = prefs;
    });
    return {
      era,
      validators
    };
  }

  function _eraPrefs(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY$2, era, withActive);
      return cached ? of(cached) : api.query.staking.erasValidatorPrefs.entries(era).pipe(map(r => setEraCache(cacheKey, withActive, mapPrefs(era, r))));
    });
  }
  const eraPrefs = singleEra('_eraPrefs');
  const _erasPrefs = combineEras('_eraPrefs');
  const erasPrefs = erasHistoricApply('_erasPrefs');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const CACHE_KEY$1 = 'eraRewards';

  function mapRewards(eras, optRewards) {
    return eras.map((era, index) => ({
      era,
      eraReward: optRewards[index].unwrapOrDefault()
    }));
  }

  function _erasRewards(instanceId, api) {
    return memo(instanceId, (eras, withActive) => {
      if (!eras.length) {
        return of([]);
      }

      const cached = getEraMultiCache(CACHE_KEY$1, eras, withActive);
      const remaining = filterEras(eras, cached);

      if (!remaining.length) {
        return of(cached);
      }

      return api.query.staking.erasValidatorReward.multi(remaining).pipe(map(r => filterCachedEras(eras, cached, setEraMultiCache(CACHE_KEY$1, withActive, mapRewards(remaining, r)))));
    });
  }
  const erasRewards = erasHistoricApply('_erasRewards');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const CACHE_KEY = 'eraSlashes';

  function mapSlashes(era, noms, vals) {
    const nominators = {};
    const validators = {};
    noms.forEach(([key, optBalance]) => {
      nominators[key.args[1].toString()] = optBalance.unwrap();
    });
    vals.forEach(([key, optRes]) => {
      validators[key.args[1].toString()] = optRes.unwrapOrDefault()[1];
    });
    return {
      era,
      nominators,
      validators
    };
  }

  function _eraSlashes(instanceId, api) {
    return memo(instanceId, (era, withActive) => {
      const [cacheKey, cached] = getEraCache(CACHE_KEY, era, withActive);
      return cached ? of(cached) : combineLatest([api.query.staking.nominatorSlashInEra.entries(era), api.query.staking.validatorSlashInEra.entries(era)]).pipe(map(([n, v]) => setEraCache(cacheKey, withActive, mapSlashes(era, n, v))));
    });
  }
  const eraSlashes = singleEra('_eraSlashes');
  const _erasSlashes = combineEras('_eraSlashes');
  const erasSlashes = erasHistoricApply('_erasSlashes');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const DEFAULT_FLAGS$1 = {
    withController: true,
    withExposure: true,
    withPrefs: true
  };

  function combineAccounts(nextElected, validators) {
    return arrayFlatten([nextElected, validators.filter(v => !nextElected.find(n => n.eq(v)))]);
  }

  function electedInfo(instanceId, api) {
    return memo(instanceId, (flags = DEFAULT_FLAGS$1) => api.derive.staking.validators().pipe(switchMap(({
      nextElected,
      validators
    }) => api.derive.staking.queryMulti(combineAccounts(nextElected, validators), flags).pipe(map(info => ({
      info,
      nextElected,
      validators
    }))))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function extractsIds(stashId, queuedKeys, nextKeys) {
    const sessionIds = (queuedKeys.find(([currentId]) => currentId.eq(stashId)) || [undefined, []])[1];
    const nextSessionIds = nextKeys.unwrapOr([]);
    return {
      nextSessionIds: Array.isArray(nextSessionIds) ? nextSessionIds : [...nextSessionIds.values()],
      sessionIds: Array.isArray(sessionIds) ? sessionIds : [...sessionIds.values()]
    };
  }

  const keys$1 = firstMemo((api, stashId) => api.derive.staking.keysMulti([stashId]));
  function keysMulti(instanceId, api) {
    return memo(instanceId, stashIds => stashIds.length ? api.query.session.queuedKeys().pipe(switchMap(queuedKeys => {
      var _api$consts$session;

      return combineLatest([of(queuedKeys), (_api$consts$session = api.consts.session) !== null && _api$consts$session !== void 0 && _api$consts$session.dedupKeyPrefix ? api.query.session.nextKeys.multi(stashIds.map(s => [api.consts.session.dedupKeyPrefix, s])) : combineLatest(stashIds.map(s => api.query.session.nextKeys(s)))]);
    }), map(([queuedKeys, nextKeys]) => stashIds.map((stashId, index) => extractsIds(stashId, queuedKeys, nextKeys[index])))) : of([]));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  /**
   * @description Retrieve the staking overview, including elected and points earned
   */

  function overview(instanceId, api) {
    return memo(instanceId, () => combineLatest([api.derive.session.indexes(), api.derive.staking.validators()]).pipe(map(([indexes, {
      nextElected,
      validators
    }]) => ({ ...indexes,
      nextElected,
      validators
    }))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function _ownExposures(instanceId, api) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return memo(instanceId, (accountId, eras, _withActive) => eras.length ? combineLatest([combineLatest(eras.map(e => api.query.staking.erasStakersClipped(e, accountId))), combineLatest(eras.map(e => api.query.staking.erasStakers(e, accountId)))]).pipe(map(([clp, exp]) => eras.map((era, index) => ({
      clipped: clp[index],
      era,
      exposure: exp[index]
    })))) : of([]));
  }
  const ownExposure = firstMemo((api, accountId, era) => api.derive.staking._ownExposures(accountId, [era], true));
  const ownExposures = erasHistoricApplyAccount('_ownExposures');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function _ownSlashes(instanceId, api) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return memo(instanceId, (accountId, eras, _withActive) => eras.length ? combineLatest([combineLatest(eras.map(e => api.query.staking.validatorSlashInEra(e, accountId))), combineLatest(eras.map(e => api.query.staking.nominatorSlashInEra(e, accountId)))]).pipe(map(([vals, noms]) => eras.map((era, index) => ({
      era,
      total: vals[index].isSome ? vals[index].unwrap()[1] : noms[index].unwrapOrDefault()
    })))) : of([]));
  }
  const ownSlash = firstMemo((api, accountId, era) => api.derive.staking._ownSlashes(accountId, [era], true));
  const ownSlashes = erasHistoricApplyAccount('_ownSlashes');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function parseDetails(stashId, controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure, stakingLedgerOpt) {
    return {
      accountId: stashId,
      controllerId: controllerIdOpt && controllerIdOpt.unwrapOr(null),
      exposure,
      nominators: nominatorsOpt.isSome ? nominatorsOpt.unwrap().targets : [],
      rewardDestination,
      stakingLedger: stakingLedgerOpt.unwrapOrDefault(),
      stashId,
      validatorPrefs
    };
  }

  function getLedgers(api, optIds, {
    withLedger = false
  }) {
    const ids = optIds.filter(o => withLedger && !!o && o.isSome).map(o => o.unwrap());
    const emptyLed = api.registry.createType('Option<StakingLedger>');
    return (ids.length ? combineLatest(ids.map(s => api.query.staking.ledger(s))) : of([])).pipe(map(optLedgers => {
      let offset = -1;
      return optIds.map(o => o && o.isSome ? optLedgers[++offset] || emptyLed : emptyLed);
    }));
  }

  function getStashInfo(api, stashIds, activeEra, {
    withController,
    withDestination,
    withExposure,
    withLedger,
    withNominations,
    withPrefs
  }) {
    const emptyNoms = api.registry.createType('Option<Nominations>');
    const emptyRewa = api.registry.createType('RewardDestination');
    const emptyExpo = api.registry.createType('Exposure');
    const emptyPrefs = api.registry.createType('ValidatorPrefs');
    return combineLatest([withController || withLedger ? combineLatest(stashIds.map(s => api.query.staking.bonded(s))) : of(stashIds.map(() => null)), withNominations ? combineLatest(stashIds.map(s => api.query.staking.nominators(s))) : of(stashIds.map(() => emptyNoms)), withDestination ? combineLatest(stashIds.map(s => api.query.staking.payee(s))) : of(stashIds.map(() => emptyRewa)), withPrefs ? combineLatest(stashIds.map(s => api.query.staking.validators(s))) : of(stashIds.map(() => emptyPrefs)), withExposure ? combineLatest(stashIds.map(s => api.query.staking.erasStakers(activeEra, s))) : of(stashIds.map(() => emptyExpo))]);
  }

  function getBatch(api, activeEra, stashIds, flags) {
    return getStashInfo(api, stashIds, activeEra, flags).pipe(switchMap(([controllerIdOpt, nominatorsOpt, rewardDestination, validatorPrefs, exposure]) => getLedgers(api, controllerIdOpt, flags).pipe(map(stakingLedgerOpts => stashIds.map((stashId, index) => parseDetails(stashId, controllerIdOpt[index], nominatorsOpt[index], rewardDestination[index], validatorPrefs[index], exposure[index], stakingLedgerOpts[index]))))));
  } //

  /**
   * @description From a stash, retrieve the controllerId and all relevant details
   */


  const query = firstMemo((api, accountId, flags) => api.derive.staking.queryMulti([accountId], flags));
  function queryMulti(instanceId, api) {
    return memo(instanceId, (accountIds, flags) => accountIds.length ? api.derive.session.indexes().pipe(switchMap(({
      activeEra
    }) => {
      const stashIds = accountIds.map(accountId => api.registry.createType('AccountId', accountId));
      return getBatch(api, activeEra, stashIds, flags);
    })) : of([]));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function _stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => {
      const stakerIds = accountIds.map(a => api.registry.createType('AccountId', a).toString());
      return api.derive.staking._erasExposure(eras, withActive).pipe(map(exposures => stakerIds.map(stakerId => exposures.map(({
        era,
        nominators: allNominators,
        validators: allValidators
      }) => {
        const isValidator = !!allValidators[stakerId];
        const validators = {};
        const nominating = allNominators[stakerId] || [];

        if (isValidator) {
          validators[stakerId] = allValidators[stakerId];
        } else if (nominating) {
          nominating.forEach(({
            validatorId
          }) => {
            validators[validatorId] = allValidators[validatorId];
          });
        }

        return {
          era,
          isEmpty: !Object.keys(validators).length,
          isValidator,
          nominating,
          validators
        };
      }))));
    });
  }
  function stakerExposures(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerExposures(accountIds, eras, withActive))));
  }
  const stakerExposure = firstMemo((api, accountId, withActive) => api.derive.staking.stakerExposures([accountId], withActive));

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function _stakerPoints(instanceId, api) {
    return memo(instanceId, (accountId, eras, withActive) => {
      const stakerId = api.registry.createType('AccountId', accountId).toString();
      return api.derive.staking._erasPoints(eras, withActive).pipe(map(points => points.map(({
        era,
        eraPoints,
        validators
      }) => ({
        era,
        eraPoints,
        points: validators[stakerId] || api.registry.createType('RewardPoint')
      }))));
    });
  }
  const stakerPoints = erasHistoricApplyAccount('_stakerPoints');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function _stakerPrefs(instanceId, api) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return memo(instanceId, (accountId, eras, _withActive) => api.query.staking.erasValidatorPrefs.multi(eras.map(e => [e, accountId])).pipe(map(all => all.map((validatorPrefs, index) => ({
      era: eras[index],
      validatorPrefs
    })))));
  }
  const stakerPrefs = erasHistoricApplyAccount('_stakerPrefs');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function parseRewards(api, stashId, [erasPoints, erasPrefs, erasRewards], exposures) {
    return exposures.map(({
      era,
      isEmpty,
      isValidator,
      nominating,
      validators: eraValidators
    }) => {
      const {
        eraPoints,
        validators: allValPoints
      } = erasPoints.find(p => p.era.eq(era)) || {
        eraPoints: BN_ZERO,
        validators: {}
      };
      const {
        eraReward
      } = erasRewards.find(r => r.era.eq(era)) || {
        eraReward: api.registry.createType('Balance')
      };
      const {
        validators: allValPrefs
      } = erasPrefs.find(p => p.era.eq(era)) || {
        validators: {}
      };
      const validators = {};
      const stakerId = stashId.toString();
      Object.entries(eraValidators).forEach(([validatorId, exposure]) => {
        var _allValPrefs$validato, _exposure$total;

        const valPoints = allValPoints[validatorId] || BN_ZERO;
        const valComm = ((_allValPrefs$validato = allValPrefs[validatorId]) === null || _allValPrefs$validato === void 0 ? void 0 : _allValPrefs$validato.commission.unwrap()) || BN_ZERO;
        const expTotal = ((_exposure$total = exposure.total) === null || _exposure$total === void 0 ? void 0 : _exposure$total.unwrap()) || BN_ZERO;
        let avail = BN_ZERO;
        let value;

        if (!(expTotal.isZero() || valPoints.isZero() || eraPoints.isZero())) {
          avail = eraReward.mul(valPoints).div(eraPoints);
          const valCut = valComm.mul(avail).div(BN_BILLION);
          let staked;

          if (validatorId === stakerId) {
            staked = exposure.own.unwrap();
          } else {
            const stakerExp = exposure.others.find(({
              who
            }) => who.eq(stakerId));
            staked = stakerExp ? stakerExp.value.unwrap() : BN_ZERO;
          }

          value = avail.sub(valCut).imul(staked).div(expTotal).iadd(validatorId === stakerId ? valCut : BN_ZERO);
        }

        validators[validatorId] = {
          total: api.registry.createType('Balance', avail),
          value: api.registry.createType('Balance', value)
        };
      });
      return {
        era,
        eraReward,
        isEmpty,
        isValidator,
        nominating,
        validators
      };
    });
  }

  function allUniqValidators(rewards) {
    return rewards.reduce(([all, perStash], rewards) => {
      const uniq = [];
      perStash.push(uniq);
      rewards.forEach(({
        validators
      }) => Object.keys(validators).forEach(validatorId => {
        if (!uniq.includes(validatorId)) {
          uniq.push(validatorId);

          if (!all.includes(validatorId)) {
            all.push(validatorId);
          }
        }
      }));
      return [all, perStash];
    }, [[], []]);
  }

  function removeClaimed(validators, queryValidators, reward) {
    const rm = [];
    Object.keys(reward.validators).forEach(validatorId => {
      const index = validators.indexOf(validatorId);

      if (index !== -1) {
        const valLedger = queryValidators[index].stakingLedger;

        if (valLedger !== null && valLedger !== void 0 && valLedger.claimedRewards.some(e => reward.era.eq(e))) {
          rm.push(validatorId);
        }
      }
    });
    rm.forEach(validatorId => {
      delete reward.validators[validatorId];
    });
  }

  function filterRewards(eras, valInfo, {
    rewards,
    stakingLedger
  }) {
    const filter = eras.filter(e => !stakingLedger.claimedRewards.some(s => s.eq(e)));
    const validators = valInfo.map(([v]) => v);
    const queryValidators = valInfo.map(([, q]) => q);
    return rewards.filter(({
      isEmpty
    }) => !isEmpty).filter(reward => {
      if (!filter.some(e => reward.era.eq(e))) {
        return false;
      }

      removeClaimed(validators, queryValidators, reward);
      return true;
    }).filter(({
      validators
    }) => Object.keys(validators).length !== 0).map(reward => ({ ...reward,
      nominators: reward.nominating.filter(n => reward.validators[n.validatorId])
    }));
  }

  function _stakerRewardsEras(instanceId, api) {
    return memo(instanceId, (eras, withActive = false) => combineLatest([api.derive.staking._erasPoints(eras, withActive), api.derive.staking._erasPrefs(eras, withActive), api.derive.staking._erasRewards(eras, withActive)]));
  }
  function _stakerRewards(instanceId, api) {
    return memo(instanceId, (accountIds, eras, withActive = false) => combineLatest([api.derive.staking.queryMulti(accountIds, {
      withLedger: true
    }), api.derive.staking._stakerExposures(accountIds, eras, withActive), api.derive.staking._stakerRewardsEras(eras, withActive)]).pipe(switchMap(([queries, exposures, erasResult]) => {
      const allRewards = queries.map(({
        stakingLedger,
        stashId
      }, index) => !stashId || !stakingLedger ? [] : parseRewards(api, stashId, erasResult, exposures[index]));

      if (withActive) {
        return of(allRewards);
      }

      const [allValidators, stashValidators] = allUniqValidators(allRewards);
      return api.derive.staking.queryMulti(allValidators, {
        withLedger: true
      }).pipe(map(queriedVals => queries.map(({
        stakingLedger
      }, index) => filterRewards(eras, stashValidators[index].map(validatorId => [validatorId, queriedVals.find(q => q.accountId.eq(validatorId))]), {
        rewards: allRewards[index],
        stakingLedger
      }))));
    })));
  }
  const stakerRewards = firstMemo((api, accountId, withActive) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking._stakerRewards([accountId], eras, withActive))));
  function stakerRewardsMultiEras(instanceId, api) {
    return memo(instanceId, (accountIds, eras) => accountIds.length && eras.length ? api.derive.staking._stakerRewards(accountIds, eras, false) : of([]));
  }
  function stakerRewardsMulti(instanceId, api) {
    return memo(instanceId, (accountIds, withActive = false) => api.derive.staking.erasHistoric(withActive).pipe(switchMap(eras => api.derive.staking.stakerRewardsMultiEras(accountIds, eras))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function _stakerSlashes(instanceId, api) {
    return memo(instanceId, (accountId, eras, withActive) => {
      const stakerId = api.registry.createType('AccountId', accountId).toString();
      return api.derive.staking._erasSlashes(eras, withActive).pipe(map(slashes => slashes.map(({
        era,
        nominators,
        validators
      }) => ({
        era,
        total: nominators[stakerId] || validators[stakerId] || api.registry.createType('Balance')
      }))));
    });
  }
  const stakerSlashes = erasHistoricApplyAccount('_stakerSlashes');

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function onBondedEvent(api) {
    let current = Date.now();
    return api.query.system.events().pipe(map(events => {
      current = events.filter(({
        event,
        phase
      }) => {
        try {
          return phase.isApplyExtrinsic && event.section === 'staking' && event.method === 'Bonded';
        } catch {
          return false;
        }
      }) ? Date.now() : current;
      return current;
    }), startWith(current), drr({
      skipTimeout: true
    }));
  }
  /**
   * @description Retrieve the list of all validator stashes
   */


  function stashes(instanceId, api) {
    return memo(instanceId, () => onBondedEvent(api).pipe(switchMap(() => api.query.staking.validators.keys()), map(keys => keys.map(({
      args: [v]
    }) => v).filter(a => a))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function nextElected(instanceId, api) {
    return memo(instanceId, () => api.query.staking.erasStakers ? api.derive.session.indexes().pipe( // only populate for next era in the last session, so track both here - entries are not
    // subscriptions, so we need a trigger - currentIndex acts as that trigger to refresh
    switchMap(({
      currentEra
    }) => api.query.staking.erasStakers.keys(currentEra)), map(keys => keys.map(({
      args: [, accountId]
    }) => accountId))) : api.query.staking.currentElected());
  }
  /**
   * @description Retrieve latest list of validators
   */

  function validators(instanceId, api) {
    return memo(instanceId, () => // Sadly the node-template is (for some obscure reason) not comprehensive, so while the derive works
    // in all actual real-world deployed chains, it does create some confusion for limited template chains
    combineLatest([api.query.session ? api.query.session.validators() : of([]), api.query.staking ? api.derive.staking.nextElected() : of([])]).pipe(map(([validators, nextElected]) => ({
      nextElected: nextElected.length ? nextElected : validators,
      validators
    }))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const DEFAULT_FLAGS = {
    withController: true,
    withPrefs: true
  };
  function waitingInfo(instanceId, api) {
    return memo(instanceId, (flags = DEFAULT_FLAGS) => combineLatest([api.derive.staking.validators(), api.derive.staking.stashes()]).pipe(switchMap(([{
      nextElected
    }, stashes]) => {
      const elected = nextElected.map(a => a.toString());
      const waiting = stashes.filter(v => !elected.includes(v.toString()));
      return api.derive.staking.queryMulti(waiting, flags).pipe(map(info => ({
        info,
        waiting
      })));
    })));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var staking = /*#__PURE__*/Object.freeze({
    __proto__: null,
    accounts: accounts,
    account: account,
    currentPoints: currentPoints,
    _eraExposure: _eraExposure,
    eraExposure: eraExposure,
    _erasExposure: _erasExposure,
    erasExposure: erasExposure,
    erasHistoric: erasHistoric,
    _erasPoints: _erasPoints,
    erasPoints: erasPoints,
    _eraPrefs: _eraPrefs,
    eraPrefs: eraPrefs,
    _erasPrefs: _erasPrefs,
    erasPrefs: erasPrefs,
    _erasRewards: _erasRewards,
    erasRewards: erasRewards,
    _eraSlashes: _eraSlashes,
    eraSlashes: eraSlashes,
    _erasSlashes: _erasSlashes,
    erasSlashes: erasSlashes,
    electedInfo: electedInfo,
    keys: keys$1,
    keysMulti: keysMulti,
    overview: overview,
    _ownExposures: _ownExposures,
    ownExposure: ownExposure,
    ownExposures: ownExposures,
    _ownSlashes: _ownSlashes,
    ownSlash: ownSlash,
    ownSlashes: ownSlashes,
    query: query,
    queryMulti: queryMulti,
    _stakerExposures: _stakerExposures,
    stakerExposures: stakerExposures,
    stakerExposure: stakerExposure,
    _stakerPoints: _stakerPoints,
    stakerPoints: stakerPoints,
    _stakerPrefs: _stakerPrefs,
    stakerPrefs: stakerPrefs,
    _stakerRewardsEras: _stakerRewardsEras,
    _stakerRewards: _stakerRewards,
    stakerRewards: stakerRewards,
    stakerRewardsMultiEras: stakerRewardsMultiEras,
    stakerRewardsMulti: stakerRewardsMulti,
    _stakerSlashes: _stakerSlashes,
    stakerSlashes: stakerSlashes,
    stashes: stashes,
    nextElected: nextElected,
    validators: validators,
    waitingInfo: waitingInfo
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const members = members$4('technicalCommittee');
  const hasProposals = hasProposals$3('technicalCommittee');
  const proposal = proposal$3('technicalCommittee');
  const proposalCount = proposalCount$3('technicalCommittee');
  const proposalHashes = proposalHashes$3('technicalCommittee');
  const proposals$1 = proposals$5('technicalCommittee');
  const prime = prime$3('technicalCommittee');

  var technicalCommittee = /*#__PURE__*/Object.freeze({
    __proto__: null,
    members: members,
    hasProposals: hasProposals,
    proposal: proposal,
    proposalCount: proposalCount,
    proposalHashes: proposalHashes,
    proposals: proposals$1,
    prime: prime
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function parseResult(api, {
    allIds,
    allProposals,
    approvalIds,
    councilProposals,
    proposalCount
  }) {
    const approvals = [];
    const proposals = [];
    const councilTreasury = councilProposals.filter(({
      proposal
    }) => proposal && (api.tx.treasury.approveProposal.is(proposal) || api.tx.treasury.rejectProposal.is(proposal)));
    allIds.forEach((id, index) => {
      if (allProposals[index].isSome) {
        const council = councilTreasury.filter(({
          proposal
        }) => proposal && id.eq(proposal.args[0])).sort((a, b) => a.proposal && b.proposal ? a.proposal.method.localeCompare(b.proposal.method) : a.proposal ? -1 : 1);
        const isApproval = approvalIds.some(approvalId => approvalId.eq(id));
        const derived = {
          council,
          id,
          proposal: allProposals[index].unwrap()
        };

        if (isApproval) {
          approvals.push(derived);
        } else {
          proposals.push(derived);
        }
      }
    });
    return {
      approvals,
      proposalCount,
      proposals
    };
  }

  function retrieveProposals(api, proposalCount, approvalIds) {
    const proposalIds = [];
    const count = proposalCount.toNumber();

    for (let index = 0; index < count; index++) {
      if (!approvalIds.some(id => id.eqn(index))) {
        proposalIds.push(api.registry.createType('ProposalIndex', index));
      }
    }

    const allIds = [...proposalIds, ...approvalIds];
    return combineLatest([api.query.treasury.proposals.multi(allIds), api.derive.council ? api.derive.council.proposals() : of([])]).pipe(map(([allProposals, councilProposals]) => parseResult(api, {
      allIds,
      allProposals,
      approvalIds,
      councilProposals,
      proposalCount
    })));
  }
  /**
   * @description Retrieve all active and approved treasury proposals, along with their info
   */


  function proposals(instanceId, api) {
    return memo(instanceId, () => api.query.treasury ? combineLatest([api.query.treasury.proposalCount(), api.query.treasury.approvals()]).pipe(switchMap(([proposalCount, approvalIds]) => retrieveProposals(api, proposalCount, approvalIds))) : of({
      approvals: [],
      proposalCount: api.registry.createType('ProposalIndex'),
      proposals: []
    }));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var treasury = /*#__PURE__*/Object.freeze({
    __proto__: null,
    proposals: proposals
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  function events(instanceId, api) {
    return memo(instanceId, blockHash => combineLatest([api.rpc.chain.getBlock(blockHash), api.queryAt(blockHash).pipe(switchMap(queryAt => queryAt.system.events()))]).pipe(map(([block, events]) => ({
      block,
      events
    }))));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const FALLBACK_MAX_HASH_COUNT = 250; // default here to 5 min eras, adjusted based on the actual blocktime

  const FALLBACK_PERIOD = new BN(6 * 1000);
  const MAX_FINALITY_LAG = new BN(5);
  const MORTAL_PERIOD = new BN(5 * 60 * 1000);

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  function latestNonce(api, address) {
    return api.derive.balances.account(address).pipe(map(({
      accountNonce
    }) => accountNonce));
  }

  function nextNonce(api, address) {
    var _api$rpc$system;

    return (_api$rpc$system = api.rpc.system) !== null && _api$rpc$system !== void 0 && _api$rpc$system.accountNextIndex ? api.rpc.system.accountNextIndex(address) : latestNonce(api, address);
  }

  function signingHeader(api) {
    return combineLatest([api.rpc.chain.getHeader().pipe(switchMap(header => // check for chains at genesis (until block 1 is produced, e.g. 6s), since
    // we do need to allow transactions at chain start (also dev/seal chains)
    header.parentHash.isEmpty ? of(header) // in the case of the current block, we use the parent to minimize the
    // impact of forks on the system, but not completely remove it
    : api.rpc.chain.getHeader(header.parentHash))), api.rpc.chain.getFinalizedHead().pipe(switchMap(hash => api.rpc.chain.getHeader(hash)))]).pipe(map(([current, finalized]) => // determine the hash to use, current when lag > max, else finalized
    current.number.unwrap().sub(finalized.number.unwrap()).gt(MAX_FINALITY_LAG) ? current : finalized));
  }

  function signingInfo(_instanceId, api) {
    // no memo, we want to do this fresh on each run
    return (address, nonce, era) => combineLatest([// retrieve nonce if none was specified
    isUndefined$1(nonce) ? latestNonce(api, address) : nonce === -1 ? nextNonce(api, address) : of(api.registry.createType('Index', nonce)), // if no era (create) or era > 0 (mortal), do block retrieval
    isUndefined$1(era) || isNumber$1(era) && era > 0 ? signingHeader(api) : of(null)]).pipe(map(([nonce, header]) => {
      var _api$consts$system, _api$consts$system$bl, _api$consts$babe, _api$consts$timestamp;

      return {
        header,
        mortalLength: Math.min(((_api$consts$system = api.consts.system) === null || _api$consts$system === void 0 ? void 0 : (_api$consts$system$bl = _api$consts$system.blockHashCount) === null || _api$consts$system$bl === void 0 ? void 0 : _api$consts$system$bl.toNumber()) || FALLBACK_MAX_HASH_COUNT, MORTAL_PERIOD.div(((_api$consts$babe = api.consts.babe) === null || _api$consts$babe === void 0 ? void 0 : _api$consts$babe.expectedBlockTime) || ((_api$consts$timestamp = api.consts.timestamp) === null || _api$consts$timestamp === void 0 ? void 0 : _api$consts$timestamp.minimumPeriod.muln(2)) || FALLBACK_PERIOD).iadd(MAX_FINALITY_LAG).toNumber()),
        nonce
      };
    }));
  }

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  var tx = /*#__PURE__*/Object.freeze({
    __proto__: null,
    events: events,
    signingInfo: signingInfo
  });

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors
  const derive = {
    accounts: accounts$1,
    bagsList,
    balances,
    bounties,
    chain,
    contracts,
    council,
    crowdloan,
    democracy,
    elections,
    imOnline,
    membership,
    parachains,
    session,
    society,
    staking,
    technicalCommittee,
    treasury,
    tx
  };

  // Copyright 2017-2022 @polkadot/api-derive authors & contributors

  const checks = {
    bagsList: {
      instances: ['voterList', 'bagsList'],
      methods: [],
      withDetect: true
    },
    contracts: {
      instances: ['contracts'],
      methods: []
    },
    council: {
      instances: ['council'],
      methods: [],
      withDetect: true
    },
    crowdloan: {
      instances: ['crowdloan'],
      methods: []
    },
    democracy: {
      instances: ['democracy'],
      methods: []
    },
    elections: {
      instances: ['phragmenElection', 'electionsPhragmen', 'elections', 'council'],
      methods: [],
      withDetect: true
    },
    imOnline: {
      instances: ['imOnline'],
      methods: []
    },
    membership: {
      instances: ['membership'],
      methods: []
    },
    parachains: {
      instances: ['parachains', 'registrar'],
      methods: []
    },
    session: {
      instances: ['session'],
      methods: []
    },
    society: {
      instances: ['society'],
      methods: []
    },
    staking: {
      instances: ['staking'],
      methods: ['erasRewardPoints']
    },
    technicalCommittee: {
      instances: ['technicalCommittee'],
      methods: [],
      withDetect: true
    },
    treasury: {
      instances: ['treasury'],
      methods: []
    }
  };

  function getModuleInstances(api, specName, moduleName) {
    return api.registry.getModuleInstances(specName, moduleName) || [];
  }
  /**
   * Returns an object that will inject `api` into all the functions inside
   * `allSections`, and keep the object architecture of `allSections`.
   */

  /** @internal */


  function injectFunctions(instanceId, api, derives) {
    const result = {};
    const names = Object.keys(derives);
    const keys = Object.keys(api.query);
    const specName = api.runtimeVersion.specName.toString();

    const filterKeys = q => keys.includes(q);

    const filterInstances = q => getModuleInstances(api, specName, q).some(filterKeys);

    const filterMethods = all => m => all.some(q => keys.includes(q) && api.query[q][m]);

    const getKeys = s => Object.keys(derives[s]);

    const creator = (s, m) => derives[s][m](instanceId, api);

    const isIncluded = c => !checks[c] || checks[c].instances.some(filterKeys) && (!checks[c].methods.length || checks[c].methods.every(filterMethods(checks[c].instances))) || checks[c].withDetect && checks[c].instances.some(filterInstances);

    for (let i = 0; i < names.length; i++) {
      const name = names[i];
      isIncluded(name) && lazyDeriveSection(result, name, getKeys, creator);
    }

    return result;
  } // FIXME The return type of this function should be {...ExactDerive, ...DeriveCustom}
  // For now we just drop the custom derive typings

  /** @internal */


  function getAvailableDerives(instanceId, api, custom = {}) {
    return { ...injectFunctions(instanceId, api, derive),
      ...injectFunctions(instanceId, api, custom)
    };
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors

  /**
   * This is a section decorator which keeps all type information.
   */
  function decorateDeriveSections(decorateMethod, derives) {
    const getKeys = s => Object.keys(derives[s]);

    const creator = (s, m) => decorateMethod(derives[s][m]);

    const result = {};
    const names = Object.keys(derives);

    for (let i = 0; i < names.length; i++) {
      lazyDeriveSection(result, names[i], getKeys, creator);
    }

    return result;
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  const l$3 = logger('api/util');

  // Copyright 2017-2022 @polkadot/api authors & contributors
  function filterEvents(txHash, {
    block: {
      extrinsics,
      header
    }
  }, allEvents, status) {
    // extrinsics to hashes
    for (const [txIndex, x] of extrinsics.entries()) {
      if (x.hash.eq(txHash)) {
        return {
          events: allEvents.filter(({
            phase
          }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eqn(txIndex)),
          txIndex
        };
      }
    } // if we do get the block after finalized, it _should_ be there
    // only warn on filtering with isInBlock (finalization finalizes after)


    if (status.isInBlock) {
      const allHashes = extrinsics.map(x => x.hash.toHex());
      l$3.warn(`block ${header.hash.toHex()}: Unable to find extrinsic ${txHash.toHex()} inside ${allHashes.join(', ')}`);
    }

    return {};
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  function isKeyringPair(account) {
    return isFunction$2(account.sign);
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const recordIdentity = record => record;

  function filterAndApply(events, section, methods, onFound) {
    return events.filter(({
      event
    }) => section === event.section && methods.includes(event.method)).map(record => onFound(record));
  }

  function getDispatchError({
    event: {
      data: [dispatchError]
    }
  }) {
    return dispatchError;
  }

  function getDispatchInfo({
    event: {
      data,
      method
    }
  }) {
    return method === 'ExtrinsicSuccess' ? data[0] : data[1];
  }

  function extractError(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed'], getDispatchError)[0];
  }

  function extractInfo(events = []) {
    return filterAndApply(events, 'system', ['ExtrinsicFailed', 'ExtrinsicSuccess'], getDispatchInfo)[0];
  }

  class SubmittableResult {
    constructor({
      dispatchError,
      dispatchInfo,
      events,
      internalError,
      status,
      txHash,
      txIndex
    }) {
      this.dispatchError = dispatchError || extractError(events);
      this.dispatchInfo = dispatchInfo || extractInfo(events);
      this.events = events || [];
      this.internalError = internalError;
      this.status = status;
      this.txHash = txHash;
      this.txIndex = txIndex;
    }

    get isCompleted() {
      return this.isError || this.status.isInBlock || this.status.isFinalized;
    }

    get isError() {
      return this.status.isDropped || this.status.isFinalityTimeout || this.status.isInvalid || this.status.isUsurped;
    }

    get isFinalized() {
      return this.status.isFinalized;
    }

    get isInBlock() {
      return this.status.isInBlock;
    }

    get isWarning() {
      return this.status.isRetracted;
    }
    /**
     * @description Filters EventRecords for the specified method & section (there could be multiple)
     */


    filterRecords(section, method) {
      return filterAndApply(this.events, section, Array.isArray(method) ? method : [method], recordIdentity);
    }
    /**
     * @description Finds an EventRecord for the specified method & section
     */


    findRecord(section, method) {
      return this.filterRecords(section, method)[0];
    }
    /**
     * @description Creates a human representation of the output
     */


    toHuman(isExtended) {
      var _this$dispatchError, _this$dispatchInfo, _this$internalError;

      return {
        dispatchError: (_this$dispatchError = this.dispatchError) === null || _this$dispatchError === void 0 ? void 0 : _this$dispatchError.toHuman(),
        dispatchInfo: (_this$dispatchInfo = this.dispatchInfo) === null || _this$dispatchInfo === void 0 ? void 0 : _this$dispatchInfo.toHuman(),
        events: this.events.map(e => e.toHuman(isExtended)),
        internalError: (_this$internalError = this.internalError) === null || _this$internalError === void 0 ? void 0 : _this$internalError.message.toString(),
        status: this.status.toHuman(isExtended)
      };
    }

  }

  // Copyright 2017-2022 @polkadot/api authors & contributors

  const identity = input => input;

  function makeEraOptions(api, registry, partialOptions, {
    header,
    mortalLength,
    nonce
  }) {
    if (!header) {
      assert$1(partialOptions.era === 0 || !isUndefined$1(partialOptions.blockHash), 'Expected blockHash to be passed alongside non-immortal era options');

      if (isNumber$1(partialOptions.era)) {
        // since we have no header, it is immortal, remove any option overrides
        // so we only supply the genesisHash and no era to the construction
        delete partialOptions.era;
        delete partialOptions.blockHash;
      }

      return makeSignOptions(api, partialOptions, {
        nonce
      });
    }

    return makeSignOptions(api, partialOptions, {
      blockHash: header.hash,
      era: registry.createTypeUnsafe('ExtrinsicEra', [{
        current: header.number,
        period: partialOptions.era || mortalLength
      }]),
      nonce
    });
  }

  function makeSignAndSendOptions(partialOptions, statusCb) {
    let options = {};

    if (isFunction$2(partialOptions)) {
      statusCb = partialOptions;
    } else {
      options = objectSpread({}, partialOptions);
    }

    return [options, statusCb];
  }

  function makeSignOptions(api, partialOptions, extras) {
    return objectSpread({
      blockHash: api.genesisHash,
      genesisHash: api.genesisHash
    }, partialOptions, extras, {
      runtimeVersion: api.runtimeVersion,
      signedExtensions: api.registry.signedExtensions,
      version: api.extrinsicType
    });
  }

  function optionsOrNonce(partialOptions = {}) {
    return isBn(partialOptions) || isNumber$1(partialOptions) ? {
      nonce: partialOptions
    } : partialOptions;
  }

  function createClass({
    api,
    apiType,
    blockHash,
    decorateMethod
  }) {
    // an instance of the base extrinsic for us to extend
    const ExtrinsicBase = api.registry.createClass('Extrinsic');

    class Submittable extends ExtrinsicBase {
      #ignoreStatusCb;
      #transformResult = identity;

      constructor(registry, extrinsic) {
        super(registry, extrinsic, {
          version: api.extrinsicType
        });
        this.#ignoreStatusCb = apiType === 'rxjs';
      } // dry run an extrinsic


      dryRun(account, optionsOrHash) {
        if (blockHash || isString$1(optionsOrHash) || isU8a(optionsOrHash)) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-return
          return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));
        } // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call


        return decorateMethod(() => this.#observeSign(account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();
      } // calculate the payment info for this transaction (if signed and submitted)


      paymentInfo(account, optionsOrHash) {
        if (blockHash || isString$1(optionsOrHash) || isU8a(optionsOrHash)) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-return
          return decorateMethod(() => api.rpc.payment.queryInfo(this.toHex(), blockHash || optionsOrHash));
        }

        const [allOptions] = makeSignAndSendOptions(optionsOrHash);
        const address = isKeyringPair(account) ? account.address : account.toString(); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

        return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap(signingInfo => {
          // setup our options (same way as in signAndSend)
          const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);
          const signOptions = makeSignOptions(api, eraOptions, {});
          return api.rpc.payment.queryInfo(this.isSigned ? api.tx(this).signFake(address, signOptions).toHex() : this.signFake(address, signOptions).toHex());
        })))();
      } // send with an immediate Hash result


      // send implementation for both immediate Hash and statusCb variants
      send(statusCb) {
        const isSubscription = api.hasSubscriptions && (this.#ignoreStatusCb || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

        return decorateMethod(isSubscription ? this.#observeSubscribe : this.#observeSend)(statusCb);
      }
      /**
       * @description Sign a transaction, returning the this to allow chaining, i.e. .sign(...).send(). When options, e.g. nonce/blockHash are not specified, it will be inferred. To retrieve eg. nonce use `signAsync` (the preferred interface, this is provided for backwards compatibility)
       * @deprecated
       */


      sign(account, partialOptions) {
        super.sign(account, makeSignOptions(api, optionsOrNonce(partialOptions), {}));
        return this;
      }
      /**
       * @description Signs a transaction, returning `this` to allow chaining. E.g.: `sign(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.
       */


      signAsync(account, partialOptions) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call
        return decorateMethod(() => this.#observeSign(account, partialOptions).pipe(mapTo(this)))();
      } // signAndSend with an immediate Hash result


      // signAndSend implementation for all 3 cases above
      signAndSend(account, partialOptions, optionalStatusCb) {
        const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);
        const isSubscription = api.hasSubscriptions && (this.#ignoreStatusCb || !!statusCb); // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call

        return decorateMethod(() => this.#observeSign(account, options).pipe(switchMap(info => isSubscription ? this.#observeSubscribe(info) : this.#observeSend(info))) // FIXME This is wrong, SubmittableResult is _not_ a codec
        )(statusCb);
      } // adds a transform to the result, applied before result is returned


      withResultTransform(transform) {
        this.#transformResult = transform;
        return this;
      }

      #observeSign = (account, partialOptions) => {
        const address = isKeyringPair(account) ? account.address : account.toString();
        const options = optionsOrNonce(partialOptions);
        return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async signingInfo => {
          const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);
          let updateId = -1;

          if (isKeyringPair(account)) {
            this.sign(account, eraOptions);
          } else {
            updateId = await this.#signViaSigner(address, eraOptions, signingInfo.header);
          }

          return {
            options: eraOptions,
            updateId
          };
        }));
      };
      #observeStatus = (txHash, status) => {
        if (!status.isFinalized && !status.isInBlock) {
          return of(this.#transformResult(new SubmittableResult({
            status,
            txHash
          })));
        }

        const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;
        return api.derive.tx.events(blockHash).pipe(map(({
          block,
          events
        }) => this.#transformResult(new SubmittableResult({ ...filterEvents(txHash, block, events, status),
          status,
          txHash
        }))), catchError(internalError => of(this.#transformResult(new SubmittableResult({
          internalError,
          status,
          txHash
        })))));
      };
      #observeSend = info => {
        return api.rpc.author.submitExtrinsic(this).pipe(tap(hash => {
          this.#updateSigner(hash, info);
        }));
      };
      #observeSubscribe = info => {
        const txHash = this.hash;
        return api.rpc.author.submitAndWatchExtrinsic(this).pipe(switchMap(status => this.#observeStatus(txHash, status)), tap(status => {
          this.#updateSigner(status, info);
        }));
      };
      #signViaSigner = async (address, options, header) => {
        const signer = options.signer || api.signer;
        assert$1(signer, 'No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
        const payload = this.registry.createTypeUnsafe('SignerPayload', [objectSpread({}, options, {
          address,
          blockNumber: header ? header.number : 0,
          method: this.method
        })]);
        let result;

        if (isFunction$2(signer.signPayload)) {
          result = await signer.signPayload(payload.toPayload());
        } else if (isFunction$2(signer.signRaw)) {
          result = await signer.signRaw(payload.toRaw());
        } else {
          throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');
        } // Here we explicitly call `toPayload()` again instead of working with an object
        // (reference) as passed to the signer. This means that we are sure that the
        // payload data is not modified from our inputs, but the signer


        super.addSignature(address, result.signature, payload.toPayload());
        return result.id;
      };
      #updateSigner = (status, info) => {
        if (info && info.updateId !== -1) {
          const {
            options,
            updateId
          } = info;
          const signer = options.signer || api.signer;

          if (signer && isFunction$2(signer.update)) {
            signer.update(updateId, status);
          }
        }
      };
    }

    return Submittable;
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  function createSubmittable(apiType, api, decorateMethod, registry, blockHash) {
    const Submittable = createClass({
      api,
      apiType,
      blockHash,
      decorateMethod
    });
    return extrinsic => new Submittable(registry || api.registry, extrinsic);
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  function findCall(registry, callIndex) {
    return registry.findMetaCall(u8aToU8a(callIndex));
  }
  function findError(registry, errorIndex) {
    return registry.findMetaError(u8aToU8a(errorIndex));
  }

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  var others = [packageInfo$5];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  detectPackage(packageInfo$4, null, others);

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  // Type overrides based on specific nodes
  const typesChain = {};

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  const sharedTypes$5 = {
    // Anchor
    AnchorData: {
      anchoredBlock: 'u64',
      docRoot: 'H256',
      id: 'H256'
    },
    DispatchErrorModule: 'DispatchErrorModuleU8',
    PreCommitData: {
      expirationBlock: 'u64',
      identity: 'H256',
      signingRoot: 'H256'
    },
    // Fees
    Fee: {
      key: 'Hash',
      price: 'Balance'
    },
    // MultiAccount
    MultiAccountData: {
      deposit: 'Balance',
      depositor: 'AccountId',
      signatories: 'Vec<AccountId>',
      threshold: 'u16'
    },
    // Bridge
    ChainId: 'u8',
    DepositNonce: 'u64',
    ResourceId: '[u8; 32]',
    'chainbridge::ChainId': 'u8',
    // NFT
    RegistryId: 'H160',
    TokenId: 'U256',
    AssetId: {
      registryId: 'RegistryId',
      tokenId: 'TokenId'
    },
    AssetInfo: {
      metadata: 'Bytes'
    },
    MintInfo: {
      anchorId: 'Hash',
      proofs: 'Vec<ProofMint>',
      staticHashes: '[Hash; 3]'
    },
    Proof: {
      leafHash: 'H256',
      sortedHashes: 'H256'
    },
    ProofMint: {
      hashes: 'Vec<Hash>',
      property: 'Bytes',
      salt: '[u8; 32]',
      value: 'Bytes'
    },
    RegistryInfo: {
      fields: 'Vec<Bytes>',
      ownerCanBurn: 'bool'
    },
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'NonProxy']
    }
  };
  const standaloneTypes = objectSpread({}, sharedTypes$5, {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    LookupSource: 'IndicesLookupSource',
    Multiplier: 'Fixed64',
    RefCount: 'RefCountTo259'
  });
  const versioned$8 = [{
    minmax: [240, 243],
    types: objectSpread({}, standaloneTypes, {
      ProxyType: {
        _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'Vesting']
      }
    })
  }, {
    minmax: [244, 999],
    types: objectSpread({}, standaloneTypes)
  }, {
    minmax: [1000, undefined],
    types: objectSpread({}, sharedTypes$5)
  }];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  const sharedTypes$4 = {
    CompactAssignments: 'CompactAssignmentsWith24',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith24',
    Keys: 'SessionKeys6',
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Governance', 'Staking', 'IdentityJudgement', 'CancelProxy', 'Auction']
    }
  };
  const addrIndicesTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'LookupSource',
    CompactAssignments: 'CompactAssignmentsWith16',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys5',
    LookupSource: 'IndicesLookupSource',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const addrAccountIdTypes$2 = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    CompactAssignments: 'CompactAssignmentsWith16',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const versioned$7 = [{
    // 1020 is first CC3
    minmax: [1019, 1031],
    types: objectSpread({}, addrIndicesTypes, {
      BalanceLock: 'BalanceLockTo212',
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchError: 'DispatchErrorTo198',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      IdentityInfo: 'IdentityInfoTo198',
      Keys: 'SessionKeys5',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      SlashingSpans: 'SlashingSpansTo204',
      StakingLedger: 'StakingLedgerTo223',
      Votes: 'VotesTo230',
      Weight: 'u32'
    })
  }, {
    minmax: [1032, 1042],
    types: objectSpread({}, addrIndicesTypes, {
      BalanceLock: 'BalanceLockTo212',
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Keys: 'SessionKeys5',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      SlashingSpans: 'SlashingSpansTo204',
      StakingLedger: 'StakingLedgerTo223',
      Votes: 'VotesTo230',
      Weight: 'u32'
    })
  }, {
    // actual at 1045 (1043-1044 is dev)
    minmax: [1043, 1045],
    types: objectSpread({}, addrIndicesTypes, {
      BalanceLock: 'BalanceLockTo212',
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Keys: 'SessionKeys5',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      StakingLedger: 'StakingLedgerTo223',
      Votes: 'VotesTo230',
      Weight: 'u32'
    })
  }, {
    minmax: [1046, 1050],
    types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      StakingLedger: 'StakingLedgerTo223',
      Weight: 'u32'
    })
  }, {
    minmax: [1051, 1054],
    types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      ReferendumInfo: 'ReferendumInfoTo239',
      StakingLedger: 'StakingLedgerTo240',
      Weight: 'u32'
    })
  }, {
    minmax: [1055, 1056],
    types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      StakingLedger: 'StakingLedgerTo240',
      Weight: 'u32'
    })
  }, {
    minmax: [1057, 1061],
    types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [1062, 2012],
    types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [2013, 2022],
    types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      CompactAssignments: 'CompactAssignmentsTo257',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [2023, 2024],
    types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2, {
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [2025, 2027],
    types: objectSpread({}, sharedTypes$4, addrAccountIdTypes$2)
  }, {
    minmax: [2028, 2029],
    types: objectSpread({}, sharedTypes$4, {
      AccountInfo: 'AccountInfoWithDualRefCount',
      CompactAssignments: 'CompactAssignmentsWith16',
      RawSolution: 'RawSolutionWith16'
    })
  }, {
    minmax: [2030, 9000],
    types: objectSpread({}, sharedTypes$4, {
      CompactAssignments: 'CompactAssignmentsWith16',
      RawSolution: 'RawSolutionWith16'
    })
  }, {
    minmax: [9010, 9099],
    types: objectSpread({}, sharedTypes$4, mapXcmTypes('V0'))
  }, {
    // jump from 9100 to 9110, however align with Rococo
    minmax: [9100, 9105],
    types: objectSpread({}, sharedTypes$4, mapXcmTypes('V1'))
  }, {
    // metadata v14
    minmax: [9106, undefined],
    types: {}
  }];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  const versioned$6 = [{
    minmax: [0, undefined],
    types: {// nothing, API tracks master
    }
  }];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  const versioned$5 = [{
    minmax: [0, undefined],
    types: {// nothing, API tracks master
    }
  }];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  const sharedTypes$3 = {
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    Keys: 'SessionKeys6',
    ProxyType: {
      _enum: {
        Any: 0,
        NonTransfer: 1,
        Governance: 2,
        Staking: 3,
        UnusedSudoBalances: 4,
        IdentityJudgement: 5,
        CancelProxy: 6,
        Auction: 7
      }
    }
  };
  const addrAccountIdTypes$1 = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    Keys: 'SessionKeys5',
    LookupSource: 'AccountId',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  }; // these are override types for Polkadot

  const versioned$4 = [{
    minmax: [0, 12],
    types: objectSpread({}, sharedTypes$3, addrAccountIdTypes$1, {
      CompactAssignments: 'CompactAssignmentsTo257',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [13, 22],
    types: objectSpread({}, sharedTypes$3, addrAccountIdTypes$1, {
      CompactAssignments: 'CompactAssignmentsTo257',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [23, 24],
    types: objectSpread({}, sharedTypes$3, addrAccountIdTypes$1, {
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [25, 27],
    types: objectSpread({}, sharedTypes$3, addrAccountIdTypes$1)
  }, {
    minmax: [28, 29],
    types: objectSpread({}, sharedTypes$3, {
      AccountInfo: 'AccountInfoWithDualRefCount'
    })
  }, {
    minmax: [30, 9109],
    types: objectSpread({}, sharedTypes$3)
  }, {
    // metadata v14
    minmax: [9110, undefined],
    types: {}
  }];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors

  /* eslint-disable sort-keys */

  const sharedTypes$2 = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    FullIdentification: '()',
    // No staking, only session (as per config)
    Keys: 'SessionKeys7B'
  };
  const versioned$3 = [{
    minmax: [0, 200],
    types: objectSpread({}, sharedTypes$2, {
      AccountInfo: 'AccountInfoWithDualRefCount',
      Address: 'AccountId',
      LookupSource: 'AccountId'
    })
  }, {
    minmax: [201, 214],
    types: objectSpread({}, sharedTypes$2, {
      AccountInfo: 'AccountInfoWithDualRefCount'
    })
  }, {
    minmax: [215, 228],
    types: objectSpread({}, sharedTypes$2, {
      Keys: 'SessionKeys6'
    })
  }, {
    minmax: [229, 9099],
    types: objectSpread({}, sharedTypes$2, mapXcmTypes('V0'))
  }, {
    minmax: [9100, 9105],
    types: objectSpread({}, sharedTypes$2, mapXcmTypes('V1'))
  }, {
    // metadata v14
    minmax: [9106, undefined],
    types: {}
  }];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0

  /* eslint-disable sort-keys */
  const versioned$2 = [{
    minmax: [0, undefined],
    types: {// nothing, limited runtime
    }
  }];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  const sharedTypes$1 = {
    DispatchErrorModule: 'DispatchErrorModuleU8',
    TAssetBalance: 'u128',
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'CancelProxy', 'Assets', 'AssetOwner', 'AssetManager', 'Staking']
    }
  }; // these are override types for Statemine, Statemint, Westmint

  const versioned$1 = [{
    minmax: [0, 3],
    types: objectSpread({}, sharedTypes$1, mapXcmTypes('V0'))
  }, {
    minmax: [4, 5],
    types: objectSpread({}, sharedTypes$1, mapXcmTypes('V1'))
  }, {
    // metadata V14
    minmax: [500, undefined],
    types: {}
  }];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  const sharedTypes = {
    // 16 validators
    CompactAssignments: 'CompactAssignmentsWith16',
    DispatchErrorModule: 'DispatchErrorModuleU8',
    RawSolution: 'RawSolutionWith16',
    // general
    Keys: 'SessionKeys6',
    ProxyType: {
      _enum: ['Any', 'NonTransfer', 'Staking', 'SudoBalances', 'IdentityJudgement', 'CancelProxy']
    }
  };
  const addrAccountIdTypes = {
    AccountInfo: 'AccountInfoWithRefCount',
    Address: 'AccountId',
    CompactAssignments: 'CompactAssignmentsWith16',
    LookupSource: 'AccountId',
    Keys: 'SessionKeys5',
    RawSolution: 'RawSolutionWith16',
    ValidatorPrefs: 'ValidatorPrefsWithCommission'
  };
  const versioned = [{
    minmax: [1, 2],
    types: objectSpread({}, sharedTypes, addrAccountIdTypes, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      Multiplier: 'Fixed64',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259',
      Weight: 'u32'
    })
  }, {
    minmax: [3, 22],
    types: objectSpread({}, sharedTypes, addrAccountIdTypes, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      OpenTip: 'OpenTipTo225',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [23, 42],
    types: objectSpread({}, sharedTypes, addrAccountIdTypes, {
      CompactAssignments: 'CompactAssignmentsTo257',
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [43, 44],
    types: objectSpread({}, sharedTypes, addrAccountIdTypes, {
      DispatchInfo: 'DispatchInfoTo244',
      Heartbeat: 'HeartbeatTo244',
      RefCount: 'RefCountTo259'
    })
  }, {
    minmax: [45, 47],
    types: objectSpread({}, sharedTypes, addrAccountIdTypes)
  }, {
    minmax: [48, 49],
    types: objectSpread({}, sharedTypes, {
      AccountInfo: 'AccountInfoWithDualRefCount'
    })
  }, {
    minmax: [50, 9099],
    types: objectSpread({}, sharedTypes, mapXcmTypes('V0'))
  }, {
    minmax: [9100, 9105],
    types: objectSpread({}, sharedTypes, mapXcmTypes('V1'))
  }, {
    // metadata v14
    minmax: [9106, undefined],
    types: {}
  }];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors

  const typesSpec = {
    'centrifuge-chain': versioned$8,
    kusama: versioned$7,
    node: versioned$6,
    'node-template': versioned$5,
    polkadot: versioned$4,
    rococo: versioned$3,
    shell: versioned$2,
    statemine: versioned$1,
    statemint: versioned$1,
    westend: versioned,
    westmint: versioned$1
  };

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const upgrades$3 = [[0, 1020], [26669, 1021], [38245, 1022], [54248, 1023], [59659, 1024], [67651, 1025], [82191, 1027], [83238, 1028], [101503, 1029], [203466, 1030], [295787, 1031], [461692, 1032], [504329, 1033], [569327, 1038], [587687, 1039], [653183, 1040], [693488, 1042], [901442, 1045], [1375086, 1050], [1445458, 1051], [1472960, 1052], [1475648, 1053], [1491596, 1054], [1574408, 1055], [2064961, 1058], [2201991, 1062], [2671528, 2005], [2704202, 2007], [2728002, 2008], [2832534, 2011], [2962294, 2012], [3240000, 2013], [3274408, 2015], [3323565, 2019], [3534175, 2022], [3860281, 2023], [4143129, 2024], [4401242, 2025], [4841367, 2026], [5961600, 2027], [6137912, 2028], [6561855, 2029], [7100891, 2030], [7468792, 9010], [7668600, 9030], [7812476, 9040], [8010981, 9050], [8073833, 9070], [8555825, 9080], [8945245, 9090], [9611377, 9100], [9625129, 9111], [9866422, 9122], [10403784, 9130], [10960765, 9150], [11006614, 9151], [11404482, 9160], [11601803, 9170], [12008022, 9180], [12405451, 9190], [12665416, 9200], [12909508, 9220], [13109752, 9230]];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const upgrades$2 = [[0, 0], [29231, 1], [188836, 5], [199405, 6], [214264, 7], [244358, 8], [303079, 9], [314201, 10], [342400, 11], [443963, 12], [528470, 13], [687751, 14], [746085, 15], [787923, 16], [799302, 17], [1205128, 18], [1603423, 23], [1733218, 24], [2005673, 25], [2436698, 26], [3613564, 27], [3899547, 28], [4345767, 29], [4876134, 30], [5661442, 9050], [6321619, 9080], [6713249, 9090], [7217907, 9100], [7229126, 9110], [7560558, 9122], [8115869, 9140], [8638103, 9151], [9280179, 9170], [9738717, 9180], [10156856, 9190], [10458576, 9200], [10655116, 9220]];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  // SPDX-License-Identifier: Apache-2.0
  const upgrades$1 = [[214356, 4], [392764, 7], [409740, 8], [809976, 20], [877581, 24], [879238, 25], [889472, 26], [902937, 27], [932751, 28], [991142, 29], [1030162, 31], [1119657, 32], [1199282, 33], [1342534, 34], [1392263, 35], [1431703, 36], [1433369, 37], [1490972, 41], [2087397, 43], [2316688, 44], [2549864, 45], [3925782, 46], [3925843, 47], [4207800, 48], [4627944, 49], [5124076, 50], [5478664, 900], [5482450, 9000], [5584305, 9010], [5784566, 9030], [5879822, 9031], [5896856, 9032], [5897316, 9033], [6117927, 9050], [6210274, 9070], [6379314, 9080], [6979141, 9090], [7568453, 9100], [7766394, 9111], [7911691, 9120], [7968866, 9121], [7982889, 9122], [8514322, 9130], [9091726, 9140], [9091774, 9150], [9406726, 9160], [9921066, 9170], [10007115, 9180], [10480973, 9190], [10578091, 9200], [10678509, 9210], [10811001, 9220], [11096116, 9230], [11409279, 9250]];

  // Copyright 2017-2022 @polkadot/types-known authors & contributors
  const allKnown = {
    kusama: upgrades$3,
    polkadot: upgrades$2,
    westend: upgrades$1
  }; // testnets are not available in the networks map

  const NET_EXTRA = {
    westend: {
      genesisHash: ['0xe143f23803ac50e8f6f8e62695d1ce9e4e1d68aa36c1cd2cfd15340213f3423e']
    }
  };
  /** @internal */

  function checkOrder(network, versions) {
    const ooo = versions.filter((curr, index) => {
      const prev = versions[index - 1];
      return index === 0 ? false : curr[0] <= prev[0] || curr[1] <= prev[1];
    });

    if (ooo.length) {
      throw new Error(`${network}: Mismatched upgrade ordering: ${stringify(ooo)}`);
    }

    return versions;
  }
  /** @internal */


  function mapRaw([network, versions]) {
    const chain = selectableNetworks.find(n => n.network === network) || NET_EXTRA[network];

    if (!chain) {
      throw new Error(`Unable to find info for chain ${network}`);
    }

    return {
      genesisHash: hexToU8a(chain.genesisHash[0]),
      network,
      versions: checkOrder(network, versions).map(([blockNumber, specVersion]) => ({
        blockNumber: new BN(blockNumber),
        specVersion: new BN(specVersion)
      }))
    };
  } // Type overrides for specific spec types & versions as given in runtimeVersion


  const upgrades = Object.entries(allKnown).map(mapRaw);

  // Copyright 2017-2022 @polkadot/types-known authors & contributors

  function withNames(chainName, specName, fn) {
    return fn(chainName.toString(), specName.toString());
  } // flatten a VersionedType[] into a Record<string, string>

  /** @internal */


  function filterVersions(versions = [], specVersion) {
    return versions.filter(({
      minmax: [min, max]
    }) => (isUndefined$1(min) || isNull$1(min) || specVersion >= min) && (isUndefined$1(max) || isNull$1(max) || specVersion <= max)).reduce((result, {
      types
    }) => objectSpread(result, types), {});
  }
  /**
   * @description Based on the chain and runtimeVersion, get the applicable signed extensions (ready for registration)
   */


  function getSpecExtensions({
    knownTypes
  }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund, _knownTypes$typesBund2, _knownTypes$typesBund3, _knownTypes$typesBund4, _knownTypes$typesBund5, _knownTypes$typesBund6;

      return objectSpread({}, (_knownTypes$typesBund = knownTypes.typesBundle) === null || _knownTypes$typesBund === void 0 ? void 0 : (_knownTypes$typesBund2 = _knownTypes$typesBund.spec) === null || _knownTypes$typesBund2 === void 0 ? void 0 : (_knownTypes$typesBund3 = _knownTypes$typesBund2[s]) === null || _knownTypes$typesBund3 === void 0 ? void 0 : _knownTypes$typesBund3.signedExtensions, (_knownTypes$typesBund4 = knownTypes.typesBundle) === null || _knownTypes$typesBund4 === void 0 ? void 0 : (_knownTypes$typesBund5 = _knownTypes$typesBund4.chain) === null || _knownTypes$typesBund5 === void 0 ? void 0 : (_knownTypes$typesBund6 = _knownTypes$typesBund5[c]) === null || _knownTypes$typesBund6 === void 0 ? void 0 : _knownTypes$typesBund6.signedExtensions);
    });
  }
  /**
   * @description Based on the chain and runtimeVersion, get the applicable types (ready for registration)
   */

  function getSpecTypes({
    knownTypes
  }, chainName, specName, specVersion) {
    const _specVersion = bnToBn(specVersion).toNumber();

    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund7, _knownTypes$typesBund8, _knownTypes$typesBund9, _knownTypes$typesBund10, _knownTypes$typesBund11, _knownTypes$typesBund12, _knownTypes$typesSpec, _knownTypes$typesChai;

      return (// The order here is always, based on -
        //   - spec then chain
        //   - typesBundle takes higher precedence
        //   - types is the final catch-all override
        objectSpread({}, filterVersions(typesSpec[s], _specVersion), filterVersions(typesChain[c], _specVersion), filterVersions((_knownTypes$typesBund7 = knownTypes.typesBundle) === null || _knownTypes$typesBund7 === void 0 ? void 0 : (_knownTypes$typesBund8 = _knownTypes$typesBund7.spec) === null || _knownTypes$typesBund8 === void 0 ? void 0 : (_knownTypes$typesBund9 = _knownTypes$typesBund8[s]) === null || _knownTypes$typesBund9 === void 0 ? void 0 : _knownTypes$typesBund9.types, _specVersion), filterVersions((_knownTypes$typesBund10 = knownTypes.typesBundle) === null || _knownTypes$typesBund10 === void 0 ? void 0 : (_knownTypes$typesBund11 = _knownTypes$typesBund10.chain) === null || _knownTypes$typesBund11 === void 0 ? void 0 : (_knownTypes$typesBund12 = _knownTypes$typesBund11[c]) === null || _knownTypes$typesBund12 === void 0 ? void 0 : _knownTypes$typesBund12.types, _specVersion), (_knownTypes$typesSpec = knownTypes.typesSpec) === null || _knownTypes$typesSpec === void 0 ? void 0 : _knownTypes$typesSpec[s], (_knownTypes$typesChai = knownTypes.typesChain) === null || _knownTypes$typesChai === void 0 ? void 0 : _knownTypes$typesChai[c], knownTypes.types)
      );
    });
  }
  function getSpecHasher({
    knownTypes
  }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund13, _knownTypes$typesBund14, _knownTypes$typesBund15, _knownTypes$typesBund16, _knownTypes$typesBund17, _knownTypes$typesBund18;

      return knownTypes.hasher || ((_knownTypes$typesBund13 = knownTypes.typesBundle) === null || _knownTypes$typesBund13 === void 0 ? void 0 : (_knownTypes$typesBund14 = _knownTypes$typesBund13.chain) === null || _knownTypes$typesBund14 === void 0 ? void 0 : (_knownTypes$typesBund15 = _knownTypes$typesBund14[c]) === null || _knownTypes$typesBund15 === void 0 ? void 0 : _knownTypes$typesBund15.hasher) || ((_knownTypes$typesBund16 = knownTypes.typesBundle) === null || _knownTypes$typesBund16 === void 0 ? void 0 : (_knownTypes$typesBund17 = _knownTypes$typesBund16.spec) === null || _knownTypes$typesBund17 === void 0 ? void 0 : (_knownTypes$typesBund18 = _knownTypes$typesBund17[s]) === null || _knownTypes$typesBund18 === void 0 ? void 0 : _knownTypes$typesBund18.hasher) || null;
    });
  }
  /**
   * @description Based on the chain and runtimeVersion, get the applicable rpc definitions (ready for registration)
   */

  function getSpecRpc({
    knownTypes
  }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund19, _knownTypes$typesBund20, _knownTypes$typesBund21, _knownTypes$typesBund22, _knownTypes$typesBund23, _knownTypes$typesBund24;

      return objectSpread({}, (_knownTypes$typesBund19 = knownTypes.typesBundle) === null || _knownTypes$typesBund19 === void 0 ? void 0 : (_knownTypes$typesBund20 = _knownTypes$typesBund19.spec) === null || _knownTypes$typesBund20 === void 0 ? void 0 : (_knownTypes$typesBund21 = _knownTypes$typesBund20[s]) === null || _knownTypes$typesBund21 === void 0 ? void 0 : _knownTypes$typesBund21.rpc, (_knownTypes$typesBund22 = knownTypes.typesBundle) === null || _knownTypes$typesBund22 === void 0 ? void 0 : (_knownTypes$typesBund23 = _knownTypes$typesBund22.chain) === null || _knownTypes$typesBund23 === void 0 ? void 0 : (_knownTypes$typesBund24 = _knownTypes$typesBund23[c]) === null || _knownTypes$typesBund24 === void 0 ? void 0 : _knownTypes$typesBund24.rpc);
    });
  }
  /**
   * @description Based on the chain and runtimeVersion, get the applicable alias definitions (ready for registration)
   */

  function getSpecAlias({
    knownTypes
  }, chainName, specName) {
    return withNames(chainName, specName, (c, s) => {
      var _knownTypes$typesBund25, _knownTypes$typesBund26, _knownTypes$typesBund27, _knownTypes$typesBund28, _knownTypes$typesBund29, _knownTypes$typesBund30;

      return (// as per versions, first spec, then chain then finally non-versioned
        objectSpread({}, (_knownTypes$typesBund25 = knownTypes.typesBundle) === null || _knownTypes$typesBund25 === void 0 ? void 0 : (_knownTypes$typesBund26 = _knownTypes$typesBund25.spec) === null || _knownTypes$typesBund26 === void 0 ? void 0 : (_knownTypes$typesBund27 = _knownTypes$typesBund26[s]) === null || _knownTypes$typesBund27 === void 0 ? void 0 : _knownTypes$typesBund27.alias, (_knownTypes$typesBund28 = knownTypes.typesBundle) === null || _knownTypes$typesBund28 === void 0 ? void 0 : (_knownTypes$typesBund29 = _knownTypes$typesBund28.chain) === null || _knownTypes$typesBund29 === void 0 ? void 0 : (_knownTypes$typesBund30 = _knownTypes$typesBund29[c]) === null || _knownTypes$typesBund30 === void 0 ? void 0 : _knownTypes$typesBund30.alias, knownTypes.typesAlias)
      );
    });
  }
  /**
   * @description Returns a version record for known chains where upgrades are being tracked
   */

  function getUpgradeVersion(genesisHash, blockNumber) {
    const known = upgrades.find(u => genesisHash.eq(u.genesisHash));
    return known ? [known.versions.reduce((last, version) => {
      return blockNumber.gt(version.blockNumber) ? version : last;
    }, undefined), known.versions.find(version => blockNumber.lte(version.blockNumber))] : [undefined, undefined];
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  const l$2 = logger('api/augment');

  function logLength(type, values, and = []) {
    return values.length ? ` ${values.length} ${type}${and.length ? ' and' : ''}` : '';
  }

  function logValues(type, values) {
    return values.length ? `\n\t${type.padStart(7)}: ${values.sort().join(', ')}` : '';
  } // log details to console


  function warn(prefix, type, [added, removed]) {
    if (added.length || removed.length) {
      l$2.warn(`api.${prefix}: Found${logLength('added', added, removed)}${logLength('removed', removed)} ${type}:${logValues('added', added)}${logValues('removed', removed)}`);
    }
  }

  function findSectionExcludes(a, b) {
    return a.filter(s => !b.includes(s));
  }

  function findSectionIncludes(a, b) {
    return a.filter(s => b.includes(s));
  }

  function extractSections(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = Object.keys(dst);
    return [findSectionExcludes(srcSections, dstSections), findSectionExcludes(dstSections, srcSections)];
  }

  function findMethodExcludes(src, dst) {
    const srcSections = Object.keys(src);
    const dstSections = findSectionIncludes(Object.keys(dst), srcSections);
    const excludes = [];

    for (let s = 0; s < dstSections.length; s++) {
      const section = dstSections[s];
      const srcMethods = Object.keys(src[section]);
      const dstMethods = Object.keys(dst[section]);
      excludes.push(...dstMethods.filter(m => !srcMethods.includes(m)).map(m => `${section}.${m}`));
    }

    return excludes;
  }

  function extractMethods(src, dst) {
    return [findMethodExcludes(dst, src), findMethodExcludes(src, dst)];
  }

  function lazySection(src, dst) {
    const creator = m => src[m];

    const methods = Object.keys(src);

    for (let i = 0; i < methods.length; i++) {
      const method = methods[i]; // We use hasOwnproperty here to only check for the existence of the key,
      // instead of reading dst[section][method] which will evaluate when already
      // set as a lazy value previously

      if (!Object.prototype.hasOwnProperty.call(dst, method)) {
        lazyMethod(dst, method, creator);
      }
    }
  }
  /**
   * @description Takes a decorated api section (e.g. api.tx) and augment it with the details. It does not override what is
   * already available, but rather just adds new missing items into the result object.
   * @internal
   */


  function augmentObject(prefix, src, dst, fromEmpty = false) {
    fromEmpty && objectClear(dst); // NOTE: This part is slightly problematic since it will get the
    // values for at least all the sections and the names of the methods
    // (Since methods won't be decorated before lazy, this _may_ be ok)

    if (prefix && Object.keys(dst).length) {
      warn(prefix, 'modules', extractSections(src, dst));
      warn(prefix, 'calls', extractMethods(src, dst));
    }

    const sections = Object.keys(src);

    for (let i = 0; i < sections.length; i++) {
      const section = sections[i]; // We don't set here with a lazy interface, we decorate based
      // on the top-level structure (this bypasses adding lazy onto lazy)

      if (!dst[section]) {
        dst[section] = {};
      }

      lazySection(src[section], dst[section]);
    }

    return dst;
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors

  function sig({
    lookup
  }, {
    method,
    section
  }, args) {
    return `${section}.${method}(${args.map(a => lookup.getTypeDef(a).type).join(', ')})`;
  } // sets up the arguments in the form of [creator, args] ready to be used in a storage
  // call. Additionally, it verifies that the correct number of arguments have been passed


  function extractStorageArgs(registry, creator, _args) {
    const args = _args.filter(a => !isUndefined$1(a));

    if (creator.meta.type.isPlain) {
      assert$1(args.length === 0, () => `${sig(registry, creator, [])} does not take any arguments, ${args.length} found`);
    } else {
      const {
        hashers,
        key
      } = creator.meta.type.asMap;
      const keys = hashers.length === 1 ? [key] : registry.lookup.getSiType(key).def.asTuple.map(t => t);
      assert$1(args.length === keys.length, () => `${sig(registry, creator, keys)} is a map, requiring ${keys.length} arguments, ${args.length} found`);
    } // pass as tuple


    return [creator, args];
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  class Events {
    #eventemitter = new EventEmitter$1();

    emit(type, ...args) {
      return this.#eventemitter.emit(type, ...args);
    }
    /**
     * @description Attach an eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.on('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.on('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */


    on(type, handler) {
      this.#eventemitter.on(type, handler);
      return this;
    }
    /**
     * @description Remove the given eventemitter handler
     *
     * @param type The type of event the callback was attached to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to unregister.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const handler = (): void => {
     *  console.log('Connected !);
     * };
     *
     * // Start listening
     * api.on('connected', handler);
     *
     * // Stop listening
     * api.off('connected', handler);
     * ```
     */


    off(type, handler) {
      this.#eventemitter.removeListener(type, handler);
      return this;
    }
    /**
     * @description Attach an one-time eventemitter handler to listen to a specific event
     *
     * @param type The type of event to listen to. Available events are `connected`, `disconnected`, `ready` and `error`
     * @param handler The callback to be called when the event fires. Depending on the event type, it could fire with additional arguments.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.once('connected', (): void => {
     *   console.log('API has been connected to the endpoint');
     * });
     *
     * api.once('disconnected', (): void => {
     *   console.log('API has been disconnected from the endpoint');
     * });
     * ```
     */


    once(type, handler) {
      this.#eventemitter.once(type, handler);
      return this;
    }

  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  // the max amount of keys/values that we will retrieve at once
  const PAGE_SIZE_K = 1000; // limit aligned with the 1k on the node (trie lookups are heavy)

  const PAGE_SIZE_V = 250; // limited since the data may be > 16MB (e.g. misfiring elections)

  const PAGE_SIZE_Q = 50; // queue of pending storage queries (mapped together, next tick)

  const l$1 = logger('api/init');
  let instanceCounter = 0;

  function getAtQueryFn(api, {
    method,
    section
  }) {
    return assertReturn(api.rx.query[section] && api.rx.query[section][method], () => `query.${section}.${method} is not available in this version of the metadata`);
  }

  class Decorate extends Events {
    #instanceId;
    #registry;
    #storageGetQ = [];
    #storageSubQ = []; // HACK Use BN import so decorateDerive works... yes, wtf.

    __phantom = new BN(0);
    _consts = {};
    _errors = {};
    _events = {};
    _extrinsicType = 4; // latest extrinsic version

    _isReady = false;
    _query = {};
    _rx = {
      consts: {},
      query: {},
      tx: {}
    };

    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options, type, decorateMethod) {
      var _options$source;

      super();
      this.#instanceId = `${++instanceCounter}`;
      this.#registry = ((_options$source = options.source) === null || _options$source === void 0 ? void 0 : _options$source.registry) || options.registry || new TypeRegistry();

      this._rx.queryAt = (blockHash, knownVersion) => from(this.at(blockHash, knownVersion)).pipe(map(a => a.rx.query));

      this._rx.registry = this.#registry;
      const thisProvider = options.source ? options.source._rpcCore.provider.clone() : options.provider || new WsProvider();
      this._decorateMethod = decorateMethod;
      this._options = options;
      this._type = type; // The RPC interface decorates the known interfaces on init

      this._rpcCore = new RpcCore(this.#instanceId, this.#registry, thisProvider, this._options.rpc);
      this._isConnected = new BehaviorSubject(this._rpcCore.provider.isConnected);
      this._rx.hasSubscriptions = this._rpcCore.provider.hasSubscriptions;
    }

    /**
     * @description Return the current used registry
     */
    get registry() {
      return this.#registry;
    }
    /**
     * @description Creates an instance of a type as registered
     */


    createType(type, ...params) {
      return this.#registry.createType(type, ...params);
    }
    /**
     * @description Register additional user-defined of chain-specific types in the type registry
     */


    registerTypes(types) {
      types && this.#registry.register(types);
    }
    /**
     * @returns `true` if the API operates with subscriptions
     */


    get hasSubscriptions() {
      return this._rpcCore.provider.hasSubscriptions;
    }
    /**
     * @returns `true` if the API decorate multi-key queries
     */


    get supportMulti() {
      return this._rpcCore.provider.hasSubscriptions || !!this._rpcCore.state.queryStorageAt;
    }

    _emptyDecorated(registry, blockHash) {
      return {
        consts: {},
        errors: {},
        events: {},
        query: {},
        registry,
        rx: {
          query: {}
        },
        tx: createSubmittable(this._type, this._rx, this._decorateMethod, registry, blockHash)
      };
    }

    _createDecorated(registry, fromEmpty, decoratedApi, blockHash) {
      if (!decoratedApi) {
        decoratedApi = this._emptyDecorated(registry.registry, blockHash);
      }

      if (fromEmpty || !registry.decoratedMeta) {
        registry.decoratedMeta = expandMetadata(registry.registry, registry.metadata);
      }

      const storage = this._decorateStorage(registry.decoratedMeta, this._decorateMethod, blockHash);

      const storageRx = this._decorateStorage(registry.decoratedMeta, this._rxDecorateMethod, blockHash);

      augmentObject('consts', registry.decoratedMeta.consts, decoratedApi.consts, fromEmpty);
      augmentObject('errors', registry.decoratedMeta.errors, decoratedApi.errors, fromEmpty);
      augmentObject('events', registry.decoratedMeta.events, decoratedApi.events, fromEmpty);
      augmentObject('query', storage, decoratedApi.query, fromEmpty);
      augmentObject('query', storageRx, decoratedApi.rx.query, fromEmpty);

      decoratedApi.findCall = callIndex => findCall(registry.registry, callIndex);

      decoratedApi.findError = errorIndex => findError(registry.registry, errorIndex);

      decoratedApi.queryMulti = blockHash ? this._decorateMultiAt(decoratedApi, this._decorateMethod, blockHash) : this._decorateMulti(this._decorateMethod);
      decoratedApi.runtimeVersion = registry.runtimeVersion;
      return {
        decoratedApi,
        decoratedMeta: registry.decoratedMeta
      };
    }

    _injectMetadata(registry, fromEmpty = false) {
      // clear the decoration, we are redoing it here
      if (fromEmpty || !registry.decoratedApi) {
        registry.decoratedApi = this._emptyDecorated(registry.registry);
      }

      const {
        decoratedApi,
        decoratedMeta
      } = this._createDecorated(registry, fromEmpty, registry.decoratedApi);

      this._consts = decoratedApi.consts;
      this._errors = decoratedApi.errors;
      this._events = decoratedApi.events;
      this._query = decoratedApi.query;
      this._rx.query = decoratedApi.rx.query;

      const tx = this._decorateExtrinsics(decoratedMeta, this._decorateMethod);

      const rxtx = this._decorateExtrinsics(decoratedMeta, this._rxDecorateMethod);

      if (fromEmpty || !this._extrinsics) {
        this._extrinsics = tx;
        this._rx.tx = rxtx;
      } else {
        augmentObject('tx', tx, this._extrinsics, false);
        augmentObject(null, rxtx, this._rx.tx, false);
      }

      augmentObject(null, decoratedMeta.consts, this._rx.consts, fromEmpty);
      this.emit('decorated');
    }
    /**
     * @deprecated
     * backwards compatible endpoint for metadata injection, may be removed in the future (However, it is still useful for testing injection)
     */


    injectMetadata(metadata, fromEmpty, registry) {
      this._injectMetadata({
        metadata,
        registry: registry || this.#registry,
        runtimeVersion: this.#registry.createType('RuntimeVersionPartial')
      }, fromEmpty);
    }

    _decorateFunctionMeta(input, output) {
      output.meta = input.meta;
      output.method = input.method;
      output.section = input.section;
      output.toJSON = input.toJSON;

      if (input.callIndex) {
        output.callIndex = input.callIndex;
      }

      return output;
    } // Filter all RPC methods based on the results of the rpc_methods call. We do this in the following
    // manner to cater for both old and new:
    //   - when the number of entries are 0, only remove the ones with isOptional (account & contracts)
    //   - when non-zero, remove anything that is not in the array (we don't do this)


    _filterRpc(methods, additional) {
      // add any specific user-base RPCs
      if (Object.keys(additional).length !== 0) {
        this._rpcCore.addUserInterfaces(additional); // re-decorate, only adding any new additional interfaces


        this._decorateRpc(this._rpcCore, this._decorateMethod, this._rpc);

        this._decorateRpc(this._rpcCore, this._rxDecorateMethod, this._rx.rpc);
      }

      this._filterRpcMethods(methods);
    }

    _filterRpcMethods(exposed) {
      const hasResults = exposed.length !== 0;
      const allKnown = [...this._rpcCore.mapping.entries()];
      const allKeys = [];

      for (let i = 0; i < allKnown.length; i++) {
        const [, {
          alias,
          endpoint,
          method,
          pubsub,
          section
        }] = allKnown[i];
        allKeys.push(`${section}_${method}`);

        if (pubsub) {
          allKeys.push(`${section}_${pubsub[1]}`);
          allKeys.push(`${section}_${pubsub[2]}`);
        }

        if (alias) {
          allKeys.push(...alias);
        }

        if (endpoint) {
          allKeys.push(endpoint);
        }
      }

      const filterKey = k => !allKeys.includes(k);

      const unknown = exposed.filter(filterKey);

      if (unknown.length) {
        l$1.warn(`RPC methods not decorated: ${unknown.join(', ')}`);
      } // loop through all entries we have (populated in decorate) and filter as required
      // only remove when we have results and method missing, or with no results if optional


      for (let i = 0; i < allKnown.length; i++) {
        const [k, {
          method,
          section
        }] = allKnown[i];

        if (hasResults && !exposed.includes(k) && k !== 'rpc_methods') {
          if (this._rpc[section]) {
            delete this._rpc[section][method];
            delete this._rx.rpc[section][method];
          }
        }
      }
    }

    _decorateRpc(rpc, decorateMethod, input = {}) {
      const out = input;

      const decorateFn = (section, method) => {
        const source = rpc[section][method];
        const fn = decorateMethod(source, {
          methodName: method
        });
        fn.meta = source.meta;
        fn.raw = decorateMethod(source.raw, {
          methodName: method
        });
        return fn;
      };

      for (let s = 0; s < rpc.sections.length; s++) {
        const section = rpc.sections[s];

        if (!Object.prototype.hasOwnProperty.call(out, section)) {
          const methods = Object.keys(rpc[section]);

          const decorateInternal = method => decorateFn(section, method);

          for (let m = 0; m < methods.length; m++) {
            const method = methods[m]; //  skip subscriptions where we have a non-subscribe interface

            if (this.hasSubscriptions || !(method.startsWith('subscribe') || method.startsWith('unsubscribe'))) {
              if (!Object.prototype.hasOwnProperty.call(out, section)) {
                out[section] = {};
              }

              lazyMethod(out[section], method, decorateInternal);
            }
          }
        }
      }

      return out;
    } // only be called if supportMulti is true


    _decorateMulti(decorateMethod) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return decorateMethod(keys => (this.hasSubscriptions ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt)(keys.map(args => Array.isArray(args) ? args[0].creator.meta.type.isPlain ? [args[0].creator] : args[0].creator.meta.type.asMap.hashers.length === 1 ? [args[0].creator, args.slice(1)] : [args[0].creator, ...args.slice(1)] : [args.creator])));
    }

    _decorateMultiAt(atApi, decorateMethod, blockHash) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return decorateMethod(calls => this._rpcCore.state.queryStorageAt(calls.map(args => {
        if (Array.isArray(args)) {
          const {
            creator
          } = getAtQueryFn(atApi, args[0].creator);
          return creator.meta.type.isPlain ? [creator] : creator.meta.type.asMap.hashers.length === 1 ? [creator, args.slice(1)] : [creator, ...args.slice(1)];
        }

        return [getAtQueryFn(atApi, args.creator).creator];
      }), blockHash));
    }

    _decorateExtrinsics({
      tx
    }, decorateMethod) {
      const result = createSubmittable(this._type, this._rx, decorateMethod);

      const lazySection = section => lazyMethods({}, Object.keys(tx[section]), method => this._decorateExtrinsicEntry(tx[section][method], result));

      const sections = Object.keys(tx);

      for (let i = 0; i < sections.length; i++) {
        lazyMethod(result, sections[i], lazySection);
      }

      return result;
    }

    _decorateExtrinsicEntry(method, creator) {
      const decorated = (...params) => creator(method(...params)); // pass through the `.is`


      decorated.is = other => method.is(other); // eslint-disable-next-line @typescript-eslint/no-unsafe-return


      return this._decorateFunctionMeta(method, decorated);
    }

    _decorateStorage({
      query,
      registry
    }, decorateMethod, blockHash) {
      const result = {};

      const lazySection = section => lazyMethods({}, Object.keys(query[section]), method => blockHash ? this._decorateStorageEntryAt(registry, query[section][method], decorateMethod, blockHash) : this._decorateStorageEntry(query[section][method], decorateMethod));

      const sections = Object.keys(query);

      for (let i = 0; i < sections.length; i++) {
        lazyMethod(result, sections[i], lazySection);
      }

      return result;
    }

    _decorateStorageEntry(creator, decorateMethod) {
      const getArgs = (args, registry) => extractStorageArgs(registry || this.#registry, creator, args);

      const getQueryAt = blockHash => from(this.at(blockHash)).pipe(map(api => getAtQueryFn(api, creator))); // Disable this where it occurs for each field we are decorating

      /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


      const decorated = this._decorateStorageCall(creator, decorateMethod);

      decorated.creator = creator;
      decorated.at = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => q(...args))));
      decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args)));

      decorated.is = key => key.section === creator.section && key.method === creator.method;

      decorated.key = (...args) => u8aToHex(compactStripLength(creator(...args))[1]);

      decorated.keyPrefix = (...args) => u8aToHex(creator.keyPrefix(...args));

      decorated.range = decorateMethod((range, ...args) => this._decorateStorageRange(decorated, args, range));
      decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args)));
      decorated.sizeAt = decorateMethod((blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => this._rpcCore.state.getStorageSize(getArgs(args, q.creator.meta.registry), blockHash)))); // .keys() & .entries() only available on map types

      if (creator.iterKey && creator.meta.type.isMap) {
        decorated.entries = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapEntries(creator, null, args)));
        decorated.entriesAt = decorateMethod(memo(this.#instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => this._retrieveMapEntries(q.creator, blockHash, args)))));
        decorated.entriesPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapEntriesPaged(creator, undefined, opts)));
        decorated.keys = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapKeys(creator, null, args)));
        decorated.keysAt = decorateMethod(memo(this.#instanceId, (blockHash, ...args) => getQueryAt(blockHash).pipe(switchMap(q => this._retrieveMapKeys(q.creator, blockHash, args)))));
        decorated.keysPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapKeysPaged(creator, undefined, opts)));
      }

      if (this.supportMulti && creator.meta.type.isMap) {
        // When using double map storage function, user need to pass double map key as an array
        decorated.multi = decorateMethod(args => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map(a => [creator, [a]])) : this._retrieveMulti(args.map(a => [creator, a])));
      }
      /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


      return this._decorateFunctionMeta(creator, decorated);
    }

    _decorateStorageEntryAt(registry, creator, decorateMethod, blockHash) {
      const getArgs = args => extractStorageArgs(registry, creator, args); // Disable this where it occurs for each field we are decorating

      /* eslint-disable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


      const decorated = decorateMethod((...args) => this._rpcCore.state.getStorage(getArgs(args), blockHash));
      decorated.creator = creator;
      decorated.hash = decorateMethod((...args) => this._rpcCore.state.getStorageHash(getArgs(args), blockHash));

      decorated.is = key => key.section === creator.section && key.method === creator.method;

      decorated.key = (...args) => u8aToHex(compactStripLength(creator(creator.meta.type.isPlain ? undefined : args))[1]);

      decorated.keyPrefix = (...keys) => u8aToHex(creator.keyPrefix(...keys));

      decorated.size = decorateMethod((...args) => this._rpcCore.state.getStorageSize(getArgs(args), blockHash)); // .keys() & .entries() only available on map types

      if (creator.iterKey && creator.meta.type.isMap) {
        decorated.entries = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapEntries(creator, blockHash, args)));
        decorated.entriesPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapEntriesPaged(creator, blockHash, opts)));
        decorated.keys = decorateMethod(memo(this.#instanceId, (...args) => this._retrieveMapKeys(creator, blockHash, args)));
        decorated.keysPaged = decorateMethod(memo(this.#instanceId, opts => this._retrieveMapKeysPaged(creator, blockHash, opts)));
      }

      if (this.supportMulti && creator.meta.type.isMap) {
        // When using double map storage function, user need to pass double map key as an array
        decorated.multi = decorateMethod(args => creator.meta.type.asMap.hashers.length === 1 ? this._retrieveMulti(args.map(a => [creator, [a]]), blockHash) : this._retrieveMulti(args.map(a => [creator, a]), blockHash));
      }
      /* eslint-enable @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment */


      return this._decorateFunctionMeta(creator, decorated);
    }

    _queueStorage(call, queue) {
      const query = queue === this.#storageSubQ ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;
      let queueIdx = queue.length - 1;
      let valueIdx = 0;
      let valueObs;

      if (queueIdx === -1 || !queue[queueIdx] || queue[queueIdx][1].length === PAGE_SIZE_Q) {
        queueIdx++;
        valueObs = from( // Defer to the next tick - this aligns with nextTick in @polkadot/util,
        // however since we return a value here, we don't re-use what is there
        Promise.resolve().then(() => {
          const calls = queue[queueIdx][1];
          delete queue[queueIdx];
          return calls;
        })).pipe(switchMap(calls => query(calls)));
        queue.push([valueObs, [call]]);
      } else {
        valueObs = queue[queueIdx][0];
        valueIdx = queue[queueIdx][1].length;
        queue[queueIdx][1].push(call);
      }

      return valueObs.pipe(map(values => values[valueIdx]));
    } // Decorate the base storage call. In the case or rxjs or promise-without-callback (await)
    // we make a subscription, alternatively we push this through a single-shot query


    _decorateStorageCall(creator, decorateMethod) {
      return decorateMethod((...args) => {
        const call = extractStorageArgs(this.#registry, creator, args);

        if (!this.hasSubscriptions) {
          return this._rpcCore.state.getStorage(call);
        }

        return this._queueStorage(call, this.#storageSubQ);
      }, {
        methodName: creator.method,
        overrideNoSub: (...args) => this._queueStorage(extractStorageArgs(this.#registry, creator, args), this.#storageGetQ)
      });
    }

    _decorateStorageRange(decorated, args, range) {
      const outputType = unwrapStorageType(this.#registry, decorated.creator.meta.type, decorated.creator.meta.modifier.isOptional);
      return this._rpcCore.state.queryStorage([decorated.key(...args)], ...range).pipe(map(result => result.map(([blockHash, [value]]) => [blockHash, this.createType(outputType, value.isSome ? value.unwrap().toHex() : undefined)])));
    } // retrieve a set of values for a specific set of keys - here we chunk the keys into PAGE_SIZE sizes


    _retrieveMulti(keys, blockHash) {
      if (!keys.length) {
        return of([]);
      }

      const query = this.hasSubscriptions && !blockHash ? this._rpcCore.state.subscribeStorage : this._rpcCore.state.queryStorageAt;

      if (keys.length <= PAGE_SIZE_V) {
        return blockHash ? query(keys, blockHash) : query(keys);
      }

      return combineLatest(arrayChunk(keys, PAGE_SIZE_V).map(k => blockHash ? query(k, blockHash) : query(k))).pipe(map(arrayFlatten));
    }

    _retrieveMapKeys({
      iterKey,
      meta,
      method,
      section
    }, at, args) {
      assert$1(iterKey && meta.type.isMap, 'keys can only be retrieved on maps');
      const headKey = iterKey(...args).toHex();
      const startSubject = new BehaviorSubject(headKey);
      const query = at ? startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey, at) : startKey => this._rpcCore.state.getKeysPaged(headKey, PAGE_SIZE_K, startKey);

      const setMeta = key => key.setMeta(meta, section, method);

      return startSubject.pipe(switchMap(query), map(keys => keys.map(setMeta)), tap(keys => nextTick(() => {
        keys.length === PAGE_SIZE_K ? startSubject.next(keys[PAGE_SIZE_K - 1].toHex()) : startSubject.complete();
      })), toArray$1(), // toArray since we want to startSubject to be completed
      map(arrayFlatten));
    }

    _retrieveMapKeysPaged({
      iterKey,
      meta,
      method,
      section
    }, at, opts) {
      assert$1(iterKey && meta.type.isMap, 'keys can only be retrieved on maps');

      const setMeta = key => key.setMeta(meta, section, method);

      const query = at ? headKey => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey, at) : headKey => this._rpcCore.state.getKeysPaged(headKey, opts.pageSize, opts.startKey || headKey);
      return query(iterKey(...opts.args).toHex()).pipe(map(keys => keys.map(setMeta)));
    }

    _retrieveMapEntries(entry, at, args) {
      const query = at ? keys => this._rpcCore.state.queryStorageAt(keys, at) : keys => this._rpcCore.state.queryStorageAt(keys);
      return this._retrieveMapKeys(entry, at, args).pipe(switchMap(keys => keys.length ? combineLatest(arrayChunk(keys, PAGE_SIZE_V).map(query)).pipe(map(valsArr => arrayFlatten(valsArr).map((value, index) => [keys[index], value]))) : of([])));
    }

    _retrieveMapEntriesPaged(entry, at, opts) {
      const query = at ? keys => this._rpcCore.state.queryStorageAt(keys, at) : keys => this._rpcCore.state.queryStorageAt(keys);
      return this._retrieveMapKeysPaged(entry, at, opts).pipe(switchMap(keys => keys.length ? query(keys).pipe(map(valsArr => valsArr.map((value, index) => [keys[index], value]))) : of([])));
    }

    _decorateDeriveRx(decorateMethod) {
      var _this$_runtimeVersion, _this$_options$typesB, _this$_options$typesB2, _this$_options$typesB3;

      const specName = (_this$_runtimeVersion = this._runtimeVersion) === null || _this$_runtimeVersion === void 0 ? void 0 : _this$_runtimeVersion.specName.toString(); // Pull in derive from api-derive

      const available = getAvailableDerives(this.#instanceId, this._rx, objectSpread({}, this._options.derives, (_this$_options$typesB = this._options.typesBundle) === null || _this$_options$typesB === void 0 ? void 0 : (_this$_options$typesB2 = _this$_options$typesB.spec) === null || _this$_options$typesB2 === void 0 ? void 0 : (_this$_options$typesB3 = _this$_options$typesB2[specName || '']) === null || _this$_options$typesB3 === void 0 ? void 0 : _this$_options$typesB3.derives));
      return decorateDeriveSections(decorateMethod, available);
    }

    _decorateDerive(decorateMethod) {
      return decorateDeriveSections(decorateMethod, this._rx.derive);
    }
    /**
     * Put the `this.onCall` function of ApiRx here, because it is needed by
     * `api._rx`.
     */


    _rxDecorateMethod = method => {
      return method;
    };
  }

  const KEEPALIVE_INTERVAL = 10000;
  const l = logger('api/init');

  function textToString(t) {
    return t.toString();
  }

  var _healthTimer = /*#__PURE__*/_classPrivateFieldKey("healthTimer");

  var _registries = /*#__PURE__*/_classPrivateFieldKey("registries");

  var _updateSub = /*#__PURE__*/_classPrivateFieldKey("updateSub");

  var _waitingRegistries = /*#__PURE__*/_classPrivateFieldKey("waitingRegistries");

  var _onProviderConnect = /*#__PURE__*/_classPrivateFieldKey("onProviderConnect");

  var _onProviderDisconnect = /*#__PURE__*/_classPrivateFieldKey("onProviderDisconnect");

  var _onProviderError = /*#__PURE__*/_classPrivateFieldKey("onProviderError");

  class Init extends Decorate {
    constructor(options, type, decorateMethod) {
      super(options, type, decorateMethod); // all injected types added to the registry for overrides

      Object.defineProperty(this, _onProviderError, {
        value: _onProviderError2
      });
      Object.defineProperty(this, _onProviderDisconnect, {
        value: _onProviderDisconnect2
      });
      Object.defineProperty(this, _onProviderConnect, {
        value: _onProviderConnect2
      });
      Object.defineProperty(this, _healthTimer, {
        writable: true,
        value: null
      });
      Object.defineProperty(this, _registries, {
        writable: true,
        value: []
      });
      Object.defineProperty(this, _updateSub, {
        writable: true,
        value: null
      });
      Object.defineProperty(this, _waitingRegistries, {
        writable: true,
        value: {}
      });
      this.registry.setKnownTypes(options); // We only register the types (global) if this is not a cloned instance.
      // Do right up-front, so we get in the user types before we are actually
      // doing anything on-chain, this ensures we have the overrides in-place

      if (!options.source) {
        this.registerTypes(options.types);
      } else {
        _classPrivateFieldBase(this, _registries)[_registries] = _classPrivateFieldBase(options.source, _registries)[_registries];
      }

      this._rpc = this._decorateRpc(this._rpcCore, this._decorateMethod);
      this._rx.rpc = this._decorateRpc(this._rpcCore, this._rxDecorateMethod);

      if (this.supportMulti) {
        this._queryMulti = this._decorateMulti(this._decorateMethod);
        this._rx.queryMulti = this._decorateMulti(this._rxDecorateMethod);
      }

      this._rx.signer = options.signer;

      this._rpcCore.setRegistrySwap(blockHash => this.getBlockRegistry(blockHash));

      this._rpcCore.setResolveBlockHash(blockNumber => firstValueFrom(this._rpcCore.chain.getBlockHash(blockNumber)));

      if (this.hasSubscriptions) {
        this._rpcCore.provider.on('disconnected', () => _classPrivateFieldBase(this, _onProviderDisconnect)[_onProviderDisconnect]());

        this._rpcCore.provider.on('error', e => _classPrivateFieldBase(this, _onProviderError)[_onProviderError](e));

        this._rpcCore.provider.on('connected', () => _classPrivateFieldBase(this, _onProviderConnect)[_onProviderConnect]());
      } else {
        l.warn('Api will be available in a limited mode since the provider does not support subscriptions');
      } // If the provider was instantiated earlier, and has already emitted a
      // 'connected' event, then the `on('connected')` won't fire anymore. To
      // cater for this case, we call manually `this._onProviderConnect`.


      if (this._rpcCore.provider.isConnected) {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        _classPrivateFieldBase(this, _onProviderConnect)[_onProviderConnect]();
      }
    }
    /**
     * @description Decorates a registry based on the runtime version
     */


    _initRegistry(registry, chain, version, metadata, chainProps) {
      registry.clearCache();
      registry.setChainProperties(chainProps || this.registry.getChainProperties());
      registry.setKnownTypes(this._options);
      registry.register(getSpecTypes(registry, chain, version.specName, version.specVersion));
      registry.setHasher(getSpecHasher(registry, chain, version.specName)); // for bundled types, pull through the aliases defined

      if (registry.knownTypes.typesBundle) {
        registry.knownTypes.typesAlias = getSpecAlias(registry, chain, version.specName);
      }

      registry.setMetadata(metadata, undefined, objectSpread({}, getSpecExtensions(registry, chain, version.specName), this._options.signedExtensions));
    }
    /**
     * @description Returns the default versioned registry
     */


    _getDefaultRegistry() {
      return assertReturn(_classPrivateFieldBase(this, _registries)[_registries].find(({
        isDefault
      }) => isDefault), 'Initialization error, cannot find the default registry');
    }
    /**
     * @description Returns a decorated API instance at a specific point in time
     */


    async at(blockHash, knownVersion) {
      const u8aHash = u8aToU8a(blockHash);
      const registry = await this.getBlockRegistry(u8aHash, knownVersion); // always create a new decoration - since we are pointing to a specific hash, this
      // means that all queries needs to use that hash (not a previous one already existing)

      return this._createDecorated(registry, true, null, u8aHash).decoratedApi;
    }

    async _createBlockRegistry(blockHash, header, version) {
      const registry = new TypeRegistry(blockHash);
      const metadata = new Metadata(registry, await firstValueFrom(this._rpcCore.state.getMetadata.raw(header.parentHash)));

      this._initRegistry(registry, this._runtimeChain, version, metadata); // add our new registry


      const result = {
        lastBlockHash: blockHash,
        metadata,
        registry,
        runtimeVersion: version
      };

      _classPrivateFieldBase(this, _registries)[_registries].push(result);

      return result;
    }

    _cacheBlockRegistryProgress(key, creator) {
      // look for waiting resolves
      let waiting = _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];

      if (isUndefined$1(waiting)) {
        // nothing waiting, construct new
        waiting = _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key] = new Promise((resolve, reject) => {
          creator().then(registry => {
            delete _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];
            resolve(registry);
          }).catch(error => {
            delete _classPrivateFieldBase(this, _waitingRegistries)[_waitingRegistries][key];
            reject(error);
          });
        });
      }

      return waiting;
    }

    _getBlockRegistryViaVersion(blockHash, version) {
      if (version) {
        // check for pre-existing registries. We also check specName, e.g. it
        // could be changed like in Westmint with upgrade from shell -> westmint
        const existingViaVersion = _classPrivateFieldBase(this, _registries)[_registries].find(({
          runtimeVersion: {
            specName,
            specVersion
          }
        }) => specName.eq(version.specName) && specVersion.eq(version.specVersion));

        if (existingViaVersion) {
          existingViaVersion.lastBlockHash = blockHash;
          return existingViaVersion;
        }
      }

      return null;
    }

    async _getBlockRegistryViaHash(blockHash) {
      // ensure we have everything required
      assert$1(this._genesisHash && this._runtimeVersion, 'Cannot retrieve data on an uninitialized chain'); // We have to assume that on the RPC layer the calls used here does not call back into
      // the registry swap, so getHeader & getRuntimeVersion should not be historic

      const header = this.registry.createType('HeaderPartial', this._genesisHash.eq(blockHash) ? {
        number: BN_ZERO,
        parentHash: this._genesisHash
      } : await firstValueFrom(this._rpcCore.chain.getHeader.raw(blockHash)));
      assert$1(!header.parentHash.isEmpty, 'Unable to retrieve header and parent from supplied hash'); // get the runtime version, either on-chain or via an known upgrade history

      const [firstVersion, lastVersion] = getUpgradeVersion(this._genesisHash, header.number);
      const version = this.registry.createType('RuntimeVersionPartial', firstVersion && (lastVersion || firstVersion.specVersion.eq(this._runtimeVersion.specVersion)) ? {
        specName: this._runtimeVersion.specName,
        specVersion: firstVersion.specVersion
      } : await firstValueFrom(this._rpcCore.state.getRuntimeVersion.raw(header.parentHash)));
      return (// try to find via version
        this._getBlockRegistryViaVersion(blockHash, version) || ( // return new or in-flight result
        await this._cacheBlockRegistryProgress(version.toHex(), () => this._createBlockRegistry(blockHash, header, version)))
      );
    }
    /**
     * @description Sets up a registry based on the block hash defined
     */


    async getBlockRegistry(blockHash, knownVersion) {
      return (// try to find via blockHash
        _classPrivateFieldBase(this, _registries)[_registries].find(({
          lastBlockHash
        }) => lastBlockHash && u8aEq(lastBlockHash, blockHash)) || // try to find via version
        this._getBlockRegistryViaVersion(blockHash, knownVersion) || ( // return new or in-flight result
        await this._cacheBlockRegistryProgress(u8aToHex(blockHash), () => this._getBlockRegistryViaHash(blockHash)))
      );
    }

    async _loadMeta() {
      var _this$_options$source;

      // on re-connection to the same chain, we don't want to re-do everything from chain again
      if (this._isReady) {
        return true;
      }

      this._unsubscribeUpdates(); // only load from on-chain if we are not a clone (default path), alternatively
      // just use the values from the source instance provided


      [this._genesisHash, this._runtimeMetadata] = (_this$_options$source = this._options.source) !== null && _this$_options$source !== void 0 && _this$_options$source._isReady ? await this._metaFromSource(this._options.source) : await this._metaFromChain(this._options.metadata);
      return this._initFromMeta(this._runtimeMetadata);
    } // eslint-disable-next-line @typescript-eslint/require-await


    async _metaFromSource(source) {
      this._extrinsicType = source.extrinsicVersion;
      this._runtimeChain = source.runtimeChain;
      this._runtimeVersion = source.runtimeVersion; // manually build a list of all available methods in this RPC, we are
      // going to filter on it to align the cloned RPC without making a call

      const sections = Object.keys(source.rpc);
      const rpcs = [];

      for (let s = 0; s < sections.length; s++) {
        const section = sections[s];
        const methods = Object.keys(source.rpc[section]);

        for (let m = 0; m < methods.length; m++) {
          rpcs.push(`${section}_${methods[m]}`);
        }
      }

      this._filterRpc(rpcs, getSpecRpc(this.registry, source.runtimeChain, source.runtimeVersion.specName));

      return [source.genesisHash, source.runtimeMetadata];
    } // subscribe to metadata updates, inject the types on changes


    _subscribeUpdates() {
      if (_classPrivateFieldBase(this, _updateSub)[_updateSub] || !this.hasSubscriptions) {
        return;
      }

      _classPrivateFieldBase(this, _updateSub)[_updateSub] = this._rpcCore.state.subscribeRuntimeVersion().pipe(switchMap(version => {
        var _this$_runtimeVersion;

        return (// only retrieve the metadata when the on-chain version has been changed
          (_this$_runtimeVersion = this._runtimeVersion) !== null && _this$_runtimeVersion !== void 0 && _this$_runtimeVersion.specVersion.eq(version.specVersion) ? of(false) : this._rpcCore.state.getMetadata().pipe(map(metadata => {
            l.log(`Runtime version updated to spec=${version.specVersion.toString()}, tx=${version.transactionVersion.toString()}`);
            this._runtimeMetadata = metadata;
            this._runtimeVersion = version;
            this._rx.runtimeVersion = version; // update the default registry version

            const thisRegistry = this._getDefaultRegistry(); // setup the data as per the current versions


            thisRegistry.metadata = metadata;
            thisRegistry.runtimeVersion = version;

            this._initRegistry(this.registry, this._runtimeChain, version, metadata);

            this._injectMetadata(thisRegistry, true);

            return true;
          }))
        );
      })).subscribe();
    }

    async _metaFromChain(optMetadata) {
      const [genesisHash, runtimeVersion, chain, chainProps, rpcMethods, chainMetadata] = await Promise.all([firstValueFrom(this._rpcCore.chain.getBlockHash(0)), firstValueFrom(this._rpcCore.state.getRuntimeVersion()), firstValueFrom(this._rpcCore.system.chain()), firstValueFrom(this._rpcCore.system.properties()), firstValueFrom(this._rpcCore.rpc.methods()), optMetadata ? Promise.resolve(null) : firstValueFrom(this._rpcCore.state.getMetadata())]); // set our chain version & genesisHash as returned

      this._runtimeChain = chain;
      this._runtimeVersion = runtimeVersion;
      this._rx.runtimeVersion = runtimeVersion; // retrieve metadata, either from chain  or as pass-in via options

      const metadataKey = `${genesisHash.toHex() || '0x'}-${runtimeVersion.specVersion.toString()}`;
      const metadata = chainMetadata || (optMetadata && optMetadata[metadataKey] ? new Metadata(this.registry, optMetadata[metadataKey]) : await firstValueFrom(this._rpcCore.state.getMetadata())); // initializes the registry & RPC

      this._initRegistry(this.registry, chain, runtimeVersion, metadata, chainProps);

      this._filterRpc(rpcMethods.methods.map(textToString), getSpecRpc(this.registry, chain, runtimeVersion.specName));

      this._subscribeUpdates(); // setup the initial registry, when we have none


      if (!_classPrivateFieldBase(this, _registries)[_registries].length) {
        _classPrivateFieldBase(this, _registries)[_registries].push({
          isDefault: true,
          metadata,
          registry: this.registry,
          runtimeVersion
        });
      } // get unique types & validate


      metadata.getUniqTypes(this._options.throwOnUnknown || false);
      return [genesisHash, metadata];
    }

    _initFromMeta(metadata) {
      this._extrinsicType = metadata.asLatest.extrinsic.version.toNumber();
      this._rx.extrinsicType = this._extrinsicType;
      this._rx.genesisHash = this._genesisHash;
      this._rx.runtimeVersion = this._runtimeVersion; // must be set here
      // inject metadata and adjust the types as detected

      this._injectMetadata(this._getDefaultRegistry(), true); // derive is last, since it uses the decorated rx


      this._rx.derive = this._decorateDeriveRx(this._rxDecorateMethod);
      this._derive = this._decorateDerive(this._decorateMethod);
      return true;
    }

    _subscribeHealth() {
      // Only enable the health keepalive on WS, not needed on HTTP
      _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = this.hasSubscriptions ? setInterval(() => {
        firstValueFrom(this._rpcCore.system.health.raw()).catch(() => undefined);
      }, KEEPALIVE_INTERVAL) : null;
    }

    _unsubscribeHealth() {
      if (_classPrivateFieldBase(this, _healthTimer)[_healthTimer]) {
        clearInterval(_classPrivateFieldBase(this, _healthTimer)[_healthTimer]);
        _classPrivateFieldBase(this, _healthTimer)[_healthTimer] = null;
      }
    }

    _unsubscribeUpdates() {
      if (_classPrivateFieldBase(this, _updateSub)[_updateSub]) {
        _classPrivateFieldBase(this, _updateSub)[_updateSub].unsubscribe();

        _classPrivateFieldBase(this, _updateSub)[_updateSub] = null;
      }
    }

    _unsubscribe() {
      this._unsubscribeHealth();

      this._unsubscribeUpdates();
    }

  }

  async function _onProviderConnect2() {
    this._isConnected.next(true);

    this.emit('connected');

    try {
      const cryptoReady = this._options.initWasm === false ? true : await cryptoWaitReady();
      const hasMeta = await this._loadMeta();

      this._subscribeHealth();

      if (hasMeta && !this._isReady && cryptoReady) {
        this._isReady = true;
        this.emit('ready', this);
      }
    } catch (_error) {
      const error = new Error(`FATAL: Unable to initialize the API: ${_error.message}`);
      l.error(error);
      this.emit('error', error);
    }
  }

  function _onProviderDisconnect2() {
    this._isConnected.next(false);

    this._unsubscribeHealth();

    this.emit('disconnected');
  }

  function _onProviderError2(error) {
    this.emit('error', error);
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors

  function assertResult(value) {
    return assertReturn(value, 'Api needs to be initialized before using, listen on \'ready\'');
  }

  class Getters extends Init {
    /**
     * @description Contains the parameter types (constants) of all modules.
     *
     * The values are instances of the appropriate type and are accessible using `section`.`constantName`,
     *
     * @example
     * <BR>
     *
     * ```javascript
     * console.log(api.consts.democracy.enactmentPeriod.toString())
     * ```
     */
    get consts() {
      return assertResult(this._consts);
    }
    /**
     * @description Derived results that are injected into the API, allowing for combinations of various query results.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.derive.chain.bestNumber((number) => {
     *   console.log('best number', number);
     * });
     * ```
     */


    get derive() {
      return assertResult(this._derive);
    }
    /**
     * @description Errors from metadata
     */


    get errors() {
      return assertResult(this._errors);
    }
    /**
     * @description Events from metadata
     */


    get events() {
      return assertResult(this._events);
    }
    /**
     * @description  Returns the version of extrinsics in-use on this chain
     */


    get extrinsicVersion() {
      return this._extrinsicType;
    }
    /**
     * @description Contains the genesis Hash of the attached chain. Apart from being useful to determine the actual chain, it can also be used to sign immortal transactions.
     */


    get genesisHash() {
      return assertResult(this._genesisHash);
    }
    /**
     * @description true is the underlying provider is connected
     */


    get isConnected() {
      return this._isConnected.getValue();
    }
    /**
     * @description The library information name & version (from package.json)
     */


    get libraryInfo() {
      return `${packageInfo$3.name} v${packageInfo$3.version}`;
    }
    /**
     * @description Contains all the chain state modules and their subsequent methods in the API. These are attached dynamically from the runtime metadata.
     *
     * All calls inside the namespace, is denoted by `section`.`method` and may take an optional query parameter. As an example, `api.query.timestamp.now()` (current block timestamp) does not take parameters, while `api.query.system.account(<accountId>)` (retrieving the associated nonce & balances for an account), takes the `AccountId` as a parameter.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.query.system.account(<accountId>, ([nonce, balance]) => {
     *   console.log('new free balance', balance.free, 'new nonce', nonce);
     * });
     * ```
     */


    get query() {
      return assertResult(this._query);
    }
    /**
     * @description Allows for the querying of multiple storage entries and the combination thereof into a single result. This is a very optimal way to make multiple queries since it only makes a single connection to the node and retrieves the data over one subscription.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * const unsub = await api.queryMulti(
     *   [
     *     // you can include the storage without any parameters
     *     api.query.balances.totalIssuance,
     *     // or you can pass parameters to the storage query
     *     [api.query.system.account, '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY']
     *   ],
     *   ([existential, [, { free }]]) => {
     *     console.log(`You have ${free.sub(existential)} more than the existential deposit`);
     *
     *     unsub();
     *   }
     * );
     * ```
     */


    get queryMulti() {
      return assertResult(this._queryMulti);
    }
    /**
     * @description Contains all the raw rpc sections and their subsequent methods in the API as defined by the jsonrpc interface definitions. Unlike the dynamic `api.query` and `api.tx` sections, these methods are fixed (although extensible with node upgrades) and not determined by the runtime.
     *
     * RPC endpoints available here allow for the query of chain, node and system information, in addition to providing interfaces for the raw queries of state (using known keys) and the submission of transactions.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.rpc.chain.subscribeNewHeads((header) => {
     *   console.log('new header', header);
     * });
     * ```
     */


    get rpc() {
      return assertResult(this._rpc);
    }
    /**
     * @description Contains the chain information for the current node.
     */


    get runtimeChain() {
      return assertResult(this._runtimeChain);
    }
    /**
     * @description Yields the current attached runtime metadata. Generally this is only used to construct extrinsics & storage, but is useful for current runtime inspection.
     */


    get runtimeMetadata() {
      return assertResult(this._runtimeMetadata);
    }
    /**
     * @description Contains the version information for the current runtime.
     */


    get runtimeVersion() {
      return assertResult(this._runtimeVersion);
    }
    /**
     * @description The underlying Rx API interface
     */


    get rx() {
      return assertResult(this._rx);
    }
    /**
     * @description Returns the underlying provider stats
     */


    get stats() {
      return this._rpcCore.provider.stats;
    }
    /**
     * @description The type of this API instance, either 'rxjs' or 'promise'
     */


    get type() {
      return this._type;
    }
    /**
     * @description Contains all the extrinsic modules and their subsequent methods in the API. It allows for the construction of transactions and the submission thereof. These are attached dynamically from the runtime metadata.
     *
     * @example
     * <BR>
     *
     * ```javascript
     * api.tx.balances
     *   .transfer(<recipientId>, <balance>)
     *   .signAndSend(<keyPair>, ({status}) => {
     *     console.log('tx status', status.asFinalized.toHex());
     *   });
     * ```
     */


    get tx() {
      return assertResult(this._extrinsics);
    }
    /**
     * @description Finds the definition for a specific [[CallFunction]] based on the index supplied
     */


    findCall(callIndex) {
      return findCall(this.registry, callIndex);
    }
    /**
     * @description Finds the definition for a specific [[RegistryError]] based on the index supplied
     */


    findError(errorIndex) {
      return findError(this.registry, errorIndex);
    }

  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  class ApiBase extends Getters {
    /**
     * @description Create an instance of the class
     *
     * @param options Options object to create API instance or a Provider instance
     *
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * const api = new Api().isReady();
     *
     * api.rpc.subscribeNewHeads((header) => {
     *   console.log(`new block #${header.number.toNumber()}`);
     * });
     * ```
     */
    constructor(options = {}, type, decorateMethod) {
      super(options, type, decorateMethod);
    }
    /**
     * @description Connect from the underlying provider, halting all network traffic
     */


    connect() {
      return this._rpcCore.connect();
    }
    /**
     * @description Disconnect from the underlying provider, halting all network traffic
     */


    disconnect() {
      this._unsubscribe();

      return this._rpcCore.disconnect();
    }
    /**
     * @description Set an external signer which will be used to sign extrinsic when account passed in is not KeyringPair
     */


    setSigner(signer) {
      this._rx.signer = signer;
    }
    /**
     * @description Signs a raw signer payload, string or Uint8Array
     */


    async sign(address, data, {
      signer
    } = {}) {
      if (isString$1(address)) {
        const _signer = signer || this._rx.signer;

        assert$1(_signer === null || _signer === void 0 ? void 0 : _signer.signRaw, 'No signer exists with a signRaw interface. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');
        return (await _signer.signRaw(objectSpread({
          type: 'bytes'
        }, data, {
          address
        }))).signature;
      }

      return u8aToHex(address.sign(u8aToU8a(data.data)));
    }

  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  class Combinator {
    #allHasFired = false;
    #callback;
    #fired = [];
    #fns = [];
    #isActive = true;
    #results = [];
    #subscriptions = [];

    constructor(fns, callback) {
      this.#callback = callback; // eslint-disable-next-line @typescript-eslint/require-await

      this.#subscriptions = fns.map(async (input, index) => {
        const [fn, ...args] = Array.isArray(input) ? input : [input];
        this.#fired.push(false);
        this.#fns.push(fn); // Not quite 100% how to have a variable number at the front here
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/ban-types

        return fn(...args, this._createCallback(index));
      });
    }

    _allHasFired() {
      this.#allHasFired || (this.#allHasFired = this.#fired.filter(hasFired => !hasFired).length === 0);
      return this.#allHasFired;
    }

    _createCallback(index) {
      return value => {
        this.#fired[index] = true;
        this.#results[index] = value;

        this._triggerUpdate();
      };
    }

    _triggerUpdate() {
      if (!this.#isActive || !isFunction$2(this.#callback) || !this._allHasFired()) {
        return;
      }

      try {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.#callback(this.#results);
      } catch (error) {// swallow, we don't want the handler to trip us up
      }
    }

    unsubscribe() {
      if (!this.#isActive) {
        return;
      }

      this.#isActive = false; // eslint-disable-next-line @typescript-eslint/no-misused-promises

      this.#subscriptions.forEach(async subscription => {
        try {
          const unsubscribe = await subscription;

          if (isFunction$2(unsubscribe)) {
            unsubscribe();
          }
        } catch (error) {// ignore
        }
      });
    }

  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  // a Promise completion tracker, wrapping an isComplete variable that ensures
  // that the promise only resolves once
  function promiseTracker(resolve, reject) {
    let isCompleted = false;
    return {
      reject: error => {
        if (!isCompleted) {
          isCompleted = true;
          reject(error);
        }

        return EMPTY;
      },
      resolve: value => {
        if (!isCompleted) {
          isCompleted = true;
          resolve(value);
        }
      }
    };
  } // extract the arguments and callback params from a value array possibly containing a callback

  function extractArgs(args, needsCallback) {
    const actualArgs = args.slice(); // If the last arg is a function, we pop it, put it into callback.
    // actualArgs will then hold the actual arguments to be passed to `method`

    const callback = args.length && isFunction$2(args[args.length - 1]) ? actualArgs.pop() : undefined; // When we need a subscription, ensure that a valid callback is actually passed

    assert$1(!needsCallback || isFunction$2(callback), 'Expected a callback to be passed with subscriptions');
    return [actualArgs, callback];
  } // Decorate a call for a single-shot result - retrieve and then immediate unsubscribe


  function decorateCall(method, args) {
    return new Promise((resolve, reject) => {
      // single result tracker - either reject with Error or resolve with Codec result
      const tracker = promiseTracker(resolve, reject); // encoding errors reject immediately, any result unsubscribes and resolves

      const subscription = method(...args).pipe(catchError(error => tracker.reject(error))).subscribe(result => {
        tracker.resolve(result);
        nextTick(() => subscription.unsubscribe());
      });
    });
  } // Decorate a subscription where we have a result callback specified


  function decorateSubscribe(method, args, resultCb) {
    return new Promise((resolve, reject) => {
      // either reject with error or resolve with unsubscribe callback
      const tracker = promiseTracker(resolve, reject); // errors reject immediately, the first result resolves with an unsubscribe promise, all results via callback

      const subscription = method(...args).pipe(catchError(error => tracker.reject(error)), tap(() => tracker.resolve(() => subscription.unsubscribe()))).subscribe(result => {
        // queue result (back of queue to clear current)
        nextTick(() => resultCb(result));
      });
    });
  }
  /**
   * @description Decorate method for ApiPromise, where the results are converted to the Promise equivalent
   */


  function toPromiseMethod(method, options) {
    const needsCallback = !!(options && options.methodName && options.methodName.includes('subscribe'));
    return function (...args) {
      const [actualArgs, resultCb] = extractArgs(args, needsCallback);
      return resultCb ? decorateSubscribe(method, actualArgs, resultCb) : decorateCall((options === null || options === void 0 ? void 0 : options.overrideNoSub) || method, actualArgs);
    };
  }

  // Copyright 2017-2022 @polkadot/api authors & contributors
  /**
   * # @polkadot/api/promise
   *
   * ## Overview
   *
   * @name ApiPromise
   * @description
   * ApiPromise is a standard JavaScript wrapper around the RPC and interfaces on the Polkadot network. As a full Promise-based, all interface calls return Promises, including the static `.create(...)`. Subscription calls utilise `(value) => {}` callbacks to pass through the latest values.
   *
   * The API is well suited to real-time applications where either the single-shot state is needed or use is to be made of the subscription-based features of Polkadot (and Substrate) clients.
   *
   * @see [[ApiRx]]
   *
   * ## Usage
   *
   * Making rpc calls -
   * <BR>
   *
   * ```javascript
   * import ApiPromise from '@polkadot/api/promise';
   *
   * // initialise via static create
   * const api = await ApiPromise.create();
   *
   * // make a subscription to the network head
   * api.rpc.chain.subscribeNewHeads((header) => {
   *   console.log(`Chain is at #${header.number}`);
   * });
   * ```
   * <BR>
   *
   * Subscribing to chain state -
   * <BR>
   *
   * ```javascript
   * import { ApiPromise, WsProvider } from '@polkadot/api';
   *
   * // initialise a provider with a specific endpoint
   * const provider = new WsProvider('wss://example.com:9944')
   *
   * // initialise via isReady & new with specific provider
   * const api = await new ApiPromise({ provider }).isReady;
   *
   * // retrieve the block target time
   * const blockPeriod = await api.query.timestamp.blockPeriod().toNumber();
   * let last = 0;
   *
   * // subscribe to the current block timestamp, updates automatically (callback provided)
   * api.query.timestamp.now((timestamp) => {
   *   const elapsed = last
   *     ? `, ${timestamp.toNumber() - last}s since last`
   *     : '';
   *
   *   last = timestamp.toNumber();
   *   console.log(`timestamp ${timestamp}${elapsed} (${blockPeriod}s target)`);
   * });
   * ```
   * <BR>
   *
   * Submitting a transaction -
   * <BR>
   *
   * ```javascript
   * import ApiPromise from '@polkadot/api/promise';
   *
   * ApiPromise.create().then((api) => {
   *   const [nonce] = await api.query.system.account(keyring.alice.address);
   *
   *   api.tx.balances
   *     // create transfer
   *     transfer(keyring.bob.address, 12345)
   *     // sign the transcation
   *     .sign(keyring.alice, { nonce })
   *     // send the transaction (optional status callback)
   *     .send((status) => {
   *       console.log(`current status ${status.type}`);
   *     })
   *     // retrieve the submitted extrinsic hash
   *     .then((hash) => {
   *       console.log(`submitted with hash ${hash}`);
   *     });
   * });
   * ```
   */

  class ApiPromise extends ApiBase {
    #isReadyPromise;
    #isReadyOrErrorPromise;
    /**
     * @description Creates an instance of the ApiPromise class
     * @param options Options to create an instance. This can be either [[ApiOptions]] or
     * an [[WsProvider]].
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * new Api().isReady.then((api) => {
     *   api.rpc.subscribeNewHeads((header) => {
     *     console.log(`new block #${header.number.toNumber()}`);
     *   });
     * });
     * ```
     */

    constructor(options) {
      super(options, 'promise', toPromiseMethod);
      this.#isReadyPromise = new Promise(resolve => {
        super.once('ready', () => resolve(this));
      });
      this.#isReadyOrErrorPromise = new Promise((resolve, reject) => {
        const tracker = promiseTracker(resolve, reject);
        super.once('ready', () => tracker.resolve(this));
        super.once('error', error => tracker.reject(error));
      });
    }
    /**
     * @description Creates an ApiPromise instance using the supplied provider. Returns an Promise containing the actual Api instance.
     * @param options options that is passed to the class contructor. Can be either [[ApiOptions]] or a
     * provider (see the constructor arguments)
     * @example
     * <BR>
     *
     * ```javascript
     * import Api from '@polkadot/api/promise';
     *
     * Api.create().then(async (api) => {
     *   const timestamp = await api.query.timestamp.now();
     *
     *   console.log(`lastest block timestamp ${timestamp}`);
     * });
     * ```
     */


    static create(options) {
      const instance = new ApiPromise(options);

      if (options && options.throwOnConnect) {
        return instance.isReadyOrError;
      } // Swallow any rejections on isReadyOrError
      // (in Node 15.x this creates issues, when not being looked at)


      instance.isReadyOrError.catch(() => {// ignore
      });
      return instance.isReady;
    }
    /**
     * @description Promise that resolves the first time we are connected and loaded
     */


    get isReady() {
      return this.#isReadyPromise;
    }
    /**
     * @description Promise that resolves if we can connect, or reject if there is an error
     */


    get isReadyOrError() {
      return this.#isReadyOrErrorPromise;
    }
    /**
     * @description Returns a clone of this ApiPromise instance (new underlying provider connection)
     */


    clone() {
      return new ApiPromise(objectSpread({}, this._options, {
        source: this
      }));
    }
    /**
     * @description Creates a combinator that can be used to combine the latest results from multiple subscriptions
     * @param fns An array of function to combine, each in the form of `(cb: (value: void)) => void`
     * @param callback A callback that will return an Array of all the values this combinator has been applied to
     * @example
     * <BR>
     *
     * ```javascript
     * const address = '5DTestUPts3kjeXSTMyerHihn1uwMfLj8vU8sqF7qYrFacT7';
     *
     * // combines values from balance & nonce as it updates
     * api.combineLatest([
     *   api.rpc.chain.subscribeNewHeads,
     *   (cb) => api.query.system.account(address, cb)
     * ], ([head, [balance, nonce]]) => {
     *   console.log(`#${head.number}: You have ${balance.free} units, with ${nonce} transactions sent`);
     * });
     * ```
     */
    // eslint-disable-next-line @typescript-eslint/require-await


    async combineLatest(fns, callback) {
      const combinator = new Combinator(fns, callback);
      return () => {
        combinator.unsubscribe();
      };
    }

  }

  var encrypter = {};

  var ecb = {};

  ecb.encrypt = function (self, block) {
    return self._cipher.encryptBlock(block)
  };

  ecb.decrypt = function (self, block) {
    return self._cipher.decryptBlock(block)
  };

  var cbc = {};

  var bufferXor = function xor (a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new Buffer$f(length);

    for (var i = 0; i < length; ++i) {
      buffer[i] = a[i] ^ b[i];
    }

    return buffer
  };

  var xor$4 = bufferXor;

  cbc.encrypt = function (self, block) {
    var data = xor$4(block, self._prev);

    self._prev = self._cipher.encryptBlock(data);
    return self._prev
  };

  cbc.decrypt = function (self, block) {
    var pad = self._prev;

    self._prev = block;
    var out = self._cipher.decryptBlock(block);

    return xor$4(out, pad)
  };

  var cfb = {};

  var safeBuffer = {exports: {}};

  var buffer = {};

  var base64Js = {};

  base64Js.byteLength = byteLength;
  base64Js.toByteArray = toByteArray;
  base64Js.fromByteArray = fromByteArray;

  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
  }

  // Support decoding URL-safe base64 strings, as Node.js does.
  // See: https://en.wikipedia.org/wiki/Base64#URL_applications
  revLookup['-'.charCodeAt(0)] = 62;
  revLookup['_'.charCodeAt(0)] = 63;

  function getLens (b64) {
    var len = b64.length;

    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;

    var placeHoldersLen = validLen === len
      ? 0
      : 4 - (validLen % 4);

    return [validLen, placeHoldersLen]
  }

  // base64 is 4/3 + up to two characters of the original data
  function byteLength (b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  }

  function _byteLength (b64, validLen, placeHoldersLen) {
    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  }

  function toByteArray (b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];

    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

    var curByte = 0;

    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0
      ? validLen - 4
      : validLen;

    var i;
    for (i = 0; i < len; i += 4) {
      tmp =
        (revLookup[b64.charCodeAt(i)] << 18) |
        (revLookup[b64.charCodeAt(i + 1)] << 12) |
        (revLookup[b64.charCodeAt(i + 2)] << 6) |
        revLookup[b64.charCodeAt(i + 3)];
      arr[curByte++] = (tmp >> 16) & 0xFF;
      arr[curByte++] = (tmp >> 8) & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 2) {
      tmp =
        (revLookup[b64.charCodeAt(i)] << 2) |
        (revLookup[b64.charCodeAt(i + 1)] >> 4);
      arr[curByte++] = tmp & 0xFF;
    }

    if (placeHoldersLen === 1) {
      tmp =
        (revLookup[b64.charCodeAt(i)] << 10) |
        (revLookup[b64.charCodeAt(i + 1)] << 4) |
        (revLookup[b64.charCodeAt(i + 2)] >> 2);
      arr[curByte++] = (tmp >> 8) & 0xFF;
      arr[curByte++] = tmp & 0xFF;
    }

    return arr
  }

  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] +
      lookup[num >> 12 & 0x3F] +
      lookup[num >> 6 & 0x3F] +
      lookup[num & 0x3F]
  }

  function encodeChunk (uint8, start, end) {
    var tmp;
    var output = [];
    for (var i = start; i < end; i += 3) {
      tmp =
        ((uint8[i] << 16) & 0xFF0000) +
        ((uint8[i + 1] << 8) & 0xFF00) +
        (uint8[i + 2] & 0xFF);
      output.push(tripletToBase64(tmp));
    }
    return output.join('')
  }

  function fromByteArray (uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
    var parts = [];
    var maxChunkLength = 16383; // must be multiple of 3

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(
        lookup[tmp >> 2] +
        lookup[(tmp << 4) & 0x3F] +
        '=='
      );
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(
        lookup[tmp >> 10] +
        lookup[(tmp >> 4) & 0x3F] +
        lookup[(tmp << 2) & 0x3F] +
        '='
      );
    }

    return parts.join('')
  }

  var ieee754 = {};

  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

  ieee754.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? (nBytes - 1) : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];

    i += d;

    e = s & ((1 << (-nBits)) - 1);
    s >>= (-nBits);
    nBits += eLen;
    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    m = e & ((1 << (-nBits)) - 1);
    e >>= (-nBits);
    nBits += mLen;
    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  };

  ieee754.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = (nBytes * 8) - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
    var i = isLE ? 0 : (nBytes - 1);
    var d = isLE ? 1 : -1;
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

    value = Math.abs(value);

    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }

      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = ((value * c) - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }

    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

    e = (e << mLen) | m;
    eLen += mLen;
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

    buffer[offset + i - d] |= s * 128;
  };

  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */

  (function (exports) {

  	const base64 = base64Js;
  	const ieee754$1 = ieee754;
  	const customInspectSymbol =
  	  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
  	    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
  	    : null;

  	exports.Buffer = Buffer;
  	exports.SlowBuffer = SlowBuffer;
  	exports.INSPECT_MAX_BYTES = 50;

  	const K_MAX_LENGTH = 0x7fffffff;
  	exports.kMaxLength = K_MAX_LENGTH;

  	/**
  	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
  	 *   === true    Use Uint8Array implementation (fastest)
  	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
  	 *               implementation (most compatible, even IE6)
  	 *
  	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
  	 * Opera 11.6+, iOS 4.2+.
  	 *
  	 * We report that the browser does not support typed arrays if the are not subclassable
  	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
  	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
  	 * for __proto__ and has a buggy typed array implementation.
  	 */
  	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

  	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
  	    typeof console.error === 'function') {
  	  console.error(
  	    'This browser lacks typed array (Uint8Array) support which is required by ' +
  	    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  	  );
  	}

  	function typedArraySupport () {
  	  // Can typed array instances can be augmented?
  	  try {
  	    const arr = new Uint8Array(1);
  	    const proto = { foo: function () { return 42 } };
  	    Object.setPrototypeOf(proto, Uint8Array.prototype);
  	    Object.setPrototypeOf(arr, proto);
  	    return arr.foo() === 42
  	  } catch (e) {
  	    return false
  	  }
  	}

  	Object.defineProperty(Buffer.prototype, 'parent', {
  	  enumerable: true,
  	  get: function () {
  	    if (!Buffer.isBuffer(this)) return undefined
  	    return this.buffer
  	  }
  	});

  	Object.defineProperty(Buffer.prototype, 'offset', {
  	  enumerable: true,
  	  get: function () {
  	    if (!Buffer.isBuffer(this)) return undefined
  	    return this.byteOffset
  	  }
  	});

  	function createBuffer (length) {
  	  if (length > K_MAX_LENGTH) {
  	    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  	  }
  	  // Return an augmented `Uint8Array` instance
  	  const buf = new Uint8Array(length);
  	  Object.setPrototypeOf(buf, Buffer.prototype);
  	  return buf
  	}

  	/**
  	 * The Buffer constructor returns instances of `Uint8Array` that have their
  	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
  	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
  	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
  	 * returns a single octet.
  	 *
  	 * The `Uint8Array` prototype remains unmodified.
  	 */

  	function Buffer (arg, encodingOrOffset, length) {
  	  // Common case.
  	  if (typeof arg === 'number') {
  	    if (typeof encodingOrOffset === 'string') {
  	      throw new TypeError(
  	        'The "string" argument must be of type string. Received type number'
  	      )
  	    }
  	    return allocUnsafe(arg)
  	  }
  	  return from(arg, encodingOrOffset, length)
  	}

  	Buffer.poolSize = 8192; // not used by this implementation

  	function from (value, encodingOrOffset, length) {
  	  if (typeof value === 'string') {
  	    return fromString(value, encodingOrOffset)
  	  }

  	  if (ArrayBuffer.isView(value)) {
  	    return fromArrayView(value)
  	  }

  	  if (value == null) {
  	    throw new TypeError(
  	      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
  	      'or Array-like Object. Received type ' + (typeof value)
  	    )
  	  }

  	  if (isInstance(value, ArrayBuffer) ||
  	      (value && isInstance(value.buffer, ArrayBuffer))) {
  	    return fromArrayBuffer(value, encodingOrOffset, length)
  	  }

  	  if (typeof SharedArrayBuffer !== 'undefined' &&
  	      (isInstance(value, SharedArrayBuffer) ||
  	      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
  	    return fromArrayBuffer(value, encodingOrOffset, length)
  	  }

  	  if (typeof value === 'number') {
  	    throw new TypeError(
  	      'The "value" argument must not be of type number. Received type number'
  	    )
  	  }

  	  const valueOf = value.valueOf && value.valueOf();
  	  if (valueOf != null && valueOf !== value) {
  	    return Buffer.from(valueOf, encodingOrOffset, length)
  	  }

  	  const b = fromObject(value);
  	  if (b) return b

  	  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
  	      typeof value[Symbol.toPrimitive] === 'function') {
  	    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  	  }

  	  throw new TypeError(
  	    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
  	    'or Array-like Object. Received type ' + (typeof value)
  	  )
  	}

  	/**
  	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
  	 * if value is a number.
  	 * Buffer.from(str[, encoding])
  	 * Buffer.from(array)
  	 * Buffer.from(buffer)
  	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
  	 **/
  	Buffer.from = function (value, encodingOrOffset, length) {
  	  return from(value, encodingOrOffset, length)
  	};

  	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  	// https://github.com/feross/buffer/pull/148
  	Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
  	Object.setPrototypeOf(Buffer, Uint8Array);

  	function assertSize (size) {
  	  if (typeof size !== 'number') {
  	    throw new TypeError('"size" argument must be of type number')
  	  } else if (size < 0) {
  	    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  	  }
  	}

  	function alloc (size, fill, encoding) {
  	  assertSize(size);
  	  if (size <= 0) {
  	    return createBuffer(size)
  	  }
  	  if (fill !== undefined) {
  	    // Only pay attention to encoding if it's a string. This
  	    // prevents accidentally sending in a number that would
  	    // be interpreted as a start offset.
  	    return typeof encoding === 'string'
  	      ? createBuffer(size).fill(fill, encoding)
  	      : createBuffer(size).fill(fill)
  	  }
  	  return createBuffer(size)
  	}

  	/**
  	 * Creates a new filled Buffer instance.
  	 * alloc(size[, fill[, encoding]])
  	 **/
  	Buffer.alloc = function (size, fill, encoding) {
  	  return alloc(size, fill, encoding)
  	};

  	function allocUnsafe (size) {
  	  assertSize(size);
  	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
  	}

  	/**
  	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
  	 * */
  	Buffer.allocUnsafe = function (size) {
  	  return allocUnsafe(size)
  	};
  	/**
  	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
  	 */
  	Buffer.allocUnsafeSlow = function (size) {
  	  return allocUnsafe(size)
  	};

  	function fromString (string, encoding) {
  	  if (typeof encoding !== 'string' || encoding === '') {
  	    encoding = 'utf8';
  	  }

  	  if (!Buffer.isEncoding(encoding)) {
  	    throw new TypeError('Unknown encoding: ' + encoding)
  	  }

  	  const length = byteLength(string, encoding) | 0;
  	  let buf = createBuffer(length);

  	  const actual = buf.write(string, encoding);

  	  if (actual !== length) {
  	    // Writing a hex string, for example, that contains invalid characters will
  	    // cause everything after the first invalid character to be ignored. (e.g.
  	    // 'abxxcd' will be treated as 'ab')
  	    buf = buf.slice(0, actual);
  	  }

  	  return buf
  	}

  	function fromArrayLike (array) {
  	  const length = array.length < 0 ? 0 : checked(array.length) | 0;
  	  const buf = createBuffer(length);
  	  for (let i = 0; i < length; i += 1) {
  	    buf[i] = array[i] & 255;
  	  }
  	  return buf
  	}

  	function fromArrayView (arrayView) {
  	  if (isInstance(arrayView, Uint8Array)) {
  	    const copy = new Uint8Array(arrayView);
  	    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  	  }
  	  return fromArrayLike(arrayView)
  	}

  	function fromArrayBuffer (array, byteOffset, length) {
  	  if (byteOffset < 0 || array.byteLength < byteOffset) {
  	    throw new RangeError('"offset" is outside of buffer bounds')
  	  }

  	  if (array.byteLength < byteOffset + (length || 0)) {
  	    throw new RangeError('"length" is outside of buffer bounds')
  	  }

  	  let buf;
  	  if (byteOffset === undefined && length === undefined) {
  	    buf = new Uint8Array(array);
  	  } else if (length === undefined) {
  	    buf = new Uint8Array(array, byteOffset);
  	  } else {
  	    buf = new Uint8Array(array, byteOffset, length);
  	  }

  	  // Return an augmented `Uint8Array` instance
  	  Object.setPrototypeOf(buf, Buffer.prototype);

  	  return buf
  	}

  	function fromObject (obj) {
  	  if (Buffer.isBuffer(obj)) {
  	    const len = checked(obj.length) | 0;
  	    const buf = createBuffer(len);

  	    if (buf.length === 0) {
  	      return buf
  	    }

  	    obj.copy(buf, 0, 0, len);
  	    return buf
  	  }

  	  if (obj.length !== undefined) {
  	    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
  	      return createBuffer(0)
  	    }
  	    return fromArrayLike(obj)
  	  }

  	  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
  	    return fromArrayLike(obj.data)
  	  }
  	}

  	function checked (length) {
  	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  	  // length is NaN (which is otherwise coerced to zero.)
  	  if (length >= K_MAX_LENGTH) {
  	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
  	                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  	  }
  	  return length | 0
  	}

  	function SlowBuffer (length) {
  	  if (+length != length) { // eslint-disable-line eqeqeq
  	    length = 0;
  	  }
  	  return Buffer.alloc(+length)
  	}

  	Buffer.isBuffer = function isBuffer (b) {
  	  return b != null && b._isBuffer === true &&
  	    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
  	};

  	Buffer.compare = function compare (a, b) {
  	  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
  	  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
  	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
  	    throw new TypeError(
  	      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
  	    )
  	  }

  	  if (a === b) return 0

  	  let x = a.length;
  	  let y = b.length;

  	  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
  	    if (a[i] !== b[i]) {
  	      x = a[i];
  	      y = b[i];
  	      break
  	    }
  	  }

  	  if (x < y) return -1
  	  if (y < x) return 1
  	  return 0
  	};

  	Buffer.isEncoding = function isEncoding (encoding) {
  	  switch (String(encoding).toLowerCase()) {
  	    case 'hex':
  	    case 'utf8':
  	    case 'utf-8':
  	    case 'ascii':
  	    case 'latin1':
  	    case 'binary':
  	    case 'base64':
  	    case 'ucs2':
  	    case 'ucs-2':
  	    case 'utf16le':
  	    case 'utf-16le':
  	      return true
  	    default:
  	      return false
  	  }
  	};

  	Buffer.concat = function concat (list, length) {
  	  if (!Array.isArray(list)) {
  	    throw new TypeError('"list" argument must be an Array of Buffers')
  	  }

  	  if (list.length === 0) {
  	    return Buffer.alloc(0)
  	  }

  	  let i;
  	  if (length === undefined) {
  	    length = 0;
  	    for (i = 0; i < list.length; ++i) {
  	      length += list[i].length;
  	    }
  	  }

  	  const buffer = Buffer.allocUnsafe(length);
  	  let pos = 0;
  	  for (i = 0; i < list.length; ++i) {
  	    let buf = list[i];
  	    if (isInstance(buf, Uint8Array)) {
  	      if (pos + buf.length > buffer.length) {
  	        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
  	        buf.copy(buffer, pos);
  	      } else {
  	        Uint8Array.prototype.set.call(
  	          buffer,
  	          buf,
  	          pos
  	        );
  	      }
  	    } else if (!Buffer.isBuffer(buf)) {
  	      throw new TypeError('"list" argument must be an Array of Buffers')
  	    } else {
  	      buf.copy(buffer, pos);
  	    }
  	    pos += buf.length;
  	  }
  	  return buffer
  	};

  	function byteLength (string, encoding) {
  	  if (Buffer.isBuffer(string)) {
  	    return string.length
  	  }
  	  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
  	    return string.byteLength
  	  }
  	  if (typeof string !== 'string') {
  	    throw new TypeError(
  	      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
  	      'Received type ' + typeof string
  	    )
  	  }

  	  const len = string.length;
  	  const mustMatch = (arguments.length > 2 && arguments[2] === true);
  	  if (!mustMatch && len === 0) return 0

  	  // Use a for loop to avoid recursion
  	  let loweredCase = false;
  	  for (;;) {
  	    switch (encoding) {
  	      case 'ascii':
  	      case 'latin1':
  	      case 'binary':
  	        return len
  	      case 'utf8':
  	      case 'utf-8':
  	        return utf8ToBytes(string).length
  	      case 'ucs2':
  	      case 'ucs-2':
  	      case 'utf16le':
  	      case 'utf-16le':
  	        return len * 2
  	      case 'hex':
  	        return len >>> 1
  	      case 'base64':
  	        return base64ToBytes(string).length
  	      default:
  	        if (loweredCase) {
  	          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
  	        }
  	        encoding = ('' + encoding).toLowerCase();
  	        loweredCase = true;
  	    }
  	  }
  	}
  	Buffer.byteLength = byteLength;

  	function slowToString (encoding, start, end) {
  	  let loweredCase = false;

  	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  	  // property of a typed array.

  	  // This behaves neither like String nor Uint8Array in that we set start/end
  	  // to their upper/lower bounds if the value passed is out of range.
  	  // undefined is handled specially as per ECMA-262 6th Edition,
  	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  	  if (start === undefined || start < 0) {
  	    start = 0;
  	  }
  	  // Return early if start > this.length. Done here to prevent potential uint32
  	  // coercion fail below.
  	  if (start > this.length) {
  	    return ''
  	  }

  	  if (end === undefined || end > this.length) {
  	    end = this.length;
  	  }

  	  if (end <= 0) {
  	    return ''
  	  }

  	  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  	  end >>>= 0;
  	  start >>>= 0;

  	  if (end <= start) {
  	    return ''
  	  }

  	  if (!encoding) encoding = 'utf8';

  	  while (true) {
  	    switch (encoding) {
  	      case 'hex':
  	        return hexSlice(this, start, end)

  	      case 'utf8':
  	      case 'utf-8':
  	        return utf8Slice(this, start, end)

  	      case 'ascii':
  	        return asciiSlice(this, start, end)

  	      case 'latin1':
  	      case 'binary':
  	        return latin1Slice(this, start, end)

  	      case 'base64':
  	        return base64Slice(this, start, end)

  	      case 'ucs2':
  	      case 'ucs-2':
  	      case 'utf16le':
  	      case 'utf-16le':
  	        return utf16leSlice(this, start, end)

  	      default:
  	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
  	        encoding = (encoding + '').toLowerCase();
  	        loweredCase = true;
  	    }
  	  }
  	}

  	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  	// reliably in a browserify context because there could be multiple different
  	// copies of the 'buffer' package in use. This method works even for Buffer
  	// instances that were created from another copy of the `buffer` package.
  	// See: https://github.com/feross/buffer/issues/154
  	Buffer.prototype._isBuffer = true;

  	function swap (b, n, m) {
  	  const i = b[n];
  	  b[n] = b[m];
  	  b[m] = i;
  	}

  	Buffer.prototype.swap16 = function swap16 () {
  	  const len = this.length;
  	  if (len % 2 !== 0) {
  	    throw new RangeError('Buffer size must be a multiple of 16-bits')
  	  }
  	  for (let i = 0; i < len; i += 2) {
  	    swap(this, i, i + 1);
  	  }
  	  return this
  	};

  	Buffer.prototype.swap32 = function swap32 () {
  	  const len = this.length;
  	  if (len % 4 !== 0) {
  	    throw new RangeError('Buffer size must be a multiple of 32-bits')
  	  }
  	  for (let i = 0; i < len; i += 4) {
  	    swap(this, i, i + 3);
  	    swap(this, i + 1, i + 2);
  	  }
  	  return this
  	};

  	Buffer.prototype.swap64 = function swap64 () {
  	  const len = this.length;
  	  if (len % 8 !== 0) {
  	    throw new RangeError('Buffer size must be a multiple of 64-bits')
  	  }
  	  for (let i = 0; i < len; i += 8) {
  	    swap(this, i, i + 7);
  	    swap(this, i + 1, i + 6);
  	    swap(this, i + 2, i + 5);
  	    swap(this, i + 3, i + 4);
  	  }
  	  return this
  	};

  	Buffer.prototype.toString = function toString () {
  	  const length = this.length;
  	  if (length === 0) return ''
  	  if (arguments.length === 0) return utf8Slice(this, 0, length)
  	  return slowToString.apply(this, arguments)
  	};

  	Buffer.prototype.toLocaleString = Buffer.prototype.toString;

  	Buffer.prototype.equals = function equals (b) {
  	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  	  if (this === b) return true
  	  return Buffer.compare(this, b) === 0
  	};

  	Buffer.prototype.inspect = function inspect () {
  	  let str = '';
  	  const max = exports.INSPECT_MAX_BYTES;
  	  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
  	  if (this.length > max) str += ' ... ';
  	  return '<Buffer ' + str + '>'
  	};
  	if (customInspectSymbol) {
  	  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
  	}

  	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  	  if (isInstance(target, Uint8Array)) {
  	    target = Buffer.from(target, target.offset, target.byteLength);
  	  }
  	  if (!Buffer.isBuffer(target)) {
  	    throw new TypeError(
  	      'The "target" argument must be one of type Buffer or Uint8Array. ' +
  	      'Received type ' + (typeof target)
  	    )
  	  }

  	  if (start === undefined) {
  	    start = 0;
  	  }
  	  if (end === undefined) {
  	    end = target ? target.length : 0;
  	  }
  	  if (thisStart === undefined) {
  	    thisStart = 0;
  	  }
  	  if (thisEnd === undefined) {
  	    thisEnd = this.length;
  	  }

  	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
  	    throw new RangeError('out of range index')
  	  }

  	  if (thisStart >= thisEnd && start >= end) {
  	    return 0
  	  }
  	  if (thisStart >= thisEnd) {
  	    return -1
  	  }
  	  if (start >= end) {
  	    return 1
  	  }

  	  start >>>= 0;
  	  end >>>= 0;
  	  thisStart >>>= 0;
  	  thisEnd >>>= 0;

  	  if (this === target) return 0

  	  let x = thisEnd - thisStart;
  	  let y = end - start;
  	  const len = Math.min(x, y);

  	  const thisCopy = this.slice(thisStart, thisEnd);
  	  const targetCopy = target.slice(start, end);

  	  for (let i = 0; i < len; ++i) {
  	    if (thisCopy[i] !== targetCopy[i]) {
  	      x = thisCopy[i];
  	      y = targetCopy[i];
  	      break
  	    }
  	  }

  	  if (x < y) return -1
  	  if (y < x) return 1
  	  return 0
  	};

  	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  	//
  	// Arguments:
  	// - buffer - a Buffer to search
  	// - val - a string, Buffer, or number
  	// - byteOffset - an index into `buffer`; will be clamped to an int32
  	// - encoding - an optional encoding, relevant is val is a string
  	// - dir - true for indexOf, false for lastIndexOf
  	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  	  // Empty buffer means no match
  	  if (buffer.length === 0) return -1

  	  // Normalize byteOffset
  	  if (typeof byteOffset === 'string') {
  	    encoding = byteOffset;
  	    byteOffset = 0;
  	  } else if (byteOffset > 0x7fffffff) {
  	    byteOffset = 0x7fffffff;
  	  } else if (byteOffset < -0x80000000) {
  	    byteOffset = -0x80000000;
  	  }
  	  byteOffset = +byteOffset; // Coerce to Number.
  	  if (numberIsNaN(byteOffset)) {
  	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
  	    byteOffset = dir ? 0 : (buffer.length - 1);
  	  }

  	  // Normalize byteOffset: negative offsets start from the end of the buffer
  	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
  	  if (byteOffset >= buffer.length) {
  	    if (dir) return -1
  	    else byteOffset = buffer.length - 1;
  	  } else if (byteOffset < 0) {
  	    if (dir) byteOffset = 0;
  	    else return -1
  	  }

  	  // Normalize val
  	  if (typeof val === 'string') {
  	    val = Buffer.from(val, encoding);
  	  }

  	  // Finally, search either indexOf (if dir is true) or lastIndexOf
  	  if (Buffer.isBuffer(val)) {
  	    // Special case: looking for empty string/buffer always fails
  	    if (val.length === 0) {
  	      return -1
  	    }
  	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  	  } else if (typeof val === 'number') {
  	    val = val & 0xFF; // Search for a byte value [0-255]
  	    if (typeof Uint8Array.prototype.indexOf === 'function') {
  	      if (dir) {
  	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
  	      } else {
  	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
  	      }
  	    }
  	    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  	  }

  	  throw new TypeError('val must be string, number or Buffer')
  	}

  	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  	  let indexSize = 1;
  	  let arrLength = arr.length;
  	  let valLength = val.length;

  	  if (encoding !== undefined) {
  	    encoding = String(encoding).toLowerCase();
  	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
  	        encoding === 'utf16le' || encoding === 'utf-16le') {
  	      if (arr.length < 2 || val.length < 2) {
  	        return -1
  	      }
  	      indexSize = 2;
  	      arrLength /= 2;
  	      valLength /= 2;
  	      byteOffset /= 2;
  	    }
  	  }

  	  function read (buf, i) {
  	    if (indexSize === 1) {
  	      return buf[i]
  	    } else {
  	      return buf.readUInt16BE(i * indexSize)
  	    }
  	  }

  	  let i;
  	  if (dir) {
  	    let foundIndex = -1;
  	    for (i = byteOffset; i < arrLength; i++) {
  	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
  	        if (foundIndex === -1) foundIndex = i;
  	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
  	      } else {
  	        if (foundIndex !== -1) i -= i - foundIndex;
  	        foundIndex = -1;
  	      }
  	    }
  	  } else {
  	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
  	    for (i = byteOffset; i >= 0; i--) {
  	      let found = true;
  	      for (let j = 0; j < valLength; j++) {
  	        if (read(arr, i + j) !== read(val, j)) {
  	          found = false;
  	          break
  	        }
  	      }
  	      if (found) return i
  	    }
  	  }

  	  return -1
  	}

  	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  	  return this.indexOf(val, byteOffset, encoding) !== -1
  	};

  	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  	};

  	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  	};

  	function hexWrite (buf, string, offset, length) {
  	  offset = Number(offset) || 0;
  	  const remaining = buf.length - offset;
  	  if (!length) {
  	    length = remaining;
  	  } else {
  	    length = Number(length);
  	    if (length > remaining) {
  	      length = remaining;
  	    }
  	  }

  	  const strLen = string.length;

  	  if (length > strLen / 2) {
  	    length = strLen / 2;
  	  }
  	  let i;
  	  for (i = 0; i < length; ++i) {
  	    const parsed = parseInt(string.substr(i * 2, 2), 16);
  	    if (numberIsNaN(parsed)) return i
  	    buf[offset + i] = parsed;
  	  }
  	  return i
  	}

  	function utf8Write (buf, string, offset, length) {
  	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  	}

  	function asciiWrite (buf, string, offset, length) {
  	  return blitBuffer(asciiToBytes(string), buf, offset, length)
  	}

  	function base64Write (buf, string, offset, length) {
  	  return blitBuffer(base64ToBytes(string), buf, offset, length)
  	}

  	function ucs2Write (buf, string, offset, length) {
  	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  	}

  	Buffer.prototype.write = function write (string, offset, length, encoding) {
  	  // Buffer#write(string)
  	  if (offset === undefined) {
  	    encoding = 'utf8';
  	    length = this.length;
  	    offset = 0;
  	  // Buffer#write(string, encoding)
  	  } else if (length === undefined && typeof offset === 'string') {
  	    encoding = offset;
  	    length = this.length;
  	    offset = 0;
  	  // Buffer#write(string, offset[, length][, encoding])
  	  } else if (isFinite(offset)) {
  	    offset = offset >>> 0;
  	    if (isFinite(length)) {
  	      length = length >>> 0;
  	      if (encoding === undefined) encoding = 'utf8';
  	    } else {
  	      encoding = length;
  	      length = undefined;
  	    }
  	  } else {
  	    throw new Error(
  	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
  	    )
  	  }

  	  const remaining = this.length - offset;
  	  if (length === undefined || length > remaining) length = remaining;

  	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
  	    throw new RangeError('Attempt to write outside buffer bounds')
  	  }

  	  if (!encoding) encoding = 'utf8';

  	  let loweredCase = false;
  	  for (;;) {
  	    switch (encoding) {
  	      case 'hex':
  	        return hexWrite(this, string, offset, length)

  	      case 'utf8':
  	      case 'utf-8':
  	        return utf8Write(this, string, offset, length)

  	      case 'ascii':
  	      case 'latin1':
  	      case 'binary':
  	        return asciiWrite(this, string, offset, length)

  	      case 'base64':
  	        // Warning: maxLength not taken into account in base64Write
  	        return base64Write(this, string, offset, length)

  	      case 'ucs2':
  	      case 'ucs-2':
  	      case 'utf16le':
  	      case 'utf-16le':
  	        return ucs2Write(this, string, offset, length)

  	      default:
  	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
  	        encoding = ('' + encoding).toLowerCase();
  	        loweredCase = true;
  	    }
  	  }
  	};

  	Buffer.prototype.toJSON = function toJSON () {
  	  return {
  	    type: 'Buffer',
  	    data: Array.prototype.slice.call(this._arr || this, 0)
  	  }
  	};

  	function base64Slice (buf, start, end) {
  	  if (start === 0 && end === buf.length) {
  	    return base64.fromByteArray(buf)
  	  } else {
  	    return base64.fromByteArray(buf.slice(start, end))
  	  }
  	}

  	function utf8Slice (buf, start, end) {
  	  end = Math.min(buf.length, end);
  	  const res = [];

  	  let i = start;
  	  while (i < end) {
  	    const firstByte = buf[i];
  	    let codePoint = null;
  	    let bytesPerSequence = (firstByte > 0xEF)
  	      ? 4
  	      : (firstByte > 0xDF)
  	          ? 3
  	          : (firstByte > 0xBF)
  	              ? 2
  	              : 1;

  	    if (i + bytesPerSequence <= end) {
  	      let secondByte, thirdByte, fourthByte, tempCodePoint;

  	      switch (bytesPerSequence) {
  	        case 1:
  	          if (firstByte < 0x80) {
  	            codePoint = firstByte;
  	          }
  	          break
  	        case 2:
  	          secondByte = buf[i + 1];
  	          if ((secondByte & 0xC0) === 0x80) {
  	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
  	            if (tempCodePoint > 0x7F) {
  	              codePoint = tempCodePoint;
  	            }
  	          }
  	          break
  	        case 3:
  	          secondByte = buf[i + 1];
  	          thirdByte = buf[i + 2];
  	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
  	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
  	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
  	              codePoint = tempCodePoint;
  	            }
  	          }
  	          break
  	        case 4:
  	          secondByte = buf[i + 1];
  	          thirdByte = buf[i + 2];
  	          fourthByte = buf[i + 3];
  	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
  	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
  	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
  	              codePoint = tempCodePoint;
  	            }
  	          }
  	      }
  	    }

  	    if (codePoint === null) {
  	      // we did not generate a valid codePoint so insert a
  	      // replacement char (U+FFFD) and advance only 1 byte
  	      codePoint = 0xFFFD;
  	      bytesPerSequence = 1;
  	    } else if (codePoint > 0xFFFF) {
  	      // encode to utf16 (surrogate pair dance)
  	      codePoint -= 0x10000;
  	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
  	      codePoint = 0xDC00 | codePoint & 0x3FF;
  	    }

  	    res.push(codePoint);
  	    i += bytesPerSequence;
  	  }

  	  return decodeCodePointsArray(res)
  	}

  	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
  	// the lowest limit is Chrome, with 0x10000 args.
  	// We go 1 magnitude less, for safety
  	const MAX_ARGUMENTS_LENGTH = 0x1000;

  	function decodeCodePointsArray (codePoints) {
  	  const len = codePoints.length;
  	  if (len <= MAX_ARGUMENTS_LENGTH) {
  	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  	  }

  	  // Decode in chunks to avoid "call stack size exceeded".
  	  let res = '';
  	  let i = 0;
  	  while (i < len) {
  	    res += String.fromCharCode.apply(
  	      String,
  	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
  	    );
  	  }
  	  return res
  	}

  	function asciiSlice (buf, start, end) {
  	  let ret = '';
  	  end = Math.min(buf.length, end);

  	  for (let i = start; i < end; ++i) {
  	    ret += String.fromCharCode(buf[i] & 0x7F);
  	  }
  	  return ret
  	}

  	function latin1Slice (buf, start, end) {
  	  let ret = '';
  	  end = Math.min(buf.length, end);

  	  for (let i = start; i < end; ++i) {
  	    ret += String.fromCharCode(buf[i]);
  	  }
  	  return ret
  	}

  	function hexSlice (buf, start, end) {
  	  const len = buf.length;

  	  if (!start || start < 0) start = 0;
  	  if (!end || end < 0 || end > len) end = len;

  	  let out = '';
  	  for (let i = start; i < end; ++i) {
  	    out += hexSliceLookupTable[buf[i]];
  	  }
  	  return out
  	}

  	function utf16leSlice (buf, start, end) {
  	  const bytes = buf.slice(start, end);
  	  let res = '';
  	  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  	  for (let i = 0; i < bytes.length - 1; i += 2) {
  	    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256));
  	  }
  	  return res
  	}

  	Buffer.prototype.slice = function slice (start, end) {
  	  const len = this.length;
  	  start = ~~start;
  	  end = end === undefined ? len : ~~end;

  	  if (start < 0) {
  	    start += len;
  	    if (start < 0) start = 0;
  	  } else if (start > len) {
  	    start = len;
  	  }

  	  if (end < 0) {
  	    end += len;
  	    if (end < 0) end = 0;
  	  } else if (end > len) {
  	    end = len;
  	  }

  	  if (end < start) end = start;

  	  const newBuf = this.subarray(start, end);
  	  // Return an augmented `Uint8Array` instance
  	  Object.setPrototypeOf(newBuf, Buffer.prototype);

  	  return newBuf
  	};

  	/*
  	 * Need to make sure that buffer isn't trying to write out of bounds.
  	 */
  	function checkOffset (offset, ext, length) {
  	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  	}

  	Buffer.prototype.readUintLE =
  	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) checkOffset(offset, byteLength, this.length);

  	  let val = this[offset];
  	  let mul = 1;
  	  let i = 0;
  	  while (++i < byteLength && (mul *= 0x100)) {
  	    val += this[offset + i] * mul;
  	  }

  	  return val
  	};

  	Buffer.prototype.readUintBE =
  	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) {
  	    checkOffset(offset, byteLength, this.length);
  	  }

  	  let val = this[offset + --byteLength];
  	  let mul = 1;
  	  while (byteLength > 0 && (mul *= 0x100)) {
  	    val += this[offset + --byteLength] * mul;
  	  }

  	  return val
  	};

  	Buffer.prototype.readUint8 =
  	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 1, this.length);
  	  return this[offset]
  	};

  	Buffer.prototype.readUint16LE =
  	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 2, this.length);
  	  return this[offset] | (this[offset + 1] << 8)
  	};

  	Buffer.prototype.readUint16BE =
  	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 2, this.length);
  	  return (this[offset] << 8) | this[offset + 1]
  	};

  	Buffer.prototype.readUint32LE =
  	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 4, this.length);

  	  return ((this[offset]) |
  	      (this[offset + 1] << 8) |
  	      (this[offset + 2] << 16)) +
  	      (this[offset + 3] * 0x1000000)
  	};

  	Buffer.prototype.readUint32BE =
  	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 4, this.length);

  	  return (this[offset] * 0x1000000) +
  	    ((this[offset + 1] << 16) |
  	    (this[offset + 2] << 8) |
  	    this[offset + 3])
  	};

  	Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  	  offset = offset >>> 0;
  	  validateNumber(offset, 'offset');
  	  const first = this[offset];
  	  const last = this[offset + 7];
  	  if (first === undefined || last === undefined) {
  	    boundsError(offset, this.length - 8);
  	  }

  	  const lo = first +
  	    this[++offset] * 2 ** 8 +
  	    this[++offset] * 2 ** 16 +
  	    this[++offset] * 2 ** 24;

  	  const hi = this[++offset] +
  	    this[++offset] * 2 ** 8 +
  	    this[++offset] * 2 ** 16 +
  	    last * 2 ** 24;

  	  return BigInt(lo) + (BigInt(hi) << BigInt(32))
  	});

  	Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  	  offset = offset >>> 0;
  	  validateNumber(offset, 'offset');
  	  const first = this[offset];
  	  const last = this[offset + 7];
  	  if (first === undefined || last === undefined) {
  	    boundsError(offset, this.length - 8);
  	  }

  	  const hi = first * 2 ** 24 +
  	    this[++offset] * 2 ** 16 +
  	    this[++offset] * 2 ** 8 +
  	    this[++offset];

  	  const lo = this[++offset] * 2 ** 24 +
  	    this[++offset] * 2 ** 16 +
  	    this[++offset] * 2 ** 8 +
  	    last;

  	  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
  	});

  	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) checkOffset(offset, byteLength, this.length);

  	  let val = this[offset];
  	  let mul = 1;
  	  let i = 0;
  	  while (++i < byteLength && (mul *= 0x100)) {
  	    val += this[offset + i] * mul;
  	  }
  	  mul *= 0x80;

  	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  	  return val
  	};

  	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) checkOffset(offset, byteLength, this.length);

  	  let i = byteLength;
  	  let mul = 1;
  	  let val = this[offset + --i];
  	  while (i > 0 && (mul *= 0x100)) {
  	    val += this[offset + --i] * mul;
  	  }
  	  mul *= 0x80;

  	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

  	  return val
  	};

  	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 1, this.length);
  	  if (!(this[offset] & 0x80)) return (this[offset])
  	  return ((0xff - this[offset] + 1) * -1)
  	};

  	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 2, this.length);
  	  const val = this[offset] | (this[offset + 1] << 8);
  	  return (val & 0x8000) ? val | 0xFFFF0000 : val
  	};

  	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 2, this.length);
  	  const val = this[offset + 1] | (this[offset] << 8);
  	  return (val & 0x8000) ? val | 0xFFFF0000 : val
  	};

  	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 4, this.length);

  	  return (this[offset]) |
  	    (this[offset + 1] << 8) |
  	    (this[offset + 2] << 16) |
  	    (this[offset + 3] << 24)
  	};

  	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 4, this.length);

  	  return (this[offset] << 24) |
  	    (this[offset + 1] << 16) |
  	    (this[offset + 2] << 8) |
  	    (this[offset + 3])
  	};

  	Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  	  offset = offset >>> 0;
  	  validateNumber(offset, 'offset');
  	  const first = this[offset];
  	  const last = this[offset + 7];
  	  if (first === undefined || last === undefined) {
  	    boundsError(offset, this.length - 8);
  	  }

  	  const val = this[offset + 4] +
  	    this[offset + 5] * 2 ** 8 +
  	    this[offset + 6] * 2 ** 16 +
  	    (last << 24); // Overflow

  	  return (BigInt(val) << BigInt(32)) +
  	    BigInt(first +
  	    this[++offset] * 2 ** 8 +
  	    this[++offset] * 2 ** 16 +
  	    this[++offset] * 2 ** 24)
  	});

  	Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  	  offset = offset >>> 0;
  	  validateNumber(offset, 'offset');
  	  const first = this[offset];
  	  const last = this[offset + 7];
  	  if (first === undefined || last === undefined) {
  	    boundsError(offset, this.length - 8);
  	  }

  	  const val = (first << 24) + // Overflow
  	    this[++offset] * 2 ** 16 +
  	    this[++offset] * 2 ** 8 +
  	    this[++offset];

  	  return (BigInt(val) << BigInt(32)) +
  	    BigInt(this[++offset] * 2 ** 24 +
  	    this[++offset] * 2 ** 16 +
  	    this[++offset] * 2 ** 8 +
  	    last)
  	});

  	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 4, this.length);
  	  return ieee754$1.read(this, offset, true, 23, 4)
  	};

  	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 4, this.length);
  	  return ieee754$1.read(this, offset, false, 23, 4)
  	};

  	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 8, this.length);
  	  return ieee754$1.read(this, offset, true, 52, 8)
  	};

  	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  	  offset = offset >>> 0;
  	  if (!noAssert) checkOffset(offset, 8, this.length);
  	  return ieee754$1.read(this, offset, false, 52, 8)
  	};

  	function checkInt (buf, value, offset, ext, max, min) {
  	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  	}

  	Buffer.prototype.writeUintLE =
  	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) {
  	    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
  	    checkInt(this, value, offset, byteLength, maxBytes, 0);
  	  }

  	  let mul = 1;
  	  let i = 0;
  	  this[offset] = value & 0xFF;
  	  while (++i < byteLength && (mul *= 0x100)) {
  	    this[offset + i] = (value / mul) & 0xFF;
  	  }

  	  return offset + byteLength
  	};

  	Buffer.prototype.writeUintBE =
  	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  byteLength = byteLength >>> 0;
  	  if (!noAssert) {
  	    const maxBytes = Math.pow(2, 8 * byteLength) - 1;
  	    checkInt(this, value, offset, byteLength, maxBytes, 0);
  	  }

  	  let i = byteLength - 1;
  	  let mul = 1;
  	  this[offset + i] = value & 0xFF;
  	  while (--i >= 0 && (mul *= 0x100)) {
  	    this[offset + i] = (value / mul) & 0xFF;
  	  }

  	  return offset + byteLength
  	};

  	Buffer.prototype.writeUint8 =
  	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  	  this[offset] = (value & 0xff);
  	  return offset + 1
  	};

  	Buffer.prototype.writeUint16LE =
  	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  	  this[offset] = (value & 0xff);
  	  this[offset + 1] = (value >>> 8);
  	  return offset + 2
  	};

  	Buffer.prototype.writeUint16BE =
  	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
  	  this[offset] = (value >>> 8);
  	  this[offset + 1] = (value & 0xff);
  	  return offset + 2
  	};

  	Buffer.prototype.writeUint32LE =
  	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  	  this[offset + 3] = (value >>> 24);
  	  this[offset + 2] = (value >>> 16);
  	  this[offset + 1] = (value >>> 8);
  	  this[offset] = (value & 0xff);
  	  return offset + 4
  	};

  	Buffer.prototype.writeUint32BE =
  	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
  	  this[offset] = (value >>> 24);
  	  this[offset + 1] = (value >>> 16);
  	  this[offset + 2] = (value >>> 8);
  	  this[offset + 3] = (value & 0xff);
  	  return offset + 4
  	};

  	function wrtBigUInt64LE (buf, value, offset, min, max) {
  	  checkIntBI(value, min, max, buf, offset, 7);

  	  let lo = Number(value & BigInt(0xffffffff));
  	  buf[offset++] = lo;
  	  lo = lo >> 8;
  	  buf[offset++] = lo;
  	  lo = lo >> 8;
  	  buf[offset++] = lo;
  	  lo = lo >> 8;
  	  buf[offset++] = lo;
  	  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  	  buf[offset++] = hi;
  	  hi = hi >> 8;
  	  buf[offset++] = hi;
  	  hi = hi >> 8;
  	  buf[offset++] = hi;
  	  hi = hi >> 8;
  	  buf[offset++] = hi;
  	  return offset
  	}

  	function wrtBigUInt64BE (buf, value, offset, min, max) {
  	  checkIntBI(value, min, max, buf, offset, 7);

  	  let lo = Number(value & BigInt(0xffffffff));
  	  buf[offset + 7] = lo;
  	  lo = lo >> 8;
  	  buf[offset + 6] = lo;
  	  lo = lo >> 8;
  	  buf[offset + 5] = lo;
  	  lo = lo >> 8;
  	  buf[offset + 4] = lo;
  	  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
  	  buf[offset + 3] = hi;
  	  hi = hi >> 8;
  	  buf[offset + 2] = hi;
  	  hi = hi >> 8;
  	  buf[offset + 1] = hi;
  	  hi = hi >> 8;
  	  buf[offset] = hi;
  	  return offset + 8
  	}

  	Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  	  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
  	});

  	Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  	  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
  	});

  	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) {
  	    const limit = Math.pow(2, (8 * byteLength) - 1);

  	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  	  }

  	  let i = 0;
  	  let mul = 1;
  	  let sub = 0;
  	  this[offset] = value & 0xFF;
  	  while (++i < byteLength && (mul *= 0x100)) {
  	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
  	      sub = 1;
  	    }
  	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  	  }

  	  return offset + byteLength
  	};

  	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) {
  	    const limit = Math.pow(2, (8 * byteLength) - 1);

  	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  	  }

  	  let i = byteLength - 1;
  	  let mul = 1;
  	  let sub = 0;
  	  this[offset + i] = value & 0xFF;
  	  while (--i >= 0 && (mul *= 0x100)) {
  	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
  	      sub = 1;
  	    }
  	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
  	  }

  	  return offset + byteLength
  	};

  	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  	  if (value < 0) value = 0xff + value + 1;
  	  this[offset] = (value & 0xff);
  	  return offset + 1
  	};

  	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  	  this[offset] = (value & 0xff);
  	  this[offset + 1] = (value >>> 8);
  	  return offset + 2
  	};

  	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
  	  this[offset] = (value >>> 8);
  	  this[offset + 1] = (value & 0xff);
  	  return offset + 2
  	};

  	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  	  this[offset] = (value & 0xff);
  	  this[offset + 1] = (value >>> 8);
  	  this[offset + 2] = (value >>> 16);
  	  this[offset + 3] = (value >>> 24);
  	  return offset + 4
  	};

  	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  	  if (value < 0) value = 0xffffffff + value + 1;
  	  this[offset] = (value >>> 24);
  	  this[offset + 1] = (value >>> 16);
  	  this[offset + 2] = (value >>> 8);
  	  this[offset + 3] = (value & 0xff);
  	  return offset + 4
  	};

  	Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  	  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
  	});

  	Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  	  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
  	});

  	function checkIEEE754 (buf, value, offset, ext, max, min) {
  	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  	  if (offset < 0) throw new RangeError('Index out of range')
  	}

  	function writeFloat (buf, value, offset, littleEndian, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) {
  	    checkIEEE754(buf, value, offset, 4);
  	  }
  	  ieee754$1.write(buf, value, offset, littleEndian, 23, 4);
  	  return offset + 4
  	}

  	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  	  return writeFloat(this, value, offset, true, noAssert)
  	};

  	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  	  return writeFloat(this, value, offset, false, noAssert)
  	};

  	function writeDouble (buf, value, offset, littleEndian, noAssert) {
  	  value = +value;
  	  offset = offset >>> 0;
  	  if (!noAssert) {
  	    checkIEEE754(buf, value, offset, 8);
  	  }
  	  ieee754$1.write(buf, value, offset, littleEndian, 52, 8);
  	  return offset + 8
  	}

  	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  	  return writeDouble(this, value, offset, true, noAssert)
  	};

  	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  	  return writeDouble(this, value, offset, false, noAssert)
  	};

  	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  	  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  	  if (!start) start = 0;
  	  if (!end && end !== 0) end = this.length;
  	  if (targetStart >= target.length) targetStart = target.length;
  	  if (!targetStart) targetStart = 0;
  	  if (end > 0 && end < start) end = start;

  	  // Copy 0 bytes; we're done
  	  if (end === start) return 0
  	  if (target.length === 0 || this.length === 0) return 0

  	  // Fatal error conditions
  	  if (targetStart < 0) {
  	    throw new RangeError('targetStart out of bounds')
  	  }
  	  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  	  // Are we oob?
  	  if (end > this.length) end = this.length;
  	  if (target.length - targetStart < end - start) {
  	    end = target.length - targetStart + start;
  	  }

  	  const len = end - start;

  	  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
  	    // Use built-in when available, missing from IE11
  	    this.copyWithin(targetStart, start, end);
  	  } else {
  	    Uint8Array.prototype.set.call(
  	      target,
  	      this.subarray(start, end),
  	      targetStart
  	    );
  	  }

  	  return len
  	};

  	// Usage:
  	//    buffer.fill(number[, offset[, end]])
  	//    buffer.fill(buffer[, offset[, end]])
  	//    buffer.fill(string[, offset[, end]][, encoding])
  	Buffer.prototype.fill = function fill (val, start, end, encoding) {
  	  // Handle string cases:
  	  if (typeof val === 'string') {
  	    if (typeof start === 'string') {
  	      encoding = start;
  	      start = 0;
  	      end = this.length;
  	    } else if (typeof end === 'string') {
  	      encoding = end;
  	      end = this.length;
  	    }
  	    if (encoding !== undefined && typeof encoding !== 'string') {
  	      throw new TypeError('encoding must be a string')
  	    }
  	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
  	      throw new TypeError('Unknown encoding: ' + encoding)
  	    }
  	    if (val.length === 1) {
  	      const code = val.charCodeAt(0);
  	      if ((encoding === 'utf8' && code < 128) ||
  	          encoding === 'latin1') {
  	        // Fast path: If `val` fits into a single byte, use that numeric value.
  	        val = code;
  	      }
  	    }
  	  } else if (typeof val === 'number') {
  	    val = val & 255;
  	  } else if (typeof val === 'boolean') {
  	    val = Number(val);
  	  }

  	  // Invalid ranges are not set to a default, so can range check early.
  	  if (start < 0 || this.length < start || this.length < end) {
  	    throw new RangeError('Out of range index')
  	  }

  	  if (end <= start) {
  	    return this
  	  }

  	  start = start >>> 0;
  	  end = end === undefined ? this.length : end >>> 0;

  	  if (!val) val = 0;

  	  let i;
  	  if (typeof val === 'number') {
  	    for (i = start; i < end; ++i) {
  	      this[i] = val;
  	    }
  	  } else {
  	    const bytes = Buffer.isBuffer(val)
  	      ? val
  	      : Buffer.from(val, encoding);
  	    const len = bytes.length;
  	    if (len === 0) {
  	      throw new TypeError('The value "' + val +
  	        '" is invalid for argument "value"')
  	    }
  	    for (i = 0; i < end - start; ++i) {
  	      this[i + start] = bytes[i % len];
  	    }
  	  }

  	  return this
  	};

  	// CUSTOM ERRORS
  	// =============

  	// Simplified versions from Node, changed for Buffer-only usage
  	const errors = {};
  	function E (sym, getMessage, Base) {
  	  errors[sym] = class NodeError extends Base {
  	    constructor () {
  	      super();

  	      Object.defineProperty(this, 'message', {
  	        value: getMessage.apply(this, arguments),
  	        writable: true,
  	        configurable: true
  	      });

  	      // Add the error code to the name to include it in the stack trace.
  	      this.name = `${this.name} [${sym}]`;
  	      // Access the stack to generate the error message including the error code
  	      // from the name.
  	      this.stack; // eslint-disable-line no-unused-expressions
  	      // Reset the name to the actual name.
  	      delete this.name;
  	    }

  	    get code () {
  	      return sym
  	    }

  	    set code (value) {
  	      Object.defineProperty(this, 'code', {
  	        configurable: true,
  	        enumerable: true,
  	        value,
  	        writable: true
  	      });
  	    }

  	    toString () {
  	      return `${this.name} [${sym}]: ${this.message}`
  	    }
  	  };
  	}

  	E('ERR_BUFFER_OUT_OF_BOUNDS',
  	  function (name) {
  	    if (name) {
  	      return `${name} is outside of buffer bounds`
  	    }

  	    return 'Attempt to access memory outside buffer bounds'
  	  }, RangeError);
  	E('ERR_INVALID_ARG_TYPE',
  	  function (name, actual) {
  	    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  	  }, TypeError);
  	E('ERR_OUT_OF_RANGE',
  	  function (str, range, input) {
  	    let msg = `The value of "${str}" is out of range.`;
  	    let received = input;
  	    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
  	      received = addNumericalSeparator(String(input));
  	    } else if (typeof input === 'bigint') {
  	      received = String(input);
  	      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
  	        received = addNumericalSeparator(received);
  	      }
  	      received += 'n';
  	    }
  	    msg += ` It must be ${range}. Received ${received}`;
  	    return msg
  	  }, RangeError);

  	function addNumericalSeparator (val) {
  	  let res = '';
  	  let i = val.length;
  	  const start = val[0] === '-' ? 1 : 0;
  	  for (; i >= start + 4; i -= 3) {
  	    res = `_${val.slice(i - 3, i)}${res}`;
  	  }
  	  return `${val.slice(0, i)}${res}`
  	}

  	// CHECK FUNCTIONS
  	// ===============

  	function checkBounds (buf, offset, byteLength) {
  	  validateNumber(offset, 'offset');
  	  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
  	    boundsError(offset, buf.length - (byteLength + 1));
  	  }
  	}

  	function checkIntBI (value, min, max, buf, offset, byteLength) {
  	  if (value > max || value < min) {
  	    const n = typeof min === 'bigint' ? 'n' : '';
  	    let range;
  	    if (byteLength > 3) {
  	      if (min === 0 || min === BigInt(0)) {
  	        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
  	      } else {
  	        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
  	                `${(byteLength + 1) * 8 - 1}${n}`;
  	      }
  	    } else {
  	      range = `>= ${min}${n} and <= ${max}${n}`;
  	    }
  	    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  	  }
  	  checkBounds(buf, offset, byteLength);
  	}

  	function validateNumber (value, name) {
  	  if (typeof value !== 'number') {
  	    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  	  }
  	}

  	function boundsError (value, length, type) {
  	  if (Math.floor(value) !== value) {
  	    validateNumber(value, type);
  	    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  	  }

  	  if (length < 0) {
  	    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  	  }

  	  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
  	                                    `>= ${type ? 1 : 0} and <= ${length}`,
  	                                    value)
  	}

  	// HELPER FUNCTIONS
  	// ================

  	const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

  	function base64clean (str) {
  	  // Node takes equal signs as end of the Base64 encoding
  	  str = str.split('=')[0];
  	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  	  str = str.trim().replace(INVALID_BASE64_RE, '');
  	  // Node converts strings with length < 2 to ''
  	  if (str.length < 2) return ''
  	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  	  while (str.length % 4 !== 0) {
  	    str = str + '=';
  	  }
  	  return str
  	}

  	function utf8ToBytes (string, units) {
  	  units = units || Infinity;
  	  let codePoint;
  	  const length = string.length;
  	  let leadSurrogate = null;
  	  const bytes = [];

  	  for (let i = 0; i < length; ++i) {
  	    codePoint = string.charCodeAt(i);

  	    // is surrogate component
  	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
  	      // last char was a lead
  	      if (!leadSurrogate) {
  	        // no lead yet
  	        if (codePoint > 0xDBFF) {
  	          // unexpected trail
  	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
  	          continue
  	        } else if (i + 1 === length) {
  	          // unpaired lead
  	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
  	          continue
  	        }

  	        // valid lead
  	        leadSurrogate = codePoint;

  	        continue
  	      }

  	      // 2 leads in a row
  	      if (codePoint < 0xDC00) {
  	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
  	        leadSurrogate = codePoint;
  	        continue
  	      }

  	      // valid surrogate pair
  	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
  	    } else if (leadSurrogate) {
  	      // valid bmp char, but last char was a lead
  	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
  	    }

  	    leadSurrogate = null;

  	    // encode utf8
  	    if (codePoint < 0x80) {
  	      if ((units -= 1) < 0) break
  	      bytes.push(codePoint);
  	    } else if (codePoint < 0x800) {
  	      if ((units -= 2) < 0) break
  	      bytes.push(
  	        codePoint >> 0x6 | 0xC0,
  	        codePoint & 0x3F | 0x80
  	      );
  	    } else if (codePoint < 0x10000) {
  	      if ((units -= 3) < 0) break
  	      bytes.push(
  	        codePoint >> 0xC | 0xE0,
  	        codePoint >> 0x6 & 0x3F | 0x80,
  	        codePoint & 0x3F | 0x80
  	      );
  	    } else if (codePoint < 0x110000) {
  	      if ((units -= 4) < 0) break
  	      bytes.push(
  	        codePoint >> 0x12 | 0xF0,
  	        codePoint >> 0xC & 0x3F | 0x80,
  	        codePoint >> 0x6 & 0x3F | 0x80,
  	        codePoint & 0x3F | 0x80
  	      );
  	    } else {
  	      throw new Error('Invalid code point')
  	    }
  	  }

  	  return bytes
  	}

  	function asciiToBytes (str) {
  	  const byteArray = [];
  	  for (let i = 0; i < str.length; ++i) {
  	    // Node's code seems to be doing this and not & 0x7F..
  	    byteArray.push(str.charCodeAt(i) & 0xFF);
  	  }
  	  return byteArray
  	}

  	function utf16leToBytes (str, units) {
  	  let c, hi, lo;
  	  const byteArray = [];
  	  for (let i = 0; i < str.length; ++i) {
  	    if ((units -= 2) < 0) break

  	    c = str.charCodeAt(i);
  	    hi = c >> 8;
  	    lo = c % 256;
  	    byteArray.push(lo);
  	    byteArray.push(hi);
  	  }

  	  return byteArray
  	}

  	function base64ToBytes (str) {
  	  return base64.toByteArray(base64clean(str))
  	}

  	function blitBuffer (src, dst, offset, length) {
  	  let i;
  	  for (i = 0; i < length; ++i) {
  	    if ((i + offset >= dst.length) || (i >= src.length)) break
  	    dst[i + offset] = src[i];
  	  }
  	  return i
  	}

  	// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  	// the `instanceof` check but they should be treated as of that type.
  	// See: https://github.com/feross/buffer/issues/166
  	function isInstance (obj, type) {
  	  return obj instanceof type ||
  	    (obj != null && obj.constructor != null && obj.constructor.name != null &&
  	      obj.constructor.name === type.name)
  	}
  	function numberIsNaN (obj) {
  	  // For IE11 support
  	  return obj !== obj // eslint-disable-line no-self-compare
  	}

  	// Create lookup table for `toString('hex')`
  	// See: https://github.com/feross/buffer/issues/219
  	const hexSliceLookupTable = (function () {
  	  const alphabet = '0123456789abcdef';
  	  const table = new Array(256);
  	  for (let i = 0; i < 16; ++i) {
  	    const i16 = i * 16;
  	    for (let j = 0; j < 16; ++j) {
  	      table[i16 + j] = alphabet[i] + alphabet[j];
  	    }
  	  }
  	  return table
  	})();

  	// Return not function with Error if BigInt not supported
  	function defineBigIntMethod (fn) {
  	  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
  	}

  	function BufferBigIntNotDefined () {
  	  throw new Error('BigInt not supported')
  	}
  } (buffer));

  /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

  (function (module, exports) {
  	/* eslint-disable node/no-deprecated-api */
  	var buffer$1 = buffer;
  	var Buffer = buffer$1.Buffer;

  	// alternative to using Object.keys for old browsers
  	function copyProps (src, dst) {
  	  for (var key in src) {
  	    dst[key] = src[key];
  	  }
  	}
  	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  	  module.exports = buffer$1;
  	} else {
  	  // Copy properties from require('buffer')
  	  copyProps(buffer$1, exports);
  	  exports.Buffer = SafeBuffer;
  	}

  	function SafeBuffer (arg, encodingOrOffset, length) {
  	  return Buffer(arg, encodingOrOffset, length)
  	}

  	SafeBuffer.prototype = Object.create(Buffer.prototype);

  	// Copy static methods from Buffer
  	copyProps(Buffer, SafeBuffer);

  	SafeBuffer.from = function (arg, encodingOrOffset, length) {
  	  if (typeof arg === 'number') {
  	    throw new TypeError('Argument must not be a number')
  	  }
  	  return Buffer(arg, encodingOrOffset, length)
  	};

  	SafeBuffer.alloc = function (size, fill, encoding) {
  	  if (typeof size !== 'number') {
  	    throw new TypeError('Argument must be a number')
  	  }
  	  var buf = Buffer(size);
  	  if (fill !== undefined) {
  	    if (typeof encoding === 'string') {
  	      buf.fill(fill, encoding);
  	    } else {
  	      buf.fill(fill);
  	    }
  	  } else {
  	    buf.fill(0);
  	  }
  	  return buf
  	};

  	SafeBuffer.allocUnsafe = function (size) {
  	  if (typeof size !== 'number') {
  	    throw new TypeError('Argument must be a number')
  	  }
  	  return Buffer(size)
  	};

  	SafeBuffer.allocUnsafeSlow = function (size) {
  	  if (typeof size !== 'number') {
  	    throw new TypeError('Argument must be a number')
  	  }
  	  return buffer$1.SlowBuffer(size)
  	};
  } (safeBuffer, safeBuffer.exports));

  var Buffer$e = safeBuffer.exports.Buffer;
  var xor$3 = bufferXor;

  function encryptStart (self, data, decrypt) {
    var len = data.length;
    var out = xor$3(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = Buffer$e.concat([self._prev, decrypt ? data : out]);
    return out
  }

  cfb.encrypt = function (self, data, decrypt) {
    var out = Buffer$e.allocUnsafe(0);
    var len;

    while (data.length) {
      if (self._cache.length === 0) {
        self._cache = self._cipher.encryptBlock(self._prev);
        self._prev = Buffer$e.allocUnsafe(0);
      }

      if (self._cache.length <= data.length) {
        len = self._cache.length;
        out = Buffer$e.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
        data = data.slice(len);
      } else {
        out = Buffer$e.concat([out, encryptStart(self, data, decrypt)]);
        break
      }
    }

    return out
  };

  var cfb8 = {};

  var Buffer$d = safeBuffer.exports.Buffer;

  function encryptByte$1 (self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;

    self._prev = Buffer$d.concat([
      self._prev.slice(1),
      Buffer$d.from([decrypt ? byteParam : out])
    ]);

    return out
  }

  cfb8.encrypt = function (self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer$d.allocUnsafe(len);
    var i = -1;

    while (++i < len) {
      out[i] = encryptByte$1(self, chunk[i], decrypt);
    }

    return out
  };

  var cfb1 = {};

  var Buffer$c = safeBuffer.exports.Buffer;

  function encryptByte (self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while (++i < len) {
      pad = self._cipher.encryptBlock(self._prev);
      bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0;
      value = pad[0] ^ bit;
      out += ((value & 0x80) >> (i % 8));
      self._prev = shiftIn(self._prev, decrypt ? bit : value);
    }
    return out
  }

  function shiftIn (buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = Buffer$c.allocUnsafe(buffer.length);
    buffer = Buffer$c.concat([buffer, Buffer$c.from([value])]);

    while (++i < len) {
      out[i] = buffer[i] << 1 | buffer[i + 1] >> (7);
    }

    return out
  }

  cfb1.encrypt = function (self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer$c.allocUnsafe(len);
    var i = -1;

    while (++i < len) {
      out[i] = encryptByte(self, chunk[i], decrypt);
    }

    return out
  };

  var ofb = {};

  var xor$2 = bufferXor;

  function getBlock$1 (self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev
  }

  ofb.encrypt = function (self, chunk) {
    while (self._cache.length < chunk.length) {
      self._cache = Buffer$f.concat([self._cache, getBlock$1(self)]);
    }

    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor$2(chunk, pad)
  };

  var ctr = {};

  function incr32$2 (iv) {
    var len = iv.length;
    var item;
    while (len--) {
      item = iv.readUInt8(len);
      if (item === 255) {
        iv.writeUInt8(0, len);
      } else {
        item++;
        iv.writeUInt8(item, len);
        break
      }
    }
  }
  var incr32_1 = incr32$2;

  var xor$1 = bufferXor;
  var Buffer$b = safeBuffer.exports.Buffer;
  var incr32$1 = incr32_1;

  function getBlock (self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    incr32$1(self._prev);
    return out
  }

  var blockSize = 16;
  ctr.encrypt = function (self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self._cache.length;
    self._cache = Buffer$b.concat([
      self._cache,
      Buffer$b.allocUnsafe(chunkNum * blockSize)
    ]);
    for (var i = 0; i < chunkNum; i++) {
      var out = getBlock(self);
      var offset = start + i * blockSize;
      self._cache.writeUInt32BE(out[0], offset + 0);
      self._cache.writeUInt32BE(out[1], offset + 4);
      self._cache.writeUInt32BE(out[2], offset + 8);
      self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor$1(chunk, pad)
  };

  var aes128 = {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  };
  var aes192 = {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  };
  var aes256 = {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  };
  var require$$2 = {
  	"aes-128-ecb": {
  	cipher: "AES",
  	key: 128,
  	iv: 0,
  	mode: "ECB",
  	type: "block"
  },
  	"aes-192-ecb": {
  	cipher: "AES",
  	key: 192,
  	iv: 0,
  	mode: "ECB",
  	type: "block"
  },
  	"aes-256-ecb": {
  	cipher: "AES",
  	key: 256,
  	iv: 0,
  	mode: "ECB",
  	type: "block"
  },
  	"aes-128-cbc": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  },
  	"aes-192-cbc": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  },
  	"aes-256-cbc": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CBC",
  	type: "block"
  },
  	aes128: aes128,
  	aes192: aes192,
  	aes256: aes256,
  	"aes-128-cfb": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CFB",
  	type: "stream"
  },
  	"aes-192-cfb": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CFB",
  	type: "stream"
  },
  	"aes-256-cfb": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CFB",
  	type: "stream"
  },
  	"aes-128-cfb8": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CFB8",
  	type: "stream"
  },
  	"aes-192-cfb8": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CFB8",
  	type: "stream"
  },
  	"aes-256-cfb8": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CFB8",
  	type: "stream"
  },
  	"aes-128-cfb1": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CFB1",
  	type: "stream"
  },
  	"aes-192-cfb1": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CFB1",
  	type: "stream"
  },
  	"aes-256-cfb1": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CFB1",
  	type: "stream"
  },
  	"aes-128-ofb": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "OFB",
  	type: "stream"
  },
  	"aes-192-ofb": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "OFB",
  	type: "stream"
  },
  	"aes-256-ofb": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "OFB",
  	type: "stream"
  },
  	"aes-128-ctr": {
  	cipher: "AES",
  	key: 128,
  	iv: 16,
  	mode: "CTR",
  	type: "stream"
  },
  	"aes-192-ctr": {
  	cipher: "AES",
  	key: 192,
  	iv: 16,
  	mode: "CTR",
  	type: "stream"
  },
  	"aes-256-ctr": {
  	cipher: "AES",
  	key: 256,
  	iv: 16,
  	mode: "CTR",
  	type: "stream"
  },
  	"aes-128-gcm": {
  	cipher: "AES",
  	key: 128,
  	iv: 12,
  	mode: "GCM",
  	type: "auth"
  },
  	"aes-192-gcm": {
  	cipher: "AES",
  	key: 192,
  	iv: 12,
  	mode: "GCM",
  	type: "auth"
  },
  	"aes-256-gcm": {
  	cipher: "AES",
  	key: 256,
  	iv: 12,
  	mode: "GCM",
  	type: "auth"
  }
  };

  var modeModules = {
    ECB: ecb,
    CBC: cbc,
    CFB: cfb,
    CFB8: cfb8,
    CFB1: cfb1,
    OFB: ofb,
    CTR: ctr,
    GCM: ctr
  };

  var modes = require$$2;

  for (var key in modes) {
    modes[key].module = modeModules[modes[key].mode];
  }

  var modes_1 = modes;

  var aes$4 = {};

  // based on the aes implimentation in triple sec
  // https://github.com/keybase/triplesec
  // which is in turn based on the one from crypto-js
  // https://code.google.com/p/crypto-js/

  var Buffer$a = safeBuffer.exports.Buffer;

  function asUInt32Array (buf) {
    if (!Buffer$a.isBuffer(buf)) buf = Buffer$a.from(buf);

    var len = (buf.length / 4) | 0;
    var out = new Array(len);

    for (var i = 0; i < len; i++) {
      out[i] = buf.readUInt32BE(i * 4);
    }

    return out
  }

  function scrubVec (v) {
    for (var i = 0; i < v.length; v++) {
      v[i] = 0;
    }
  }

  function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];

    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;

    for (var round = 1; round < nRounds; round++) {
      t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
      t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
      t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
      t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
      s0 = t0;
      s1 = t1;
      s2 = t2;
      s3 = t3;
    }

    t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
    t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
    t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
    t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;

    return [t0, t1, t2, t3]
  }

  // AES constants
  var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
  var G = (function () {
    // Compute double table
    var d = new Array(256);
    for (var j = 0; j < 256; j++) {
      if (j < 128) {
        d[j] = j << 1;
      } else {
        d[j] = (j << 1) ^ 0x11b;
      }
    }

    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [[], [], [], []];
    var INV_SUB_MIX = [[], [], [], []];

    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for (var i = 0; i < 256; ++i) {
      // Compute sbox
      var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);
      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;
      SBOX[x] = sx;
      INV_SBOX[sx] = x;

      // Compute multiplication
      var x2 = d[x];
      var x4 = d[x2];
      var x8 = d[x4];

      // Compute sub bytes, mix columns tables
      var t = (d[sx] * 0x101) ^ (sx * 0x1010100);
      SUB_MIX[0][x] = (t << 24) | (t >>> 8);
      SUB_MIX[1][x] = (t << 16) | (t >>> 16);
      SUB_MIX[2][x] = (t << 8) | (t >>> 24);
      SUB_MIX[3][x] = t;

      // Compute inv sub bytes, inv mix columns tables
      t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);
      INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8);
      INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16);
      INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24);
      INV_SUB_MIX[3][sx] = t;

      if (x === 0) {
        x = xi = 1;
      } else {
        x = x2 ^ d[d[d[x8 ^ x2]]];
        xi ^= d[d[xi]];
      }
    }

    return {
      SBOX: SBOX,
      INV_SBOX: INV_SBOX,
      SUB_MIX: SUB_MIX,
      INV_SUB_MIX: INV_SUB_MIX
    }
  })();

  function AES (key) {
    this._key = asUInt32Array(key);
    this._reset();
  }

  AES.blockSize = 4 * 4;
  AES.keySize = 256 / 8;
  AES.prototype.blockSize = AES.blockSize;
  AES.prototype.keySize = AES.keySize;
  AES.prototype._reset = function () {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;

    var keySchedule = [];
    for (var k = 0; k < keySize; k++) {
      keySchedule[k] = keyWords[k];
    }

    for (k = keySize; k < ksRows; k++) {
      var t = keySchedule[k - 1];

      if (k % keySize === 0) {
        t = (t << 8) | (t >>> 24);
        t =
          (G.SBOX[t >>> 24] << 24) |
          (G.SBOX[(t >>> 16) & 0xff] << 16) |
          (G.SBOX[(t >>> 8) & 0xff] << 8) |
          (G.SBOX[t & 0xff]);

        t ^= RCON[(k / keySize) | 0] << 24;
      } else if (keySize > 6 && k % keySize === 4) {
        t =
          (G.SBOX[t >>> 24] << 24) |
          (G.SBOX[(t >>> 16) & 0xff] << 16) |
          (G.SBOX[(t >>> 8) & 0xff] << 8) |
          (G.SBOX[t & 0xff]);
      }

      keySchedule[k] = keySchedule[k - keySize] ^ t;
    }

    var invKeySchedule = [];
    for (var ik = 0; ik < ksRows; ik++) {
      var ksR = ksRows - ik;
      var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

      if (ik < 4 || ksR <= 4) {
        invKeySchedule[ik] = tt;
      } else {
        invKeySchedule[ik] =
          G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
          G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
          G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
          G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
      }
    }

    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
  };

  AES.prototype.encryptBlockRaw = function (M) {
    M = asUInt32Array(M);
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
  };

  AES.prototype.encryptBlock = function (M) {
    var out = this.encryptBlockRaw(M);
    var buf = Buffer$a.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf
  };

  AES.prototype.decryptBlock = function (M) {
    M = asUInt32Array(M);

    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;

    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
    var buf = Buffer$a.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf
  };

  AES.prototype.scrub = function () {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
  };

  aes$4.AES = AES;

  var domain;

  // This constructor is used to store event handlers. Instantiating this is
  // faster than explicitly calling `Object.create(null)` to get a "clean" empty
  // object (tested with v8 v4.9).
  function EventHandlers() {}
  EventHandlers.prototype = Object.create(null);

  function EventEmitter() {
    EventEmitter.init.call(this);
  }

  // nodejs oddity
  // require('events') === require('events').EventEmitter
  EventEmitter.EventEmitter = EventEmitter;

  EventEmitter.usingDomains = false;

  EventEmitter.prototype.domain = undefined;
  EventEmitter.prototype._events = undefined;
  EventEmitter.prototype._maxListeners = undefined;

  // By default EventEmitters will print a warning if more than 10 listeners are
  // added to it. This is a useful default which helps finding memory leaks.
  EventEmitter.defaultMaxListeners = 10;

  EventEmitter.init = function() {
    this.domain = null;
    if (EventEmitter.usingDomains) {
      // if there is an active domain, then attach to it.
      if (domain.active ) ;
    }

    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    }

    this._maxListeners = this._maxListeners || undefined;
  };

  // Obviously not all Emitters should be limited to 10. This function allows
  // that to be increased. Set to zero for unlimited.
  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || isNaN(n))
      throw new TypeError('"n" argument must be a positive number');
    this._maxListeners = n;
    return this;
  };

  function $getMaxListeners(that) {
    if (that._maxListeners === undefined)
      return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
  }

  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $getMaxListeners(this);
  };

  // These standalone emit* functions are used to optimize calling of event
  // handlers for fast cases because emit() itself often has a variable number of
  // arguments and can be deoptimized because of that. These functions always have
  // the same number of arguments and thus do not get deoptimized, so the code
  // inside them can execute faster.
  function emitNone(handler, isFn, self) {
    if (isFn)
      handler.call(self);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self);
    }
  }
  function emitOne(handler, isFn, self, arg1) {
    if (isFn)
      handler.call(self, arg1);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1);
    }
  }
  function emitTwo(handler, isFn, self, arg1, arg2) {
    if (isFn)
      handler.call(self, arg1, arg2);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2);
    }
  }
  function emitThree(handler, isFn, self, arg1, arg2, arg3) {
    if (isFn)
      handler.call(self, arg1, arg2, arg3);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].call(self, arg1, arg2, arg3);
    }
  }

  function emitMany(handler, isFn, self, args) {
    if (isFn)
      handler.apply(self, args);
    else {
      var len = handler.length;
      var listeners = arrayClone(handler, len);
      for (var i = 0; i < len; ++i)
        listeners[i].apply(self, args);
    }
  }

  EventEmitter.prototype.emit = function emit(type) {
    var er, handler, len, args, i, events, domain;
    var doError = (type === 'error');

    events = this._events;
    if (events)
      doError = (doError && events.error == null);
    else if (!doError)
      return false;

    domain = this.domain;

    // If there is no 'error' event listener then throw.
    if (doError) {
      er = arguments[1];
      if (domain) {
        if (!er)
          er = new Error('Uncaught, unspecified "error" event');
        er.domainEmitter = this;
        er.domain = domain;
        er.domainThrown = false;
        domain.emit('error', er);
      } else if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
      return false;
    }

    handler = events[type];

    if (!handler)
      return false;

    var isFn = typeof handler === 'function';
    len = arguments.length;
    switch (len) {
      // fast cases
      case 1:
        emitNone(handler, isFn, this);
        break;
      case 2:
        emitOne(handler, isFn, this, arguments[1]);
        break;
      case 3:
        emitTwo(handler, isFn, this, arguments[1], arguments[2]);
        break;
      case 4:
        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
        break;
      // slower
      default:
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        emitMany(handler, isFn, this, args);
    }

    return true;
  };

  function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;

    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');

    events = target._events;
    if (!events) {
      events = target._events = new EventHandlers();
      target._eventsCount = 0;
    } else {
      // To avoid recursion in the case that type === "newListener"! Before
      // adding it to the listeners, first emit "newListener".
      if (events.newListener) {
        target.emit('newListener', type,
                    listener.listener ? listener.listener : listener);

        // Re-assign `events` because a newListener handler could have caused the
        // this._events to be assigned to a new object
        events = target._events;
      }
      existing = events[type];
    }

    if (!existing) {
      // Optimize the case of one listener. Don't need the extra array object.
      existing = events[type] = listener;
      ++target._eventsCount;
    } else {
      if (typeof existing === 'function') {
        // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [listener, existing] :
                                            [existing, listener];
      } else {
        // If we've already got an array, just append.
        if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
      }

      // Check for listener leak
      if (!existing.warned) {
        m = $getMaxListeners(target);
        if (m && m > 0 && existing.length > m) {
          existing.warned = true;
          var w = new Error('Possible EventEmitter memory leak detected. ' +
                              existing.length + ' ' + type + ' listeners added. ' +
                              'Use emitter.setMaxListeners() to increase limit');
          w.name = 'MaxListenersExceededWarning';
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          emitWarning(w);
        }
      }
    }

    return target;
  }
  function emitWarning(e) {
    typeof console.warn === 'function' ? console.warn(e) : console.log(e);
  }
  EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.prependListener =
      function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };

  function _onceWrap(target, type, listener) {
    var fired = false;
    function g() {
      target.removeListener(type, g);
      if (!fired) {
        fired = true;
        listener.apply(target, arguments);
      }
    }
    g.listener = listener;
    return g;
  }

  EventEmitter.prototype.once = function once(type, listener) {
    if (typeof listener !== 'function')
      throw new TypeError('"listener" argument must be a function');
    this.on(type, _onceWrap(this, type, listener));
    return this;
  };

  EventEmitter.prototype.prependOnceListener =
      function prependOnceListener(type, listener) {
        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };

  // emits a 'removeListener' event iff the listener was removed
  EventEmitter.prototype.removeListener =
      function removeListener(type, listener) {
        var list, events, position, i, originalListener;

        if (typeof listener !== 'function')
          throw new TypeError('"listener" argument must be a function');

        events = this._events;
        if (!events)
          return this;

        list = events[type];
        if (!list)
          return this;

        if (list === listener || (list.listener && list.listener === listener)) {
          if (--this._eventsCount === 0)
            this._events = new EventHandlers();
          else {
            delete events[type];
            if (events.removeListener)
              this.emit('removeListener', type, list.listener || listener);
          }
        } else if (typeof list !== 'function') {
          position = -1;

          for (i = list.length; i-- > 0;) {
            if (list[i] === listener ||
                (list[i].listener && list[i].listener === listener)) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }

          if (position < 0)
            return this;

          if (list.length === 1) {
            list[0] = undefined;
            if (--this._eventsCount === 0) {
              this._events = new EventHandlers();
              return this;
            } else {
              delete events[type];
            }
          } else {
            spliceOne(list, position);
          }

          if (events.removeListener)
            this.emit('removeListener', type, originalListener || listener);
        }

        return this;
      };
      
  // Alias for removeListener added in NodeJS 10.0
  // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
  EventEmitter.prototype.off = function(type, listener){
      return this.removeListener(type, listener);
  };

  EventEmitter.prototype.removeAllListeners =
      function removeAllListeners(type) {
        var listeners, events;

        events = this._events;
        if (!events)
          return this;

        // not listening for removeListener, no need to emit
        if (!events.removeListener) {
          if (arguments.length === 0) {
            this._events = new EventHandlers();
            this._eventsCount = 0;
          } else if (events[type]) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else
              delete events[type];
          }
          return this;
        }

        // emit removeListener for all listeners on all events
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          for (var i = 0, key; i < keys.length; ++i) {
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners('removeListener');
          this._events = new EventHandlers();
          this._eventsCount = 0;
          return this;
        }

        listeners = events[type];

        if (typeof listeners === 'function') {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          do {
            this.removeListener(type, listeners[listeners.length - 1]);
          } while (listeners[0]);
        }

        return this;
      };

  EventEmitter.prototype.listeners = function listeners(type) {
    var evlistener;
    var ret;
    var events = this._events;

    if (!events)
      ret = [];
    else {
      evlistener = events[type];
      if (!evlistener)
        ret = [];
      else if (typeof evlistener === 'function')
        ret = [evlistener.listener || evlistener];
      else
        ret = unwrapListeners(evlistener);
    }

    return ret;
  };

  EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') {
      return emitter.listenerCount(type);
    } else {
      return listenerCount$1.call(emitter, type);
    }
  };

  EventEmitter.prototype.listenerCount = listenerCount$1;
  function listenerCount$1(type) {
    var events = this._events;

    if (events) {
      var evlistener = events[type];

      if (typeof evlistener === 'function') {
        return 1;
      } else if (evlistener) {
        return evlistener.length;
      }
    }

    return 0;
  }

  EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
  };

  // About 1.5x faster than the two-arg version of Array#splice().
  function spliceOne(list, index) {
    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
      list[i] = list[k];
    list.pop();
  }

  function arrayClone(arr, i) {
    var copy = new Array(i);
    while (i--)
      copy[i] = arr[i];
    return copy;
  }

  function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for (var i = 0; i < ret.length; ++i) {
      ret[i] = arr[i].listener || arr[i];
    }
    return ret;
  }

  var _polyfillNode_events = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': EventEmitter,
    EventEmitter: EventEmitter
  });

  var inherits$7;
  if (typeof Object.create === 'function'){
    inherits$7 = function inherits(ctor, superCtor) {
      // implementation from standard node.js 'util' module
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    inherits$7 = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function () {};
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
  var inherits$8 = inherits$7;

  var formatRegExp = /%[sdj%]/g;
  function format(f) {
    if (!isString(f)) {
      var objects = [];
      for (var i = 0; i < arguments.length; i++) {
        objects.push(inspect(arguments[i]));
      }
      return objects.join(' ');
    }

    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace(formatRegExp, function(x) {
      if (x === '%%') return '%';
      if (i >= len) return x;
      switch (x) {
        case '%s': return String(args[i++]);
        case '%d': return Number(args[i++]);
        case '%j':
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return '[Circular]';
          }
        default:
          return x;
      }
    });
    for (var x = args[i]; i < len; x = args[++i]) {
      if (isNull(x) || !isObject(x)) {
        str += ' ' + x;
      } else {
        str += ' ' + inspect(x);
      }
    }
    return str;
  }

  // Mark that a method should not be used.
  // Returns a modified function which warns once by default.
  // If --no-deprecation is set, then it is a no-op.
  function deprecate$1(fn, msg) {
    // Allow for deprecating things in the process of starting up.
    if (isUndefined(global$1.process)) {
      return function() {
        return deprecate$1(fn, msg).apply(this, arguments);
      };
    }

    if (browser$1$1.noDeprecation === true) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (browser$1$1.throwDeprecation) {
          throw new Error(msg);
        } else if (browser$1$1.traceDeprecation) {
          console.trace(msg);
        } else {
          console.error(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  var debugs = {};
  var debugEnviron;
  function debuglog(set) {
    if (isUndefined(debugEnviron))
      debugEnviron = browser$1$1.env.NODE_DEBUG || '';
    set = set.toUpperCase();
    if (!debugs[set]) {
      if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
        var pid = 0;
        debugs[set] = function() {
          var msg = format.apply(null, arguments);
          console.error('%s %d: %s', set, pid, msg);
        };
      } else {
        debugs[set] = function() {};
      }
    }
    return debugs[set];
  }

  /**
   * Echos the value of a value. Trys to print the value out
   * in the best way possible given the different types.
   *
   * @param {Object} obj The object to print out.
   * @param {Object} opts Optional options object that alters the output.
   */
  /* legacy: obj, showHidden, depth, colors*/
  function inspect(obj, opts) {
    // default options
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if (isBoolean(opts)) {
      // legacy...
      ctx.showHidden = opts;
    } else if (opts) {
      // got an "options" object
      _extend(ctx, opts);
    }
    // set default options
    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if (isUndefined(ctx.depth)) ctx.depth = 2;
    if (isUndefined(ctx.colors)) ctx.colors = false;
    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = stylizeWithColor;
    return formatValue(ctx, obj, ctx.depth);
  }

  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
  inspect.colors = {
    'bold' : [1, 22],
    'italic' : [3, 23],
    'underline' : [4, 24],
    'inverse' : [7, 27],
    'white' : [37, 39],
    'grey' : [90, 39],
    'black' : [30, 39],
    'blue' : [34, 39],
    'cyan' : [36, 39],
    'green' : [32, 39],
    'magenta' : [35, 39],
    'red' : [31, 39],
    'yellow' : [33, 39]
  };

  // Don't use 'blue' not visible on cmd.exe
  inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
  };


  function stylizeWithColor(str, styleType) {
    var style = inspect.styles[styleType];

    if (style) {
      return '\u001b[' + inspect.colors[style][0] + 'm' + str +
             '\u001b[' + inspect.colors[style][1] + 'm';
    } else {
      return str;
    }
  }


  function stylizeNoColor(str, styleType) {
    return str;
  }


  function arrayToHash(array) {
    var hash = {};

    array.forEach(function(val, idx) {
      hash[val] = true;
    });

    return hash;
  }


  function formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect &&
        value &&
        isFunction(value.inspect) &&
        // Filter out the util module, it's inspect function is special
        value.inspect !== inspect &&
        // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
      var ret = value.inspect(recurseTimes, ctx);
      if (!isString(ret)) {
        ret = formatValue(ctx, ret, recurseTimes);
      }
      return ret;
    }

    // Primitive types cannot have properties
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (ctx.showHidden) {
      keys = Object.getOwnPropertyNames(value);
    }

    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if (isError(value)
        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '', array = false, braces = ['{', '}'];

    // Make Array say that they are Array
    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    // Make functions say that they are functions
    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    // Make RegExps say that they are RegExps
    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    // Make dates with properties first say the date
    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    // Make error with message first say the error
    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function(key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }


  function formatPrimitive(ctx, value) {
    if (isUndefined(value))
      return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value))
      return ctx.stylize('' + value, 'number');
    if (isBoolean(value))
      return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if (isNull(value))
      return ctx.stylize('null', 'null');
  }


  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }


  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function(key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
            key, true));
      }
    });
    return output;
  }


  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function(line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function(line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'")
                   .replace(/\\"/g, '"')
                   .replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }


  function reduceToSingleString(output, base, braces) {
    var length = output.reduce(function(prev, cur) {
      if (cur.indexOf('\n') >= 0) ;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] +
             (base === '' ? '' : base + '\n ') +
             ' ' +
             output.join(',\n  ') +
             ' ' +
             braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }


  // NOTE: These type checking functions intentionally don't use `instanceof`
  // because it is fragile and can be easily faked with `Object.create()`.
  function isArray(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) &&
        (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function _extend(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !isObject(add)) return origin;

    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  function BufferList() {
    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function (v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function (v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function () {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function () {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function (s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function (n) {
    if (this.length === 0) return buffer.Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = buffer.Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      p.data.copy(ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  var string_decoder = {};

  /*<replacement>*/

  var Buffer$9 = safeBuffer.exports.Buffer;
  /*</replacement>*/

  var isEncoding = Buffer$9.isEncoding || function (encoding) {
    encoding = '' + encoding;
    switch (encoding && encoding.toLowerCase()) {
      case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
        return true;
      default:
        return false;
    }
  };

  function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while (true) {
      switch (enc) {
        case 'utf8':
        case 'utf-8':
          return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return 'utf16le';
        case 'latin1':
        case 'binary':
          return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
          return enc;
        default:
          if (retried) return; // undefined
          enc = ('' + enc).toLowerCase();
          retried = true;
      }
    }
  }
  // Do not cache `Buffer.isEncoding` when checking encoding names as some
  // modules monkey-patch it to support additional encodings
  function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer$9.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
  }

  // StringDecoder provides an interface for efficiently splitting a series of
  // buffers into a series of JS strings without breaking apart multi-byte
  // characters.
  var StringDecoder_1 = string_decoder.StringDecoder = StringDecoder$1;
  function StringDecoder$1(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch (this.encoding) {
      case 'utf16le':
        this.text = utf16Text;
        this.end = utf16End;
        nb = 4;
        break;
      case 'utf8':
        this.fillLast = utf8FillLast;
        nb = 4;
        break;
      case 'base64':
        this.text = base64Text;
        this.end = base64End;
        nb = 3;
        break;
      default:
        this.write = simpleWrite;
        this.end = simpleEnd;
        return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer$9.allocUnsafe(nb);
  }

  StringDecoder$1.prototype.write = function (buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
      r = this.fillLast(buf);
      if (r === undefined) return '';
      i = this.lastNeed;
      this.lastNeed = 0;
    } else {
      i = 0;
    }
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
  };

  StringDecoder$1.prototype.end = utf8End;

  // Returns only complete characters in a Buffer
  StringDecoder$1.prototype.text = utf8Text;

  // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
  StringDecoder$1.prototype.fillLast = function (buf) {
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
  };

  // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
  // continuation byte. If an invalid byte is detected, -2 is returned.
  function utf8CheckByte(byte) {
    if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
    return byte >> 6 === 0x02 ? -1 : -2;
  }

  // Checks at most 3 bytes at the end of a Buffer in order to detect an
  // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
  // needed to complete the UTF-8 character (if applicable) are returned.
  function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 1;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) self.lastNeed = nb - 2;
      return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
      if (nb > 0) {
        if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
      }
      return nb;
    }
    return 0;
  }

  // Validates as many continuation bytes for a multi-byte UTF-8 character as
  // needed or are available. If we see a non-continuation byte where we expect
  // one, we "replace" the validated continuation bytes we've seen so far with
  // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
  // behavior. The continuation byte check is included three times in the case
  // where all of the continuation bytes for a character exist in the same buffer.
  // It is also done this way as a slight performance increase instead of using a
  // loop.
  function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 0xC0) !== 0x80) {
      self.lastNeed = 0;
      return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
      if ((buf[1] & 0xC0) !== 0x80) {
        self.lastNeed = 1;
        return '\ufffd';
      }
      if (self.lastNeed > 2 && buf.length > 2) {
        if ((buf[2] & 0xC0) !== 0x80) {
          self.lastNeed = 2;
          return '\ufffd';
        }
      }
    }
  }

  // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
  function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
      buf.copy(this.lastChar, p, 0, this.lastNeed);
      return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
  }

  // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
  // partial character, the character's bytes are buffered until the required
  // number of bytes are available.
  function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
  }

  // For UTF-8, a replacement character is added when ending on a partial
  // character.
  function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
  }

  // UTF-16LE typically needs two bytes per character, but even if we have an even
  // number of bytes available, we need to check if we end on a leading/high
  // surrogate. In that case, we need to wait for the next two bytes in order to
  // decode the last character properly.
  function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
      var r = buf.toString('utf16le', i);
      if (r) {
        var c = r.charCodeAt(r.length - 1);
        if (c >= 0xD800 && c <= 0xDBFF) {
          this.lastNeed = 2;
          this.lastTotal = 4;
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
          return r.slice(0, -1);
        }
      }
      return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
  }

  // For UTF-16LE we do not explicitly append special replacement characters if we
  // end on a partial character, we simply let v8 handle that.
  function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
      var end = this.lastTotal - this.lastNeed;
      return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
  }

  function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) {
      this.lastChar[0] = buf[buf.length - 1];
    } else {
      this.lastChar[0] = buf[buf.length - 2];
      this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
  }

  function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
  }

  // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
  function simpleWrite(buf) {
    return buf.toString(this.encoding);
  }

  function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
  }

  Readable.ReadableState = ReadableState;

  var debug = debuglog('stream');
  inherits$8(Readable, EventEmitter);

  function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') {
      return emitter.prependListener(event, fn);
    } else {
      // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.
      if (!emitter._events || !emitter._events[event])
        emitter.on(event, fn);
      else if (Array.isArray(emitter._events[event]))
        emitter._events[event].unshift(fn);
      else
        emitter._events[event] = [fn, emitter._events[event]];
    }
  }
  function listenerCount (emitter, type) {
    return emitter.listeners(type).length;
  }
  function ReadableState(options, stream) {

    options = options || {};

    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex$1) this.objectMode = this.objectMode || !!options.readableObjectMode;

    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // when piping, we only care about 'readable' events that happen
    // after read()ing all the bytes and not getting any pushback.
    this.ranOut = false;

    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;

    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;

    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      this.decoder = new StringDecoder_1(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {

    if (!(this instanceof Readable)) return new Readable(options);

    this._readableState = new ReadableState(options, this);

    // legacy
    this.readable = true;

    if (options && typeof options.read === 'function') this._read = options.read;

    EventEmitter.call(this);
  }

  // Manually shove something into the read() buffer.
  // This returns true if the highWaterMark has not been hit yet,
  // similar to how Writable.write() returns true if you should
  // write() some more.
  Readable.prototype.push = function (chunk, encoding) {
    var state = this._readableState;

    if (!state.objectMode && typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer$f.from(chunk, encoding);
        encoding = '';
      }
    }

    return readableAddChunk(this, state, chunk, encoding, false);
  };

  // Unshift should *always* be something directly out of read()
  Readable.prototype.unshift = function (chunk) {
    var state = this._readableState;
    return readableAddChunk(this, state, chunk, '', true);
  };

  Readable.prototype.isPaused = function () {
    return this._readableState.flowing === false;
  };

  function readableAddChunk(stream, state, chunk, encoding, addToFront) {
    var er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (state.ended && !addToFront) {
        var e = new Error('stream.push() after EOF');
        stream.emit('error', e);
      } else if (state.endEmitted && addToFront) {
        var _e = new Error('stream.unshift() after end event');
        stream.emit('error', _e);
      } else {
        var skipAdd;
        if (state.decoder && !addToFront && !encoding) {
          chunk = state.decoder.write(chunk);
          skipAdd = !state.objectMode && chunk.length === 0;
        }

        if (!addToFront) state.reading = false;

        // Don't add to the buffer if we've decoded to an empty string chunk and
        // we're not in object mode
        if (!skipAdd) {
          // if we want the data now, just emit it.
          if (state.flowing && state.length === 0 && !state.sync) {
            stream.emit('data', chunk);
            stream.read(0);
          } else {
            // update the buffer info.
            state.length += state.objectMode ? 1 : chunk.length;
            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

            if (state.needReadable) emitReadable(stream);
          }
        }

        maybeReadMore(stream, state);
      }
    } else if (!addToFront) {
      state.reading = false;
    }

    return needMoreData(state);
  }

  // if it's past the high water mark, we can push in some more.
  // Also, if we have no data yet, we can stand some
  // more bytes.  This is to work around cases where hwm=0,
  // such as the repl.  Also, if the push() triggered a
  // readable event, and the user called read(largeNumber) such that
  // needReadable was set, then we ought to push more, so that another
  // 'readable' event will be triggered.
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }

  // backwards compatibility.
  Readable.prototype.setEncoding = function (enc) {
    this._readableState.decoder = new StringDecoder_1(enc);
    this._readableState.encoding = enc;
    return this;
  };

  // Don't raise the hwm > 8MB
  var MAX_HWM = 0x800000;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      // Get the next highest power of 2 to prevent increasing hwm excessively in
      // tiny amounts
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }

  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
      // Only flow one buffer at a time
      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }

  // you can override either this method, or the async _read(n) below.
  Readable.prototype.read = function (n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;

    if (n !== 0) state.emittedReadable = false;

    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug('read: emitReadable', state.length, state.ended);
      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
      return null;
    }

    n = howMuchToRead(n, state);

    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
      if (state.length === 0) endReadable(this);
      return null;
    }

    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.

    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);

    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug('length less than watermark', doRead);
    }

    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
      doRead = false;
      debug('reading or ended', doRead);
    } else if (doRead) {
      debug('do read');
      state.reading = true;
      state.sync = true;
      // if the length is currently zero, then we *need* a readable event.
      if (state.length === 0) state.needReadable = true;
      // call internal read method
      this._read(state.highWaterMark);
      state.sync = false;
      // If _read pushed data synchronously, then `reading` will be false,
      // and we need to re-evaluate how much data we can return to the user.
      if (!state.reading) n = howMuchToRead(nOrig, state);
    }

    var ret;
    if (n > 0) ret = fromList(n, state);else ret = null;

    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }

    if (state.length === 0) {
      // If we have nothing in the buffer, then we want to know
      // as soon as we *do* get something into the buffer.
      if (!state.ended) state.needReadable = true;

      // If we tried to read() past the EOF, then emit end on the next tick.
      if (nOrig !== n && state.ended) endReadable(this);
    }

    if (ret !== null) this.emit('data', ret);

    return ret;
  };

  function chunkInvalid(state, chunk) {
    var er = null;
    if (!Buffer$f.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    return er;
  }

  function onEofChunk(stream, state) {
    if (state.ended) return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;

    // emit 'readable' now to make sure it gets picked up.
    emitReadable(stream);
  }

  // Don't emit readable right away in sync mode, because this can trigger
  // another read() call => stack overflow.  This way, it might trigger
  // a nextTick recursion warning, but that's not so bad.
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug('emitReadable', state.flowing);
      state.emittedReadable = true;
      if (state.sync) nextTick$1(emitReadable_, stream);else emitReadable_(stream);
    }
  }

  function emitReadable_(stream) {
    debug('emit readable');
    stream.emit('readable');
    flow(stream);
  }

  // at this point, the user has presumably seen the 'readable' event,
  // and called read() to consume some data.  that may have triggered
  // in turn another _read(n) call, in which case reading = true if
  // it's in progress.
  // However, if we're not ended, or reading, and the length < hwm,
  // then go ahead and try to read some more preemptively.
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      nextTick$1(maybeReadMore_, stream, state);
    }
  }

  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug('maybeReadMore read 0');
      stream.read(0);
      if (len === state.length)
        // didn't get any data, stop spinning.
        break;else len = state.length;
    }
    state.readingMore = false;
  }

  // abstract method.  to be overridden in specific implementation classes.
  // call cb(er, data) where data is <= n in length.
  // for virtual (non-string, non-buffer) streams, "length" is somewhat
  // arbitrary, and perhaps not very meaningful.
  Readable.prototype._read = function (n) {
    this.emit('error', new Error('not implemented'));
  };

  Readable.prototype.pipe = function (dest, pipeOpts) {
    var src = this;
    var state = this._readableState;

    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

    var doEnd = (!pipeOpts || pipeOpts.end !== false);

    var endFn = doEnd ? onend : cleanup;
    if (state.endEmitted) nextTick$1(endFn);else src.once('end', endFn);

    dest.on('unpipe', onunpipe);
    function onunpipe(readable) {
      debug('onunpipe');
      if (readable === src) {
        cleanup();
      }
    }

    function onend() {
      debug('onend');
      dest.end();
    }

    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);

    var cleanedUp = false;
    function cleanup() {
      debug('cleanup');
      // cleanup event handlers once the pipe is broken
      dest.removeListener('close', onclose);
      dest.removeListener('finish', onfinish);
      dest.removeListener('drain', ondrain);
      dest.removeListener('error', onerror);
      dest.removeListener('unpipe', onunpipe);
      src.removeListener('end', onend);
      src.removeListener('end', cleanup);
      src.removeListener('data', ondata);

      cleanedUp = true;

      // if the reader is waiting for a drain event from this
      // specific writer, then it would cause it to never start
      // flowing again.
      // So, if this is awaiting a drain, then we just call it now.
      // If we don't know, then assume that we are waiting for one.
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }

    // If the user pushes more data while we're writing to dest then we'll end up
    // in ondata again. However, we only want to increase awaitDrain once because
    // dest will only emit one 'drain' event for the multiple writes.
    // => Introduce a guard on increasing awaitDrain.
    var increasedAwaitDrain = false;
    src.on('data', ondata);
    function ondata(chunk) {
      debug('ondata');
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (false === ret && !increasedAwaitDrain) {
        // If the user unpiped during `dest.write()`, it is possible
        // to get stuck in a permanently paused state if that write
        // also returned false.
        // => Check whether `dest` is still a piping destination.
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug('false write response, pause', src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }

    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
      debug('onerror', er);
      unpipe();
      dest.removeListener('error', onerror);
      if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
    }

    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);

    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
      dest.removeListener('finish', onfinish);
      unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
      debug('onfinish');
      dest.removeListener('close', onclose);
      unpipe();
    }
    dest.once('finish', onfinish);

    function unpipe() {
      debug('unpipe');
      src.unpipe(dest);
    }

    // tell the dest that it's being piped to
    dest.emit('pipe', src);

    // start the flow if it hasn't been started already.
    if (!state.flowing) {
      debug('pipe resume');
      src.resume();
    }

    return dest;
  };

  function pipeOnDrain(src) {
    return function () {
      var state = src._readableState;
      debug('pipeOnDrain', state.awaitDrain);
      if (state.awaitDrain) state.awaitDrain--;
      if (state.awaitDrain === 0 && src.listeners('data').length) {
        state.flowing = true;
        flow(src);
      }
    };
  }

  Readable.prototype.unpipe = function (dest) {
    var state = this._readableState;

    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;

    // just one destination.  most common case.
    if (state.pipesCount === 1) {
      // passed in one, but it's not the right one.
      if (dest && dest !== state.pipes) return this;

      if (!dest) dest = state.pipes;

      // got a match.
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest) dest.emit('unpipe', this);
      return this;
    }

    // slow case. multiple pipe destinations.

    if (!dest) {
      // remove all.
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;

      for (var _i = 0; _i < len; _i++) {
        dests[_i].emit('unpipe', this);
      }return this;
    }

    // try to find the right one.
    var i = indexOf(state.pipes, dest);
    if (i === -1) return this;

    state.pipes.splice(i, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];

    dest.emit('unpipe', this);

    return this;
  };

  // set up data events if they are asked for
  // Ensure readable listeners eventually get something
  Readable.prototype.on = function (ev, fn) {
    var res = EventEmitter.prototype.on.call(this, ev, fn);

    if (ev === 'data') {
      // Start flowing on next tick if stream isn't explicitly paused
      if (this._readableState.flowing !== false) this.resume();
    } else if (ev === 'readable') {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          nextTick$1(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this);
        }
      }
    }

    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;

  function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
  }

  // pause() and resume() are remnants of the legacy readable stream API
  // If the user uses them, then switch into old mode.
  Readable.prototype.resume = function () {
    var state = this._readableState;
    if (!state.flowing) {
      debug('resume');
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };

  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      nextTick$1(resume_, stream, state);
    }
  }

  function resume_(stream, state) {
    if (!state.reading) {
      debug('resume read 0');
      stream.read(0);
    }

    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
  }

  Readable.prototype.pause = function () {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (false !== this._readableState.flowing) {
      debug('pause');
      this._readableState.flowing = false;
      this.emit('pause');
    }
    return this;
  };

  function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while (state.flowing && stream.read() !== null) {}
  }

  // wrap an old-style stream as the async data source.
  // This is *not* part of the readable stream interface.
  // It is an ugly unfortunate mess of history.
  Readable.prototype.wrap = function (stream) {
    var state = this._readableState;
    var paused = false;

    var self = this;
    stream.on('end', function () {
      debug('wrapped end');
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) self.push(chunk);
      }

      self.push(null);
    });

    stream.on('data', function (chunk) {
      debug('wrapped data');
      if (state.decoder) chunk = state.decoder.write(chunk);

      // don't skip over falsy values in objectMode
      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

      var ret = self.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });

    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for (var i in stream) {
      if (this[i] === undefined && typeof stream[i] === 'function') {
        this[i] = function (method) {
          return function () {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }

    // proxy certain important events.
    var events = ['error', 'close', 'destroy', 'pause', 'resume'];
    forEach(events, function (ev) {
      stream.on(ev, self.emit.bind(self, ev));
    });

    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    self._read = function (n) {
      debug('wrapped _read', n);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };

    return self;
  };

  // exposed for testing purposes only.
  Readable._fromList = fromList;

  // Pluck off n bytes from an array of buffers.
  // Length is the combined lengths of all the buffers in the list.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;

    var ret;
    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
      // read it all, truncate the list
      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      // read part of list
      ret = fromListPartial(n, state.buffer, state.decoder);
    }

    return ret;
  }

  // Extracts only enough buffered data to satisfy the amount requested.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      // slice is the same for buffers and strings
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      // first chunk is a perfect match
      ret = list.shift();
    } else {
      // result spans more than one buffer
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }

  // Copies a specified amount of characters from the list of buffered data
  // chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length) ret += str;else ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  // Copies a specified amount of bytes from the list of buffered data chunks.
  // This function is designed to be inlinable, so please take care when making
  // changes to the function body.
  function copyFromBuffer(n, list) {
    var ret = Buffer$f.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next) list.head = p.next;else list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }

  function endReadable(stream) {
    var state = stream._readableState;

    // If we get here before consuming all the bytes, then that is a
    // bug in node.  Should never happen.
    if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

    if (!state.endEmitted) {
      state.ended = true;
      nextTick$1(endReadableNT, state, stream);
    }
  }

  function endReadableNT(state, stream) {
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit('end');
    }
  }

  function forEach(xs, f) {
    for (var i = 0, l = xs.length; i < l; i++) {
      f(xs[i], i);
    }
  }

  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x) return i;
    }
    return -1;
  }

  // A bit simpler than readable streams.
  Writable.WritableState = WritableState;
  inherits$8(Writable, EventEmitter);

  function nop() {}

  function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
  }

  function WritableState(options, stream) {
    Object.defineProperty(this, 'buffer', {
      get: deprecate$1(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
    });
    options = options || {};

    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;

    if (stream instanceof Duplex$1) this.objectMode = this.objectMode || !!options.writableObjectMode;

    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    var hwm = options.highWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

    // cast to ints.
    this.highWaterMark = ~ ~this.highWaterMark;

    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;

    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;

    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';

    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;

    // a flag to see when we're in the middle of a write.
    this.writing = false;

    // when true all writes will be buffered until .uncork() call
    this.corked = 0;

    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;

    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;

    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function (er) {
      onwrite(stream, er);
    };

    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;

    // the amount that is being written when _write is called.
    this.writelen = 0;

    this.bufferedRequest = null;
    this.lastBufferedRequest = null;

    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;

    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;

    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;

    // count buffered requests
    this.bufferedRequestCount = 0;

    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
  }

  WritableState.prototype.getBuffer = function writableStateGetBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  function Writable(options) {

    // Writable ctor is applied to Duplexes, though they're not
    // instanceof Writable, they're instanceof Readable.
    if (!(this instanceof Writable) && !(this instanceof Duplex$1)) return new Writable(options);

    this._writableState = new WritableState(options, this);

    // legacy.
    this.writable = true;

    if (options) {
      if (typeof options.write === 'function') this._write = options.write;

      if (typeof options.writev === 'function') this._writev = options.writev;
    }

    EventEmitter.call(this);
  }

  // Otherwise people can pipe Writable streams, which is just wrong.
  Writable.prototype.pipe = function () {
    this.emit('error', new Error('Cannot pipe, not readable'));
  };

  function writeAfterEnd(stream, cb) {
    var er = new Error('write after end');
    // TODO: defer error events consistently everywhere, not just the cb
    stream.emit('error', er);
    nextTick$1(cb, er);
  }

  // If we get something that is not a buffer, string, null, or undefined,
  // and we're not in objectMode, then that's an error.
  // Otherwise stream chunks are all considered to be of length=1, and the
  // watermarks determine how many objects to keep in the buffer, rather than
  // how many bytes or characters.
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    // Always throw error if a null is written
    // if we are not in object mode then throw
    // if it is not a buffer, string, or undefined.
    if (chunk === null) {
      er = new TypeError('May not write null values to stream');
    } else if (!buffer.Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
      er = new TypeError('Invalid non-string/buffer chunk');
    }
    if (er) {
      stream.emit('error', er);
      nextTick$1(cb, er);
      valid = false;
    }
    return valid;
  }

  Writable.prototype.write = function (chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;

    if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (buffer.Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

    if (typeof cb !== 'function') cb = nop;

    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, chunk, encoding, cb);
    }

    return ret;
  };

  Writable.prototype.cork = function () {
    var state = this._writableState;

    state.corked++;
  };

  Writable.prototype.uncork = function () {
    var state = this._writableState;

    if (state.corked) {
      state.corked--;

      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
  };

  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };

  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
      chunk = buffer.Buffer.from(chunk, encoding);
    }
    return chunk;
  }

  // if we're already writing something, then just put this
  // in the queue, and wait our turn.  Otherwise, call _write
  // If we return false, then we need a drain event, so set that flag.
  function writeOrBuffer(stream, state, chunk, encoding, cb) {
    chunk = decodeChunk(state, chunk, encoding);

    if (buffer.Buffer.isBuffer(chunk)) encoding = 'buffer';
    var len = state.objectMode ? 1 : chunk.length;

    state.length += len;

    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;

    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }

    return ret;
  }

  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }

  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) nextTick$1(cb, er);else cb(er);

    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  }

  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }

  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;

    onwriteStateUpdate(state);

    if (er) onwriteError(stream, state, sync, er, cb);else {
      // Check if we're actually ready to finish, but don't emit yet
      var finished = needFinish(state);

      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }

      if (sync) {
        /*<replacement>*/
          nextTick$1(afterWrite, stream, state, finished, cb);
        /*</replacement>*/
      } else {
          afterWrite(stream, state, finished, cb);
        }
    }
  }

  function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }

  // Must force callback to be called on nextTick, so that we don't
  // emit 'drain' before the write() consumer gets the 'false' return
  // value, and has a chance to attach a 'drain' listener.
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit('drain');
    }
  }

  // if there's something in the buffer waiting, then process it
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;

    if (stream._writev && entry && entry.next) {
      // Fast case, write everything using _writev()
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;

      var count = 0;
      while (entry) {
        buffer[count] = entry;
        entry = entry.next;
        count += 1;
      }

      doWrite(stream, state, true, state.length, buffer, '', holder.finish);

      // doWrite is almost always async, defer these to save a bit of time
      // as the hot path ends with doWrite
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
    } else {
      // Slow case, write chunks one-by-one
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;

        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        // if we didn't call the onwrite immediately, then
        // it means that we need to wait until it does.
        // also, that means that the chunk and cb are currently
        // being processed, so move the buffer counter past them.
        if (state.writing) {
          break;
        }
      }

      if (entry === null) state.lastBufferedRequest = null;
    }

    state.bufferedRequestCount = 0;
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }

  Writable.prototype._write = function (chunk, encoding, cb) {
    cb(new Error('not implemented'));
  };

  Writable.prototype._writev = null;

  Writable.prototype.end = function (chunk, encoding, cb) {
    var state = this._writableState;

    if (typeof chunk === 'function') {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === 'function') {
      cb = encoding;
      encoding = null;
    }

    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

    // .end() fully uncorks
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }

    // ignore unnecessary end() calls.
    if (!state.ending && !state.finished) endWritable(this, state, cb);
  };

  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }

  function prefinish$1(stream, state) {
    if (!state.prefinished) {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }

  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      if (state.pendingcb === 0) {
        prefinish$1(stream, state);
        state.finished = true;
        stream.emit('finish');
      } else {
        prefinish$1(stream, state);
      }
    }
    return need;
  }

  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished) nextTick$1(cb);else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
  }

  // It seems a linked list but it is not
  // there will be only 2 of these for each stream
  function CorkedRequest(state) {
    var _this = this;

    this.next = null;
    this.entry = null;

    this.finish = function (err) {
      var entry = _this.entry;
      _this.entry = null;
      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      }
      if (state.corkedRequestsFree) {
        state.corkedRequestsFree.next = _this;
      } else {
        state.corkedRequestsFree = _this;
      }
    };
  }

  inherits$8(Duplex$1, Readable);

  var keys = Object.keys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex$1.prototype[method]) Duplex$1.prototype[method] = Writable.prototype[method];
  }
  function Duplex$1(options) {
    if (!(this instanceof Duplex$1)) return new Duplex$1(options);

    Readable.call(this, options);
    Writable.call(this, options);

    if (options && options.readable === false) this.readable = false;

    if (options && options.writable === false) this.writable = false;

    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

    this.once('end', onend);
  }

  // the no-half-open enforcer
  function onend() {
    // if we allow half-open state, or if the writable side ended,
    // then we're ok.
    if (this.allowHalfOpen || this._writableState.ended) return;

    // no more data can be written.
    // But allow more writes to happen in this tick.
    nextTick$1(onEndNT, this);
  }

  function onEndNT(self) {
    self.end();
  }

  // a transform stream is a readable/writable stream where you do
  inherits$8(Transform$8, Duplex$1);

  function TransformState(stream) {
    this.afterTransform = function (er, data) {
      return afterTransform$1(stream, er, data);
    };

    this.needTransform = false;
    this.transforming = false;
    this.writecb = null;
    this.writechunk = null;
    this.writeencoding = null;
  }

  function afterTransform$1(stream, er, data) {
    var ts = stream._transformState;
    ts.transforming = false;

    var cb = ts.writecb;

    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

    ts.writechunk = null;
    ts.writecb = null;

    if (data !== null && data !== undefined) stream.push(data);

    cb(er);

    var rs = stream._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      stream._read(rs.highWaterMark);
    }
  }
  function Transform$8(options) {
    if (!(this instanceof Transform$8)) return new Transform$8(options);

    Duplex$1.call(this, options);

    this._transformState = new TransformState(this);

    // when the writable side finishes, then flush out anything remaining.
    var stream = this;

    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;

    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;

      if (typeof options.flush === 'function') this._flush = options.flush;
    }

    this.once('prefinish', function () {
      if (typeof this._flush === 'function') this._flush(function (er) {
        done$1(stream, er);
      });else done$1(stream);
    });
  }

  Transform$8.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex$1.prototype.push.call(this, chunk, encoding);
  };

  // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.
  Transform$8.prototype._transform = function (chunk, encoding, cb) {
    throw new Error('Not implemented');
  };

  Transform$8.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  };

  // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.
  Transform$8.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  function done$1(stream, er) {
    if (er) return stream.emit('error', er);

    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    var ws = stream._writableState;
    var ts = stream._transformState;

    if (ws.length) throw new Error('Calling transform done when ws.length != 0');

    if (ts.transforming) throw new Error('Calling transform done when still transforming');

    return stream.push(null);
  }

  inherits$8(PassThrough$1, Transform$8);
  function PassThrough$1(options) {
    if (!(this instanceof PassThrough$1)) return new PassThrough$1(options);

    Transform$8.call(this, options);
  }

  PassThrough$1.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  inherits$8(Stream, EventEmitter);
  Stream.Readable = Readable;
  Stream.Writable = Writable;
  Stream.Duplex = Duplex$1;
  Stream.Transform = Transform$8;
  Stream.PassThrough = PassThrough$1;

  // Backwards-compat with node 0.4.x
  Stream.Stream = Stream;

  // old-style streams.  Note that the pipe method (the only relevant
  // part of this class) is overridden in the Readable class.

  function Stream() {
    EventEmitter.call(this);
  }

  Stream.prototype.pipe = function(dest, options) {
    var source = this;

    function ondata(chunk) {
      if (dest.writable) {
        if (false === dest.write(chunk) && source.pause) {
          source.pause();
        }
      }
    }

    source.on('data', ondata);

    function ondrain() {
      if (source.readable && source.resume) {
        source.resume();
      }
    }

    dest.on('drain', ondrain);

    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
      source.on('end', onend);
      source.on('close', onclose);
    }

    var didOnEnd = false;
    function onend() {
      if (didOnEnd) return;
      didOnEnd = true;

      dest.end();
    }


    function onclose() {
      if (didOnEnd) return;
      didOnEnd = true;

      if (typeof dest.destroy === 'function') dest.destroy();
    }

    // don't leave dangling pipes when there are errors.
    function onerror(er) {
      cleanup();
      if (EventEmitter.listenerCount(this, 'error') === 0) {
        throw er; // Unhandled stream error in pipe.
      }
    }

    source.on('error', onerror);
    dest.on('error', onerror);

    // remove all the event listeners that were added.
    function cleanup() {
      source.removeListener('data', ondata);
      dest.removeListener('drain', ondrain);

      source.removeListener('end', onend);
      source.removeListener('close', onclose);

      source.removeListener('error', onerror);
      dest.removeListener('error', onerror);

      source.removeListener('end', cleanup);
      source.removeListener('close', cleanup);

      dest.removeListener('close', cleanup);
    }

    source.on('end', cleanup);
    source.on('close', cleanup);

    dest.on('close', cleanup);

    dest.emit('pipe', source);

    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
  };

  var _polyfillNode_stream = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Stream,
    Readable: Readable,
    Writable: Writable,
    Duplex: Duplex$1,
    Transform: Transform$8,
    PassThrough: PassThrough$1,
    Stream: Stream
  });

  var require$$1 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_stream);

  var inherits_browser = {exports: {}};

  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    inherits_browser.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }

  var Buffer$8 = safeBuffer.exports.Buffer;
  var Transform$7 = require$$1.Transform;
  var StringDecoder = string_decoder.StringDecoder;
  var inherits$6 = inherits_browser.exports;

  function CipherBase (hashMode) {
    Transform$7.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) {
      this[hashMode] = this._finalOrDigest;
    } else {
      this.final = this._finalOrDigest;
    }
    if (this._final) {
      this.__final = this._final;
      this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
  }
  inherits$6(CipherBase, Transform$7);

  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
    if (typeof data === 'string') {
      data = Buffer$8.from(data, inputEnc);
    }

    var outData = this._update(data);
    if (this.hashMode) return this

    if (outputEnc) {
      outData = this._toString(outData, outputEnc);
    }

    return outData
  };

  CipherBase.prototype.setAutoPadding = function () {};
  CipherBase.prototype.getAuthTag = function () {
    throw new Error('trying to get auth tag in unsupported state')
  };

  CipherBase.prototype.setAuthTag = function () {
    throw new Error('trying to set auth tag in unsupported state')
  };

  CipherBase.prototype.setAAD = function () {
    throw new Error('trying to set aad in unsupported state')
  };

  CipherBase.prototype._transform = function (data, _, next) {
    var err;
    try {
      if (this.hashMode) {
        this._update(data);
      } else {
        this.push(this._update(data));
      }
    } catch (e) {
      err = e;
    } finally {
      next(err);
    }
  };
  CipherBase.prototype._flush = function (done) {
    var err;
    try {
      this.push(this.__final());
    } catch (e) {
      err = e;
    }

    done(err);
  };
  CipherBase.prototype._finalOrDigest = function (outputEnc) {
    var outData = this.__final() || Buffer$8.alloc(0);
    if (outputEnc) {
      outData = this._toString(outData, outputEnc, true);
    }
    return outData
  };

  CipherBase.prototype._toString = function (value, enc, fin) {
    if (!this._decoder) {
      this._decoder = new StringDecoder(enc);
      this._encoding = enc;
    }

    if (this._encoding !== enc) throw new Error('can\'t switch encodings')

    var out = this._decoder.write(value);
    if (fin) {
      out += this._decoder.end();
    }

    return out
  };

  var cipherBase = CipherBase;

  var Buffer$7 = safeBuffer.exports.Buffer;
  var ZEROES = Buffer$7.alloc(16, 0);

  function toArray (buf) {
    return [
      buf.readUInt32BE(0),
      buf.readUInt32BE(4),
      buf.readUInt32BE(8),
      buf.readUInt32BE(12)
    ]
  }

  function fromArray (out) {
    var buf = Buffer$7.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf
  }

  function GHASH$1 (key) {
    this.h = key;
    this.state = Buffer$7.alloc(16, 0);
    this.cache = Buffer$7.allocUnsafe(0);
  }

  // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
  // by Juho Vähä-Herttua
  GHASH$1.prototype.ghash = function (block) {
    var i = -1;
    while (++i < block.length) {
      this.state[i] ^= block[i];
    }
    this._multiply();
  };

  GHASH$1.prototype._multiply = function () {
    var Vi = toArray(this.h);
    var Zi = [0, 0, 0, 0];
    var j, xi, lsbVi;
    var i = -1;
    while (++i < 128) {
      xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0;
      if (xi) {
        // Z_i+1 = Z_i ^ V_i
        Zi[0] ^= Vi[0];
        Zi[1] ^= Vi[1];
        Zi[2] ^= Vi[2];
        Zi[3] ^= Vi[3];
      }

      // Store the value of LSB(V_i)
      lsbVi = (Vi[3] & 1) !== 0;

      // V_i+1 = V_i >> 1
      for (j = 3; j > 0; j--) {
        Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31);
      }
      Vi[0] = Vi[0] >>> 1;

      // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
      if (lsbVi) {
        Vi[0] = Vi[0] ^ (0xe1 << 24);
      }
    }
    this.state = fromArray(Zi);
  };

  GHASH$1.prototype.update = function (buf) {
    this.cache = Buffer$7.concat([this.cache, buf]);
    var chunk;
    while (this.cache.length >= 16) {
      chunk = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      this.ghash(chunk);
    }
  };

  GHASH$1.prototype.final = function (abl, bl) {
    if (this.cache.length) {
      this.ghash(Buffer$7.concat([this.cache, ZEROES], 16));
    }

    this.ghash(fromArray([0, abl, 0, bl]));
    return this.state
  };

  var ghash = GHASH$1;

  var aes$3 = aes$4;
  var Buffer$6 = safeBuffer.exports.Buffer;
  var Transform$6 = cipherBase;
  var inherits$5 = inherits_browser.exports;
  var GHASH = ghash;
  var xor = bufferXor;
  var incr32 = incr32_1;

  function xorTest (a, b) {
    var out = 0;
    if (a.length !== b.length) out++;

    var len = Math.min(a.length, b.length);
    for (var i = 0; i < len; ++i) {
      out += (a[i] ^ b[i]);
    }

    return out
  }

  function calcIv (self, iv, ck) {
    if (iv.length === 12) {
      self._finID = Buffer$6.concat([iv, Buffer$6.from([0, 0, 0, 1])]);
      return Buffer$6.concat([iv, Buffer$6.from([0, 0, 0, 2])])
    }
    var ghash = new GHASH(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
      toPad = 16 - toPad;
      ghash.update(Buffer$6.alloc(toPad, 0));
    }
    ghash.update(Buffer$6.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer$6.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = Buffer$6.from(self._finID);
    incr32(out);
    return out
  }
  function StreamCipher$3 (mode, key, iv, decrypt) {
    Transform$6.call(this);

    var h = Buffer$6.alloc(4, 0);

    this._cipher = new aes$3.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new GHASH(ck);
    iv = calcIv(this, iv, ck);

    this._prev = Buffer$6.from(iv);
    this._cache = Buffer$6.allocUnsafe(0);
    this._secCache = Buffer$6.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;

    this._authTag = null;
    this._called = false;
  }

  inherits$5(StreamCipher$3, Transform$6);

  StreamCipher$3.prototype._update = function (chunk) {
    if (!this._called && this._alen) {
      var rump = 16 - (this._alen % 16);
      if (rump < 16) {
        rump = Buffer$6.alloc(rump, 0);
        this._ghash.update(rump);
      }
    }

    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) {
      this._ghash.update(chunk);
    } else {
      this._ghash.update(out);
    }
    this._len += chunk.length;
    return out
  };

  StreamCipher$3.prototype._final = function () {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

    var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

    this._authTag = tag;
    this._cipher.scrub();
  };

  StreamCipher$3.prototype.getAuthTag = function getAuthTag () {
    if (this._decrypt || !Buffer$6.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

    return this._authTag
  };

  StreamCipher$3.prototype.setAuthTag = function setAuthTag (tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

    this._authTag = tag;
  };

  StreamCipher$3.prototype.setAAD = function setAAD (buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state')

    this._ghash.update(buf);
    this._alen += buf.length;
  };

  var authCipher = StreamCipher$3;

  var aes$2 = aes$4;
  var Buffer$5 = safeBuffer.exports.Buffer;
  var Transform$5 = cipherBase;
  var inherits$4 = inherits_browser.exports;

  function StreamCipher$2 (mode, key, iv, decrypt) {
    Transform$5.call(this);

    this._cipher = new aes$2.AES(key);
    this._prev = Buffer$5.from(iv);
    this._cache = Buffer$5.allocUnsafe(0);
    this._secCache = Buffer$5.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
  }

  inherits$4(StreamCipher$2, Transform$5);

  StreamCipher$2.prototype._update = function (chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt)
  };

  StreamCipher$2.prototype._final = function () {
    this._cipher.scrub();
  };

  var streamCipher = StreamCipher$2;

  var readableBrowser = {exports: {}};

  var require$$0 = /*@__PURE__*/getAugmentedNamespace(_polyfillNode_events);

  var streamBrowser = require$$0.EventEmitter;

  var buffer_list;
  var hasRequiredBuffer_list;

  function requireBuffer_list () {
  	if (hasRequiredBuffer_list) return buffer_list;
  	hasRequiredBuffer_list = 1;

  	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  	var _require = buffer,
  	    Buffer = _require.Buffer;

  	var _require2 = require$$3,
  	    inspect = _require2.inspect;

  	var custom = inspect && inspect.custom || 'inspect';

  	function copyBuffer(src, target, offset) {
  	  Buffer.prototype.copy.call(src, target, offset);
  	}

  	buffer_list =
  	/*#__PURE__*/
  	function () {
  	  function BufferList() {
  	    _classCallCheck(this, BufferList);

  	    this.head = null;
  	    this.tail = null;
  	    this.length = 0;
  	  }

  	  _createClass(BufferList, [{
  	    key: "push",
  	    value: function push(v) {
  	      var entry = {
  	        data: v,
  	        next: null
  	      };
  	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
  	      this.tail = entry;
  	      ++this.length;
  	    }
  	  }, {
  	    key: "unshift",
  	    value: function unshift(v) {
  	      var entry = {
  	        data: v,
  	        next: this.head
  	      };
  	      if (this.length === 0) this.tail = entry;
  	      this.head = entry;
  	      ++this.length;
  	    }
  	  }, {
  	    key: "shift",
  	    value: function shift() {
  	      if (this.length === 0) return;
  	      var ret = this.head.data;
  	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
  	      --this.length;
  	      return ret;
  	    }
  	  }, {
  	    key: "clear",
  	    value: function clear() {
  	      this.head = this.tail = null;
  	      this.length = 0;
  	    }
  	  }, {
  	    key: "join",
  	    value: function join(s) {
  	      if (this.length === 0) return '';
  	      var p = this.head;
  	      var ret = '' + p.data;

  	      while (p = p.next) {
  	        ret += s + p.data;
  	      }

  	      return ret;
  	    }
  	  }, {
  	    key: "concat",
  	    value: function concat(n) {
  	      if (this.length === 0) return Buffer.alloc(0);
  	      var ret = Buffer.allocUnsafe(n >>> 0);
  	      var p = this.head;
  	      var i = 0;

  	      while (p) {
  	        copyBuffer(p.data, ret, i);
  	        i += p.data.length;
  	        p = p.next;
  	      }

  	      return ret;
  	    } // Consumes a specified amount of bytes or characters from the buffered data.

  	  }, {
  	    key: "consume",
  	    value: function consume(n, hasStrings) {
  	      var ret;

  	      if (n < this.head.data.length) {
  	        // `slice` is the same for buffers and strings.
  	        ret = this.head.data.slice(0, n);
  	        this.head.data = this.head.data.slice(n);
  	      } else if (n === this.head.data.length) {
  	        // First chunk is a perfect match.
  	        ret = this.shift();
  	      } else {
  	        // Result spans more than one buffer.
  	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
  	      }

  	      return ret;
  	    }
  	  }, {
  	    key: "first",
  	    value: function first() {
  	      return this.head.data;
  	    } // Consumes a specified amount of characters from the buffered data.

  	  }, {
  	    key: "_getString",
  	    value: function _getString(n) {
  	      var p = this.head;
  	      var c = 1;
  	      var ret = p.data;
  	      n -= ret.length;

  	      while (p = p.next) {
  	        var str = p.data;
  	        var nb = n > str.length ? str.length : n;
  	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
  	        n -= nb;

  	        if (n === 0) {
  	          if (nb === str.length) {
  	            ++c;
  	            if (p.next) this.head = p.next;else this.head = this.tail = null;
  	          } else {
  	            this.head = p;
  	            p.data = str.slice(nb);
  	          }

  	          break;
  	        }

  	        ++c;
  	      }

  	      this.length -= c;
  	      return ret;
  	    } // Consumes a specified amount of bytes from the buffered data.

  	  }, {
  	    key: "_getBuffer",
  	    value: function _getBuffer(n) {
  	      var ret = Buffer.allocUnsafe(n);
  	      var p = this.head;
  	      var c = 1;
  	      p.data.copy(ret);
  	      n -= p.data.length;

  	      while (p = p.next) {
  	        var buf = p.data;
  	        var nb = n > buf.length ? buf.length : n;
  	        buf.copy(ret, ret.length - n, 0, nb);
  	        n -= nb;

  	        if (n === 0) {
  	          if (nb === buf.length) {
  	            ++c;
  	            if (p.next) this.head = p.next;else this.head = this.tail = null;
  	          } else {
  	            this.head = p;
  	            p.data = buf.slice(nb);
  	          }

  	          break;
  	        }

  	        ++c;
  	      }

  	      this.length -= c;
  	      return ret;
  	    } // Make sure the linked list only shows the minimal necessary information.

  	  }, {
  	    key: custom,
  	    value: function value(_, options) {
  	      return inspect(this, _objectSpread({}, options, {
  	        // Only inspect one level.
  	        depth: 0,
  	        // It should not recurse.
  	        customInspect: false
  	      }));
  	    }
  	  }]);

  	  return BufferList;
  	}();
  	return buffer_list;
  }

  function destroy(err, cb) {
    var _this = this;

    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;

    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err) {
        if (!this._writableState) {
          browser$1$1.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          browser$1$1.nextTick(emitErrorNT, this, err);
        }
      }

      return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks


    if (this._readableState) {
      this._readableState.destroyed = true;
    } // if this is a duplex stream mark the writable part as destroyed as well


    if (this._writableState) {
      this._writableState.destroyed = true;
    }

    this._destroy(err || null, function (err) {
      if (!cb && err) {
        if (!_this._writableState) {
          browser$1$1.nextTick(emitErrorAndCloseNT, _this, err);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          browser$1$1.nextTick(emitErrorAndCloseNT, _this, err);
        } else {
          browser$1$1.nextTick(emitCloseNT, _this);
        }
      } else if (cb) {
        browser$1$1.nextTick(emitCloseNT, _this);
        cb(err);
      } else {
        browser$1$1.nextTick(emitCloseNT, _this);
      }
    });

    return this;
  }

  function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
  }

  function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
  }

  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }

    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }

  function emitErrorNT(self, err) {
    self.emit('error', err);
  }

  function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
  }

  var destroy_1 = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
  };

  var errorsBrowser = {};

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

  var codes = {};

  function createErrorType(code, message, Base) {
    if (!Base) {
      Base = Error;
    }

    function getMessage(arg1, arg2, arg3) {
      if (typeof message === 'string') {
        return message;
      } else {
        return message(arg1, arg2, arg3);
      }
    }

    var NodeError =
    /*#__PURE__*/
    function (_Base) {
      _inheritsLoose(NodeError, _Base);

      function NodeError(arg1, arg2, arg3) {
        return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
      }

      return NodeError;
    }(Base);

    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
  } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


  function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
      var len = expected.length;
      expected = expected.map(function (i) {
        return String(i);
      });

      if (len > 2) {
        return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
      } else if (len === 2) {
        return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
      } else {
        return "of ".concat(thing, " ").concat(expected[0]);
      }
    } else {
      return "of ".concat(thing, " ").concat(String(expected));
    }
  } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


  function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


  function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) {
      this_len = str.length;
    }

    return str.substring(this_len - search.length, this_len) === search;
  } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


  function includes(str, search, start) {
    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + search.length > str.length) {
      return false;
    } else {
      return str.indexOf(search, start) !== -1;
    }
  }

  createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
  }, TypeError);
  createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;

    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
      determiner = 'must not be';
      expected = expected.replace(/^not /, '');
    } else {
      determiner = 'must be';
    }

    var msg;

    if (endsWith(name, ' argument')) {
      // For cases like 'first argument'
      msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    } else {
      var type = includes(name, '.') ? 'property' : 'argument';
      msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    }

    msg += ". Received type ".concat(typeof actual);
    return msg;
  }, TypeError);
  createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
  createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
    return 'The ' + name + ' method is not implemented';
  });
  createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
  createErrorType('ERR_STREAM_DESTROYED', function (name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
  });
  createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
  createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
  createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
  createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
  createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
    return 'Unknown encoding: ' + arg;
  }, TypeError);
  createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
  errorsBrowser.codes = codes;

  var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;

  function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
  }

  function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

    if (hwm != null) {
      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
        var name = isDuplex ? duplexKey : 'highWaterMark';
        throw new ERR_INVALID_OPT_VALUE(name, hwm);
      }

      return Math.floor(hwm);
    } // Default value


    return state.objectMode ? 16 : 16 * 1024;
  }

  var state = {
    getHighWaterMark: getHighWaterMark
  };

  /**
   * Module exports.
   */

  var browser = deprecate;

  /**
   * Mark that a method should not be used.
   * Returns a modified function which warns once by default.
   *
   * If `localStorage.noDeprecation = true` is set, then it is a no-op.
   *
   * If `localStorage.throwDeprecation = true` is set, then deprecated functions
   * will throw an Error when invoked.
   *
   * If `localStorage.traceDeprecation = true` is set, then deprecated functions
   * will invoke `console.trace()` instead of `console.error()`.
   *
   * @param {Function} fn - the function to deprecate
   * @param {String} msg - the string to print to the console when `fn` is invoked
   * @returns {Function} a new "deprecated" version of `fn`
   * @api public
   */

  function deprecate (fn, msg) {
    if (config('noDeprecation')) {
      return fn;
    }

    var warned = false;
    function deprecated() {
      if (!warned) {
        if (config('throwDeprecation')) {
          throw new Error(msg);
        } else if (config('traceDeprecation')) {
          console.trace(msg);
        } else {
          console.warn(msg);
        }
        warned = true;
      }
      return fn.apply(this, arguments);
    }

    return deprecated;
  }

  /**
   * Checks `localStorage` for boolean values for the given `name`.
   *
   * @param {String} name
   * @returns {Boolean}
   * @api private
   */

  function config (name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
      if (!commonjsGlobal.localStorage) return false;
    } catch (_) {
      return false;
    }
    var val = commonjsGlobal.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
  }

  var _stream_writable;
  var hasRequired_stream_writable;

  function require_stream_writable () {
  	if (hasRequired_stream_writable) return _stream_writable;
  	hasRequired_stream_writable = 1;

  	_stream_writable = Writable;
  	// there will be only 2 of these for each stream


  	function CorkedRequest(state) {
  	  var _this = this;

  	  this.next = null;
  	  this.entry = null;

  	  this.finish = function () {
  	    onCorkedFinish(_this, state);
  	  };
  	}
  	/* </replacement> */

  	/*<replacement>*/


  	var Duplex;
  	/*</replacement>*/

  	Writable.WritableState = WritableState;
  	/*<replacement>*/

  	var internalUtil = {
  	  deprecate: browser
  	};
  	/*</replacement>*/

  	/*<replacement>*/

  	var Stream = streamBrowser;
  	/*</replacement>*/


  	var Buffer = buffer.Buffer;

  	var OurUint8Array = commonjsGlobal.Uint8Array || function () {};

  	function _uint8ArrayToBuffer(chunk) {
  	  return Buffer.from(chunk);
  	}

  	function _isUint8Array(obj) {
  	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  	}

  	var destroyImpl = destroy_1;

  	var _require = state,
  	    getHighWaterMark = _require.getHighWaterMark;

  	var _require$codes = errorsBrowser.codes,
  	    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  	    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  	    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  	    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  	    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  	    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  	    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  	    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

  	var errorOrDestroy = destroyImpl.errorOrDestroy;

  	inherits_browser.exports(Writable, Stream);

  	function nop() {}

  	function WritableState(options, stream, isDuplex) {
  	  Duplex = Duplex || require_stream_duplex();
  	  options = options || {}; // Duplex streams are both readable and writable, but share
  	  // the same options object.
  	  // However, some cases require setting options to different
  	  // values for the readable and the writable sides of the duplex stream,
  	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

  	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  	  // contains buffers or objects.

  	  this.objectMode = !!options.objectMode;
  	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  	  // Note: 0 is a valid value, means that we always return false if
  	  // the entire buffer is not flushed immediately on write()

  	  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

  	  this.finalCalled = false; // drain event flag.

  	  this.needDrain = false; // at the start of calling end()

  	  this.ending = false; // when end() has been called, and returned

  	  this.ended = false; // when 'finish' is emitted

  	  this.finished = false; // has it been destroyed

  	  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  	  // this is here so that some node-core streams can optimize string
  	  // handling at a lower level.

  	  var noDecode = options.decodeStrings === false;
  	  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  	  // encoding is 'binary' so we have to make this configurable.
  	  // Everything else in the universe uses 'utf8', though.

  	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  	  // of how much we're waiting to get pushed to some underlying
  	  // socket or file.

  	  this.length = 0; // a flag to see when we're in the middle of a write.

  	  this.writing = false; // when true all writes will be buffered until .uncork() call

  	  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  	  // or on a later tick.  We set this to true at first, because any
  	  // actions that shouldn't happen until "later" should generally also
  	  // not happen before the first write call.

  	  this.sync = true; // a flag to know if we're processing previously buffered items, which
  	  // may call the _write() callback in the same tick, so that we don't
  	  // end up in an overlapped onwrite situation.

  	  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  	  this.onwrite = function (er) {
  	    onwrite(stream, er);
  	  }; // the callback that the user supplies to write(chunk,encoding,cb)


  	  this.writecb = null; // the amount that is being written when _write is called.

  	  this.writelen = 0;
  	  this.bufferedRequest = null;
  	  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  	  // this must be 0 before 'finish' can be emitted

  	  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  	  // This is relevant for synchronous Transform streams

  	  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  	  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

  	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

  	  this.autoDestroy = !!options.autoDestroy; // count buffered requests

  	  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  	  // one allocated and free to use, and we maintain at most two

  	  this.corkedRequestsFree = new CorkedRequest(this);
  	}

  	WritableState.prototype.getBuffer = function getBuffer() {
  	  var current = this.bufferedRequest;
  	  var out = [];

  	  while (current) {
  	    out.push(current);
  	    current = current.next;
  	  }

  	  return out;
  	};

  	(function () {
  	  try {
  	    Object.defineProperty(WritableState.prototype, 'buffer', {
  	      get: internalUtil.deprecate(function writableStateBufferGetter() {
  	        return this.getBuffer();
  	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
  	    });
  	  } catch (_) {}
  	})(); // Test _writableState for inheritance to account for Duplex streams,
  	// whose prototype chain only points to Readable.


  	var realHasInstance;

  	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  	  realHasInstance = Function.prototype[Symbol.hasInstance];
  	  Object.defineProperty(Writable, Symbol.hasInstance, {
  	    value: function value(object) {
  	      if (realHasInstance.call(this, object)) return true;
  	      if (this !== Writable) return false;
  	      return object && object._writableState instanceof WritableState;
  	    }
  	  });
  	} else {
  	  realHasInstance = function realHasInstance(object) {
  	    return object instanceof this;
  	  };
  	}

  	function Writable(options) {
  	  Duplex = Duplex || require_stream_duplex(); // Writable ctor is applied to Duplexes, too.
  	  // `realHasInstance` is necessary because using plain `instanceof`
  	  // would return false, as no `_writableState` property is attached.
  	  // Trying to use the custom `instanceof` for Writable here will also break the
  	  // Node.js LazyTransform implementation, which has a non-trivial getter for
  	  // `_writableState` that would lead to infinite recursion.
  	  // Checking for a Stream.Duplex instance is faster here instead of inside
  	  // the WritableState constructor, at least with V8 6.5

  	  var isDuplex = this instanceof Duplex;
  	  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  	  this._writableState = new WritableState(options, this, isDuplex); // legacy.

  	  this.writable = true;

  	  if (options) {
  	    if (typeof options.write === 'function') this._write = options.write;
  	    if (typeof options.writev === 'function') this._writev = options.writev;
  	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  	    if (typeof options.final === 'function') this._final = options.final;
  	  }

  	  Stream.call(this);
  	} // Otherwise people can pipe Writable streams, which is just wrong.


  	Writable.prototype.pipe = function () {
  	  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
  	};

  	function writeAfterEnd(stream, cb) {
  	  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

  	  errorOrDestroy(stream, er);
  	  browser$1$1.nextTick(cb, er);
  	} // Checks that a user-supplied chunk is valid, especially for the particular
  	// mode the stream is in. Currently this means that `null` is never accepted
  	// and undefined/non-string values are only allowed in object mode.


  	function validChunk(stream, state, chunk, cb) {
  	  var er;

  	  if (chunk === null) {
  	    er = new ERR_STREAM_NULL_VALUES();
  	  } else if (typeof chunk !== 'string' && !state.objectMode) {
  	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  	  }

  	  if (er) {
  	    errorOrDestroy(stream, er);
  	    browser$1$1.nextTick(cb, er);
  	    return false;
  	  }

  	  return true;
  	}

  	Writable.prototype.write = function (chunk, encoding, cb) {
  	  var state = this._writableState;
  	  var ret = false;

  	  var isBuf = !state.objectMode && _isUint8Array(chunk);

  	  if (isBuf && !Buffer.isBuffer(chunk)) {
  	    chunk = _uint8ArrayToBuffer(chunk);
  	  }

  	  if (typeof encoding === 'function') {
  	    cb = encoding;
  	    encoding = null;
  	  }

  	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  	  if (typeof cb !== 'function') cb = nop;
  	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
  	    state.pendingcb++;
  	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  	  }
  	  return ret;
  	};

  	Writable.prototype.cork = function () {
  	  this._writableState.corked++;
  	};

  	Writable.prototype.uncork = function () {
  	  var state = this._writableState;

  	  if (state.corked) {
  	    state.corked--;
  	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  	  }
  	};

  	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  	  // node::ParseEncoding() requires lower case.
  	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  	  this._writableState.defaultEncoding = encoding;
  	  return this;
  	};

  	Object.defineProperty(Writable.prototype, 'writableBuffer', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._writableState && this._writableState.getBuffer();
  	  }
  	});

  	function decodeChunk(state, chunk, encoding) {
  	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
  	    chunk = Buffer.from(chunk, encoding);
  	  }

  	  return chunk;
  	}

  	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._writableState.highWaterMark;
  	  }
  	}); // if we're already writing something, then just put this
  	// in the queue, and wait our turn.  Otherwise, call _write
  	// If we return false, then we need a drain event, so set that flag.

  	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  	  if (!isBuf) {
  	    var newChunk = decodeChunk(state, chunk, encoding);

  	    if (chunk !== newChunk) {
  	      isBuf = true;
  	      encoding = 'buffer';
  	      chunk = newChunk;
  	    }
  	  }

  	  var len = state.objectMode ? 1 : chunk.length;
  	  state.length += len;
  	  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  	  if (!ret) state.needDrain = true;

  	  if (state.writing || state.corked) {
  	    var last = state.lastBufferedRequest;
  	    state.lastBufferedRequest = {
  	      chunk: chunk,
  	      encoding: encoding,
  	      isBuf: isBuf,
  	      callback: cb,
  	      next: null
  	    };

  	    if (last) {
  	      last.next = state.lastBufferedRequest;
  	    } else {
  	      state.bufferedRequest = state.lastBufferedRequest;
  	    }

  	    state.bufferedRequestCount += 1;
  	  } else {
  	    doWrite(stream, state, false, len, chunk, encoding, cb);
  	  }

  	  return ret;
  	}

  	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  	  state.writelen = len;
  	  state.writecb = cb;
  	  state.writing = true;
  	  state.sync = true;
  	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  	  state.sync = false;
  	}

  	function onwriteError(stream, state, sync, er, cb) {
  	  --state.pendingcb;

  	  if (sync) {
  	    // defer the callback if we are being called synchronously
  	    // to avoid piling up things on the stack
  	    browser$1$1.nextTick(cb, er); // this can emit finish, and it will always happen
  	    // after error

  	    browser$1$1.nextTick(finishMaybe, stream, state);
  	    stream._writableState.errorEmitted = true;
  	    errorOrDestroy(stream, er);
  	  } else {
  	    // the caller expect this to happen before if
  	    // it is async
  	    cb(er);
  	    stream._writableState.errorEmitted = true;
  	    errorOrDestroy(stream, er); // this can emit finish, but finish must
  	    // always follow error

  	    finishMaybe(stream, state);
  	  }
  	}

  	function onwriteStateUpdate(state) {
  	  state.writing = false;
  	  state.writecb = null;
  	  state.length -= state.writelen;
  	  state.writelen = 0;
  	}

  	function onwrite(stream, er) {
  	  var state = stream._writableState;
  	  var sync = state.sync;
  	  var cb = state.writecb;
  	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  	  onwriteStateUpdate(state);
  	  if (er) onwriteError(stream, state, sync, er, cb);else {
  	    // Check if we're actually ready to finish, but don't emit yet
  	    var finished = needFinish(state) || stream.destroyed;

  	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
  	      clearBuffer(stream, state);
  	    }

  	    if (sync) {
  	      browser$1$1.nextTick(afterWrite, stream, state, finished, cb);
  	    } else {
  	      afterWrite(stream, state, finished, cb);
  	    }
  	  }
  	}

  	function afterWrite(stream, state, finished, cb) {
  	  if (!finished) onwriteDrain(stream, state);
  	  state.pendingcb--;
  	  cb();
  	  finishMaybe(stream, state);
  	} // Must force callback to be called on nextTick, so that we don't
  	// emit 'drain' before the write() consumer gets the 'false' return
  	// value, and has a chance to attach a 'drain' listener.


  	function onwriteDrain(stream, state) {
  	  if (state.length === 0 && state.needDrain) {
  	    state.needDrain = false;
  	    stream.emit('drain');
  	  }
  	} // if there's something in the buffer waiting, then process it


  	function clearBuffer(stream, state) {
  	  state.bufferProcessing = true;
  	  var entry = state.bufferedRequest;

  	  if (stream._writev && entry && entry.next) {
  	    // Fast case, write everything using _writev()
  	    var l = state.bufferedRequestCount;
  	    var buffer = new Array(l);
  	    var holder = state.corkedRequestsFree;
  	    holder.entry = entry;
  	    var count = 0;
  	    var allBuffers = true;

  	    while (entry) {
  	      buffer[count] = entry;
  	      if (!entry.isBuf) allBuffers = false;
  	      entry = entry.next;
  	      count += 1;
  	    }

  	    buffer.allBuffers = allBuffers;
  	    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
  	    // as the hot path ends with doWrite

  	    state.pendingcb++;
  	    state.lastBufferedRequest = null;

  	    if (holder.next) {
  	      state.corkedRequestsFree = holder.next;
  	      holder.next = null;
  	    } else {
  	      state.corkedRequestsFree = new CorkedRequest(state);
  	    }

  	    state.bufferedRequestCount = 0;
  	  } else {
  	    // Slow case, write chunks one-by-one
  	    while (entry) {
  	      var chunk = entry.chunk;
  	      var encoding = entry.encoding;
  	      var cb = entry.callback;
  	      var len = state.objectMode ? 1 : chunk.length;
  	      doWrite(stream, state, false, len, chunk, encoding, cb);
  	      entry = entry.next;
  	      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
  	      // it means that we need to wait until it does.
  	      // also, that means that the chunk and cb are currently
  	      // being processed, so move the buffer counter past them.

  	      if (state.writing) {
  	        break;
  	      }
  	    }

  	    if (entry === null) state.lastBufferedRequest = null;
  	  }

  	  state.bufferedRequest = entry;
  	  state.bufferProcessing = false;
  	}

  	Writable.prototype._write = function (chunk, encoding, cb) {
  	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
  	};

  	Writable.prototype._writev = null;

  	Writable.prototype.end = function (chunk, encoding, cb) {
  	  var state = this._writableState;

  	  if (typeof chunk === 'function') {
  	    cb = chunk;
  	    chunk = null;
  	    encoding = null;
  	  } else if (typeof encoding === 'function') {
  	    cb = encoding;
  	    encoding = null;
  	  }

  	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  	  if (state.corked) {
  	    state.corked = 1;
  	    this.uncork();
  	  } // ignore unnecessary end() calls.


  	  if (!state.ending) endWritable(this, state, cb);
  	  return this;
  	};

  	Object.defineProperty(Writable.prototype, 'writableLength', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._writableState.length;
  	  }
  	});

  	function needFinish(state) {
  	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  	}

  	function callFinal(stream, state) {
  	  stream._final(function (err) {
  	    state.pendingcb--;

  	    if (err) {
  	      errorOrDestroy(stream, err);
  	    }

  	    state.prefinished = true;
  	    stream.emit('prefinish');
  	    finishMaybe(stream, state);
  	  });
  	}

  	function prefinish(stream, state) {
  	  if (!state.prefinished && !state.finalCalled) {
  	    if (typeof stream._final === 'function' && !state.destroyed) {
  	      state.pendingcb++;
  	      state.finalCalled = true;
  	      browser$1$1.nextTick(callFinal, stream, state);
  	    } else {
  	      state.prefinished = true;
  	      stream.emit('prefinish');
  	    }
  	  }
  	}

  	function finishMaybe(stream, state) {
  	  var need = needFinish(state);

  	  if (need) {
  	    prefinish(stream, state);

  	    if (state.pendingcb === 0) {
  	      state.finished = true;
  	      stream.emit('finish');

  	      if (state.autoDestroy) {
  	        // In case of duplex streams we need a way to detect
  	        // if the readable side is ready for autoDestroy as well
  	        var rState = stream._readableState;

  	        if (!rState || rState.autoDestroy && rState.endEmitted) {
  	          stream.destroy();
  	        }
  	      }
  	    }
  	  }

  	  return need;
  	}

  	function endWritable(stream, state, cb) {
  	  state.ending = true;
  	  finishMaybe(stream, state);

  	  if (cb) {
  	    if (state.finished) browser$1$1.nextTick(cb);else stream.once('finish', cb);
  	  }

  	  state.ended = true;
  	  stream.writable = false;
  	}

  	function onCorkedFinish(corkReq, state, err) {
  	  var entry = corkReq.entry;
  	  corkReq.entry = null;

  	  while (entry) {
  	    var cb = entry.callback;
  	    state.pendingcb--;
  	    cb(err);
  	    entry = entry.next;
  	  } // reuse the free corkReq.


  	  state.corkedRequestsFree.next = corkReq;
  	}

  	Object.defineProperty(Writable.prototype, 'destroyed', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    if (this._writableState === undefined) {
  	      return false;
  	    }

  	    return this._writableState.destroyed;
  	  },
  	  set: function set(value) {
  	    // we ignore the value if the stream
  	    // has not been initialized yet
  	    if (!this._writableState) {
  	      return;
  	    } // backward compatibility, the user is explicitly
  	    // managing destroyed


  	    this._writableState.destroyed = value;
  	  }
  	});
  	Writable.prototype.destroy = destroyImpl.destroy;
  	Writable.prototype._undestroy = destroyImpl.undestroy;

  	Writable.prototype._destroy = function (err, cb) {
  	  cb(err);
  	};
  	return _stream_writable;
  }

  var _stream_duplex;
  var hasRequired_stream_duplex;

  function require_stream_duplex () {
  	if (hasRequired_stream_duplex) return _stream_duplex;
  	hasRequired_stream_duplex = 1;
  	/*<replacement>*/

  	var objectKeys = Object.keys || function (obj) {
  	  var keys = [];

  	  for (var key in obj) {
  	    keys.push(key);
  	  }

  	  return keys;
  	};
  	/*</replacement>*/


  	_stream_duplex = Duplex;

  	var Readable = require_stream_readable();

  	var Writable = require_stream_writable();

  	inherits_browser.exports(Duplex, Readable);

  	{
  	  // Allow the keys array to be GC'ed.
  	  var keys = objectKeys(Writable.prototype);

  	  for (var v = 0; v < keys.length; v++) {
  	    var method = keys[v];
  	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  	  }
  	}

  	function Duplex(options) {
  	  if (!(this instanceof Duplex)) return new Duplex(options);
  	  Readable.call(this, options);
  	  Writable.call(this, options);
  	  this.allowHalfOpen = true;

  	  if (options) {
  	    if (options.readable === false) this.readable = false;
  	    if (options.writable === false) this.writable = false;

  	    if (options.allowHalfOpen === false) {
  	      this.allowHalfOpen = false;
  	      this.once('end', onend);
  	    }
  	  }
  	}

  	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._writableState.highWaterMark;
  	  }
  	});
  	Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._writableState && this._writableState.getBuffer();
  	  }
  	});
  	Object.defineProperty(Duplex.prototype, 'writableLength', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._writableState.length;
  	  }
  	}); // the no-half-open enforcer

  	function onend() {
  	  // If the writable side ended, then we're ok.
  	  if (this._writableState.ended) return; // no more data can be written.
  	  // But allow more writes to happen in this tick.

  	  browser$1$1.nextTick(onEndNT, this);
  	}

  	function onEndNT(self) {
  	  self.end();
  	}

  	Object.defineProperty(Duplex.prototype, 'destroyed', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    if (this._readableState === undefined || this._writableState === undefined) {
  	      return false;
  	    }

  	    return this._readableState.destroyed && this._writableState.destroyed;
  	  },
  	  set: function set(value) {
  	    // we ignore the value if the stream
  	    // has not been initialized yet
  	    if (this._readableState === undefined || this._writableState === undefined) {
  	      return;
  	    } // backward compatibility, the user is explicitly
  	    // managing destroyed


  	    this._readableState.destroyed = value;
  	    this._writableState.destroyed = value;
  	  }
  	});
  	return _stream_duplex;
  }

  var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;

  function once$1(callback) {
    var called = false;
    return function () {
      if (called) return;
      called = true;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      callback.apply(this, args);
    };
  }

  function noop$1() {}

  function isRequest$1(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
  }

  function eos$1(stream, opts, callback) {
    if (typeof opts === 'function') return eos$1(stream, null, opts);
    if (!opts) opts = {};
    callback = once$1(callback || noop$1);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;

    var onlegacyfinish = function onlegacyfinish() {
      if (!stream.writable) onfinish();
    };

    var writableEnded = stream._writableState && stream._writableState.finished;

    var onfinish = function onfinish() {
      writable = false;
      writableEnded = true;
      if (!readable) callback.call(stream);
    };

    var readableEnded = stream._readableState && stream._readableState.endEmitted;

    var onend = function onend() {
      readable = false;
      readableEnded = true;
      if (!writable) callback.call(stream);
    };

    var onerror = function onerror(err) {
      callback.call(stream, err);
    };

    var onclose = function onclose() {
      var err;

      if (readable && !readableEnded) {
        if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }

      if (writable && !writableEnded) {
        if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
    };

    var onrequest = function onrequest() {
      stream.req.on('finish', onfinish);
    };

    if (isRequest$1(stream)) {
      stream.on('complete', onfinish);
      stream.on('abort', onclose);
      if (stream.req) onrequest();else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
      // legacy streams
      stream.on('end', onlegacyfinish);
      stream.on('close', onlegacyfinish);
    }

    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function () {
      stream.removeListener('complete', onfinish);
      stream.removeListener('abort', onclose);
      stream.removeListener('request', onrequest);
      if (stream.req) stream.req.removeListener('finish', onfinish);
      stream.removeListener('end', onlegacyfinish);
      stream.removeListener('close', onlegacyfinish);
      stream.removeListener('finish', onfinish);
      stream.removeListener('end', onend);
      stream.removeListener('error', onerror);
      stream.removeListener('close', onclose);
    };
  }

  var endOfStream = eos$1;

  var async_iterator;
  var hasRequiredAsync_iterator;

  function requireAsync_iterator () {
  	if (hasRequiredAsync_iterator) return async_iterator;
  	hasRequiredAsync_iterator = 1;

  	var _Object$setPrototypeO;

  	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  	var finished = endOfStream;

  	var kLastResolve = Symbol('lastResolve');
  	var kLastReject = Symbol('lastReject');
  	var kError = Symbol('error');
  	var kEnded = Symbol('ended');
  	var kLastPromise = Symbol('lastPromise');
  	var kHandlePromise = Symbol('handlePromise');
  	var kStream = Symbol('stream');

  	function createIterResult(value, done) {
  	  return {
  	    value: value,
  	    done: done
  	  };
  	}

  	function readAndResolve(iter) {
  	  var resolve = iter[kLastResolve];

  	  if (resolve !== null) {
  	    var data = iter[kStream].read(); // we defer if data is null
  	    // we can be expecting either 'end' or
  	    // 'error'

  	    if (data !== null) {
  	      iter[kLastPromise] = null;
  	      iter[kLastResolve] = null;
  	      iter[kLastReject] = null;
  	      resolve(createIterResult(data, false));
  	    }
  	  }
  	}

  	function onReadable(iter) {
  	  // we wait for the next tick, because it might
  	  // emit an error with process.nextTick
  	  browser$1$1.nextTick(readAndResolve, iter);
  	}

  	function wrapForNext(lastPromise, iter) {
  	  return function (resolve, reject) {
  	    lastPromise.then(function () {
  	      if (iter[kEnded]) {
  	        resolve(createIterResult(undefined, true));
  	        return;
  	      }

  	      iter[kHandlePromise](resolve, reject);
  	    }, reject);
  	  };
  	}

  	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
  	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  	  get stream() {
  	    return this[kStream];
  	  },

  	  next: function next() {
  	    var _this = this;

  	    // if we have detected an error in the meanwhile
  	    // reject straight away
  	    var error = this[kError];

  	    if (error !== null) {
  	      return Promise.reject(error);
  	    }

  	    if (this[kEnded]) {
  	      return Promise.resolve(createIterResult(undefined, true));
  	    }

  	    if (this[kStream].destroyed) {
  	      // We need to defer via nextTick because if .destroy(err) is
  	      // called, the error will be emitted via nextTick, and
  	      // we cannot guarantee that there is no error lingering around
  	      // waiting to be emitted.
  	      return new Promise(function (resolve, reject) {
  	        browser$1$1.nextTick(function () {
  	          if (_this[kError]) {
  	            reject(_this[kError]);
  	          } else {
  	            resolve(createIterResult(undefined, true));
  	          }
  	        });
  	      });
  	    } // if we have multiple next() calls
  	    // we will wait for the previous Promise to finish
  	    // this logic is optimized to support for await loops,
  	    // where next() is only called once at a time


  	    var lastPromise = this[kLastPromise];
  	    var promise;

  	    if (lastPromise) {
  	      promise = new Promise(wrapForNext(lastPromise, this));
  	    } else {
  	      // fast path needed to support multiple this.push()
  	      // without triggering the next() queue
  	      var data = this[kStream].read();

  	      if (data !== null) {
  	        return Promise.resolve(createIterResult(data, false));
  	      }

  	      promise = new Promise(this[kHandlePromise]);
  	    }

  	    this[kLastPromise] = promise;
  	    return promise;
  	  }
  	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  	  return this;
  	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  	  var _this2 = this;

  	  // destroy(err, cb) is a private API
  	  // we can guarantee we have that here, because we control the
  	  // Readable class this is attached to
  	  return new Promise(function (resolve, reject) {
  	    _this2[kStream].destroy(null, function (err) {
  	      if (err) {
  	        reject(err);
  	        return;
  	      }

  	      resolve(createIterResult(undefined, true));
  	    });
  	  });
  	}), _Object$setPrototypeO), AsyncIteratorPrototype);

  	var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  	  var _Object$create;

  	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
  	    value: stream,
  	    writable: true
  	  }), _defineProperty(_Object$create, kLastResolve, {
  	    value: null,
  	    writable: true
  	  }), _defineProperty(_Object$create, kLastReject, {
  	    value: null,
  	    writable: true
  	  }), _defineProperty(_Object$create, kError, {
  	    value: null,
  	    writable: true
  	  }), _defineProperty(_Object$create, kEnded, {
  	    value: stream._readableState.endEmitted,
  	    writable: true
  	  }), _defineProperty(_Object$create, kHandlePromise, {
  	    value: function value(resolve, reject) {
  	      var data = iterator[kStream].read();

  	      if (data) {
  	        iterator[kLastPromise] = null;
  	        iterator[kLastResolve] = null;
  	        iterator[kLastReject] = null;
  	        resolve(createIterResult(data, false));
  	      } else {
  	        iterator[kLastResolve] = resolve;
  	        iterator[kLastReject] = reject;
  	      }
  	    },
  	    writable: true
  	  }), _Object$create));
  	  iterator[kLastPromise] = null;
  	  finished(stream, function (err) {
  	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
  	      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
  	      // returned by next() and store the error

  	      if (reject !== null) {
  	        iterator[kLastPromise] = null;
  	        iterator[kLastResolve] = null;
  	        iterator[kLastReject] = null;
  	        reject(err);
  	      }

  	      iterator[kError] = err;
  	      return;
  	    }

  	    var resolve = iterator[kLastResolve];

  	    if (resolve !== null) {
  	      iterator[kLastPromise] = null;
  	      iterator[kLastResolve] = null;
  	      iterator[kLastReject] = null;
  	      resolve(createIterResult(undefined, true));
  	    }

  	    iterator[kEnded] = true;
  	  });
  	  stream.on('readable', onReadable.bind(null, iterator));
  	  return iterator;
  	};

  	async_iterator = createReadableStreamAsyncIterator;
  	return async_iterator;
  }

  var fromBrowser;
  var hasRequiredFromBrowser;

  function requireFromBrowser () {
  	if (hasRequiredFromBrowser) return fromBrowser;
  	hasRequiredFromBrowser = 1;
  	fromBrowser = function () {
  	  throw new Error('Readable.from is not available in the browser')
  	};
  	return fromBrowser;
  }

  var _stream_readable;
  var hasRequired_stream_readable;

  function require_stream_readable () {
  	if (hasRequired_stream_readable) return _stream_readable;
  	hasRequired_stream_readable = 1;

  	_stream_readable = Readable;
  	/*<replacement>*/

  	var Duplex;
  	/*</replacement>*/

  	Readable.ReadableState = ReadableState;
  	/*<replacement>*/

  	require$$0.EventEmitter;

  	var EElistenerCount = function EElistenerCount(emitter, type) {
  	  return emitter.listeners(type).length;
  	};
  	/*</replacement>*/

  	/*<replacement>*/


  	var Stream = streamBrowser;
  	/*</replacement>*/


  	var Buffer = buffer.Buffer;

  	var OurUint8Array = commonjsGlobal.Uint8Array || function () {};

  	function _uint8ArrayToBuffer(chunk) {
  	  return Buffer.from(chunk);
  	}

  	function _isUint8Array(obj) {
  	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
  	}
  	/*<replacement>*/


  	var debugUtil = require$$3;

  	var debug;

  	if (debugUtil && debugUtil.debuglog) {
  	  debug = debugUtil.debuglog('stream');
  	} else {
  	  debug = function debug() {};
  	}
  	/*</replacement>*/


  	var BufferList = requireBuffer_list();

  	var destroyImpl = destroy_1;

  	var _require = state,
  	    getHighWaterMark = _require.getHighWaterMark;

  	var _require$codes = errorsBrowser.codes,
  	    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  	    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  	    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  	    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


  	var StringDecoder;
  	var createReadableStreamAsyncIterator;
  	var from;

  	inherits_browser.exports(Readable, Stream);

  	var errorOrDestroy = destroyImpl.errorOrDestroy;
  	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

  	function prependListener(emitter, event, fn) {
  	  // Sadly this is not cacheable as some libraries bundle their own
  	  // event emitter implementation with them.
  	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  	  // userland ones.  NEVER DO THIS. This is here only because this code needs
  	  // to continue to work with older versions of Node.js that do not include
  	  // the prependListener() method. The goal is to eventually remove this hack.

  	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
  	}

  	function ReadableState(options, stream, isDuplex) {
  	  Duplex = Duplex || require_stream_duplex();
  	  options = options || {}; // Duplex streams are both readable and writable, but share
  	  // the same options object.
  	  // However, some cases require setting options to different
  	  // values for the readable and the writable sides of the duplex stream.
  	  // These options can be provided separately as readableXXX and writableXXX.

  	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  	  // make all the buffer merging and length checks go away

  	  this.objectMode = !!options.objectMode;
  	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  	  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
  	  // linked list can remove elements from the beginning faster than
  	  // array.shift()

  	  this.buffer = new BufferList();
  	  this.length = 0;
  	  this.pipes = null;
  	  this.pipesCount = 0;
  	  this.flowing = null;
  	  this.ended = false;
  	  this.endEmitted = false;
  	  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  	  // immediately, or on a later tick.  We set this to true at first, because
  	  // any actions that shouldn't happen until "later" should generally also
  	  // not happen before the first read call.

  	  this.sync = true; // whenever we return null, then we set a flag to say
  	  // that we're awaiting a 'readable' event emission.

  	  this.needReadable = false;
  	  this.emittedReadable = false;
  	  this.readableListening = false;
  	  this.resumeScheduled = false;
  	  this.paused = true; // Should close be emitted on destroy. Defaults to true.

  	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

  	  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

  	  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  	  // encoding is 'binary' so we have to make this configurable.
  	  // Everything else in the universe uses 'utf8', though.

  	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  	  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  	  this.readingMore = false;
  	  this.decoder = null;
  	  this.encoding = null;

  	  if (options.encoding) {
  	    if (!StringDecoder) StringDecoder = string_decoder.StringDecoder;
  	    this.decoder = new StringDecoder(options.encoding);
  	    this.encoding = options.encoding;
  	  }
  	}

  	function Readable(options) {
  	  Duplex = Duplex || require_stream_duplex();
  	  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
  	  // the ReadableState constructor, at least with V8 6.5

  	  var isDuplex = this instanceof Duplex;
  	  this._readableState = new ReadableState(options, this, isDuplex); // legacy

  	  this.readable = true;

  	  if (options) {
  	    if (typeof options.read === 'function') this._read = options.read;
  	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  	  }

  	  Stream.call(this);
  	}

  	Object.defineProperty(Readable.prototype, 'destroyed', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    if (this._readableState === undefined) {
  	      return false;
  	    }

  	    return this._readableState.destroyed;
  	  },
  	  set: function set(value) {
  	    // we ignore the value if the stream
  	    // has not been initialized yet
  	    if (!this._readableState) {
  	      return;
  	    } // backward compatibility, the user is explicitly
  	    // managing destroyed


  	    this._readableState.destroyed = value;
  	  }
  	});
  	Readable.prototype.destroy = destroyImpl.destroy;
  	Readable.prototype._undestroy = destroyImpl.undestroy;

  	Readable.prototype._destroy = function (err, cb) {
  	  cb(err);
  	}; // Manually shove something into the read() buffer.
  	// This returns true if the highWaterMark has not been hit yet,
  	// similar to how Writable.write() returns true if you should
  	// write() some more.


  	Readable.prototype.push = function (chunk, encoding) {
  	  var state = this._readableState;
  	  var skipChunkCheck;

  	  if (!state.objectMode) {
  	    if (typeof chunk === 'string') {
  	      encoding = encoding || state.defaultEncoding;

  	      if (encoding !== state.encoding) {
  	        chunk = Buffer.from(chunk, encoding);
  	        encoding = '';
  	      }

  	      skipChunkCheck = true;
  	    }
  	  } else {
  	    skipChunkCheck = true;
  	  }

  	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  	}; // Unshift should *always* be something directly out of read()


  	Readable.prototype.unshift = function (chunk) {
  	  return readableAddChunk(this, chunk, null, true, false);
  	};

  	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  	  debug('readableAddChunk', chunk);
  	  var state = stream._readableState;

  	  if (chunk === null) {
  	    state.reading = false;
  	    onEofChunk(stream, state);
  	  } else {
  	    var er;
  	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

  	    if (er) {
  	      errorOrDestroy(stream, er);
  	    } else if (state.objectMode || chunk && chunk.length > 0) {
  	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
  	        chunk = _uint8ArrayToBuffer(chunk);
  	      }

  	      if (addToFront) {
  	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
  	      } else if (state.ended) {
  	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
  	      } else if (state.destroyed) {
  	        return false;
  	      } else {
  	        state.reading = false;

  	        if (state.decoder && !encoding) {
  	          chunk = state.decoder.write(chunk);
  	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
  	        } else {
  	          addChunk(stream, state, chunk, false);
  	        }
  	      }
  	    } else if (!addToFront) {
  	      state.reading = false;
  	      maybeReadMore(stream, state);
  	    }
  	  } // We can push more data if we are below the highWaterMark.
  	  // Also, if we have no data yet, we can stand some more bytes.
  	  // This is to work around cases where hwm=0, such as the repl.


  	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
  	}

  	function addChunk(stream, state, chunk, addToFront) {
  	  if (state.flowing && state.length === 0 && !state.sync) {
  	    state.awaitDrain = 0;
  	    stream.emit('data', chunk);
  	  } else {
  	    // update the buffer info.
  	    state.length += state.objectMode ? 1 : chunk.length;
  	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
  	    if (state.needReadable) emitReadable(stream);
  	  }

  	  maybeReadMore(stream, state);
  	}

  	function chunkInvalid(state, chunk) {
  	  var er;

  	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
  	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  	  }

  	  return er;
  	}

  	Readable.prototype.isPaused = function () {
  	  return this._readableState.flowing === false;
  	}; // backwards compatibility.


  	Readable.prototype.setEncoding = function (enc) {
  	  if (!StringDecoder) StringDecoder = string_decoder.StringDecoder;
  	  var decoder = new StringDecoder(enc);
  	  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

  	  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

  	  var p = this._readableState.buffer.head;
  	  var content = '';

  	  while (p !== null) {
  	    content += decoder.write(p.data);
  	    p = p.next;
  	  }

  	  this._readableState.buffer.clear();

  	  if (content !== '') this._readableState.buffer.push(content);
  	  this._readableState.length = content.length;
  	  return this;
  	}; // Don't raise the hwm > 1GB


  	var MAX_HWM = 0x40000000;

  	function computeNewHighWaterMark(n) {
  	  if (n >= MAX_HWM) {
  	    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
  	    n = MAX_HWM;
  	  } else {
  	    // Get the next highest power of 2 to prevent increasing hwm excessively in
  	    // tiny amounts
  	    n--;
  	    n |= n >>> 1;
  	    n |= n >>> 2;
  	    n |= n >>> 4;
  	    n |= n >>> 8;
  	    n |= n >>> 16;
  	    n++;
  	  }

  	  return n;
  	} // This function is designed to be inlinable, so please take care when making
  	// changes to the function body.


  	function howMuchToRead(n, state) {
  	  if (n <= 0 || state.length === 0 && state.ended) return 0;
  	  if (state.objectMode) return 1;

  	  if (n !== n) {
  	    // Only flow one buffer at a time
  	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  	  } // If we're asking for more than the current hwm, then raise the hwm.


  	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  	  if (n <= state.length) return n; // Don't have enough

  	  if (!state.ended) {
  	    state.needReadable = true;
  	    return 0;
  	  }

  	  return state.length;
  	} // you can override either this method, or the async _read(n) below.


  	Readable.prototype.read = function (n) {
  	  debug('read', n);
  	  n = parseInt(n, 10);
  	  var state = this._readableState;
  	  var nOrig = n;
  	  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  	  // already have a bunch of data in the buffer, then just trigger
  	  // the 'readable' event and move on.

  	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
  	    debug('read: emitReadable', state.length, state.ended);
  	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
  	    return null;
  	  }

  	  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  	  if (n === 0 && state.ended) {
  	    if (state.length === 0) endReadable(this);
  	    return null;
  	  } // All the actual chunk generation logic needs to be
  	  // *below* the call to _read.  The reason is that in certain
  	  // synthetic stream cases, such as passthrough streams, _read
  	  // may be a completely synchronous operation which may change
  	  // the state of the read buffer, providing enough data when
  	  // before there was *not* enough.
  	  //
  	  // So, the steps are:
  	  // 1. Figure out what the state of things will be after we do
  	  // a read from the buffer.
  	  //
  	  // 2. If that resulting state will trigger a _read, then call _read.
  	  // Note that this may be asynchronous, or synchronous.  Yes, it is
  	  // deeply ugly to write APIs this way, but that still doesn't mean
  	  // that the Readable class should behave improperly, as streams are
  	  // designed to be sync/async agnostic.
  	  // Take note if the _read call is sync or async (ie, if the read call
  	  // has returned yet), so that we know whether or not it's safe to emit
  	  // 'readable' etc.
  	  //
  	  // 3. Actually pull the requested chunks out of the buffer and return.
  	  // if we need a readable event, then we need to do some reading.


  	  var doRead = state.needReadable;
  	  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  	  if (state.length === 0 || state.length - n < state.highWaterMark) {
  	    doRead = true;
  	    debug('length less than watermark', doRead);
  	  } // however, if we've ended, then there's no point, and if we're already
  	  // reading, then it's unnecessary.


  	  if (state.ended || state.reading) {
  	    doRead = false;
  	    debug('reading or ended', doRead);
  	  } else if (doRead) {
  	    debug('do read');
  	    state.reading = true;
  	    state.sync = true; // if the length is currently zero, then we *need* a readable event.

  	    if (state.length === 0) state.needReadable = true; // call internal read method

  	    this._read(state.highWaterMark);

  	    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
  	    // and we need to re-evaluate how much data we can return to the user.

  	    if (!state.reading) n = howMuchToRead(nOrig, state);
  	  }

  	  var ret;
  	  if (n > 0) ret = fromList(n, state);else ret = null;

  	  if (ret === null) {
  	    state.needReadable = state.length <= state.highWaterMark;
  	    n = 0;
  	  } else {
  	    state.length -= n;
  	    state.awaitDrain = 0;
  	  }

  	  if (state.length === 0) {
  	    // If we have nothing in the buffer, then we want to know
  	    // as soon as we *do* get something into the buffer.
  	    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

  	    if (nOrig !== n && state.ended) endReadable(this);
  	  }

  	  if (ret !== null) this.emit('data', ret);
  	  return ret;
  	};

  	function onEofChunk(stream, state) {
  	  debug('onEofChunk');
  	  if (state.ended) return;

  	  if (state.decoder) {
  	    var chunk = state.decoder.end();

  	    if (chunk && chunk.length) {
  	      state.buffer.push(chunk);
  	      state.length += state.objectMode ? 1 : chunk.length;
  	    }
  	  }

  	  state.ended = true;

  	  if (state.sync) {
  	    // if we are sync, wait until next tick to emit the data.
  	    // Otherwise we risk emitting data in the flow()
  	    // the readable code triggers during a read() call
  	    emitReadable(stream);
  	  } else {
  	    // emit 'readable' now to make sure it gets picked up.
  	    state.needReadable = false;

  	    if (!state.emittedReadable) {
  	      state.emittedReadable = true;
  	      emitReadable_(stream);
  	    }
  	  }
  	} // Don't emit readable right away in sync mode, because this can trigger
  	// another read() call => stack overflow.  This way, it might trigger
  	// a nextTick recursion warning, but that's not so bad.


  	function emitReadable(stream) {
  	  var state = stream._readableState;
  	  debug('emitReadable', state.needReadable, state.emittedReadable);
  	  state.needReadable = false;

  	  if (!state.emittedReadable) {
  	    debug('emitReadable', state.flowing);
  	    state.emittedReadable = true;
  	    browser$1$1.nextTick(emitReadable_, stream);
  	  }
  	}

  	function emitReadable_(stream) {
  	  var state = stream._readableState;
  	  debug('emitReadable_', state.destroyed, state.length, state.ended);

  	  if (!state.destroyed && (state.length || state.ended)) {
  	    stream.emit('readable');
  	    state.emittedReadable = false;
  	  } // The stream needs another readable event if
  	  // 1. It is not flowing, as the flow mechanism will take
  	  //    care of it.
  	  // 2. It is not ended.
  	  // 3. It is below the highWaterMark, so we can schedule
  	  //    another readable later.


  	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  	  flow(stream);
  	} // at this point, the user has presumably seen the 'readable' event,
  	// and called read() to consume some data.  that may have triggered
  	// in turn another _read(n) call, in which case reading = true if
  	// it's in progress.
  	// However, if we're not ended, or reading, and the length < hwm,
  	// then go ahead and try to read some more preemptively.


  	function maybeReadMore(stream, state) {
  	  if (!state.readingMore) {
  	    state.readingMore = true;
  	    browser$1$1.nextTick(maybeReadMore_, stream, state);
  	  }
  	}

  	function maybeReadMore_(stream, state) {
  	  // Attempt to read more data if we should.
  	  //
  	  // The conditions for reading more data are (one of):
  	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  	  //   is responsible for filling the buffer with enough data if such data
  	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  	  //   we should _not_ attempt to buffer any extra data. We'll get more data
  	  //   when the stream consumer calls read() instead.
  	  // - No data in the buffer, and the stream is in flowing mode. In this mode
  	  //   the loop below is responsible for ensuring read() is called. Failing to
  	  //   call read here would abort the flow and there's no other mechanism for
  	  //   continuing the flow if the stream consumer has just subscribed to the
  	  //   'data' event.
  	  //
  	  // In addition to the above conditions to keep reading data, the following
  	  // conditions prevent the data from being read:
  	  // - The stream has ended (state.ended).
  	  // - There is already a pending 'read' operation (state.reading). This is a
  	  //   case where the the stream has called the implementation defined _read()
  	  //   method, but they are processing the call asynchronously and have _not_
  	  //   called push() with new data. In this case we skip performing more
  	  //   read()s. The execution ends in this method again after the _read() ends
  	  //   up calling push() with more data.
  	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
  	    var len = state.length;
  	    debug('maybeReadMore read 0');
  	    stream.read(0);
  	    if (len === state.length) // didn't get any data, stop spinning.
  	      break;
  	  }

  	  state.readingMore = false;
  	} // abstract method.  to be overridden in specific implementation classes.
  	// call cb(er, data) where data is <= n in length.
  	// for virtual (non-string, non-buffer) streams, "length" is somewhat
  	// arbitrary, and perhaps not very meaningful.


  	Readable.prototype._read = function (n) {
  	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
  	};

  	Readable.prototype.pipe = function (dest, pipeOpts) {
  	  var src = this;
  	  var state = this._readableState;

  	  switch (state.pipesCount) {
  	    case 0:
  	      state.pipes = dest;
  	      break;

  	    case 1:
  	      state.pipes = [state.pipes, dest];
  	      break;

  	    default:
  	      state.pipes.push(dest);
  	      break;
  	  }

  	  state.pipesCount += 1;
  	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== browser$1$1.stdout && dest !== browser$1$1.stderr;
  	  var endFn = doEnd ? onend : unpipe;
  	  if (state.endEmitted) browser$1$1.nextTick(endFn);else src.once('end', endFn);
  	  dest.on('unpipe', onunpipe);

  	  function onunpipe(readable, unpipeInfo) {
  	    debug('onunpipe');

  	    if (readable === src) {
  	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
  	        unpipeInfo.hasUnpiped = true;
  	        cleanup();
  	      }
  	    }
  	  }

  	  function onend() {
  	    debug('onend');
  	    dest.end();
  	  } // when the dest drains, it reduces the awaitDrain counter
  	  // on the source.  This would be more elegant with a .once()
  	  // handler in flow(), but adding and removing repeatedly is
  	  // too slow.


  	  var ondrain = pipeOnDrain(src);
  	  dest.on('drain', ondrain);
  	  var cleanedUp = false;

  	  function cleanup() {
  	    debug('cleanup'); // cleanup event handlers once the pipe is broken

  	    dest.removeListener('close', onclose);
  	    dest.removeListener('finish', onfinish);
  	    dest.removeListener('drain', ondrain);
  	    dest.removeListener('error', onerror);
  	    dest.removeListener('unpipe', onunpipe);
  	    src.removeListener('end', onend);
  	    src.removeListener('end', unpipe);
  	    src.removeListener('data', ondata);
  	    cleanedUp = true; // if the reader is waiting for a drain event from this
  	    // specific writer, then it would cause it to never start
  	    // flowing again.
  	    // So, if this is awaiting a drain, then we just call it now.
  	    // If we don't know, then assume that we are waiting for one.

  	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  	  }

  	  src.on('data', ondata);

  	  function ondata(chunk) {
  	    debug('ondata');
  	    var ret = dest.write(chunk);
  	    debug('dest.write', ret);

  	    if (ret === false) {
  	      // If the user unpiped during `dest.write()`, it is possible
  	      // to get stuck in a permanently paused state if that write
  	      // also returned false.
  	      // => Check whether `dest` is still a piping destination.
  	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
  	        debug('false write response, pause', state.awaitDrain);
  	        state.awaitDrain++;
  	      }

  	      src.pause();
  	    }
  	  } // if the dest has an error, then stop piping into it.
  	  // however, don't suppress the throwing behavior for this.


  	  function onerror(er) {
  	    debug('onerror', er);
  	    unpipe();
  	    dest.removeListener('error', onerror);
  	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  	  } // Make sure our error handler is attached before userland ones.


  	  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  	  function onclose() {
  	    dest.removeListener('finish', onfinish);
  	    unpipe();
  	  }

  	  dest.once('close', onclose);

  	  function onfinish() {
  	    debug('onfinish');
  	    dest.removeListener('close', onclose);
  	    unpipe();
  	  }

  	  dest.once('finish', onfinish);

  	  function unpipe() {
  	    debug('unpipe');
  	    src.unpipe(dest);
  	  } // tell the dest that it's being piped to


  	  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  	  if (!state.flowing) {
  	    debug('pipe resume');
  	    src.resume();
  	  }

  	  return dest;
  	};

  	function pipeOnDrain(src) {
  	  return function pipeOnDrainFunctionResult() {
  	    var state = src._readableState;
  	    debug('pipeOnDrain', state.awaitDrain);
  	    if (state.awaitDrain) state.awaitDrain--;

  	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
  	      state.flowing = true;
  	      flow(src);
  	    }
  	  };
  	}

  	Readable.prototype.unpipe = function (dest) {
  	  var state = this._readableState;
  	  var unpipeInfo = {
  	    hasUnpiped: false
  	  }; // if we're not piping anywhere, then do nothing.

  	  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  	  if (state.pipesCount === 1) {
  	    // passed in one, but it's not the right one.
  	    if (dest && dest !== state.pipes) return this;
  	    if (!dest) dest = state.pipes; // got a match.

  	    state.pipes = null;
  	    state.pipesCount = 0;
  	    state.flowing = false;
  	    if (dest) dest.emit('unpipe', this, unpipeInfo);
  	    return this;
  	  } // slow case. multiple pipe destinations.


  	  if (!dest) {
  	    // remove all.
  	    var dests = state.pipes;
  	    var len = state.pipesCount;
  	    state.pipes = null;
  	    state.pipesCount = 0;
  	    state.flowing = false;

  	    for (var i = 0; i < len; i++) {
  	      dests[i].emit('unpipe', this, {
  	        hasUnpiped: false
  	      });
  	    }

  	    return this;
  	  } // try to find the right one.


  	  var index = indexOf(state.pipes, dest);
  	  if (index === -1) return this;
  	  state.pipes.splice(index, 1);
  	  state.pipesCount -= 1;
  	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  	  dest.emit('unpipe', this, unpipeInfo);
  	  return this;
  	}; // set up data events if they are asked for
  	// Ensure readable listeners eventually get something


  	Readable.prototype.on = function (ev, fn) {
  	  var res = Stream.prototype.on.call(this, ev, fn);
  	  var state = this._readableState;

  	  if (ev === 'data') {
  	    // update readableListening so that resume() may be a no-op
  	    // a few lines down. This is needed to support once('readable').
  	    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

  	    if (state.flowing !== false) this.resume();
  	  } else if (ev === 'readable') {
  	    if (!state.endEmitted && !state.readableListening) {
  	      state.readableListening = state.needReadable = true;
  	      state.flowing = false;
  	      state.emittedReadable = false;
  	      debug('on readable', state.length, state.reading);

  	      if (state.length) {
  	        emitReadable(this);
  	      } else if (!state.reading) {
  	        browser$1$1.nextTick(nReadingNextTick, this);
  	      }
  	    }
  	  }

  	  return res;
  	};

  	Readable.prototype.addListener = Readable.prototype.on;

  	Readable.prototype.removeListener = function (ev, fn) {
  	  var res = Stream.prototype.removeListener.call(this, ev, fn);

  	  if (ev === 'readable') {
  	    // We need to check if there is someone still listening to
  	    // readable and reset the state. However this needs to happen
  	    // after readable has been emitted but before I/O (nextTick) to
  	    // support once('readable', fn) cycles. This means that calling
  	    // resume within the same tick will have no
  	    // effect.
  	    browser$1$1.nextTick(updateReadableListening, this);
  	  }

  	  return res;
  	};

  	Readable.prototype.removeAllListeners = function (ev) {
  	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

  	  if (ev === 'readable' || ev === undefined) {
  	    // We need to check if there is someone still listening to
  	    // readable and reset the state. However this needs to happen
  	    // after readable has been emitted but before I/O (nextTick) to
  	    // support once('readable', fn) cycles. This means that calling
  	    // resume within the same tick will have no
  	    // effect.
  	    browser$1$1.nextTick(updateReadableListening, this);
  	  }

  	  return res;
  	};

  	function updateReadableListening(self) {
  	  var state = self._readableState;
  	  state.readableListening = self.listenerCount('readable') > 0;

  	  if (state.resumeScheduled && !state.paused) {
  	    // flowing needs to be set to true now, otherwise
  	    // the upcoming resume will not flow.
  	    state.flowing = true; // crude way to check if we should resume
  	  } else if (self.listenerCount('data') > 0) {
  	    self.resume();
  	  }
  	}

  	function nReadingNextTick(self) {
  	  debug('readable nexttick read 0');
  	  self.read(0);
  	} // pause() and resume() are remnants of the legacy readable stream API
  	// If the user uses them, then switch into old mode.


  	Readable.prototype.resume = function () {
  	  var state = this._readableState;

  	  if (!state.flowing) {
  	    debug('resume'); // we flow only if there is no one listening
  	    // for readable, but we still have to call
  	    // resume()

  	    state.flowing = !state.readableListening;
  	    resume(this, state);
  	  }

  	  state.paused = false;
  	  return this;
  	};

  	function resume(stream, state) {
  	  if (!state.resumeScheduled) {
  	    state.resumeScheduled = true;
  	    browser$1$1.nextTick(resume_, stream, state);
  	  }
  	}

  	function resume_(stream, state) {
  	  debug('resume', state.reading);

  	  if (!state.reading) {
  	    stream.read(0);
  	  }

  	  state.resumeScheduled = false;
  	  stream.emit('resume');
  	  flow(stream);
  	  if (state.flowing && !state.reading) stream.read(0);
  	}

  	Readable.prototype.pause = function () {
  	  debug('call pause flowing=%j', this._readableState.flowing);

  	  if (this._readableState.flowing !== false) {
  	    debug('pause');
  	    this._readableState.flowing = false;
  	    this.emit('pause');
  	  }

  	  this._readableState.paused = true;
  	  return this;
  	};

  	function flow(stream) {
  	  var state = stream._readableState;
  	  debug('flow', state.flowing);

  	  while (state.flowing && stream.read() !== null) {
  	  }
  	} // wrap an old-style stream as the async data source.
  	// This is *not* part of the readable stream interface.
  	// It is an ugly unfortunate mess of history.


  	Readable.prototype.wrap = function (stream) {
  	  var _this = this;

  	  var state = this._readableState;
  	  var paused = false;
  	  stream.on('end', function () {
  	    debug('wrapped end');

  	    if (state.decoder && !state.ended) {
  	      var chunk = state.decoder.end();
  	      if (chunk && chunk.length) _this.push(chunk);
  	    }

  	    _this.push(null);
  	  });
  	  stream.on('data', function (chunk) {
  	    debug('wrapped data');
  	    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

  	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

  	    var ret = _this.push(chunk);

  	    if (!ret) {
  	      paused = true;
  	      stream.pause();
  	    }
  	  }); // proxy all the other methods.
  	  // important when wrapping filters and duplexes.

  	  for (var i in stream) {
  	    if (this[i] === undefined && typeof stream[i] === 'function') {
  	      this[i] = function methodWrap(method) {
  	        return function methodWrapReturnFunction() {
  	          return stream[method].apply(stream, arguments);
  	        };
  	      }(i);
  	    }
  	  } // proxy certain important events.


  	  for (var n = 0; n < kProxyEvents.length; n++) {
  	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  	  } // when we try to consume some more bytes, simply unpause the
  	  // underlying stream.


  	  this._read = function (n) {
  	    debug('wrapped _read', n);

  	    if (paused) {
  	      paused = false;
  	      stream.resume();
  	    }
  	  };

  	  return this;
  	};

  	if (typeof Symbol === 'function') {
  	  Readable.prototype[Symbol.asyncIterator] = function () {
  	    if (createReadableStreamAsyncIterator === undefined) {
  	      createReadableStreamAsyncIterator = requireAsync_iterator();
  	    }

  	    return createReadableStreamAsyncIterator(this);
  	  };
  	}

  	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._readableState.highWaterMark;
  	  }
  	});
  	Object.defineProperty(Readable.prototype, 'readableBuffer', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._readableState && this._readableState.buffer;
  	  }
  	});
  	Object.defineProperty(Readable.prototype, 'readableFlowing', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._readableState.flowing;
  	  },
  	  set: function set(state) {
  	    if (this._readableState) {
  	      this._readableState.flowing = state;
  	    }
  	  }
  	}); // exposed for testing purposes only.

  	Readable._fromList = fromList;
  	Object.defineProperty(Readable.prototype, 'readableLength', {
  	  // making it explicit this property is not enumerable
  	  // because otherwise some prototype manipulation in
  	  // userland will fail
  	  enumerable: false,
  	  get: function get() {
  	    return this._readableState.length;
  	  }
  	}); // Pluck off n bytes from an array of buffers.
  	// Length is the combined lengths of all the buffers in the list.
  	// This function is designed to be inlinable, so please take care when making
  	// changes to the function body.

  	function fromList(n, state) {
  	  // nothing buffered
  	  if (state.length === 0) return null;
  	  var ret;
  	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
  	    // read it all, truncate the list
  	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
  	    state.buffer.clear();
  	  } else {
  	    // read part of list
  	    ret = state.buffer.consume(n, state.decoder);
  	  }
  	  return ret;
  	}

  	function endReadable(stream) {
  	  var state = stream._readableState;
  	  debug('endReadable', state.endEmitted);

  	  if (!state.endEmitted) {
  	    state.ended = true;
  	    browser$1$1.nextTick(endReadableNT, state, stream);
  	  }
  	}

  	function endReadableNT(state, stream) {
  	  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

  	  if (!state.endEmitted && state.length === 0) {
  	    state.endEmitted = true;
  	    stream.readable = false;
  	    stream.emit('end');

  	    if (state.autoDestroy) {
  	      // In case of duplex streams we need a way to detect
  	      // if the writable side is ready for autoDestroy as well
  	      var wState = stream._writableState;

  	      if (!wState || wState.autoDestroy && wState.finished) {
  	        stream.destroy();
  	      }
  	    }
  	  }
  	}

  	if (typeof Symbol === 'function') {
  	  Readable.from = function (iterable, opts) {
  	    if (from === undefined) {
  	      from = requireFromBrowser();
  	    }

  	    return from(Readable, iterable, opts);
  	  };
  	}

  	function indexOf(xs, x) {
  	  for (var i = 0, l = xs.length; i < l; i++) {
  	    if (xs[i] === x) return i;
  	  }

  	  return -1;
  	}
  	return _stream_readable;
  }

  var _stream_transform = Transform$4;

  var _require$codes$1 = errorsBrowser.codes,
      ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
      ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
      ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
      ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;

  var Duplex = require_stream_duplex();

  inherits_browser.exports(Transform$4, Duplex);

  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;

    if (cb === null) {
      return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    }

    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
      this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;

    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }

  function Transform$4(options) {
    if (!(this instanceof Transform$4)) return new Transform$4(options);
    Duplex.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    }; // start out asking for a readable event once data is transformed.

    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.

    this._readableState.sync = false;

    if (options) {
      if (typeof options.transform === 'function') this._transform = options.transform;
      if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.


    this.on('prefinish', prefinish);
  }

  function prefinish() {
    var _this = this;

    if (typeof this._flush === 'function' && !this._readableState.destroyed) {
      this._flush(function (er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }

  Transform$4.prototype.push = function (chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  }; // This is the part where you do stuff!
  // override this function in implementation classes.
  // 'chunk' is an input chunk.
  //
  // Call `push(newChunk)` to pass along transformed output
  // to the readable side.  You may call 'push' zero or more times.
  //
  // Call `cb(err)` when you are done with this chunk.  If you pass
  // an error, then that'll put the hurt on the whole operation.  If you
  // never call cb(), then you'll never get another chunk.


  Transform$4.prototype._transform = function (chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
  };

  Transform$4.prototype._write = function (chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;

    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
  }; // Doesn't matter what the args are here.
  // _transform does all the work.
  // That we got here means that the readable side wants more data.


  Transform$4.prototype._read = function (n) {
    var ts = this._transformState;

    if (ts.writechunk !== null && !ts.transforming) {
      ts.transforming = true;

      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      // mark that we need a transform, so that any data that comes in
      // will get processed, now that we've asked for it.
      ts.needTransform = true;
    }
  };

  Transform$4.prototype._destroy = function (err, cb) {
    Duplex.prototype._destroy.call(this, err, function (err2) {
      cb(err2);
    });
  };

  function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) // single equals check for both `null` and `undefined`
      stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided

    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
  }

  var _stream_passthrough = PassThrough;

  var Transform$3 = _stream_transform;

  inherits_browser.exports(PassThrough, Transform$3);

  function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform$3.call(this, options);
  }

  PassThrough.prototype._transform = function (chunk, encoding, cb) {
    cb(null, chunk);
  };

  var eos;

  function once(callback) {
    var called = false;
    return function () {
      if (called) return;
      called = true;
      callback.apply(void 0, arguments);
    };
  }

  var _require$codes = errorsBrowser.codes,
      ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
      ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

  function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
  }

  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
  }

  function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on('close', function () {
      closed = true;
    });
    if (eos === undefined) eos = endOfStream;
    eos(stream, {
      readable: reading,
      writable: writing
    }, function (err) {
      if (err) return callback(err);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function (err) {
      if (closed) return;
      if (destroyed) return;
      destroyed = true; // request.destroy just do .end - .abort is what we want

      if (isRequest(stream)) return stream.abort();
      if (typeof stream.destroy === 'function') return stream.destroy();
      callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
  }

  function call(fn) {
    fn();
  }

  function pipe(from, to) {
    return from.pipe(to);
  }

  function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== 'function') return noop;
    return streams.pop();
  }

  function pipeline() {
    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
      streams[_key] = arguments[_key];
    }

    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];

    if (streams.length < 2) {
      throw new ERR_MISSING_ARGS('streams');
    }

    var error;
    var destroys = streams.map(function (stream, i) {
      var reading = i < streams.length - 1;
      var writing = i > 0;
      return destroyer(stream, reading, writing, function (err) {
        if (!error) error = err;
        if (err) destroys.forEach(call);
        if (reading) return;
        destroys.forEach(call);
        callback(error);
      });
    });
    return streams.reduce(pipe);
  }

  var pipeline_1 = pipeline;

  (function (module, exports) {
  	exports = module.exports = require_stream_readable();
  	exports.Stream = exports;
  	exports.Readable = exports;
  	exports.Writable = require_stream_writable();
  	exports.Duplex = require_stream_duplex();
  	exports.Transform = _stream_transform;
  	exports.PassThrough = _stream_passthrough;
  	exports.finished = endOfStream;
  	exports.pipeline = pipeline_1;
  } (readableBrowser, readableBrowser.exports));

  var Buffer$4 = safeBuffer.exports.Buffer;
  var Transform$2 = readableBrowser.exports.Transform;
  var inherits$3 = inherits_browser.exports;

  function throwIfNotStringOrBuffer (val, prefix) {
    if (!Buffer$4.isBuffer(val) && typeof val !== 'string') {
      throw new TypeError(prefix + ' must be a string or a buffer')
    }
  }

  function HashBase$1 (blockSize) {
    Transform$2.call(this);

    this._block = Buffer$4.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [0, 0, 0, 0];

    this._finalized = false;
  }

  inherits$3(HashBase$1, Transform$2);

  HashBase$1.prototype._transform = function (chunk, encoding, callback) {
    var error = null;
    try {
      this.update(chunk, encoding);
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase$1.prototype._flush = function (callback) {
    var error = null;
    try {
      this.push(this.digest());
    } catch (err) {
      error = err;
    }

    callback(error);
  };

  HashBase$1.prototype.update = function (data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called')
    if (!Buffer$4.isBuffer(data)) data = Buffer$4.from(data, encoding);

    // consume data
    var block = this._block;
    var offset = 0;
    while (this._blockOffset + data.length - offset >= this._blockSize) {
      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];
      this._update();
      this._blockOffset = 0;
    }
    while (offset < data.length) block[this._blockOffset++] = data[offset++];

    // update length
    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
      this._length[j] += carry;
      carry = (this._length[j] / 0x0100000000) | 0;
      if (carry > 0) this._length[j] -= 0x0100000000 * carry;
    }

    return this
  };

  HashBase$1.prototype._update = function () {
    throw new Error('_update is not implemented')
  };

  HashBase$1.prototype.digest = function (encoding) {
    if (this._finalized) throw new Error('Digest already called')
    this._finalized = true;

    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);

    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for (var i = 0; i < 4; ++i) this._length[i] = 0;

    return digest
  };

  HashBase$1.prototype._digest = function () {
    throw new Error('_digest is not implemented')
  };

  var hashBase = HashBase$1;

  var inherits$2 = inherits_browser.exports;
  var HashBase = hashBase;
  var Buffer$3 = safeBuffer.exports.Buffer;

  var ARRAY16 = new Array(16);

  function MD5$1 () {
    HashBase.call(this, 64);

    // state
    this._a = 0x67452301;
    this._b = 0xefcdab89;
    this._c = 0x98badcfe;
    this._d = 0x10325476;
  }

  inherits$2(MD5$1, HashBase);

  MD5$1.prototype._update = function () {
    var M = ARRAY16;
    for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4);

    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;

    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);

    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);

    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);

    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);

    this._a = (this._a + a) | 0;
    this._b = (this._b + b) | 0;
    this._c = (this._c + c) | 0;
    this._d = (this._d + d) | 0;
  };

  MD5$1.prototype._digest = function () {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 0x80;
    if (this._blockOffset > 56) {
      this._block.fill(0, this._blockOffset, 64);
      this._update();
      this._blockOffset = 0;
    }

    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();

    // produce result
    var buffer = Buffer$3.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer
  };

  function rotl (x, n) {
    return (x << n) | (x >>> (32 - n))
  }

  function fnF (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
  }

  function fnG (a, b, c, d, m, k, s) {
    return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
  }

  function fnH (a, b, c, d, m, k, s) {
    return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
  }

  function fnI (a, b, c, d, m, k, s) {
    return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
  }

  var md5_js = MD5$1;

  var Buffer$2 = safeBuffer.exports.Buffer;
  var MD5 = md5_js;

  /* eslint-disable camelcase */
  function EVP_BytesToKey (password, salt, keyBits, ivLen) {
    if (!Buffer$2.isBuffer(password)) password = Buffer$2.from(password, 'binary');
    if (salt) {
      if (!Buffer$2.isBuffer(salt)) salt = Buffer$2.from(salt, 'binary');
      if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
    }

    var keyLen = keyBits / 8;
    var key = Buffer$2.alloc(keyLen);
    var iv = Buffer$2.alloc(ivLen || 0);
    var tmp = Buffer$2.alloc(0);

    while (keyLen > 0 || ivLen > 0) {
      var hash = new MD5();
      hash.update(tmp);
      hash.update(password);
      if (salt) hash.update(salt);
      tmp = hash.digest();

      var used = 0;

      if (keyLen > 0) {
        var keyStart = key.length - keyLen;
        used = Math.min(keyLen, tmp.length);
        tmp.copy(key, keyStart, 0, used);
        keyLen -= used;
      }

      if (used < tmp.length && ivLen > 0) {
        var ivStart = iv.length - ivLen;
        var length = Math.min(ivLen, tmp.length - used);
        tmp.copy(iv, ivStart, used, used + length);
        ivLen -= length;
      }
    }

    tmp.fill(0);
    return { key: key, iv: iv }
  }

  var evp_bytestokey = EVP_BytesToKey;

  var MODES$1 = modes_1;
  var AuthCipher$1 = authCipher;
  var Buffer$1 = safeBuffer.exports.Buffer;
  var StreamCipher$1 = streamCipher;
  var Transform$1 = cipherBase;
  var aes$1 = aes$4;
  var ebtk$1 = evp_bytestokey;
  var inherits$1 = inherits_browser.exports;

  function Cipher (mode, key, iv) {
    Transform$1.call(this);

    this._cache = new Splitter$1();
    this._cipher = new aes$1.AES(key);
    this._prev = Buffer$1.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }

  inherits$1(Cipher, Transform$1);

  Cipher.prototype._update = function (data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];

    while ((chunk = this._cache.get())) {
      thing = this._mode.encrypt(this, chunk);
      out.push(thing);
    }

    return Buffer$1.concat(out)
  };

  var PADDING = Buffer$1.alloc(16, 0x10);

  Cipher.prototype._final = function () {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      chunk = this._mode.encrypt(this, chunk);
      this._cipher.scrub();
      return chunk
    }

    if (!chunk.equals(PADDING)) {
      this._cipher.scrub();
      throw new Error('data not multiple of block length')
    }
  };

  Cipher.prototype.setAutoPadding = function (setTo) {
    this._autopadding = !!setTo;
    return this
  };

  function Splitter$1 () {
    this.cache = Buffer$1.allocUnsafe(0);
  }

  Splitter$1.prototype.add = function (data) {
    this.cache = Buffer$1.concat([this.cache, data]);
  };

  Splitter$1.prototype.get = function () {
    if (this.cache.length > 15) {
      var out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out
    }
    return null
  };

  Splitter$1.prototype.flush = function () {
    var len = 16 - this.cache.length;
    var padBuff = Buffer$1.allocUnsafe(len);

    var i = -1;
    while (++i < len) {
      padBuff.writeUInt8(len, i);
    }

    return Buffer$1.concat([this.cache, padBuff])
  };

  function createCipheriv (suite, password, iv) {
    var config = MODES$1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    if (typeof password === 'string') password = Buffer$1.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

    if (typeof iv === 'string') iv = Buffer$1.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

    if (config.type === 'stream') {
      return new StreamCipher$1(config.module, password, iv)
    } else if (config.type === 'auth') {
      return new AuthCipher$1(config.module, password, iv)
    }

    return new Cipher(config.module, password, iv)
  }

  function createCipher$1 (suite, password) {
    var config = MODES$1[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    var keys = ebtk$1(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv)
  }

  encrypter.createCipheriv = createCipheriv;
  encrypter.createCipher = createCipher$1;

  var decrypter = {};

  var AuthCipher = authCipher;
  var Buffer = safeBuffer.exports.Buffer;
  var MODES = modes_1;
  var StreamCipher = streamCipher;
  var Transform = cipherBase;
  var aes = aes$4;
  var ebtk = evp_bytestokey;
  var inherits = inherits_browser.exports;

  function Decipher (mode, key, iv) {
    Transform.call(this);

    this._cache = new Splitter();
    this._last = void 0;
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
  }

  inherits(Decipher, Transform);

  Decipher.prototype._update = function (data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while ((chunk = this._cache.get(this._autopadding))) {
      thing = this._mode.decrypt(this, chunk);
      out.push(thing);
    }
    return Buffer.concat(out)
  };

  Decipher.prototype._final = function () {
    var chunk = this._cache.flush();
    if (this._autopadding) {
      return unpad(this._mode.decrypt(this, chunk))
    } else if (chunk) {
      throw new Error('data not multiple of block length')
    }
  };

  Decipher.prototype.setAutoPadding = function (setTo) {
    this._autopadding = !!setTo;
    return this
  };

  function Splitter () {
    this.cache = Buffer.allocUnsafe(0);
  }

  Splitter.prototype.add = function (data) {
    this.cache = Buffer.concat([this.cache, data]);
  };

  Splitter.prototype.get = function (autoPadding) {
    var out;
    if (autoPadding) {
      if (this.cache.length > 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out
      }
    } else {
      if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out
      }
    }

    return null
  };

  Splitter.prototype.flush = function () {
    if (this.cache.length) return this.cache
  };

  function unpad (last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) {
      throw new Error('unable to decrypt data')
    }
    var i = -1;
    while (++i < padded) {
      if (last[(i + (16 - padded))] !== padded) {
        throw new Error('unable to decrypt data')
      }
    }
    if (padded === 16) return

    return last.slice(0, 16 - padded)
  }

  function createDecipheriv (suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    if (typeof iv === 'string') iv = Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

    if (typeof password === 'string') password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

    if (config.type === 'stream') {
      return new StreamCipher(config.module, password, iv, true)
    } else if (config.type === 'auth') {
      return new AuthCipher(config.module, password, iv, true)
    }

    return new Decipher(config.module, password, iv)
  }

  function createDecipher$1 (suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type')

    var keys = ebtk(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv)
  }

  decrypter.createDecipher = createDecipher$1;
  decrypter.createDecipheriv = createDecipheriv;

  var ciphers = encrypter;
  var deciphers = decrypter;

  var createCipher = ciphers.createCipher;
  var createDecipher = deciphers.createDecipher;

  /*
  2022 Veil of Time
  Written by Matthew Darnell
  */

  /*
          Internal Variables
  */
  const algorithm = 'aes-256-cbc';
  let initialized = false, provider, api, votServer;
  let ss58Format = 2;


  const getNftRequest = nftId => {
      return new Promise( res => {
          let xmlHttp = new XMLHttpRequest();
          xmlHttp.onreadystatechange = function() {
              if (xmlHttp.readyState === 4 && xmlHttp.status === 200)
                  return res(xmlHttp.responseText);
          };
          xmlHttp.open("GET", votServer + "/get_nft_by_id/" + nftId, true); // true for asynchronous
          xmlHttp.send(null);
      })
  };


  /*
          API
  */
  const decrypt = (encrypted, password) => {
      return new Promise((res, rej) => {
          try {
              const decipher = createDecipher(algorithm, password);
              let result = decipher.update(encrypted, 'base64', 'utf8') + decipher.final('utf8');
              return res(result)
          } catch(error) {
              return rej(error)
          }
      })
  };
  const encrypt = (data, key) => {
      return new Promise((res, rej) => {
          try {
              const cipher = createCipher(algorithm, key);
              const part1 = cipher.update(data, 'utf8', 'base64');
              const part2 = cipher.final('base64');
              const result =part1 + part2;
              return res(result)
          } catch(error) {
              return rej(error)
          }
      })
  };
  const initializeVeilOfTimeNft = async (wsProvider, veilOfTimeServerHttpApiAddress, ss58) => {
      try {
          console.log('initializing');
          await cryptoWaitReady();
          console.log('crypto ready');
          provider = new WsProvider(wsProvider);
          console.log('provider');
          ss58Format = ss58;
          api = await new ApiPromise({ provider }).isReady;
          votServer = veilOfTimeServerHttpApiAddress;
          initialized = true;
          console.log('initialized');
          return {
              result: 'success'
          }
      } catch (error) {
          console.error(error);
          return {
              result: 'error',
              error
          }
      }
  };
  const buyNft = async (sender, nftId, sellerAddress, price) => {
      return new Promise(async (res, rej) => {
          try {
              if(!initialized) {
                  throw new Error("Not Initialized")
              }

              let isBeingBought = await isNftBeingBought(nftId);
              if(isBeingBought) {
                  return res()
              }
              const { balance } = await getMyBalance(sender.address);

              if(parseFloat(price) >= parseFloat(balance)) {
                  console.log(`Insufficient Balance ${balance} to purchase an Item for ${price}`);
                  return res()
              }

              let remarks = [];
              let formattedPrice = BigInt(price*100) * BigInt(10000000000);
              formattedPrice = formattedPrice.toString();
              remarks.push(api.tx.system.remark(
                  `RMRK::BUY::2.0.0::${nftId}`,
              ));
              remarks.push(api.tx.balances.transfer(sellerAddress, formattedPrice));
              const tx = api.tx.utility.batchAll(remarks);
              await tx.signAndSend(sender, { signer: sender.sign }, async (result) => {
                  if (result.status.isInBlock) {
                      console.log(`pending...`);
                  } else if (result.status.isFinalized) {
                      console.log(result);
                      return res(result)
                  }
              });
          } catch(error) {
              console.error(`Error buying nft : ${error}`);
              return rej(error)
          }
      })
  };
  const listNft = async (sender, nftId, price) => {
      return new Promise(async (res, rej) => {
          try {
              if(!initialized) {
                  return rej("Not Initialized")
              }
              let remarks = [];
              let formattedPrice = BigInt(price*100) * BigInt(10000000000);
              formattedPrice = formattedPrice.toString();
              //console.log(`Listing Item For Sale: RMRK::LIST::2.0.0::${nftId}::${formattedPrice}`)
              remarks.push(api.tx.system.remark(
                  `RMRK::LIST::2.0.0::${nftId}::${formattedPrice}`,
              ));
              const tx = api.tx.utility.batchAll(remarks);
              await tx.signAndSend(sender, { signer: sender.sign }, async (result) => {
                  if (result.status.isInBlock) {
                      console.log(`pending...`);
                  } else if (result.status.isFinalized) {
                      console.log(result);
                      return res(true)
                  }
              });
          } catch(error) {
              console.error(`Error listing nft for sale : ${error}`);
              return rej(error)
          }
      })
  };
  const isNftBeingBought = nftId => {
      return new Promise( res => {
          let xmlHttp = new XMLHttpRequest();
          xmlHttp.onreadystatechange = function() {
              if (xmlHttp.readyState === 4 && xmlHttp.status === 200)
                  return res(xmlHttp.responseText === 'true');
          };
          console.log(votServer+"/is_nft_being_bought/" + nftId);
          xmlHttp.open("GET", votServer + "/is_nft_being_bought/" + nftId, true); // true for asynchronous
          xmlHttp.send(null);
      })
  };
  const getNftsForSale = collection => {
      return new Promise( res => {
          let xmlHttp = new XMLHttpRequest();
          xmlHttp.onreadystatechange = function() {
              if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
                  let array = JSON.parse(xmlHttp.responseText);
                  for(let val of array) {
                      val.forsale = convertKsmToDisplay(val.forsale) + " KSM";
                  }
                  return res(JSON.stringify(array));
              }
          };
          console.log(votServer+"/get_nfts_for_sale_in_collection/" + collection);
          xmlHttp.open("GET", votServer + "/get_nfts_for_sale_in_collection/" + collection, true); // true for asynchronous
          xmlHttp.send(null);
      })
  };
  const getWhiteListedCollections = () => {
      return new Promise( res => {
          let xmlHttp = new XMLHttpRequest();
          xmlHttp.onreadystatechange = function() {
              if (xmlHttp.readyState === 4 && xmlHttp.status === 200)
                  return res(xmlHttp.responseText);
          };
          console.log(votServer+"/get_whitelisted_collections");
          xmlHttp.open("GET", votServer + "/get_whitelisted_collections", true); // true for asynchronous
          xmlHttp.send(null);
      })
  };
  const getMyNfts = address => {
      return new Promise( res => {
          let xmlHttp = new XMLHttpRequest();
          xmlHttp.onreadystatechange = function() {
              if (xmlHttp.readyState === 4 && xmlHttp.status === 200) {
                  const json = JSON.parse(xmlHttp.responseText);
                  console.log(json);
                  return res(xmlHttp.responseText);
              }
          };
          console.log(votServer+"/get_nfts_owned_by/"+address);
          xmlHttp.open("GET", votServer + "/get_nfts_owned_by/" + address, true); // true for asynchronous
          xmlHttp.send(null);
      })
  };
  const getNft = async nftId => {
      let nft = JSON.parse(
                      await getNftRequest(nftId)
                  );
      let equipSlots = [];
      if(nft.hasOwnProperty('resources')) {
          nft.resources.forEach(resource => {
              if(resource.hasOwnProperty('slot')) {
                  resource.slot = resource.slot.replace(/'/g, '');
                  let baseArray = resource.slot.split('.');
                  if(baseArray.length === 2) {
                      let base = baseArray[0];
                      let slot = baseArray[1];
                      equipSlots.push({
                          base,
                          slot
                      });
                  }

              }
          });
      }
      nft.equipSlots = equipSlots;
      return JSON.stringify(nft)
  };
  const sendNft = async (sender, nftId, recipient) => {
      return new Promise(async (res, rej) => {
          try {
              if(!initialized) {
                  console.error('Not Initialized');
                  return rej(false)
              }
              let remarks = [];
              remarks.push(api.tx.system.remark(
                  `RMRK::SEND::2.0.0::${nftId}::${recipient}`,
              ));

              const tx = api.tx.utility.batchAll(remarks);
              await tx.signAndSend(sender, { signer: sender.sign }, async (result) => {
                  if (result.status.isInBlock) {
                      console.log(`pending...`);
                  } else if (result.status.isFinalized) {
                      console.log(result);
                      return res(true)
                  }
              });
          } catch(error) {
              console.error(`Error sending : ${error}`);
              return rej(false)
          }
      })
  };
  const equipNft = async (sender, nftId, equipSlot) => {
      return new Promise(async (res, rej) => {
          try {
              if(!initialized) {
                  console.error('Not Initialized');
                  return rej(false)
              }

              let remarks = [];

              let baseSlot;
              if(!equipSlot) {    //Unequipping
              } else {            //Equipping
                  if(!equipSlot.hasOwnProperty('base') || !equipSlot.hasOwnProperty('slot')) {
                      console.error('Invalid equipSlot! (Missing base or slot?)');
                      return rej(false)
                  }
                  const { base, slot } = equipSlot;
                  baseSlot = `${base}.${slot}`;

                  /*
                          We need to check whether another nft is already equipped
                          in this slot. If so, batch an unequip RMRK
                  */

                  let thisNft = JSON.parse(
                      await getNft(nftId)
                  );
                  let owner = thisNft.owner;   //Get Current Parent of this Nft

                  let nft = JSON.parse(
                      await getNft(owner)     //Get Owner Nft
                  );
                  if(nft.hasOwnProperty('children')) {
                      const children = nft.children.filter(r => {
                          if(!r.hasOwnProperty('equipped')) {
                              return false
                          }
                          const baseArray = r.equipped.split('.');
                          if(baseArray.length !== 2) {
                              return false
                          }
                          let b = baseArray[0];
                          let s = baseArray[1];
                          return `${b}.${s}` === baseSlot;
                      });

                      if(children.length > 0) {
                          console.log(`Unequipping:`);
                      }
                      for(let child of children) {    //Unequip Transactions
                          console.log(`RMRK::EQUIP::2.0.0::${child.id}::`);
                          remarks.push(api.tx.system.remark(
                              `RMRK::EQUIP::2.0.0::${child.id}::`,
                          ));
                      }
                  }
              }
              console.log(`RMRK::EQUIP::2.0.0::${nftId}::${baseSlot}`);
              remarks.push(api.tx.system.remark(
                  `RMRK::EQUIP::2.0.0::${nftId}::${baseSlot}`,
              ));

              const tx = api.tx.utility.batchAll(remarks);
              await tx.signAndSend(sender, { signer: sender.sign }, async (result) => {
                  if (result.status.isInBlock) {
                      console.log(`pending...`);
                  } else if (result.status.isFinalized) {
                      console.log(result);
                      return res(true)
                  }
              });

          } catch(error) {
              console.error(`Error Equipping: ${error}`);
              return rej(false)
          }
      })
  };
  const getNewAddress = async (password = false) => {
      try {
          const mnemonic = mnemonicGenerate();
          let keyring = new Keyring({ type: 'sr25519', ss58Format });
          const keypair = keyring.addFromUri(mnemonic, { name: 'sr25519' });
          let encrypted = null;
          if(password) {
              encrypted = await encrypt(mnemonic, password);
          }
          return {
              mnemonic,
              address: keypair.address,
              encrypted
          }
      } catch(error) {
          console.error(`Error getting New Address : ${error}`);
          return {
              result: 'error',
              error
          }
      }
  };
  const getNewAddressFromMnemonic = async (mnemonic) => {
      try {
          let keyring = new Keyring({ type: 'sr25519', ss58Format });
          return keyring.addFromUri(mnemonic, { name: 'sr25519' });
      } catch(error) {
          console.error(`Error getting New Address From Mnemonic : ${error}`);
          return {
              result: 'error',
              error
          }
      }
  };
  const getMyBalance = async (address) => {
      try {
          if(!initialized) {
              throw new Error("Not Initialized")
          }
          const { data: { free: previousFree }, nonce: previousNonce } = await api.query.system.account(address);

          return {
              b: previousFree,
              balanceHuman: previousFree.toHuman(),
              balance: convertKsmToDisplay(previousFree),
              n: previousNonce,
              nonce: previousNonce.toHuman()
          }
      } catch(error) {
          console.error(`Error getting Balance : ${error}`);
          return {
              result: 'error',
              error
          }
      }
  };


  const convertKsmToDisplay = amount => {
      console.log(`Converting KSM Amount ${amount} to Display`);
      let balance = (BigInt(amount) / BigInt(1000000000)).toString();

      let balanceString = parseInt(balance);
      let phraseIndex = 0;
      let phrases = [
          "",
          "",
          " K",
          " M",
          " B",
          " T"
      ];

      if(balanceString < 10) {
          balanceString = "0.00";
      } else if(balanceString <= 1000) {
          balanceString /= 1000;
          balanceString = balanceString.toString();
      }

      while(balanceString >= (1000)) {
          balanceString /= 1000;
          console.log(balanceString);
          phraseIndex++;
      }

      balanceString = balanceString.toString().split(".");
      if(balanceString.length > 1) {
          balanceString[1] = balanceString[1].substr(0, 2);
      }
      balanceString = balanceString.join('.');
      balanceString += phrases[phraseIndex];

      console.log(`Returning ${balanceString}`);
      return balanceString

  };

  /*
          Export
  */

  window.initializeVeilOfTimeNft = initializeVeilOfTimeNft;
  window.decrypt = decrypt;
  window.encrypt = encrypt;
  window.sendNft = sendNft;
  window.getMyBalance = getMyBalance;
  window.getNewAddress = getNewAddress;
  window.getNewAddressFromMnemonic = getNewAddressFromMnemonic;
  window.equipNft = equipNft;
  window.getNft = getNft;
  window.getMyNfts = getMyNfts;
  window.getWhiteListedCollections = getWhiteListedCollections;
  window.getNftsForSale = getNftsForSale;
  window.listNft = listNft;
  window.buyNft = buyNft;

})();
